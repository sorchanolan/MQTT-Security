
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

00000000 <_vector_table>:

#include <crc16.h>

u16_t crc16(const u8_t *src, size_t len, u16_t polynomial,
	    u16_t initial_value, bool pad)
{
       0:	2000aab8 	.word	0x2000aab8
       4:	000270f1 	.word	0x000270f1
	u16_t crc = initial_value;
	size_t padding = pad ? sizeof(crc) : 0;
       8:	00027151 	.word	0x00027151
	size_t i, b;

	/* src length + padding (if required) */
	for (i = 0; i < len + padding; i++) {
       c:	00026f85 	.word	0x00026f85
	size_t padding = pad ? sizeof(crc) : 0;
      10:	00026f85 	.word	0x00026f85
      14:	00026f85 	.word	0x00026f85
			/* choose input bytes or implicit trailing zeros */
			if (i < len) {
				crc |= !!(src[i] & (0x80 >> b));
			}

			if (divide) {
      18:	00026f85 	.word	0x00026f85
		for (b = 0; b < 8; b++) {
      1c:	00026f85 	.word	0x00026f85
      20:	00026f85 	.word	0x00026f85
			crc = (crc << 1);
      24:	00026f85 	.word	0x00026f85
			if (i < len) {
      28:	00026f85 	.word	0x00026f85
				crc |= !!(src[i] & (0x80 >> b));
      2c:	00026ad5 	.word	0x00026ad5
      30:	00026f85 	.word	0x00026f85
      34:	00026f85 	.word	0x00026f85
      38:	00026a91 	.word	0x00026a91
      3c:	00026f85 	.word	0x00026f85

00000040 <_irq_vector_table>:
				crc = crc ^ polynomial;
      40:	000270b5 000187fd 000270b5 000270b5     .p.......p...p..
	for (i = 0; i < len + padding; i++) {
      50:	000270b5 000270b5 000270b5 000270b5     .p...p...p...p..
}

static inline void add_round_key(uint8_t *s, const unsigned int *k)
{
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
      60:	000270b5 000270b5 000270b5 000270b5     .p...p...p...p..
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
      70:	000270b5 000270b5 000270b5 000270b5     .p...p...p...p..
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
      80:	000270b5 000270b5 000270b5 000270b5     .p...p...p...p..
      90:	000270b5 000270b5 000270b5 000270b5     .p...p...p...p..
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
      a0:	000270b5 000270b5 000270b5 000270b5     .p...p...p...p..
      b0:	000270b5 000270b5 000270b5 000270b5     .p...p...p...p..
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
      c0:	000270b5 000270b5 000270b5 000270b5     .p...p...p...p..
      d0:	000270b5 000270b5 000270b5              .p...p...p..

000000dc <_sw_isr_table>:
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
      dc:	00000000 0000299d 00000000 00026ef1     .....).......n..
      ec:	2000cedc 000022d7 00000000 00026ef1     ... .".......n..
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
      fc:	00000000 00026ef1 00000000 00026ef1     .....n.......n..

	(void)_copy(state, sizeof(state), in, sizeof(state));

	add_round_key(state, s->words + Nb*Nr);

	for (i = Nr - 1; i > 0; --i) {
     10c:	2000cf18 000026ab 00000000 00026ef1     ... .&.......n..
	for (i = 0; i < (Nb*Nk); ++i) {
     11c:	00000000 00026ef1 00000000 00026ef1     .....n.......n..
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
     12c:	00000000 00026ef1 00000000 0001881d     .....n..........
     13c:	00000000 00026ef1 00000000 0001885f     .....n......_...
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
     14c:	00000000 00026ef1 00000000 00026ef1     .....n.......n..
     15c:	00000000 00026ef1 00000000 0000241d     .....n.......$..
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
     16c:	00000000 00026ef1 00000000 00026ef1     .....n.......n..
     17c:	00000000 00026ef1 00000000 00026ef1     .....n.......n..
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
     18c:	00000000 00026ef1 00000000 00026ef1     .....n.......n..
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
     19c:	00000000 00018855 00000000 00026ef1     ....U........n..
     1ac:	00000000 00026ef1 00000000 00026ef1     .....n.......n..
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
     1bc:	00000000 00026ef1 00000000 00026ef1     .....n.......n..
     1cc:	00000000 00026ef1 00000000 00026ef1     .....n.......n..
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
     1dc:	00000000 00026ef1 00000000 00026ef1     .....n.......n..
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
     1ec:	00000000 00026ef1 00000000 00026ef1     .....n.......n..
     1fc:	00000000 00026ef1 00000000 00026ef1     .....n.......n..
	out[0] = multe(in[0]) ^ multb(in[1]) ^ multd(in[2]) ^ mult9(in[3]);
     20c:	00000000 00026ef1                       .....n..

00000214 <_image_text_start>:
	...

00000220 <memchr>:
     220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     224:	2a10      	cmp	r2, #16
     226:	db2b      	blt.n	280 <CONFIG_BT_HCI_TX_STACK_SIZE>
     228:	f010 0f07 	tst.w	r0, #7
     22c:	d008      	beq.n	240 <memchr+0x20>
     22e:	f810 3b01 	ldrb.w	r3, [r0], #1
     232:	3a01      	subs	r2, #1
     234:	428b      	cmp	r3, r1
     236:	d02d      	beq.n	294 <CONFIG_BT_HCI_TX_STACK_SIZE+0x14>
     238:	f010 0f07 	tst.w	r0, #7
     23c:	b342      	cbz	r2, 290 <CONFIG_BT_HCI_TX_STACK_SIZE+0x10>
     23e:	d1f6      	bne.n	22e <memchr+0xe>
     240:	b4f0      	push	{r4, r5, r6, r7}
     242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
     246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
     24a:	f022 0407 	bic.w	r4, r2, #7
     24e:	f07f 0700 	mvns.w	r7, #0
     252:	2300      	movs	r3, #0
     254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
     258:	3c08      	subs	r4, #8
     25a:	ea85 0501 	eor.w	r5, r5, r1
     25e:	ea86 0601 	eor.w	r6, r6, r1
     262:	fa85 f547 	uadd8	r5, r5, r7
     266:	faa3 f587 	sel	r5, r3, r7
     26a:	fa86 f647 	uadd8	r6, r6, r7
     26e:	faa5 f687 	sel	r6, r5, r7
     272:	b98e      	cbnz	r6, 298 <CONFIG_BT_HCI_TX_STACK_SIZE+0x18>
     274:	d1ee      	bne.n	254 <memchr+0x34>
     276:	bcf0      	pop	{r4, r5, r6, r7}
     278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     27c:	f002 0207 	and.w	r2, r2, #7
     280:	b132      	cbz	r2, 290 <CONFIG_BT_HCI_TX_STACK_SIZE+0x10>
     282:	f810 3b01 	ldrb.w	r3, [r0], #1
     286:	3a01      	subs	r2, #1
     288:	ea83 0301 	eor.w	r3, r3, r1
     28c:	b113      	cbz	r3, 294 <CONFIG_BT_HCI_TX_STACK_SIZE+0x14>
     28e:	d1f8      	bne.n	282 <CONFIG_BT_HCI_TX_STACK_SIZE+0x2>
     290:	2000      	movs	r0, #0
     292:	4770      	bx	lr
     294:	3801      	subs	r0, #1
     296:	4770      	bx	lr
     298:	2d00      	cmp	r5, #0
	out[1] = mult9(in[0]) ^ multe(in[1]) ^ multb(in[2]) ^ multd(in[3]);
     29a:	bf06      	itte	eq
     29c:	4635      	moveq	r5, r6
     29e:	3803      	subeq	r0, #3
     2a0:	3807      	subne	r0, #7
     2a2:	f015 0f01 	tst.w	r5, #1
     2a6:	d107      	bne.n	2b8 <CONFIG_BT_HCI_TX_STACK_SIZE+0x38>
     2a8:	3001      	adds	r0, #1
     2aa:	f415 7f80 	tst.w	r5, #256	; 0x100
     2ae:	bf02      	ittt	eq
     2b0:	3001      	addeq	r0, #1
     2b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
     2b6:	3001      	addeq	r0, #1
     2b8:	bcf0      	pop	{r4, r5, r6, r7}
     2ba:	3801      	subs	r0, #1
     2bc:	4770      	bx	lr
     2be:	bf00      	nop

000002c0 <memcpy>:
     2c0:	4684      	mov	ip, r0
     2c2:	ea41 0300 	orr.w	r3, r1, r0
     2c6:	f013 0303 	ands.w	r3, r3, #3
     2ca:	d16d      	bne.n	3a8 <memcpy+0xe8>
     2cc:	3a40      	subs	r2, #64	; 0x40
     2ce:	d341      	bcc.n	354 <memcpy+0x94>
     2d0:	f851 3b04 	ldr.w	r3, [r1], #4
     2d4:	f840 3b04 	str.w	r3, [r0], #4
     2d8:	f851 3b04 	ldr.w	r3, [r1], #4
     2dc:	f840 3b04 	str.w	r3, [r0], #4
     2e0:	f851 3b04 	ldr.w	r3, [r1], #4
     2e4:	f840 3b04 	str.w	r3, [r0], #4
     2e8:	f851 3b04 	ldr.w	r3, [r1], #4
     2ec:	f840 3b04 	str.w	r3, [r0], #4
     2f0:	f851 3b04 	ldr.w	r3, [r1], #4
     2f4:	f840 3b04 	str.w	r3, [r0], #4
     2f8:	f851 3b04 	ldr.w	r3, [r1], #4
     2fc:	f840 3b04 	str.w	r3, [r0], #4
     300:	f851 3b04 	ldr.w	r3, [r1], #4
     304:	f840 3b04 	str.w	r3, [r0], #4
     308:	f851 3b04 	ldr.w	r3, [r1], #4
     30c:	f840 3b04 	str.w	r3, [r0], #4
     310:	f851 3b04 	ldr.w	r3, [r1], #4
     314:	f840 3b04 	str.w	r3, [r0], #4
     318:	f851 3b04 	ldr.w	r3, [r1], #4
     31c:	f840 3b04 	str.w	r3, [r0], #4
     320:	f851 3b04 	ldr.w	r3, [r1], #4
     324:	f840 3b04 	str.w	r3, [r0], #4
     328:	f851 3b04 	ldr.w	r3, [r1], #4
     32c:	f840 3b04 	str.w	r3, [r0], #4
     330:	f851 3b04 	ldr.w	r3, [r1], #4
	out[2] = multd(in[0]) ^ mult9(in[1]) ^ multe(in[2]) ^ multb(in[3]);
     334:	f840 3b04 	str.w	r3, [r0], #4
     338:	f851 3b04 	ldr.w	r3, [r1], #4
     33c:	f840 3b04 	str.w	r3, [r0], #4
     340:	f851 3b04 	ldr.w	r3, [r1], #4
     344:	f840 3b04 	str.w	r3, [r0], #4
     348:	f851 3b04 	ldr.w	r3, [r1], #4
     34c:	f840 3b04 	str.w	r3, [r0], #4
     350:	3a40      	subs	r2, #64	; 0x40
     352:	d2bd      	bcs.n	2d0 <memcpy+0x10>
     354:	3230      	adds	r2, #48	; 0x30
     356:	d311      	bcc.n	37c <memcpy+0xbc>
     358:	f851 3b04 	ldr.w	r3, [r1], #4
     35c:	f840 3b04 	str.w	r3, [r0], #4
     360:	f851 3b04 	ldr.w	r3, [r1], #4
     364:	f840 3b04 	str.w	r3, [r0], #4
     368:	f851 3b04 	ldr.w	r3, [r1], #4
     36c:	f840 3b04 	str.w	r3, [r0], #4
     370:	f851 3b04 	ldr.w	r3, [r1], #4
     374:	f840 3b04 	str.w	r3, [r0], #4
     378:	3a10      	subs	r2, #16
     37a:	d2ed      	bcs.n	358 <memcpy+0x98>
     37c:	320c      	adds	r2, #12
     37e:	d305      	bcc.n	38c <memcpy+0xcc>
     380:	f851 3b04 	ldr.w	r3, [r1], #4
     384:	f840 3b04 	str.w	r3, [r0], #4
     388:	3a04      	subs	r2, #4
     38a:	d2f9      	bcs.n	380 <memcpy+0xc0>
     38c:	3204      	adds	r2, #4
     38e:	d008      	beq.n	3a2 <memcpy+0xe2>
     390:	07d2      	lsls	r2, r2, #31
     392:	bf1c      	itt	ne
     394:	f811 3b01 	ldrbne.w	r3, [r1], #1
     398:	f800 3b01 	strbne.w	r3, [r0], #1
     39c:	d301      	bcc.n	3a2 <memcpy+0xe2>
     39e:	880b      	ldrh	r3, [r1, #0]
     3a0:	8003      	strh	r3, [r0, #0]
     3a2:	4660      	mov	r0, ip
     3a4:	4770      	bx	lr
     3a6:	bf00      	nop
     3a8:	2a08      	cmp	r2, #8
     3aa:	d313      	bcc.n	3d4 <memcpy+0x114>
     3ac:	078b      	lsls	r3, r1, #30
     3ae:	d08d      	beq.n	2cc <memcpy+0xc>
     3b0:	f010 0303 	ands.w	r3, r0, #3
     3b4:	d08a      	beq.n	2cc <memcpy+0xc>
     3b6:	f1c3 0304 	rsb	r3, r3, #4
     3ba:	1ad2      	subs	r2, r2, r3
     3bc:	07db      	lsls	r3, r3, #31
     3be:	bf1c      	itt	ne
     3c0:	f811 3b01 	ldrbne.w	r3, [r1], #1
     3c4:	f800 3b01 	strbne.w	r3, [r0], #1
     3c8:	d380      	bcc.n	2cc <memcpy+0xc>
     3ca:	f831 3b02 	ldrh.w	r3, [r1], #2
	out[3] = multb(in[0]) ^ multd(in[1]) ^ mult9(in[2]) ^ multe(in[3]);
     3ce:	f820 3b02 	strh.w	r3, [r0], #2
     3d2:	e77b      	b.n	2cc <memcpy+0xc>
     3d4:	3a04      	subs	r2, #4
     3d6:	d3d9      	bcc.n	38c <memcpy+0xcc>
     3d8:	3a01      	subs	r2, #1
     3da:	f811 3b01 	ldrb.w	r3, [r1], #1
     3de:	f800 3b01 	strb.w	r3, [r0], #1
     3e2:	d2f9      	bcs.n	3d8 <memcpy+0x118>
     3e4:	780b      	ldrb	r3, [r1, #0]
     3e6:	7003      	strb	r3, [r0, #0]
     3e8:	784b      	ldrb	r3, [r1, #1]
     3ea:	7043      	strb	r3, [r0, #1]
     3ec:	788b      	ldrb	r3, [r1, #2]
     3ee:	7083      	strb	r3, [r0, #2]
     3f0:	4660      	mov	r0, ip
     3f2:	4770      	bx	lr
	...
     400:	eba2 0003 	sub.w	r0, r2, r3
     404:	4770      	bx	lr
     406:	bf00      	nop

00000408 <strcmp>:
     408:	7802      	ldrb	r2, [r0, #0]
     40a:	780b      	ldrb	r3, [r1, #0]
     40c:	2a01      	cmp	r2, #1
     40e:	bf28      	it	cs
     410:	429a      	cmpcs	r2, r3
     412:	d1f5      	bne.n	400 <CONFIG_BT_RX_STACK_SIZE>
     414:	e96d 4504 	strd	r4, r5, [sp, #-16]!
     418:	ea40 0401 	orr.w	r4, r0, r1
     41c:	e9cd 6702 	strd	r6, r7, [sp, #8]
     420:	f06f 0c00 	mvn.w	ip, #0
     424:	ea4f 7244 	mov.w	r2, r4, lsl #29
     428:	b312      	cbz	r2, 470 <strcmp+0x68>
     42a:	ea80 0401 	eor.w	r4, r0, r1
     42e:	f014 0f07 	tst.w	r4, #7
     432:	d16a      	bne.n	50a <CONFIG_NET_TX_STACK_SIZE+0x5a>
     434:	f000 0407 	and.w	r4, r0, #7
     438:	f020 0007 	bic.w	r0, r0, #7
     43c:	f004 0503 	and.w	r5, r4, #3
     440:	f021 0107 	bic.w	r1, r1, #7
     444:	ea4f 05c5 	mov.w	r5, r5, lsl #3
     448:	e8f0 2304 	ldrd	r2, r3, [r0], #16
     44c:	f014 0f04 	tst.w	r4, #4
     450:	e8f1 6704 	ldrd	r6, r7, [r1], #16
     454:	fa0c f405 	lsl.w	r4, ip, r5
     458:	ea62 0204 	orn	r2, r2, r4
     45c:	ea66 0604 	orn	r6, r6, r4
     460:	d00a      	beq.n	478 <strcmp+0x70>
     462:	ea63 0304 	orn	r3, r3, r4
     466:	4662      	mov	r2, ip
	out[0] = multe(in[0]) ^ multb(in[1]) ^ multd(in[2]) ^ mult9(in[3]);
     468:	ea67 0704 	orn	r7, r7, r4
     46c:	4666      	mov	r6, ip
     46e:	e003      	b.n	478 <strcmp+0x70>
     470:	e8f0 2304 	ldrd	r2, r3, [r0], #16
     474:	e8f1 6704 	ldrd	r6, r7, [r1], #16
     478:	fa82 f54c 	uadd8	r5, r2, ip
     47c:	ea82 0406 	eor.w	r4, r2, r6
     480:	faa4 f48c 	sel	r4, r4, ip
     484:	bb6c      	cbnz	r4, 4e2 <CONFIG_NET_TX_STACK_SIZE+0x32>
     486:	fa83 f54c 	uadd8	r5, r3, ip
     48a:	ea83 0507 	eor.w	r5, r3, r7
     48e:	faa5 f58c 	sel	r5, r5, ip
     492:	b995      	cbnz	r5, 4ba <CONFIG_NET_TX_STACK_SIZE+0xa>
     494:	e950 2302 	ldrd	r2, r3, [r0, #-8]
     498:	e951 6702 	ldrd	r6, r7, [r1, #-8]
     49c:	fa82 f54c 	uadd8	r5, r2, ip
     4a0:	ea82 0406 	eor.w	r4, r2, r6
     4a4:	faa4 f48c 	sel	r4, r4, ip
     4a8:	fa83 f54c 	uadd8	r5, r3, ip
     4ac:	ea83 0507 	eor.w	r5, r3, r7
     4b0:	faa5 f58c 	sel	r5, r5, ip
     4b4:	4325      	orrs	r5, r4
     4b6:	d0db      	beq.n	470 <strcmp+0x68>
     4b8:	b99c      	cbnz	r4, 4e2 <CONFIG_NET_TX_STACK_SIZE+0x32>
     4ba:	ba2d      	rev	r5, r5
     4bc:	fab5 f485 	clz	r4, r5
     4c0:	f024 0407 	bic.w	r4, r4, #7
     4c4:	fa27 f104 	lsr.w	r1, r7, r4
     4c8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
     4cc:	fa23 f304 	lsr.w	r3, r3, r4
     4d0:	f003 00ff 	and.w	r0, r3, #255	; 0xff
     4d4:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     4d8:	e8fd 4504 	ldrd	r4, r5, [sp], #16
     4dc:	eba0 0001 	sub.w	r0, r0, r1
     4e0:	4770      	bx	lr
     4e2:	ba24      	rev	r4, r4
     4e4:	fab4 f484 	clz	r4, r4
     4e8:	f024 0407 	bic.w	r4, r4, #7
     4ec:	fa26 f104 	lsr.w	r1, r6, r4
     4f0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
     4f4:	fa22 f204 	lsr.w	r2, r2, r4
     4f8:	f002 00ff 	and.w	r0, r2, #255	; 0xff
     4fc:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     500:	e8fd 4504 	ldrd	r4, r5, [sp], #16
	out[1] = mult9(in[0]) ^ multe(in[1]) ^ multb(in[2]) ^ multd(in[3]);
     504:	eba0 0001 	sub.w	r0, r0, r1
     508:	4770      	bx	lr
     50a:	f014 0f03 	tst.w	r4, #3
     50e:	d13c      	bne.n	58a <CONFIG_NET_TX_STACK_SIZE+0xda>
     510:	f010 0403 	ands.w	r4, r0, #3
     514:	d128      	bne.n	568 <CONFIG_NET_TX_STACK_SIZE+0xb8>
     516:	f850 2b08 	ldr.w	r2, [r0], #8
     51a:	f851 3b08 	ldr.w	r3, [r1], #8
     51e:	fa82 f54c 	uadd8	r5, r2, ip
     522:	ea82 0503 	eor.w	r5, r2, r3
     526:	faa5 f58c 	sel	r5, r5, ip
     52a:	b95d      	cbnz	r5, 544 <CONFIG_NET_TX_STACK_SIZE+0x94>
     52c:	f850 2c04 	ldr.w	r2, [r0, #-4]
     530:	f851 3c04 	ldr.w	r3, [r1, #-4]
     534:	fa82 f54c 	uadd8	r5, r2, ip
     538:	ea82 0503 	eor.w	r5, r2, r3
     53c:	faa5 f58c 	sel	r5, r5, ip
     540:	2d00      	cmp	r5, #0
     542:	d0e8      	beq.n	516 <CONFIG_NET_TX_STACK_SIZE+0x66>
     544:	ba2d      	rev	r5, r5
     546:	fab5 f485 	clz	r4, r5
     54a:	f024 0407 	bic.w	r4, r4, #7
     54e:	fa23 f104 	lsr.w	r1, r3, r4
     552:	fa22 f204 	lsr.w	r2, r2, r4
     556:	f002 00ff 	and.w	r0, r2, #255	; 0xff
     55a:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     55e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
     562:	eba0 0001 	sub.w	r0, r0, r1
     566:	4770      	bx	lr
     568:	ea4f 04c4 	mov.w	r4, r4, lsl #3
     56c:	f020 0003 	bic.w	r0, r0, #3
     570:	f850 2b08 	ldr.w	r2, [r0], #8
     574:	f021 0103 	bic.w	r1, r1, #3
     578:	f851 3b08 	ldr.w	r3, [r1], #8
     57c:	fa0c f404 	lsl.w	r4, ip, r4
     580:	ea62 0204 	orn	r2, r2, r4
     584:	ea63 0304 	orn	r3, r3, r4
     588:	e7c9      	b.n	51e <CONFIG_NET_TX_STACK_SIZE+0x6e>
     58a:	f010 0403 	ands.w	r4, r0, #3
     58e:	d01a      	beq.n	5c6 <CONFIG_NET_TX_STACK_SIZE+0x116>
     590:	eba1 0104 	sub.w	r1, r1, r4
     594:	f020 0003 	bic.w	r0, r0, #3
     598:	07e4      	lsls	r4, r4, #31
     59a:	f850 2b04 	ldr.w	r2, [r0], #4
	out[2] = multd(in[0]) ^ mult9(in[1]) ^ multe(in[2]) ^ multb(in[3]);
     59e:	d006      	beq.n	5ae <CONFIG_NET_TX_STACK_SIZE+0xfe>
     5a0:	d20f      	bcs.n	5c2 <CONFIG_NET_TX_STACK_SIZE+0x112>
     5a2:	788b      	ldrb	r3, [r1, #2]
     5a4:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
     5a8:	1ae4      	subs	r4, r4, r3
     5aa:	d106      	bne.n	5ba <CONFIG_NET_TX_STACK_SIZE+0x10a>
     5ac:	b12b      	cbz	r3, 5ba <CONFIG_NET_TX_STACK_SIZE+0x10a>
     5ae:	78cb      	ldrb	r3, [r1, #3]
     5b0:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
     5b4:	1ae4      	subs	r4, r4, r3
     5b6:	d100      	bne.n	5ba <CONFIG_NET_TX_STACK_SIZE+0x10a>
     5b8:	b91b      	cbnz	r3, 5c2 <CONFIG_NET_TX_STACK_SIZE+0x112>
     5ba:	4620      	mov	r0, r4
     5bc:	f85d 4b10 	ldr.w	r4, [sp], #16
     5c0:	4770      	bx	lr
     5c2:	f101 0104 	add.w	r1, r1, #4
     5c6:	f850 2b04 	ldr.w	r2, [r0], #4
     5ca:	07cc      	lsls	r4, r1, #31
     5cc:	f021 0103 	bic.w	r1, r1, #3
     5d0:	f851 3b04 	ldr.w	r3, [r1], #4
     5d4:	d848      	bhi.n	668 <CONFIG_NET_RX_STACK_SIZE+0x8c>
     5d6:	d224      	bcs.n	622 <CONFIG_NET_RX_STACK_SIZE+0x46>
     5d8:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
     5dc:	fa82 f54c 	uadd8	r5, r2, ip
     5e0:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
     5e4:	faa5 f58c 	sel	r5, r5, ip
     5e8:	d10a      	bne.n	600 <CONFIG_NET_RX_STACK_SIZE+0x24>
     5ea:	b965      	cbnz	r5, 606 <CONFIG_NET_RX_STACK_SIZE+0x2a>
     5ec:	f851 3b04 	ldr.w	r3, [r1], #4
     5f0:	ea84 0402 	eor.w	r4, r4, r2
     5f4:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
     5f8:	d10e      	bne.n	618 <CONFIG_NET_RX_STACK_SIZE+0x3c>
     5fa:	f850 2b04 	ldr.w	r2, [r0], #4
     5fe:	e7eb      	b.n	5d8 <CONFIG_NET_TX_STACK_SIZE+0x128>
     600:	ea4f 2313 	mov.w	r3, r3, lsr #8
     604:	e055      	b.n	6b2 <CONFIG_NET_RX_STACK_SIZE+0xd6>
     606:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
     60a:	d14d      	bne.n	6a8 <CONFIG_NET_RX_STACK_SIZE+0xcc>
     60c:	7808      	ldrb	r0, [r1, #0]
     60e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
     612:	f1c0 0000 	rsb	r0, r0, #0
     616:	4770      	bx	lr
     618:	ea4f 6212 	mov.w	r2, r2, lsr #24
     61c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
     620:	e047      	b.n	6b2 <CONFIG_NET_RX_STACK_SIZE+0xd6>
     622:	ea02 441c 	and.w	r4, r2, ip, lsr #16
     626:	fa82 f54c 	uadd8	r5, r2, ip
     62a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
     62e:	faa5 f58c 	sel	r5, r5, ip
     632:	d10a      	bne.n	64a <CONFIG_NET_RX_STACK_SIZE+0x6e>
     634:	b965      	cbnz	r5, 650 <CONFIG_NET_RX_STACK_SIZE+0x74>
	out[3] = multb(in[0]) ^ multd(in[1]) ^ mult9(in[2]) ^ multe(in[3]);
     636:	f851 3b04 	ldr.w	r3, [r1], #4
     63a:	ea84 0402 	eor.w	r4, r4, r2
     63e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
     642:	d10c      	bne.n	65e <CONFIG_NET_RX_STACK_SIZE+0x82>
     644:	f850 2b04 	ldr.w	r2, [r0], #4
     648:	e7eb      	b.n	622 <CONFIG_NET_RX_STACK_SIZE+0x46>
     64a:	ea4f 4313 	mov.w	r3, r3, lsr #16
     64e:	e030      	b.n	6b2 <CONFIG_NET_RX_STACK_SIZE+0xd6>
     650:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
     654:	d128      	bne.n	6a8 <CONFIG_NET_RX_STACK_SIZE+0xcc>
     656:	880b      	ldrh	r3, [r1, #0]
     658:	ea4f 4212 	mov.w	r2, r2, lsr #16
     65c:	e029      	b.n	6b2 <CONFIG_NET_RX_STACK_SIZE+0xd6>
     65e:	ea4f 4212 	mov.w	r2, r2, lsr #16
     662:	ea03 431c 	and.w	r3, r3, ip, lsr #16
     666:	e024      	b.n	6b2 <CONFIG_NET_RX_STACK_SIZE+0xd6>
     668:	f002 04ff 	and.w	r4, r2, #255	; 0xff
     66c:	fa82 f54c 	uadd8	r5, r2, ip
     670:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
     674:	faa5 f58c 	sel	r5, r5, ip
     678:	d10a      	bne.n	690 <CONFIG_NET_RX_STACK_SIZE+0xb4>
     67a:	b965      	cbnz	r5, 696 <CONFIG_NET_RX_STACK_SIZE+0xba>
     67c:	f851 3b04 	ldr.w	r3, [r1], #4
     680:	ea84 0402 	eor.w	r4, r4, r2
     684:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
     688:	d109      	bne.n	69e <CONFIG_NET_RX_STACK_SIZE+0xc2>
     68a:	f850 2b04 	ldr.w	r2, [r0], #4
     68e:	e7eb      	b.n	668 <CONFIG_NET_RX_STACK_SIZE+0x8c>
     690:	ea4f 6313 	mov.w	r3, r3, lsr #24
     694:	e00d      	b.n	6b2 <CONFIG_NET_RX_STACK_SIZE+0xd6>
     696:	f015 0fff 	tst.w	r5, #255	; 0xff
     69a:	d105      	bne.n	6a8 <CONFIG_NET_RX_STACK_SIZE+0xcc>
     69c:	680b      	ldr	r3, [r1, #0]
     69e:	ea4f 2212 	mov.w	r2, r2, lsr #8
     6a2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     6a6:	e004      	b.n	6b2 <CONFIG_NET_RX_STACK_SIZE+0xd6>
     6a8:	f04f 0000 	mov.w	r0, #0
     6ac:	e8fd 4504 	ldrd	r4, r5, [sp], #16
     6b0:	4770      	bx	lr
     6b2:	ba12      	rev	r2, r2
     6b4:	ba1b      	rev	r3, r3
     6b6:	fa82 f44c 	uadd8	r4, r2, ip
     6ba:	ea82 0403 	eor.w	r4, r2, r3
     6be:	faa4 f58c 	sel	r5, r4, ip
     6c2:	fab5 f485 	clz	r4, r5
     6c6:	fa02 f204 	lsl.w	r2, r2, r4
     6ca:	fa03 f304 	lsl.w	r3, r3, r4
     6ce:	ea4f 6012 	mov.w	r0, r2, lsr #24
	out[0] = multe(in[0]) ^ multb(in[1]) ^ multd(in[2]) ^ mult9(in[3]);
     6d2:	e8fd 4504 	ldrd	r4, r5, [sp], #16
     6d6:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
     6da:	4770      	bx	lr
	...

00000700 <strlen>:
     700:	f890 f000 	pld	[r0]
     704:	e96d 4502 	strd	r4, r5, [sp, #-8]!
     708:	f020 0107 	bic.w	r1, r0, #7
     70c:	f06f 0c00 	mvn.w	ip, #0
     710:	f010 0407 	ands.w	r4, r0, #7
     714:	f891 f020 	pld	[r1, #32]
     718:	f040 8049 	bne.w	7ae <strlen+0xae>
     71c:	f04f 0400 	mov.w	r4, #0
     720:	f06f 0007 	mvn.w	r0, #7
     724:	e9d1 2300 	ldrd	r2, r3, [r1]
     728:	f891 f040 	pld	[r1, #64]	; 0x40
     72c:	f100 0008 	add.w	r0, r0, #8
     730:	fa82 f24c 	uadd8	r2, r2, ip
     734:	faa4 f28c 	sel	r2, r4, ip
     738:	fa83 f34c 	uadd8	r3, r3, ip
     73c:	faa2 f38c 	sel	r3, r2, ip
     740:	bb4b      	cbnz	r3, 796 <strlen+0x96>
     742:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
     746:	fa82 f24c 	uadd8	r2, r2, ip
     74a:	f100 0008 	add.w	r0, r0, #8
     74e:	faa4 f28c 	sel	r2, r4, ip
     752:	fa83 f34c 	uadd8	r3, r3, ip
     756:	faa2 f38c 	sel	r3, r2, ip
     75a:	b9e3      	cbnz	r3, 796 <strlen+0x96>
     75c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
     760:	fa82 f24c 	uadd8	r2, r2, ip
     764:	f100 0008 	add.w	r0, r0, #8
     768:	faa4 f28c 	sel	r2, r4, ip
	out[1] = mult9(in[0]) ^ multe(in[1]) ^ multb(in[2]) ^ multd(in[3]);
     76c:	fa83 f34c 	uadd8	r3, r3, ip
     770:	faa2 f38c 	sel	r3, r2, ip
     774:	b97b      	cbnz	r3, 796 <strlen+0x96>
     776:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
     77a:	f101 0120 	add.w	r1, r1, #32
     77e:	fa82 f24c 	uadd8	r2, r2, ip
     782:	f100 0008 	add.w	r0, r0, #8
     786:	faa4 f28c 	sel	r2, r4, ip
     78a:	fa83 f34c 	uadd8	r3, r3, ip
     78e:	faa2 f38c 	sel	r3, r2, ip
     792:	2b00      	cmp	r3, #0
     794:	d0c6      	beq.n	724 <strlen+0x24>
     796:	2a00      	cmp	r2, #0
     798:	bf04      	itt	eq
     79a:	3004      	addeq	r0, #4
     79c:	461a      	moveq	r2, r3
     79e:	ba12      	rev	r2, r2
     7a0:	fab2 f282 	clz	r2, r2
     7a4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
     7a8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
     7ac:	4770      	bx	lr
     7ae:	e9d1 2300 	ldrd	r2, r3, [r1]
     7b2:	f004 0503 	and.w	r5, r4, #3
     7b6:	f1c4 0000 	rsb	r0, r4, #0
     7ba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
     7be:	f014 0f04 	tst.w	r4, #4
     7c2:	f891 f040 	pld	[r1, #64]	; 0x40
     7c6:	fa0c f505 	lsl.w	r5, ip, r5
     7ca:	ea62 0205 	orn	r2, r2, r5
     7ce:	bf1c      	itt	ne
     7d0:	ea63 0305 	ornne	r3, r3, r5
     7d4:	4662      	movne	r2, ip
     7d6:	f04f 0400 	mov.w	r4, #0
     7da:	e7a9      	b.n	730 <strlen+0x30>

000007dc <__aeabi_drsub>:
     7dc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
     7e0:	e002      	b.n	7e8 <__adddf3>
     7e2:	bf00      	nop

000007e4 <__aeabi_dsub>:
     7e4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000007e8 <__adddf3>:
     7e8:	b530      	push	{r4, r5, lr}
     7ea:	ea4f 0441 	mov.w	r4, r1, lsl #1
     7ee:	ea4f 0543 	mov.w	r5, r3, lsl #1
     7f2:	ea94 0f05 	teq	r4, r5
     7f6:	bf08      	it	eq
     7f8:	ea90 0f02 	teqeq	r0, r2
     7fc:	bf1f      	itttt	ne
     7fe:	ea54 0c00 	orrsne.w	ip, r4, r0
     802:	ea55 0c02 	orrsne.w	ip, r5, r2
	out[2] = multd(in[0]) ^ mult9(in[1]) ^ multe(in[2]) ^ multb(in[3]);
     806:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
     80a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     80e:	f000 80e2 	beq.w	9d6 <CONFIG_ISR_STACK_SIZE+0x1d6>
     812:	ea4f 5454 	mov.w	r4, r4, lsr #21
     816:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
     81a:	bfb8      	it	lt
     81c:	426d      	neglt	r5, r5
     81e:	dd0c      	ble.n	83a <CONFIG_ISR_STACK_SIZE+0x3a>
     820:	442c      	add	r4, r5
     822:	ea80 0202 	eor.w	r2, r0, r2
     826:	ea81 0303 	eor.w	r3, r1, r3
     82a:	ea82 0000 	eor.w	r0, r2, r0
     82e:	ea83 0101 	eor.w	r1, r3, r1
     832:	ea80 0202 	eor.w	r2, r0, r2
     836:	ea81 0303 	eor.w	r3, r1, r3
     83a:	2d36      	cmp	r5, #54	; 0x36
     83c:	bf88      	it	hi
     83e:	bd30      	pophi	{r4, r5, pc}
     840:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     844:	ea4f 3101 	mov.w	r1, r1, lsl #12
     848:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
     84c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
     850:	d002      	beq.n	858 <CONFIG_ISR_STACK_SIZE+0x58>
     852:	4240      	negs	r0, r0
     854:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     858:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
     85c:	ea4f 3303 	mov.w	r3, r3, lsl #12
     860:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
     864:	d002      	beq.n	86c <CONFIG_ISR_STACK_SIZE+0x6c>
     866:	4252      	negs	r2, r2
     868:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     86c:	ea94 0f05 	teq	r4, r5
     870:	f000 80a7 	beq.w	9c2 <CONFIG_ISR_STACK_SIZE+0x1c2>
     874:	f1a4 0401 	sub.w	r4, r4, #1
     878:	f1d5 0e20 	rsbs	lr, r5, #32
     87c:	db0d      	blt.n	89a <CONFIG_ISR_STACK_SIZE+0x9a>
     87e:	fa02 fc0e 	lsl.w	ip, r2, lr
     882:	fa22 f205 	lsr.w	r2, r2, r5
     886:	1880      	adds	r0, r0, r2
     888:	f141 0100 	adc.w	r1, r1, #0
     88c:	fa03 f20e 	lsl.w	r2, r3, lr
     890:	1880      	adds	r0, r0, r2
     892:	fa43 f305 	asr.w	r3, r3, r5
     896:	4159      	adcs	r1, r3
     898:	e00e      	b.n	8b8 <CONFIG_ISR_STACK_SIZE+0xb8>
     89a:	f1a5 0520 	sub.w	r5, r5, #32
	out[3] = multb(in[0]) ^ multd(in[1]) ^ mult9(in[2]) ^ multe(in[3]);
     89e:	f10e 0e20 	add.w	lr, lr, #32
     8a2:	2a01      	cmp	r2, #1
     8a4:	fa03 fc0e 	lsl.w	ip, r3, lr
     8a8:	bf28      	it	cs
     8aa:	f04c 0c02 	orrcs.w	ip, ip, #2
     8ae:	fa43 f305 	asr.w	r3, r3, r5
     8b2:	18c0      	adds	r0, r0, r3
     8b4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
     8b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     8bc:	d507      	bpl.n	8ce <CONFIG_ISR_STACK_SIZE+0xce>
     8be:	f04f 0e00 	mov.w	lr, #0
     8c2:	f1dc 0c00 	rsbs	ip, ip, #0
     8c6:	eb7e 0000 	sbcs.w	r0, lr, r0
     8ca:	eb6e 0101 	sbc.w	r1, lr, r1
     8ce:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
     8d2:	d31b      	bcc.n	90c <CONFIG_ISR_STACK_SIZE+0x10c>
     8d4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
     8d8:	d30c      	bcc.n	8f4 <CONFIG_ISR_STACK_SIZE+0xf4>
     8da:	0849      	lsrs	r1, r1, #1
     8dc:	ea5f 0030 	movs.w	r0, r0, rrx
     8e0:	ea4f 0c3c 	mov.w	ip, ip, rrx
     8e4:	f104 0401 	add.w	r4, r4, #1
     8e8:	ea4f 5244 	mov.w	r2, r4, lsl #21
     8ec:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
     8f0:	f080 809a 	bcs.w	a28 <CONFIG_ISR_STACK_SIZE+0x228>
     8f4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     8f8:	bf08      	it	eq
     8fa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     8fe:	f150 0000 	adcs.w	r0, r0, #0
     902:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     906:	ea41 0105 	orr.w	r1, r1, r5
     90a:	bd30      	pop	{r4, r5, pc}
     90c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
     910:	4140      	adcs	r0, r0
     912:	eb41 0101 	adc.w	r1, r1, r1
     916:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     91a:	f1a4 0401 	sub.w	r4, r4, #1
     91e:	d1e9      	bne.n	8f4 <CONFIG_ISR_STACK_SIZE+0xf4>
     920:	f091 0f00 	teq	r1, #0
     924:	bf04      	itt	eq
     926:	4601      	moveq	r1, r0
     928:	2000      	moveq	r0, #0
     92a:	fab1 f381 	clz	r3, r1
     92e:	bf08      	it	eq
     930:	3320      	addeq	r3, #32
     932:	f1a3 030b 	sub.w	r3, r3, #11
     936:	f1b3 0220 	subs.w	r2, r3, #32
	out[0] = multe(in[0]) ^ multb(in[1]) ^ multd(in[2]) ^ mult9(in[3]);
     93a:	da0c      	bge.n	956 <CONFIG_ISR_STACK_SIZE+0x156>
     93c:	320c      	adds	r2, #12
     93e:	dd08      	ble.n	952 <CONFIG_ISR_STACK_SIZE+0x152>
     940:	f102 0c14 	add.w	ip, r2, #20
     944:	f1c2 020c 	rsb	r2, r2, #12
     948:	fa01 f00c 	lsl.w	r0, r1, ip
     94c:	fa21 f102 	lsr.w	r1, r1, r2
     950:	e00c      	b.n	96c <CONFIG_ISR_STACK_SIZE+0x16c>
     952:	f102 0214 	add.w	r2, r2, #20
     956:	bfd8      	it	le
     958:	f1c2 0c20 	rsble	ip, r2, #32
     95c:	fa01 f102 	lsl.w	r1, r1, r2
     960:	fa20 fc0c 	lsr.w	ip, r0, ip
     964:	bfdc      	itt	le
     966:	ea41 010c 	orrle.w	r1, r1, ip
     96a:	4090      	lslle	r0, r2
     96c:	1ae4      	subs	r4, r4, r3
     96e:	bfa2      	ittt	ge
     970:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
     974:	4329      	orrge	r1, r5
     976:	bd30      	popge	{r4, r5, pc}
     978:	ea6f 0404 	mvn.w	r4, r4
     97c:	3c1f      	subs	r4, #31
     97e:	da1c      	bge.n	9ba <CONFIG_ISR_STACK_SIZE+0x1ba>
     980:	340c      	adds	r4, #12
     982:	dc0e      	bgt.n	9a2 <CONFIG_ISR_STACK_SIZE+0x1a2>
     984:	f104 0414 	add.w	r4, r4, #20
     988:	f1c4 0220 	rsb	r2, r4, #32
     98c:	fa20 f004 	lsr.w	r0, r0, r4
     990:	fa01 f302 	lsl.w	r3, r1, r2
     994:	ea40 0003 	orr.w	r0, r0, r3
     998:	fa21 f304 	lsr.w	r3, r1, r4
     99c:	ea45 0103 	orr.w	r1, r5, r3
     9a0:	bd30      	pop	{r4, r5, pc}
     9a2:	f1c4 040c 	rsb	r4, r4, #12
     9a6:	f1c4 0220 	rsb	r2, r4, #32
     9aa:	fa20 f002 	lsr.w	r0, r0, r2
     9ae:	fa01 f304 	lsl.w	r3, r1, r4
     9b2:	ea40 0003 	orr.w	r0, r0, r3
     9b6:	4629      	mov	r1, r5
     9b8:	bd30      	pop	{r4, r5, pc}
     9ba:	fa21 f004 	lsr.w	r0, r1, r4
     9be:	4629      	mov	r1, r5
     9c0:	bd30      	pop	{r4, r5, pc}
     9c2:	f094 0f00 	teq	r4, #0
     9c6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
     9ca:	bf06      	itte	eq
     9cc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
     9d0:	3401      	addeq	r4, #1
	out[1] = mult9(in[0]) ^ multe(in[1]) ^ multb(in[2]) ^ multd(in[3]);
     9d2:	3d01      	subne	r5, #1
     9d4:	e74e      	b.n	874 <CONFIG_ISR_STACK_SIZE+0x74>
     9d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     9da:	bf18      	it	ne
     9dc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     9e0:	d029      	beq.n	a36 <CONFIG_ISR_STACK_SIZE+0x236>
     9e2:	ea94 0f05 	teq	r4, r5
     9e6:	bf08      	it	eq
     9e8:	ea90 0f02 	teqeq	r0, r2
     9ec:	d005      	beq.n	9fa <CONFIG_ISR_STACK_SIZE+0x1fa>
     9ee:	ea54 0c00 	orrs.w	ip, r4, r0
     9f2:	bf04      	itt	eq
     9f4:	4619      	moveq	r1, r3
     9f6:	4610      	moveq	r0, r2
     9f8:	bd30      	pop	{r4, r5, pc}
     9fa:	ea91 0f03 	teq	r1, r3
     9fe:	bf1e      	ittt	ne
     a00:	2100      	movne	r1, #0
     a02:	2000      	movne	r0, #0
     a04:	bd30      	popne	{r4, r5, pc}
     a06:	ea5f 5c54 	movs.w	ip, r4, lsr #21
     a0a:	d105      	bne.n	a18 <CONFIG_ISR_STACK_SIZE+0x218>
     a0c:	0040      	lsls	r0, r0, #1
     a0e:	4149      	adcs	r1, r1
     a10:	bf28      	it	cs
     a12:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
     a16:	bd30      	pop	{r4, r5, pc}
     a18:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
     a1c:	bf3c      	itt	cc
     a1e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     a22:	bd30      	popcc	{r4, r5, pc}
     a24:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     a28:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
     a2c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     a30:	f04f 0000 	mov.w	r0, #0
     a34:	bd30      	pop	{r4, r5, pc}
     a36:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     a3a:	bf1a      	itte	ne
     a3c:	4619      	movne	r1, r3
     a3e:	4610      	movne	r0, r2
     a40:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     a44:	bf1c      	itt	ne
     a46:	460b      	movne	r3, r1
     a48:	4602      	movne	r2, r0
     a4a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     a4e:	bf06      	itte	eq
     a50:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     a54:	ea91 0f03 	teqeq	r1, r3
     a58:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
     a5c:	bd30      	pop	{r4, r5, pc}
     a5e:	bf00      	nop

00000a60 <__aeabi_ui2d>:
     a60:	f090 0f00 	teq	r0, #0
     a64:	bf04      	itt	eq
     a66:	2100      	moveq	r1, #0
     a68:	4770      	bxeq	lr
     a6a:	b530      	push	{r4, r5, lr}
	out[2] = multd(in[0]) ^ mult9(in[1]) ^ multe(in[2]) ^ multb(in[3]);
     a6c:	f44f 6480 	mov.w	r4, #1024	; 0x400
     a70:	f104 0432 	add.w	r4, r4, #50	; 0x32
     a74:	f04f 0500 	mov.w	r5, #0
     a78:	f04f 0100 	mov.w	r1, #0
     a7c:	e750      	b.n	920 <CONFIG_ISR_STACK_SIZE+0x120>
     a7e:	bf00      	nop

00000a80 <__aeabi_i2d>:
     a80:	f090 0f00 	teq	r0, #0
     a84:	bf04      	itt	eq
     a86:	2100      	moveq	r1, #0
     a88:	4770      	bxeq	lr
     a8a:	b530      	push	{r4, r5, lr}
     a8c:	f44f 6480 	mov.w	r4, #1024	; 0x400
     a90:	f104 0432 	add.w	r4, r4, #50	; 0x32
     a94:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
     a98:	bf48      	it	mi
     a9a:	4240      	negmi	r0, r0
     a9c:	f04f 0100 	mov.w	r1, #0
     aa0:	e73e      	b.n	920 <CONFIG_ISR_STACK_SIZE+0x120>
     aa2:	bf00      	nop

00000aa4 <__aeabi_f2d>:
     aa4:	0042      	lsls	r2, r0, #1
     aa6:	ea4f 01e2 	mov.w	r1, r2, asr #3
     aaa:	ea4f 0131 	mov.w	r1, r1, rrx
     aae:	ea4f 7002 	mov.w	r0, r2, lsl #28
     ab2:	bf1f      	itttt	ne
     ab4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
     ab8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     abc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     ac0:	4770      	bxne	lr
     ac2:	f092 0f00 	teq	r2, #0
     ac6:	bf14      	ite	ne
     ac8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     acc:	4770      	bxeq	lr
     ace:	b530      	push	{r4, r5, lr}
     ad0:	f44f 7460 	mov.w	r4, #896	; 0x380
     ad4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     ad8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     adc:	e720      	b.n	920 <CONFIG_ISR_STACK_SIZE+0x120>
     ade:	bf00      	nop

00000ae0 <__aeabi_ul2d>:
     ae0:	ea50 0201 	orrs.w	r2, r0, r1
     ae4:	bf08      	it	eq
     ae6:	4770      	bxeq	lr
     ae8:	b530      	push	{r4, r5, lr}
     aea:	f04f 0500 	mov.w	r5, #0
     aee:	e00a      	b.n	b06 <__aeabi_l2d+0x16>

00000af0 <__aeabi_l2d>:
     af0:	ea50 0201 	orrs.w	r2, r0, r1
     af4:	bf08      	it	eq
     af6:	4770      	bxeq	lr
     af8:	b530      	push	{r4, r5, lr}
     afa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     afe:	d502      	bpl.n	b06 <__aeabi_l2d+0x16>
     b00:	4240      	negs	r0, r0
     b02:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
	out[3] = multb(in[0]) ^ multd(in[1]) ^ mult9(in[2]) ^ multe(in[3]);
     b06:	f44f 6480 	mov.w	r4, #1024	; 0x400
     b0a:	f104 0432 	add.w	r4, r4, #50	; 0x32
     b0e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
     b12:	f43f aedc 	beq.w	8ce <CONFIG_ISR_STACK_SIZE+0xce>
     b16:	f04f 0203 	mov.w	r2, #3
     b1a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     b1e:	bf18      	it	ne
     b20:	3203      	addne	r2, #3
     b22:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     b26:	bf18      	it	ne
     b28:	3203      	addne	r2, #3
     b2a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     b2e:	f1c2 0320 	rsb	r3, r2, #32
     b32:	fa00 fc03 	lsl.w	ip, r0, r3
     b36:	fa20 f002 	lsr.w	r0, r0, r2
     b3a:	fa01 fe03 	lsl.w	lr, r1, r3
     b3e:	ea40 000e 	orr.w	r0, r0, lr
     b42:	fa21 f102 	lsr.w	r1, r1, r2
     b46:	4414      	add	r4, r2
     b48:	e6c1      	b.n	8ce <CONFIG_ISR_STACK_SIZE+0xce>
     b4a:	bf00      	nop

00000b4c <__aeabi_dmul>:
     b4c:	b570      	push	{r4, r5, r6, lr}
     b4e:	f04f 0cff 	mov.w	ip, #255	; 0xff
     b52:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     b56:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     b5a:	bf1d      	ittte	ne
     b5c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     b60:	ea94 0f0c 	teqne	r4, ip
     b64:	ea95 0f0c 	teqne	r5, ip
     b68:	f000 f8de 	bleq	d28 <__aeabi_dmul+0x1dc>
     b6c:	442c      	add	r4, r5
     b6e:	ea81 0603 	eor.w	r6, r1, r3
     b72:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
     b76:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
     b7a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
     b7e:	bf18      	it	ne
     b80:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
     b84:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     b88:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     b8c:	d038      	beq.n	c00 <__aeabi_dmul+0xb4>
     b8e:	fba0 ce02 	umull	ip, lr, r0, r2
     b92:	f04f 0500 	mov.w	r5, #0
     b96:	fbe1 e502 	umlal	lr, r5, r1, r2
     b9a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
     b9e:	fbe0 e503 	umlal	lr, r5, r0, r3
	(void)_copy(s, sizeof(t), t, sizeof(t));
     ba2:	f04f 0600 	mov.w	r6, #0
     ba6:	fbe1 5603 	umlal	r5, r6, r1, r3
     baa:	f09c 0f00 	teq	ip, #0
	for (i = Nr - 1; i > 0; --i) {
     bae:	bf18      	it	ne
     bb0:	f04e 0e01 	orrne.w	lr, lr, #1
	t[0]  = s[0]; t[1] = s[13]; t[2] = s[10]; t[3] = s[7];
     bb4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
     bb8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
     bbc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
     bc0:	d204      	bcs.n	bcc <__aeabi_dmul+0x80>
     bc2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
     bc6:	416d      	adcs	r5, r5
     bc8:	eb46 0606 	adc.w	r6, r6, r6
     bcc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
     bd0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
	t[4]  = s[4]; t[5] = s[1]; t[6] = s[14]; t[7] = s[11];
     bd4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
     bd8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
     bdc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
     be0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     be4:	bf88      	it	hi
     be6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     bea:	d81e      	bhi.n	c2a <__aeabi_dmul+0xde>
     bec:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
     bf0:	bf08      	it	eq
     bf2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
	t[8]  = s[8]; t[9] = s[5]; t[10] = s[2]; t[11] = s[15];
     bf6:	f150 0000 	adcs.w	r0, r0, #0
     bfa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     bfe:	bd70      	pop	{r4, r5, r6, pc}
     c00:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
     c04:	ea46 0101 	orr.w	r1, r6, r1
     c08:	ea40 0002 	orr.w	r0, r0, r2
     c0c:	ea81 0103 	eor.w	r1, r1, r3
     c10:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
	t[12] = s[12]; t[13] = s[9]; t[14] = s[6]; t[15] = s[3];
     c14:	bfc2      	ittt	gt
     c16:	ebd4 050c 	rsbsgt	r5, r4, ip
     c1a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     c1e:	bd70      	popgt	{r4, r5, r6, pc}
     c20:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     c24:	f04f 0e00 	mov.w	lr, #0
     c28:	3c01      	subs	r4, #1
     c2a:	f300 80ab 	bgt.w	d84 <__aeabi_dmul+0x238>
     c2e:	f114 0f36 	cmn.w	r4, #54	; 0x36
     c32:	bfde      	ittt	le
	(void)_copy(s, sizeof(t), t, sizeof(t));
     c34:	2000      	movle	r0, #0
     c36:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
     c3a:	bd70      	pople	{r4, r5, r6, pc}
     c3c:	f1c4 0400 	rsb	r4, r4, #0
     c40:	3c20      	subs	r4, #32
	for (i = 0; i < (Nb*Nk); ++i) {
     c42:	da35      	bge.n	cb0 <__aeabi_dmul+0x164>
     c44:	340c      	adds	r4, #12
     c46:	dc1b      	bgt.n	c80 <__aeabi_dmul+0x134>
	t[0]  = s[0]; t[1] = s[13]; t[2] = s[10]; t[3] = s[7];
     c48:	f104 0414 	add.w	r4, r4, #20
     c4c:	f1c4 0520 	rsb	r5, r4, #32
     c50:	fa00 f305 	lsl.w	r3, r0, r5
     c54:	fa20 f004 	lsr.w	r0, r0, r4
     c58:	fa01 f205 	lsl.w	r2, r1, r5
     c5c:	ea40 0002 	orr.w	r0, r0, r2
     c60:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
     c64:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
	t[4]  = s[4]; t[5] = s[1]; t[6] = s[14]; t[7] = s[11];
     c68:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     c6c:	fa21 f604 	lsr.w	r6, r1, r4
     c70:	eb42 0106 	adc.w	r1, r2, r6
     c74:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     c78:	bf08      	it	eq
     c7a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     c7e:	bd70      	pop	{r4, r5, r6, pc}
     c80:	f1c4 040c 	rsb	r4, r4, #12
     c84:	f1c4 0520 	rsb	r5, r4, #32
	t[8]  = s[8]; t[9] = s[5]; t[10] = s[2]; t[11] = s[15];
     c88:	fa00 f304 	lsl.w	r3, r0, r4
     c8c:	fa20 f005 	lsr.w	r0, r0, r5
     c90:	fa01 f204 	lsl.w	r2, r1, r4
     c94:	ea40 0002 	orr.w	r0, r0, r2
     c98:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     c9c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     ca0:	f141 0100 	adc.w	r1, r1, #0
     ca4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
	t[12] = s[12]; t[13] = s[9]; t[14] = s[6]; t[15] = s[3];
     ca8:	bf08      	it	eq
     caa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     cae:	bd70      	pop	{r4, r5, r6, pc}
     cb0:	f1c4 0520 	rsb	r5, r4, #32
     cb4:	fa00 f205 	lsl.w	r2, r0, r5
     cb8:	ea4e 0e02 	orr.w	lr, lr, r2
     cbc:	fa20 f304 	lsr.w	r3, r0, r4
     cc0:	fa01 f205 	lsl.w	r2, r1, r5
     cc4:	ea43 0302 	orr.w	r3, r3, r2
	(void)_copy(s, sizeof(t), t, sizeof(t));
     cc8:	fa21 f004 	lsr.w	r0, r1, r4
     ccc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     cd0:	fa21 f204 	lsr.w	r2, r1, r4
     cd4:	ea20 0002 	bic.w	r0, r0, r2
		s[i] = inv_sbox[s[i]];
     cd8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
     cdc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     ce0:	bf08      	it	eq
	for (i = 0; i < (Nb*Nk); ++i) {
     ce2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     ce6:	bd70      	pop	{r4, r5, r6, pc}
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
     ce8:	f094 0f00 	teq	r4, #0
     cec:	d10f      	bne.n	d0e <__aeabi_dmul+0x1c2>
     cee:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
     cf2:	0040      	lsls	r0, r0, #1
     cf4:	eb41 0101 	adc.w	r1, r1, r1
     cf8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     cfc:	bf08      	it	eq
     cfe:	3c01      	subeq	r4, #1
     d00:	d0f7      	beq.n	cf2 <__aeabi_dmul+0x1a6>
     d02:	ea41 0106 	orr.w	r1, r1, r6
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
     d06:	f095 0f00 	teq	r5, #0
     d0a:	bf18      	it	ne
     d0c:	4770      	bxne	lr
     d0e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
     d12:	0052      	lsls	r2, r2, #1
     d14:	eb43 0303 	adc.w	r3, r3, r3
     d18:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
     d1c:	bf08      	it	eq
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
     d1e:	3d01      	subeq	r5, #1
     d20:	d0f7      	beq.n	d12 <__aeabi_dmul+0x1c6>
     d22:	ea43 0306 	orr.w	r3, r3, r6
     d26:	4770      	bx	lr
     d28:	ea94 0f0c 	teq	r4, ip
     d2c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     d30:	bf18      	it	ne
     d32:	ea95 0f0c 	teqne	r5, ip
     d36:	d00c      	beq.n	d52 <__aeabi_dmul+0x206>
     d38:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
     d3c:	bf18      	it	ne
     d3e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     d42:	d1d1      	bne.n	ce8 <__aeabi_dmul+0x19c>
     d44:	ea81 0103 	eor.w	r1, r1, r3
     d48:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     d4c:	f04f 0000 	mov.w	r0, #0
     d50:	bd70      	pop	{r4, r5, r6, pc}
     d52:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
     d56:	bf06      	itte	eq
     d58:	4610      	moveq	r0, r2
     d5a:	4619      	moveq	r1, r3
     d5c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     d60:	d019      	beq.n	d96 <__aeabi_dmul+0x24a>
     d62:	ea94 0f0c 	teq	r4, ip
     d66:	d102      	bne.n	d6e <__aeabi_dmul+0x222>
     d68:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
     d6c:	d113      	bne.n	d96 <__aeabi_dmul+0x24a>
     d6e:	ea95 0f0c 	teq	r5, ip
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
     d72:	d105      	bne.n	d80 <__aeabi_dmul+0x234>
     d74:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
     d78:	bf1c      	itt	ne
     d7a:	4610      	movne	r0, r2
     d7c:	4619      	movne	r1, r3
     d7e:	d10a      	bne.n	d96 <__aeabi_dmul+0x24a>
     d80:	ea81 0103 	eor.w	r1, r1, r3
     d84:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     d88:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
     d8c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     d90:	f04f 0000 	mov.w	r0, #0
     d94:	bd70      	pop	{r4, r5, r6, pc}
     d96:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     d9a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
     d9e:	bd70      	pop	{r4, r5, r6, pc}

00000da0 <__aeabi_ddiv>:
     da0:	b570      	push	{r4, r5, r6, lr}
     da2:	f04f 0cff 	mov.w	ip, #255	; 0xff
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
     da6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     daa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     dae:	bf1d      	ittte	ne
     db0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     db4:	ea94 0f0c 	teqne	r4, ip
     db8:	ea95 0f0c 	teqne	r5, ip
     dbc:	f000 f8a7 	bleq	f0e <__aeabi_ddiv+0x16e>

	inv_shift_rows(state);
	inv_sub_bytes(state);
	add_round_key(state, s->words);

	(void)_copy(out, sizeof(state), state, sizeof(state));
     dc0:	eba4 0405 	sub.w	r4, r4, r5
     dc4:	ea81 0e03 	eor.w	lr, r1, r3
     dc8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     dcc:	ea4f 3101 	mov.w	r1, r1, lsl #12

	/*zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
     dd0:	f000 8088 	beq.w	ee4 <__aeabi_ddiv+0x144>
     dd4:	ea4f 3303 	mov.w	r3, r3, lsl #12
     dd8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000


	return TC_CRYPTO_SUCCESS;
}
     ddc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
     de0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
		return TC_CRYPTO_FAIL;
     de4:	ea4f 2202 	mov.w	r2, r2, lsl #8
		return TC_CRYPTO_FAIL;
     de8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
		return TC_CRYPTO_FAIL;
     dec:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
     df0:	ea4f 2600 	mov.w	r6, r0, lsl #8
     df4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
     df8:	429d      	cmp	r5, r3
     dfa:	bf08      	it	eq
     dfc:	4296      	cmpeq	r6, r2
     dfe:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
     e02:	f504 7440 	add.w	r4, r4, #768	; 0x300
     e06:	d202      	bcs.n	e0e <__aeabi_ddiv+0x6e>
     e08:	085b      	lsrs	r3, r3, #1
     e0a:	ea4f 0232 	mov.w	r2, r2, rrx
     e0e:	1ab6      	subs	r6, r6, r2
     e10:	eb65 0503 	sbc.w	r5, r5, r3
     e14:	085b      	lsrs	r3, r3, #1
     e16:	ea4f 0232 	mov.w	r2, r2, rrx
     e1a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
     e1e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
     e22:	ebb6 0e02 	subs.w	lr, r6, r2
     e26:	eb75 0e03 	sbcs.w	lr, r5, r3
     e2a:	bf22      	ittt	cs
     e2c:	1ab6      	subcs	r6, r6, r2
     e2e:	4675      	movcs	r5, lr
     e30:	ea40 000c 	orrcs.w	r0, r0, ip
     e34:	085b      	lsrs	r3, r3, #1
     e36:	ea4f 0232 	mov.w	r2, r2, rrx
     e3a:	ebb6 0e02 	subs.w	lr, r6, r2
     e3e:	eb75 0e03 	sbcs.w	lr, r5, r3
     e42:	bf22      	ittt	cs
     e44:	1ab6      	subcs	r6, r6, r2
     e46:	4675      	movcs	r5, lr
     e48:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     e4c:	085b      	lsrs	r3, r3, #1
     e4e:	ea4f 0232 	mov.w	r2, r2, rrx
     e52:	ebb6 0e02 	subs.w	lr, r6, r2
     e56:	eb75 0e03 	sbcs.w	lr, r5, r3
     e5a:	bf22      	ittt	cs
     e5c:	1ab6      	subcs	r6, r6, r2
     e5e:	4675      	movcs	r5, lr
     e60:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     e64:	085b      	lsrs	r3, r3, #1
     e66:	ea4f 0232 	mov.w	r2, r2, rrx
     e6a:	ebb6 0e02 	subs.w	lr, r6, r2
     e6e:	eb75 0e03 	sbcs.w	lr, r5, r3
     e72:	bf22      	ittt	cs
     e74:	1ab6      	subcs	r6, r6, r2
     e76:	4675      	movcs	r5, lr
     e78:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     e7c:	ea55 0e06 	orrs.w	lr, r5, r6
     e80:	d018      	beq.n	eb4 <__aeabi_ddiv+0x114>
     e82:	ea4f 1505 	mov.w	r5, r5, lsl #4
     e86:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
     e8a:	ea4f 1606 	mov.w	r6, r6, lsl #4
     e8e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     e92:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
     e96:	ea4f 02c2 	mov.w	r2, r2, lsl #3
     e9a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
     e9e:	d1c0      	bne.n	e22 <__aeabi_ddiv+0x82>
     ea0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     ea4:	d10b      	bne.n	ebe <__aeabi_ddiv+0x11e>
     ea6:	ea41 0100 	orr.w	r1, r1, r0
     eaa:	f04f 0000 	mov.w	r0, #0
     eae:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
     eb2:	e7b6      	b.n	e22 <__aeabi_ddiv+0x82>
     eb4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     eb8:	bf04      	itt	eq
     eba:	4301      	orreq	r1, r0
     ebc:	2000      	moveq	r0, #0
     ebe:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     ec2:	bf88      	it	hi
     ec4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     ec8:	f63f aeaf 	bhi.w	c2a <__aeabi_dmul+0xde>
     ecc:	ebb5 0c03 	subs.w	ip, r5, r3
     ed0:	bf04      	itt	eq
     ed2:	ebb6 0c02 	subseq.w	ip, r6, r2
     ed6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     eda:	f150 0000 	adcs.w	r0, r0, #0
     ede:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     ee2:	bd70      	pop	{r4, r5, r6, pc}
     ee4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
     ee8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
     eec:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
     ef0:	bfc2      	ittt	gt
     ef2:	ebd4 050c 	rsbsgt	r5, r4, ip
     ef6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     efa:	bd70      	popgt	{r4, r5, r6, pc}
     efc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     f00:	f04f 0e00 	mov.w	lr, #0
     f04:	3c01      	subs	r4, #1
     f06:	e690      	b.n	c2a <__aeabi_dmul+0xde>
     f08:	ea45 0e06 	orr.w	lr, r5, r6
     f0c:	e68d      	b.n	c2a <__aeabi_dmul+0xde>
     f0e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     f12:	ea94 0f0c 	teq	r4, ip
     f16:	bf08      	it	eq
     f18:	ea95 0f0c 	teqeq	r5, ip
     f1c:	f43f af3b 	beq.w	d96 <__aeabi_dmul+0x24a>
     f20:	ea94 0f0c 	teq	r4, ip
     f24:	d10a      	bne.n	f3c <__aeabi_ddiv+0x19c>
     f26:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     f2a:	f47f af34 	bne.w	d96 <__aeabi_dmul+0x24a>
     f2e:	ea95 0f0c 	teq	r5, ip
     f32:	f47f af25 	bne.w	d80 <__aeabi_dmul+0x234>
     f36:	4610      	mov	r0, r2
     f38:	4619      	mov	r1, r3
     f3a:	e72c      	b.n	d96 <__aeabi_dmul+0x24a>
     f3c:	ea95 0f0c 	teq	r5, ip
     f40:	d106      	bne.n	f50 <__aeabi_ddiv+0x1b0>
     f42:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     f46:	f43f aefd 	beq.w	d44 <__aeabi_dmul+0x1f8>
     f4a:	4610      	mov	r0, r2
     f4c:	4619      	mov	r1, r3
     f4e:	e722      	b.n	d96 <__aeabi_dmul+0x24a>
     f50:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     f54:	bf18      	it	ne
     f56:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     f5a:	f47f aec5 	bne.w	ce8 <__aeabi_dmul+0x19c>
     f5e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
     f62:	f47f af0d 	bne.w	d80 <__aeabi_dmul+0x234>
     f66:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
     f6a:	f47f aeeb 	bne.w	d44 <__aeabi_dmul+0x1f8>
     f6e:	e712      	b.n	d96 <__aeabi_dmul+0x24a>

00000f70 <__gedf2>:
     f70:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
     f74:	e006      	b.n	f84 <__cmpdf2+0x4>
     f76:	bf00      	nop

00000f78 <__ledf2>:
     f78:	f04f 0c01 	mov.w	ip, #1
     f7c:	e002      	b.n	f84 <__cmpdf2+0x4>
     f7e:	bf00      	nop

00000f80 <__cmpdf2>:
     f80:	f04f 0c01 	mov.w	ip, #1
     f84:	f84d cd04 	str.w	ip, [sp, #-4]!
     f88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     f8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     f90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     f94:	bf18      	it	ne
     f96:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
     f9a:	d01b      	beq.n	fd4 <__cmpdf2+0x54>
     f9c:	b001      	add	sp, #4
     f9e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
     fa2:	bf0c      	ite	eq
     fa4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
     fa8:	ea91 0f03 	teqne	r1, r3
     fac:	bf02      	ittt	eq
     fae:	ea90 0f02 	teqeq	r0, r2
     fb2:	2000      	moveq	r0, #0
     fb4:	4770      	bxeq	lr
     fb6:	f110 0f00 	cmn.w	r0, #0
     fba:	ea91 0f03 	teq	r1, r3
     fbe:	bf58      	it	pl
     fc0:	4299      	cmppl	r1, r3
     fc2:	bf08      	it	eq
     fc4:	4290      	cmpeq	r0, r2
     fc6:	bf2c      	ite	cs
     fc8:	17d8      	asrcs	r0, r3, #31
     fca:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
     fce:	f040 0001 	orr.w	r0, r0, #1
     fd2:	4770      	bx	lr
     fd4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     fd8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     fdc:	d102      	bne.n	fe4 <__cmpdf2+0x64>
     fde:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
     fe2:	d107      	bne.n	ff4 <__cmpdf2+0x74>
     fe4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     fe8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     fec:	d1d6      	bne.n	f9c <__cmpdf2+0x1c>
     fee:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
     ff2:	d0d3      	beq.n	f9c <__cmpdf2+0x1c>
     ff4:	f85d 0b04 	ldr.w	r0, [sp], #4
     ff8:	4770      	bx	lr
     ffa:	bf00      	nop

00000ffc <__aeabi_cdrcmple>:
     ffc:	4684      	mov	ip, r0
     ffe:	4610      	mov	r0, r2
    1000:	4662      	mov	r2, ip
    1002:	468c      	mov	ip, r1
    1004:	4619      	mov	r1, r3
    1006:	4663      	mov	r3, ip
    1008:	e000      	b.n	100c <__aeabi_cdcmpeq>
    100a:	bf00      	nop

0000100c <__aeabi_cdcmpeq>:
    100c:	b501      	push	{r0, lr}
    100e:	f7ff ffb7 	bl	f80 <__cmpdf2>
    1012:	2800      	cmp	r0, #0
    1014:	bf48      	it	mi
    1016:	f110 0f00 	cmnmi.w	r0, #0
    101a:	bd01      	pop	{r0, pc}

0000101c <__aeabi_dcmpeq>:
    101c:	f84d ed08 	str.w	lr, [sp, #-8]!
    1020:	f7ff fff4 	bl	100c <__aeabi_cdcmpeq>
    1024:	bf0c      	ite	eq
    1026:	2001      	moveq	r0, #1
    1028:	2000      	movne	r0, #0
    102a:	f85d fb08 	ldr.w	pc, [sp], #8
    102e:	bf00      	nop

00001030 <__aeabi_dcmplt>:
    1030:	f84d ed08 	str.w	lr, [sp, #-8]!
    1034:	f7ff ffea 	bl	100c <__aeabi_cdcmpeq>
    1038:	bf34      	ite	cc
    103a:	2001      	movcc	r0, #1
    103c:	2000      	movcs	r0, #0
    103e:	f85d fb08 	ldr.w	pc, [sp], #8
    1042:	bf00      	nop

00001044 <__aeabi_dcmple>:
    1044:	f84d ed08 	str.w	lr, [sp, #-8]!
    1048:	f7ff ffe0 	bl	100c <__aeabi_cdcmpeq>
    104c:	bf94      	ite	ls
    104e:	2001      	movls	r0, #1
    1050:	2000      	movhi	r0, #0
    1052:	f85d fb08 	ldr.w	pc, [sp], #8
    1056:	bf00      	nop

00001058 <__aeabi_dcmpge>:
    1058:	f84d ed08 	str.w	lr, [sp, #-8]!
    105c:	f7ff ffce 	bl	ffc <__aeabi_cdrcmple>
    1060:	bf94      	ite	ls
    1062:	2001      	movls	r0, #1
    1064:	2000      	movhi	r0, #0
    1066:	f85d fb08 	ldr.w	pc, [sp], #8
    106a:	bf00      	nop

0000106c <__aeabi_dcmpgt>:
    106c:	f84d ed08 	str.w	lr, [sp, #-8]!
    1070:	f7ff ffc4 	bl	ffc <__aeabi_cdrcmple>
    1074:	bf34      	ite	cc
    1076:	2001      	movcc	r0, #1
    1078:	2000      	movcs	r0, #0
    107a:	f85d fb08 	ldr.w	pc, [sp], #8
    107e:	bf00      	nop

00001080 <__aeabi_dcmpun>:
    1080:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    1084:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    1088:	d102      	bne.n	1090 <__aeabi_dcmpun+0x10>
    108a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    108e:	d10a      	bne.n	10a6 <__aeabi_dcmpun+0x26>
    1090:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    1094:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    1098:	d102      	bne.n	10a0 <__aeabi_dcmpun+0x20>
    109a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    109e:	d102      	bne.n	10a6 <__aeabi_dcmpun+0x26>
    10a0:	f04f 0000 	mov.w	r0, #0
    10a4:	4770      	bx	lr
    10a6:	f04f 0001 	mov.w	r0, #1
    10aa:	4770      	bx	lr

000010ac <__aeabi_d2iz>:
    10ac:	ea4f 0241 	mov.w	r2, r1, lsl #1
    10b0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    10b4:	d215      	bcs.n	10e2 <__aeabi_d2iz+0x36>
    10b6:	d511      	bpl.n	10dc <__aeabi_d2iz+0x30>
    10b8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    10bc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    10c0:	d912      	bls.n	10e8 <__aeabi_d2iz+0x3c>
    10c2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    10c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    10ca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    10ce:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    10d2:	fa23 f002 	lsr.w	r0, r3, r2
    10d6:	bf18      	it	ne
    10d8:	4240      	negne	r0, r0
    10da:	4770      	bx	lr
    10dc:	f04f 0000 	mov.w	r0, #0
    10e0:	4770      	bx	lr
    10e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    10e6:	d105      	bne.n	10f4 <__aeabi_d2iz+0x48>
    10e8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
    10ec:	bf08      	it	eq
    10ee:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    10f2:	4770      	bx	lr
    10f4:	f04f 0000 	mov.w	r0, #0
    10f8:	4770      	bx	lr
    10fa:	bf00      	nop

000010fc <__aeabi_uldivmod>:
    10fc:	b953      	cbnz	r3, 1114 <__aeabi_uldivmod+0x18>
    10fe:	b94a      	cbnz	r2, 1114 <__aeabi_uldivmod+0x18>
    1100:	2900      	cmp	r1, #0
    1102:	bf08      	it	eq
    1104:	2800      	cmpeq	r0, #0
    1106:	bf1c      	itt	ne
    1108:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    110c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    1110:	f000 b98e 	b.w	1430 <__aeabi_idiv0>
    1114:	f1ad 0c08 	sub.w	ip, sp, #8
    1118:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    111c:	f000 f81a 	bl	1154 <__udivmoddi4>
    1120:	f8dd e004 	ldr.w	lr, [sp, #4]
    1124:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    1128:	b004      	add	sp, #16
    112a:	4770      	bx	lr

0000112c <__popcountsi2>:
    112c:	0843      	lsrs	r3, r0, #1
    112e:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
    1132:	1ac0      	subs	r0, r0, r3
    1134:	0883      	lsrs	r3, r0, #2
    1136:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
    113a:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
    113e:	4418      	add	r0, r3
    1140:	eb00 1010 	add.w	r0, r0, r0, lsr #4
    1144:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
    1148:	eb00 2000 	add.w	r0, r0, r0, lsl #8
    114c:	eb00 4000 	add.w	r0, r0, r0, lsl #16
    1150:	0e00      	lsrs	r0, r0, #24
    1152:	4770      	bx	lr

00001154 <__udivmoddi4>:
    1154:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1158:	468c      	mov	ip, r1
    115a:	460d      	mov	r5, r1
    115c:	4604      	mov	r4, r0
    115e:	9e08      	ldr	r6, [sp, #32]
    1160:	2b00      	cmp	r3, #0
    1162:	d151      	bne.n	1208 <__udivmoddi4+0xb4>
    1164:	428a      	cmp	r2, r1
    1166:	4617      	mov	r7, r2
    1168:	d96d      	bls.n	1246 <__udivmoddi4+0xf2>
    116a:	fab2 fe82 	clz	lr, r2
    116e:	f1be 0f00 	cmp.w	lr, #0
    1172:	d00b      	beq.n	118c <__udivmoddi4+0x38>
    1174:	f1ce 0c20 	rsb	ip, lr, #32
    1178:	fa01 f50e 	lsl.w	r5, r1, lr
    117c:	fa20 fc0c 	lsr.w	ip, r0, ip
    1180:	fa02 f70e 	lsl.w	r7, r2, lr
    1184:	ea4c 0c05 	orr.w	ip, ip, r5
    1188:	fa00 f40e 	lsl.w	r4, r0, lr
    118c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
    1190:	0c25      	lsrs	r5, r4, #16
    1192:	fbbc f8fa 	udiv	r8, ip, sl
    1196:	fa1f f987 	uxth.w	r9, r7
    119a:	fb0a cc18 	mls	ip, sl, r8, ip
    119e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
    11a2:	fb08 f309 	mul.w	r3, r8, r9
    11a6:	42ab      	cmp	r3, r5
    11a8:	d90a      	bls.n	11c0 <__udivmoddi4+0x6c>
    11aa:	19ed      	adds	r5, r5, r7
    11ac:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
    11b0:	f080 8123 	bcs.w	13fa <__udivmoddi4+0x2a6>
    11b4:	42ab      	cmp	r3, r5
    11b6:	f240 8120 	bls.w	13fa <__udivmoddi4+0x2a6>
    11ba:	f1a8 0802 	sub.w	r8, r8, #2
    11be:	443d      	add	r5, r7
    11c0:	1aed      	subs	r5, r5, r3
    11c2:	b2a4      	uxth	r4, r4
    11c4:	fbb5 f0fa 	udiv	r0, r5, sl
    11c8:	fb0a 5510 	mls	r5, sl, r0, r5
    11cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
    11d0:	fb00 f909 	mul.w	r9, r0, r9
    11d4:	45a1      	cmp	r9, r4
    11d6:	d909      	bls.n	11ec <__udivmoddi4+0x98>
    11d8:	19e4      	adds	r4, r4, r7
    11da:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    11de:	f080 810a 	bcs.w	13f6 <__udivmoddi4+0x2a2>
    11e2:	45a1      	cmp	r9, r4
    11e4:	f240 8107 	bls.w	13f6 <__udivmoddi4+0x2a2>
    11e8:	3802      	subs	r0, #2
    11ea:	443c      	add	r4, r7
    11ec:	eba4 0409 	sub.w	r4, r4, r9
    11f0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
    11f4:	2100      	movs	r1, #0
    11f6:	2e00      	cmp	r6, #0
    11f8:	d061      	beq.n	12be <__udivmoddi4+0x16a>
    11fa:	fa24 f40e 	lsr.w	r4, r4, lr
    11fe:	2300      	movs	r3, #0
    1200:	6034      	str	r4, [r6, #0]
    1202:	6073      	str	r3, [r6, #4]
    1204:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1208:	428b      	cmp	r3, r1
    120a:	d907      	bls.n	121c <__udivmoddi4+0xc8>
    120c:	2e00      	cmp	r6, #0
    120e:	d054      	beq.n	12ba <__udivmoddi4+0x166>
    1210:	2100      	movs	r1, #0
    1212:	e886 0021 	stmia.w	r6, {r0, r5}
    1216:	4608      	mov	r0, r1
    1218:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    121c:	fab3 f183 	clz	r1, r3
    1220:	2900      	cmp	r1, #0
    1222:	f040 808e 	bne.w	1342 <__udivmoddi4+0x1ee>
    1226:	42ab      	cmp	r3, r5
    1228:	d302      	bcc.n	1230 <__udivmoddi4+0xdc>
    122a:	4282      	cmp	r2, r0
    122c:	f200 80fa 	bhi.w	1424 <__udivmoddi4+0x2d0>
    1230:	1a84      	subs	r4, r0, r2
    1232:	eb65 0503 	sbc.w	r5, r5, r3
    1236:	2001      	movs	r0, #1
    1238:	46ac      	mov	ip, r5
    123a:	2e00      	cmp	r6, #0
    123c:	d03f      	beq.n	12be <__udivmoddi4+0x16a>
    123e:	e886 1010 	stmia.w	r6, {r4, ip}
    1242:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1246:	b912      	cbnz	r2, 124e <__udivmoddi4+0xfa>
    1248:	2701      	movs	r7, #1
    124a:	fbb7 f7f2 	udiv	r7, r7, r2
    124e:	fab7 fe87 	clz	lr, r7
    1252:	f1be 0f00 	cmp.w	lr, #0
    1256:	d134      	bne.n	12c2 <__udivmoddi4+0x16e>
    1258:	1beb      	subs	r3, r5, r7
    125a:	0c3a      	lsrs	r2, r7, #16
    125c:	fa1f fc87 	uxth.w	ip, r7
    1260:	2101      	movs	r1, #1
    1262:	fbb3 f8f2 	udiv	r8, r3, r2
    1266:	0c25      	lsrs	r5, r4, #16
    1268:	fb02 3318 	mls	r3, r2, r8, r3
    126c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    1270:	fb0c f308 	mul.w	r3, ip, r8
    1274:	42ab      	cmp	r3, r5
    1276:	d907      	bls.n	1288 <__udivmoddi4+0x134>
    1278:	19ed      	adds	r5, r5, r7
    127a:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
    127e:	d202      	bcs.n	1286 <__udivmoddi4+0x132>
    1280:	42ab      	cmp	r3, r5
    1282:	f200 80d1 	bhi.w	1428 <__udivmoddi4+0x2d4>
    1286:	4680      	mov	r8, r0
    1288:	1aed      	subs	r5, r5, r3
    128a:	b2a3      	uxth	r3, r4
    128c:	fbb5 f0f2 	udiv	r0, r5, r2
    1290:	fb02 5510 	mls	r5, r2, r0, r5
    1294:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
    1298:	fb0c fc00 	mul.w	ip, ip, r0
    129c:	45a4      	cmp	ip, r4
    129e:	d907      	bls.n	12b0 <__udivmoddi4+0x15c>
    12a0:	19e4      	adds	r4, r4, r7
    12a2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    12a6:	d202      	bcs.n	12ae <__udivmoddi4+0x15a>
    12a8:	45a4      	cmp	ip, r4
    12aa:	f200 80b8 	bhi.w	141e <__udivmoddi4+0x2ca>
    12ae:	4618      	mov	r0, r3
    12b0:	eba4 040c 	sub.w	r4, r4, ip
    12b4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
    12b8:	e79d      	b.n	11f6 <__udivmoddi4+0xa2>
    12ba:	4631      	mov	r1, r6
    12bc:	4630      	mov	r0, r6
    12be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    12c2:	f1ce 0420 	rsb	r4, lr, #32
    12c6:	fa05 f30e 	lsl.w	r3, r5, lr
    12ca:	fa07 f70e 	lsl.w	r7, r7, lr
    12ce:	fa20 f804 	lsr.w	r8, r0, r4
    12d2:	0c3a      	lsrs	r2, r7, #16
    12d4:	fa25 f404 	lsr.w	r4, r5, r4
    12d8:	ea48 0803 	orr.w	r8, r8, r3
    12dc:	fbb4 f1f2 	udiv	r1, r4, r2
    12e0:	ea4f 4518 	mov.w	r5, r8, lsr #16
    12e4:	fb02 4411 	mls	r4, r2, r1, r4
    12e8:	fa1f fc87 	uxth.w	ip, r7
    12ec:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
    12f0:	fb01 f30c 	mul.w	r3, r1, ip
    12f4:	42ab      	cmp	r3, r5
    12f6:	fa00 f40e 	lsl.w	r4, r0, lr
    12fa:	d909      	bls.n	1310 <__udivmoddi4+0x1bc>
    12fc:	19ed      	adds	r5, r5, r7
    12fe:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
    1302:	f080 808a 	bcs.w	141a <__udivmoddi4+0x2c6>
    1306:	42ab      	cmp	r3, r5
    1308:	f240 8087 	bls.w	141a <__udivmoddi4+0x2c6>
    130c:	3902      	subs	r1, #2
    130e:	443d      	add	r5, r7
    1310:	1aeb      	subs	r3, r5, r3
    1312:	fa1f f588 	uxth.w	r5, r8
    1316:	fbb3 f0f2 	udiv	r0, r3, r2
    131a:	fb02 3310 	mls	r3, r2, r0, r3
    131e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    1322:	fb00 f30c 	mul.w	r3, r0, ip
    1326:	42ab      	cmp	r3, r5
    1328:	d907      	bls.n	133a <__udivmoddi4+0x1e6>
    132a:	19ed      	adds	r5, r5, r7
    132c:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
    1330:	d26f      	bcs.n	1412 <__udivmoddi4+0x2be>
    1332:	42ab      	cmp	r3, r5
    1334:	d96d      	bls.n	1412 <__udivmoddi4+0x2be>
    1336:	3802      	subs	r0, #2
    1338:	443d      	add	r5, r7
    133a:	1aeb      	subs	r3, r5, r3
    133c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
    1340:	e78f      	b.n	1262 <__udivmoddi4+0x10e>
    1342:	f1c1 0720 	rsb	r7, r1, #32
    1346:	fa22 f807 	lsr.w	r8, r2, r7
    134a:	408b      	lsls	r3, r1
    134c:	fa05 f401 	lsl.w	r4, r5, r1
    1350:	ea48 0303 	orr.w	r3, r8, r3
    1354:	fa20 fe07 	lsr.w	lr, r0, r7
    1358:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    135c:	40fd      	lsrs	r5, r7
    135e:	ea4e 0e04 	orr.w	lr, lr, r4
    1362:	fbb5 f9fc 	udiv	r9, r5, ip
    1366:	ea4f 441e 	mov.w	r4, lr, lsr #16
    136a:	fb0c 5519 	mls	r5, ip, r9, r5
    136e:	fa1f f883 	uxth.w	r8, r3
    1372:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
    1376:	fb09 f408 	mul.w	r4, r9, r8
    137a:	42ac      	cmp	r4, r5
    137c:	fa02 f201 	lsl.w	r2, r2, r1
    1380:	fa00 fa01 	lsl.w	sl, r0, r1
    1384:	d908      	bls.n	1398 <__udivmoddi4+0x244>
    1386:	18ed      	adds	r5, r5, r3
    1388:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
    138c:	d243      	bcs.n	1416 <__udivmoddi4+0x2c2>
    138e:	42ac      	cmp	r4, r5
    1390:	d941      	bls.n	1416 <__udivmoddi4+0x2c2>
    1392:	f1a9 0902 	sub.w	r9, r9, #2
    1396:	441d      	add	r5, r3
    1398:	1b2d      	subs	r5, r5, r4
    139a:	fa1f fe8e 	uxth.w	lr, lr
    139e:	fbb5 f0fc 	udiv	r0, r5, ip
    13a2:	fb0c 5510 	mls	r5, ip, r0, r5
    13a6:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
    13aa:	fb00 f808 	mul.w	r8, r0, r8
    13ae:	45a0      	cmp	r8, r4
    13b0:	d907      	bls.n	13c2 <__udivmoddi4+0x26e>
    13b2:	18e4      	adds	r4, r4, r3
    13b4:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
    13b8:	d229      	bcs.n	140e <__udivmoddi4+0x2ba>
    13ba:	45a0      	cmp	r8, r4
    13bc:	d927      	bls.n	140e <__udivmoddi4+0x2ba>
    13be:	3802      	subs	r0, #2
    13c0:	441c      	add	r4, r3
    13c2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
    13c6:	eba4 0408 	sub.w	r4, r4, r8
    13ca:	fba0 8902 	umull	r8, r9, r0, r2
    13ce:	454c      	cmp	r4, r9
    13d0:	46c6      	mov	lr, r8
    13d2:	464d      	mov	r5, r9
    13d4:	d315      	bcc.n	1402 <__udivmoddi4+0x2ae>
    13d6:	d012      	beq.n	13fe <__udivmoddi4+0x2aa>
    13d8:	b156      	cbz	r6, 13f0 <__udivmoddi4+0x29c>
    13da:	ebba 030e 	subs.w	r3, sl, lr
    13de:	eb64 0405 	sbc.w	r4, r4, r5
    13e2:	fa04 f707 	lsl.w	r7, r4, r7
    13e6:	40cb      	lsrs	r3, r1
    13e8:	431f      	orrs	r7, r3
    13ea:	40cc      	lsrs	r4, r1
    13ec:	6037      	str	r7, [r6, #0]
    13ee:	6074      	str	r4, [r6, #4]
    13f0:	2100      	movs	r1, #0
    13f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    13f6:	4618      	mov	r0, r3
    13f8:	e6f8      	b.n	11ec <__udivmoddi4+0x98>
    13fa:	4690      	mov	r8, r2
    13fc:	e6e0      	b.n	11c0 <__udivmoddi4+0x6c>
    13fe:	45c2      	cmp	sl, r8
    1400:	d2ea      	bcs.n	13d8 <__udivmoddi4+0x284>
    1402:	ebb8 0e02 	subs.w	lr, r8, r2
    1406:	eb69 0503 	sbc.w	r5, r9, r3
    140a:	3801      	subs	r0, #1
    140c:	e7e4      	b.n	13d8 <__udivmoddi4+0x284>
    140e:	4628      	mov	r0, r5
    1410:	e7d7      	b.n	13c2 <__udivmoddi4+0x26e>
    1412:	4640      	mov	r0, r8
    1414:	e791      	b.n	133a <__udivmoddi4+0x1e6>
    1416:	4681      	mov	r9, r0
    1418:	e7be      	b.n	1398 <__udivmoddi4+0x244>
    141a:	4601      	mov	r1, r0
    141c:	e778      	b.n	1310 <__udivmoddi4+0x1bc>
    141e:	3802      	subs	r0, #2
    1420:	443c      	add	r4, r7
    1422:	e745      	b.n	12b0 <__udivmoddi4+0x15c>
    1424:	4608      	mov	r0, r1
    1426:	e708      	b.n	123a <__udivmoddi4+0xe6>
    1428:	f1a8 0802 	sub.w	r8, r8, #2
    142c:	443d      	add	r5, r7
    142e:	e72b      	b.n	1288 <__udivmoddi4+0x134>

00001430 <__aeabi_idiv0>:
    1430:	4770      	bx	lr
    1432:	bf00      	nop
    1434:	0000      	movs	r0, r0
	...

00001438 <sensors_thread>:

K_THREAD_STACK_DEFINE(ss_stack_area, SS_STACK_SIZE);
struct k_thread ss_thread;

void sensors_thread(void * unused1, void * unused2, void * unused3)
{
    1438:	b508      	push	{r3, lr}
    143a:	e008      	b.n	144e <sensors_thread+0x16>
			x = 0.0;

		if ((z++) > Z_MAX)
			z = 0;

		telemetry_changed = true;
    143c:	2201      	movs	r2, #1
    143e:	4b22      	ldr	r3, [pc, #136]	; (14c8 <sensors_thread+0x90>)
    1440:	701a      	strb	r2, [r3, #0]

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_INIT, k_mutex_init, struct k_mutex *, mutex);

K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex);
    1442:	4822      	ldr	r0, [pc, #136]	; (14cc <sensors_thread+0x94>)
    1444:	f026 f9f0 	bl	27828 <_impl_k_mutex_unlock>

K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);

K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    1448:	4821      	ldr	r0, [pc, #132]	; (14d0 <sensors_thread+0x98>)
    144a:	f027 f9a6 	bl	2879a <_impl_k_sem_give>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SLEEP, k_sleep, s32_t, duration);
    144e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    1452:	f027 f863 	bl	2851c <_impl_k_sleep>
K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout);
    1456:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    145a:	481c      	ldr	r0, [pc, #112]	; (14cc <sensors_thread+0x94>)
    145c:	f026 f97a 	bl	27754 <_impl_k_mutex_lock>
		y = sin(x * 2 * PI);
    1460:	4c1c      	ldr	r4, [pc, #112]	; (14d4 <sensors_thread+0x9c>)
    1462:	e9d4 2300 	ldrd	r2, r3, [r4]
    1466:	4610      	mov	r0, r2
    1468:	4619      	mov	r1, r3
    146a:	f7ff f9bd 	bl	7e8 <__adddf3>
    146e:	a312      	add	r3, pc, #72	; (adr r3, 14b8 <sensors_thread+0x80>)
    1470:	e9d3 2300 	ldrd	r2, r3, [r3]
    1474:	f7ff fb6a 	bl	b4c <__aeabi_dmul>
    1478:	f028 f8a6 	bl	295c8 <sin>
		if ((x = x + X_STEP) >= 1.0)
    147c:	a310      	add	r3, pc, #64	; (adr r3, 14c0 <sensors_thread+0x88>)
    147e:	e9d3 2300 	ldrd	r2, r3, [r3]
    1482:	e9d4 0100 	ldrd	r0, r1, [r4]
    1486:	f7ff f9af 	bl	7e8 <__adddf3>
    148a:	e9c4 0100 	strd	r0, r1, [r4]
    148e:	2200      	movs	r2, #0
    1490:	4b11      	ldr	r3, [pc, #68]	; (14d8 <sensors_thread+0xa0>)
    1492:	f7ff fde1 	bl	1058 <__aeabi_dcmpge>
    1496:	b118      	cbz	r0, 14a0 <sensors_thread+0x68>
			x = 0.0;
    1498:	2000      	movs	r0, #0
    149a:	2100      	movs	r1, #0
    149c:	e9c4 0100 	strd	r0, r1, [r4]
		if ((z++) > Z_MAX)
    14a0:	4a0e      	ldr	r2, [pc, #56]	; (14dc <sensors_thread+0xa4>)
    14a2:	6813      	ldr	r3, [r2, #0]
    14a4:	1c59      	adds	r1, r3, #1
    14a6:	6011      	str	r1, [r2, #0]
    14a8:	2b64      	cmp	r3, #100	; 0x64
    14aa:	ddc7      	ble.n	143c <sensors_thread+0x4>
			z = 0;
    14ac:	2200      	movs	r2, #0
    14ae:	4b0b      	ldr	r3, [pc, #44]	; (14dc <sensors_thread+0xa4>)
    14b0:	601a      	str	r2, [r3, #0]
    14b2:	e7c3      	b.n	143c <sensors_thread+0x4>
    14b4:	f3af 8000 	nop.w
    14b8:	54442d18 	.word	0x54442d18
    14bc:	400921fb 	.word	0x400921fb
    14c0:	9999999a 	.word	0x9999999a
    14c4:	3fa99999 	.word	0x3fa99999
    14c8:	20000210 	.word	0x20000210
    14cc:	2000d060 	.word	0x2000d060
    14d0:	2000cfec 	.word	0x2000cfec
    14d4:	20000218 	.word	0x20000218
    14d8:	3ff00000 	.word	0x3ff00000
    14dc:	20000220 	.word	0x20000220

000014e0 <publish_cb>:
 * unknown pkt_id, this routine must return an error, for example -EINVAL or
 * any negative value.
 */
static int publish_cb(struct mqtt_ctx *mqtt_ctx, u16_t pkt_id,
		      enum mqtt_packet type)
{
    14e0:	b530      	push	{r4, r5, lr}
    14e2:	b083      	sub	sp, #12
    14e4:	4605      	mov	r5, r0
	const char *str;
	int rc = 0;

	client_ctx = CONTAINER_OF(mqtt_ctx, struct mqtt_client_ctx, mqtt_ctx);

	switch (type) {
    14e6:	2a05      	cmp	r2, #5
    14e8:	d01b      	beq.n	1522 <publish_cb+0x42>
    14ea:	2a07      	cmp	r2, #7
    14ec:	d01c      	beq.n	1528 <publish_cb+0x48>
    14ee:	2a04      	cmp	r2, #4
    14f0:	d003      	beq.n	14fa <publish_cb+0x1a>
		break;
	case MQTT_PUBREC:
		str = "MQTT_PUBREC";
		break;
	default:
		rc = -EINVAL;
    14f2:	f06f 0415 	mvn.w	r4, #21
		str = "Invalid MQTT packet";
    14f6:	4b0e      	ldr	r3, [pc, #56]	; (1530 <publish_cb+0x50>)
    14f8:	e001      	b.n	14fe <publish_cb+0x1e>
	int rc = 0;
    14fa:	2400      	movs	r4, #0
		str = "MQTT_PUBACK";
    14fc:	4b0d      	ldr	r3, [pc, #52]	; (1534 <publish_cb+0x54>)
	}

	printk("[%s:%d] <%s> packet id: %u", __func__, __LINE__, str, pkt_id);
    14fe:	9100      	str	r1, [sp, #0]
    1500:	22c4      	movs	r2, #196	; 0xc4
    1502:	490d      	ldr	r1, [pc, #52]	; (1538 <publish_cb+0x58>)
    1504:	480d      	ldr	r0, [pc, #52]	; (153c <publish_cb+0x5c>)
    1506:	f001 fd1f 	bl	2f48 <printk>

	if (client_ctx->publish_data) {
    150a:	f8d5 10b4 	ldr.w	r1, [r5, #180]	; 0xb4
    150e:	b111      	cbz	r1, 1516 <publish_cb+0x36>
		printk(", user_data: %s",
    1510:	480b      	ldr	r0, [pc, #44]	; (1540 <publish_cb+0x60>)
    1512:	f001 fd19 	bl	2f48 <printk>
		       (const char *)client_ctx->publish_data);
	}

	printk("\n");
    1516:	480b      	ldr	r0, [pc, #44]	; (1544 <publish_cb+0x64>)
    1518:	f001 fd16 	bl	2f48 <printk>

	return rc;
}
    151c:	4620      	mov	r0, r4
    151e:	b003      	add	sp, #12
    1520:	bd30      	pop	{r4, r5, pc}
	int rc = 0;
    1522:	2400      	movs	r4, #0
		str = "MQTT_PUBREC";
    1524:	4b08      	ldr	r3, [pc, #32]	; (1548 <publish_cb+0x68>)
		break;
    1526:	e7ea      	b.n	14fe <publish_cb+0x1e>
	int rc = 0;
    1528:	2400      	movs	r4, #0
		str = "MQTT_PUBCOMP";
    152a:	4b08      	ldr	r3, [pc, #32]	; (154c <publish_cb+0x6c>)
    152c:	e7e7      	b.n	14fe <publish_cb+0x1e>
    152e:	bf00      	nop
    1530:	0002ef40 	.word	0x0002ef40
    1534:	0002ef18 	.word	0x0002ef18
    1538:	0002ee88 	.word	0x0002ee88
    153c:	0002ef54 	.word	0x0002ef54
    1540:	0002ef70 	.word	0x0002ef70
    1544:	00030290 	.word	0x00030290
    1548:	0002ef34 	.word	0x0002ef34
    154c:	0002ef24 	.word	0x0002ef24

00001550 <malformed_cb>:
/**
 * The signature of this routine must match the malformed callback declared at
 * the mqtt.h header.
 */
static void malformed_cb(struct mqtt_ctx *mqtt_ctx, u16_t pkt_type)
{
    1550:	b508      	push	{r3, lr}
	printk("[%s:%d] pkt_type: %u\n", __func__, __LINE__, pkt_type);
    1552:	460b      	mov	r3, r1
    1554:	22d6      	movs	r2, #214	; 0xd6
    1556:	4902      	ldr	r1, [pc, #8]	; (1560 <malformed_cb+0x10>)
    1558:	4802      	ldr	r0, [pc, #8]	; (1564 <malformed_cb+0x14>)
    155a:	f001 fcf5 	bl	2f48 <printk>
    155e:	bd08      	pop	{r3, pc}
    1560:	0002ee94 	.word	0x0002ee94
    1564:	0002eef8 	.word	0x0002eef8

00001568 <disconnect_cb>:
{
    1568:	b510      	push	{r4, lr}
    156a:	4604      	mov	r4, r0
	printk("[%s:%d]", __func__, __LINE__);
    156c:	2295      	movs	r2, #149	; 0x95
    156e:	4907      	ldr	r1, [pc, #28]	; (158c <disconnect_cb+0x24>)
    1570:	4807      	ldr	r0, [pc, #28]	; (1590 <disconnect_cb+0x28>)
    1572:	f001 fce9 	bl	2f48 <printk>
	if (client_ctx->disconnect_data) {
    1576:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
    157a:	b111      	cbz	r1, 1582 <disconnect_cb+0x1a>
		printk(" user_data: %s",
    157c:	4805      	ldr	r0, [pc, #20]	; (1594 <disconnect_cb+0x2c>)
    157e:	f001 fce3 	bl	2f48 <printk>
	printk("\n");
    1582:	4805      	ldr	r0, [pc, #20]	; (1598 <disconnect_cb+0x30>)
    1584:	f001 fce0 	bl	2f48 <printk>
    1588:	bd10      	pop	{r4, pc}
    158a:	bf00      	nop
    158c:	0002ee78 	.word	0x0002ee78
    1590:	0002eeb8 	.word	0x0002eeb8
    1594:	0002eec0 	.word	0x0002eec0
    1598:	00030290 	.word	0x00030290

0000159c <connect_cb>:
{
    159c:	b510      	push	{r4, lr}
    159e:	4604      	mov	r4, r0
	printk("[%s:%d]", __func__, __LINE__);
    15a0:	2282      	movs	r2, #130	; 0x82
    15a2:	4907      	ldr	r1, [pc, #28]	; (15c0 <connect_cb+0x24>)
    15a4:	4807      	ldr	r0, [pc, #28]	; (15c4 <connect_cb+0x28>)
    15a6:	f001 fccf 	bl	2f48 <printk>
	if (client_ctx->connect_data) {
    15aa:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
    15ae:	b111      	cbz	r1, 15b6 <connect_cb+0x1a>
		printk(" user_data: %s",
    15b0:	4805      	ldr	r0, [pc, #20]	; (15c8 <connect_cb+0x2c>)
    15b2:	f001 fcc9 	bl	2f48 <printk>
	printk("\n");
    15b6:	4805      	ldr	r0, [pc, #20]	; (15cc <connect_cb+0x30>)
    15b8:	f001 fcc6 	bl	2f48 <printk>
    15bc:	bd10      	pop	{r4, pc}
    15be:	bf00      	nop
    15c0:	0002ee6c 	.word	0x0002ee6c
    15c4:	0002eeb8 	.word	0x0002eeb8
    15c8:	0002eec0 	.word	0x0002eec0
    15cc:	00030290 	.word	0x00030290

000015d0 <get_telemetry_payload>:
	return payload;
}


static char *get_telemetry_payload(enum mqtt_qos qos)
{
    15d0:	b510      	push	{r4, lr}
	static char payload[128];
	snprintf(payload, sizeof(payload), "{\"message\":\"%s\"}", "hi");
    15d2:	4c04      	ldr	r4, [pc, #16]	; (15e4 <get_telemetry_payload+0x14>)
    15d4:	4b04      	ldr	r3, [pc, #16]	; (15e8 <get_telemetry_payload+0x18>)
    15d6:	4a05      	ldr	r2, [pc, #20]	; (15ec <get_telemetry_payload+0x1c>)
    15d8:	2180      	movs	r1, #128	; 0x80
    15da:	4620      	mov	r0, r4
    15dc:	f029 faa0 	bl	2ab20 <snprintf>
	return payload;
}
    15e0:	4620      	mov	r0, r4
    15e2:	bd10      	pop	{r4, pc}
    15e4:	20000090 	.word	0x20000090
    15e8:	0002eee0 	.word	0x0002eee0
    15ec:	0002eee4 	.word	0x0002eee4

000015f0 <prepare_telemetry_msg>:
	pub_msg->pkt_id = sys_rand32_get();
}

static void prepare_telemetry_msg(struct mqtt_publish_msg *pub_msg,
				     enum mqtt_qos qos)
{
    15f0:	b538      	push	{r3, r4, r5, lr}
    15f2:	4604      	mov	r4, r0
    15f4:	460d      	mov	r5, r1
	/* MQTT message payload may be anything, we we use C strings */
	pub_msg->msg = get_telemetry_payload(qos);
    15f6:	4608      	mov	r0, r1
    15f8:	f7ff ffea 	bl	15d0 <get_telemetry_payload>
    15fc:	6120      	str	r0, [r4, #16]
	/* Payload's length */
	pub_msg->msg_len = strlen(pub_msg->msg);
    15fe:	f7ff f87f 	bl	700 <strlen>
    1602:	82a0      	strh	r0, [r4, #20]
	/* MQTT Quality of Service */
	pub_msg->qos = qos;
    1604:	7065      	strb	r5, [r4, #1]
	/* Message's topic */
	pub_msg->topic = TOPIC;
    1606:	4804      	ldr	r0, [pc, #16]	; (1618 <prepare_telemetry_msg+0x28>)
    1608:	60a0      	str	r0, [r4, #8]
	pub_msg->topic_len = strlen(pub_msg->topic);
    160a:	f7ff f879 	bl	700 <strlen>
    160e:	81a0      	strh	r0, [r4, #12]
	/* Packet Identifier, always use different values */
	pub_msg->pkt_id = sys_rand32_get();
    1610:	f000 fd00 	bl	2014 <sys_rand32_get>
    1614:	80a0      	strh	r0, [r4, #4]
    1616:	bd38      	pop	{r3, r4, r5, pc}
    1618:	0002ef10 	.word	0x0002ef10

0000161c <get_attributes_payload>:
{
    161c:	b510      	push	{r4, lr}
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
    161e:	f027 f91b 	bl	28858 <_impl_k_uptime_get_32>
	snprintf(payload, sizeof(payload), "{\"uptime\":\"%d\"}",
    1622:	4b06      	ldr	r3, [pc, #24]	; (163c <get_attributes_payload+0x20>)
    1624:	fba3 2300 	umull	r2, r3, r3, r0
    1628:	4c05      	ldr	r4, [pc, #20]	; (1640 <get_attributes_payload+0x24>)
    162a:	099b      	lsrs	r3, r3, #6
    162c:	4a05      	ldr	r2, [pc, #20]	; (1644 <get_attributes_payload+0x28>)
    162e:	2180      	movs	r1, #128	; 0x80
    1630:	4620      	mov	r0, r4
    1632:	f029 fa75 	bl	2ab20 <snprintf>
}
    1636:	4620      	mov	r0, r4
    1638:	bd10      	pop	{r4, pc}
    163a:	bf00      	nop
    163c:	10624dd3 	.word	0x10624dd3
    1640:	20000010 	.word	0x20000010
    1644:	0002eed0 	.word	0x0002eed0

00001648 <prepare_attributes_msg>:
{
    1648:	b538      	push	{r3, r4, r5, lr}
    164a:	4604      	mov	r4, r0
    164c:	460d      	mov	r5, r1
	pub_msg->msg = get_attributes_payload(qos);
    164e:	4608      	mov	r0, r1
    1650:	f7ff ffe4 	bl	161c <get_attributes_payload>
    1654:	6120      	str	r0, [r4, #16]
	pub_msg->msg_len = strlen(pub_msg->msg);
    1656:	f7ff f853 	bl	700 <strlen>
    165a:	82a0      	strh	r0, [r4, #20]
	pub_msg->qos = qos;
    165c:	7065      	strb	r5, [r4, #1]
	pub_msg->topic = TOPIC;
    165e:	4804      	ldr	r0, [pc, #16]	; (1670 <prepare_attributes_msg+0x28>)
    1660:	60a0      	str	r0, [r4, #8]
	pub_msg->topic_len = strlen(pub_msg->topic);
    1662:	f7ff f84d 	bl	700 <strlen>
    1666:	81a0      	strh	r0, [r4, #12]
	pub_msg->pkt_id = sys_rand32_get();
    1668:	f000 fcd4 	bl	2014 <sys_rand32_get>
    166c:	80a0      	strh	r0, [r4, #4]
    166e:	bd38      	pop	{r3, r4, r5, pc}
    1670:	0002ef10 	.word	0x0002ef10

00001674 <publisher_thread>:
K_THREAD_STACK_DEFINE(pub_stack_area, PUB_STACK_SIZE);
struct k_thread pub_thread;
static struct mqtt_client_ctx pub_ctx;

void publisher_thread(void * unused1, void * unused2, void * unused3)
{
    1674:	b530      	push	{r4, r5, lr}
    1676:	b083      	sub	sp, #12

	int i, rc;
	bool data_changed;

	/* Set everything to 0 and later just assign the required fields. */
	memset(&pub_ctx, 0x00, sizeof(pub_ctx));
    1678:	4c81      	ldr	r4, [pc, #516]	; (1880 <publisher_thread+0x20c>)
    167a:	f44f 7280 	mov.w	r2, #256	; 0x100
    167e:	2100      	movs	r1, #0
    1680:	4620      	mov	r0, r4
    1682:	f029 f9ff 	bl	2aa84 <memset>

	/* connect, disconnect and malformed may be set to NULL */
	pub_ctx.mqtt_ctx.connect = connect_cb;
    1686:	4b7f      	ldr	r3, [pc, #508]	; (1884 <publisher_thread+0x210>)
    1688:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0

	pub_ctx.mqtt_ctx.disconnect = disconnect_cb;
    168c:	4b7e      	ldr	r3, [pc, #504]	; (1888 <publisher_thread+0x214>)
    168e:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
	pub_ctx.mqtt_ctx.malformed = malformed_cb;
    1692:	4b7e      	ldr	r3, [pc, #504]	; (188c <publisher_thread+0x218>)
    1694:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8

	pub_ctx.mqtt_ctx.net_init_timeout = APP_NET_INIT_TIMEOUT;
    1698:	f242 7310 	movw	r3, #10000	; 0x2710
    169c:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
	pub_ctx.mqtt_ctx.net_timeout = APP_TX_RX_TIMEOUT;
    16a0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    16a4:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4

	pub_ctx.mqtt_ctx.peer_addr_str = SERVER_ADDR;
    16a8:	4b79      	ldr	r3, [pc, #484]	; (1890 <publisher_thread+0x21c>)
    16aa:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
	pub_ctx.mqtt_ctx.peer_port = SERVER_PORT;
    16ae:	f240 735b 	movw	r3, #1883	; 0x75b
    16b2:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc

	/* Publisher apps TX the MQTT PUBLISH msg */
	pub_ctx.mqtt_ctx.publish_tx = publish_cb;
    16b6:	4b77      	ldr	r3, [pc, #476]	; (1894 <publisher_thread+0x220>)
    16b8:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
	/* The connect message will be sent to the MQTT server (broker).
	 * If clean_session here is 0, the mqtt_ctx clean_session variable
	 * will be set to 0 also. Please don't do that, set always to 1.
	 * Clean session = 0 is not yet supported.
	 */
	pub_ctx.connect_msg.user_name = TB_ACCESS_TOKEN;
    16bc:	4876      	ldr	r0, [pc, #472]	; (1898 <publisher_thread+0x224>)
    16be:	6220      	str	r0, [r4, #32]
	pub_ctx.connect_msg.user_name_len = strlen(TB_ACCESS_TOKEN);
    16c0:	f7ff f81e 	bl	700 <strlen>
    16c4:	84a0      	strh	r0, [r4, #36]	; 0x24
	pub_ctx.connect_msg.clean_session = 1;
    16c6:	7823      	ldrb	r3, [r4, #0]
    16c8:	f043 0301 	orr.w	r3, r3, #1
    16cc:	7023      	strb	r3, [r4, #0]

	pub_ctx.connect_data = "CONNECTED";
    16ce:	4b73      	ldr	r3, [pc, #460]	; (189c <publisher_thread+0x228>)
    16d0:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
	pub_ctx.disconnect_data = "DISCONNECTED";
    16d4:	4b72      	ldr	r3, [pc, #456]	; (18a0 <publisher_thread+0x22c>)
    16d6:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
	pub_ctx.publish_data = "PUBLISH";
    16da:	4b72      	ldr	r3, [pc, #456]	; (18a4 <publisher_thread+0x230>)
    16dc:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc

	while ((rc = k_sem_take(&pub_sem, K_FOREVER)) == 0) {
    16e0:	e0aa      	b.n	1838 <publisher_thread+0x1c4>

		rc = mqtt_init(&pub_ctx.mqtt_ctx, MQTT_APP_PUBLISHER);
		PRINT_RESULT("mqtt_init", rc);
    16e2:	4b71      	ldr	r3, [pc, #452]	; (18a8 <publisher_thread+0x234>)
    16e4:	e0b7      	b.n	1856 <publisher_thread+0x1e2>
		}

		i = 0;
		do {
			rc = mqtt_connect(&pub_ctx.mqtt_ctx);
			PRINT_RESULT("mqtt_connect", rc);
    16e6:	4b70      	ldr	r3, [pc, #448]	; (18a8 <publisher_thread+0x234>)
    16e8:	9301      	str	r3, [sp, #4]
    16ea:	9400      	str	r4, [sp, #0]
    16ec:	4b6f      	ldr	r3, [pc, #444]	; (18ac <publisher_thread+0x238>)
    16ee:	f44f 72a5 	mov.w	r2, #330	; 0x14a
    16f2:	496f      	ldr	r1, [pc, #444]	; (18b0 <publisher_thread+0x23c>)
    16f4:	486f      	ldr	r0, [pc, #444]	; (18b4 <publisher_thread+0x240>)
    16f6:	f001 fc27 	bl	2f48 <printk>
		} while (rc != 0 && i++ < APP_CONN_TRIES);
    16fa:	b15c      	cbz	r4, 1714 <publisher_thread+0xa0>
    16fc:	1c6b      	adds	r3, r5, #1
    16fe:	2d63      	cmp	r5, #99	; 0x63
    1700:	dc08      	bgt.n	1714 <publisher_thread+0xa0>
    1702:	461d      	mov	r5, r3
			rc = mqtt_connect(&pub_ctx.mqtt_ctx);
    1704:	486c      	ldr	r0, [pc, #432]	; (18b8 <publisher_thread+0x244>)
    1706:	f024 f839 	bl	2577c <mqtt_connect>
			PRINT_RESULT("mqtt_connect", rc);
    170a:	4604      	mov	r4, r0
    170c:	2800      	cmp	r0, #0
    170e:	d1ea      	bne.n	16e6 <publisher_thread+0x72>
    1710:	4b6a      	ldr	r3, [pc, #424]	; (18bc <publisher_thread+0x248>)
    1712:	e7e9      	b.n	16e8 <publisher_thread+0x74>

		if (rc != 0) {
    1714:	b1cc      	cbz	r4, 174a <publisher_thread+0xd6>
    1716:	e0aa      	b.n	186e <publisher_thread+0x1fa>
		}

		i = 0;
		do {
			rc = mqtt_tx_connect(&pub_ctx.mqtt_ctx, &pub_ctx.connect_msg);
			PRINT_RESULT("mqtt_tx_connect", rc);
    1718:	4b63      	ldr	r3, [pc, #396]	; (18a8 <publisher_thread+0x234>)
    171a:	9301      	str	r3, [sp, #4]
    171c:	9500      	str	r5, [sp, #0]
    171e:	4b68      	ldr	r3, [pc, #416]	; (18c0 <publisher_thread+0x24c>)
    1720:	f44f 72aa 	mov.w	r2, #340	; 0x154
    1724:	4962      	ldr	r1, [pc, #392]	; (18b0 <publisher_thread+0x23c>)
    1726:	4863      	ldr	r0, [pc, #396]	; (18b4 <publisher_thread+0x240>)
    1728:	f001 fc0e 	bl	2f48 <printk>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SLEEP, k_sleep, s32_t, duration);
    172c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    1730:	f026 fef4 	bl	2851c <_impl_k_sleep>
			k_sleep(APP_TX_CONN_WAIT_MSECS);
		} while (rc == 0 && i++ < APP_TX_CONN_TRIES && !pub_ctx.mqtt_ctx.connected);
    1734:	b99d      	cbnz	r5, 175e <publisher_thread+0xea>
    1736:	1c63      	adds	r3, r4, #1
    1738:	2c13      	cmp	r4, #19
    173a:	dc10      	bgt.n	175e <publisher_thread+0xea>
    173c:	4a50      	ldr	r2, [pc, #320]	; (1880 <publisher_thread+0x20c>)
    173e:	f892 20f1 	ldrb.w	r2, [r2, #241]	; 0xf1
    1742:	f012 0f02 	tst.w	r2, #2
    1746:	d10a      	bne.n	175e <publisher_thread+0xea>
    1748:	461c      	mov	r4, r3
			rc = mqtt_tx_connect(&pub_ctx.mqtt_ctx, &pub_ctx.connect_msg);
    174a:	484d      	ldr	r0, [pc, #308]	; (1880 <publisher_thread+0x20c>)
    174c:	4601      	mov	r1, r0
    174e:	3048      	adds	r0, #72	; 0x48
    1750:	f023 fe42 	bl	253d8 <mqtt_tx_connect>
			PRINT_RESULT("mqtt_tx_connect", rc);
    1754:	4605      	mov	r5, r0
    1756:	2800      	cmp	r0, #0
    1758:	d1de      	bne.n	1718 <publisher_thread+0xa4>
    175a:	4b58      	ldr	r3, [pc, #352]	; (18bc <publisher_thread+0x248>)
    175c:	e7dd      	b.n	171a <publisher_thread+0xa6>

		if (!pub_ctx.mqtt_ctx.connected) {
    175e:	4b48      	ldr	r3, [pc, #288]	; (1880 <publisher_thread+0x20c>)
    1760:	f893 30f1 	ldrb.w	r3, [r3, #241]	; 0xf1
    1764:	f013 0f02 	tst.w	r3, #2
    1768:	d114      	bne.n	1794 <publisher_thread+0x120>
			mqtt_close(&pub_ctx.mqtt_ctx);
    176a:	4853      	ldr	r0, [pc, #332]	; (18b8 <publisher_thread+0x244>)
    176c:	f024 f84c 	bl	25808 <mqtt_close>
			goto exit_pub;
    1770:	e07d      	b.n	186e <publisher_thread+0x1fa>
		do {
			bool data_changed = false;
			k_mutex_lock(&pub_data, K_FOREVER);

			if (telemetry_changed) {
				prepare_telemetry_msg(&pub_ctx.pub_msg, MQTT_QoS0);
    1772:	2100      	movs	r1, #0
    1774:	4853      	ldr	r0, [pc, #332]	; (18c4 <publisher_thread+0x250>)
    1776:	f7ff ff3b 	bl	15f0 <prepare_telemetry_msg>
				telemetry_changed=false;
    177a:	2200      	movs	r2, #0
    177c:	4b52      	ldr	r3, [pc, #328]	; (18c8 <publisher_thread+0x254>)
    177e:	701a      	strb	r2, [r3, #0]
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex);
    1780:	4852      	ldr	r0, [pc, #328]	; (18cc <publisher_thread+0x258>)
    1782:	f026 f851 	bl	27828 <_impl_k_mutex_unlock>
				data_changed = true;
			}

			k_mutex_unlock(&pub_data);

			if (data_changed) {
    1786:	b9d4      	cbnz	r4, 17be <publisher_thread+0x14a>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    1788:	f242 7110 	movw	r1, #10000	; 0x2710
    178c:	4850      	ldr	r0, [pc, #320]	; (18d0 <publisher_thread+0x25c>)
    178e:	f027 f817 	bl	287c0 <_impl_k_sem_take>
				rc = mqtt_tx_publish(&pub_ctx.mqtt_ctx, &pub_ctx.pub_msg);
				PRINT_RESULT("mqtt_tx_publish", rc);
			}
		} while ((rc = k_sem_take(&pub_sem, APP_CONN_IDLE_TIMEOUT)) == 0);
    1792:	bb48      	cbnz	r0, 17e8 <publisher_thread+0x174>
K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout);
    1794:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    1798:	484c      	ldr	r0, [pc, #304]	; (18cc <publisher_thread+0x258>)
    179a:	f025 ffdb 	bl	27754 <_impl_k_mutex_lock>
			if (telemetry_changed) {
    179e:	4b4a      	ldr	r3, [pc, #296]	; (18c8 <publisher_thread+0x254>)
    17a0:	781c      	ldrb	r4, [r3, #0]
    17a2:	2c00      	cmp	r4, #0
    17a4:	d1e5      	bne.n	1772 <publisher_thread+0xfe>
			else if (attributes_changed) {
    17a6:	4b4b      	ldr	r3, [pc, #300]	; (18d4 <publisher_thread+0x260>)
    17a8:	781c      	ldrb	r4, [r3, #0]
    17aa:	2c00      	cmp	r4, #0
    17ac:	d0e8      	beq.n	1780 <publisher_thread+0x10c>
				prepare_attributes_msg(&pub_ctx.pub_msg, MQTT_QoS0);
    17ae:	2100      	movs	r1, #0
    17b0:	4844      	ldr	r0, [pc, #272]	; (18c4 <publisher_thread+0x250>)
    17b2:	f7ff ff49 	bl	1648 <prepare_attributes_msg>
				attributes_changed = false;
    17b6:	2200      	movs	r2, #0
    17b8:	4b46      	ldr	r3, [pc, #280]	; (18d4 <publisher_thread+0x260>)
    17ba:	701a      	strb	r2, [r3, #0]
    17bc:	e7e0      	b.n	1780 <publisher_thread+0x10c>
				rc = mqtt_tx_publish(&pub_ctx.mqtt_ctx, &pub_ctx.pub_msg);
    17be:	4830      	ldr	r0, [pc, #192]	; (1880 <publisher_thread+0x20c>)
    17c0:	f100 0130 	add.w	r1, r0, #48	; 0x30
    17c4:	3048      	adds	r0, #72	; 0x48
    17c6:	f023 fe93 	bl	254f0 <mqtt_tx_publish>
				PRINT_RESULT("mqtt_tx_publish", rc);
    17ca:	4603      	mov	r3, r0
    17cc:	b950      	cbnz	r0, 17e4 <publisher_thread+0x170>
    17ce:	4a3b      	ldr	r2, [pc, #236]	; (18bc <publisher_thread+0x248>)
    17d0:	9201      	str	r2, [sp, #4]
    17d2:	9300      	str	r3, [sp, #0]
    17d4:	4b40      	ldr	r3, [pc, #256]	; (18d8 <publisher_thread+0x264>)
    17d6:	f44f 72b8 	mov.w	r2, #368	; 0x170
    17da:	4935      	ldr	r1, [pc, #212]	; (18b0 <publisher_thread+0x23c>)
    17dc:	4835      	ldr	r0, [pc, #212]	; (18b4 <publisher_thread+0x240>)
    17de:	f001 fbb3 	bl	2f48 <printk>
    17e2:	e7d1      	b.n	1788 <publisher_thread+0x114>
    17e4:	4a30      	ldr	r2, [pc, #192]	; (18a8 <publisher_thread+0x234>)
    17e6:	e7f3      	b.n	17d0 <publisher_thread+0x15c>

		rc = mqtt_tx_disconnect(&pub_ctx.mqtt_ctx);
    17e8:	4833      	ldr	r0, [pc, #204]	; (18b8 <publisher_thread+0x244>)
    17ea:	f023 fe37 	bl	2545c <mqtt_tx_disconnect>
		PRINT_RESULT("mqtt_tx_disconnect", rc);
    17ee:	4603      	mov	r3, r0
    17f0:	2800      	cmp	r0, #0
    17f2:	d141      	bne.n	1878 <publisher_thread+0x204>
    17f4:	4a31      	ldr	r2, [pc, #196]	; (18bc <publisher_thread+0x248>)
    17f6:	9201      	str	r2, [sp, #4]
    17f8:	9300      	str	r3, [sp, #0]
    17fa:	4b38      	ldr	r3, [pc, #224]	; (18dc <publisher_thread+0x268>)
    17fc:	f240 1275 	movw	r2, #373	; 0x175
    1800:	492b      	ldr	r1, [pc, #172]	; (18b0 <publisher_thread+0x23c>)
    1802:	482c      	ldr	r0, [pc, #176]	; (18b4 <publisher_thread+0x240>)
    1804:	f001 fba0 	bl	2f48 <printk>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SLEEP, k_sleep, s32_t, duration);
    1808:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    180c:	f026 fe86 	bl	2851c <_impl_k_sleep>

		k_sleep(APP_TX_RX_TIMEOUT);

		rc = mqtt_close(&pub_ctx.mqtt_ctx);
    1810:	4829      	ldr	r0, [pc, #164]	; (18b8 <publisher_thread+0x244>)
    1812:	f023 fff9 	bl	25808 <mqtt_close>
		PRINT_RESULT("mqtt_close", rc);
    1816:	4603      	mov	r3, r0
    1818:	2800      	cmp	r0, #0
    181a:	d12f      	bne.n	187c <publisher_thread+0x208>
    181c:	4a27      	ldr	r2, [pc, #156]	; (18bc <publisher_thread+0x248>)
    181e:	9201      	str	r2, [sp, #4]
    1820:	9300      	str	r3, [sp, #0]
    1822:	4b2f      	ldr	r3, [pc, #188]	; (18e0 <publisher_thread+0x26c>)
    1824:	f44f 72bd 	mov.w	r2, #378	; 0x17a
    1828:	4921      	ldr	r1, [pc, #132]	; (18b0 <publisher_thread+0x23c>)
    182a:	4822      	ldr	r0, [pc, #136]	; (18b4 <publisher_thread+0x240>)
    182c:	f001 fb8c 	bl	2f48 <printk>
    1830:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    1834:	f026 fe72 	bl	2851c <_impl_k_sleep>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    1838:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    183c:	4824      	ldr	r0, [pc, #144]	; (18d0 <publisher_thread+0x25c>)
    183e:	f026 ffbf 	bl	287c0 <_impl_k_sem_take>
	while ((rc = k_sem_take(&pub_sem, K_FOREVER)) == 0) {
    1842:	b9a0      	cbnz	r0, 186e <publisher_thread+0x1fa>
		rc = mqtt_init(&pub_ctx.mqtt_ctx, MQTT_APP_PUBLISHER);
    1844:	2101      	movs	r1, #1
    1846:	481c      	ldr	r0, [pc, #112]	; (18b8 <publisher_thread+0x244>)
    1848:	f023 ffcc 	bl	257e4 <mqtt_init>
		PRINT_RESULT("mqtt_init", rc);
    184c:	4605      	mov	r5, r0
    184e:	2800      	cmp	r0, #0
    1850:	f47f af47 	bne.w	16e2 <publisher_thread+0x6e>
    1854:	4b19      	ldr	r3, [pc, #100]	; (18bc <publisher_thread+0x248>)
    1856:	9301      	str	r3, [sp, #4]
    1858:	9500      	str	r5, [sp, #0]
    185a:	4b22      	ldr	r3, [pc, #136]	; (18e4 <publisher_thread+0x270>)
    185c:	f240 1241 	movw	r2, #321	; 0x141
    1860:	4913      	ldr	r1, [pc, #76]	; (18b0 <publisher_thread+0x23c>)
    1862:	4814      	ldr	r0, [pc, #80]	; (18b4 <publisher_thread+0x240>)
    1864:	f001 fb70 	bl	2f48 <printk>
		if (rc != 0) {
    1868:	2d00      	cmp	r5, #0
    186a:	f43f af4b 	beq.w	1704 <publisher_thread+0x90>
	}


exit_pub:

	printk("\nPublisher terminated!!\n");
    186e:	481e      	ldr	r0, [pc, #120]	; (18e8 <publisher_thread+0x274>)
    1870:	f001 fb6a 	bl	2f48 <printk>
}
    1874:	b003      	add	sp, #12
    1876:	bd30      	pop	{r4, r5, pc}
		PRINT_RESULT("mqtt_tx_disconnect", rc);
    1878:	4a0b      	ldr	r2, [pc, #44]	; (18a8 <publisher_thread+0x234>)
    187a:	e7bc      	b.n	17f6 <publisher_thread+0x182>
		PRINT_RESULT("mqtt_close", rc);
    187c:	4a0a      	ldr	r2, [pc, #40]	; (18a8 <publisher_thread+0x234>)
    187e:	e7ce      	b.n	181e <publisher_thread+0x1aa>
    1880:	20000110 	.word	0x20000110
    1884:	0000159d 	.word	0x0000159d
    1888:	00001569 	.word	0x00001569
    188c:	00001551 	.word	0x00001551
    1890:	0002ef8c 	.word	0x0002ef8c
    1894:	000014e1 	.word	0x000014e1
    1898:	0002efa8 	.word	0x0002efa8
    189c:	0002efc0 	.word	0x0002efc0
    18a0:	0002efcc 	.word	0x0002efcc
    18a4:	0002efdc 	.word	0x0002efdc
    18a8:	0002ef84 	.word	0x0002ef84
    18ac:	0002f008 	.word	0x0002f008
    18b0:	0002eea4 	.word	0x0002eea4
    18b4:	0002eff0 	.word	0x0002eff0
    18b8:	20000158 	.word	0x20000158
    18bc:	0002ef80 	.word	0x0002ef80
    18c0:	0002f018 	.word	0x0002f018
    18c4:	20000140 	.word	0x20000140
    18c8:	20000210 	.word	0x20000210
    18cc:	2000d060 	.word	0x2000d060
    18d0:	2000cfec 	.word	0x2000cfec
    18d4:	20000000 	.word	0x20000000
    18d8:	0002f028 	.word	0x0002f028
    18dc:	0002f038 	.word	0x0002f038
    18e0:	0002f04c 	.word	0x0002f04c
    18e4:	0002efe4 	.word	0x0002efe4
    18e8:	0002f058 	.word	0x0002f058

000018ec <start_publisher>:


static void start_publisher()
{
    18ec:	b500      	push	{lr}
    18ee:	b087      	sub	sp, #28
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay);
    18f0:	2300      	movs	r3, #0
    18f2:	9305      	str	r3, [sp, #20]
    18f4:	9304      	str	r3, [sp, #16]
    18f6:	2205      	movs	r2, #5
    18f8:	9203      	str	r2, [sp, #12]
    18fa:	9302      	str	r3, [sp, #8]
    18fc:	9301      	str	r3, [sp, #4]
    18fe:	9300      	str	r3, [sp, #0]
    1900:	4b04      	ldr	r3, [pc, #16]	; (1914 <start_publisher+0x28>)
    1902:	f44f 6200 	mov.w	r2, #2048	; 0x800
    1906:	4904      	ldr	r1, [pc, #16]	; (1918 <start_publisher+0x2c>)
    1908:	4804      	ldr	r0, [pc, #16]	; (191c <start_publisher+0x30>)
    190a:	f027 f9c5 	bl	28c98 <_impl_k_thread_create>
	k_tid_t tt_tid = k_thread_create(&pub_thread, pub_stack_area,
                                 K_THREAD_STACK_SIZEOF(pub_stack_area),
                                 publisher_thread,
                                 NULL, NULL, NULL,
                                 PUB_PRIORITY, 0, K_NO_WAIT);
}
    190e:	b007      	add	sp, #28
    1910:	f85d fb04 	ldr.w	pc, [sp], #4
    1914:	00001675 	.word	0x00001675
    1918:	200033a8 	.word	0x200033a8
    191c:	200028d4 	.word	0x200028d4

00001920 <start_sensors>:
{
    1920:	b500      	push	{lr}
    1922:	b087      	sub	sp, #28
    1924:	2300      	movs	r3, #0
    1926:	9305      	str	r3, [sp, #20]
    1928:	9304      	str	r3, [sp, #16]
    192a:	2205      	movs	r2, #5
    192c:	9203      	str	r2, [sp, #12]
    192e:	9302      	str	r3, [sp, #8]
    1930:	9301      	str	r3, [sp, #4]
    1932:	9300      	str	r3, [sp, #0]
    1934:	4b04      	ldr	r3, [pc, #16]	; (1948 <start_sensors+0x28>)
    1936:	f44f 6200 	mov.w	r2, #2048	; 0x800
    193a:	4904      	ldr	r1, [pc, #16]	; (194c <start_sensors+0x2c>)
    193c:	4804      	ldr	r0, [pc, #16]	; (1950 <start_sensors+0x30>)
    193e:	f027 f9ab 	bl	28c98 <_impl_k_thread_create>
}
    1942:	b007      	add	sp, #28
    1944:	f85d fb04 	ldr.w	pc, [sp], #4
    1948:	00001439 	.word	0x00001439
    194c:	20002ba8 	.word	0x20002ba8
    1950:	2000286c 	.word	0x2000286c

00001954 <event_iface_up>:


static void event_iface_up(struct net_mgmt_event_callback *cb,
			   u32_t mgmt_event, struct net_if *iface)
{
    1954:	b508      	push	{r3, lr}
	start_publisher();
    1956:	f7ff ffc9 	bl	18ec <start_publisher>
	start_sensors();
    195a:	f7ff ffe1 	bl	1920 <start_sensors>
    195e:	bd08      	pop	{r3, pc}

00001960 <main>:
}


void main(void)
{
    1960:	b510      	push	{r4, lr}
	struct net_if *iface = net_if_get_default();
    1962:	f018 ff5f 	bl	1a824 <net_if_get_default>
 * @return Value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    1966:	f3bf 8f5b 	dmb	ish
    196a:	68c3      	ldr	r3, [r0, #12]
    196c:	f3bf 8f5b 	dmb	ish

#if defined(CONFIG_NET_MGMT_EVENT)
	/* Subscribe to NET_IF_UP if interface is not ready */
	if (!atomic_test_bit(iface->flags, NET_IF_UP)) {
    1970:	f013 0f01 	tst.w	r3, #1
    1974:	d013      	beq.n	199e <main+0x3e>
K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout);
    1976:	4c0e      	ldr	r4, [pc, #56]	; (19b0 <main+0x50>)
    1978:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    197c:	4620      	mov	r0, r4
    197e:	f025 fee9 	bl	27754 <_impl_k_mutex_lock>
	event_iface_up(NULL, NET_EVENT_IF_UP, iface);
#endif

	while (true) {
		k_mutex_lock(&pub_data, K_FOREVER);
		attributes_changed = true;
    1982:	2201      	movs	r2, #1
    1984:	4b0b      	ldr	r3, [pc, #44]	; (19b4 <main+0x54>)
    1986:	701a      	strb	r2, [r3, #0]
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex);
    1988:	4620      	mov	r0, r4
    198a:	f025 ff4d 	bl	27828 <_impl_k_mutex_unlock>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    198e:	480a      	ldr	r0, [pc, #40]	; (19b8 <main+0x58>)
    1990:	f026 ff03 	bl	2879a <_impl_k_sem_give>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SLEEP, k_sleep, s32_t, duration);
    1994:	f242 7010 	movw	r0, #10000	; 0x2710
    1998:	f026 fdc0 	bl	2851c <_impl_k_sleep>
    199c:	e7eb      	b.n	1976 <main+0x16>
				  u32_t mgmt_event_mask)
{
	__ASSERT(cb, "Callback pointer should not be NULL");
	__ASSERT(handler, "Handler pointer should not be NULL");

	cb->handler = handler;
    199e:	4807      	ldr	r0, [pc, #28]	; (19bc <main+0x5c>)
    19a0:	4b07      	ldr	r3, [pc, #28]	; (19c0 <main+0x60>)
    19a2:	6043      	str	r3, [r0, #4]
	cb->event_mask = mgmt_event_mask;
    19a4:	4b07      	ldr	r3, [pc, #28]	; (19c4 <main+0x64>)
    19a6:	6083      	str	r3, [r0, #8]
		net_mgmt_add_event_callback(&cb);
    19a8:	f020 fd7a 	bl	224a0 <net_mgmt_add_event_callback>
    19ac:	e7e3      	b.n	1976 <main+0x16>
    19ae:	bf00      	nop
    19b0:	2000d060 	.word	0x2000d060
    19b4:	20000000 	.word	0x20000000
    19b8:	2000cfec 	.word	0x2000cfec
    19bc:	20000004 	.word	0x20000004
    19c0:	00001955 	.word	0x00001955
    19c4:	d0010002 	.word	0xd0010002

000019c8 <_sbrk>:
}
FUNC_ALIAS(_lseek, lseek, int);

void *_sbrk(int count)
{
	void *ptr = heap_base + heap_sz;
    19c8:	4b08      	ldr	r3, [pc, #32]	; (19ec <_sbrk+0x24>)
    19ca:	681a      	ldr	r2, [r3, #0]
    19cc:	4b08      	ldr	r3, [pc, #32]	; (19f0 <_sbrk+0x28>)
    19ce:	18d1      	adds	r1, r2, r3

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
    19d0:	4410      	add	r0, r2
    19d2:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
    19d6:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    19da:	4298      	cmp	r0, r3
    19dc:	d203      	bcs.n	19e6 <_sbrk+0x1e>
		heap_sz += count;
    19de:	4b03      	ldr	r3, [pc, #12]	; (19ec <_sbrk+0x24>)
    19e0:	6018      	str	r0, [r3, #0]
		return ptr;
	} else {
		return (void *)-1;
	}
}
    19e2:	4608      	mov	r0, r1
    19e4:	4770      	bx	lr
		return (void *)-1;
    19e6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    19ea:	e7fa      	b.n	19e2 <_sbrk+0x1a>
    19ec:	20000224 	.word	0x20000224
    19f0:	2000d454 	.word	0x2000d454

000019f4 <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
    19f4:	b510      	push	{r4, lr}
    19f6:	4604      	mov	r4, r0
		return c;
	}

#endif /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    19f8:	280a      	cmp	r0, #10
    19fa:	d007      	beq.n	1a0c <console_out+0x18>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
    19fc:	4b07      	ldr	r3, [pc, #28]	; (1a1c <console_out+0x28>)
    19fe:	6818      	ldr	r0, [r3, #0]
 * @retval char Sent character.
 */
static inline unsigned char uart_poll_out(struct device *dev,
					  unsigned char out_char)
{
	const struct uart_driver_api *api = dev->driver_api;
    1a00:	6843      	ldr	r3, [r0, #4]

	return api->poll_out(dev, out_char);
    1a02:	685b      	ldr	r3, [r3, #4]
    1a04:	b2e1      	uxtb	r1, r4
    1a06:	4798      	blx	r3

	return c;
}
    1a08:	4620      	mov	r0, r4
    1a0a:	bd10      	pop	{r4, pc}
		uart_poll_out(uart_console_dev, '\r');
    1a0c:	4b03      	ldr	r3, [pc, #12]	; (1a1c <console_out+0x28>)
    1a0e:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1a10:	6843      	ldr	r3, [r0, #4]
	return api->poll_out(dev, out_char);
    1a12:	685b      	ldr	r3, [r3, #4]
    1a14:	210d      	movs	r1, #13
    1a16:	4798      	blx	r3
    1a18:	e7f0      	b.n	19fc <console_out+0x8>
    1a1a:	bf00      	nop
    1a1c:	20000248 	.word	0x20000248

00001a20 <read_uart>:
#define ANSI_END           'F'
#define ANSI_HOME          'H'
#define ANSI_DEL           '~'

static int read_uart(struct device *uart, u8_t *buf, unsigned int size)
{
    1a20:	b510      	push	{r4, lr}
    1a22:	4604      	mov	r4, r0
 * @return Number of bytes read.
 */
static inline int uart_fifo_read(struct device *dev, u8_t *rx_data,
				 const int size)
{
	const struct uart_driver_api *api = dev->driver_api;
    1a24:	6843      	ldr	r3, [r0, #4]

	if (api->fifo_read) {
    1a26:	691b      	ldr	r3, [r3, #16]
    1a28:	b11b      	cbz	r3, 1a32 <read_uart+0x12>
		return api->fifo_read(dev, rx_data, size);
    1a2a:	4798      	blx	r3
	int rx;

	rx = uart_fifo_read(uart, buf, size);
	if (rx < 0) {
    1a2c:	2800      	cmp	r0, #0
    1a2e:	db02      	blt.n	1a36 <read_uart+0x16>

		return -EIO;
	}

	return rx;
}
    1a30:	bd10      	pop	{r4, pc}
	}

	return 0;
    1a32:	2000      	movs	r0, #0
    1a34:	e7fa      	b.n	1a2c <read_uart+0xc>
 *
 * @return N/A
 */
static inline void uart_irq_rx_disable(struct device *dev)
{
	const struct uart_driver_api *api = dev->driver_api;
    1a36:	6863      	ldr	r3, [r4, #4]

	if (api->irq_rx_disable) {
    1a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1a3a:	b123      	cbz	r3, 1a46 <read_uart+0x26>
		api->irq_rx_disable(dev);
    1a3c:	4620      	mov	r0, r4
    1a3e:	4798      	blx	r3
		return -EIO;
    1a40:	f06f 0004 	mvn.w	r0, #4
    1a44:	bd10      	pop	{r4, pc}
    1a46:	f06f 0004 	mvn.w	r0, #4
    1a4a:	e7f1      	b.n	1a30 <read_uart+0x10>

00001a4c <console_input_init>:
		}
	}
}

static void console_input_init(void)
{
    1a4c:	b500      	push	{lr}
    1a4e:	b083      	sub	sp, #12
	u8_t c;

	uart_irq_rx_disable(uart_console_dev);
    1a50:	4b19      	ldr	r3, [pc, #100]	; (1ab8 <console_input_init+0x6c>)
    1a52:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1a54:	6843      	ldr	r3, [r0, #4]
	if (api->irq_rx_disable) {
    1a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1a58:	b103      	cbz	r3, 1a5c <console_input_init+0x10>
		api->irq_rx_disable(dev);
    1a5a:	4798      	blx	r3
	uart_irq_tx_disable(uart_console_dev);
    1a5c:	4b16      	ldr	r3, [pc, #88]	; (1ab8 <console_input_init+0x6c>)
    1a5e:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1a60:	6843      	ldr	r3, [r0, #4]
	if (api->irq_tx_disable) {
    1a62:	699b      	ldr	r3, [r3, #24]
    1a64:	b103      	cbz	r3, 1a68 <console_input_init+0x1c>
		api->irq_tx_disable(dev);
    1a66:	4798      	blx	r3

	uart_irq_callback_set(uart_console_dev, uart_console_isr);
    1a68:	4b13      	ldr	r3, [pc, #76]	; (1ab8 <console_input_init+0x6c>)
    1a6a:	6818      	ldr	r0, [r3, #0]
 * @return N/A
 */
static inline void uart_irq_callback_set(struct device *dev,
					 uart_irq_callback_t cb)
{
	const struct uart_driver_api *api = dev->driver_api;
    1a6c:	6843      	ldr	r3, [r0, #4]

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
    1a6e:	b18b      	cbz	r3, 1a94 <console_input_init+0x48>
    1a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1a72:	b17b      	cbz	r3, 1a94 <console_input_init+0x48>
		api->irq_callback_set(dev, cb);
    1a74:	4911      	ldr	r1, [pc, #68]	; (1abc <console_input_init+0x70>)
    1a76:	4798      	blx	r3
    1a78:	e00c      	b.n	1a94 <console_input_init+0x48>
		return api->fifo_read(dev, rx_data, size);
    1a7a:	2201      	movs	r2, #1
    1a7c:	f10d 0107 	add.w	r1, sp, #7
    1a80:	4798      	blx	r3
    1a82:	e007      	b.n	1a94 <console_input_init+0x48>
	return 0;
    1a84:	2000      	movs	r0, #0

	/* Drain the fifo */
	while (uart_irq_rx_ready(uart_console_dev)) {
    1a86:	b168      	cbz	r0, 1aa4 <console_input_init+0x58>
		uart_fifo_read(uart_console_dev, &c, 1);
    1a88:	4b0b      	ldr	r3, [pc, #44]	; (1ab8 <console_input_init+0x6c>)
    1a8a:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1a8c:	6843      	ldr	r3, [r0, #4]
	if (api->fifo_read) {
    1a8e:	691b      	ldr	r3, [r3, #16]
    1a90:	2b00      	cmp	r3, #0
    1a92:	d1f2      	bne.n	1a7a <console_input_init+0x2e>
	while (uart_irq_rx_ready(uart_console_dev)) {
    1a94:	4b08      	ldr	r3, [pc, #32]	; (1ab8 <console_input_init+0x6c>)
    1a96:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1a98:	6843      	ldr	r3, [r0, #4]
	if (api->irq_rx_ready) {
    1a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1a9c:	2b00      	cmp	r3, #0
    1a9e:	d0f1      	beq.n	1a84 <console_input_init+0x38>
		return api->irq_rx_ready(dev);
    1aa0:	4798      	blx	r3
    1aa2:	e7f0      	b.n	1a86 <console_input_init+0x3a>
	}

	uart_irq_rx_enable(uart_console_dev);
    1aa4:	4b04      	ldr	r3, [pc, #16]	; (1ab8 <console_input_init+0x6c>)
    1aa6:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1aa8:	6843      	ldr	r3, [r0, #4]
	if (api->irq_rx_enable) {
    1aaa:	6a1b      	ldr	r3, [r3, #32]
    1aac:	b103      	cbz	r3, 1ab0 <console_input_init+0x64>
		api->irq_rx_enable(dev);
    1aae:	4798      	blx	r3
}
    1ab0:	b003      	add	sp, #12
    1ab2:	f85d fb04 	ldr.w	pc, [sp], #4
    1ab6:	bf00      	nop
    1ab8:	20000248 	.word	0x20000248
    1abc:	00001db9 	.word	0x00001db9

00001ac0 <del_char>:
{
    1ac0:	b570      	push	{r4, r5, r6, lr}
    1ac2:	4606      	mov	r6, r0
    1ac4:	460d      	mov	r5, r1
	uart_poll_out(uart_console_dev, '\b');
    1ac6:	4b17      	ldr	r3, [pc, #92]	; (1b24 <del_char+0x64>)
    1ac8:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1aca:	6843      	ldr	r3, [r0, #4]
	return api->poll_out(dev, out_char);
    1acc:	685b      	ldr	r3, [r3, #4]
    1ace:	2108      	movs	r1, #8
    1ad0:	4798      	blx	r3
	if (end == 0) {
    1ad2:	b11d      	cbz	r5, 1adc <del_char+0x1c>
	printk("\x1b[s");
    1ad4:	4814      	ldr	r0, [pc, #80]	; (1b28 <del_char+0x68>)
    1ad6:	f001 fa37 	bl	2f48 <printk>
    1ada:	e014      	b.n	1b06 <del_char+0x46>
		uart_poll_out(uart_console_dev, ' ');
    1adc:	4c11      	ldr	r4, [pc, #68]	; (1b24 <del_char+0x64>)
    1ade:	6820      	ldr	r0, [r4, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1ae0:	6843      	ldr	r3, [r0, #4]
	return api->poll_out(dev, out_char);
    1ae2:	685b      	ldr	r3, [r3, #4]
    1ae4:	2120      	movs	r1, #32
    1ae6:	4798      	blx	r3
		uart_poll_out(uart_console_dev, '\b');
    1ae8:	6820      	ldr	r0, [r4, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1aea:	6843      	ldr	r3, [r0, #4]
	return api->poll_out(dev, out_char);
    1aec:	685b      	ldr	r3, [r3, #4]
    1aee:	2108      	movs	r1, #8
    1af0:	4798      	blx	r3
    1af2:	bd70      	pop	{r4, r5, r6, pc}
		*pos = *(pos + 1);
    1af4:	7871      	ldrb	r1, [r6, #1]
    1af6:	f806 1b01 	strb.w	r1, [r6], #1
		uart_poll_out(uart_console_dev, *(pos++));
    1afa:	4b0a      	ldr	r3, [pc, #40]	; (1b24 <del_char+0x64>)
    1afc:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1afe:	6843      	ldr	r3, [r0, #4]
	return api->poll_out(dev, out_char);
    1b00:	685b      	ldr	r3, [r3, #4]
    1b02:	4798      	blx	r3
	while (end-- > 0) {
    1b04:	4625      	mov	r5, r4
    1b06:	1e6b      	subs	r3, r5, #1
    1b08:	b2dc      	uxtb	r4, r3
    1b0a:	2d00      	cmp	r5, #0
    1b0c:	d1f2      	bne.n	1af4 <del_char+0x34>
	uart_poll_out(uart_console_dev, ' ');
    1b0e:	4b05      	ldr	r3, [pc, #20]	; (1b24 <del_char+0x64>)
    1b10:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1b12:	6843      	ldr	r3, [r0, #4]
	return api->poll_out(dev, out_char);
    1b14:	685b      	ldr	r3, [r3, #4]
    1b16:	2120      	movs	r1, #32
    1b18:	4798      	blx	r3
	printk("\x1b[u");
    1b1a:	4804      	ldr	r0, [pc, #16]	; (1b2c <del_char+0x6c>)
    1b1c:	f001 fa14 	bl	2f48 <printk>
    1b20:	bd70      	pop	{r4, r5, r6, pc}
    1b22:	bf00      	nop
    1b24:	20000248 	.word	0x20000248
    1b28:	0002f074 	.word	0x0002f074
    1b2c:	0002f078 	.word	0x0002f078

00001b30 <insert_char>:
{
    1b30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1b34:	4605      	mov	r5, r0
    1b36:	4688      	mov	r8, r1
    1b38:	4614      	mov	r4, r2
	uart_poll_out(uart_console_dev, c);
    1b3a:	4b14      	ldr	r3, [pc, #80]	; (1b8c <insert_char+0x5c>)
    1b3c:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1b3e:	6843      	ldr	r3, [r0, #4]
	return api->poll_out(dev, out_char);
    1b40:	685b      	ldr	r3, [r3, #4]
    1b42:	4798      	blx	r3
	if (end == 0) {
    1b44:	b91c      	cbnz	r4, 1b4e <insert_char+0x1e>
		*pos = c;
    1b46:	f885 8000 	strb.w	r8, [r5]
		return;
    1b4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tmp = *pos;
    1b4e:	462e      	mov	r6, r5
    1b50:	f816 7b01 	ldrb.w	r7, [r6], #1
	*(pos++) = c;
    1b54:	f885 8000 	strb.w	r8, [r5]
	printk("\x1b[s");
    1b58:	480d      	ldr	r0, [pc, #52]	; (1b90 <insert_char+0x60>)
    1b5a:	f001 f9f5 	bl	2f48 <printk>
    1b5e:	e00c      	b.n	1b7a <insert_char+0x4a>
		uart_poll_out(uart_console_dev, tmp);
    1b60:	4b0a      	ldr	r3, [pc, #40]	; (1b8c <insert_char+0x5c>)
    1b62:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1b64:	6843      	ldr	r3, [r0, #4]
	return api->poll_out(dev, out_char);
    1b66:	685b      	ldr	r3, [r3, #4]
    1b68:	4639      	mov	r1, r7
    1b6a:	4798      	blx	r3
		c = *pos;
    1b6c:	4633      	mov	r3, r6
    1b6e:	f813 2b01 	ldrb.w	r2, [r3], #1
		*(pos++) = tmp;
    1b72:	7037      	strb	r7, [r6, #0]
		tmp = c;
    1b74:	4617      	mov	r7, r2
	while (end-- > 0) {
    1b76:	462c      	mov	r4, r5
		*(pos++) = tmp;
    1b78:	461e      	mov	r6, r3
	while (end-- > 0) {
    1b7a:	1e63      	subs	r3, r4, #1
    1b7c:	b2dd      	uxtb	r5, r3
    1b7e:	2c00      	cmp	r4, #0
    1b80:	d1ee      	bne.n	1b60 <insert_char+0x30>
	printk("\x1b[u");
    1b82:	4804      	ldr	r0, [pc, #16]	; (1b94 <insert_char+0x64>)
    1b84:	f001 f9e0 	bl	2f48 <printk>
    1b88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1b8c:	20000248 	.word	0x20000248
    1b90:	0002f074 	.word	0x0002f074
    1b94:	0002f078 	.word	0x0002f078

00001b98 <handle_ansi>:
{
    1b98:	b538      	push	{r3, r4, r5, lr}
    1b9a:	4604      	mov	r4, r0
    1b9c:	460d      	mov	r5, r1
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    1b9e:	4b7f      	ldr	r3, [pc, #508]	; (1d9c <handle_ansi+0x204>)
    1ba0:	f3bf 8f5b 	dmb	ish
    1ba4:	e853 2f00 	ldrex	r2, [r3]
    1ba8:	f022 0104 	bic.w	r1, r2, #4
    1bac:	e843 1000 	strex	r0, r1, [r3]
    1bb0:	2800      	cmp	r0, #0
    1bb2:	d1f7      	bne.n	1ba4 <handle_ansi+0xc>
    1bb4:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(&esc_state, ESC_ANSI_FIRST)) {
    1bb8:	f012 0f04 	tst.w	r2, #4
    1bbc:	d03c      	beq.n	1c38 <handle_ansi+0xa0>
		if (!isdigit(byte)) {
    1bbe:	f028 fea9 	bl	2a914 <__locale_ctype_ptr>
    1bc2:	4420      	add	r0, r4
    1bc4:	7843      	ldrb	r3, [r0, #1]
    1bc6:	f013 0f04 	tst.w	r3, #4
    1bca:	d121      	bne.n	1c10 <handle_ansi+0x78>
			ansi_val = 1;
    1bcc:	2201      	movs	r2, #1
    1bce:	4b74      	ldr	r3, [pc, #464]	; (1da0 <handle_ansi+0x208>)
    1bd0:	601a      	str	r2, [r3, #0]
	switch (byte) {
    1bd2:	2c46      	cmp	r4, #70	; 0x46
    1bd4:	f000 80d0 	beq.w	1d78 <handle_ansi+0x1e0>
    1bd8:	f200 8086 	bhi.w	1ce8 <handle_ansi+0x150>
    1bdc:	2c43      	cmp	r4, #67	; 0x43
    1bde:	f000 80a7 	beq.w	1d30 <handle_ansi+0x198>
    1be2:	2c44      	cmp	r4, #68	; 0x44
    1be4:	d106      	bne.n	1bf4 <handle_ansi+0x5c>
		if (ansi_val > cur) {
    1be6:	4b6f      	ldr	r3, [pc, #444]	; (1da4 <handle_ansi+0x20c>)
    1be8:	781b      	ldrb	r3, [r3, #0]
    1bea:	4a6d      	ldr	r2, [pc, #436]	; (1da0 <handle_ansi+0x208>)
    1bec:	6811      	ldr	r1, [r2, #0]
    1bee:	428b      	cmp	r3, r1
    1bf0:	f080 8092 	bcs.w	1d18 <handle_ansi+0x180>
    1bf4:	4b69      	ldr	r3, [pc, #420]	; (1d9c <handle_ansi+0x204>)
    1bf6:	f3bf 8f5b 	dmb	ish
    1bfa:	e853 2f00 	ldrex	r2, [r3]
    1bfe:	f022 0202 	bic.w	r2, r2, #2
    1c02:	e843 2100 	strex	r1, r2, [r3]
    1c06:	2900      	cmp	r1, #0
    1c08:	d1f7      	bne.n	1bfa <handle_ansi+0x62>
    1c0a:	f3bf 8f5b 	dmb	ish
    1c0e:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    1c10:	4b62      	ldr	r3, [pc, #392]	; (1d9c <handle_ansi+0x204>)
    1c12:	f3bf 8f5b 	dmb	ish
    1c16:	e853 2f00 	ldrex	r2, [r3]
    1c1a:	f042 0208 	orr.w	r2, r2, #8
    1c1e:	e843 2100 	strex	r1, r2, [r3]
    1c22:	2900      	cmp	r1, #0
    1c24:	d1f7      	bne.n	1c16 <handle_ansi+0x7e>
    1c26:	f3bf 8f5b 	dmb	ish
		ansi_val = byte - '0';
    1c2a:	3c30      	subs	r4, #48	; 0x30
    1c2c:	4b5c      	ldr	r3, [pc, #368]	; (1da0 <handle_ansi+0x208>)
    1c2e:	601c      	str	r4, [r3, #0]
		ansi_val_2 = 0;
    1c30:	2200      	movs	r2, #0
    1c32:	4b5d      	ldr	r3, [pc, #372]	; (1da8 <handle_ansi+0x210>)
    1c34:	601a      	str	r2, [r3, #0]
		return;
    1c36:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    1c38:	f3bf 8f5b 	dmb	ish
    1c3c:	4b57      	ldr	r3, [pc, #348]	; (1d9c <handle_ansi+0x204>)
    1c3e:	681b      	ldr	r3, [r3, #0]
    1c40:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(&esc_state, ESC_ANSI_VAL)) {
    1c44:	f013 0f08 	tst.w	r3, #8
    1c48:	d0c3      	beq.n	1bd2 <handle_ansi+0x3a>
		if (isdigit(byte)) {
    1c4a:	f028 fe63 	bl	2a914 <__locale_ctype_ptr>
    1c4e:	4420      	add	r0, r4
    1c50:	7843      	ldrb	r3, [r0, #1]
    1c52:	f013 0f04 	tst.w	r3, #4
    1c56:	d11b      	bne.n	1c90 <handle_ansi+0xf8>
		if (byte == ';' &&
    1c58:	2c3b      	cmp	r4, #59	; 0x3b
    1c5a:	d034      	beq.n	1cc6 <handle_ansi+0x12e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    1c5c:	4b4f      	ldr	r3, [pc, #316]	; (1d9c <handle_ansi+0x204>)
    1c5e:	f3bf 8f5b 	dmb	ish
    1c62:	e853 2f00 	ldrex	r2, [r3]
    1c66:	f022 0208 	bic.w	r2, r2, #8
    1c6a:	e843 2100 	strex	r1, r2, [r3]
    1c6e:	2900      	cmp	r1, #0
    1c70:	d1f7      	bne.n	1c62 <handle_ansi+0xca>
    1c72:	f3bf 8f5b 	dmb	ish
    1c76:	f3bf 8f5b 	dmb	ish
    1c7a:	e853 2f00 	ldrex	r2, [r3]
    1c7e:	f022 0210 	bic.w	r2, r2, #16
    1c82:	e843 2100 	strex	r1, r2, [r3]
    1c86:	2900      	cmp	r1, #0
    1c88:	d1f7      	bne.n	1c7a <handle_ansi+0xe2>
    1c8a:	f3bf 8f5b 	dmb	ish
    1c8e:	e7a0      	b.n	1bd2 <handle_ansi+0x3a>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    1c90:	f3bf 8f5b 	dmb	ish
    1c94:	4b41      	ldr	r3, [pc, #260]	; (1d9c <handle_ansi+0x204>)
    1c96:	681b      	ldr	r3, [r3, #0]
    1c98:	f3bf 8f5b 	dmb	ish
			if (atomic_test_bit(&esc_state, ESC_ANSI_VAL_2)) {
    1c9c:	f013 0f10 	tst.w	r3, #16
    1ca0:	d008      	beq.n	1cb4 <handle_ansi+0x11c>
				ansi_val_2 *= 10;
    1ca2:	4941      	ldr	r1, [pc, #260]	; (1da8 <handle_ansi+0x210>)
    1ca4:	680a      	ldr	r2, [r1, #0]
    1ca6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    1caa:	0053      	lsls	r3, r2, #1
				ansi_val_2 += byte - '0';
    1cac:	4423      	add	r3, r4
    1cae:	3b30      	subs	r3, #48	; 0x30
    1cb0:	600b      	str	r3, [r1, #0]
    1cb2:	bd38      	pop	{r3, r4, r5, pc}
				ansi_val *= 10;
    1cb4:	493a      	ldr	r1, [pc, #232]	; (1da0 <handle_ansi+0x208>)
    1cb6:	680a      	ldr	r2, [r1, #0]
    1cb8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    1cbc:	0053      	lsls	r3, r2, #1
				ansi_val += byte - '0';
    1cbe:	4423      	add	r3, r4
    1cc0:	3b30      	subs	r3, #48	; 0x30
    1cc2:	600b      	str	r3, [r1, #0]
    1cc4:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    1cc6:	4b35      	ldr	r3, [pc, #212]	; (1d9c <handle_ansi+0x204>)
    1cc8:	f3bf 8f5b 	dmb	ish
    1ccc:	e853 2f00 	ldrex	r2, [r3]
    1cd0:	f042 0110 	orr.w	r1, r2, #16
    1cd4:	e843 1000 	strex	r0, r1, [r3]
    1cd8:	2800      	cmp	r0, #0
    1cda:	d1f7      	bne.n	1ccc <handle_ansi+0x134>
    1cdc:	f3bf 8f5b 	dmb	ish
		if (byte == ';' &&
    1ce0:	f012 0f10 	tst.w	r2, #16
    1ce4:	d1ba      	bne.n	1c5c <handle_ansi+0xc4>
    1ce6:	e792      	b.n	1c0e <handle_ansi+0x76>
	switch (byte) {
    1ce8:	2c48      	cmp	r4, #72	; 0x48
    1cea:	d034      	beq.n	1d56 <handle_ansi+0x1be>
    1cec:	2c7e      	cmp	r4, #126	; 0x7e
    1cee:	d181      	bne.n	1bf4 <handle_ansi+0x5c>
		if (!end) {
    1cf0:	4b2e      	ldr	r3, [pc, #184]	; (1dac <handle_ansi+0x214>)
    1cf2:	781b      	ldrb	r3, [r3, #0]
    1cf4:	2b00      	cmp	r3, #0
    1cf6:	f43f af7d 	beq.w	1bf4 <handle_ansi+0x5c>
	printk("\x1b[%uC", count);
    1cfa:	2101      	movs	r1, #1
    1cfc:	482c      	ldr	r0, [pc, #176]	; (1db0 <handle_ansi+0x218>)
    1cfe:	f001 f923 	bl	2f48 <printk>
		del_char(&line[cur], --end);
    1d02:	4b28      	ldr	r3, [pc, #160]	; (1da4 <handle_ansi+0x20c>)
    1d04:	7818      	ldrb	r0, [r3, #0]
    1d06:	4b29      	ldr	r3, [pc, #164]	; (1dac <handle_ansi+0x214>)
    1d08:	7819      	ldrb	r1, [r3, #0]
    1d0a:	3901      	subs	r1, #1
    1d0c:	b2c9      	uxtb	r1, r1
    1d0e:	7019      	strb	r1, [r3, #0]
    1d10:	4428      	add	r0, r5
    1d12:	f7ff fed5 	bl	1ac0 <del_char>
		break;
    1d16:	e76d      	b.n	1bf4 <handle_ansi+0x5c>
		end += ansi_val;
    1d18:	b2c8      	uxtb	r0, r1
    1d1a:	4c24      	ldr	r4, [pc, #144]	; (1dac <handle_ansi+0x214>)
    1d1c:	7822      	ldrb	r2, [r4, #0]
    1d1e:	4402      	add	r2, r0
    1d20:	7022      	strb	r2, [r4, #0]
		cur -= ansi_val;
    1d22:	1a1b      	subs	r3, r3, r0
    1d24:	4a1f      	ldr	r2, [pc, #124]	; (1da4 <handle_ansi+0x20c>)
    1d26:	7013      	strb	r3, [r2, #0]
	printk("\x1b[%uD", count);
    1d28:	4822      	ldr	r0, [pc, #136]	; (1db4 <handle_ansi+0x21c>)
    1d2a:	f001 f90d 	bl	2f48 <printk>
    1d2e:	e761      	b.n	1bf4 <handle_ansi+0x5c>
		if (ansi_val > end) {
    1d30:	4b1e      	ldr	r3, [pc, #120]	; (1dac <handle_ansi+0x214>)
    1d32:	781b      	ldrb	r3, [r3, #0]
    1d34:	4a1a      	ldr	r2, [pc, #104]	; (1da0 <handle_ansi+0x208>)
    1d36:	6811      	ldr	r1, [r2, #0]
    1d38:	428b      	cmp	r3, r1
    1d3a:	f4ff af5b 	bcc.w	1bf4 <handle_ansi+0x5c>
		end -= ansi_val;
    1d3e:	b2ca      	uxtb	r2, r1
    1d40:	1a9b      	subs	r3, r3, r2
    1d42:	481a      	ldr	r0, [pc, #104]	; (1dac <handle_ansi+0x214>)
    1d44:	7003      	strb	r3, [r0, #0]
		cur += ansi_val;
    1d46:	4b17      	ldr	r3, [pc, #92]	; (1da4 <handle_ansi+0x20c>)
    1d48:	7818      	ldrb	r0, [r3, #0]
    1d4a:	4402      	add	r2, r0
    1d4c:	701a      	strb	r2, [r3, #0]
	printk("\x1b[%uC", count);
    1d4e:	4818      	ldr	r0, [pc, #96]	; (1db0 <handle_ansi+0x218>)
    1d50:	f001 f8fa 	bl	2f48 <printk>
    1d54:	e74e      	b.n	1bf4 <handle_ansi+0x5c>
		if (!cur) {
    1d56:	4b13      	ldr	r3, [pc, #76]	; (1da4 <handle_ansi+0x20c>)
    1d58:	7819      	ldrb	r1, [r3, #0]
    1d5a:	2900      	cmp	r1, #0
    1d5c:	f43f af4a 	beq.w	1bf4 <handle_ansi+0x5c>
	printk("\x1b[%uD", count);
    1d60:	4814      	ldr	r0, [pc, #80]	; (1db4 <handle_ansi+0x21c>)
    1d62:	f001 f8f1 	bl	2f48 <printk>
		end += cur;
    1d66:	4911      	ldr	r1, [pc, #68]	; (1dac <handle_ansi+0x214>)
    1d68:	4a0e      	ldr	r2, [pc, #56]	; (1da4 <handle_ansi+0x20c>)
    1d6a:	780b      	ldrb	r3, [r1, #0]
    1d6c:	7810      	ldrb	r0, [r2, #0]
    1d6e:	4403      	add	r3, r0
    1d70:	700b      	strb	r3, [r1, #0]
		cur = 0;
    1d72:	2300      	movs	r3, #0
    1d74:	7013      	strb	r3, [r2, #0]
		break;
    1d76:	e73d      	b.n	1bf4 <handle_ansi+0x5c>
		if (!end) {
    1d78:	4b0c      	ldr	r3, [pc, #48]	; (1dac <handle_ansi+0x214>)
    1d7a:	7819      	ldrb	r1, [r3, #0]
    1d7c:	2900      	cmp	r1, #0
    1d7e:	f43f af39 	beq.w	1bf4 <handle_ansi+0x5c>
	printk("\x1b[%uC", count);
    1d82:	480b      	ldr	r0, [pc, #44]	; (1db0 <handle_ansi+0x218>)
    1d84:	f001 f8e0 	bl	2f48 <printk>
		cur += end;
    1d88:	4906      	ldr	r1, [pc, #24]	; (1da4 <handle_ansi+0x20c>)
    1d8a:	4a08      	ldr	r2, [pc, #32]	; (1dac <handle_ansi+0x214>)
    1d8c:	780b      	ldrb	r3, [r1, #0]
    1d8e:	7810      	ldrb	r0, [r2, #0]
    1d90:	4403      	add	r3, r0
    1d92:	700b      	strb	r3, [r1, #0]
		end = 0;
    1d94:	2300      	movs	r3, #0
    1d96:	7013      	strb	r3, [r2, #0]
		break;
    1d98:	e72c      	b.n	1bf4 <handle_ansi+0x5c>
    1d9a:	bf00      	nop
    1d9c:	20000240 	.word	0x20000240
    1da0:	20000228 	.word	0x20000228
    1da4:	2000023c 	.word	0x2000023c
    1da8:	2000022c 	.word	0x2000022c
    1dac:	2000023d 	.word	0x2000023d
    1db0:	0002f084 	.word	0x0002f084
    1db4:	0002f07c 	.word	0x0002f07c

00001db8 <uart_console_isr>:
{
    1db8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1dbc:	b082      	sub	sp, #8
	while (uart_irq_update(uart_console_dev) &&
    1dbe:	e001      	b.n	1dc4 <uart_console_isr+0xc>
	return 0;
    1dc0:	2000      	movs	r0, #0
		if (!uart_irq_rx_ready(uart_console_dev)) {
    1dc2:	b9d8      	cbnz	r0, 1dfc <uart_console_isr+0x44>
	while (uart_irq_update(uart_console_dev) &&
    1dc4:	4b78      	ldr	r3, [pc, #480]	; (1fa8 <uart_console_isr+0x1f0>)
    1dc6:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1dc8:	6843      	ldr	r3, [r0, #4]
	if (api->irq_update) {
    1dca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    1dcc:	2b00      	cmp	r3, #0
    1dce:	f000 80e7 	beq.w	1fa0 <uart_console_isr+0x1e8>
		return api->irq_update(dev);
    1dd2:	4798      	blx	r3
    1dd4:	2800      	cmp	r0, #0
    1dd6:	d037      	beq.n	1e48 <uart_console_isr+0x90>
	       uart_irq_is_pending(uart_console_dev)) {
    1dd8:	4b73      	ldr	r3, [pc, #460]	; (1fa8 <uart_console_isr+0x1f0>)
    1dda:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1ddc:	6843      	ldr	r3, [r0, #4]
	if (api->irq_is_pending)	{
    1dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    1de0:	2b00      	cmp	r3, #0
    1de2:	f000 80df 	beq.w	1fa4 <uart_console_isr+0x1ec>
		return api->irq_is_pending(dev);
    1de6:	4798      	blx	r3
	while (uart_irq_update(uart_console_dev) &&
    1de8:	2800      	cmp	r0, #0
    1dea:	d02d      	beq.n	1e48 <uart_console_isr+0x90>
		if (!uart_irq_rx_ready(uart_console_dev)) {
    1dec:	4b6e      	ldr	r3, [pc, #440]	; (1fa8 <uart_console_isr+0x1f0>)
    1dee:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1df0:	6843      	ldr	r3, [r0, #4]
	if (api->irq_rx_ready) {
    1df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1df4:	2b00      	cmp	r3, #0
    1df6:	d0e3      	beq.n	1dc0 <uart_console_isr+0x8>
		return api->irq_rx_ready(dev);
    1df8:	4798      	blx	r3
    1dfa:	e7e2      	b.n	1dc2 <uart_console_isr+0xa>
		rx = read_uart(uart_console_dev, &byte, 1);
    1dfc:	2201      	movs	r2, #1
    1dfe:	f10d 0107 	add.w	r1, sp, #7
    1e02:	4b69      	ldr	r3, [pc, #420]	; (1fa8 <uart_console_isr+0x1f0>)
    1e04:	6818      	ldr	r0, [r3, #0]
    1e06:	f7ff fe0b 	bl	1a20 <read_uart>
		if (rx < 0) {
    1e0a:	2800      	cmp	r0, #0
    1e0c:	db1c      	blt.n	1e48 <uart_console_isr+0x90>
		if (!cmd) {
    1e0e:	4b67      	ldr	r3, [pc, #412]	; (1fac <uart_console_isr+0x1f4>)
    1e10:	681b      	ldr	r3, [r3, #0]
    1e12:	b183      	cbz	r3, 1e36 <uart_console_isr+0x7e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    1e14:	f3bf 8f5b 	dmb	ish
    1e18:	4b65      	ldr	r3, [pc, #404]	; (1fb0 <uart_console_isr+0x1f8>)
    1e1a:	681b      	ldr	r3, [r3, #0]
    1e1c:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(&esc_state, ESC_ANSI)) {
    1e20:	f013 0f02 	tst.w	r3, #2
    1e24:	d013      	beq.n	1e4e <uart_console_isr+0x96>
			handle_ansi(byte, cmd->line);
    1e26:	4b61      	ldr	r3, [pc, #388]	; (1fac <uart_console_isr+0x1f4>)
    1e28:	6819      	ldr	r1, [r3, #0]
    1e2a:	3104      	adds	r1, #4
    1e2c:	f89d 0007 	ldrb.w	r0, [sp, #7]
    1e30:	f7ff feb2 	bl	1b98 <handle_ansi>
			continue;
    1e34:	e7c6      	b.n	1dc4 <uart_console_isr+0xc>
			cmd = k_fifo_get(avail_queue, K_NO_WAIT);
    1e36:	2100      	movs	r1, #0
    1e38:	4b5e      	ldr	r3, [pc, #376]	; (1fb4 <uart_console_isr+0x1fc>)
    1e3a:	6818      	ldr	r0, [r3, #0]
    1e3c:	f026 f93e 	bl	280bc <k_queue_get>
    1e40:	4b5a      	ldr	r3, [pc, #360]	; (1fac <uart_console_isr+0x1f4>)
    1e42:	6018      	str	r0, [r3, #0]
			if (!cmd) {
    1e44:	2800      	cmp	r0, #0
    1e46:	d1e5      	bne.n	1e14 <uart_console_isr+0x5c>
}
    1e48:	b002      	add	sp, #8
    1e4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    1e4e:	4b58      	ldr	r3, [pc, #352]	; (1fb0 <uart_console_isr+0x1f8>)
    1e50:	f3bf 8f5b 	dmb	ish
    1e54:	e853 2f00 	ldrex	r2, [r3]
    1e58:	f022 0101 	bic.w	r1, r2, #1
    1e5c:	e843 1000 	strex	r0, r1, [r3]
    1e60:	2800      	cmp	r0, #0
    1e62:	d1f7      	bne.n	1e54 <uart_console_isr+0x9c>
    1e64:	f3bf 8f5b 	dmb	ish
		if (atomic_test_and_clear_bit(&esc_state, ESC_ESC)) {
    1e68:	f012 0f01 	tst.w	r2, #1
    1e6c:	d01d      	beq.n	1eaa <uart_console_isr+0xf2>
			if (byte == ANSI_ESC) {
    1e6e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1e72:	2b5b      	cmp	r3, #91	; 0x5b
    1e74:	d1a6      	bne.n	1dc4 <uart_console_isr+0xc>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    1e76:	4b4e      	ldr	r3, [pc, #312]	; (1fb0 <uart_console_isr+0x1f8>)
    1e78:	f3bf 8f5b 	dmb	ish
    1e7c:	e853 2f00 	ldrex	r2, [r3]
    1e80:	f042 0202 	orr.w	r2, r2, #2
    1e84:	e843 2100 	strex	r1, r2, [r3]
    1e88:	2900      	cmp	r1, #0
    1e8a:	d1f7      	bne.n	1e7c <uart_console_isr+0xc4>
    1e8c:	f3bf 8f5b 	dmb	ish
    1e90:	f3bf 8f5b 	dmb	ish
    1e94:	e853 2f00 	ldrex	r2, [r3]
    1e98:	f042 0204 	orr.w	r2, r2, #4
    1e9c:	e843 2100 	strex	r1, r2, [r3]
    1ea0:	2900      	cmp	r1, #0
    1ea2:	d1f7      	bne.n	1e94 <uart_console_isr+0xdc>
    1ea4:	f3bf 8f5b 	dmb	ish
			continue;
    1ea8:	e78c      	b.n	1dc4 <uart_console_isr+0xc>
		if (!isprint(byte)) {
    1eaa:	f028 fd33 	bl	2a914 <__locale_ctype_ptr>
    1eae:	f89d 1007 	ldrb.w	r1, [sp, #7]
    1eb2:	4408      	add	r0, r1
    1eb4:	7843      	ldrb	r3, [r0, #1]
    1eb6:	f013 0f97 	tst.w	r3, #151	; 0x97
    1eba:	d15f      	bne.n	1f7c <uart_console_isr+0x1c4>
			switch (byte) {
    1ebc:	290d      	cmp	r1, #13
    1ebe:	d03c      	beq.n	1f3a <uart_console_isr+0x182>
    1ec0:	d916      	bls.n	1ef0 <uart_console_isr+0x138>
    1ec2:	291b      	cmp	r1, #27
    1ec4:	d02b      	beq.n	1f1e <uart_console_isr+0x166>
    1ec6:	297f      	cmp	r1, #127	; 0x7f
    1ec8:	f47f af7c 	bne.w	1dc4 <uart_console_isr+0xc>
				if (cur > 0) {
    1ecc:	4b3a      	ldr	r3, [pc, #232]	; (1fb8 <uart_console_isr+0x200>)
    1ece:	781b      	ldrb	r3, [r3, #0]
    1ed0:	2b00      	cmp	r3, #0
    1ed2:	f43f af77 	beq.w	1dc4 <uart_console_isr+0xc>
					del_char(&cmd->line[--cur], end);
    1ed6:	4a35      	ldr	r2, [pc, #212]	; (1fac <uart_console_isr+0x1f4>)
    1ed8:	6812      	ldr	r2, [r2, #0]
    1eda:	3b01      	subs	r3, #1
    1edc:	b2db      	uxtb	r3, r3
    1ede:	4936      	ldr	r1, [pc, #216]	; (1fb8 <uart_console_isr+0x200>)
    1ee0:	700b      	strb	r3, [r1, #0]
    1ee2:	4413      	add	r3, r2
    1ee4:	4a35      	ldr	r2, [pc, #212]	; (1fbc <uart_console_isr+0x204>)
    1ee6:	7811      	ldrb	r1, [r2, #0]
    1ee8:	1d18      	adds	r0, r3, #4
    1eea:	f7ff fde9 	bl	1ac0 <del_char>
    1eee:	e769      	b.n	1dc4 <uart_console_isr+0xc>
			switch (byte) {
    1ef0:	2909      	cmp	r1, #9
    1ef2:	f47f af67 	bne.w	1dc4 <uart_console_isr+0xc>
				if (completion_cb && !end) {
    1ef6:	4b32      	ldr	r3, [pc, #200]	; (1fc0 <uart_console_isr+0x208>)
    1ef8:	681b      	ldr	r3, [r3, #0]
    1efa:	2b00      	cmp	r3, #0
    1efc:	f43f af62 	beq.w	1dc4 <uart_console_isr+0xc>
    1f00:	4a2e      	ldr	r2, [pc, #184]	; (1fbc <uart_console_isr+0x204>)
    1f02:	7812      	ldrb	r2, [r2, #0]
    1f04:	2a00      	cmp	r2, #0
    1f06:	f47f af5d 	bne.w	1dc4 <uart_console_isr+0xc>
					cur += completion_cb(cmd->line, cur);
    1f0a:	4a28      	ldr	r2, [pc, #160]	; (1fac <uart_console_isr+0x1f4>)
    1f0c:	6810      	ldr	r0, [r2, #0]
    1f0e:	4c2a      	ldr	r4, [pc, #168]	; (1fb8 <uart_console_isr+0x200>)
    1f10:	7821      	ldrb	r1, [r4, #0]
    1f12:	3004      	adds	r0, #4
    1f14:	4798      	blx	r3
    1f16:	7823      	ldrb	r3, [r4, #0]
    1f18:	4403      	add	r3, r0
    1f1a:	7023      	strb	r3, [r4, #0]
			continue;
    1f1c:	e752      	b.n	1dc4 <uart_console_isr+0xc>
    1f1e:	4b24      	ldr	r3, [pc, #144]	; (1fb0 <uart_console_isr+0x1f8>)
    1f20:	f3bf 8f5b 	dmb	ish
    1f24:	e853 2f00 	ldrex	r2, [r3]
    1f28:	f042 0201 	orr.w	r2, r2, #1
    1f2c:	e843 2100 	strex	r1, r2, [r3]
    1f30:	2900      	cmp	r1, #0
    1f32:	d1f7      	bne.n	1f24 <uart_console_isr+0x16c>
    1f34:	f3bf 8f5b 	dmb	ish
    1f38:	e744      	b.n	1dc4 <uart_console_isr+0xc>
				cmd->line[cur + end] = '\0';
    1f3a:	4d1c      	ldr	r5, [pc, #112]	; (1fac <uart_console_isr+0x1f4>)
    1f3c:	682b      	ldr	r3, [r5, #0]
    1f3e:	4f1e      	ldr	r7, [pc, #120]	; (1fb8 <uart_console_isr+0x200>)
    1f40:	783a      	ldrb	r2, [r7, #0]
    1f42:	4e1e      	ldr	r6, [pc, #120]	; (1fbc <uart_console_isr+0x204>)
    1f44:	7831      	ldrb	r1, [r6, #0]
    1f46:	440a      	add	r2, r1
    1f48:	4413      	add	r3, r2
    1f4a:	2400      	movs	r4, #0
    1f4c:	711c      	strb	r4, [r3, #4]
				uart_poll_out(uart_console_dev, '\r');
    1f4e:	f8df 8058 	ldr.w	r8, [pc, #88]	; 1fa8 <uart_console_isr+0x1f0>
    1f52:	f8d8 0000 	ldr.w	r0, [r8]
	const struct uart_driver_api *api = dev->driver_api;
    1f56:	6843      	ldr	r3, [r0, #4]
	return api->poll_out(dev, out_char);
    1f58:	685b      	ldr	r3, [r3, #4]
    1f5a:	210d      	movs	r1, #13
    1f5c:	4798      	blx	r3
				uart_poll_out(uart_console_dev, '\n');
    1f5e:	f8d8 0000 	ldr.w	r0, [r8]
	const struct uart_driver_api *api = dev->driver_api;
    1f62:	6843      	ldr	r3, [r0, #4]
	return api->poll_out(dev, out_char);
    1f64:	685b      	ldr	r3, [r3, #4]
    1f66:	210a      	movs	r1, #10
    1f68:	4798      	blx	r3
				cur = 0;
    1f6a:	703c      	strb	r4, [r7, #0]
				end = 0;
    1f6c:	7034      	strb	r4, [r6, #0]
				k_fifo_put(lines_queue, cmd);
    1f6e:	6829      	ldr	r1, [r5, #0]
    1f70:	4b14      	ldr	r3, [pc, #80]	; (1fc4 <uart_console_isr+0x20c>)
    1f72:	6818      	ldr	r0, [r3, #0]
    1f74:	f026 f87a 	bl	2806c <k_queue_append>
				cmd = NULL;
    1f78:	602c      	str	r4, [r5, #0]
				break;
    1f7a:	e723      	b.n	1dc4 <uart_console_isr+0xc>
		if (cur + end < sizeof(cmd->line) - 1) {
    1f7c:	4b0e      	ldr	r3, [pc, #56]	; (1fb8 <uart_console_isr+0x200>)
    1f7e:	781b      	ldrb	r3, [r3, #0]
    1f80:	4a0e      	ldr	r2, [pc, #56]	; (1fbc <uart_console_isr+0x204>)
    1f82:	7812      	ldrb	r2, [r2, #0]
    1f84:	18d0      	adds	r0, r2, r3
    1f86:	287e      	cmp	r0, #126	; 0x7e
    1f88:	f63f af1c 	bhi.w	1dc4 <uart_console_isr+0xc>
			insert_char(&cmd->line[cur++], byte, end);
    1f8c:	4807      	ldr	r0, [pc, #28]	; (1fac <uart_console_isr+0x1f4>)
    1f8e:	6800      	ldr	r0, [r0, #0]
    1f90:	1c5d      	adds	r5, r3, #1
    1f92:	4c09      	ldr	r4, [pc, #36]	; (1fb8 <uart_console_isr+0x200>)
    1f94:	7025      	strb	r5, [r4, #0]
    1f96:	4418      	add	r0, r3
    1f98:	3004      	adds	r0, #4
    1f9a:	f7ff fdc9 	bl	1b30 <insert_char>
    1f9e:	e711      	b.n	1dc4 <uart_console_isr+0xc>
	return 0;
    1fa0:	2000      	movs	r0, #0
    1fa2:	e717      	b.n	1dd4 <uart_console_isr+0x1c>
	return 0;
    1fa4:	2000      	movs	r0, #0
    1fa6:	e71f      	b.n	1de8 <uart_console_isr+0x30>
    1fa8:	20000248 	.word	0x20000248
    1fac:	20000234 	.word	0x20000234
    1fb0:	20000240 	.word	0x20000240
    1fb4:	20000230 	.word	0x20000230
    1fb8:	2000023c 	.word	0x2000023c
    1fbc:	2000023d 	.word	0x2000023d
    1fc0:	20000238 	.word	0x20000238
    1fc4:	20000244 	.word	0x20000244

00001fc8 <uart_register_input>:

void uart_register_input(struct k_fifo *avail, struct k_fifo *lines,
			 u8_t (*completion)(char *str, u8_t len))
{
    1fc8:	b508      	push	{r3, lr}
	avail_queue = avail;
    1fca:	4b04      	ldr	r3, [pc, #16]	; (1fdc <uart_register_input+0x14>)
    1fcc:	6018      	str	r0, [r3, #0]
	lines_queue = lines;
    1fce:	4b04      	ldr	r3, [pc, #16]	; (1fe0 <uart_register_input+0x18>)
    1fd0:	6019      	str	r1, [r3, #0]
	completion_cb = completion;
    1fd2:	4b04      	ldr	r3, [pc, #16]	; (1fe4 <uart_register_input+0x1c>)
    1fd4:	601a      	str	r2, [r3, #0]

	console_input_init();
    1fd6:	f7ff fd39 	bl	1a4c <console_input_init>
    1fda:	bd08      	pop	{r3, pc}
    1fdc:	20000230 	.word	0x20000230
    1fe0:	20000244 	.word	0x20000244
    1fe4:	20000238 	.word	0x20000238

00001fe8 <uart_console_hook_install>:
 *
 * @return N/A
 */

void uart_console_hook_install(void)
{
    1fe8:	b508      	push	{r3, lr}
	__stdout_hook_install(console_out);
	__printk_hook_install(console_out);
    1fea:	4802      	ldr	r0, [pc, #8]	; (1ff4 <uart_console_hook_install+0xc>)
    1fec:	f000 fe70 	bl	2cd0 <__printk_hook_install>
    1ff0:	bd08      	pop	{r3, pc}
    1ff2:	bf00      	nop
    1ff4:	000019f5 	.word	0x000019f5

00001ff8 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
    1ff8:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    1ffa:	4804      	ldr	r0, [pc, #16]	; (200c <uart_console_init+0x14>)
    1ffc:	f025 f906 	bl	2720c <device_get_binding>
    2000:	4b03      	ldr	r3, [pc, #12]	; (2010 <uart_console_init+0x18>)
    2002:	6018      	str	r0, [r3, #0]
		}
	}
	k_busy_wait(1000000);
#endif

	uart_console_hook_install();
    2004:	f7ff fff0 	bl	1fe8 <uart_console_hook_install>

	return 0;
}
    2008:	2000      	movs	r0, #0
    200a:	bd08      	pop	{r3, pc}
    200c:	0002f08c 	.word	0x0002f08c
    2010:	20000248 	.word	0x20000248

00002014 <sys_rand32_get>:
 *
 * @return a 32-bit number
 */

u32_t sys_rand32_get(void)
{
    2014:	b508      	push	{r3, lr}
	return k_cycle_get_32() + atomic_add(&_rand32_counter, _RAND32_INC);
    2016:	f000 fa73 	bl	2500 <_timer_cycle_get_32>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    201a:	4b08      	ldr	r3, [pc, #32]	; (203c <sys_rand32_get+0x28>)
    201c:	f3bf 8f5b 	dmb	ish
    2020:	e853 2f00 	ldrex	r2, [r3]
    2024:	4906      	ldr	r1, [pc, #24]	; (2040 <sys_rand32_get+0x2c>)
    2026:	1851      	adds	r1, r2, r1
    2028:	e843 1e00 	strex	lr, r1, [r3]
    202c:	f1be 0f00 	cmp.w	lr, #0
    2030:	d1f6      	bne.n	2020 <sys_rand32_get+0xc>
    2032:	f3bf 8f5b 	dmb	ish
}
    2036:	4410      	add	r0, r2
    2038:	bd08      	pop	{r3, pc}
    203a:	bf00      	nop
    203c:	2000024c 	.word	0x2000024c
    2040:	3b9aca0d 	.word	0x3b9aca0d

00002044 <baudrate_set>:
 */

static int baudrate_set(struct device *dev,
			 u32_t baudrate, u32_t sys_clk_freq_hz)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    2044:	6803      	ldr	r3, [r0, #0]
    2046:	689b      	ldr	r3, [r3, #8]
    2048:	681b      	ldr	r3, [r3, #0]

	u32_t divisor; /* baud rate divisor */

	/* Use the common nRF5 macros */
	switch (baudrate) {
    204a:	f5b1 4fe1 	cmp.w	r1, #28800	; 0x7080
    204e:	d05b      	beq.n	2108 <baudrate_set+0xc4>
    2050:	d910      	bls.n	2074 <baudrate_set+0x30>
    2052:	f5b1 3f61 	cmp.w	r1, #230400	; 0x38400
    2056:	d05e      	beq.n	2116 <baudrate_set+0xd2>
    2058:	d833      	bhi.n	20c2 <baudrate_set+0x7e>
    205a:	f5b1 4f61 	cmp.w	r1, #57600	; 0xe100
    205e:	d055      	beq.n	210c <baudrate_set+0xc8>
    2060:	d929      	bls.n	20b6 <baudrate_set+0x72>
    2062:	f5b1 3f96 	cmp.w	r1, #76800	; 0x12c00
    2066:	d054      	beq.n	2112 <baudrate_set+0xce>
    2068:	f5b1 3fe1 	cmp.w	r1, #115200	; 0x1c200
    206c:	d11b      	bne.n	20a6 <baudrate_set+0x62>
		break;
	case 76800:
		divisor = NRF5_UART_BAUDRATE_76800;
		break;
	case 115200:
		divisor = NRF5_UART_BAUDRATE_115200;
    206e:	f04f 72eb 	mov.w	r2, #30801920	; 0x1d60000
		break;
    2072:	e03b      	b.n	20ec <baudrate_set+0xa8>
	switch (baudrate) {
    2074:	f5b1 6f16 	cmp.w	r1, #2400	; 0x960
    2078:	d03f      	beq.n	20fa <baudrate_set+0xb6>
    207a:	d90b      	bls.n	2094 <baudrate_set+0x50>
    207c:	f5b1 5f16 	cmp.w	r1, #9600	; 0x2580
    2080:	d03e      	beq.n	2100 <baudrate_set+0xbc>
    2082:	d913      	bls.n	20ac <baudrate_set+0x68>
    2084:	f5b1 5f61 	cmp.w	r1, #14400	; 0x3840
    2088:	d03c      	beq.n	2104 <baudrate_set+0xc0>
    208a:	f5b1 4f96 	cmp.w	r1, #19200	; 0x4b00
    208e:	d10a      	bne.n	20a6 <baudrate_set+0x62>
		divisor = NRF5_UART_BAUDRATE_19200;
    2090:	4a27      	ldr	r2, [pc, #156]	; (2130 <baudrate_set+0xec>)
		break;
    2092:	e02b      	b.n	20ec <baudrate_set+0xa8>
	switch (baudrate) {
    2094:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
    2098:	d046      	beq.n	2128 <baudrate_set+0xe4>
    209a:	f5b1 6f96 	cmp.w	r1, #1200	; 0x4b0
    209e:	d029      	beq.n	20f4 <baudrate_set+0xb0>
    20a0:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
    20a4:	d020      	beq.n	20e8 <baudrate_set+0xa4>
		break;
	case 1000000:
		divisor = NRF5_UART_BAUDRATE_1000000;
		break;
	default:
		return -EINVAL;
    20a6:	f06f 0015 	mvn.w	r0, #21
	}

	uart->BAUDRATE = divisor << UART_BAUDRATE_BAUDRATE_Pos;

	return 0;
}
    20aa:	4770      	bx	lr
	switch (baudrate) {
    20ac:	f5b1 5f96 	cmp.w	r1, #4800	; 0x12c0
    20b0:	d1f9      	bne.n	20a6 <baudrate_set+0x62>
		divisor = NRF5_UART_BAUDRATE_4800;
    20b2:	4a20      	ldr	r2, [pc, #128]	; (2134 <baudrate_set+0xf0>)
		break;
    20b4:	e01a      	b.n	20ec <baudrate_set+0xa8>
	switch (baudrate) {
    20b6:	f5b1 4f16 	cmp.w	r1, #38400	; 0x9600
    20ba:	d1f4      	bne.n	20a6 <baudrate_set+0x62>
		divisor = NRF5_UART_BAUDRATE_38400;
    20bc:	f44f 021d 	mov.w	r2, #10289152	; 0x9d0000
		break;
    20c0:	e014      	b.n	20ec <baudrate_set+0xa8>
	switch (baudrate) {
    20c2:	f5b1 2fe1 	cmp.w	r1, #460800	; 0x70800
    20c6:	d029      	beq.n	211c <baudrate_set+0xd8>
    20c8:	d908      	bls.n	20dc <baudrate_set+0x98>
    20ca:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
    20ce:	d028      	beq.n	2122 <baudrate_set+0xde>
    20d0:	4a19      	ldr	r2, [pc, #100]	; (2138 <baudrate_set+0xf4>)
    20d2:	4291      	cmp	r1, r2
    20d4:	d1e7      	bne.n	20a6 <baudrate_set+0x62>
		divisor = NRF5_UART_BAUDRATE_1000000;
    20d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
		break;
    20da:	e007      	b.n	20ec <baudrate_set+0xa8>
	switch (baudrate) {
    20dc:	4a17      	ldr	r2, [pc, #92]	; (213c <baudrate_set+0xf8>)
    20de:	4291      	cmp	r1, r2
    20e0:	d1e1      	bne.n	20a6 <baudrate_set+0x62>
		divisor = NRF5_UART_BAUDRATE_250000;
    20e2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
		break;
    20e6:	e001      	b.n	20ec <baudrate_set+0xa8>
		divisor = NRF5_UART_BAUDRATE_300;
    20e8:	f44f 32a0 	mov.w	r2, #81920	; 0x14000
	uart->BAUDRATE = divisor << UART_BAUDRATE_BAUDRATE_Pos;
    20ec:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	return 0;
    20f0:	2000      	movs	r0, #0
    20f2:	4770      	bx	lr
		divisor = NRF5_UART_BAUDRATE_1200;
    20f4:	f44f 229e 	mov.w	r2, #323584	; 0x4f000
		break;
    20f8:	e7f8      	b.n	20ec <baudrate_set+0xa8>
		divisor = NRF5_UART_BAUDRATE_2400;
    20fa:	f44f 221d 	mov.w	r2, #643072	; 0x9d000
		break;
    20fe:	e7f5      	b.n	20ec <baudrate_set+0xa8>
		divisor = NRF5_UART_BAUDRATE_9600;
    2100:	4a0f      	ldr	r2, [pc, #60]	; (2140 <baudrate_set+0xfc>)
		break;
    2102:	e7f3      	b.n	20ec <baudrate_set+0xa8>
		divisor = NRF5_UART_BAUDRATE_14400;
    2104:	4a0f      	ldr	r2, [pc, #60]	; (2144 <baudrate_set+0x100>)
		break;
    2106:	e7f1      	b.n	20ec <baudrate_set+0xa8>
		divisor = NRF5_UART_BAUDRATE_28800;
    2108:	4a0f      	ldr	r2, [pc, #60]	; (2148 <baudrate_set+0x104>)
		break;
    210a:	e7ef      	b.n	20ec <baudrate_set+0xa8>
		divisor = NRF5_UART_BAUDRATE_57600;
    210c:	f44f 026b 	mov.w	r2, #15400960	; 0xeb0000
		break;
    2110:	e7ec      	b.n	20ec <baudrate_set+0xa8>
		divisor = NRF5_UART_BAUDRATE_76800;
    2112:	4a0e      	ldr	r2, [pc, #56]	; (214c <baudrate_set+0x108>)
		break;
    2114:	e7ea      	b.n	20ec <baudrate_set+0xa8>
		divisor = NRF5_UART_BAUDRATE_230400;
    2116:	f04f 726c 	mov.w	r2, #61865984	; 0x3b00000
		break;
    211a:	e7e7      	b.n	20ec <baudrate_set+0xa8>
		divisor = NRF5_UART_BAUDRATE_460800;
    211c:	f04f 62e8 	mov.w	r2, #121634816	; 0x7400000
		break;
    2120:	e7e4      	b.n	20ec <baudrate_set+0xa8>
		divisor = NRF5_UART_BAUDRATE_921600;
    2122:	f04f 6270 	mov.w	r2, #251658240	; 0xf000000
		break;
    2126:	e7e1      	b.n	20ec <baudrate_set+0xa8>
		divisor = NRF5_UART_BAUDRATE_600;
    2128:	f44f 321c 	mov.w	r2, #159744	; 0x27000
    212c:	e7de      	b.n	20ec <baudrate_set+0xa8>
    212e:	bf00      	nop
    2130:	004ea000 	.word	0x004ea000
    2134:	0013b000 	.word	0x0013b000
    2138:	000f4240 	.word	0x000f4240
    213c:	0003d090 	.word	0x0003d090
    2140:	00275000 	.word	0x00275000
    2144:	003af000 	.word	0x003af000
    2148:	0075c000 	.word	0x0075c000
    214c:	013a9000 	.word	0x013a9000

00002150 <uart_nrf5_poll_in>:
 * @return 0 if a character arrived, -1 if the input buffer if empty.
 */

static int uart_nrf5_poll_in(struct device *dev, unsigned char *c)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    2150:	6803      	ldr	r3, [r0, #0]
    2152:	689b      	ldr	r3, [r3, #8]
    2154:	681b      	ldr	r3, [r3, #0]

	if (!uart->EVENTS_RXDRDY) {
    2156:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
    215a:	b132      	cbz	r2, 216a <uart_nrf5_poll_in+0x1a>
		return -1;
	}

	/* Clear the interrupt */
	uart->EVENTS_RXDRDY = 0;
    215c:	2000      	movs	r0, #0
    215e:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108

	/* got a character */
	*c = (unsigned char)uart->RXD;
    2162:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
    2166:	700b      	strb	r3, [r1, #0]

	return 0;
    2168:	4770      	bx	lr
		return -1;
    216a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    216e:	4770      	bx	lr

00002170 <uart_nrf5_poll_out>:
 * @return Sent character
 */
static unsigned char uart_nrf5_poll_out(struct device *dev,
					unsigned char c)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    2170:	6803      	ldr	r3, [r0, #0]
    2172:	689b      	ldr	r3, [r3, #8]
    2174:	681a      	ldr	r2, [r3, #0]

	/* send a character */
	uart->TXD = (u8_t)c;
    2176:	f8c2 151c 	str.w	r1, [r2, #1308]	; 0x51c

	/* Wait for transmitter to be ready */
	while (!uart->EVENTS_TXDRDY) {
    217a:	f8d2 311c 	ldr.w	r3, [r2, #284]	; 0x11c
    217e:	2b00      	cmp	r3, #0
    2180:	d0fb      	beq.n	217a <uart_nrf5_poll_out+0xa>
	}

	uart->EVENTS_TXDRDY = 0;
    2182:	2300      	movs	r3, #0
    2184:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c

	return c;
}
    2188:	4608      	mov	r0, r1
    218a:	4770      	bx	lr

0000218c <uart_nrf5_err_check>:

/** Console I/O function */
static int uart_nrf5_err_check(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    218c:	6803      	ldr	r3, [r0, #0]
    218e:	689b      	ldr	r3, [r3, #8]
    2190:	681b      	ldr	r3, [r3, #0]
	u32_t error = 0;

	if (uart->EVENTS_ERROR) {
    2192:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    2196:	b132      	cbz	r2, 21a6 <uart_nrf5_err_check+0x1a>
		/* register bitfields maps to the defines in uart.h */
		error = uart->ERRORSRC;
    2198:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480

		/* Clear the register */
		uart->ERRORSRC = error;
    219c:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
	}

	error = error & 0x0F;

	return error;
}
    21a0:	f000 000f 	and.w	r0, r0, #15
    21a4:	4770      	bx	lr
	u32_t error = 0;
    21a6:	2000      	movs	r0, #0
    21a8:	e7fa      	b.n	21a0 <uart_nrf5_err_check+0x14>

000021aa <uart_nrf5_fifo_fill>:

#ifdef CONFIG_UART_INTERRUPT_DRIVEN

/** Interrupt driven FIFO fill function */
static int uart_nrf5_fifo_fill(struct device *dev, const u8_t *tx_data, int len)
{
    21aa:	b430      	push	{r4, r5}
	volatile struct _uart *uart = UART_STRUCT(dev);
    21ac:	6803      	ldr	r3, [r0, #0]
    21ae:	689b      	ldr	r3, [r3, #8]
    21b0:	681c      	ldr	r4, [r3, #0]
	u8_t num_tx = 0;
    21b2:	2300      	movs	r3, #0

	while ((len - num_tx > 0) && uart->EVENTS_TXDRDY) {
    21b4:	e007      	b.n	21c6 <uart_nrf5_fifo_fill+0x1c>
		/* Clear the interrupt */
		uart->EVENTS_TXDRDY = 0;
    21b6:	2000      	movs	r0, #0
    21b8:	f8c4 011c 	str.w	r0, [r4, #284]	; 0x11c

		/* Send a character */
		uart->TXD = (u8_t)tx_data[num_tx++];
    21bc:	1c58      	adds	r0, r3, #1
    21be:	5ccb      	ldrb	r3, [r1, r3]
    21c0:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
    21c4:	b2c3      	uxtb	r3, r0
	while ((len - num_tx > 0) && uart->EVENTS_TXDRDY) {
    21c6:	4618      	mov	r0, r3
    21c8:	1ad5      	subs	r5, r2, r3
    21ca:	2d00      	cmp	r5, #0
    21cc:	dd03      	ble.n	21d6 <uart_nrf5_fifo_fill+0x2c>
    21ce:	f8d4 511c 	ldr.w	r5, [r4, #284]	; 0x11c
    21d2:	2d00      	cmp	r5, #0
    21d4:	d1ef      	bne.n	21b6 <uart_nrf5_fifo_fill+0xc>
	}

	return (int)num_tx;
}
    21d6:	bc30      	pop	{r4, r5}
    21d8:	4770      	bx	lr

000021da <uart_nrf5_fifo_read>:

/** Interrupt driven FIFO read function */
static int uart_nrf5_fifo_read(struct device *dev, u8_t *rx_data, const int size)
{
    21da:	b430      	push	{r4, r5}
	volatile struct _uart *uart = UART_STRUCT(dev);
    21dc:	6803      	ldr	r3, [r0, #0]
    21de:	689b      	ldr	r3, [r3, #8]
    21e0:	681c      	ldr	r4, [r3, #0]
	u8_t num_rx = 0;
    21e2:	2300      	movs	r3, #0

	while ((size - num_rx > 0) && uart->EVENTS_RXDRDY) {
    21e4:	e007      	b.n	21f6 <uart_nrf5_fifo_read+0x1c>
		/* Clear the interrupt */
		uart->EVENTS_RXDRDY = 0;
    21e6:	2000      	movs	r0, #0
    21e8:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108

		/* Receive a character */
		rx_data[num_rx++] = (u8_t)uart->RXD;
    21ec:	1c58      	adds	r0, r3, #1
    21ee:	f8d4 5518 	ldr.w	r5, [r4, #1304]	; 0x518
    21f2:	54cd      	strb	r5, [r1, r3]
    21f4:	b2c3      	uxtb	r3, r0
	while ((size - num_rx > 0) && uart->EVENTS_RXDRDY) {
    21f6:	4618      	mov	r0, r3
    21f8:	1ad5      	subs	r5, r2, r3
    21fa:	2d00      	cmp	r5, #0
    21fc:	dd03      	ble.n	2206 <uart_nrf5_fifo_read+0x2c>
    21fe:	f8d4 5108 	ldr.w	r5, [r4, #264]	; 0x108
    2202:	2d00      	cmp	r5, #0
    2204:	d1ef      	bne.n	21e6 <uart_nrf5_fifo_read+0xc>
	}

	return num_rx;
}
    2206:	bc30      	pop	{r4, r5}
    2208:	4770      	bx	lr

0000220a <uart_nrf5_irq_tx_enable>:

/** Interrupt driven transfer enabling function */
static void uart_nrf5_irq_tx_enable(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    220a:	6803      	ldr	r3, [r0, #0]
    220c:	689b      	ldr	r3, [r3, #8]
    220e:	681a      	ldr	r2, [r3, #0]

	uart->INTENSET |= UART_IRQ_MASK_TX;
    2210:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
    2214:	f043 0308 	orr.w	r3, r3, #8
    2218:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    221c:	4770      	bx	lr

0000221e <uart_nrf5_irq_tx_disable>:
}

/** Interrupt driven transfer disabling function */
static void uart_nrf5_irq_tx_disable(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    221e:	6803      	ldr	r3, [r0, #0]
    2220:	689b      	ldr	r3, [r3, #8]
    2222:	681a      	ldr	r2, [r3, #0]

	uart->INTENCLR |= UART_IRQ_MASK_TX;
    2224:	f8d2 3308 	ldr.w	r3, [r2, #776]	; 0x308
    2228:	f043 0308 	orr.w	r3, r3, #8
    222c:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    2230:	4770      	bx	lr

00002232 <uart_nrf5_irq_tx_ready>:
}

/** Interrupt driven transfer ready function */
static int uart_nrf5_irq_tx_ready(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    2232:	6803      	ldr	r3, [r0, #0]
    2234:	689b      	ldr	r3, [r3, #8]
    2236:	681b      	ldr	r3, [r3, #0]

	return uart->EVENTS_TXDRDY;
    2238:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
    223c:	4770      	bx	lr

0000223e <uart_nrf5_irq_rx_enable>:

/** Interrupt driven receiver enabling function */
static void uart_nrf5_irq_rx_enable(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    223e:	6803      	ldr	r3, [r0, #0]
    2240:	689b      	ldr	r3, [r3, #8]
    2242:	681a      	ldr	r2, [r3, #0]

	uart->INTENSET |= UART_IRQ_MASK_RX;
    2244:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
    2248:	f043 0304 	orr.w	r3, r3, #4
    224c:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    2250:	4770      	bx	lr

00002252 <uart_nrf5_irq_rx_disable>:
}

/** Interrupt driven receiver disabling function */
static void uart_nrf5_irq_rx_disable(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    2252:	6803      	ldr	r3, [r0, #0]
    2254:	689b      	ldr	r3, [r3, #8]
    2256:	681a      	ldr	r2, [r3, #0]

	uart->INTENCLR |= UART_IRQ_MASK_RX;
    2258:	f8d2 3308 	ldr.w	r3, [r2, #776]	; 0x308
    225c:	f043 0304 	orr.w	r3, r3, #4
    2260:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    2264:	4770      	bx	lr

00002266 <uart_nrf5_irq_tx_complete>:
}

/** Interrupt driven transfer empty function */
static int uart_nrf5_irq_tx_complete(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    2266:	6803      	ldr	r3, [r0, #0]
    2268:	689b      	ldr	r3, [r3, #8]
    226a:	681b      	ldr	r3, [r3, #0]

	return !(uart->EVENTS_TXDRDY);
    226c:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
    2270:	fab0 f080 	clz	r0, r0
    2274:	0940      	lsrs	r0, r0, #5
    2276:	4770      	bx	lr

00002278 <uart_nrf5_irq_rx_ready>:

/** Interrupt driven receiver ready function */
static int uart_nrf5_irq_rx_ready(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    2278:	6803      	ldr	r3, [r0, #0]
    227a:	689b      	ldr	r3, [r3, #8]
    227c:	681b      	ldr	r3, [r3, #0]

	return uart->EVENTS_RXDRDY;
    227e:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
}
    2282:	4770      	bx	lr

00002284 <uart_nrf5_irq_err_enable>:

/** Interrupt driven error enabling function */
static void uart_nrf5_irq_err_enable(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    2284:	6803      	ldr	r3, [r0, #0]
    2286:	689b      	ldr	r3, [r3, #8]
    2288:	681a      	ldr	r2, [r3, #0]

	uart->INTENSET |= UART_IRQ_MASK_ERROR;
    228a:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
    228e:	f043 0310 	orr.w	r3, r3, #16
    2292:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    2296:	4770      	bx	lr

00002298 <uart_nrf5_irq_err_disable>:
}

/** Interrupt driven error disabling function */
static void uart_nrf5_irq_err_disable(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    2298:	6803      	ldr	r3, [r0, #0]
    229a:	689b      	ldr	r3, [r3, #8]
    229c:	681a      	ldr	r2, [r3, #0]

	uart->INTENCLR |= UART_IRQ_MASK_ERROR;
    229e:	f8d2 3308 	ldr.w	r3, [r2, #776]	; 0x308
    22a2:	f043 0310 	orr.w	r3, r3, #16
    22a6:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    22aa:	4770      	bx	lr

000022ac <uart_nrf5_irq_is_pending>:
}

/** Interrupt driven pending status function */
static int uart_nrf5_irq_is_pending(struct device *dev)
{
    22ac:	b510      	push	{r4, lr}
    22ae:	4604      	mov	r4, r0
	return (uart_nrf5_irq_tx_ready(dev) || uart_nrf5_irq_rx_ready(dev));
    22b0:	f7ff ffbf 	bl	2232 <uart_nrf5_irq_tx_ready>
    22b4:	b110      	cbz	r0, 22bc <uart_nrf5_irq_is_pending+0x10>
    22b6:	2301      	movs	r3, #1
}
    22b8:	4618      	mov	r0, r3
    22ba:	bd10      	pop	{r4, pc}
	return (uart_nrf5_irq_tx_ready(dev) || uart_nrf5_irq_rx_ready(dev));
    22bc:	4620      	mov	r0, r4
    22be:	f7ff ffdb 	bl	2278 <uart_nrf5_irq_rx_ready>
    22c2:	4603      	mov	r3, r0
    22c4:	2800      	cmp	r0, #0
    22c6:	d0f7      	beq.n	22b8 <uart_nrf5_irq_is_pending+0xc>
    22c8:	2301      	movs	r3, #1
    22ca:	e7f5      	b.n	22b8 <uart_nrf5_irq_is_pending+0xc>

000022cc <uart_nrf5_irq_update>:

/** Interrupt driven interrupt update function */
static int uart_nrf5_irq_update(struct device *dev)
{
	return 1;
}
    22cc:	2001      	movs	r0, #1
    22ce:	4770      	bx	lr

000022d0 <uart_nrf5_irq_callback_set>:

/** Set the callback function */
static void uart_nrf5_irq_callback_set(struct device *dev, uart_irq_callback_t cb)
{
	struct uart_nrf5_dev_data_t * const dev_data = DEV_DATA(dev);
    22d0:	6883      	ldr	r3, [r0, #8]

	dev_data->cb = cb;
    22d2:	6059      	str	r1, [r3, #4]
    22d4:	4770      	bx	lr

000022d6 <uart_nrf5_isr>:
 * @param arg Argument to ISR.
 *
 * @return N/A
 */
void uart_nrf5_isr(void *arg)
{
    22d6:	b508      	push	{r3, lr}
	struct device *dev = arg;
	struct uart_nrf5_dev_data_t * const dev_data = DEV_DATA(dev);
    22d8:	6883      	ldr	r3, [r0, #8]

	if (dev_data->cb) {
    22da:	685b      	ldr	r3, [r3, #4]
    22dc:	b103      	cbz	r3, 22e0 <uart_nrf5_isr+0xa>
		dev_data->cb(dev);
    22de:	4798      	blx	r3
    22e0:	bd08      	pop	{r3, pc}

000022e2 <uart_nrf5_irq_config>:
	    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE);


#ifdef CONFIG_UART_INTERRUPT_DRIVEN
static void uart_nrf5_irq_config(struct device *port)
{
    22e2:	b508      	push	{r3, lr}
	IRQ_CONNECT(NRF5_IRQ_UART0_IRQn,
    22e4:	2200      	movs	r2, #0
    22e6:	2101      	movs	r1, #1
    22e8:	2002      	movs	r0, #2
    22ea:	f024 fdeb 	bl	26ec4 <_irq_priority_set>
		    CONFIG_UART_NRF5_IRQ_PRI,
		    uart_nrf5_isr, DEVICE_GET(uart_nrf5_0),
		    0);
	irq_enable(NRF5_IRQ_UART0_IRQn);
    22ee:	2002      	movs	r0, #2
    22f0:	f024 fdbe 	bl	26e70 <_arch_irq_enable>
    22f4:	bd08      	pop	{r3, pc}
	...

000022f8 <uart_nrf5_init>:
{
    22f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    22fa:	4604      	mov	r4, r0
	volatile struct _uart *uart = UART_STRUCT(dev);
    22fc:	6803      	ldr	r3, [r0, #0]
    22fe:	689b      	ldr	r3, [r3, #8]
    2300:	681d      	ldr	r5, [r3, #0]
	gpio_dev = device_get_binding(CONFIG_GPIO_NRF5_P0_DEV_NAME);
    2302:	481d      	ldr	r0, [pc, #116]	; (2378 <uart_nrf5_init+0x80>)
    2304:	f024 ff82 	bl	2720c <device_get_binding>
    2308:	4606      	mov	r6, r0
 * @return 0 if successful, negative errno code on failure.
 */
static inline int gpio_pin_configure(struct device *port, u32_t pin,
				     int flags)
{
	const struct gpio_driver_api *api = port->driver_api;
    230a:	6843      	ldr	r3, [r0, #4]

	return api->config(port, GPIO_ACCESS_BY_PIN, pin, flags);
    230c:	681f      	ldr	r7, [r3, #0]
    230e:	f240 1301 	movw	r3, #257	; 0x101
    2312:	2206      	movs	r2, #6
    2314:	2100      	movs	r1, #0
    2316:	47b8      	blx	r7
	const struct gpio_driver_api *api = port->driver_api;
    2318:	6873      	ldr	r3, [r6, #4]
	return api->config(port, GPIO_ACCESS_BY_PIN, pin, flags);
    231a:	681f      	ldr	r7, [r3, #0]
    231c:	2300      	movs	r3, #0
    231e:	2208      	movs	r2, #8
    2320:	4619      	mov	r1, r3
    2322:	4630      	mov	r0, r6
    2324:	47b8      	blx	r7
	uart->PSELTXD = CONFIG_UART_NRF5_GPIO_TX_PIN;
    2326:	2306      	movs	r3, #6
    2328:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
	uart->PSELRXD = CONFIG_UART_NRF5_GPIO_RX_PIN;
    232c:	2308      	movs	r3, #8
    232e:	f8c5 3514 	str.w	r3, [r5, #1300]	; 0x514
	DEV_DATA(dev)->baud_rate = CONFIG_UART_NRF5_BAUD_RATE;
    2332:	68a3      	ldr	r3, [r4, #8]
    2334:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
    2338:	601a      	str	r2, [r3, #0]
	err = baudrate_set(dev, DEV_DATA(dev)->baud_rate,
    233a:	68a3      	ldr	r3, [r4, #8]
		     DEV_CFG(dev)->sys_clk_freq);
    233c:	6822      	ldr	r2, [r4, #0]
    233e:	6892      	ldr	r2, [r2, #8]
	err = baudrate_set(dev, DEV_DATA(dev)->baud_rate,
    2340:	6852      	ldr	r2, [r2, #4]
    2342:	6819      	ldr	r1, [r3, #0]
    2344:	4620      	mov	r0, r4
    2346:	f7ff fe7d 	bl	2044 <baudrate_set>
	if (err) {
    234a:	4606      	mov	r6, r0
    234c:	b108      	cbz	r0, 2352 <uart_nrf5_init+0x5a>
}
    234e:	4630      	mov	r0, r6
    2350:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uart->ENABLE = (UART_ENABLE_ENABLE_Enabled << UART_ENABLE_ENABLE_Pos);
    2352:	2304      	movs	r3, #4
    2354:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
	uart->EVENTS_TXDRDY = 0;
    2358:	2300      	movs	r3, #0
    235a:	f8c5 311c 	str.w	r3, [r5, #284]	; 0x11c
	uart->EVENTS_RXDRDY = 0;
    235e:	f8c5 3108 	str.w	r3, [r5, #264]	; 0x108
	uart->TASKS_STARTTX = 1;
    2362:	2301      	movs	r3, #1
    2364:	60ab      	str	r3, [r5, #8]
	uart->TASKS_STARTRX = 1;
    2366:	602b      	str	r3, [r5, #0]
	dev->driver_api = &uart_nrf5_driver_api;
    2368:	4b04      	ldr	r3, [pc, #16]	; (237c <uart_nrf5_init+0x84>)
    236a:	6063      	str	r3, [r4, #4]
	DEV_CFG(dev)->irq_config_func(dev);
    236c:	6823      	ldr	r3, [r4, #0]
    236e:	689b      	ldr	r3, [r3, #8]
    2370:	689b      	ldr	r3, [r3, #8]
    2372:	4620      	mov	r0, r4
    2374:	4798      	blx	r3
	return 0;
    2376:	e7ea      	b.n	234e <uart_nrf5_init+0x56>
    2378:	0002f0a0 	.word	0x0002f0a0
    237c:	0002f0cc 	.word	0x0002f0cc

00002380 <rtc_compare_set>:
static void rtc_compare_set(u32_t rtc_ticks)
{
	u32_t rtc_now;

	/* Try to set CC value. We assume the procedure is always successful. */
	RTC_CC_VALUE = rtc_ticks;
    2380:	4b08      	ldr	r3, [pc, #32]	; (23a4 <rtc_compare_set+0x24>)
    2382:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
	rtc_now = RTC_COUNTER;
    2386:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	 * by checking if the unsigned subtraction wraps around.
	 * If either of the above are true then instead of waiting for the CC
	 * event to trigger in the form of an interrupt, trigger it directly
	 * using the NVIC.
	 */
	if ((((rtc_ticks - rtc_now) & RTC_MASK) < RTC_MIN_DELTA) ||
    238a:	1ac0      	subs	r0, r0, r3
    238c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2390:	3802      	subs	r0, #2
    2392:	4b05      	ldr	r3, [pc, #20]	; (23a8 <rtc_compare_set+0x28>)
    2394:	4298      	cmp	r0, r3
    2396:	d904      	bls.n	23a2 <rtc_compare_set+0x22>
  \details Sets the pending bit of an external interrupt.
  \param [in]      IRQn  Interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2398:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    239c:	4b03      	ldr	r3, [pc, #12]	; (23ac <rtc_compare_set+0x2c>)
    239e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    23a2:	4770      	bx	lr
    23a4:	40011000 	.word	0x40011000
    23a8:	007ffffd 	.word	0x007ffffd
    23ac:	e000e100 	.word	0xe000e100

000023b0 <rtc_announce_set_next>:
 * Since this function can be preempted, we need to take some provisions to
 * announce all expected sys ticks that have passed.
 *
 */
static void rtc_announce_set_next(void)
{
    23b0:	b508      	push	{r3, lr}

	/* Read the RTC counter one single time in the beginning, so that an
	 * increase in the counter during this procedure leads to no race
	 * conditions.
	 */
	rtc_now = RTC_COUNTER;
    23b2:	4b15      	ldr	r3, [pc, #84]	; (2408 <rtc_announce_set_next+0x58>)
    23b4:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504

	/* Calculate how many RTC ticks elapsed since the last sys tick. */
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    23b8:	4a14      	ldr	r2, [pc, #80]	; (240c <rtc_announce_set_next+0x5c>)
    23ba:	6811      	ldr	r1, [r2, #0]
    23bc:	1a5b      	subs	r3, r3, r1
    23be:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	/* If no sys ticks have elapsed, there is no point in incrementing the
	 * counters or announcing it.
	 */
	if (rtc_elapsed >= RTC_TICKS_PER_SYS_TICK) {
    23c2:	f5b3 7fa3 	cmp.w	r3, #326	; 0x146
    23c6:	d917      	bls.n	23f8 <rtc_announce_set_next+0x48>
#ifdef CONFIG_TICKLESS_IDLE
		/* Calculate how many sys ticks elapsed since the last sys tick
		 * and notify the kernel if necessary.
		 */
		sys_elapsed = rtc_elapsed / RTC_TICKS_PER_SYS_TICK;
    23c8:	4a11      	ldr	r2, [pc, #68]	; (2410 <rtc_announce_set_next+0x60>)
    23ca:	fba2 0203 	umull	r0, r2, r2, r3
    23ce:	1a9b      	subs	r3, r3, r2
    23d0:	eb02 0353 	add.w	r3, r2, r3, lsr #1
    23d4:	0a1b      	lsrs	r3, r3, #8

		if (sys_elapsed > expected_sys_ticks) {
    23d6:	4a0f      	ldr	r2, [pc, #60]	; (2414 <rtc_announce_set_next+0x64>)
    23d8:	6810      	ldr	r0, [r2, #0]
    23da:	4283      	cmp	r3, r0
    23dc:	d800      	bhi.n	23e0 <rtc_announce_set_next+0x30>
		sys_elapsed = rtc_elapsed / RTC_TICKS_PER_SYS_TICK;
    23de:	4618      	mov	r0, r3

		/* Store RTC_COUNTER floored to the last sys tick. This is
		 * done, so that ISR can properly calculate that 1 sys tick
		 * has passed.
		 */
		rtc_past = (rtc_past +
    23e0:	f240 1347 	movw	r3, #327	; 0x147
    23e4:	fb03 1300 	mla	r3, r3, r0, r1
				(sys_elapsed * RTC_TICKS_PER_SYS_TICK)
			   ) & RTC_MASK;
    23e8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		rtc_past = (rtc_past +
    23ec:	4a07      	ldr	r2, [pc, #28]	; (240c <rtc_announce_set_next+0x5c>)
    23ee:	6013      	str	r3, [r2, #0]

		_sys_idle_elapsed_ticks = sys_elapsed;
    23f0:	4b09      	ldr	r3, [pc, #36]	; (2418 <rtc_announce_set_next+0x68>)
    23f2:	6018      	str	r0, [r3, #0]
		_sys_clock_tick_announce();
    23f4:	f026 fa52 	bl	2889c <_nano_sys_clock_tick_announce>
	}

	/* Set the RTC to the next sys tick */
	rtc_compare_set(rtc_past + RTC_TICKS_PER_SYS_TICK);
    23f8:	4b04      	ldr	r3, [pc, #16]	; (240c <rtc_announce_set_next+0x5c>)
    23fa:	6818      	ldr	r0, [r3, #0]
    23fc:	f200 1047 	addw	r0, r0, #327	; 0x147
    2400:	f7ff ffbe 	bl	2380 <rtc_compare_set>
    2404:	bd08      	pop	{r3, pc}
    2406:	bf00      	nop
    2408:	40011000 	.word	0x40011000
    240c:	20000254 	.word	0x20000254
    2410:	90d4f121 	.word	0x90d4f121
    2414:	20000250 	.word	0x20000250
    2418:	2000c508 	.word	0x2000c508

0000241c <rtc1_nrf5_isr>:
 * 400. However, the ISR is preempted for a number of sys ticks, until 450 in
 * this example. The ISR will then announce the number of sys ticks it was
 * delayed (2), and schedule the next sys tick (5) at 500.
 */
static void rtc1_nrf5_isr(void *arg)
{
    241c:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);
	RTC_CC_EVENT = 0;
    241e:	2200      	movs	r2, #0
    2420:	4b02      	ldr	r3, [pc, #8]	; (242c <rtc1_nrf5_isr+0x10>)
    2422:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	 */
	expected_sys_ticks = 0;
	/* Anounce elapsed of _sys_idle_elapsed_ticks systicks*/
	_sys_clock_tick_announce();
#else
	rtc_announce_set_next();
    2426:	f7ff ffc3 	bl	23b0 <rtc_announce_set_next>
    242a:	bd08      	pop	{r3, pc}
    242c:	40011000 	.word	0x40011000

00002430 <_timer_idle_enter>:
{
    2430:	b508      	push	{r3, lr}
	if ((sys_ticks < 0) ||
    2432:	f246 4335 	movw	r3, #25653	; 0x6435
    2436:	4298      	cmp	r0, r3
    2438:	d900      	bls.n	243c <_timer_idle_enter+0xc>
		sys_ticks = RTC_HALF / RTC_TICKS_PER_SYS_TICK;
    243a:	4618      	mov	r0, r3
	expected_sys_ticks = sys_ticks;
    243c:	4b05      	ldr	r3, [pc, #20]	; (2454 <_timer_idle_enter+0x24>)
    243e:	6018      	str	r0, [r3, #0]
	rtc_compare_set(rtc_past + (sys_ticks * RTC_TICKS_PER_SYS_TICK));
    2440:	4b05      	ldr	r3, [pc, #20]	; (2458 <_timer_idle_enter+0x28>)
    2442:	681b      	ldr	r3, [r3, #0]
    2444:	f240 1247 	movw	r2, #327	; 0x147
    2448:	fb02 3000 	mla	r0, r2, r0, r3
    244c:	f7ff ff98 	bl	2380 <rtc_compare_set>
    2450:	bd08      	pop	{r3, pc}
    2452:	bf00      	nop
    2454:	20000250 	.word	0x20000250
    2458:	20000254 	.word	0x20000254

0000245c <_timer_idle_exit>:
{
    245c:	b508      	push	{r3, lr}
	RTC_CC_EVENT = 0;
    245e:	2200      	movs	r2, #0
    2460:	4b06      	ldr	r3, [pc, #24]	; (247c <_timer_idle_exit+0x20>)
    2462:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
  \details Clears the pending bit of an external interrupt.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2466:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    246a:	4b05      	ldr	r3, [pc, #20]	; (2480 <_timer_idle_exit+0x24>)
    246c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	rtc_announce_set_next();
    2470:	f7ff ff9e 	bl	23b0 <rtc_announce_set_next>
	expected_sys_ticks = 1;
    2474:	2201      	movs	r2, #1
    2476:	4b03      	ldr	r3, [pc, #12]	; (2484 <_timer_idle_exit+0x28>)
    2478:	601a      	str	r2, [r3, #0]
    247a:	bd08      	pop	{r3, pc}
    247c:	40011000 	.word	0x40011000
    2480:	e000e100 	.word	0xe000e100
    2484:	20000250 	.word	0x20000250

00002488 <_sys_clock_driver_init>:
#endif

}

int _sys_clock_driver_init(struct device *device)
{
    2488:	b570      	push	{r4, r5, r6, lr}
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
    248a:	4818      	ldr	r0, [pc, #96]	; (24ec <_sys_clock_driver_init+0x64>)
    248c:	f024 febe 	bl	2720c <device_get_binding>
	if (!clock) {
    2490:	b348      	cbz	r0, 24e6 <_sys_clock_driver_init+0x5e>
 * @param sys A pointer to an opaque data representing the sub-system
 */
static inline int clock_control_on(struct device *dev,
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;
    2492:	6842      	ldr	r2, [r0, #4]

	return api->on(dev, sys);
    2494:	6812      	ldr	r2, [r2, #0]
    2496:	2101      	movs	r1, #1
    2498:	4790      	blx	r2
		return -1;
	}

	clock_control_on(clock, (void *)CLOCK_CONTROL_NRF5_K32SRC);

	rtc_past = 0;
    249a:	2400      	movs	r4, #0
    249c:	4b14      	ldr	r3, [pc, #80]	; (24f0 <_sys_clock_driver_init+0x68>)
    249e:	601c      	str	r4, [r3, #0]

#ifdef CONFIG_TICKLESS_IDLE
	expected_sys_ticks = 1;
    24a0:	2601      	movs	r6, #1
    24a2:	4b14      	ldr	r3, [pc, #80]	; (24f4 <_sys_clock_driver_init+0x6c>)
    24a4:	601e      	str	r6, [r3, #0]
#endif /* CONFIG_TICKLESS_IDLE */

	/* TODO: replace with counter driver to access RTC */
	SYS_CLOCK_RTC->PRESCALER = 0;
    24a6:	4d14      	ldr	r5, [pc, #80]	; (24f8 <_sys_clock_driver_init+0x70>)
    24a8:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
	SYS_CLOCK_RTC->CC[0] = RTC_TICKS_PER_SYS_TICK;
    24ac:	f240 1347 	movw	r3, #327	; 0x147
    24b0:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
	SYS_CLOCK_RTC->EVTENSET = RTC_EVTENSET_COMPARE0_Msk;
    24b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    24b8:	f8c5 3344 	str.w	r3, [r5, #836]	; 0x344
	SYS_CLOCK_RTC->INTENSET = RTC_INTENSET_COMPARE0_Msk;
    24bc:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304

	/* Clear the event flag and possible pending interrupt */
	RTC_CC_EVENT = 0;
    24c0:	f8c5 4140 	str.w	r4, [r5, #320]	; 0x140
    24c4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    24c8:	4b0c      	ldr	r3, [pc, #48]	; (24fc <_sys_clock_driver_init+0x74>)
    24ca:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ClearPendingIRQ(NRF5_IRQ_RTC1_IRQn);

	IRQ_CONNECT(NRF5_IRQ_RTC1_IRQn, 1, rtc1_nrf5_isr, 0, 0);
    24ce:	4622      	mov	r2, r4
    24d0:	4631      	mov	r1, r6
    24d2:	2011      	movs	r0, #17
    24d4:	f024 fcf6 	bl	26ec4 <_irq_priority_set>
	irq_enable(NRF5_IRQ_RTC1_IRQn);
    24d8:	2011      	movs	r0, #17
    24da:	f024 fcc9 	bl	26e70 <_arch_irq_enable>

	SYS_CLOCK_RTC->TASKS_CLEAR = 1;
    24de:	60ae      	str	r6, [r5, #8]
	SYS_CLOCK_RTC->TASKS_START = 1;
    24e0:	602e      	str	r6, [r5, #0]

	return 0;
    24e2:	4620      	mov	r0, r4
    24e4:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
    24e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    24ea:	bd70      	pop	{r4, r5, r6, pc}
    24ec:	0002f0a8 	.word	0x0002f0a8
    24f0:	20000254 	.word	0x20000254
    24f4:	20000250 	.word	0x20000250
    24f8:	40011000 	.word	0x40011000
    24fc:	e000e100 	.word	0xe000e100

00002500 <_timer_cycle_get_32>:

u32_t _timer_cycle_get_32(void)
{
    2500:	b410      	push	{r4}
	u32_t elapsed_cycles;
	u32_t sys_clock_tick_count;
	u32_t rtc_prev;
	u32_t rtc_now;

	rtc_now = RTC_COUNTER;
    2502:	4b0d      	ldr	r3, [pc, #52]	; (2538 <_timer_cycle_get_32+0x38>)
    2504:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
    2508:	e000      	b.n	250c <_timer_cycle_get_32+0xc>
		sys_clock_tick_count = _sys_clock_tick_count;
		elapsed_cycles = (rtc_now - (sys_clock_tick_count *
					     RTC_TICKS_PER_SYS_TICK)) &
				 RTC_MASK;
		rtc_prev = rtc_now;
		rtc_now = RTC_COUNTER;
    250a:	4619      	mov	r1, r3
		sys_clock_tick_count = _sys_clock_tick_count;
    250c:	4b0b      	ldr	r3, [pc, #44]	; (253c <_timer_cycle_get_32+0x3c>)
    250e:	e9d3 2300 	ldrd	r2, r3, [r3]
    2512:	4614      	mov	r4, r2
		elapsed_cycles = (rtc_now - (sys_clock_tick_count *
    2514:	f240 1047 	movw	r0, #327	; 0x147
    2518:	fb00 1212 	mls	r2, r0, r2, r1
    251c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
		rtc_now = RTC_COUNTER;
    2520:	4b05      	ldr	r3, [pc, #20]	; (2538 <_timer_cycle_get_32+0x38>)
    2522:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	} while (rtc_now != rtc_prev);
    2526:	4299      	cmp	r1, r3
    2528:	d1ef      	bne.n	250a <_timer_cycle_get_32+0xa>

	return (sys_clock_tick_count * sys_clock_hw_cycles_per_tick) +
    252a:	4b05      	ldr	r3, [pc, #20]	; (2540 <_timer_cycle_get_32+0x40>)
    252c:	6818      	ldr	r0, [r3, #0]
	       elapsed_cycles;
}
    252e:	fb00 2004 	mla	r0, r0, r4, r2
    2532:	bc10      	pop	{r4}
    2534:	4770      	bx	lr
    2536:	bf00      	nop
    2538:	40011000 	.word	0x40011000
    253c:	20002b00 	.word	0x20002b00
    2540:	2000c50c 	.word	0x2000c50c

00002544 <gpiote_find_channel>:
#define GPIOTE_CFG_PIN(pin) ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PSEL_Msk)
#define GPIOTE_CFG_PIN_GET(config) ((config & GPIOTE_CONFIG_PSEL_Msk) >> \
				GPIOTE_CONFIG_PSEL_Pos)

static int gpiote_find_channel(struct device *dev, u32_t pin)
{
    2544:	b410      	push	{r4}
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    2546:	6803      	ldr	r3, [r0, #0]
    2548:	689b      	ldr	r3, [r3, #8]
    254a:	689c      	ldr	r4, [r3, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    254c:	6882      	ldr	r2, [r0, #8]
	int i;

	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
    254e:	2000      	movs	r0, #0
    2550:	e000      	b.n	2554 <gpiote_find_channel+0x10>
    2552:	3001      	adds	r0, #1
    2554:	2807      	cmp	r0, #7
    2556:	dc0d      	bgt.n	2574 <gpiote_find_channel+0x30>
		if ((data->gpiote_chan_mask & BIT(i)) &&
    2558:	68d3      	ldr	r3, [r2, #12]
    255a:	40c3      	lsrs	r3, r0
    255c:	f013 0f01 	tst.w	r3, #1
    2560:	d0f7      	beq.n	2552 <gpiote_find_channel+0xe>
		    (GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]) == pin)) {
    2562:	f500 73a2 	add.w	r3, r0, #324	; 0x144
    2566:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
    256a:	f3c3 2304 	ubfx	r3, r3, #8, #5
		if ((data->gpiote_chan_mask & BIT(i)) &&
    256e:	428b      	cmp	r3, r1
    2570:	d1ef      	bne.n	2552 <gpiote_find_channel+0xe>
    2572:	e001      	b.n	2578 <gpiote_find_channel+0x34>
			return i;
		}
	}

	return -ENODEV;
    2574:	f06f 0012 	mvn.w	r0, #18
}
    2578:	bc10      	pop	{r4}
    257a:	4770      	bx	lr

0000257c <gpio_nrf5_read>:
}

static int gpio_nrf5_read(struct device *dev,
			  int access_op, u32_t pin, u32_t *value)
{
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
    257c:	6800      	ldr	r0, [r0, #0]
    257e:	6880      	ldr	r0, [r0, #8]
    2580:	6800      	ldr	r0, [r0, #0]

	if (access_op == GPIO_ACCESS_BY_PIN) {
    2582:	b121      	cbz	r1, 258e <gpio_nrf5_read+0x12>
		*value = (gpio->IN >> pin) & 0x1;
	} else {
		*value = gpio->IN;
    2584:	f8d0 2510 	ldr.w	r2, [r0, #1296]	; 0x510
    2588:	601a      	str	r2, [r3, #0]
	}
	return 0;
}
    258a:	2000      	movs	r0, #0
    258c:	4770      	bx	lr
		*value = (gpio->IN >> pin) & 0x1;
    258e:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    2592:	fa21 f202 	lsr.w	r2, r1, r2
    2596:	f002 0201 	and.w	r2, r2, #1
    259a:	601a      	str	r2, [r3, #0]
    259c:	e7f5      	b.n	258a <gpio_nrf5_read+0xe>

0000259e <gpio_nrf5_write>:

static int gpio_nrf5_write(struct device *dev,
			   int access_op, u32_t pin, u32_t value)
{
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
    259e:	6800      	ldr	r0, [r0, #0]
    25a0:	6880      	ldr	r0, [r0, #8]
    25a2:	6800      	ldr	r0, [r0, #0]

	if (access_op == GPIO_ACCESS_BY_PIN) {
    25a4:	b961      	cbnz	r1, 25c0 <gpio_nrf5_write+0x22>
		if (value) { /* 1 */
    25a6:	b12b      	cbz	r3, 25b4 <gpio_nrf5_write+0x16>
			gpio->OUTSET = BIT(pin);
    25a8:	2301      	movs	r3, #1
    25aa:	fa03 f202 	lsl.w	r2, r3, r2
    25ae:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
    25b2:	e007      	b.n	25c4 <gpio_nrf5_write+0x26>
		} else { /* 0 */
			gpio->OUTCLR = BIT(pin);
    25b4:	2301      	movs	r3, #1
    25b6:	fa03 f202 	lsl.w	r2, r3, r2
    25ba:	f8c0 250c 	str.w	r2, [r0, #1292]	; 0x50c
    25be:	e001      	b.n	25c4 <gpio_nrf5_write+0x26>
		}
	} else {
		gpio->OUT = value;
    25c0:	f8c0 3504 	str.w	r3, [r0, #1284]	; 0x504
	}
	return 0;
}
    25c4:	2000      	movs	r0, #0
    25c6:	4770      	bx	lr

000025c8 <gpio_nrf5_manage_callback>:

static int gpio_nrf5_manage_callback(struct device *dev,
				    struct gpio_callback *callback, bool set)
{
    25c8:	b410      	push	{r4}
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    25ca:	6884      	ldr	r4, [r0, #8]
					 bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (set) {
    25cc:	b14a      	cbz	r2, 25e2 <gpio_nrf5_manage_callback+0x1a>
 * @param node A pointer on the node to prepend
 */
static inline void sys_slist_prepend(sys_slist_t *list,
				     sys_snode_t *node)
{
	node->next = list->head;
    25ce:	6823      	ldr	r3, [r4, #0]
    25d0:	600b      	str	r3, [r1, #0]
	list->head = node;
    25d2:	6021      	str	r1, [r4, #0]

	if (!list->tail) {
    25d4:	6863      	ldr	r3, [r4, #4]
    25d6:	b113      	cbz	r3, 25de <gpio_nrf5_manage_callback+0x16>

	_gpio_manage_callback(&data->callbacks, callback, set);

	return 0;
}
    25d8:	2000      	movs	r0, #0
    25da:	bc10      	pop	{r4}
    25dc:	4770      	bx	lr
		list->tail = list->head;
    25de:	6061      	str	r1, [r4, #4]
    25e0:	e7fa      	b.n	25d8 <gpio_nrf5_manage_callback+0x10>
		sys_slist_prepend(callbacks, &callback->node);
	} else {
		sys_slist_find_and_remove(callbacks, &callback->node);
    25e2:	4608      	mov	r0, r1
	return list->head;
    25e4:	6823      	ldr	r3, [r4, #0]
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node)
{
	sys_snode_t *prev = NULL;
    25e6:	2200      	movs	r2, #0
	sys_snode_t *test;

	SYS_SLIST_FOR_EACH_NODE(list, test) {
    25e8:	2b00      	cmp	r3, #0
    25ea:	d0f5      	beq.n	25d8 <gpio_nrf5_manage_callback+0x10>
		if (test == node) {
    25ec:	4298      	cmp	r0, r3
    25ee:	d002      	beq.n	25f6 <gpio_nrf5_manage_callback+0x2e>
			sys_slist_remove(list, prev, node);
			return true;
		}

		prev = test;
    25f0:	461a      	mov	r2, r3
	SYS_SLIST_FOR_EACH_NODE(list, test) {
    25f2:	681b      	ldr	r3, [r3, #0]
    25f4:	e7f8      	b.n	25e8 <gpio_nrf5_manage_callback+0x20>
	if (!prev_node) {
    25f6:	b13a      	cbz	r2, 2608 <gpio_nrf5_manage_callback+0x40>
		prev_node->next = node->next;
    25f8:	680b      	ldr	r3, [r1, #0]
    25fa:	6013      	str	r3, [r2, #0]
		if (list->tail == node) {
    25fc:	6863      	ldr	r3, [r4, #4]
    25fe:	4299      	cmp	r1, r3
    2600:	d009      	beq.n	2616 <gpio_nrf5_manage_callback+0x4e>
	node->next = NULL;
    2602:	2300      	movs	r3, #0
    2604:	600b      	str	r3, [r1, #0]
    2606:	e7e7      	b.n	25d8 <gpio_nrf5_manage_callback+0x10>
		list->head = node->next;
    2608:	680b      	ldr	r3, [r1, #0]
    260a:	6023      	str	r3, [r4, #0]
		if (list->tail == node) {
    260c:	6862      	ldr	r2, [r4, #4]
    260e:	4291      	cmp	r1, r2
    2610:	d1f7      	bne.n	2602 <gpio_nrf5_manage_callback+0x3a>
			list->tail = list->head;
    2612:	6063      	str	r3, [r4, #4]
    2614:	e7f5      	b.n	2602 <gpio_nrf5_manage_callback+0x3a>
			list->tail = prev_node;
    2616:	6062      	str	r2, [r4, #4]
    2618:	e7f3      	b.n	2602 <gpio_nrf5_manage_callback+0x3a>

0000261a <gpio_nrf5_enable_callback>:


static int gpio_nrf5_enable_callback(struct device *dev,
				    int access_op, u32_t pin)
{
    261a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    261c:	6803      	ldr	r3, [r0, #0]
    261e:	689b      	ldr	r3, [r3, #8]
    2620:	689e      	ldr	r6, [r3, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    2622:	6887      	ldr	r7, [r0, #8]
	int i;

	if (access_op == GPIO_ACCESS_BY_PIN) {
    2624:	b9b9      	cbnz	r1, 2656 <gpio_nrf5_enable_callback+0x3c>
    2626:	460d      	mov	r5, r1
    2628:	4614      	mov	r4, r2

		i = gpiote_find_channel(dev, pin);
    262a:	4611      	mov	r1, r2
    262c:	f7ff ff8a 	bl	2544 <gpiote_find_channel>
		if (i < 0) {
    2630:	2800      	cmp	r0, #0
    2632:	db12      	blt.n	265a <gpio_nrf5_enable_callback+0x40>
			return i;
		}

		data->pin_callback_enables |= BIT(pin);
    2634:	2301      	movs	r3, #1
    2636:	fa03 f404 	lsl.w	r4, r3, r4
    263a:	68ba      	ldr	r2, [r7, #8]
    263c:	4314      	orrs	r4, r2
    263e:	60bc      	str	r4, [r7, #8]
		/* clear event before any interrupt triggers */
		gpiote->EVENTS_IN[i] = 0;
    2640:	f100 0240 	add.w	r2, r0, #64	; 0x40
    2644:	2100      	movs	r1, #0
    2646:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
		/* enable interrupt for the GPIOTE channel */
		gpiote->INTENSET = BIT(i);
    264a:	fa03 f000 	lsl.w	r0, r3, r0
    264e:	f8c6 0304 	str.w	r0, [r6, #772]	; 0x304
	} else {
		return -ENOTSUP;
	}

	return 0;
    2652:	4628      	mov	r0, r5
    2654:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOTSUP;
    2656:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    265a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000265c <gpio_nrf5_disable_callback>:


static int gpio_nrf5_disable_callback(struct device *dev,
				     int access_op, u32_t pin)
{
    265c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    265e:	6803      	ldr	r3, [r0, #0]
    2660:	689b      	ldr	r3, [r3, #8]
    2662:	689f      	ldr	r7, [r3, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    2664:	6886      	ldr	r6, [r0, #8]
	int i;

	if (access_op == GPIO_ACCESS_BY_PIN) {
    2666:	b991      	cbnz	r1, 268e <gpio_nrf5_disable_callback+0x32>
    2668:	460d      	mov	r5, r1
    266a:	4614      	mov	r4, r2
		i = gpiote_find_channel(dev, pin);
    266c:	4611      	mov	r1, r2
    266e:	f7ff ff69 	bl	2544 <gpiote_find_channel>
		if (i < 0) {
    2672:	2800      	cmp	r0, #0
    2674:	db0d      	blt.n	2692 <gpio_nrf5_disable_callback+0x36>
			return i;
		}

		data->pin_callback_enables &= ~(BIT(pin));
    2676:	2301      	movs	r3, #1
    2678:	fa03 f404 	lsl.w	r4, r3, r4
    267c:	68b2      	ldr	r2, [r6, #8]
    267e:	ea22 0404 	bic.w	r4, r2, r4
    2682:	60b4      	str	r4, [r6, #8]
		/* disable interrupt for the GPIOTE channel */
		gpiote->INTENCLR = BIT(i);
    2684:	4083      	lsls	r3, r0
    2686:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
	} else {
		return -ENOTSUP;
	}

	return 0;
    268a:	4628      	mov	r0, r5
    268c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOTSUP;
    268e:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    2692:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00002694 <gpio_nrf5_P0_init>:
		    &gpio_data_P0, &gpio_nrf5_P0_cfg,
		    POST_KERNEL, CONFIG_KERNEL_INIT_PRIORITY_DEFAULT,
		    &gpio_nrf5_drv_api_funcs);

static int gpio_nrf5_P0_init(struct device *dev)
{
    2694:	b508      	push	{r3, lr}
	IRQ_CONNECT(NRF5_IRQ_GPIOTE_IRQn, CONFIG_GPIO_NRF5_PORT_P0_PRI,
    2696:	2200      	movs	r2, #0
    2698:	2101      	movs	r1, #1
    269a:	2006      	movs	r0, #6
    269c:	f024 fc12 	bl	26ec4 <_irq_priority_set>
		    gpio_nrf5_port_isr, DEVICE_GET(gpio_nrf5_P0), 0);

	irq_enable(NRF5_IRQ_GPIOTE_IRQn);
    26a0:	2006      	movs	r0, #6
    26a2:	f024 fbe5 	bl	26e70 <_arch_irq_enable>

	return 0;
}
    26a6:	2000      	movs	r0, #0
    26a8:	bd08      	pop	{r3, pc}

000026aa <gpio_nrf5_port_isr>:
{
    26aa:	b570      	push	{r4, r5, r6, lr}
    26ac:	4605      	mov	r5, r0
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    26ae:	6803      	ldr	r3, [r0, #0]
    26b0:	689b      	ldr	r3, [r3, #8]
    26b2:	6899      	ldr	r1, [r3, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    26b4:	6884      	ldr	r4, [r0, #8]
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
    26b6:	2300      	movs	r3, #0
	u32_t enabled_int, int_status = 0;
    26b8:	461e      	mov	r6, r3
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
    26ba:	e000      	b.n	26be <gpio_nrf5_port_isr+0x14>
    26bc:	3301      	adds	r3, #1
    26be:	2b07      	cmp	r3, #7
    26c0:	dc14      	bgt.n	26ec <gpio_nrf5_port_isr+0x42>
		if (gpiote->EVENTS_IN[i]) {
    26c2:	f103 0240 	add.w	r2, r3, #64	; 0x40
    26c6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    26ca:	2a00      	cmp	r2, #0
    26cc:	d0f6      	beq.n	26bc <gpio_nrf5_port_isr+0x12>
			gpiote->EVENTS_IN[i] = 0;
    26ce:	f103 0240 	add.w	r2, r3, #64	; 0x40
    26d2:	2000      	movs	r0, #0
    26d4:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
			int_status |= BIT(GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]));
    26d8:	f503 72a2 	add.w	r2, r3, #324	; 0x144
    26dc:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
    26e0:	f3c0 2004 	ubfx	r0, r0, #8, #5
    26e4:	2201      	movs	r2, #1
    26e6:	4082      	lsls	r2, r0
    26e8:	4316      	orrs	r6, r2
    26ea:	e7e7      	b.n	26bc <gpio_nrf5_port_isr+0x12>
	enabled_int = int_status & data->pin_callback_enables;
    26ec:	68a3      	ldr	r3, [r4, #8]
    26ee:	401e      	ands	r6, r3
	irq_disable(NRF5_IRQ_GPIOTE_IRQn);
    26f0:	2006      	movs	r0, #6
    26f2:	f024 fbcb 	bl	26e8c <_arch_irq_disable>
	return list->head;
    26f6:	6824      	ldr	r4, [r4, #0]
    26f8:	e005      	b.n	2706 <gpio_nrf5_port_isr+0x5c>
					struct device *port,
					u32_t pins)
{
	struct gpio_callback *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(list, cb, node) {
    26fa:	4622      	mov	r2, r4
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    26fc:	b16c      	cbz	r4, 271a <gpio_nrf5_port_isr+0x70>
	return node->next;
    26fe:	6823      	ldr	r3, [r4, #0]
    2700:	b16b      	cbz	r3, 271e <gpio_nrf5_port_isr+0x74>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    2702:	b172      	cbz	r2, 2722 <gpio_nrf5_port_isr+0x78>
	return node->next;
    2704:	6824      	ldr	r4, [r4, #0]
    2706:	b174      	cbz	r4, 2726 <gpio_nrf5_port_isr+0x7c>
		if (cb->pin_mask & pins) {
    2708:	68a3      	ldr	r3, [r4, #8]
    270a:	421e      	tst	r6, r3
    270c:	d0f5      	beq.n	26fa <gpio_nrf5_port_isr+0x50>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, pins);
    270e:	6863      	ldr	r3, [r4, #4]
    2710:	4632      	mov	r2, r6
    2712:	4621      	mov	r1, r4
    2714:	4628      	mov	r0, r5
    2716:	4798      	blx	r3
    2718:	e7ef      	b.n	26fa <gpio_nrf5_port_isr+0x50>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    271a:	4623      	mov	r3, r4
    271c:	e7f0      	b.n	2700 <gpio_nrf5_port_isr+0x56>
	SYS_SLIST_FOR_EACH_CONTAINER(list, cb, node) {
    271e:	2400      	movs	r4, #0
    2720:	e7f1      	b.n	2706 <gpio_nrf5_port_isr+0x5c>
    2722:	2400      	movs	r4, #0
    2724:	e7ef      	b.n	2706 <gpio_nrf5_port_isr+0x5c>
	irq_enable(NRF5_IRQ_GPIOTE_IRQn);
    2726:	2006      	movs	r0, #6
    2728:	f024 fba2 	bl	26e70 <_arch_irq_enable>
    272c:	bd70      	pop	{r4, r5, r6, pc}
	...

00002730 <gpio_nrf5_config>:
{
    2730:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    2734:	6804      	ldr	r4, [r0, #0]
    2736:	68a5      	ldr	r5, [r4, #8]
    2738:	68ae      	ldr	r6, [r5, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    273a:	6887      	ldr	r7, [r0, #8]
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
    273c:	682d      	ldr	r5, [r5, #0]
	if (access_op == GPIO_ACCESS_BY_PIN) {
    273e:	2900      	cmp	r1, #0
    2740:	d17f      	bne.n	2842 <gpio_nrf5_config+0x112>
    2742:	4688      	mov	r8, r1
		int ds_low = (flags & GPIO_DS_LOW_MASK) >> GPIO_DS_LOW_POS;
    2744:	f3c3 3e01 	ubfx	lr, r3, #12, #2
		int ds_high = (flags & GPIO_DS_HIGH_MASK) >> GPIO_DS_HIGH_POS;
    2748:	f3c3 3181 	ubfx	r1, r3, #14, #2
		if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
    274c:	f403 7440 	and.w	r4, r3, #768	; 0x300
    2750:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
    2754:	d025      	beq.n	27a2 <gpio_nrf5_config+0x72>
		} else if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_DOWN) {
    2756:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
    275a:	d024      	beq.n	27a6 <gpio_nrf5_config+0x76>
		u8_t pull = GPIO_PULL_DISABLE;
    275c:	2400      	movs	r4, #0
		if ((flags & GPIO_DIR_MASK) == GPIO_DIR_OUT) {
    275e:	f013 0f01 	tst.w	r3, #1
    2762:	d030      	beq.n	27c6 <gpio_nrf5_config+0x96>
			if (pull == GPIO_PULL_UP) {
    2764:	2c0c      	cmp	r4, #12
    2766:	d020      	beq.n	27aa <gpio_nrf5_config+0x7a>
			} else if (pull == GPIO_PULL_DOWN) {
    2768:	2c04      	cmp	r4, #4
    276a:	d025      	beq.n	27b8 <gpio_nrf5_config+0x88>
					      drive_strength[ds_low][ds_high] |
    276c:	eb01 0e8e 	add.w	lr, r1, lr, lsl #2
    2770:	4938      	ldr	r1, [pc, #224]	; (2854 <gpio_nrf5_config+0x124>)
    2772:	f851 102e 	ldr.w	r1, [r1, lr, lsl #2]
    2776:	4321      	orrs	r1, r4
					      GPIO_INPUT_DISCONNECT |
    2778:	f041 0103 	orr.w	r1, r1, #3
			gpio->PIN_CNF[pin] = (GPIO_SENSE_DISABLE |
    277c:	f502 74e0 	add.w	r4, r2, #448	; 0x1c0
    2780:	f845 1024 	str.w	r1, [r5, r4, lsl #2]
	if (flags & GPIO_INT) {
    2784:	f013 0102 	ands.w	r1, r3, #2
    2788:	d04a      	beq.n	2820 <gpio_nrf5_config+0xf0>
		if (flags & GPIO_INT_EDGE) {
    278a:	f013 0f20 	tst.w	r3, #32
    278e:	d05b      	beq.n	2848 <gpio_nrf5_config+0x118>
			if (flags & GPIO_INT_DOUBLE_EDGE) {
    2790:	f013 0f40 	tst.w	r3, #64	; 0x40
    2794:	d123      	bne.n	27de <gpio_nrf5_config+0xae>
			} else if (flags & GPIO_INT_ACTIVE_HIGH) {
    2796:	f013 0f04 	tst.w	r3, #4
    279a:	d044      	beq.n	2826 <gpio_nrf5_config+0xf6>
				config |= GPIOTE_CFG_POL_L2H;
    279c:	f44f 3980 	mov.w	r9, #65536	; 0x10000
    27a0:	e01f      	b.n	27e2 <gpio_nrf5_config+0xb2>
			pull = GPIO_PULL_UP;
    27a2:	240c      	movs	r4, #12
    27a4:	e7db      	b.n	275e <gpio_nrf5_config+0x2e>
			pull = GPIO_PULL_DOWN;
    27a6:	2404      	movs	r4, #4
    27a8:	e7d9      	b.n	275e <gpio_nrf5_config+0x2e>
				gpio->OUTSET = BIT(pin);
    27aa:	f04f 0c01 	mov.w	ip, #1
    27ae:	fa0c fc02 	lsl.w	ip, ip, r2
    27b2:	f8c5 c508 	str.w	ip, [r5, #1288]	; 0x508
    27b6:	e7d9      	b.n	276c <gpio_nrf5_config+0x3c>
				gpio->OUTCLR = BIT(pin);
    27b8:	f04f 0c01 	mov.w	ip, #1
    27bc:	fa0c fc02 	lsl.w	ip, ip, r2
    27c0:	f8c5 c50c 	str.w	ip, [r5, #1292]	; 0x50c
    27c4:	e7d2      	b.n	276c <gpio_nrf5_config+0x3c>
					      drive_strength[ds_low][ds_high] |
    27c6:	eb01 018e 	add.w	r1, r1, lr, lsl #2
    27ca:	f8df e088 	ldr.w	lr, [pc, #136]	; 2854 <gpio_nrf5_config+0x124>
    27ce:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
					      GPIO_INPUT_CONNECT |
    27d2:	4321      	orrs	r1, r4
			gpio->PIN_CNF[pin] = (GPIO_SENSE_DISABLE |
    27d4:	f502 74e0 	add.w	r4, r2, #448	; 0x1c0
    27d8:	f845 1024 	str.w	r1, [r5, r4, lsl #2]
    27dc:	e7d2      	b.n	2784 <gpio_nrf5_config+0x54>
				config |= GPIOTE_CFG_POL_TOGG;
    27de:	f44f 3940 	mov.w	r9, #196608	; 0x30000
    27e2:	4614      	mov	r4, r2
    27e4:	4605      	mov	r5, r0
		if (__builtin_popcount(data->gpiote_chan_mask) ==
    27e6:	68f8      	ldr	r0, [r7, #12]
    27e8:	f7fe fca0 	bl	112c <__popcountsi2>
    27ec:	2808      	cmp	r0, #8
    27ee:	d02e      	beq.n	284e <gpio_nrf5_config+0x11e>
		int i = gpiote_find_channel(dev, pin);
    27f0:	4621      	mov	r1, r4
    27f2:	4628      	mov	r0, r5
    27f4:	f7ff fea6 	bl	2544 <gpiote_find_channel>
		if (i < 0) {
    27f8:	2800      	cmp	r0, #0
    27fa:	db17      	blt.n	282c <gpio_nrf5_config+0xfc>
		data->gpiote_chan_mask |= BIT(i);
    27fc:	2301      	movs	r3, #1
    27fe:	fa03 f200 	lsl.w	r2, r3, r0
    2802:	68fb      	ldr	r3, [r7, #12]
    2804:	4313      	orrs	r3, r2
    2806:	60fb      	str	r3, [r7, #12]
		config |= GPIOTE_CFG_EVT;
    2808:	f049 0901 	orr.w	r9, r9, #1
		config |= GPIOTE_CFG_PIN(pin);
    280c:	0224      	lsls	r4, r4, #8
    280e:	f404 54f8 	and.w	r4, r4, #7936	; 0x1f00
    2812:	ea49 0404 	orr.w	r4, r9, r4
		gpiote->CONFIG[i] = config;
    2816:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    281a:	f846 4020 	str.w	r4, [r6, r0, lsl #2]
	return 0;
    281e:	4641      	mov	r1, r8
}
    2820:	4608      	mov	r0, r1
    2822:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				config |= GPIOTE_CFG_POL_H2L;
    2826:	f44f 3900 	mov.w	r9, #131072	; 0x20000
    282a:	e7da      	b.n	27e2 <gpio_nrf5_config+0xb2>
			i = __builtin_ffs(~(data->gpiote_chan_mask)) - 1;
    282c:	68fb      	ldr	r3, [r7, #12]
    282e:	43db      	mvns	r3, r3
    2830:	fa93 f0a3 	rbit	r0, r3
    2834:	fab0 f080 	clz	r0, r0
    2838:	2b00      	cmp	r3, #0
    283a:	d1df      	bne.n	27fc <gpio_nrf5_config+0xcc>
    283c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2840:	e7dc      	b.n	27fc <gpio_nrf5_config+0xcc>
		return -ENOTSUP;
    2842:	f06f 0185 	mvn.w	r1, #133	; 0x85
    2846:	e7eb      	b.n	2820 <gpio_nrf5_config+0xf0>
			return -ENOTSUP;
    2848:	f06f 0185 	mvn.w	r1, #133	; 0x85
    284c:	e7e8      	b.n	2820 <gpio_nrf5_config+0xf0>
			return -EIO;
    284e:	f06f 0104 	mvn.w	r1, #4
    2852:	e7e5      	b.n	2820 <gpio_nrf5_config+0xf0>
    2854:	0002f110 	.word	0x0002f110

00002858 <_m16src_stop>:
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M)
	unsigned int tmp;

	__asm__ volatile(
    2858:	f04f 0320 	mov.w	r3, #32
    285c:	f3ef 8111 	mrs	r1, BASEPRI
    2860:	f383 8811 	msr	BASEPRI, r3
	/* Test for started resource, if so, decrement reference and acquire
	 * resource guard.
	 */
	imask = irq_lock();

	if (!m16src_ref) {
    2864:	4b12      	ldr	r3, [pc, #72]	; (28b0 <_m16src_stop+0x58>)
    2866:	781a      	ldrb	r2, [r3, #0]
    2868:	b192      	cbz	r2, 2890 <_m16src_stop+0x38>
		irq_unlock(imask);
		return -EALREADY;
	}

	if (--m16src_ref) {
    286a:	1e53      	subs	r3, r2, #1
    286c:	b2db      	uxtb	r3, r3
    286e:	4810      	ldr	r0, [pc, #64]	; (28b0 <_m16src_stop+0x58>)
    2870:	7003      	strb	r3, [r0, #0]
    2872:	b993      	cbnz	r3, 289a <_m16src_stop+0x42>
		irq_unlock(imask);
		return 0;
	}

	if (m16src_grd) {
    2874:	4b0f      	ldr	r3, [pc, #60]	; (28b4 <_m16src_stop+0x5c>)
    2876:	781b      	ldrb	r3, [r3, #0]
    2878:	b99b      	cbnz	r3, 28a2 <_m16src_stop+0x4a>
		m16src_ref++;
		irq_unlock(imask);
		return -EAGAIN;
	}

	m16src_grd = 1;
    287a:	4b0e      	ldr	r3, [pc, #56]	; (28b4 <_m16src_stop+0x5c>)
    287c:	2201      	movs	r2, #1
    287e:	701a      	strb	r2, [r3, #0]
	if (key) {
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
#elif defined(CONFIG_ARMV7_M)
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    2880:	f381 8811 	msr	BASEPRI, r1

	irq_unlock(imask);

	/* re-entrancy and mult-context safe, and reference count is zero, */

	NRF_CLOCK->TASKS_HFCLKSTOP = 1;
    2884:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    2888:	604a      	str	r2, [r1, #4]

	/* release resource guard */
	m16src_grd = 0;
    288a:	2000      	movs	r0, #0
    288c:	7018      	strb	r0, [r3, #0]

	return 0;
}
    288e:	4770      	bx	lr
    2890:	f381 8811 	msr	BASEPRI, r1
		return -EALREADY;
    2894:	f06f 0077 	mvn.w	r0, #119	; 0x77
    2898:	4770      	bx	lr
    289a:	f381 8811 	msr	BASEPRI, r1
		return 0;
    289e:	2000      	movs	r0, #0
    28a0:	4770      	bx	lr
		m16src_ref++;
    28a2:	4b03      	ldr	r3, [pc, #12]	; (28b0 <_m16src_stop+0x58>)
    28a4:	701a      	strb	r2, [r3, #0]
    28a6:	f381 8811 	msr	BASEPRI, r1
		return -EAGAIN;
    28aa:	f06f 000a 	mvn.w	r0, #10
    28ae:	4770      	bx	lr
    28b0:	2000026a 	.word	0x2000026a
    28b4:	20000269 	.word	0x20000269

000028b8 <_clock_control_init>:
		}
	}
}

static int _clock_control_init(struct device *dev)
{
    28b8:	b508      	push	{r3, lr}
	 * for 16 MHz clock. The vector is also shared for other power related
	 * features. Hence, design a better way to init IRQISR when adding
	 * power peripheral driver and/or new SoC series.
	 * NOTE: Currently the operations here are idempotent.
	 */
	IRQ_CONNECT(NRF5_IRQ_POWER_CLOCK_IRQn,
    28ba:	2200      	movs	r2, #0
    28bc:	2101      	movs	r1, #1
    28be:	4610      	mov	r0, r2
    28c0:	f024 fb00 	bl	26ec4 <_irq_priority_set>
		    CONFIG_CLOCK_CONTROL_NRF5_IRQ_PRIORITY,
		    _power_clock_isr, 0, 0);

	irq_enable(POWER_CLOCK_IRQn);
    28c4:	2000      	movs	r0, #0
    28c6:	f024 fad3 	bl	26e70 <_arch_irq_enable>

	return 0;
}
    28ca:	2000      	movs	r0, #0
    28cc:	bd08      	pop	{r3, pc}
	...

000028d0 <_m16src_start>:
{
    28d0:	b510      	push	{r4, lr}
	__asm__ volatile(
    28d2:	f04f 0320 	mov.w	r3, #32
    28d6:	f3ef 8411 	mrs	r4, BASEPRI
    28da:	f383 8811 	msr	BASEPRI, r3
	if (m16src_ref++) {
    28de:	4a2c      	ldr	r2, [pc, #176]	; (2990 <_m16src_start+0xc0>)
    28e0:	7813      	ldrb	r3, [r2, #0]
    28e2:	1c58      	adds	r0, r3, #1
    28e4:	7010      	strb	r0, [r2, #0]
    28e6:	b153      	cbz	r3, 28fe <_m16src_start+0x2e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    28e8:	f384 8811 	msr	BASEPRI, r4
	if (NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) {
    28ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    28f0:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    28f4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    28f8:	d047      	beq.n	298a <_m16src_start+0xba>
		return 0;
    28fa:	2000      	movs	r0, #0
    28fc:	bd10      	pop	{r4, pc}
	if (m16src_grd) {
    28fe:	4a25      	ldr	r2, [pc, #148]	; (2994 <_m16src_start+0xc4>)
    2900:	7812      	ldrb	r2, [r2, #0]
    2902:	b9a2      	cbnz	r2, 292e <_m16src_start+0x5e>
	m16src_grd = 1;
    2904:	2201      	movs	r2, #1
    2906:	4b23      	ldr	r3, [pc, #140]	; (2994 <_m16src_start+0xc4>)
    2908:	701a      	strb	r2, [r3, #0]
    290a:	f384 8811 	msr	BASEPRI, r4
	if (blocking) {
    290e:	b3a1      	cbz	r1, 297a <_m16src_start+0xaa>
		irq_disable(POWER_CLOCK_IRQn);
    2910:	2000      	movs	r0, #0
    2912:	f024 fabb 	bl	26e8c <_arch_irq_disable>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    2916:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    291a:	2200      	movs	r2, #0
    291c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		intenset = NRF_CLOCK->INTENSET;
    2920:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    2924:	2201      	movs	r2, #1
    2926:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		NRF_CLOCK->TASKS_HFCLKSTART = 1;
    292a:	601a      	str	r2, [r3, #0]
		while (NRF_CLOCK->EVENTS_HFCLKSTARTED == 0) {
    292c:	e009      	b.n	2942 <_m16src_start+0x72>
		m16src_ref--;
    292e:	4a18      	ldr	r2, [pc, #96]	; (2990 <_m16src_start+0xc0>)
    2930:	7013      	strb	r3, [r2, #0]
    2932:	f384 8811 	msr	BASEPRI, r4
		return -EAGAIN;
    2936:	f06f 000a 	mvn.w	r0, #10
    293a:	bd10      	pop	{r4, pc}
  \details Wait For Event is a hint instruction that permits the processor to enter
    a low-power state until one of a number of events occurs.
 */
__attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
{
  __ASM volatile ("wfe");
    293c:	bf20      	wfe
  \brief   Send Event
  \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 */
__attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
{
  __ASM volatile ("sev");
    293e:	bf40      	sev
  __ASM volatile ("wfe");
    2940:	bf20      	wfe
		while (NRF_CLOCK->EVENTS_HFCLKSTARTED == 0) {
    2942:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2946:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    294a:	2b00      	cmp	r3, #0
    294c:	d0f6      	beq.n	293c <_m16src_start+0x6c>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    294e:	2200      	movs	r2, #0
    2950:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2954:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		if (!(intenset & CLOCK_INTENSET_HFCLKSTARTED_Msk)) {
    2958:	f011 0f01 	tst.w	r1, #1
    295c:	d102      	bne.n	2964 <_m16src_start+0x94>
			NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    295e:	2201      	movs	r2, #1
    2960:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    2964:	2201      	movs	r2, #1
    2966:	4b0c      	ldr	r3, [pc, #48]	; (2998 <_m16src_start+0xc8>)
    2968:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
		irq_enable(POWER_CLOCK_IRQn);
    296c:	2000      	movs	r0, #0
    296e:	f024 fa7f 	bl	26e70 <_arch_irq_enable>
	m16src_grd = 0;
    2972:	2200      	movs	r2, #0
    2974:	4b07      	ldr	r3, [pc, #28]	; (2994 <_m16src_start+0xc4>)
    2976:	701a      	strb	r2, [r3, #0]
    2978:	e7b8      	b.n	28ec <_m16src_start+0x1c>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    297a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    297e:	2200      	movs	r2, #0
    2980:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		NRF_CLOCK->TASKS_HFCLKSTART = 1;
    2984:	2201      	movs	r2, #1
    2986:	601a      	str	r2, [r3, #0]
    2988:	e7f3      	b.n	2972 <_m16src_start+0xa2>
		return -EINPROGRESS;
    298a:	f06f 0076 	mvn.w	r0, #118	; 0x76
}
    298e:	bd10      	pop	{r4, pc}
    2990:	2000026a 	.word	0x2000026a
    2994:	20000269 	.word	0x20000269
    2998:	e000e100 	.word	0xe000e100

0000299c <_power_clock_isr>:
{
    299c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    29a0:	4680      	mov	r8, r0
	pof = (NRF_POWER->EVENTS_POFWARN != 0);
    29a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    29a6:	f8d3 5108 	ldr.w	r5, [r3, #264]	; 0x108
	    ((NRF_CLOCK->INTENSET & CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
    29aa:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
    29ae:	f002 0201 	and.w	r2, r2, #1
	hf_stat = ((NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) != 0);
    29b2:	f8d3 140c 	ldr.w	r1, [r3, #1036]	; 0x40c
    29b6:	f401 3180 	and.w	r1, r1, #65536	; 0x10000
	hf = (NRF_CLOCK->EVENTS_HFCLKSTARTED != 0);
    29ba:	f8d3 7100 	ldr.w	r7, [r3, #256]	; 0x100
	lf = (NRF_CLOCK->EVENTS_LFCLKSTARTED != 0);
    29be:	f8d3 6104 	ldr.w	r6, [r3, #260]	; 0x104
	done = (NRF_CLOCK->EVENTS_DONE != 0);
    29c2:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
	ctto = (NRF_CLOCK->EVENTS_CTTO != 0);
    29c6:	f8d3 4110 	ldr.w	r4, [r3, #272]	; 0x110
	if (pof) {
    29ca:	b11d      	cbz	r5, 29d4 <_power_clock_isr+0x38>
		NRF_POWER->EVENTS_POFWARN = 0;
    29cc:	f04f 0e00 	mov.w	lr, #0
    29d0:	f8c3 e108 	str.w	lr, [r3, #264]	; 0x108
	if (hf) {
    29d4:	b127      	cbz	r7, 29e0 <_power_clock_isr+0x44>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    29d6:	2700      	movs	r7, #0
    29d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    29dc:	f8c3 7100 	str.w	r7, [r3, #256]	; 0x100
	if (hf_intenset && hf_stat) {
    29e0:	b132      	cbz	r2, 29f0 <_power_clock_isr+0x54>
    29e2:	b129      	cbz	r1, 29f0 <_power_clock_isr+0x54>
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    29e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    29e8:	2201      	movs	r2, #1
    29ea:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
		NRF_CLOCK->TASKS_CAL = 1;
    29ee:	611a      	str	r2, [r3, #16]
	if (lf) {
    29f0:	b126      	cbz	r6, 29fc <_power_clock_isr+0x60>
		NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    29f2:	2200      	movs	r2, #0
    29f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    29f8:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	if (done) {
    29fc:	b910      	cbnz	r0, 2a04 <_power_clock_isr+0x68>
	if (ctto) {
    29fe:	b964      	cbnz	r4, 2a1a <_power_clock_isr+0x7e>
    2a00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		NRF_CLOCK->EVENTS_DONE = 0;
    2a04:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
    2a08:	2100      	movs	r1, #0
    2a0a:	f8c6 110c 	str.w	r1, [r6, #268]	; 0x10c
		err = _m16src_stop(dev, NULL);
    2a0e:	4640      	mov	r0, r8
    2a10:	f7ff ff22 	bl	2858 <_m16src_stop>
		NRF_CLOCK->TASKS_CTSTART = 1;
    2a14:	2301      	movs	r3, #1
    2a16:	6173      	str	r3, [r6, #20]
    2a18:	e7f1      	b.n	29fe <_power_clock_isr+0x62>
		NRF_CLOCK->EVENTS_CTTO = 0;
    2a1a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2a1e:	2100      	movs	r1, #0
    2a20:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    2a24:	2201      	movs	r2, #1
    2a26:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    2a2a:	4640      	mov	r0, r8
    2a2c:	f7ff ff50 	bl	28d0 <_m16src_start>
		if (!err) {
    2a30:	2800      	cmp	r0, #0
    2a32:	d1e5      	bne.n	2a00 <_power_clock_isr+0x64>
  NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2a34:	2201      	movs	r2, #1
    2a36:	4b02      	ldr	r3, [pc, #8]	; (2a40 <_power_clock_isr+0xa4>)
    2a38:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
    2a3c:	e7e0      	b.n	2a00 <_power_clock_isr+0x64>
    2a3e:	bf00      	nop
    2a40:	e000e100 	.word	0xe000e100

00002a44 <_k32src_start>:
	__asm__ volatile(
    2a44:	f04f 0220 	mov.w	r2, #32
    2a48:	f3ef 8311 	mrs	r3, BASEPRI
    2a4c:	f382 8811 	msr	BASEPRI, r2
	if (k32src_initialized) {
    2a50:	4a38      	ldr	r2, [pc, #224]	; (2b34 <_k32src_start+0xf0>)
    2a52:	7812      	ldrb	r2, [r2, #0]
    2a54:	b152      	cbz	r2, 2a6c <_k32src_start+0x28>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    2a56:	f383 8811 	msr	BASEPRI, r3
	if (NRF_CLOCK->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk) {
    2a5a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2a5e:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
    2a62:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    2a66:	d062      	beq.n	2b2e <_k32src_start+0xea>
		return 0;
    2a68:	2000      	movs	r0, #0
    2a6a:	4770      	bx	lr
{
    2a6c:	b570      	push	{r4, r5, r6, lr}
    2a6e:	460d      	mov	r5, r1
    2a70:	4604      	mov	r4, r0
	k32src_initialized = 1;
    2a72:	2601      	movs	r6, #1
    2a74:	4a2f      	ldr	r2, [pc, #188]	; (2b34 <_k32src_start+0xf0>)
    2a76:	7016      	strb	r6, [r2, #0]
    2a78:	f383 8811 	msr	BASEPRI, r3
	irq_disable(POWER_CLOCK_IRQn);
    2a7c:	2000      	movs	r0, #0
    2a7e:	f024 fa05 	bl	26e8c <_arch_irq_disable>
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    2a82:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2a86:	2200      	movs	r2, #0
    2a88:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	intenset = NRF_CLOCK->INTENSET;
    2a8c:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	NRF_CLOCK->INTENSET = CLOCK_INTENSET_LFCLKSTARTED_Msk;
    2a90:	2102      	movs	r1, #2
    2a92:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
	NRF_CLOCK->LFCLKSRC = lf_clk_src;
    2a96:	f8c3 5518 	str.w	r5, [r3, #1304]	; 0x518
	NRF_CLOCK->TASKS_LFCLKSTART = 1;
    2a9a:	609e      	str	r6, [r3, #8]
	while (NRF_CLOCK->EVENTS_LFCLKSTARTED == 0) {
    2a9c:	e002      	b.n	2aa4 <_k32src_start+0x60>
    2a9e:	bf20      	wfe
  __ASM volatile ("sev");
    2aa0:	bf40      	sev
  __ASM volatile ("wfe");
    2aa2:	bf20      	wfe
    2aa4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2aa8:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    2aac:	2b00      	cmp	r3, #0
    2aae:	d0f6      	beq.n	2a9e <_k32src_start+0x5a>
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    2ab0:	2100      	movs	r1, #0
    2ab2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2ab6:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	if (!(intenset & CLOCK_INTENSET_LFCLKSTARTED_Msk)) {
    2aba:	f012 0f02 	tst.w	r2, #2
    2abe:	d102      	bne.n	2ac6 <_k32src_start+0x82>
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_LFCLKSTARTED_Msk;
    2ac0:	2202      	movs	r2, #2
    2ac2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2ac6:	2201      	movs	r2, #1
    2ac8:	4b1b      	ldr	r3, [pc, #108]	; (2b38 <_k32src_start+0xf4>)
    2aca:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	irq_enable(POWER_CLOCK_IRQn);
    2ace:	2000      	movs	r0, #0
    2ad0:	f024 f9ce 	bl	26e70 <_arch_irq_enable>
	NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_DONE_Msk | CLOCK_INTENCLR_CTTO_Msk;
    2ad4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2ad8:	2218      	movs	r2, #24
    2ada:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	NRF_CLOCK->EVENTS_DONE = 0;
    2ade:	2200      	movs	r2, #0
    2ae0:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_CLOCK->EVENTS_CTTO = 0;
    2ae4:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	if ((lf_clk_src & CLOCK_LFCLKSRC_SRC_Msk) == CLOCK_LFCLKSRC_SRC_RC) {
    2ae8:	f015 0f03 	tst.w	r5, #3
    2aec:	d008      	beq.n	2b00 <_k32src_start+0xbc>
	if (NRF_CLOCK->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk) {
    2aee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2af2:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
    2af6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    2afa:	d015      	beq.n	2b28 <_k32src_start+0xe4>
		return 0;
    2afc:	2000      	movs	r0, #0
    2afe:	bd70      	pop	{r4, r5, r6, pc}
		NRF_CLOCK->CTIV = 16;	/* 4s in 0.25s units */
    2b00:	2210      	movs	r2, #16
    2b02:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
		NRF_CLOCK->INTENSET =
    2b06:	2218      	movs	r2, #24
    2b08:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    2b0c:	2201      	movs	r2, #1
    2b0e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    2b12:	2100      	movs	r1, #0
    2b14:	4620      	mov	r0, r4
    2b16:	f7ff fedb 	bl	28d0 <_m16src_start>
		if (!err) {
    2b1a:	2800      	cmp	r0, #0
    2b1c:	d1e7      	bne.n	2aee <_k32src_start+0xaa>
  NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2b1e:	2201      	movs	r2, #1
    2b20:	4b05      	ldr	r3, [pc, #20]	; (2b38 <_k32src_start+0xf4>)
    2b22:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    2b26:	e7e2      	b.n	2aee <_k32src_start+0xaa>
		return -EINPROGRESS;
    2b28:	f06f 0076 	mvn.w	r0, #118	; 0x76
}
    2b2c:	bd70      	pop	{r4, r5, r6, pc}
		return -EINPROGRESS;
    2b2e:	f06f 0076 	mvn.w	r0, #118	; 0x76
    2b32:	4770      	bx	lr
    2b34:	20000268 	.word	0x20000268
    2b38:	e000e100 	.word	0xe000e100

00002b3c <_nop_char_out>:
{
	ARG_UNUSED(c);

	/* do nothing */
	return 0;
}
    2b3c:	2000      	movs	r0, #0
    2b3e:	4770      	bx	lr

00002b40 <char_out>:
struct out_context {
	int count;
};

static int char_out(int c, void *ctx_p)
{
    2b40:	b508      	push	{r3, lr}
	struct out_context *ctx = ctx_p;

	ctx->count++;
    2b42:	680b      	ldr	r3, [r1, #0]
    2b44:	3301      	adds	r3, #1
    2b46:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    2b48:	4b01      	ldr	r3, [pc, #4]	; (2b50 <char_out+0x10>)
    2b4a:	681b      	ldr	r3, [r3, #0]
    2b4c:	4798      	blx	r3
}
    2b4e:	bd08      	pop	{r3, pc}
    2b50:	2000b800 	.word	0x2000b800

00002b54 <_printk_hex_ulong>:
 * @return N/A
 */
static void _printk_hex_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
    2b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2b58:	b083      	sub	sp, #12
    2b5a:	4606      	mov	r6, r0
    2b5c:	9101      	str	r1, [sp, #4]
    2b5e:	4691      	mov	r9, r2
    2b60:	461f      	mov	r7, r3
	int size = sizeof(num) * 2;
	int found_largest_digit = 0;
	int remaining = 8; /* 8 digits max */
	int digits = 0;
    2b62:	2400      	movs	r4, #0
	int remaining = 8; /* 8 digits max */
    2b64:	f04f 0a08 	mov.w	sl, #8
	int found_largest_digit = 0;
    2b68:	46a0      	mov	r8, r4
	int size = sizeof(num) * 2;
    2b6a:	4653      	mov	r3, sl

	for (; size; size--) {
    2b6c:	e009      	b.n	2b82 <_printk_hex_ulong+0x2e>
		char nibble = (num >> ((size - 1) << 2) & 0xf);

		if (nibble || found_largest_digit || size == 1) {
			found_largest_digit = 1;
			nibble += nibble > 9 ? 87 : 48;
    2b6e:	2809      	cmp	r0, #9
    2b70:	d91f      	bls.n	2bb2 <_printk_hex_ulong+0x5e>
    2b72:	2357      	movs	r3, #87	; 0x57
			out((int)nibble, ctx);
    2b74:	9901      	ldr	r1, [sp, #4]
    2b76:	4418      	add	r0, r3
    2b78:	47b0      	blx	r6
			digits++;
    2b7a:	3401      	adds	r4, #1
			found_largest_digit = 1;
    2b7c:	f04f 0801 	mov.w	r8, #1
			continue;
		}

		if (remaining-- <= min_width) {
    2b80:	462b      	mov	r3, r5
	for (; size; size--) {
    2b82:	b323      	cbz	r3, 2bce <_printk_hex_ulong+0x7a>
		char nibble = (num >> ((size - 1) << 2) & 0xf);
    2b84:	1e5d      	subs	r5, r3, #1
    2b86:	00a8      	lsls	r0, r5, #2
    2b88:	fa29 f000 	lsr.w	r0, r9, r0
		if (nibble || found_largest_digit || size == 1) {
    2b8c:	f010 000f 	ands.w	r0, r0, #15
    2b90:	d1ed      	bne.n	2b6e <_printk_hex_ulong+0x1a>
    2b92:	f1b8 0f00 	cmp.w	r8, #0
    2b96:	d1ea      	bne.n	2b6e <_printk_hex_ulong+0x1a>
    2b98:	2b01      	cmp	r3, #1
    2b9a:	d0e8      	beq.n	2b6e <_printk_hex_ulong+0x1a>
		if (remaining-- <= min_width) {
    2b9c:	f10a 3bff 	add.w	fp, sl, #4294967295	; 0xffffffff
    2ba0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2ba2:	459a      	cmp	sl, r3
    2ba4:	dc11      	bgt.n	2bca <_printk_hex_ulong+0x76>
			if (padding == PAD_ZERO_BEFORE) {
    2ba6:	2f01      	cmp	r7, #1
    2ba8:	d005      	beq.n	2bb6 <_printk_hex_ulong+0x62>
				out('0', ctx);
			} else if (padding == PAD_SPACE_BEFORE) {
    2baa:	2f02      	cmp	r7, #2
    2bac:	d008      	beq.n	2bc0 <_printk_hex_ulong+0x6c>
		if (remaining-- <= min_width) {
    2bae:	46da      	mov	sl, fp
    2bb0:	e7e6      	b.n	2b80 <_printk_hex_ulong+0x2c>
			nibble += nibble > 9 ? 87 : 48;
    2bb2:	2330      	movs	r3, #48	; 0x30
    2bb4:	e7de      	b.n	2b74 <_printk_hex_ulong+0x20>
				out('0', ctx);
    2bb6:	9901      	ldr	r1, [sp, #4]
    2bb8:	2030      	movs	r0, #48	; 0x30
    2bba:	47b0      	blx	r6
		if (remaining-- <= min_width) {
    2bbc:	46da      	mov	sl, fp
    2bbe:	e7df      	b.n	2b80 <_printk_hex_ulong+0x2c>
				out(' ', ctx);
    2bc0:	9901      	ldr	r1, [sp, #4]
    2bc2:	2020      	movs	r0, #32
    2bc4:	47b0      	blx	r6
		if (remaining-- <= min_width) {
    2bc6:	46da      	mov	sl, fp
    2bc8:	e7da      	b.n	2b80 <_printk_hex_ulong+0x2c>
    2bca:	46da      	mov	sl, fp
    2bcc:	e7d8      	b.n	2b80 <_printk_hex_ulong+0x2c>
			}
		}
	}

	if (padding == PAD_SPACE_AFTER) {
    2bce:	2f03      	cmp	r7, #3
    2bd0:	d002      	beq.n	2bd8 <_printk_hex_ulong+0x84>
		remaining = min_width * 2 - digits;
		while (remaining-- > 0) {
			out(' ', ctx);
		}
	}
}
    2bd2:	b003      	add	sp, #12
    2bd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		remaining = min_width * 2 - digits;
    2bd8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2bda:	ebc4 0443 	rsb	r4, r4, r3, lsl #1
		while (remaining-- > 0) {
    2bde:	1e65      	subs	r5, r4, #1
    2be0:	2c00      	cmp	r4, #0
    2be2:	ddf6      	ble.n	2bd2 <_printk_hex_ulong+0x7e>
			out(' ', ctx);
    2be4:	9901      	ldr	r1, [sp, #4]
    2be6:	2020      	movs	r0, #32
    2be8:	47b0      	blx	r6
		while (remaining-- > 0) {
    2bea:	462c      	mov	r4, r5
    2bec:	e7f7      	b.n	2bde <_printk_hex_ulong+0x8a>
	...

00002bf0 <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
    2bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2bf4:	b083      	sub	sp, #12
    2bf6:	4682      	mov	sl, r0
    2bf8:	9101      	str	r1, [sp, #4]
    2bfa:	469b      	mov	fp, r3
    2bfc:	9f0c      	ldr	r7, [sp, #48]	; 0x30
	int found_largest_digit = 0;
	int remaining = 10; /* 10 digits max */
	int digits = 1;

	/* make sure we don't skip if value is zero */
	if (min_width <= 0) {
    2bfe:	2f00      	cmp	r7, #0
    2c00:	dd07      	ble.n	2c12 <_printk_dec_ulong+0x22>
		min_width = 1;
	}

	while (pos >= 9) {
		if (found_largest_digit || remainder > pos) {
			found_largest_digit = 1;
    2c02:	4615      	mov	r5, r2
    2c04:	f04f 0901 	mov.w	r9, #1
    2c08:	260a      	movs	r6, #10
    2c0a:	f04f 0800 	mov.w	r8, #0
    2c0e:	4c22      	ldr	r4, [pc, #136]	; (2c98 <_printk_dec_ulong+0xa8>)
    2c10:	e015      	b.n	2c3e <_printk_dec_ulong+0x4e>
		min_width = 1;
    2c12:	2701      	movs	r7, #1
    2c14:	e7f5      	b.n	2c02 <_printk_dec_ulong+0x12>
			out((int)((remainder / (pos + 1)) + 48), ctx);
    2c16:	1c60      	adds	r0, r4, #1
    2c18:	fbb5 f0f0 	udiv	r0, r5, r0
    2c1c:	9901      	ldr	r1, [sp, #4]
    2c1e:	3030      	adds	r0, #48	; 0x30
    2c20:	47d0      	blx	sl
			digits++;
    2c22:	f109 0901 	add.w	r9, r9, #1
			found_largest_digit = 1;
    2c26:	f04f 0801 	mov.w	r8, #1
		} else if (remaining <= min_width
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
    2c2a:	3e01      	subs	r6, #1
		remainder %= (pos + 1);
    2c2c:	1c63      	adds	r3, r4, #1
    2c2e:	fbb5 f2f3 	udiv	r2, r5, r3
    2c32:	fb03 5512 	mls	r5, r3, r2, r5
		pos /= 10;
    2c36:	4b19      	ldr	r3, [pc, #100]	; (2c9c <_printk_dec_ulong+0xac>)
    2c38:	fba3 3404 	umull	r3, r4, r3, r4
    2c3c:	08e4      	lsrs	r4, r4, #3
	while (pos >= 9) {
    2c3e:	2c08      	cmp	r4, #8
    2c40:	d914      	bls.n	2c6c <_printk_dec_ulong+0x7c>
		if (found_largest_digit || remainder > pos) {
    2c42:	f1b8 0f00 	cmp.w	r8, #0
    2c46:	d1e6      	bne.n	2c16 <_printk_dec_ulong+0x26>
    2c48:	42ac      	cmp	r4, r5
    2c4a:	d3e4      	bcc.n	2c16 <_printk_dec_ulong+0x26>
		} else if (remaining <= min_width
    2c4c:	42be      	cmp	r6, r7
    2c4e:	dcec      	bgt.n	2c2a <_printk_dec_ulong+0x3a>
				&& padding < PAD_SPACE_AFTER) {
    2c50:	f1bb 0f02 	cmp.w	fp, #2
    2c54:	d8e9      	bhi.n	2c2a <_printk_dec_ulong+0x3a>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    2c56:	f1bb 0f01 	cmp.w	fp, #1
    2c5a:	d005      	beq.n	2c68 <_printk_dec_ulong+0x78>
    2c5c:	2020      	movs	r0, #32
    2c5e:	9901      	ldr	r1, [sp, #4]
    2c60:	47d0      	blx	sl
			digits++;
    2c62:	f109 0901 	add.w	r9, r9, #1
    2c66:	e7e0      	b.n	2c2a <_printk_dec_ulong+0x3a>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    2c68:	2030      	movs	r0, #48	; 0x30
    2c6a:	e7f8      	b.n	2c5e <_printk_dec_ulong+0x6e>
	}
	out((int)(remainder + 48), ctx);
    2c6c:	9901      	ldr	r1, [sp, #4]
    2c6e:	f105 0030 	add.w	r0, r5, #48	; 0x30
    2c72:	47d0      	blx	sl

	if (padding == PAD_SPACE_AFTER) {
    2c74:	f1bb 0f03 	cmp.w	fp, #3
    2c78:	d002      	beq.n	2c80 <_printk_dec_ulong+0x90>
		remaining = min_width - digits;
		while (remaining-- > 0) {
			out(' ', ctx);
		}
	}
}
    2c7a:	b003      	add	sp, #12
    2c7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		remaining = min_width - digits;
    2c80:	eba7 0709 	sub.w	r7, r7, r9
		while (remaining-- > 0) {
    2c84:	e003      	b.n	2c8e <_printk_dec_ulong+0x9e>
			out(' ', ctx);
    2c86:	9901      	ldr	r1, [sp, #4]
    2c88:	2020      	movs	r0, #32
    2c8a:	47d0      	blx	sl
		while (remaining-- > 0) {
    2c8c:	4627      	mov	r7, r4
    2c8e:	1e7c      	subs	r4, r7, #1
    2c90:	2f00      	cmp	r7, #0
    2c92:	dcf8      	bgt.n	2c86 <_printk_dec_ulong+0x96>
    2c94:	e7f1      	b.n	2c7a <_printk_dec_ulong+0x8a>
    2c96:	bf00      	nop
    2c98:	3b9ac9ff 	.word	0x3b9ac9ff
    2c9c:	cccccccd 	.word	0xcccccccd

00002ca0 <str_out>:
	int max;
	int count;
};

static int str_out(int c, struct str_context *ctx)
{
    2ca0:	b410      	push	{r4}
	if (!ctx->str || ctx->count >= ctx->max) {
    2ca2:	680c      	ldr	r4, [r1, #0]
    2ca4:	b154      	cbz	r4, 2cbc <str_out+0x1c>
    2ca6:	688b      	ldr	r3, [r1, #8]
    2ca8:	684a      	ldr	r2, [r1, #4]
    2caa:	4293      	cmp	r3, r2
    2cac:	da06      	bge.n	2cbc <str_out+0x1c>
		ctx->count++;
		return c;
	}

	if (ctx->count == ctx->max - 1) {
    2cae:	3a01      	subs	r2, #1
    2cb0:	4293      	cmp	r3, r2
    2cb2:	d008      	beq.n	2cc6 <str_out+0x26>
		ctx->str[ctx->count++] = '\0';
	} else {
		ctx->str[ctx->count++] = c;
    2cb4:	1c5a      	adds	r2, r3, #1
    2cb6:	608a      	str	r2, [r1, #8]
    2cb8:	54e0      	strb	r0, [r4, r3]
    2cba:	e002      	b.n	2cc2 <str_out+0x22>
		ctx->count++;
    2cbc:	688b      	ldr	r3, [r1, #8]
    2cbe:	3301      	adds	r3, #1
    2cc0:	608b      	str	r3, [r1, #8]
	}

	return c;
}
    2cc2:	bc10      	pop	{r4}
    2cc4:	4770      	bx	lr
		ctx->str[ctx->count++] = '\0';
    2cc6:	1c5a      	adds	r2, r3, #1
    2cc8:	608a      	str	r2, [r1, #8]
    2cca:	2200      	movs	r2, #0
    2ccc:	54e2      	strb	r2, [r4, r3]
    2cce:	e7f8      	b.n	2cc2 <str_out+0x22>

00002cd0 <__printk_hook_install>:
	_char_out = fn;
    2cd0:	4b01      	ldr	r3, [pc, #4]	; (2cd8 <__printk_hook_install+0x8>)
    2cd2:	6018      	str	r0, [r3, #0]
    2cd4:	4770      	bx	lr
    2cd6:	bf00      	nop
    2cd8:	2000b800 	.word	0x2000b800

00002cdc <_vprintk>:
{
    2cdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2ce0:	b084      	sub	sp, #16
    2ce2:	4607      	mov	r7, r0
    2ce4:	460e      	mov	r6, r1
    2ce6:	4614      	mov	r4, r2
    2ce8:	9303      	str	r3, [sp, #12]
	int long_ctr = 0;
    2cea:	f04f 0800 	mov.w	r8, #0
	int min_width = -1;
    2cee:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
    2cf2:	46c1      	mov	r9, r8
	int might_format = 0; /* 1 if encountered a '%' */
    2cf4:	4645      	mov	r5, r8
	while (*fmt) {
    2cf6:	e104      	b.n	2f02 <_vprintk+0x226>
			switch (*fmt) {
    2cf8:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
    2cfc:	2b55      	cmp	r3, #85	; 0x55
    2cfe:	f200 80f1 	bhi.w	2ee4 <_vprintk+0x208>
    2d02:	e8df f013 	tbh	[pc, r3, lsl #1]
    2d06:	00ea      	.short	0x00ea
    2d08:	00ef00ef 	.word	0x00ef00ef
    2d0c:	00ef00ef 	.word	0x00ef00ef
    2d10:	00ef00ef 	.word	0x00ef00ef
    2d14:	010800ef 	.word	0x010800ef
    2d18:	00ef00ef 	.word	0x00ef00ef
    2d1c:	00590056 	.word	0x00590056
    2d20:	00590059 	.word	0x00590059
    2d24:	00590059 	.word	0x00590059
    2d28:	00590059 	.word	0x00590059
    2d2c:	00590059 	.word	0x00590059
    2d30:	00ef00ef 	.word	0x00ef00ef
    2d34:	00ef00ef 	.word	0x00ef00ef
    2d38:	00ef00ef 	.word	0x00ef00ef
    2d3c:	00ef00ef 	.word	0x00ef00ef
    2d40:	00ef00ef 	.word	0x00ef00ef
    2d44:	00ef00ef 	.word	0x00ef00ef
    2d48:	00ef00ef 	.word	0x00ef00ef
    2d4c:	00ef00ef 	.word	0x00ef00ef
    2d50:	00ef00ef 	.word	0x00ef00ef
    2d54:	00ef00ef 	.word	0x00ef00ef
    2d58:	00ef00ef 	.word	0x00ef00ef
    2d5c:	00ef00ef 	.word	0x00ef00ef
    2d60:	00ef00ef 	.word	0x00ef00ef
    2d64:	00ef00ef 	.word	0x00ef00ef
    2d68:	00ef00ef 	.word	0x00ef00ef
    2d6c:	00ef00bc 	.word	0x00ef00bc
    2d70:	00ef00ef 	.word	0x00ef00ef
    2d74:	00ef00ef 	.word	0x00ef00ef
    2d78:	00ef00ef 	.word	0x00ef00ef
    2d7c:	00ef00ef 	.word	0x00ef00ef
    2d80:	00e200ef 	.word	0x00e200ef
    2d84:	00ef0076 	.word	0x00ef0076
    2d88:	00ef00ef 	.word	0x00ef00ef
    2d8c:	007600fd 	.word	0x007600fd
    2d90:	00ef00ef 	.word	0x00ef00ef
    2d94:	00ef0073 	.word	0x00ef0073
    2d98:	00ef00ef 	.word	0x00ef00ef
    2d9c:	00ef00b2 	.word	0x00ef00b2
    2da0:	00d500ef 	.word	0x00d500ef
    2da4:	009900ef 	.word	0x009900ef
    2da8:	00ef00ef 	.word	0x00ef00ef
    2dac:	00ef00bc 	.word	0x00ef00bc
    2db0:	00fd      	.short	0x00fd
				if (min_width < 0 && padding == PAD_NONE) {
    2db2:	f1ba 0f00 	cmp.w	sl, #0
    2db6:	db10      	blt.n	2dda <_vprintk+0xfe>
				if (min_width < 0) {
    2db8:	f1ba 0f00 	cmp.w	sl, #0
    2dbc:	db13      	blt.n	2de6 <_vprintk+0x10a>
					min_width = 10 * min_width + *fmt - '0';
    2dbe:	eb0a 0a8a 	add.w	sl, sl, sl, lsl #2
    2dc2:	ea4f 034a 	mov.w	r3, sl, lsl #1
    2dc6:	4418      	add	r0, r3
    2dc8:	f1a0 0a30 	sub.w	sl, r0, #48	; 0x30
				if (padding == PAD_NONE) {
    2dcc:	f1b9 0f00 	cmp.w	r9, #0
    2dd0:	f040 8096 	bne.w	2f00 <_vprintk+0x224>
					padding = PAD_SPACE_BEFORE;
    2dd4:	f04f 0902 	mov.w	r9, #2
    2dd8:	e092      	b.n	2f00 <_vprintk+0x224>
				if (min_width < 0 && padding == PAD_NONE) {
    2dda:	f1b9 0f00 	cmp.w	r9, #0
    2dde:	d1eb      	bne.n	2db8 <_vprintk+0xdc>
					padding = PAD_ZERO_BEFORE;
    2de0:	f04f 0901 	mov.w	r9, #1
    2de4:	e08c      	b.n	2f00 <_vprintk+0x224>
					min_width = *fmt - '0';
    2de6:	f1a0 0a30 	sub.w	sl, r0, #48	; 0x30
    2dea:	e7ef      	b.n	2dcc <_vprintk+0xf0>
				long_ctr++;
    2dec:	f108 0801 	add.w	r8, r8, #1
    2df0:	e086      	b.n	2f00 <_vprintk+0x224>
				if (long_ctr < 2) {
    2df2:	f1b8 0f01 	cmp.w	r8, #1
    2df6:	dd13      	ble.n	2e20 <_vprintk+0x144>
					d = (long)va_arg(ap, long long);
    2df8:	9b03      	ldr	r3, [sp, #12]
    2dfa:	3307      	adds	r3, #7
    2dfc:	f023 0307 	bic.w	r3, r3, #7
    2e00:	f103 0208 	add.w	r2, r3, #8
    2e04:	9203      	str	r2, [sp, #12]
    2e06:	681d      	ldr	r5, [r3, #0]
				if (d < 0) {
    2e08:	2d00      	cmp	r5, #0
    2e0a:	db0e      	blt.n	2e2a <_vprintk+0x14e>
				_printk_dec_ulong(out, ctx, d, padding,
    2e0c:	f8cd a000 	str.w	sl, [sp]
    2e10:	464b      	mov	r3, r9
    2e12:	462a      	mov	r2, r5
    2e14:	4631      	mov	r1, r6
    2e16:	4638      	mov	r0, r7
    2e18:	f7ff feea 	bl	2bf0 <_printk_dec_ulong>
			might_format = 0;
    2e1c:	2500      	movs	r5, #0
				break;
    2e1e:	e06f      	b.n	2f00 <_vprintk+0x224>
					d = va_arg(ap, long);
    2e20:	9b03      	ldr	r3, [sp, #12]
    2e22:	1d1a      	adds	r2, r3, #4
    2e24:	9203      	str	r2, [sp, #12]
    2e26:	681d      	ldr	r5, [r3, #0]
    2e28:	e7ee      	b.n	2e08 <_vprintk+0x12c>
					out((int)'-', ctx);
    2e2a:	4631      	mov	r1, r6
    2e2c:	202d      	movs	r0, #45	; 0x2d
    2e2e:	47b8      	blx	r7
					d = -d;
    2e30:	426d      	negs	r5, r5
					min_width--;
    2e32:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
    2e36:	e7e9      	b.n	2e0c <_vprintk+0x130>
				if (long_ctr < 2) {
    2e38:	f1b8 0f01 	cmp.w	r8, #1
    2e3c:	dd10      	ble.n	2e60 <_vprintk+0x184>
					u = (unsigned long)va_arg(ap,
    2e3e:	9b03      	ldr	r3, [sp, #12]
    2e40:	3307      	adds	r3, #7
    2e42:	f023 0307 	bic.w	r3, r3, #7
    2e46:	f103 0208 	add.w	r2, r3, #8
    2e4a:	9203      	str	r2, [sp, #12]
    2e4c:	681a      	ldr	r2, [r3, #0]
				_printk_dec_ulong(out, ctx, u, padding,
    2e4e:	f8cd a000 	str.w	sl, [sp]
    2e52:	464b      	mov	r3, r9
    2e54:	4631      	mov	r1, r6
    2e56:	4638      	mov	r0, r7
    2e58:	f7ff feca 	bl	2bf0 <_printk_dec_ulong>
			might_format = 0;
    2e5c:	2500      	movs	r5, #0
				break;
    2e5e:	e04f      	b.n	2f00 <_vprintk+0x224>
					u = va_arg(ap, unsigned long);
    2e60:	9b03      	ldr	r3, [sp, #12]
    2e62:	1d1a      	adds	r2, r3, #4
    2e64:	9203      	str	r2, [sp, #12]
    2e66:	681a      	ldr	r2, [r3, #0]
    2e68:	e7f1      	b.n	2e4e <_vprintk+0x172>
				  out('0', ctx);
    2e6a:	4631      	mov	r1, r6
    2e6c:	2030      	movs	r0, #48	; 0x30
    2e6e:	47b8      	blx	r7
				  out('x', ctx);
    2e70:	4631      	mov	r1, r6
    2e72:	2078      	movs	r0, #120	; 0x78
    2e74:	47b8      	blx	r7
				  min_width = 8;
    2e76:	f04f 0a08 	mov.w	sl, #8
				  padding = PAD_ZERO_BEFORE;
    2e7a:	f04f 0901 	mov.w	r9, #1
				if (long_ctr < 2) {
    2e7e:	f1b8 0f01 	cmp.w	r8, #1
    2e82:	dd10      	ble.n	2ea6 <_vprintk+0x1ca>
					x = (unsigned long)va_arg(ap,
    2e84:	9b03      	ldr	r3, [sp, #12]
    2e86:	3307      	adds	r3, #7
    2e88:	f023 0307 	bic.w	r3, r3, #7
    2e8c:	f103 0208 	add.w	r2, r3, #8
    2e90:	9203      	str	r2, [sp, #12]
    2e92:	681a      	ldr	r2, [r3, #0]
				_printk_hex_ulong(out, ctx, x, padding,
    2e94:	f8cd a000 	str.w	sl, [sp]
    2e98:	464b      	mov	r3, r9
    2e9a:	4631      	mov	r1, r6
    2e9c:	4638      	mov	r0, r7
    2e9e:	f7ff fe59 	bl	2b54 <_printk_hex_ulong>
			might_format = 0;
    2ea2:	2500      	movs	r5, #0
				break;
    2ea4:	e02c      	b.n	2f00 <_vprintk+0x224>
					x = va_arg(ap, unsigned long);
    2ea6:	9b03      	ldr	r3, [sp, #12]
    2ea8:	1d1a      	adds	r2, r3, #4
    2eaa:	9203      	str	r2, [sp, #12]
    2eac:	681a      	ldr	r2, [r3, #0]
    2eae:	e7f1      	b.n	2e94 <_vprintk+0x1b8>
				char *s = va_arg(ap, char *);
    2eb0:	9b03      	ldr	r3, [sp, #12]
    2eb2:	1d1a      	adds	r2, r3, #4
    2eb4:	9203      	str	r2, [sp, #12]
    2eb6:	681d      	ldr	r5, [r3, #0]
				while (*s)
    2eb8:	e002      	b.n	2ec0 <_vprintk+0x1e4>
					out((int)(*s++), ctx);
    2eba:	3501      	adds	r5, #1
    2ebc:	4631      	mov	r1, r6
    2ebe:	47b8      	blx	r7
				while (*s)
    2ec0:	7828      	ldrb	r0, [r5, #0]
    2ec2:	2800      	cmp	r0, #0
    2ec4:	d1f9      	bne.n	2eba <_vprintk+0x1de>
			might_format = 0;
    2ec6:	2500      	movs	r5, #0
    2ec8:	e01a      	b.n	2f00 <_vprintk+0x224>
				int c = va_arg(ap, int);
    2eca:	9b03      	ldr	r3, [sp, #12]
    2ecc:	1d1a      	adds	r2, r3, #4
    2ece:	9203      	str	r2, [sp, #12]
				out(c, ctx);
    2ed0:	4631      	mov	r1, r6
    2ed2:	6818      	ldr	r0, [r3, #0]
    2ed4:	47b8      	blx	r7
			might_format = 0;
    2ed6:	2500      	movs	r5, #0
				break;
    2ed8:	e012      	b.n	2f00 <_vprintk+0x224>
				out((int)'%', ctx);
    2eda:	4631      	mov	r1, r6
    2edc:	2025      	movs	r0, #37	; 0x25
    2ede:	47b8      	blx	r7
			might_format = 0;
    2ee0:	2500      	movs	r5, #0
				break;
    2ee2:	e00d      	b.n	2f00 <_vprintk+0x224>
				out((int)'%', ctx);
    2ee4:	4631      	mov	r1, r6
    2ee6:	2025      	movs	r0, #37	; 0x25
    2ee8:	47b8      	blx	r7
				out((int)*fmt, ctx);
    2eea:	4631      	mov	r1, r6
    2eec:	7820      	ldrb	r0, [r4, #0]
    2eee:	47b8      	blx	r7
			might_format = 0;
    2ef0:	2500      	movs	r5, #0
				break;
    2ef2:	e005      	b.n	2f00 <_vprintk+0x224>
				long_ctr = 0;
    2ef4:	46a8      	mov	r8, r5
				min_width = -1;
    2ef6:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
				padding = PAD_NONE;
    2efa:	f04f 0900 	mov.w	r9, #0
				might_format = 1;
    2efe:	2501      	movs	r5, #1
		++fmt;
    2f00:	3401      	adds	r4, #1
	while (*fmt) {
    2f02:	7820      	ldrb	r0, [r4, #0]
    2f04:	b150      	cbz	r0, 2f1c <_vprintk+0x240>
		if (!might_format) {
    2f06:	2d00      	cmp	r5, #0
    2f08:	f47f aef6 	bne.w	2cf8 <_vprintk+0x1c>
			if (*fmt != '%') {
    2f0c:	2825      	cmp	r0, #37	; 0x25
    2f0e:	d0f1      	beq.n	2ef4 <_vprintk+0x218>
				out((int)*fmt, ctx);
    2f10:	4631      	mov	r1, r6
    2f12:	47b8      	blx	r7
    2f14:	e7f4      	b.n	2f00 <_vprintk+0x224>
				padding = PAD_SPACE_AFTER;
    2f16:	f04f 0903 	mov.w	r9, #3
    2f1a:	e7f1      	b.n	2f00 <_vprintk+0x224>
}
    2f1c:	b004      	add	sp, #16
    2f1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

00002f24 <vprintk>:
{
    2f24:	b510      	push	{r4, lr}
    2f26:	b082      	sub	sp, #8
	struct out_context ctx = { 0 };
    2f28:	ac02      	add	r4, sp, #8
    2f2a:	2300      	movs	r3, #0
    2f2c:	f844 3d04 	str.w	r3, [r4, #-4]!
	_vprintk(char_out, &ctx, fmt, ap);
    2f30:	460b      	mov	r3, r1
    2f32:	4602      	mov	r2, r0
    2f34:	4621      	mov	r1, r4
    2f36:	4803      	ldr	r0, [pc, #12]	; (2f44 <vprintk+0x20>)
    2f38:	f7ff fed0 	bl	2cdc <_vprintk>
}
    2f3c:	9801      	ldr	r0, [sp, #4]
    2f3e:	b002      	add	sp, #8
    2f40:	bd10      	pop	{r4, pc}
    2f42:	bf00      	nop
    2f44:	00002b41 	.word	0x00002b41

00002f48 <printk>:
{
    2f48:	b40f      	push	{r0, r1, r2, r3}
    2f4a:	b500      	push	{lr}
    2f4c:	b083      	sub	sp, #12
    2f4e:	a904      	add	r1, sp, #16
    2f50:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
    2f54:	9101      	str	r1, [sp, #4]
	ret = vprintk(fmt, ap);
    2f56:	f7ff ffe5 	bl	2f24 <vprintk>
}
    2f5a:	b003      	add	sp, #12
    2f5c:	f85d eb04 	ldr.w	lr, [sp], #4
    2f60:	b004      	add	sp, #16
    2f62:	4770      	bx	lr

00002f64 <snprintk>:

int snprintk(char *str, size_t size, const char *fmt, ...)
{
    2f64:	b40c      	push	{r2, r3}
    2f66:	b510      	push	{r4, lr}
    2f68:	b084      	sub	sp, #16
    2f6a:	4604      	mov	r4, r0
    2f6c:	ab06      	add	r3, sp, #24
    2f6e:	f853 2b04 	ldr.w	r2, [r3], #4
	struct str_context ctx = { str, size, 0 };
    2f72:	9001      	str	r0, [sp, #4]
    2f74:	9102      	str	r1, [sp, #8]
    2f76:	2100      	movs	r1, #0
    2f78:	9103      	str	r1, [sp, #12]
	va_list ap;

	va_start(ap, fmt);
    2f7a:	9300      	str	r3, [sp, #0]
	_vprintk((out_func_t)str_out, &ctx, fmt, ap);
    2f7c:	a901      	add	r1, sp, #4
    2f7e:	4807      	ldr	r0, [pc, #28]	; (2f9c <snprintk+0x38>)
    2f80:	f7ff feac 	bl	2cdc <_vprintk>
	va_end(ap);

	if (ctx.count < ctx.max) {
    2f84:	9b03      	ldr	r3, [sp, #12]
    2f86:	9a02      	ldr	r2, [sp, #8]
    2f88:	4293      	cmp	r3, r2
    2f8a:	da01      	bge.n	2f90 <snprintk+0x2c>
		str[ctx.count] = '\0';
    2f8c:	2200      	movs	r2, #0
    2f8e:	54e2      	strb	r2, [r4, r3]
	}

	return ctx.count;
}
    2f90:	9803      	ldr	r0, [sp, #12]
    2f92:	b004      	add	sp, #16
    2f94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2f98:	b002      	add	sp, #8
    2f9a:	4770      	bx	lr
    2f9c:	00002ca1 	.word	0x00002ca1

00002fa0 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_MEM_POOL_SPLIT_BEFORE_DEFRAG, 1);
GEN_ABSOLUTE_SYM(CONFIG_NET_IPV6_NBR_CACHE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BT_CTLR_HCI_VS_BUILD_INFO, 1);
GEN_ABSOLUTE_SYM(CONFIG_SYS_LOG_SHOW_TAGS, 1);
GEN_ABSOLUTE_SYM(CONFIG_BT_CTLR_CHAN_SEL_2, 1);
GEN_ABSOLUTE_SYM(CONFIG_NET_UDP_CHECKSUM, 1);
    2fa0:	4770      	bx	lr

00002fa2 <_copy>:
#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
	if (from_len <= to_len) {
    2fa2:	428b      	cmp	r3, r1
    2fa4:	d901      	bls.n	2faa <_copy+0x8>
		(void)memcpy(to, from, from_len);
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
    2fa6:	2000      	movs	r0, #0
    2fa8:	4770      	bx	lr
{
    2faa:	b510      	push	{r4, lr}
    2fac:	461c      	mov	r4, r3
    2fae:	4611      	mov	r1, r2
		(void)memcpy(to, from, from_len);
    2fb0:	461a      	mov	r2, r3
    2fb2:	f7fd f985 	bl	2c0 <memcpy>
		return from_len;
    2fb6:	4620      	mov	r0, r4
    2fb8:	bd10      	pop	{r4, pc}

00002fba <_set>:
	}
}

void _set(void *to, uint8_t val, unsigned int len)
{
    2fba:	b508      	push	{r3, lr}
	(void)memset(to, val, len);
    2fbc:	f027 fd62 	bl	2aa84 <memset>
    2fc0:	bd08      	pop	{r3, pc}

00002fc2 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
    2fc2:	09c3      	lsrs	r3, r0, #7
    2fc4:	005a      	lsls	r2, r3, #1
    2fc6:	4413      	add	r3, r2
    2fc8:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
    2fcc:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
    2fd0:	b2c0      	uxtb	r0, r0
    2fd2:	4770      	bx	lr

00002fd4 <tc_aes128_set_encrypt_key>:

#define subbyte(a, o)(sbox[((a) >> (o))&0xff] << (o))
#define subword(a)(subbyte(a, 24)|subbyte(a, 16)|subbyte(a, 8)|subbyte(a, 0))

int tc_aes128_set_encrypt_key(TCAesKeySched_t s, const uint8_t *k)
{
    2fd4:	b4f0      	push	{r4, r5, r6, r7}
    2fd6:	b08c      	sub	sp, #48	; 0x30
    2fd8:	4604      	mov	r4, r0
    2fda:	460f      	mov	r7, r1
	const unsigned int rconst[11] = {
    2fdc:	ad01      	add	r5, sp, #4
    2fde:	4e2a      	ldr	r6, [pc, #168]	; (3088 <tc_aes128_set_encrypt_key+0xb4>)
    2fe0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    2fe2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    2fe4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    2fe6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    2fe8:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    2fec:	e885 0007 	stmia.w	r5, {r0, r1, r2}
		0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000
	};
	unsigned int i;
	unsigned int t;

	if (s == (TCAesKeySched_t) 0) {
    2ff0:	2c00      	cmp	r4, #0
    2ff2:	d044      	beq.n	307e <tc_aes128_set_encrypt_key+0xaa>
		return TC_CRYPTO_FAIL;
	} else if (k == (const uint8_t *) 0) {
    2ff4:	2f00      	cmp	r7, #0
    2ff6:	d044      	beq.n	3082 <tc_aes128_set_encrypt_key+0xae>
    2ff8:	2200      	movs	r2, #0
    2ffa:	e00f      	b.n	301c <tc_aes128_set_encrypt_key+0x48>
		return TC_CRYPTO_FAIL;
	}

	for (i = 0; i < Nk; ++i) {
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    2ffc:	f817 0022 	ldrb.w	r0, [r7, r2, lsl #2]
    3000:	eb07 0182 	add.w	r1, r7, r2, lsl #2
    3004:	784b      	ldrb	r3, [r1, #1]
    3006:	041b      	lsls	r3, r3, #16
    3008:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    300c:	7888      	ldrb	r0, [r1, #2]
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    300e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    3012:	78c9      	ldrb	r1, [r1, #3]
    3014:	430b      	orrs	r3, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    3016:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
	for (i = 0; i < Nk; ++i) {
    301a:	3201      	adds	r2, #1
    301c:	2a03      	cmp	r2, #3
    301e:	d9ed      	bls.n	2ffc <tc_aes128_set_encrypt_key+0x28>
    3020:	e006      	b.n	3030 <tc_aes128_set_encrypt_key+0x5c>
	for (; i < (Nb * (Nr + 1)); ++i) {
		t = s->words[i-1];
		if ((i % Nk) == 0) {
			t = subword(rotword(t)) ^ rconst[i/Nk];
		}
		s->words[i] = s->words[i-Nk] ^ t;
    3022:	1f11      	subs	r1, r2, #4
    3024:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
    3028:	404b      	eors	r3, r1
    302a:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
	for (; i < (Nb * (Nr + 1)); ++i) {
    302e:	3201      	adds	r2, #1
    3030:	2a2b      	cmp	r2, #43	; 0x2b
    3032:	d820      	bhi.n	3076 <tc_aes128_set_encrypt_key+0xa2>
		t = s->words[i-1];
    3034:	1e53      	subs	r3, r2, #1
    3036:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
		if ((i % Nk) == 0) {
    303a:	f012 0f03 	tst.w	r2, #3
    303e:	d1f0      	bne.n	3022 <tc_aes128_set_encrypt_key+0x4e>
	return (((a) >> 24)|((a) << 8));
    3040:	ea4f 6333 	mov.w	r3, r3, ror #24
			t = subword(rotword(t)) ^ rconst[i/Nk];
    3044:	0e19      	lsrs	r1, r3, #24
    3046:	4811      	ldr	r0, [pc, #68]	; (308c <tc_aes128_set_encrypt_key+0xb8>)
    3048:	5c45      	ldrb	r5, [r0, r1]
    304a:	f3c3 4107 	ubfx	r1, r3, #16, #8
    304e:	5c41      	ldrb	r1, [r0, r1]
    3050:	0409      	lsls	r1, r1, #16
    3052:	ea41 6105 	orr.w	r1, r1, r5, lsl #24
    3056:	f3c3 2507 	ubfx	r5, r3, #8, #8
    305a:	5d45      	ldrb	r5, [r0, r5]
    305c:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
    3060:	b2db      	uxtb	r3, r3
    3062:	5cc3      	ldrb	r3, [r0, r3]
    3064:	4319      	orrs	r1, r3
    3066:	f022 0303 	bic.w	r3, r2, #3
    306a:	a80c      	add	r0, sp, #48	; 0x30
    306c:	4403      	add	r3, r0
    306e:	f853 3c2c 	ldr.w	r3, [r3, #-44]
    3072:	404b      	eors	r3, r1
    3074:	e7d5      	b.n	3022 <tc_aes128_set_encrypt_key+0x4e>
	}

	return TC_CRYPTO_SUCCESS;
    3076:	2001      	movs	r0, #1
}
    3078:	b00c      	add	sp, #48	; 0x30
    307a:	bcf0      	pop	{r4, r5, r6, r7}
    307c:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
    307e:	2000      	movs	r0, #0
    3080:	e7fa      	b.n	3078 <tc_aes128_set_encrypt_key+0xa4>
		return TC_CRYPTO_FAIL;
    3082:	2000      	movs	r0, #0
    3084:	e7f8      	b.n	3078 <tc_aes128_set_encrypt_key+0xa4>
    3086:	bf00      	nop
    3088:	0002edf0 	.word	0x0002edf0
    308c:	0002f190 	.word	0x0002f190

00003090 <tc_aes_encrypt>:
int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
    3090:	2800      	cmp	r0, #0
    3092:	f000 8367 	beq.w	3764 <tc_aes_encrypt+0x6d4>
{
    3096:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    309a:	b088      	sub	sp, #32
    309c:	4680      	mov	r8, r0
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
    309e:	2900      	cmp	r1, #0
    30a0:	f000 8362 	beq.w	3768 <tc_aes_encrypt+0x6d8>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
    30a4:	2a00      	cmp	r2, #0
    30a6:	f000 8361 	beq.w	376c <tc_aes_encrypt+0x6dc>
    30aa:	4617      	mov	r7, r2
    30ac:	460a      	mov	r2, r1
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
    30ae:	2310      	movs	r3, #16
    30b0:	4619      	mov	r1, r3
    30b2:	eb0d 0003 	add.w	r0, sp, r3
    30b6:	f7ff ff74 	bl	2fa2 <_copy>
	add_round_key(state, s->words);
    30ba:	463e      	mov	r6, r7
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
    30bc:	683b      	ldr	r3, [r7, #0]
    30be:	f89d 2010 	ldrb.w	r2, [sp, #16]
    30c2:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
    30c6:	f88d 2010 	strb.w	r2, [sp, #16]
    30ca:	f3c3 4207 	ubfx	r2, r3, #16, #8
    30ce:	f89d 1011 	ldrb.w	r1, [sp, #17]
    30d2:	404a      	eors	r2, r1
    30d4:	f88d 2011 	strb.w	r2, [sp, #17]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
    30d8:	f3c3 2207 	ubfx	r2, r3, #8, #8
    30dc:	f89d 1012 	ldrb.w	r1, [sp, #18]
    30e0:	404a      	eors	r2, r1
    30e2:	f88d 2012 	strb.w	r2, [sp, #18]
    30e6:	b2db      	uxtb	r3, r3
    30e8:	f89d 2013 	ldrb.w	r2, [sp, #19]
    30ec:	4053      	eors	r3, r2
    30ee:	f88d 3013 	strb.w	r3, [sp, #19]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
    30f2:	687b      	ldr	r3, [r7, #4]
    30f4:	f89d 2014 	ldrb.w	r2, [sp, #20]
    30f8:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
    30fc:	f88d 2014 	strb.w	r2, [sp, #20]
    3100:	f3c3 4207 	ubfx	r2, r3, #16, #8
    3104:	f89d 1015 	ldrb.w	r1, [sp, #21]
    3108:	404a      	eors	r2, r1
    310a:	f88d 2015 	strb.w	r2, [sp, #21]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
    310e:	f3c3 2207 	ubfx	r2, r3, #8, #8
    3112:	f89d 1016 	ldrb.w	r1, [sp, #22]
    3116:	404a      	eors	r2, r1
    3118:	f88d 2016 	strb.w	r2, [sp, #22]
    311c:	b2db      	uxtb	r3, r3
    311e:	f89d 2017 	ldrb.w	r2, [sp, #23]
    3122:	4053      	eors	r3, r2
    3124:	f88d 3017 	strb.w	r3, [sp, #23]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
    3128:	68bb      	ldr	r3, [r7, #8]
    312a:	f89d 2018 	ldrb.w	r2, [sp, #24]
    312e:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
    3132:	f88d 2018 	strb.w	r2, [sp, #24]
    3136:	f3c3 4207 	ubfx	r2, r3, #16, #8
    313a:	f89d 1019 	ldrb.w	r1, [sp, #25]
    313e:	404a      	eors	r2, r1
    3140:	f88d 2019 	strb.w	r2, [sp, #25]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
    3144:	f3c3 2207 	ubfx	r2, r3, #8, #8
    3148:	f89d 101a 	ldrb.w	r1, [sp, #26]
    314c:	404a      	eors	r2, r1
    314e:	f88d 201a 	strb.w	r2, [sp, #26]
    3152:	b2db      	uxtb	r3, r3
    3154:	f89d 201b 	ldrb.w	r2, [sp, #27]
    3158:	4053      	eors	r3, r2
    315a:	f88d 301b 	strb.w	r3, [sp, #27]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
    315e:	68fb      	ldr	r3, [r7, #12]
    3160:	f89d 201c 	ldrb.w	r2, [sp, #28]
    3164:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
    3168:	f88d 201c 	strb.w	r2, [sp, #28]
    316c:	f3c3 4207 	ubfx	r2, r3, #16, #8
    3170:	f89d 101d 	ldrb.w	r1, [sp, #29]
    3174:	404a      	eors	r2, r1
    3176:	f88d 201d 	strb.w	r2, [sp, #29]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
    317a:	f3c3 2207 	ubfx	r2, r3, #8, #8
    317e:	f89d 101e 	ldrb.w	r1, [sp, #30]
    3182:	404a      	eors	r2, r1
    3184:	f88d 201e 	strb.w	r2, [sp, #30]
    3188:	b2db      	uxtb	r3, r3
    318a:	f89d 201f 	ldrb.w	r2, [sp, #31]
    318e:	4053      	eors	r3, r2
    3190:	f88d 301f 	strb.w	r3, [sp, #31]

	for (i = 0; i < (Nr - 1); ++i) {
    3194:	2500      	movs	r5, #0
    3196:	e210      	b.n	35ba <tc_aes_encrypt+0x52a>
		s[i] = sbox[s[i]];
    3198:	a904      	add	r1, sp, #16
    319a:	5ccc      	ldrb	r4, [r1, r3]
    319c:	4a02      	ldr	r2, [pc, #8]	; (31a8 <tc_aes_encrypt+0x118>)
    319e:	5d14      	ldrb	r4, [r2, r4]
    31a0:	54cc      	strb	r4, [r1, r3]
	for (i = 0; i < (Nb * Nk); ++i) {
    31a2:	3301      	adds	r3, #1
    31a4:	e002      	b.n	31ac <tc_aes_encrypt+0x11c>
    31a6:	bf00      	nop
    31a8:	0002f190 	.word	0x0002f190
    31ac:	2b0f      	cmp	r3, #15
    31ae:	d9f3      	bls.n	3198 <tc_aes_encrypt+0x108>
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
    31b0:	f89d 3010 	ldrb.w	r3, [sp, #16]
    31b4:	f88d 3000 	strb.w	r3, [sp]
    31b8:	f89d 3015 	ldrb.w	r3, [sp, #21]
    31bc:	f88d 3001 	strb.w	r3, [sp, #1]
    31c0:	f89d 301a 	ldrb.w	r3, [sp, #26]
    31c4:	f88d 3002 	strb.w	r3, [sp, #2]
    31c8:	f89d 301f 	ldrb.w	r3, [sp, #31]
    31cc:	f88d 3003 	strb.w	r3, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
    31d0:	f89d 3014 	ldrb.w	r3, [sp, #20]
    31d4:	f88d 3004 	strb.w	r3, [sp, #4]
    31d8:	f89d 3019 	ldrb.w	r3, [sp, #25]
    31dc:	f88d 3005 	strb.w	r3, [sp, #5]
    31e0:	f89d 301e 	ldrb.w	r3, [sp, #30]
    31e4:	f88d 3006 	strb.w	r3, [sp, #6]
    31e8:	f89d 3013 	ldrb.w	r3, [sp, #19]
    31ec:	f88d 3007 	strb.w	r3, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
    31f0:	f89d 3018 	ldrb.w	r3, [sp, #24]
    31f4:	f88d 3008 	strb.w	r3, [sp, #8]
    31f8:	f89d 301d 	ldrb.w	r3, [sp, #29]
    31fc:	f88d 3009 	strb.w	r3, [sp, #9]
    3200:	f89d 3012 	ldrb.w	r3, [sp, #18]
    3204:	f88d 300a 	strb.w	r3, [sp, #10]
    3208:	f89d 3017 	ldrb.w	r3, [sp, #23]
    320c:	f88d 300b 	strb.w	r3, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
    3210:	f89d 301c 	ldrb.w	r3, [sp, #28]
    3214:	f88d 300c 	strb.w	r3, [sp, #12]
    3218:	f89d 3011 	ldrb.w	r3, [sp, #17]
    321c:	f88d 300d 	strb.w	r3, [sp, #13]
    3220:	f89d 3016 	ldrb.w	r3, [sp, #22]
    3224:	f88d 300e 	strb.w	r3, [sp, #14]
    3228:	f89d 301b 	ldrb.w	r3, [sp, #27]
    322c:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
    3230:	2310      	movs	r3, #16
    3232:	466a      	mov	r2, sp
    3234:	4619      	mov	r1, r3
    3236:	eb0d 0003 	add.w	r0, sp, r3
    323a:	f7ff feb2 	bl	2fa2 <_copy>
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
    323e:	f89d 0010 	ldrb.w	r0, [sp, #16]
    3242:	f7ff febe 	bl	2fc2 <_double_byte>
    3246:	4604      	mov	r4, r0
    3248:	f89d 0011 	ldrb.w	r0, [sp, #17]
    324c:	f7ff feb9 	bl	2fc2 <_double_byte>
    3250:	f89d 1011 	ldrb.w	r1, [sp, #17]
    3254:	f89d 2012 	ldrb.w	r2, [sp, #18]
    3258:	f89d 3013 	ldrb.w	r3, [sp, #19]
    325c:	4048      	eors	r0, r1
    325e:	4044      	eors	r4, r0
    3260:	4062      	eors	r2, r4
    3262:	4053      	eors	r3, r2
    3264:	f88d 3000 	strb.w	r3, [sp]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
    3268:	f89d 4010 	ldrb.w	r4, [sp, #16]
    326c:	4608      	mov	r0, r1
    326e:	f7ff fea8 	bl	2fc2 <_double_byte>
    3272:	4044      	eors	r4, r0
    3274:	b2e4      	uxtb	r4, r4
    3276:	f89d 0012 	ldrb.w	r0, [sp, #18]
    327a:	f7ff fea2 	bl	2fc2 <_double_byte>
    327e:	f89d 2012 	ldrb.w	r2, [sp, #18]
    3282:	f89d 3013 	ldrb.w	r3, [sp, #19]
    3286:	4050      	eors	r0, r2
    3288:	4044      	eors	r4, r0
    328a:	405c      	eors	r4, r3
    328c:	f88d 4001 	strb.w	r4, [sp, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
    3290:	f89d 4010 	ldrb.w	r4, [sp, #16]
    3294:	f89d 0011 	ldrb.w	r0, [sp, #17]
    3298:	4044      	eors	r4, r0
    329a:	4610      	mov	r0, r2
    329c:	f7ff fe91 	bl	2fc2 <_double_byte>
    32a0:	4044      	eors	r4, r0
    32a2:	b2e4      	uxtb	r4, r4
    32a4:	f89d 0013 	ldrb.w	r0, [sp, #19]
    32a8:	f7ff fe8b 	bl	2fc2 <_double_byte>
    32ac:	f89d 3013 	ldrb.w	r3, [sp, #19]
    32b0:	4058      	eors	r0, r3
    32b2:	4044      	eors	r4, r0
    32b4:	f88d 4002 	strb.w	r4, [sp, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
    32b8:	f89d 0010 	ldrb.w	r0, [sp, #16]
    32bc:	f7ff fe81 	bl	2fc2 <_double_byte>
    32c0:	f89d 2010 	ldrb.w	r2, [sp, #16]
    32c4:	f89d 3011 	ldrb.w	r3, [sp, #17]
    32c8:	f89d 4012 	ldrb.w	r4, [sp, #18]
    32cc:	4050      	eors	r0, r2
    32ce:	4043      	eors	r3, r0
    32d0:	405c      	eors	r4, r3
    32d2:	b2e4      	uxtb	r4, r4
    32d4:	f89d 0013 	ldrb.w	r0, [sp, #19]
    32d8:	f7ff fe73 	bl	2fc2 <_double_byte>
    32dc:	4060      	eors	r0, r4
    32de:	f88d 0003 	strb.w	r0, [sp, #3]
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
    32e2:	f89d 0014 	ldrb.w	r0, [sp, #20]
    32e6:	f7ff fe6c 	bl	2fc2 <_double_byte>
    32ea:	4604      	mov	r4, r0
    32ec:	f89d 0015 	ldrb.w	r0, [sp, #21]
    32f0:	f7ff fe67 	bl	2fc2 <_double_byte>
    32f4:	f89d 1015 	ldrb.w	r1, [sp, #21]
    32f8:	f89d 2016 	ldrb.w	r2, [sp, #22]
    32fc:	f89d 3017 	ldrb.w	r3, [sp, #23]
    3300:	4048      	eors	r0, r1
    3302:	4044      	eors	r4, r0
    3304:	4062      	eors	r2, r4
    3306:	4053      	eors	r3, r2
    3308:	f88d 3004 	strb.w	r3, [sp, #4]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
    330c:	f89d 4014 	ldrb.w	r4, [sp, #20]
    3310:	4608      	mov	r0, r1
    3312:	f7ff fe56 	bl	2fc2 <_double_byte>
    3316:	4044      	eors	r4, r0
    3318:	b2e4      	uxtb	r4, r4
    331a:	f89d 0016 	ldrb.w	r0, [sp, #22]
    331e:	f7ff fe50 	bl	2fc2 <_double_byte>
    3322:	f89d 2016 	ldrb.w	r2, [sp, #22]
    3326:	f89d 3017 	ldrb.w	r3, [sp, #23]
    332a:	4050      	eors	r0, r2
    332c:	4044      	eors	r4, r0
    332e:	405c      	eors	r4, r3
    3330:	f88d 4005 	strb.w	r4, [sp, #5]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
    3334:	f89d 4014 	ldrb.w	r4, [sp, #20]
    3338:	f89d 0015 	ldrb.w	r0, [sp, #21]
    333c:	4044      	eors	r4, r0
    333e:	4610      	mov	r0, r2
    3340:	f7ff fe3f 	bl	2fc2 <_double_byte>
    3344:	4044      	eors	r4, r0
    3346:	b2e4      	uxtb	r4, r4
    3348:	f89d 0017 	ldrb.w	r0, [sp, #23]
    334c:	f7ff fe39 	bl	2fc2 <_double_byte>
    3350:	f89d 3017 	ldrb.w	r3, [sp, #23]
    3354:	4058      	eors	r0, r3
    3356:	4044      	eors	r4, r0
    3358:	f88d 4006 	strb.w	r4, [sp, #6]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
    335c:	f89d 0014 	ldrb.w	r0, [sp, #20]
    3360:	f7ff fe2f 	bl	2fc2 <_double_byte>
    3364:	f89d 2014 	ldrb.w	r2, [sp, #20]
    3368:	f89d 3015 	ldrb.w	r3, [sp, #21]
    336c:	f89d 4016 	ldrb.w	r4, [sp, #22]
    3370:	4050      	eors	r0, r2
    3372:	4043      	eors	r3, r0
    3374:	405c      	eors	r4, r3
    3376:	b2e4      	uxtb	r4, r4
    3378:	f89d 0017 	ldrb.w	r0, [sp, #23]
    337c:	f7ff fe21 	bl	2fc2 <_double_byte>
    3380:	4060      	eors	r0, r4
    3382:	f88d 0007 	strb.w	r0, [sp, #7]
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
    3386:	f89d 0018 	ldrb.w	r0, [sp, #24]
    338a:	f7ff fe1a 	bl	2fc2 <_double_byte>
    338e:	4604      	mov	r4, r0
    3390:	f89d 0019 	ldrb.w	r0, [sp, #25]
    3394:	f7ff fe15 	bl	2fc2 <_double_byte>
    3398:	f89d 1019 	ldrb.w	r1, [sp, #25]
    339c:	f89d 201a 	ldrb.w	r2, [sp, #26]
    33a0:	f89d 301b 	ldrb.w	r3, [sp, #27]
    33a4:	4048      	eors	r0, r1
    33a6:	4044      	eors	r4, r0
    33a8:	4062      	eors	r2, r4
    33aa:	4053      	eors	r3, r2
    33ac:	f88d 3008 	strb.w	r3, [sp, #8]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
    33b0:	f89d 4018 	ldrb.w	r4, [sp, #24]
    33b4:	4608      	mov	r0, r1
    33b6:	f7ff fe04 	bl	2fc2 <_double_byte>
    33ba:	4044      	eors	r4, r0
    33bc:	b2e4      	uxtb	r4, r4
    33be:	f89d 001a 	ldrb.w	r0, [sp, #26]
    33c2:	f7ff fdfe 	bl	2fc2 <_double_byte>
    33c6:	f89d 201a 	ldrb.w	r2, [sp, #26]
    33ca:	f89d 301b 	ldrb.w	r3, [sp, #27]
    33ce:	4050      	eors	r0, r2
    33d0:	4044      	eors	r4, r0
    33d2:	405c      	eors	r4, r3
    33d4:	f88d 4009 	strb.w	r4, [sp, #9]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
    33d8:	f89d 4018 	ldrb.w	r4, [sp, #24]
    33dc:	f89d 0019 	ldrb.w	r0, [sp, #25]
    33e0:	4044      	eors	r4, r0
    33e2:	4610      	mov	r0, r2
    33e4:	f7ff fded 	bl	2fc2 <_double_byte>
    33e8:	4044      	eors	r4, r0
    33ea:	b2e4      	uxtb	r4, r4
    33ec:	f89d 001b 	ldrb.w	r0, [sp, #27]
    33f0:	f7ff fde7 	bl	2fc2 <_double_byte>
    33f4:	f89d 301b 	ldrb.w	r3, [sp, #27]
    33f8:	4058      	eors	r0, r3
    33fa:	4044      	eors	r4, r0
    33fc:	f88d 400a 	strb.w	r4, [sp, #10]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
    3400:	f89d 0018 	ldrb.w	r0, [sp, #24]
    3404:	f7ff fddd 	bl	2fc2 <_double_byte>
    3408:	f89d 2018 	ldrb.w	r2, [sp, #24]
    340c:	f89d 3019 	ldrb.w	r3, [sp, #25]
    3410:	f89d 401a 	ldrb.w	r4, [sp, #26]
    3414:	4050      	eors	r0, r2
    3416:	4043      	eors	r3, r0
    3418:	405c      	eors	r4, r3
    341a:	b2e4      	uxtb	r4, r4
    341c:	f89d 001b 	ldrb.w	r0, [sp, #27]
    3420:	f7ff fdcf 	bl	2fc2 <_double_byte>
    3424:	4060      	eors	r0, r4
    3426:	f88d 000b 	strb.w	r0, [sp, #11]
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
    342a:	f89d 001c 	ldrb.w	r0, [sp, #28]
    342e:	f7ff fdc8 	bl	2fc2 <_double_byte>
    3432:	4604      	mov	r4, r0
    3434:	f89d 001d 	ldrb.w	r0, [sp, #29]
    3438:	f7ff fdc3 	bl	2fc2 <_double_byte>
    343c:	f89d 101d 	ldrb.w	r1, [sp, #29]
    3440:	f89d 201e 	ldrb.w	r2, [sp, #30]
    3444:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3448:	4048      	eors	r0, r1
    344a:	4044      	eors	r4, r0
    344c:	4062      	eors	r2, r4
    344e:	4053      	eors	r3, r2
    3450:	f88d 300c 	strb.w	r3, [sp, #12]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
    3454:	f89d 401c 	ldrb.w	r4, [sp, #28]
    3458:	4608      	mov	r0, r1
    345a:	f7ff fdb2 	bl	2fc2 <_double_byte>
    345e:	4044      	eors	r4, r0
    3460:	b2e4      	uxtb	r4, r4
    3462:	f89d 001e 	ldrb.w	r0, [sp, #30]
    3466:	f7ff fdac 	bl	2fc2 <_double_byte>
    346a:	f89d 201e 	ldrb.w	r2, [sp, #30]
    346e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3472:	4050      	eors	r0, r2
    3474:	4044      	eors	r4, r0
    3476:	405c      	eors	r4, r3
    3478:	f88d 400d 	strb.w	r4, [sp, #13]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
    347c:	f89d 401c 	ldrb.w	r4, [sp, #28]
    3480:	f89d 001d 	ldrb.w	r0, [sp, #29]
    3484:	4044      	eors	r4, r0
    3486:	4610      	mov	r0, r2
    3488:	f7ff fd9b 	bl	2fc2 <_double_byte>
    348c:	4044      	eors	r4, r0
    348e:	b2e4      	uxtb	r4, r4
    3490:	f89d 001f 	ldrb.w	r0, [sp, #31]
    3494:	f7ff fd95 	bl	2fc2 <_double_byte>
    3498:	f89d 301f 	ldrb.w	r3, [sp, #31]
    349c:	4058      	eors	r0, r3
    349e:	4044      	eors	r4, r0
    34a0:	f88d 400e 	strb.w	r4, [sp, #14]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
    34a4:	f89d 001c 	ldrb.w	r0, [sp, #28]
    34a8:	f7ff fd8b 	bl	2fc2 <_double_byte>
    34ac:	f89d 201c 	ldrb.w	r2, [sp, #28]
    34b0:	f89d 301d 	ldrb.w	r3, [sp, #29]
    34b4:	f89d 401e 	ldrb.w	r4, [sp, #30]
    34b8:	4050      	eors	r0, r2
    34ba:	4043      	eors	r3, r0
    34bc:	405c      	eors	r4, r3
    34be:	b2e4      	uxtb	r4, r4
    34c0:	f89d 001f 	ldrb.w	r0, [sp, #31]
    34c4:	f7ff fd7d 	bl	2fc2 <_double_byte>
    34c8:	4060      	eors	r0, r4
    34ca:	f88d 000f 	strb.w	r0, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
    34ce:	2310      	movs	r3, #16
    34d0:	466a      	mov	r2, sp
    34d2:	4619      	mov	r1, r3
    34d4:	eb0d 0003 	add.w	r0, sp, r3
    34d8:	f7ff fd63 	bl	2fa2 <_copy>
		sub_bytes(state);
		shift_rows(state);
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
    34dc:	3501      	adds	r5, #1
    34de:	012b      	lsls	r3, r5, #4
    34e0:	18f2      	adds	r2, r6, r3
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
    34e2:	58f3      	ldr	r3, [r6, r3]
    34e4:	f89d 1010 	ldrb.w	r1, [sp, #16]
    34e8:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
    34ec:	f88d 1010 	strb.w	r1, [sp, #16]
    34f0:	f3c3 4107 	ubfx	r1, r3, #16, #8
    34f4:	f89d 0011 	ldrb.w	r0, [sp, #17]
    34f8:	4041      	eors	r1, r0
    34fa:	f88d 1011 	strb.w	r1, [sp, #17]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
    34fe:	f3c3 2107 	ubfx	r1, r3, #8, #8
    3502:	f89d 0012 	ldrb.w	r0, [sp, #18]
    3506:	4041      	eors	r1, r0
    3508:	f88d 1012 	strb.w	r1, [sp, #18]
    350c:	b2db      	uxtb	r3, r3
    350e:	f89d 1013 	ldrb.w	r1, [sp, #19]
    3512:	404b      	eors	r3, r1
    3514:	f88d 3013 	strb.w	r3, [sp, #19]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
    3518:	6853      	ldr	r3, [r2, #4]
    351a:	f89d 1014 	ldrb.w	r1, [sp, #20]
    351e:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
    3522:	f88d 1014 	strb.w	r1, [sp, #20]
    3526:	f3c3 4107 	ubfx	r1, r3, #16, #8
    352a:	f89d 0015 	ldrb.w	r0, [sp, #21]
    352e:	4041      	eors	r1, r0
    3530:	f88d 1015 	strb.w	r1, [sp, #21]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
    3534:	f3c3 2107 	ubfx	r1, r3, #8, #8
    3538:	f89d 0016 	ldrb.w	r0, [sp, #22]
    353c:	4041      	eors	r1, r0
    353e:	f88d 1016 	strb.w	r1, [sp, #22]
    3542:	b2db      	uxtb	r3, r3
    3544:	f89d 1017 	ldrb.w	r1, [sp, #23]
    3548:	404b      	eors	r3, r1
    354a:	f88d 3017 	strb.w	r3, [sp, #23]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
    354e:	6893      	ldr	r3, [r2, #8]
    3550:	f89d 1018 	ldrb.w	r1, [sp, #24]
    3554:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
    3558:	f88d 1018 	strb.w	r1, [sp, #24]
    355c:	f3c3 4107 	ubfx	r1, r3, #16, #8
    3560:	f89d 0019 	ldrb.w	r0, [sp, #25]
    3564:	4041      	eors	r1, r0
    3566:	f88d 1019 	strb.w	r1, [sp, #25]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
    356a:	f3c3 2107 	ubfx	r1, r3, #8, #8
    356e:	f89d 001a 	ldrb.w	r0, [sp, #26]
    3572:	4041      	eors	r1, r0
    3574:	f88d 101a 	strb.w	r1, [sp, #26]
    3578:	b2db      	uxtb	r3, r3
    357a:	f89d 101b 	ldrb.w	r1, [sp, #27]
    357e:	404b      	eors	r3, r1
    3580:	f88d 301b 	strb.w	r3, [sp, #27]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
    3584:	68d3      	ldr	r3, [r2, #12]
    3586:	f89d 201c 	ldrb.w	r2, [sp, #28]
    358a:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
    358e:	f88d 201c 	strb.w	r2, [sp, #28]
    3592:	f3c3 4207 	ubfx	r2, r3, #16, #8
    3596:	f89d 101d 	ldrb.w	r1, [sp, #29]
    359a:	404a      	eors	r2, r1
    359c:	f88d 201d 	strb.w	r2, [sp, #29]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
    35a0:	f3c3 2207 	ubfx	r2, r3, #8, #8
    35a4:	f89d 101e 	ldrb.w	r1, [sp, #30]
    35a8:	404a      	eors	r2, r1
    35aa:	f88d 201e 	strb.w	r2, [sp, #30]
    35ae:	b2db      	uxtb	r3, r3
    35b0:	f89d 201f 	ldrb.w	r2, [sp, #31]
    35b4:	4053      	eors	r3, r2
    35b6:	f88d 301f 	strb.w	r3, [sp, #31]
	for (i = 0; i < (Nr - 1); ++i) {
    35ba:	2d08      	cmp	r5, #8
    35bc:	d801      	bhi.n	35c2 <tc_aes_encrypt+0x532>
    35be:	2300      	movs	r3, #0
    35c0:	e5f4      	b.n	31ac <tc_aes_encrypt+0x11c>
    35c2:	2300      	movs	r3, #0
    35c4:	e005      	b.n	35d2 <tc_aes_encrypt+0x542>
		s[i] = sbox[s[i]];
    35c6:	aa04      	add	r2, sp, #16
    35c8:	5cd1      	ldrb	r1, [r2, r3]
    35ca:	4869      	ldr	r0, [pc, #420]	; (3770 <tc_aes_encrypt+0x6e0>)
    35cc:	5c41      	ldrb	r1, [r0, r1]
    35ce:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < (Nb * Nk); ++i) {
    35d0:	3301      	adds	r3, #1
    35d2:	2b0f      	cmp	r3, #15
    35d4:	d9f7      	bls.n	35c6 <tc_aes_encrypt+0x536>
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
    35d6:	f89d 3010 	ldrb.w	r3, [sp, #16]
    35da:	f88d 3000 	strb.w	r3, [sp]
    35de:	f89d 3015 	ldrb.w	r3, [sp, #21]
    35e2:	f88d 3001 	strb.w	r3, [sp, #1]
    35e6:	f89d 301a 	ldrb.w	r3, [sp, #26]
    35ea:	f88d 3002 	strb.w	r3, [sp, #2]
    35ee:	f89d 301f 	ldrb.w	r3, [sp, #31]
    35f2:	f88d 3003 	strb.w	r3, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
    35f6:	f89d 3014 	ldrb.w	r3, [sp, #20]
    35fa:	f88d 3004 	strb.w	r3, [sp, #4]
    35fe:	f89d 3019 	ldrb.w	r3, [sp, #25]
    3602:	f88d 3005 	strb.w	r3, [sp, #5]
    3606:	f89d 301e 	ldrb.w	r3, [sp, #30]
    360a:	f88d 3006 	strb.w	r3, [sp, #6]
    360e:	f89d 3013 	ldrb.w	r3, [sp, #19]
    3612:	f88d 3007 	strb.w	r3, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
    3616:	f89d 3018 	ldrb.w	r3, [sp, #24]
    361a:	f88d 3008 	strb.w	r3, [sp, #8]
    361e:	f89d 301d 	ldrb.w	r3, [sp, #29]
    3622:	f88d 3009 	strb.w	r3, [sp, #9]
    3626:	f89d 3012 	ldrb.w	r3, [sp, #18]
    362a:	f88d 300a 	strb.w	r3, [sp, #10]
    362e:	f89d 3017 	ldrb.w	r3, [sp, #23]
    3632:	f88d 300b 	strb.w	r3, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
    3636:	f89d 301c 	ldrb.w	r3, [sp, #28]
    363a:	f88d 300c 	strb.w	r3, [sp, #12]
    363e:	f89d 3011 	ldrb.w	r3, [sp, #17]
    3642:	f88d 300d 	strb.w	r3, [sp, #13]
    3646:	f89d 3016 	ldrb.w	r3, [sp, #22]
    364a:	f88d 300e 	strb.w	r3, [sp, #14]
    364e:	f89d 301b 	ldrb.w	r3, [sp, #27]
    3652:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
    3656:	2310      	movs	r3, #16
    3658:	466a      	mov	r2, sp
    365a:	4619      	mov	r1, r3
    365c:	eb0d 0003 	add.w	r0, sp, r3
    3660:	f7ff fc9f 	bl	2fa2 <_copy>
	}

	sub_bytes(state);
	shift_rows(state);
	add_round_key(state, s->words + Nb*(i+1));
    3664:	1c6b      	adds	r3, r5, #1
    3666:	011b      	lsls	r3, r3, #4
    3668:	18fa      	adds	r2, r7, r3
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
    366a:	58fb      	ldr	r3, [r7, r3]
    366c:	f89d 1010 	ldrb.w	r1, [sp, #16]
    3670:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
    3674:	f88d 1010 	strb.w	r1, [sp, #16]
    3678:	f3c3 4107 	ubfx	r1, r3, #16, #8
    367c:	f89d 0011 	ldrb.w	r0, [sp, #17]
    3680:	4041      	eors	r1, r0
    3682:	f88d 1011 	strb.w	r1, [sp, #17]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
    3686:	f3c3 2107 	ubfx	r1, r3, #8, #8
    368a:	f89d 0012 	ldrb.w	r0, [sp, #18]
    368e:	4041      	eors	r1, r0
    3690:	f88d 1012 	strb.w	r1, [sp, #18]
    3694:	b2db      	uxtb	r3, r3
    3696:	f89d 1013 	ldrb.w	r1, [sp, #19]
    369a:	404b      	eors	r3, r1
    369c:	f88d 3013 	strb.w	r3, [sp, #19]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
    36a0:	6853      	ldr	r3, [r2, #4]
    36a2:	f89d 1014 	ldrb.w	r1, [sp, #20]
    36a6:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
    36aa:	f88d 1014 	strb.w	r1, [sp, #20]
    36ae:	f3c3 4107 	ubfx	r1, r3, #16, #8
    36b2:	f89d 0015 	ldrb.w	r0, [sp, #21]
    36b6:	4041      	eors	r1, r0
    36b8:	f88d 1015 	strb.w	r1, [sp, #21]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
    36bc:	f3c3 2107 	ubfx	r1, r3, #8, #8
    36c0:	f89d 0016 	ldrb.w	r0, [sp, #22]
    36c4:	4041      	eors	r1, r0
    36c6:	f88d 1016 	strb.w	r1, [sp, #22]
    36ca:	b2db      	uxtb	r3, r3
    36cc:	f89d 1017 	ldrb.w	r1, [sp, #23]
    36d0:	404b      	eors	r3, r1
    36d2:	f88d 3017 	strb.w	r3, [sp, #23]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
    36d6:	6893      	ldr	r3, [r2, #8]
    36d8:	f89d 1018 	ldrb.w	r1, [sp, #24]
    36dc:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
    36e0:	f88d 1018 	strb.w	r1, [sp, #24]
    36e4:	f3c3 4107 	ubfx	r1, r3, #16, #8
    36e8:	f89d 0019 	ldrb.w	r0, [sp, #25]
    36ec:	4041      	eors	r1, r0
    36ee:	f88d 1019 	strb.w	r1, [sp, #25]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
    36f2:	f3c3 2107 	ubfx	r1, r3, #8, #8
    36f6:	f89d 001a 	ldrb.w	r0, [sp, #26]
    36fa:	4041      	eors	r1, r0
    36fc:	f88d 101a 	strb.w	r1, [sp, #26]
    3700:	b2db      	uxtb	r3, r3
    3702:	f89d 101b 	ldrb.w	r1, [sp, #27]
    3706:	404b      	eors	r3, r1
    3708:	f88d 301b 	strb.w	r3, [sp, #27]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
    370c:	68d3      	ldr	r3, [r2, #12]
    370e:	f89d 201c 	ldrb.w	r2, [sp, #28]
    3712:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
    3716:	f88d 201c 	strb.w	r2, [sp, #28]
    371a:	f3c3 4207 	ubfx	r2, r3, #16, #8
    371e:	f89d 101d 	ldrb.w	r1, [sp, #29]
    3722:	404a      	eors	r2, r1
    3724:	f88d 201d 	strb.w	r2, [sp, #29]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
    3728:	f3c3 2207 	ubfx	r2, r3, #8, #8
    372c:	f89d 101e 	ldrb.w	r1, [sp, #30]
    3730:	404a      	eors	r2, r1
    3732:	f88d 201e 	strb.w	r2, [sp, #30]
    3736:	b2db      	uxtb	r3, r3
    3738:	f89d 201f 	ldrb.w	r2, [sp, #31]
    373c:	4053      	eors	r3, r2
    373e:	f88d 301f 	strb.w	r3, [sp, #31]

	(void)_copy(out, sizeof(state), state, sizeof(state));
    3742:	2310      	movs	r3, #16
    3744:	eb0d 0203 	add.w	r2, sp, r3
    3748:	4619      	mov	r1, r3
    374a:	4640      	mov	r0, r8
    374c:	f7ff fc29 	bl	2fa2 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
    3750:	2210      	movs	r2, #16
    3752:	2100      	movs	r1, #0
    3754:	eb0d 0002 	add.w	r0, sp, r2
    3758:	f7ff fc2f 	bl	2fba <_set>

	return TC_CRYPTO_SUCCESS;
    375c:	2001      	movs	r0, #1
}
    375e:	b008      	add	sp, #32
    3760:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TC_CRYPTO_FAIL;
    3764:	2000      	movs	r0, #0
    3766:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
    3768:	2000      	movs	r0, #0
    376a:	e7f8      	b.n	375e <tc_aes_encrypt+0x6ce>
		return TC_CRYPTO_FAIL;
    376c:	2000      	movs	r0, #0
    376e:	e7f6      	b.n	375e <tc_aes_encrypt+0x6ce>
    3770:	0002f190 	.word	0x0002f190

00003774 <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
    3774:	b430      	push	{r4, r5}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);
    3776:	f101 020f 	add.w	r2, r1, #15

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
    377a:	f991 3000 	ldrsb.w	r3, [r1]
    377e:	2b00      	cmp	r3, #0
    3780:	db0d      	blt.n	379e <gf_double+0x2a>
    3782:	2300      	movs	r3, #0

	out += (TC_AES_BLOCK_SIZE - 1);
    3784:	300f      	adds	r0, #15
	for (;;) {
		*out-- = (*x << 1) ^ carry;
    3786:	1e45      	subs	r5, r0, #1
    3788:	7814      	ldrb	r4, [r2, #0]
    378a:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
    378e:	7003      	strb	r3, [r0, #0]
		if (x == in) {
    3790:	428a      	cmp	r2, r1
    3792:	d006      	beq.n	37a2 <gf_double+0x2e>
			break;
		}
		carry = *x-- >> 7;
    3794:	7813      	ldrb	r3, [r2, #0]
    3796:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
    3798:	4628      	mov	r0, r5
		carry = *x-- >> 7;
    379a:	3a01      	subs	r2, #1
		*out-- = (*x << 1) ^ carry;
    379c:	e7f3      	b.n	3786 <gf_double+0x12>
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
    379e:	2387      	movs	r3, #135	; 0x87
    37a0:	e7f0      	b.n	3784 <gf_double+0x10>
	}
}
    37a2:	bc30      	pop	{r4, r5}
    37a4:	4770      	bx	lr

000037a6 <tc_cmac_erase>:
	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
	if (s == (TCCmacState_t) 0) {
    37a6:	b130      	cbz	r0, 37b6 <tc_cmac_erase+0x10>
{
    37a8:	b508      	push	{r3, lr}
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
    37aa:	2258      	movs	r2, #88	; 0x58
    37ac:	2100      	movs	r1, #0
    37ae:	f7ff fc04 	bl	2fba <_set>

	return TC_CRYPTO_SUCCESS;
    37b2:	2001      	movs	r0, #1
    37b4:	bd08      	pop	{r3, pc}
		return TC_CRYPTO_FAIL;
    37b6:	2000      	movs	r0, #0
    37b8:	4770      	bx	lr

000037ba <tc_cmac_init>:
}

int tc_cmac_init(TCCmacState_t s)
{
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
    37ba:	b1a0      	cbz	r0, 37e6 <tc_cmac_init+0x2c>
{
    37bc:	b510      	push	{r4, lr}
    37be:	4604      	mov	r4, r0
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
    37c0:	2210      	movs	r2, #16
    37c2:	2100      	movs	r1, #0
    37c4:	f7ff fbf9 	bl	2fba <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
    37c8:	2210      	movs	r2, #16
    37ca:	2100      	movs	r1, #0
    37cc:	f104 0030 	add.w	r0, r4, #48	; 0x30
    37d0:	f7ff fbf3 	bl	2fba <_set>
	s->leftover_offset = 0;
    37d4:	2300      	movs	r3, #0
    37d6:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
    37d8:	2200      	movs	r2, #0
    37da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    37de:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50

	return TC_CRYPTO_SUCCESS;
    37e2:	2001      	movs	r0, #1
    37e4:	bd10      	pop	{r4, pc}
		return TC_CRYPTO_FAIL;
    37e6:	2000      	movs	r0, #0
    37e8:	4770      	bx	lr

000037ea <tc_cmac_setup>:
	if (s == (TCCmacState_t) 0 ||
    37ea:	b338      	cbz	r0, 383c <tc_cmac_setup+0x52>
{
    37ec:	b570      	push	{r4, r5, r6, lr}
    37ee:	4604      	mov	r4, r0
	if (s == (TCCmacState_t) 0 ||
    37f0:	b331      	cbz	r1, 3840 <tc_cmac_setup+0x56>
    37f2:	4616      	mov	r6, r2
    37f4:	460d      	mov	r5, r1
	_set(s, 0, sizeof(*s));
    37f6:	2258      	movs	r2, #88	; 0x58
    37f8:	2100      	movs	r1, #0
    37fa:	f7ff fbde 	bl	2fba <_set>
	s->sched = sched;
    37fe:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
    3800:	4629      	mov	r1, r5
    3802:	4630      	mov	r0, r6
    3804:	f7ff fbe6 	bl	2fd4 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
    3808:	2210      	movs	r2, #16
    380a:	2100      	movs	r1, #0
    380c:	4620      	mov	r0, r4
    380e:	f7ff fbd4 	bl	2fba <_set>
	tc_aes_encrypt(s->iv, s->iv, s->sched);
    3812:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    3814:	4621      	mov	r1, r4
    3816:	4620      	mov	r0, r4
    3818:	f7ff fc3a 	bl	3090 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
    381c:	f104 0510 	add.w	r5, r4, #16
    3820:	4621      	mov	r1, r4
    3822:	4628      	mov	r0, r5
    3824:	f7ff ffa6 	bl	3774 <gf_double>
	gf_double (s->K2, s->K1);
    3828:	4629      	mov	r1, r5
    382a:	f104 0020 	add.w	r0, r4, #32
    382e:	f7ff ffa1 	bl	3774 <gf_double>
	tc_cmac_init(s);
    3832:	4620      	mov	r0, r4
    3834:	f7ff ffc1 	bl	37ba <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
    3838:	2001      	movs	r0, #1
    383a:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
    383c:	2000      	movs	r0, #0
    383e:	4770      	bx	lr
    3840:	2000      	movs	r0, #0
}
    3842:	bd70      	pop	{r4, r5, r6, pc}

00003844 <tc_cmac_update>:
int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
    3844:	2800      	cmp	r0, #0
    3846:	d05f      	beq.n	3908 <tc_cmac_update+0xc4>
{
    3848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    384a:	460d      	mov	r5, r1
    384c:	4616      	mov	r6, r2
    384e:	4604      	mov	r4, r0
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
    3850:	2a00      	cmp	r2, #0
    3852:	d05b      	beq.n	390c <tc_cmac_update+0xc8>
		return  TC_CRYPTO_SUCCESS;
	}
	if (data == (const uint8_t *) 0) {
    3854:	2900      	cmp	r1, #0
    3856:	d05b      	beq.n	3910 <tc_cmac_update+0xcc>
		return TC_CRYPTO_FAIL;
	}

	if (s->countdown == 0) {
    3858:	e9d0 2314 	ldrd	r2, r3, [r0, #80]	; 0x50
    385c:	ea52 0103 	orrs.w	r1, r2, r3
    3860:	d058      	beq.n	3914 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}

	s->countdown--;
    3862:	f112 32ff 	adds.w	r2, r2, #4294967295	; 0xffffffff
    3866:	f143 33ff 	adc.w	r3, r3, #4294967295	; 0xffffffff
    386a:	e9c0 2314 	strd	r2, r3, [r0, #80]	; 0x50

	if (s->leftover_offset > 0) {
    386e:	6c40      	ldr	r0, [r0, #68]	; 0x44
    3870:	2800      	cmp	r0, #0
    3872:	d038      	beq.n	38e6 <tc_cmac_update+0xa2>
		/* last data added to s didn't end on a TC_AES_BLOCK_SIZE byte boundary */
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
    3874:	f1c0 0710 	rsb	r7, r0, #16

		if (data_length < remaining_space) {
    3878:	42be      	cmp	r6, r7
    387a:	d30b      	bcc.n	3894 <tc_cmac_update+0x50>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
			s->leftover_offset += data_length;
			return TC_CRYPTO_SUCCESS;
		}
		/* leftover block is now full; encrypt it first */
		_copy(&s->leftover[s->leftover_offset],
    387c:	3030      	adds	r0, #48	; 0x30
    387e:	463b      	mov	r3, r7
    3880:	462a      	mov	r2, r5
    3882:	4639      	mov	r1, r7
    3884:	4420      	add	r0, r4
    3886:	f7ff fb8c 	bl	2fa2 <_copy>
		      remaining_space,
		      data,
		      remaining_space);
		data_length -= remaining_space;
    388a:	1bf6      	subs	r6, r6, r7
		data += remaining_space;
    388c:	443d      	add	r5, r7
		s->leftover_offset = 0;
    388e:	2300      	movs	r3, #0
    3890:	6463      	str	r3, [r4, #68]	; 0x44

		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
    3892:	e012      	b.n	38ba <tc_cmac_update+0x76>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
    3894:	3030      	adds	r0, #48	; 0x30
    3896:	4633      	mov	r3, r6
    3898:	462a      	mov	r2, r5
    389a:	4631      	mov	r1, r6
    389c:	4420      	add	r0, r4
    389e:	f7ff fb80 	bl	2fa2 <_copy>
			s->leftover_offset += data_length;
    38a2:	6c63      	ldr	r3, [r4, #68]	; 0x44
    38a4:	4433      	add	r3, r6
    38a6:	6463      	str	r3, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
    38a8:	2001      	movs	r0, #1
    38aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			s->iv[i] ^= s->leftover[i];
    38ac:	18e2      	adds	r2, r4, r3
    38ae:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
    38b2:	5ce1      	ldrb	r1, [r4, r3]
    38b4:	404a      	eors	r2, r1
    38b6:	54e2      	strb	r2, [r4, r3]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
    38b8:	3301      	adds	r3, #1
    38ba:	2b0f      	cmp	r3, #15
    38bc:	d9f6      	bls.n	38ac <tc_cmac_update+0x68>
		}
		tc_aes_encrypt(s->iv, s->iv, s->sched);
    38be:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    38c0:	4621      	mov	r1, r4
    38c2:	4620      	mov	r0, r4
    38c4:	f7ff fbe4 	bl	3090 <tc_aes_encrypt>
    38c8:	e00d      	b.n	38e6 <tc_cmac_update+0xa2>
	}

	/* CBC encrypt each (except the last) of the data blocks */
	while (data_length > TC_AES_BLOCK_SIZE) {
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
			s->iv[i] ^= data[i];
    38ca:	5cea      	ldrb	r2, [r5, r3]
    38cc:	5ce1      	ldrb	r1, [r4, r3]
    38ce:	404a      	eors	r2, r1
    38d0:	54e2      	strb	r2, [r4, r3]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
    38d2:	3301      	adds	r3, #1
    38d4:	2b0f      	cmp	r3, #15
    38d6:	d9f8      	bls.n	38ca <tc_cmac_update+0x86>
		}
		tc_aes_encrypt(s->iv, s->iv, s->sched);
    38d8:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    38da:	4621      	mov	r1, r4
    38dc:	4620      	mov	r0, r4
    38de:	f7ff fbd7 	bl	3090 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
    38e2:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
    38e4:	3e10      	subs	r6, #16
	while (data_length > TC_AES_BLOCK_SIZE) {
    38e6:	2e10      	cmp	r6, #16
    38e8:	d901      	bls.n	38ee <tc_cmac_update+0xaa>
    38ea:	2300      	movs	r3, #0
    38ec:	e7f2      	b.n	38d4 <tc_cmac_update+0x90>
	}

	if (data_length > 0) {
    38ee:	b90e      	cbnz	r6, 38f4 <tc_cmac_update+0xb0>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
    38f0:	2001      	movs	r0, #1
}
    38f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		_copy(s->leftover, data_length, data, data_length);
    38f4:	4633      	mov	r3, r6
    38f6:	462a      	mov	r2, r5
    38f8:	4631      	mov	r1, r6
    38fa:	f104 0030 	add.w	r0, r4, #48	; 0x30
    38fe:	f7ff fb50 	bl	2fa2 <_copy>
		s->leftover_offset = data_length;
    3902:	6466      	str	r6, [r4, #68]	; 0x44
	return TC_CRYPTO_SUCCESS;
    3904:	2001      	movs	r0, #1
    3906:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    3908:	2000      	movs	r0, #0
    390a:	4770      	bx	lr
		return  TC_CRYPTO_SUCCESS;
    390c:	2001      	movs	r0, #1
    390e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    3910:	2000      	movs	r0, #0
    3912:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    3914:	2000      	movs	r0, #0
    3916:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00003918 <tc_cmac_final>:
{
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
    3918:	b370      	cbz	r0, 3978 <tc_cmac_final+0x60>
{
    391a:	b570      	push	{r4, r5, r6, lr}
    391c:	4606      	mov	r6, r0
	if (tag == (uint8_t *) 0 ||
    391e:	b369      	cbz	r1, 397c <tc_cmac_final+0x64>
    3920:	460d      	mov	r5, r1
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
    3922:	6c4a      	ldr	r2, [r1, #68]	; 0x44
    3924:	2a10      	cmp	r2, #16
    3926:	d010      	beq.n	394a <tc_cmac_final+0x32>
		k = (uint8_t *) s->K1;
	} else {
		/* the final message block is not a full-sized  block */
		size_t remaining = TC_AES_BLOCK_SIZE - s->leftover_offset;

		_set(&s->leftover[s->leftover_offset], 0, remaining);
    3928:	f102 0030 	add.w	r0, r2, #48	; 0x30
    392c:	f1c2 0210 	rsb	r2, r2, #16
    3930:	2100      	movs	r1, #0
    3932:	4428      	add	r0, r5
    3934:	f7ff fb41 	bl	2fba <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
    3938:	6c6b      	ldr	r3, [r5, #68]	; 0x44
    393a:	442b      	add	r3, r5
    393c:	2280      	movs	r2, #128	; 0x80
    393e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
    3942:	f105 0120 	add.w	r1, r5, #32
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
    3946:	2300      	movs	r3, #0
    3948:	e00a      	b.n	3960 <tc_cmac_final+0x48>
		k = (uint8_t *) s->K1;
    394a:	3110      	adds	r1, #16
    394c:	e7fb      	b.n	3946 <tc_cmac_final+0x2e>
		s->iv[i] ^= s->leftover[i] ^ k[i];
    394e:	18ea      	adds	r2, r5, r3
    3950:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
    3954:	5ccc      	ldrb	r4, [r1, r3]
    3956:	4054      	eors	r4, r2
    3958:	5cea      	ldrb	r2, [r5, r3]
    395a:	4062      	eors	r2, r4
    395c:	54ea      	strb	r2, [r5, r3]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
    395e:	3301      	adds	r3, #1
    3960:	2b0f      	cmp	r3, #15
    3962:	d9f4      	bls.n	394e <tc_cmac_final+0x36>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
    3964:	6caa      	ldr	r2, [r5, #72]	; 0x48
    3966:	4629      	mov	r1, r5
    3968:	4630      	mov	r0, r6
    396a:	f7ff fb91 	bl	3090 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
    396e:	4628      	mov	r0, r5
    3970:	f7ff ff19 	bl	37a6 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
    3974:	2001      	movs	r0, #1
    3976:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
    3978:	2000      	movs	r0, #0
    397a:	4770      	bx	lr
    397c:	2000      	movs	r0, #0
}
    397e:	bd70      	pop	{r4, r5, r6, pc}

00003980 <_mbedtls_init>:
	ARG_UNUSED(device);

	init_heap();

	return 0;
}
    3980:	2000      	movs	r0, #0
    3982:	4770      	bx	lr

00003984 <ah>:

#define BT_DBG_ENABLED IS_ENABLED(CONFIG_BT_DEBUG_RPA)
#include "common/log.h"

static int ah(const u8_t irk[16], const u8_t r[3], u8_t out[3])
{
    3984:	b530      	push	{r4, r5, lr}
    3986:	b085      	sub	sp, #20
    3988:	4604      	mov	r4, r0
    398a:	4615      	mov	r5, r2
	int err;

	BT_DBG("irk %s, r %s", bt_hex(irk, 16), bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
    398c:	2203      	movs	r2, #3
    398e:	4668      	mov	r0, sp
    3990:	f7fc fc96 	bl	2c0 <memcpy>
	memset(res + 3, 0, 13);
    3994:	220d      	movs	r2, #13
    3996:	2100      	movs	r1, #0
    3998:	f10d 0003 	add.w	r0, sp, #3
    399c:	f027 f872 	bl	2aa84 <memset>

	err = bt_encrypt_le(irk, res, res);
    39a0:	466a      	mov	r2, sp
    39a2:	4669      	mov	r1, sp
    39a4:	4620      	mov	r0, r4
    39a6:	f00d f89f 	bl	10ae8 <bt_encrypt_le>
	if (err) {
    39aa:	4604      	mov	r4, r0
    39ac:	b110      	cbz	r0, 39b4 <ah+0x30>
	 * result of ah.
	 */
	memcpy(out, res, 3);

	return 0;
}
    39ae:	4620      	mov	r0, r4
    39b0:	b005      	add	sp, #20
    39b2:	bd30      	pop	{r4, r5, pc}
	memcpy(out, res, 3);
    39b4:	2203      	movs	r2, #3
    39b6:	4669      	mov	r1, sp
    39b8:	4628      	mov	r0, r5
    39ba:	f7fc fc81 	bl	2c0 <memcpy>
	return 0;
    39be:	e7f6      	b.n	39ae <ah+0x2a>

000039c0 <bt_rpa_irk_matches>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const u8_t irk[16], const bt_addr_t *addr)
{
    39c0:	b510      	push	{r4, lr}
    39c2:	b082      	sub	sp, #8
    39c4:	460c      	mov	r4, r1
	u8_t hash[3];
	int err;

	BT_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
    39c6:	aa01      	add	r2, sp, #4
    39c8:	3103      	adds	r1, #3
    39ca:	f7ff ffdb 	bl	3984 <ah>
	if (err) {
    39ce:	b110      	cbz	r0, 39d6 <bt_rpa_irk_matches+0x16>
		return false;
    39d0:	2000      	movs	r0, #0
	}

	return !memcmp(addr->val, hash, 3);
}
    39d2:	b002      	add	sp, #8
    39d4:	bd10      	pop	{r4, pc}
	return !memcmp(addr->val, hash, 3);
    39d6:	2203      	movs	r2, #3
    39d8:	a901      	add	r1, sp, #4
    39da:	4620      	mov	r0, r4
    39dc:	f026 ffbe 	bl	2a95c <memcmp>
    39e0:	fab0 f080 	clz	r0, r0
    39e4:	0940      	lsrs	r0, r0, #5
    39e6:	e7f4      	b.n	39d2 <bt_rpa_irk_matches+0x12>

000039e8 <bt_rpa_create>:
#endif

#if defined(CONFIG_BT_PRIVACY) || defined(CONFIG_BT_CTLR_PRIVACY)
int bt_rpa_create(const u8_t irk[16], bt_addr_t *rpa)
{
    39e8:	b570      	push	{r4, r5, r6, lr}
    39ea:	4606      	mov	r6, r0
    39ec:	460c      	mov	r4, r1
	int err;

	err = bt_rand(rpa->val + 3, 3);
    39ee:	1ccd      	adds	r5, r1, #3
    39f0:	2103      	movs	r1, #3
    39f2:	4628      	mov	r0, r5
    39f4:	f00d f85c 	bl	10ab0 <bt_rand>
	if (err) {
    39f8:	4603      	mov	r3, r0
    39fa:	b108      	cbz	r0, 3a00 <bt_rpa_create+0x18>
	}

	BT_DBG("Created RPA %s", bt_addr_str((bt_addr_t *)rpa->val));

	return 0;
}
    39fc:	4618      	mov	r0, r3
    39fe:	bd70      	pop	{r4, r5, r6, pc}
	BT_ADDR_SET_RPA(rpa);
    3a00:	f994 3005 	ldrsb.w	r3, [r4, #5]
    3a04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    3a08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    3a0c:	7163      	strb	r3, [r4, #5]
	err = ah(irk, rpa->val + 3, rpa->val);
    3a0e:	4622      	mov	r2, r4
    3a10:	4629      	mov	r1, r5
    3a12:	4630      	mov	r0, r6
    3a14:	f7ff ffb6 	bl	3984 <ah>
    3a18:	4603      	mov	r3, r0
    3a1a:	e7ef      	b.n	39fc <bt_rpa_create+0x14>

00003a1c <uuid_to_uuid128>:
	.val = { 0xfb, 0x34, 0x9b, 0x5f, 0x80, 0x00, 0x00, 0x80,
		 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
    3a1c:	b570      	push	{r4, r5, r6, lr}
    3a1e:	4605      	mov	r5, r0
    3a20:	460c      	mov	r4, r1
	switch (src->type) {
    3a22:	7803      	ldrb	r3, [r0, #0]
    3a24:	2b01      	cmp	r3, #1
    3a26:	d010      	beq.n	3a4a <uuid_to_uuid128+0x2e>
    3a28:	b113      	cbz	r3, 3a30 <uuid_to_uuid128+0x14>
    3a2a:	2b02      	cmp	r3, #2
    3a2c:	d01f      	beq.n	3a6e <uuid_to_uuid128+0x52>
    3a2e:	bd70      	pop	{r4, r5, r6, pc}
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
    3a30:	4e12      	ldr	r6, [pc, #72]	; (3a7c <uuid_to_uuid128+0x60>)
    3a32:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    3a34:	6020      	str	r0, [r4, #0]
    3a36:	6061      	str	r1, [r4, #4]
    3a38:	60a2      	str	r2, [r4, #8]
    3a3a:	60e3      	str	r3, [r4, #12]
    3a3c:	7833      	ldrb	r3, [r6, #0]
    3a3e:	7423      	strb	r3, [r4, #16]
		sys_put_le16(BT_UUID_16(src)->val,
    3a40:	886b      	ldrh	r3, [r5, #2]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    3a42:	7363      	strb	r3, [r4, #13]
	dst[1] = val >> 8;
    3a44:	0a1b      	lsrs	r3, r3, #8
    3a46:	73a3      	strb	r3, [r4, #14]
    3a48:	bd70      	pop	{r4, r5, r6, pc}
			     &dst->val[UUID_16_BASE_OFFSET]);
		return;
	case BT_UUID_TYPE_32:
		*dst = uuid128_base;
    3a4a:	4e0c      	ldr	r6, [pc, #48]	; (3a7c <uuid_to_uuid128+0x60>)
    3a4c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    3a4e:	6020      	str	r0, [r4, #0]
    3a50:	6061      	str	r1, [r4, #4]
    3a52:	60a2      	str	r2, [r4, #8]
    3a54:	60e3      	str	r3, [r4, #12]
    3a56:	7833      	ldrb	r3, [r6, #0]
    3a58:	7423      	strb	r3, [r4, #16]
		sys_put_le32(BT_UUID_32(src)->val,
    3a5a:	686b      	ldr	r3, [r5, #4]
	dst[0] = val;
    3a5c:	7363      	strb	r3, [r4, #13]
	dst[1] = val >> 8;
    3a5e:	f3c3 2207 	ubfx	r2, r3, #8, #8
    3a62:	73a2      	strb	r2, [r4, #14]
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(u32_t val, u8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
    3a64:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    3a66:	73e3      	strb	r3, [r4, #15]
	dst[1] = val >> 8;
    3a68:	0a1b      	lsrs	r3, r3, #8
    3a6a:	7423      	strb	r3, [r4, #16]
    3a6c:	bd70      	pop	{r4, r5, r6, pc}
    3a6e:	4608      	mov	r0, r1
    3a70:	4629      	mov	r1, r5
			     &dst->val[UUID_16_BASE_OFFSET]);
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
    3a72:	2211      	movs	r2, #17
    3a74:	f7fc fc24 	bl	2c0 <memcpy>
    3a78:	bd70      	pop	{r4, r5, r6, pc}
    3a7a:	bf00      	nop
    3a7c:	0002f428 	.word	0x0002f428

00003a80 <uuid128_cmp>:
		return;
	}
}

static int uuid128_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
    3a80:	b510      	push	{r4, lr}
    3a82:	b08a      	sub	sp, #40	; 0x28
    3a84:	460c      	mov	r4, r1
	struct bt_uuid_128 uuid1, uuid2;

	uuid_to_uuid128(u1, &uuid1);
    3a86:	a905      	add	r1, sp, #20
    3a88:	f7ff ffc8 	bl	3a1c <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
    3a8c:	4669      	mov	r1, sp
    3a8e:	4620      	mov	r0, r4
    3a90:	f7ff ffc4 	bl	3a1c <uuid_to_uuid128>

	return memcmp(uuid1.val, uuid2.val, 16);
    3a94:	2210      	movs	r2, #16
    3a96:	f10d 0101 	add.w	r1, sp, #1
    3a9a:	f10d 0015 	add.w	r0, sp, #21
    3a9e:	f026 ff5d 	bl	2a95c <memcmp>
}
    3aa2:	b00a      	add	sp, #40	; 0x28
    3aa4:	bd10      	pop	{r4, pc}

00003aa6 <bt_uuid_cmp>:

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
    3aa6:	b508      	push	{r3, lr}
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type)
    3aa8:	7803      	ldrb	r3, [r0, #0]
    3aaa:	780a      	ldrb	r2, [r1, #0]
    3aac:	4293      	cmp	r3, r2
    3aae:	d107      	bne.n	3ac0 <bt_uuid_cmp+0x1a>
		return uuid128_cmp(u1, u2);

	switch (u1->type) {
    3ab0:	2b01      	cmp	r3, #1
    3ab2:	d00c      	beq.n	3ace <bt_uuid_cmp+0x28>
    3ab4:	b13b      	cbz	r3, 3ac6 <bt_uuid_cmp+0x20>
    3ab6:	2b02      	cmp	r3, #2
    3ab8:	d00d      	beq.n	3ad6 <bt_uuid_cmp+0x30>
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
    3aba:	f06f 0015 	mvn.w	r0, #21
}
    3abe:	bd08      	pop	{r3, pc}
		return uuid128_cmp(u1, u2);
    3ac0:	f7ff ffde 	bl	3a80 <uuid128_cmp>
    3ac4:	bd08      	pop	{r3, pc}
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
    3ac6:	8840      	ldrh	r0, [r0, #2]
    3ac8:	884b      	ldrh	r3, [r1, #2]
    3aca:	1ac0      	subs	r0, r0, r3
    3acc:	bd08      	pop	{r3, pc}
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
    3ace:	6840      	ldr	r0, [r0, #4]
    3ad0:	684b      	ldr	r3, [r1, #4]
    3ad2:	1ac0      	subs	r0, r0, r3
    3ad4:	bd08      	pop	{r3, pc}
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
    3ad6:	2210      	movs	r2, #16
    3ad8:	3101      	adds	r1, #1
    3ada:	3001      	adds	r0, #1
    3adc:	f026 ff3e 	bl	2a95c <memcmp>
    3ae0:	bd08      	pop	{r3, pc}
	...

00003ae4 <le_dhkey_complete>:
		cb->func(evt->status ? NULL : evt->key);
	}
}

static void le_dhkey_complete(struct net_buf *buf)
{
    3ae4:	b508      	push	{r3, lr}
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;
    3ae6:	6880      	ldr	r0, [r0, #8]

	BT_DBG("status: 0x%x", evt->status);

	if (dh_key_cb) {
    3ae8:	4b06      	ldr	r3, [pc, #24]	; (3b04 <le_dhkey_complete+0x20>)
    3aea:	681b      	ldr	r3, [r3, #0]
    3aec:	b133      	cbz	r3, 3afc <le_dhkey_complete+0x18>
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    3aee:	7802      	ldrb	r2, [r0, #0]
    3af0:	b92a      	cbnz	r2, 3afe <le_dhkey_complete+0x1a>
    3af2:	3001      	adds	r0, #1
    3af4:	4798      	blx	r3
		dh_key_cb = NULL;
    3af6:	2200      	movs	r2, #0
    3af8:	4b02      	ldr	r3, [pc, #8]	; (3b04 <le_dhkey_complete+0x20>)
    3afa:	601a      	str	r2, [r3, #0]
    3afc:	bd08      	pop	{r3, pc}
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    3afe:	2000      	movs	r0, #0
    3b00:	e7f8      	b.n	3af4 <le_dhkey_complete+0x10>
    3b02:	bf00      	nop
    3b04:	2000026c 	.word	0x2000026c

00003b08 <read_local_ver_complete>:
}


static void read_local_ver_complete(struct net_buf *buf)
{
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
    3b08:	6882      	ldr	r2, [r0, #8]

	BT_DBG("status %u", rp->status);

	bt_dev.hci_version = rp->hci_version;
    3b0a:	7851      	ldrb	r1, [r2, #1]
    3b0c:	4b06      	ldr	r3, [pc, #24]	; (3b28 <read_local_ver_complete+0x20>)
    3b0e:	7399      	strb	r1, [r3, #14]
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    3b10:	8851      	ldrh	r1, [r2, #2]
    3b12:	8219      	strh	r1, [r3, #16]
	bt_dev.lmp_version = rp->lmp_version;
    3b14:	7911      	ldrb	r1, [r2, #4]
    3b16:	73d9      	strb	r1, [r3, #15]
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    3b18:	f8b2 1007 	ldrh.w	r1, [r2, #7]
    3b1c:	8259      	strh	r1, [r3, #18]
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    3b1e:	f8b2 2005 	ldrh.w	r2, [r2, #5]
    3b22:	829a      	strh	r2, [r3, #20]
    3b24:	4770      	bx	lr
    3b26:	bf00      	nop
    3b28:	2000b808 	.word	0x2000b808

00003b2c <le_read_supp_states_complete>:

	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
}

static void le_read_supp_states_complete(struct net_buf *buf)
{
    3b2c:	b410      	push	{r4}
	struct bt_hci_rp_le_read_supp_states *rp = (void *)buf->data;
    3b2e:	6883      	ldr	r3, [r0, #8]
 *
 *  @return 16-bit integer in host endianness.
 */
static inline u16_t sys_get_le16(const u8_t src[2])
{
	return ((u16_t)src[1] << 8) | src[0];
    3b30:	7a1a      	ldrb	r2, [r3, #8]
    3b32:	79dc      	ldrb	r4, [r3, #7]
    3b34:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
    3b38:	7999      	ldrb	r1, [r3, #6]
    3b3a:	795a      	ldrb	r2, [r3, #5]
    3b3c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 *
 *  @return 64-bit integer in host endianness.
 */
static inline u64_t sys_get_le64(const u8_t src[8])
{
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    3b40:	2000      	movs	r0, #0
    3b42:	ea42 4104 	orr.w	r1, r2, r4, lsl #16
	return ((u16_t)src[1] << 8) | src[0];
    3b46:	791c      	ldrb	r4, [r3, #4]
    3b48:	78da      	ldrb	r2, [r3, #3]
    3b4a:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
    3b4e:	789c      	ldrb	r4, [r3, #2]
    3b50:	785b      	ldrb	r3, [r3, #1]
    3b52:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
	return ((u32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
    3b56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    3b5a:	4318      	orrs	r0, r3

	BT_DBG("status %u", rp->status);

	bt_dev.le.states = sys_get_le64(rp->le_states);
    3b5c:	4b02      	ldr	r3, [pc, #8]	; (3b68 <le_read_supp_states_complete+0x3c>)
    3b5e:	e9c3 0120 	strd	r0, r1, [r3, #128]	; 0x80
}
    3b62:	bc10      	pop	{r4}
    3b64:	4770      	bx	lr
    3b66:	bf00      	nop
    3b68:	2000b808 	.word	0x2000b808

00003b6c <valid_adv_param>:
	}
}

static bool valid_adv_param(const struct bt_le_adv_param *param)
{
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    3b6c:	7803      	ldrb	r3, [r0, #0]
    3b6e:	f013 0f01 	tst.w	r3, #1
    3b72:	d106      	bne.n	3b82 <valid_adv_param+0x16>
		 * BT Core 4.2 [Vol 2, Part E, 7.8.5]
		 * The Advertising_Interval_Min and Advertising_Interval_Max
		 * shall not be set to less than 0x00A0 (100 ms) if the
		 * Advertising_Type is set to ADV_SCAN_IND or ADV_NONCONN_IND.
		 */
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
    3b74:	4b0c      	ldr	r3, [pc, #48]	; (3ba8 <valid_adv_param+0x3c>)
    3b76:	7b9b      	ldrb	r3, [r3, #14]
    3b78:	2b08      	cmp	r3, #8
    3b7a:	d802      	bhi.n	3b82 <valid_adv_param+0x16>
		    param->interval_min < 0x00a0) {
    3b7c:	8843      	ldrh	r3, [r0, #2]
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
    3b7e:	2b9f      	cmp	r3, #159	; 0x9f
    3b80:	d90c      	bls.n	3b9c <valid_adv_param+0x30>
			return false;
		}
	}

	if (param->interval_min > param->interval_max ||
    3b82:	8843      	ldrh	r3, [r0, #2]
    3b84:	8882      	ldrh	r2, [r0, #4]
    3b86:	4293      	cmp	r3, r2
    3b88:	d80a      	bhi.n	3ba0 <valid_adv_param+0x34>
    3b8a:	2b1f      	cmp	r3, #31
    3b8c:	d90a      	bls.n	3ba4 <valid_adv_param+0x38>
	    param->interval_min < 0x0020 || param->interval_max > 0x4000) {
    3b8e:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
    3b92:	d801      	bhi.n	3b98 <valid_adv_param+0x2c>
		return false;
	}

	return true;
    3b94:	2001      	movs	r0, #1
}
    3b96:	4770      	bx	lr
		return false;
    3b98:	2000      	movs	r0, #0
    3b9a:	4770      	bx	lr
			return false;
    3b9c:	2000      	movs	r0, #0
    3b9e:	4770      	bx	lr
		return false;
    3ba0:	2000      	movs	r0, #0
    3ba2:	4770      	bx	lr
    3ba4:	2000      	movs	r0, #0
    3ba6:	4770      	bx	lr
    3ba8:	2000b808 	.word	0x2000b808

00003bac <hci_reset_complete>:
	u8_t status = buf->data[0];
    3bac:	6883      	ldr	r3, [r0, #8]
    3bae:	781b      	ldrb	r3, [r3, #0]
	if (status) {
    3bb0:	b103      	cbz	r3, 3bb4 <hci_reset_complete+0x8>
    3bb2:	4770      	bx	lr
	scan_dev_found_cb = NULL;
    3bb4:	2200      	movs	r2, #0
    3bb6:	4b07      	ldr	r3, [pc, #28]	; (3bd4 <hci_reset_complete+0x28>)
    3bb8:	601a      	str	r2, [r3, #0]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    3bba:	4b07      	ldr	r3, [pc, #28]	; (3bd8 <hci_reset_complete+0x2c>)
    3bbc:	2201      	movs	r2, #1
    3bbe:	f3bf 8f5b 	dmb	ish
    3bc2:	e853 1f00 	ldrex	r1, [r3]
    3bc6:	e843 2000 	strex	r0, r2, [r3]
    3bca:	2800      	cmp	r0, #0
    3bcc:	d1f9      	bne.n	3bc2 <hci_reset_complete+0x16>
    3bce:	f3bf 8f5b 	dmb	ish
    3bd2:	e7ee      	b.n	3bb2 <hci_reset_complete+0x6>
    3bd4:	200002b8 	.word	0x200002b8
    3bd8:	2000b878 	.word	0x2000b878

00003bdc <read_local_features_complete>:
{
    3bdc:	b508      	push	{r3, lr}
	struct bt_hci_rp_read_local_features *rp = (void *)buf->data;
    3bde:	6881      	ldr	r1, [r0, #8]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    3be0:	2208      	movs	r2, #8
    3be2:	3101      	adds	r1, #1
    3be4:	4801      	ldr	r0, [pc, #4]	; (3bec <read_local_features_complete+0x10>)
    3be6:	f7fc fb6b 	bl	2c0 <memcpy>
    3bea:	bd08      	pop	{r3, pc}
    3bec:	2000b81e 	.word	0x2000b81e

00003bf0 <read_bdaddr_complete>:
{
    3bf0:	b510      	push	{r4, lr}
	struct bt_hci_rp_read_bd_addr *rp = (void *)buf->data;
    3bf2:	6881      	ldr	r1, [r0, #8]
	return memcmp(a, b, sizeof(*a));
}

static inline void bt_addr_copy(bt_addr_t *dst, const bt_addr_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    3bf4:	4c04      	ldr	r4, [pc, #16]	; (3c08 <read_bdaddr_complete+0x18>)
    3bf6:	2206      	movs	r2, #6
    3bf8:	3101      	adds	r1, #1
    3bfa:	1c60      	adds	r0, r4, #1
    3bfc:	f7fc fb60 	bl	2c0 <memcpy>
	bt_dev.id_addr.type = BT_ADDR_LE_PUBLIC;
    3c00:	2300      	movs	r3, #0
    3c02:	7023      	strb	r3, [r4, #0]
    3c04:	bd10      	pop	{r4, pc}
    3c06:	bf00      	nop
    3c08:	2000b808 	.word	0x2000b808

00003c0c <read_supported_commands_complete>:
{
    3c0c:	b508      	push	{r3, lr}
	struct bt_hci_rp_read_supported_commands *rp = (void *)buf->data;
    3c0e:	6881      	ldr	r1, [r0, #8]
	memcpy(bt_dev.supported_commands, rp->commands,
    3c10:	2240      	movs	r2, #64	; 0x40
    3c12:	3101      	adds	r1, #1
    3c14:	4801      	ldr	r0, [pc, #4]	; (3c1c <read_supported_commands_complete+0x10>)
    3c16:	f7fc fb53 	bl	2c0 <memcpy>
    3c1a:	bd08      	pop	{r3, pc}
    3c1c:	2000b826 	.word	0x2000b826

00003c20 <read_le_features_complete>:
{
    3c20:	b508      	push	{r3, lr}
	struct bt_hci_rp_le_read_local_features *rp = (void *)buf->data;
    3c22:	6881      	ldr	r1, [r0, #8]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    3c24:	2208      	movs	r2, #8
    3c26:	3101      	adds	r1, #1
    3c28:	4801      	ldr	r0, [pc, #4]	; (3c30 <read_le_features_complete+0x10>)
    3c2a:	f7fc fb49 	bl	2c0 <memcpy>
    3c2e:	bd08      	pop	{r3, pc}
    3c30:	2000b880 	.word	0x2000b880

00003c34 <le_read_buffer_size_complete>:
{
    3c34:	b508      	push	{r3, lr}
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
    3c36:	6882      	ldr	r2, [r0, #8]
	bt_dev.le.mtu = sys_le16_to_cpu(rp->le_max_len);
    3c38:	f8b2 3001 	ldrh.w	r3, [r2, #1]
    3c3c:	b299      	uxth	r1, r3
    3c3e:	4807      	ldr	r0, [pc, #28]	; (3c5c <le_read_buffer_size_complete+0x28>)
    3c40:	f8a0 3088 	strh.w	r3, [r0, #136]	; 0x88
	if (!bt_dev.le.mtu) {
    3c44:	b901      	cbnz	r1, 3c48 <le_read_buffer_size_complete+0x14>
    3c46:	bd08      	pop	{r3, pc}
	le_max_num = min(rp->le_max_num, CONFIG_BT_CONN_TX_MAX);
    3c48:	78d1      	ldrb	r1, [r2, #3]
    3c4a:	2902      	cmp	r1, #2
    3c4c:	bf28      	it	cs
    3c4e:	2102      	movcs	r1, #2
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    3c50:	460a      	mov	r2, r1
    3c52:	308c      	adds	r0, #140	; 0x8c
    3c54:	f024 fd98 	bl	28788 <_impl_k_sem_init>
    3c58:	e7f5      	b.n	3c46 <le_read_buffer_size_complete+0x12>
    3c5a:	bf00      	nop
    3c5c:	2000b808 	.word	0x2000b808

00003c60 <read_buffer_size_complete>:
{
    3c60:	b508      	push	{r3, lr}
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
    3c62:	6882      	ldr	r2, [r0, #8]
	if (bt_dev.le.mtu) {
    3c64:	4b09      	ldr	r3, [pc, #36]	; (3c8c <read_buffer_size_complete+0x2c>)
    3c66:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
    3c6a:	b103      	cbz	r3, 3c6e <read_buffer_size_complete+0xe>
    3c6c:	bd08      	pop	{r3, pc}
	bt_dev.le.mtu = sys_le16_to_cpu(rp->acl_max_len);
    3c6e:	f8b2 3001 	ldrh.w	r3, [r2, #1]
    3c72:	4806      	ldr	r0, [pc, #24]	; (3c8c <read_buffer_size_complete+0x2c>)
    3c74:	f8a0 3088 	strh.w	r3, [r0, #136]	; 0x88
	pkts = sys_le16_to_cpu(rp->acl_max_num);
    3c78:	8891      	ldrh	r1, [r2, #4]
	pkts = min(pkts, CONFIG_BT_CONN_TX_MAX);
    3c7a:	2902      	cmp	r1, #2
    3c7c:	bf28      	it	cs
    3c7e:	2102      	movcs	r1, #2
    3c80:	460a      	mov	r2, r1
    3c82:	308c      	adds	r0, #140	; 0x8c
    3c84:	f024 fd80 	bl	28788 <_impl_k_sem_init>
    3c88:	e7f0      	b.n	3c6c <read_buffer_size_complete+0xc>
    3c8a:	bf00      	nop
    3c8c:	2000b808 	.word	0x2000b808

00003c90 <le_pkey_complete>:
{
    3c90:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_le_p256_public_key_complete *evt = (void *)buf->data;
    3c92:	6885      	ldr	r5, [r0, #8]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3c94:	4b17      	ldr	r3, [pc, #92]	; (3cf4 <le_pkey_complete+0x64>)
    3c96:	f3bf 8f5b 	dmb	ish
    3c9a:	e853 2f00 	ldrex	r2, [r3]
    3c9e:	f022 0210 	bic.w	r2, r2, #16
    3ca2:	e843 2100 	strex	r1, r2, [r3]
    3ca6:	2900      	cmp	r1, #0
    3ca8:	d1f7      	bne.n	3c9a <le_pkey_complete+0xa>
    3caa:	f3bf 8f5b 	dmb	ish
	if (!evt->status) {
    3cae:	782b      	ldrb	r3, [r5, #0]
    3cb0:	b113      	cbz	r3, 3cb8 <le_pkey_complete+0x28>
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    3cb2:	4b11      	ldr	r3, [pc, #68]	; (3cf8 <le_pkey_complete+0x68>)
    3cb4:	681c      	ldr	r4, [r3, #0]
    3cb6:	e015      	b.n	3ce4 <le_pkey_complete+0x54>
		memcpy(pub_key, evt->key, 64);
    3cb8:	2240      	movs	r2, #64	; 0x40
    3cba:	1c69      	adds	r1, r5, #1
    3cbc:	480f      	ldr	r0, [pc, #60]	; (3cfc <le_pkey_complete+0x6c>)
    3cbe:	f7fc faff 	bl	2c0 <memcpy>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    3cc2:	4b0c      	ldr	r3, [pc, #48]	; (3cf4 <le_pkey_complete+0x64>)
    3cc4:	f3bf 8f5b 	dmb	ish
    3cc8:	e853 2f00 	ldrex	r2, [r3]
    3ccc:	f042 0208 	orr.w	r2, r2, #8
    3cd0:	e843 2100 	strex	r1, r2, [r3]
    3cd4:	2900      	cmp	r1, #0
    3cd6:	d1f7      	bne.n	3cc8 <le_pkey_complete+0x38>
    3cd8:	f3bf 8f5b 	dmb	ish
    3cdc:	e7e9      	b.n	3cb2 <le_pkey_complete+0x22>
		cb->func(evt->status ? NULL : evt->key);
    3cde:	2000      	movs	r0, #0
    3ce0:	4798      	blx	r3
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    3ce2:	6864      	ldr	r4, [r4, #4]
    3ce4:	b12c      	cbz	r4, 3cf2 <le_pkey_complete+0x62>
		cb->func(evt->status ? NULL : evt->key);
    3ce6:	6823      	ldr	r3, [r4, #0]
    3ce8:	782a      	ldrb	r2, [r5, #0]
    3cea:	2a00      	cmp	r2, #0
    3cec:	d1f7      	bne.n	3cde <le_pkey_complete+0x4e>
    3cee:	1c68      	adds	r0, r5, #1
    3cf0:	e7f6      	b.n	3ce0 <le_pkey_complete+0x50>
}
    3cf2:	bd38      	pop	{r3, r4, r5, pc}
    3cf4:	2000b878 	.word	0x2000b878
    3cf8:	200002b0 	.word	0x200002b0
    3cfc:	20000270 	.word	0x20000270

00003d00 <hci_acl>:
{
    3d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3d02:	4604      	mov	r4, r0
	struct bt_hci_acl_hdr *hdr = (void *)buf->data;
    3d04:	6883      	ldr	r3, [r0, #8]
	u16_t handle, len = sys_le16_to_cpu(hdr->len);
    3d06:	885e      	ldrh	r6, [r3, #2]
	handle = sys_le16_to_cpu(hdr->handle);
    3d08:	881a      	ldrh	r2, [r3, #0]
	flags = bt_acl_flags(handle);
    3d0a:	0b17      	lsrs	r7, r2, #12
 *
 *  @return Pointer to the user data of the buffer.
 */
static inline void *net_buf_user_data(struct net_buf *buf)
{
	return (void *)ROUND_UP((buf->__buf + buf->size), sizeof(int));
    3d0c:	f100 0510 	add.w	r5, r0, #16
    3d10:	89c3      	ldrh	r3, [r0, #14]
    3d12:	442b      	add	r3, r5
    3d14:	3303      	adds	r3, #3
    3d16:	f023 0303 	bic.w	r3, r3, #3
	acl(buf)->handle = bt_acl_handle(handle);
    3d1a:	f3c2 020b 	ubfx	r2, r2, #0, #12
    3d1e:	805a      	strh	r2, [r3, #2]
    3d20:	89c3      	ldrh	r3, [r0, #14]
    3d22:	442b      	add	r3, r5
    3d24:	3303      	adds	r3, #3
    3d26:	f023 0303 	bic.w	r3, r3, #3
	acl(buf)->id = BT_CONN_ID_INVALID;
    3d2a:	22ff      	movs	r2, #255	; 0xff
    3d2c:	705a      	strb	r2, [r3, #1]
	net_buf_pull(buf, sizeof(*hdr));
    3d2e:	2104      	movs	r1, #4
    3d30:	3008      	adds	r0, #8
    3d32:	f016 fa80 	bl	1a236 <net_buf_simple_pull>
	if (buf->len != len) {
    3d36:	89a3      	ldrh	r3, [r4, #12]
    3d38:	429e      	cmp	r6, r3
    3d3a:	d003      	beq.n	3d44 <hci_acl+0x44>
		net_buf_unref(buf);
    3d3c:	4620      	mov	r0, r4
    3d3e:	f016 f9e1 	bl	1a104 <net_buf_unref>
		return;
    3d42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3d44:	89e3      	ldrh	r3, [r4, #14]
    3d46:	442b      	add	r3, r5
    3d48:	3303      	adds	r3, #3
    3d4a:	f023 0303 	bic.w	r3, r3, #3
	conn = bt_conn_lookup_handle(acl(buf)->handle);
    3d4e:	8858      	ldrh	r0, [r3, #2]
    3d50:	f002 fc7e 	bl	6650 <bt_conn_lookup_handle>
	if (!conn) {
    3d54:	4606      	mov	r6, r0
    3d56:	b180      	cbz	r0, 3d7a <hci_acl+0x7a>
    3d58:	89e3      	ldrh	r3, [r4, #14]
    3d5a:	441d      	add	r5, r3
    3d5c:	3503      	adds	r5, #3
    3d5e:	f025 0503 	bic.w	r5, r5, #3
	acl(buf)->id = bt_conn_get_id(conn);
    3d62:	f003 f83b 	bl	6ddc <bt_conn_get_id>
    3d66:	7068      	strb	r0, [r5, #1]
	bt_conn_recv(conn, buf, flags);
    3d68:	463a      	mov	r2, r7
    3d6a:	4621      	mov	r1, r4
    3d6c:	4630      	mov	r0, r6
    3d6e:	f002 fb23 	bl	63b8 <bt_conn_recv>
	bt_conn_unref(conn);
    3d72:	4630      	mov	r0, r6
    3d74:	f002 fcf0 	bl	6758 <bt_conn_unref>
    3d78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		net_buf_unref(buf);
    3d7a:	4620      	mov	r0, r4
    3d7c:	f016 f9c2 	bl	1a104 <net_buf_unref>
		return;
    3d80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00003d82 <update_sec_level>:
{
    3d82:	b508      	push	{r3, lr}
	if (!conn->encrypt) {
    3d84:	7a83      	ldrb	r3, [r0, #10]
    3d86:	b18b      	cbz	r3, 3dac <update_sec_level+0x2a>
	if (conn->le.keys && atomic_test_bit(conn->le.keys->flags,
    3d88:	6f03      	ldr	r3, [r0, #112]	; 0x70
    3d8a:	b1ab      	cbz	r3, 3db8 <update_sec_level+0x36>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    3d8c:	f3bf 8f5b 	dmb	ish
    3d90:	689b      	ldr	r3, [r3, #8]
    3d92:	f3bf 8f5b 	dmb	ish
    3d96:	f013 0f01 	tst.w	r3, #1
    3d9a:	d00d      	beq.n	3db8 <update_sec_level+0x36>
		if (conn->le.keys->keys & BT_KEYS_LTK_P256) {
    3d9c:	6f03      	ldr	r3, [r0, #112]	; 0x70
    3d9e:	899b      	ldrh	r3, [r3, #12]
    3da0:	f013 0f20 	tst.w	r3, #32
    3da4:	d005      	beq.n	3db2 <update_sec_level+0x30>
			conn->sec_level = BT_SECURITY_FIPS;
    3da6:	2304      	movs	r3, #4
    3da8:	7203      	strb	r3, [r0, #8]
    3daa:	e007      	b.n	3dbc <update_sec_level+0x3a>
		conn->sec_level = BT_SECURITY_LOW;
    3dac:	2301      	movs	r3, #1
    3dae:	7203      	strb	r3, [r0, #8]
		return;
    3db0:	bd08      	pop	{r3, pc}
			conn->sec_level = BT_SECURITY_HIGH;
    3db2:	2303      	movs	r3, #3
    3db4:	7203      	strb	r3, [r0, #8]
    3db6:	e001      	b.n	3dbc <update_sec_level+0x3a>
		conn->sec_level = BT_SECURITY_MEDIUM;
    3db8:	2302      	movs	r3, #2
    3dba:	7203      	strb	r3, [r0, #8]
	if (conn->required_sec_level > conn->sec_level) {
    3dbc:	7a42      	ldrb	r2, [r0, #9]
    3dbe:	7a03      	ldrb	r3, [r0, #8]
    3dc0:	429a      	cmp	r2, r3
    3dc2:	d800      	bhi.n	3dc6 <update_sec_level+0x44>
    3dc4:	bd08      	pop	{r3, pc}
		bt_conn_disconnect(conn, BT_HCI_ERR_AUTHENTICATION_FAIL);
    3dc6:	2105      	movs	r1, #5
    3dc8:	f002 fe8a 	bl	6ae0 <bt_conn_disconnect>
    3dcc:	e7fa      	b.n	3dc4 <update_sec_level+0x42>

00003dce <hci_encrypt_change>:
{
    3dce:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_encrypt_change *evt = (void *)buf->data;
    3dd0:	6885      	ldr	r5, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
    3dd2:	f8b5 0001 	ldrh.w	r0, [r5, #1]
    3dd6:	f002 fc3b 	bl	6650 <bt_conn_lookup_handle>
	if (!conn) {
    3dda:	b1e0      	cbz	r0, 3e16 <hci_encrypt_change+0x48>
    3ddc:	4604      	mov	r4, r0
	if (evt->status) {
    3dde:	782b      	ldrb	r3, [r5, #0]
    3de0:	b13b      	cbz	r3, 3df2 <hci_encrypt_change+0x24>
		if (conn->type == BT_CONN_TYPE_LE) {
    3de2:	7883      	ldrb	r3, [r0, #2]
    3de4:	b90b      	cbnz	r3, 3dea <hci_encrypt_change+0x1c>
			conn->required_sec_level = conn->sec_level;
    3de6:	7a03      	ldrb	r3, [r0, #8]
    3de8:	7243      	strb	r3, [r0, #9]
		bt_conn_unref(conn);
    3dea:	4620      	mov	r0, r4
    3dec:	f002 fcb4 	bl	6758 <bt_conn_unref>
		return;
    3df0:	bd38      	pop	{r3, r4, r5, pc}
	conn->encrypt = evt->encrypt;
    3df2:	78eb      	ldrb	r3, [r5, #3]
    3df4:	7283      	strb	r3, [r0, #10]
	if (conn->type == BT_CONN_TYPE_LE) {
    3df6:	7882      	ldrb	r2, [r0, #2]
    3df8:	b91a      	cbnz	r2, 3e02 <hci_encrypt_change+0x34>
		if (conn->encrypt) {
    3dfa:	b96b      	cbnz	r3, 3e18 <hci_encrypt_change+0x4a>
		update_sec_level(conn);
    3dfc:	4620      	mov	r0, r4
    3dfe:	f7ff ffc0 	bl	3d82 <update_sec_level>
	bt_l2cap_encrypt_change(conn, evt->status);
    3e02:	7829      	ldrb	r1, [r5, #0]
    3e04:	4620      	mov	r0, r4
    3e06:	f003 fbcb 	bl	75a0 <bt_l2cap_encrypt_change>
	bt_conn_security_changed(conn);
    3e0a:	4620      	mov	r0, r4
    3e0c:	f002 fa9e 	bl	634c <bt_conn_security_changed>
	bt_conn_unref(conn);
    3e10:	4620      	mov	r0, r4
    3e12:	f002 fca1 	bl	6758 <bt_conn_unref>
    3e16:	bd38      	pop	{r3, r4, r5, pc}
			bt_smp_update_keys(conn);
    3e18:	f008 fafe 	bl	c418 <bt_smp_update_keys>
    3e1c:	e7ee      	b.n	3dfc <hci_encrypt_change+0x2e>

00003e1e <hci_encrypt_key_refresh_complete>:
{
    3e1e:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_encrypt_key_refresh_complete *evt = (void *)buf->data;
    3e20:	6885      	ldr	r5, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
    3e22:	f8b5 0001 	ldrh.w	r0, [r5, #1]
    3e26:	f002 fc13 	bl	6650 <bt_conn_lookup_handle>
	if (!conn) {
    3e2a:	b170      	cbz	r0, 3e4a <hci_encrypt_key_refresh_complete+0x2c>
    3e2c:	4604      	mov	r4, r0
	if (evt->status) {
    3e2e:	7829      	ldrb	r1, [r5, #0]
    3e30:	b961      	cbnz	r1, 3e4c <hci_encrypt_key_refresh_complete+0x2e>
	if (conn->type == BT_CONN_TYPE_LE) {
    3e32:	7883      	ldrb	r3, [r0, #2]
    3e34:	b16b      	cbz	r3, 3e52 <hci_encrypt_key_refresh_complete+0x34>
	bt_l2cap_encrypt_change(conn, evt->status);
    3e36:	7829      	ldrb	r1, [r5, #0]
    3e38:	4620      	mov	r0, r4
    3e3a:	f003 fbb1 	bl	75a0 <bt_l2cap_encrypt_change>
	bt_conn_security_changed(conn);
    3e3e:	4620      	mov	r0, r4
    3e40:	f002 fa84 	bl	634c <bt_conn_security_changed>
	bt_conn_unref(conn);
    3e44:	4620      	mov	r0, r4
    3e46:	f002 fc87 	bl	6758 <bt_conn_unref>
    3e4a:	bd38      	pop	{r3, r4, r5, pc}
		bt_l2cap_encrypt_change(conn, evt->status);
    3e4c:	f003 fba8 	bl	75a0 <bt_l2cap_encrypt_change>
		return;
    3e50:	bd38      	pop	{r3, r4, r5, pc}
		bt_smp_update_keys(conn);
    3e52:	f008 fae1 	bl	c418 <bt_smp_update_keys>
		update_sec_level(conn);
    3e56:	4620      	mov	r0, r4
    3e58:	f7ff ff93 	bl	3d82 <update_sec_level>
    3e5c:	e7eb      	b.n	3e36 <hci_encrypt_key_refresh_complete+0x18>

00003e5e <find_id_addr>:
{
    3e5e:	b510      	push	{r4, lr}
    3e60:	4604      	mov	r4, r0
		keys = bt_keys_find_irk(addr);
    3e62:	f008 fbe3 	bl	c62c <bt_keys_find_irk>
		if (keys) {
    3e66:	b100      	cbz	r0, 3e6a <find_id_addr+0xc>
			return &keys->addr;
    3e68:	bd10      	pop	{r4, pc}
	return addr;
    3e6a:	4620      	mov	r0, r4
}
    3e6c:	bd10      	pop	{r4, pc}
	...

00003e70 <update_conn_param>:
{
    3e70:	b508      	push	{r3, lr}
	k_delayed_work_submit(&conn->le.update_work,
    3e72:	f100 0174 	add.w	r1, r0, #116	; 0x74
				 conn->role == BT_HCI_ROLE_MASTER ? K_NO_WAIT :
    3e76:	78c3      	ldrb	r3, [r0, #3]
	k_delayed_work_submit(&conn->le.update_work,
    3e78:	b12b      	cbz	r3, 3e86 <update_conn_param+0x16>
    3e7a:	f241 3288 	movw	r2, #5000	; 0x1388
 * @retval -EADDRINUSE Work item is pending on a different workqueue.
 */
static inline int k_delayed_work_submit(struct k_delayed_work *work,
					s32_t delay)
{
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    3e7e:	4803      	ldr	r0, [pc, #12]	; (3e8c <update_conn_param+0x1c>)
    3e80:	f025 fad4 	bl	2942c <k_delayed_work_submit_to_queue>
    3e84:	bd08      	pop	{r3, pc}
    3e86:	2200      	movs	r2, #0
    3e88:	e7f9      	b.n	3e7e <update_conn_param+0xe>
    3e8a:	bf00      	nop
    3e8c:	20002b08 	.word	0x20002b08

00003e90 <le_data_len_change>:
{
    3e90:	b510      	push	{r4, lr}
	struct bt_hci_evt_le_data_len_change *evt = (void *)buf->data;
    3e92:	6883      	ldr	r3, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
    3e94:	8818      	ldrh	r0, [r3, #0]
    3e96:	f002 fbdb 	bl	6650 <bt_conn_lookup_handle>
	if (!conn) {
    3e9a:	b198      	cbz	r0, 3ec4 <le_data_len_change+0x34>
    3e9c:	4604      	mov	r4, r0
	if (!atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_DATA_LEN)) {
    3e9e:	1d03      	adds	r3, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3ea0:	f3bf 8f5b 	dmb	ish
    3ea4:	e853 2f00 	ldrex	r2, [r3]
    3ea8:	f422 7180 	bic.w	r1, r2, #256	; 0x100
    3eac:	e843 1000 	strex	r0, r1, [r3]
    3eb0:	2800      	cmp	r0, #0
    3eb2:	d1f7      	bne.n	3ea4 <le_data_len_change+0x14>
    3eb4:	f3bf 8f5b 	dmb	ish
    3eb8:	f412 7f80 	tst.w	r2, #256	; 0x100
    3ebc:	d103      	bne.n	3ec6 <le_data_len_change+0x36>
	bt_conn_unref(conn);
    3ebe:	4620      	mov	r0, r4
    3ec0:	f002 fc4a 	bl	6758 <bt_conn_unref>
    3ec4:	bd10      	pop	{r4, pc}
	update_conn_param(conn);
    3ec6:	4620      	mov	r0, r4
    3ec8:	f7ff ffd2 	bl	3e70 <update_conn_param>
    3ecc:	e7f7      	b.n	3ebe <le_data_len_change+0x2e>
	...

00003ed0 <le_data_len_change>:
	sep->timeout = pdu_data->payload.llctrl.ctrldata.conn_param_req.timeout;
}

static void le_data_len_change(struct pdu_data *pdu_data, u16_t handle,
			       struct net_buf *buf)
{
    3ed0:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_le_data_len_change *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    3ed2:	4b12      	ldr	r3, [pc, #72]	; (3f1c <le_data_len_change+0x4c>)
    3ed4:	e9d3 4500 	ldrd	r4, r5, [r3]
    3ed8:	2400      	movs	r4, #0
    3eda:	f005 5500 	and.w	r5, r5, #536870912	; 0x20000000
    3ede:	ea54 0305 	orrs.w	r3, r4, r5
    3ee2:	d008      	beq.n	3ef6 <le_data_len_change+0x26>
	    !(le_event_mask & BT_EVT_MASK_LE_DATA_LEN_CHANGE)) {
    3ee4:	4b0e      	ldr	r3, [pc, #56]	; (3f20 <le_data_len_change+0x50>)
    3ee6:	e9d3 4500 	ldrd	r4, r5, [r3]
    3eea:	f004 0440 	and.w	r4, r4, #64	; 0x40
    3eee:	2500      	movs	r5, #0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    3ef0:	ea54 0305 	orrs.w	r3, r4, r5
    3ef4:	d100      	bne.n	3ef8 <le_data_len_change+0x28>
    3ef6:	bd38      	pop	{r3, r4, r5, pc}
    3ef8:	4613      	mov	r3, r2
    3efa:	460d      	mov	r5, r1
    3efc:	4604      	mov	r4, r0
		return;
	}

	sep = meta_evt(buf, BT_HCI_EVT_LE_DATA_LEN_CHANGE, sizeof(*sep));
    3efe:	220a      	movs	r2, #10
    3f00:	2107      	movs	r1, #7
    3f02:	4618      	mov	r0, r3
    3f04:	f008 fcf0 	bl	c8e8 <meta_evt>

	sep->handle = sys_cpu_to_le16(handle);
    3f08:	8005      	strh	r5, [r0, #0]
	sep->max_tx_octets =
		pdu_data->payload.llctrl.ctrldata.length_rsp.max_tx_octets;
    3f0a:	8923      	ldrh	r3, [r4, #8]
	sep->max_tx_octets =
    3f0c:	8043      	strh	r3, [r0, #2]
	sep->max_tx_time =
		pdu_data->payload.llctrl.ctrldata.length_rsp.max_tx_time;
    3f0e:	8963      	ldrh	r3, [r4, #10]
	sep->max_tx_time =
    3f10:	8083      	strh	r3, [r0, #4]
	sep->max_rx_octets =
		pdu_data->payload.llctrl.ctrldata.length_rsp.max_rx_octets;
    3f12:	88a3      	ldrh	r3, [r4, #4]
	sep->max_rx_octets =
    3f14:	80c3      	strh	r3, [r0, #6]
	sep->max_rx_time =
		pdu_data->payload.llctrl.ctrldata.length_rsp.max_rx_time;
    3f16:	88e3      	ldrh	r3, [r4, #6]
	sep->max_rx_time =
    3f18:	8103      	strh	r3, [r0, #8]
    3f1a:	e7ec      	b.n	3ef6 <le_data_len_change+0x26>
    3f1c:	2000baf8 	.word	0x2000baf8
    3f20:	2000bb00 	.word	0x2000bb00

00003f24 <le_conn_update_complete>:
{
    3f24:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
    3f26:	6884      	ldr	r4, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
    3f28:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    3f2c:	f002 fb90 	bl	6650 <bt_conn_lookup_handle>
	if (!conn) {
    3f30:	b128      	cbz	r0, 3f3e <le_conn_update_complete+0x1a>
    3f32:	4605      	mov	r5, r0
	if (!evt->status) {
    3f34:	7823      	ldrb	r3, [r4, #0]
    3f36:	b11b      	cbz	r3, 3f40 <le_conn_update_complete+0x1c>
	bt_conn_unref(conn);
    3f38:	4628      	mov	r0, r5
    3f3a:	f002 fc0d 	bl	6758 <bt_conn_unref>
    3f3e:	bd38      	pop	{r3, r4, r5, pc}
		conn->le.interval = sys_le16_to_cpu(evt->interval);
    3f40:	f8b4 3003 	ldrh.w	r3, [r4, #3]
    3f44:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
    3f48:	f8b4 3005 	ldrh.w	r3, [r4, #5]
    3f4c:	f8a0 3064 	strh.w	r3, [r0, #100]	; 0x64
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    3f50:	f8b4 3007 	ldrh.w	r3, [r4, #7]
    3f54:	f8a0 3066 	strh.w	r3, [r0, #102]	; 0x66
		notify_le_param_updated(conn);
    3f58:	f002 f912 	bl	6180 <notify_le_param_updated>
    3f5c:	e7ec      	b.n	3f38 <le_conn_update_complete+0x14>
	...

00003f60 <le_conn_update_complete>:
{
    3f60:	b538      	push	{r3, r4, r5, lr}
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    3f62:	4b14      	ldr	r3, [pc, #80]	; (3fb4 <le_conn_update_complete+0x54>)
    3f64:	e9d3 4500 	ldrd	r4, r5, [r3]
    3f68:	2400      	movs	r4, #0
    3f6a:	f005 5500 	and.w	r5, r5, #536870912	; 0x20000000
    3f6e:	ea54 0305 	orrs.w	r3, r4, r5
    3f72:	d008      	beq.n	3f86 <le_conn_update_complete+0x26>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_UPDATE_COMPLETE)) {
    3f74:	4b10      	ldr	r3, [pc, #64]	; (3fb8 <le_conn_update_complete+0x58>)
    3f76:	e9d3 4500 	ldrd	r4, r5, [r3]
    3f7a:	f004 0404 	and.w	r4, r4, #4
    3f7e:	2500      	movs	r5, #0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    3f80:	ea54 0305 	orrs.w	r3, r4, r5
    3f84:	d100      	bne.n	3f88 <le_conn_update_complete+0x28>
    3f86:	bd38      	pop	{r3, r4, r5, pc}
    3f88:	4613      	mov	r3, r2
    3f8a:	460d      	mov	r5, r1
    3f8c:	4604      	mov	r4, r0
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_UPDATE_COMPLETE, sizeof(*sep));
    3f8e:	2209      	movs	r2, #9
    3f90:	2103      	movs	r1, #3
    3f92:	4618      	mov	r0, r3
    3f94:	f008 fca8 	bl	c8e8 <meta_evt>
	sep->status = radio_cu->status;
    3f98:	78e3      	ldrb	r3, [r4, #3]
    3f9a:	7003      	strb	r3, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    3f9c:	f8a0 5001 	strh.w	r5, [r0, #1]
	sep->interval = sys_cpu_to_le16(radio_cu->interval);
    3fa0:	88a3      	ldrh	r3, [r4, #4]
    3fa2:	f8a0 3003 	strh.w	r3, [r0, #3]
	sep->latency = sys_cpu_to_le16(radio_cu->latency);
    3fa6:	88e3      	ldrh	r3, [r4, #6]
    3fa8:	f8a0 3005 	strh.w	r3, [r0, #5]
	sep->supv_timeout = sys_cpu_to_le16(radio_cu->timeout);
    3fac:	8923      	ldrh	r3, [r4, #8]
    3fae:	f8a0 3007 	strh.w	r3, [r0, #7]
    3fb2:	e7e8      	b.n	3f86 <le_conn_update_complete+0x26>
    3fb4:	2000baf8 	.word	0x2000baf8
    3fb8:	2000bb00 	.word	0x2000bb00

00003fbc <hci_cmd_done>:
{
    3fbc:	b538      	push	{r3, r4, r5, lr}
    3fbe:	460d      	mov	r5, r1
    3fc0:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    3fc2:	7990      	ldrb	r0, [r2, #6]
    3fc4:	f016 f824 	bl	1a010 <net_buf_pool_get>
    3fc8:	4b0b      	ldr	r3, [pc, #44]	; (3ff8 <hci_cmd_done+0x3c>)
    3fca:	4283      	cmp	r3, r0
    3fcc:	d000      	beq.n	3fd0 <hci_cmd_done+0x14>
    3fce:	bd38      	pop	{r3, r4, r5, pc}
    3fd0:	f104 0210 	add.w	r2, r4, #16
    3fd4:	89e3      	ldrh	r3, [r4, #14]
    3fd6:	4413      	add	r3, r2
    3fd8:	3303      	adds	r3, #3
    3fda:	f023 0303 	bic.w	r3, r3, #3
	if (cmd(buf)->sync) {
    3fde:	6859      	ldr	r1, [r3, #4]
    3fe0:	2900      	cmp	r1, #0
    3fe2:	d0f4      	beq.n	3fce <hci_cmd_done+0x12>
		cmd(buf)->status = status;
    3fe4:	705d      	strb	r5, [r3, #1]
    3fe6:	89e3      	ldrh	r3, [r4, #14]
    3fe8:	441a      	add	r2, r3
    3fea:	3203      	adds	r2, #3
    3fec:	f022 0203 	bic.w	r2, r2, #3
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    3ff0:	6850      	ldr	r0, [r2, #4]
    3ff2:	f024 fbd2 	bl	2879a <_impl_k_sem_give>
    3ff6:	e7ea      	b.n	3fce <hci_cmd_done+0x12>
    3ff8:	2000d0a4 	.word	0x2000d0a4

00003ffc <hci_cmd_complete>:
{
    3ffc:	b570      	push	{r4, r5, r6, lr}
    3ffe:	4604      	mov	r4, r0
	struct bt_hci_evt_cmd_complete *evt = (void *)buf->data;
    4000:	f850 3f08 	ldr.w	r3, [r0, #8]!
	u16_t opcode = sys_le16_to_cpu(evt->opcode);
    4004:	f8b3 6001 	ldrh.w	r6, [r3, #1]
	u8_t status, ncmd = evt->ncmd;
    4008:	781d      	ldrb	r5, [r3, #0]
	net_buf_pull(buf, sizeof(*evt));
    400a:	2103      	movs	r1, #3
    400c:	f016 f913 	bl	1a236 <net_buf_simple_pull>
	status = buf->data[0];
    4010:	68a3      	ldr	r3, [r4, #8]
	hci_cmd_done(opcode, status, buf);
    4012:	4622      	mov	r2, r4
    4014:	7819      	ldrb	r1, [r3, #0]
    4016:	4630      	mov	r0, r6
    4018:	f7ff ffd0 	bl	3fbc <hci_cmd_done>
	if (ncmd) {
    401c:	b905      	cbnz	r5, 4020 <hci_cmd_complete+0x24>
    401e:	bd70      	pop	{r4, r5, r6, pc}
    4020:	4801      	ldr	r0, [pc, #4]	; (4028 <hci_cmd_complete+0x2c>)
    4022:	f024 fbba 	bl	2879a <_impl_k_sem_give>
}
    4026:	e7fa      	b.n	401e <hci_cmd_complete+0x22>
    4028:	2000b8b0 	.word	0x2000b8b0

0000402c <hci_cmd_status>:
{
    402c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    402e:	4605      	mov	r5, r0
	struct bt_hci_evt_cmd_status *evt = (void *)buf->data;
    4030:	f850 4f08 	ldr.w	r4, [r0, #8]!
	u16_t opcode = sys_le16_to_cpu(evt->opcode);
    4034:	8867      	ldrh	r7, [r4, #2]
	u8_t ncmd = evt->ncmd;
    4036:	7866      	ldrb	r6, [r4, #1]
	net_buf_pull(buf, sizeof(*evt));
    4038:	2104      	movs	r1, #4
    403a:	f016 f8fc 	bl	1a236 <net_buf_simple_pull>
	hci_cmd_done(opcode, evt->status, buf);
    403e:	462a      	mov	r2, r5
    4040:	7821      	ldrb	r1, [r4, #0]
    4042:	4638      	mov	r0, r7
    4044:	f7ff ffba 	bl	3fbc <hci_cmd_done>
	if (ncmd) {
    4048:	b906      	cbnz	r6, 404c <hci_cmd_status+0x20>
    404a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    404c:	4801      	ldr	r0, [pc, #4]	; (4054 <hci_cmd_status+0x28>)
    404e:	f024 fba4 	bl	2879a <_impl_k_sem_give>
}
    4052:	e7fa      	b.n	404a <hci_cmd_status+0x1e>
    4054:	2000b8b0 	.word	0x2000b8b0

00004058 <hci_num_completed_packets>:
{
    4058:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
    405c:	f8d0 8008 	ldr.w	r8, [r0, #8]
	for (i = 0; i < evt->num_handles; i++) {
    4060:	2700      	movs	r7, #0
    4062:	e026      	b.n	40b2 <hci_num_completed_packets+0x5a>
    4064:	f386 8811 	msr	BASEPRI, r6
			continue;
    4068:	e022      	b.n	40b0 <hci_num_completed_packets+0x58>
    406a:	f383 8811 	msr	BASEPRI, r3
			if (!node) {
    406e:	b1e1      	cbz	r1, 40aa <hci_num_completed_packets+0x52>
			k_fifo_put(&conn->tx_notify, node);
    4070:	f104 001c 	add.w	r0, r4, #28
    4074:	f023 fffa 	bl	2806c <k_queue_append>
			k_sem_give(bt_conn_get_pkts(conn));
    4078:	4620      	mov	r0, r4
    407a:	f002 f85f 	bl	613c <bt_conn_get_pkts>
    407e:	f024 fb8c 	bl	2879a <_impl_k_sem_give>
		while (count--) {
    4082:	4635      	mov	r5, r6
    4084:	1e6b      	subs	r3, r5, #1
    4086:	b29e      	uxth	r6, r3
    4088:	b17d      	cbz	r5, 40aa <hci_num_completed_packets+0x52>
	__asm__ volatile(
    408a:	f04f 0220 	mov.w	r2, #32
    408e:	f3ef 8311 	mrs	r3, BASEPRI
    4092:	f382 8811 	msr	BASEPRI, r2
	return (!list->head);
    4096:	6961      	ldr	r1, [r4, #20]
	return sys_slist_is_empty(list) ? NULL : sys_slist_get_not_empty(list);
    4098:	2900      	cmp	r1, #0
    409a:	d0e6      	beq.n	406a <hci_num_completed_packets+0x12>
	list->head = node->next;
    409c:	680a      	ldr	r2, [r1, #0]
    409e:	6162      	str	r2, [r4, #20]
	if (list->tail == node) {
    40a0:	69a0      	ldr	r0, [r4, #24]
    40a2:	4281      	cmp	r1, r0
    40a4:	d1e1      	bne.n	406a <hci_num_completed_packets+0x12>
		list->tail = list->head;
    40a6:	61a2      	str	r2, [r4, #24]
    40a8:	e7df      	b.n	406a <hci_num_completed_packets+0x12>
		bt_conn_unref(conn);
    40aa:	4620      	mov	r0, r4
    40ac:	f002 fb54 	bl	6758 <bt_conn_unref>
	for (i = 0; i < evt->num_handles; i++) {
    40b0:	3701      	adds	r7, #1
    40b2:	f898 3000 	ldrb.w	r3, [r8]
    40b6:	429f      	cmp	r7, r3
    40b8:	da13      	bge.n	40e2 <hci_num_completed_packets+0x8a>
		handle = sys_le16_to_cpu(evt->h[i].handle);
    40ba:	eb08 0387 	add.w	r3, r8, r7, lsl #2
    40be:	f8b3 0001 	ldrh.w	r0, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
    40c2:	f8b3 5003 	ldrh.w	r5, [r3, #3]
    40c6:	f04f 0320 	mov.w	r3, #32
    40ca:	f3ef 8611 	mrs	r6, BASEPRI
    40ce:	f383 8811 	msr	BASEPRI, r3
		conn = bt_conn_lookup_handle(handle);
    40d2:	f002 fabd 	bl	6650 <bt_conn_lookup_handle>
		if (!conn) {
    40d6:	4604      	mov	r4, r0
    40d8:	2800      	cmp	r0, #0
    40da:	d0c3      	beq.n	4064 <hci_num_completed_packets+0xc>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    40dc:	f386 8811 	msr	BASEPRI, r6
    40e0:	e7d0      	b.n	4084 <hci_num_completed_packets+0x2c>
}
    40e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000040e8 <bt_hci_cmd_create>:
{
    40e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    40ea:	4607      	mov	r7, r0
    40ec:	460d      	mov	r5, r1
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    40ee:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    40f2:	4812      	ldr	r0, [pc, #72]	; (413c <bt_hci_cmd_create+0x54>)
    40f4:	f015 ff98 	bl	1a028 <net_buf_alloc>
    40f8:	4604      	mov	r4, r0
	net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    40fa:	2100      	movs	r1, #0
    40fc:	f015 ffef 	bl	1a0de <net_buf_reserve>
    4100:	f104 0310 	add.w	r3, r4, #16
    4104:	89e2      	ldrh	r2, [r4, #14]
    4106:	441a      	add	r2, r3
    4108:	3203      	adds	r2, #3
    410a:	f022 0203 	bic.w	r2, r2, #3
	cmd(buf)->type = BT_BUF_CMD;
    410e:	2100      	movs	r1, #0
    4110:	7011      	strb	r1, [r2, #0]
    4112:	89e2      	ldrh	r2, [r4, #14]
    4114:	441a      	add	r2, r3
    4116:	3203      	adds	r2, #3
    4118:	f022 0203 	bic.w	r2, r2, #3
	cmd(buf)->opcode = opcode;
    411c:	8057      	strh	r7, [r2, #2]
    411e:	89e2      	ldrh	r2, [r4, #14]
    4120:	4413      	add	r3, r2
    4122:	3303      	adds	r3, #3
    4124:	f023 0303 	bic.w	r3, r3, #3
	cmd(buf)->sync = NULL;
    4128:	6059      	str	r1, [r3, #4]
	hdr = net_buf_add(buf, sizeof(*hdr));
    412a:	2103      	movs	r1, #3
    412c:	f104 0008 	add.w	r0, r4, #8
    4130:	f016 f834 	bl	1a19c <net_buf_simple_add>
	hdr->opcode = sys_cpu_to_le16(opcode);
    4134:	8007      	strh	r7, [r0, #0]
	hdr->param_len = param_len;
    4136:	7085      	strb	r5, [r0, #2]
}
    4138:	4620      	mov	r0, r4
    413a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    413c:	2000d0a4 	.word	0x2000d0a4

00004140 <bt_hci_cmd_send_sync>:
{
    4140:	b570      	push	{r4, r5, r6, lr}
    4142:	b086      	sub	sp, #24
    4144:	4616      	mov	r6, r2
	if (!buf) {
    4146:	460d      	mov	r5, r1
    4148:	b329      	cbz	r1, 4196 <bt_hci_cmd_send_sync+0x56>
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    414a:	2201      	movs	r2, #1
    414c:	2100      	movs	r1, #0
    414e:	4668      	mov	r0, sp
    4150:	f024 fb1a 	bl	28788 <_impl_k_sem_init>
    4154:	f105 0410 	add.w	r4, r5, #16
    4158:	89eb      	ldrh	r3, [r5, #14]
    415a:	4423      	add	r3, r4
    415c:	3303      	adds	r3, #3
    415e:	f023 0303 	bic.w	r3, r3, #3
	cmd(buf)->sync = &sync_sem;
    4162:	f8c3 d004 	str.w	sp, [r3, #4]
	net_buf_ref(buf);
    4166:	4628      	mov	r0, r5
    4168:	f015 ffe8 	bl	1a13c <net_buf_ref>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    416c:	4629      	mov	r1, r5
    416e:	4813      	ldr	r0, [pc, #76]	; (41bc <bt_hci_cmd_send_sync+0x7c>)
    4170:	f015 ffba 	bl	1a0e8 <net_buf_put>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    4174:	f242 7110 	movw	r1, #10000	; 0x2710
    4178:	4668      	mov	r0, sp
    417a:	f024 fb21 	bl	287c0 <_impl_k_sem_take>
    417e:	89eb      	ldrh	r3, [r5, #14]
    4180:	441c      	add	r4, r3
    4182:	3403      	adds	r4, #3
    4184:	f024 0403 	bic.w	r4, r4, #3
	if (cmd(buf)->status) {
    4188:	7863      	ldrb	r3, [r4, #1]
    418a:	b963      	cbnz	r3, 41a6 <bt_hci_cmd_send_sync+0x66>
		if (rsp) {
    418c:	b18e      	cbz	r6, 41b2 <bt_hci_cmd_send_sync+0x72>
			*rsp = buf;
    418e:	6035      	str	r5, [r6, #0]
		err = 0;
    4190:	2000      	movs	r0, #0
}
    4192:	b006      	add	sp, #24
    4194:	bd70      	pop	{r4, r5, r6, pc}
		buf = bt_hci_cmd_create(opcode, 0);
    4196:	f7ff ffa7 	bl	40e8 <bt_hci_cmd_create>
		if (!buf) {
    419a:	4605      	mov	r5, r0
    419c:	2800      	cmp	r0, #0
    419e:	d1d4      	bne.n	414a <bt_hci_cmd_send_sync+0xa>
			return -ENOBUFS;
    41a0:	f06f 0068 	mvn.w	r0, #104	; 0x68
    41a4:	e7f5      	b.n	4192 <bt_hci_cmd_send_sync+0x52>
		net_buf_unref(buf);
    41a6:	4628      	mov	r0, r5
    41a8:	f015 ffac 	bl	1a104 <net_buf_unref>
		err = -EIO;
    41ac:	f06f 0004 	mvn.w	r0, #4
    41b0:	e7ef      	b.n	4192 <bt_hci_cmd_send_sync+0x52>
			net_buf_unref(buf);
    41b2:	4628      	mov	r0, r5
    41b4:	f015 ffa6 	bl	1a104 <net_buf_unref>
		err = 0;
    41b8:	2000      	movs	r0, #0
    41ba:	e7ea      	b.n	4192 <bt_hci_cmd_send_sync+0x52>
    41bc:	2000b8dc 	.word	0x2000b8dc

000041c0 <common_init>:
{
    41c0:	b510      	push	{r4, lr}
    41c2:	b082      	sub	sp, #8
	err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    41c4:	aa01      	add	r2, sp, #4
    41c6:	2100      	movs	r1, #0
    41c8:	f640 4003 	movw	r0, #3075	; 0xc03
    41cc:	f7ff ffb8 	bl	4140 <bt_hci_cmd_send_sync>
	if (err) {
    41d0:	4604      	mov	r4, r0
    41d2:	b110      	cbz	r0, 41da <common_init+0x1a>
}
    41d4:	4620      	mov	r0, r4
    41d6:	b002      	add	sp, #8
    41d8:	bd10      	pop	{r4, pc}
	hci_reset_complete(rsp);
    41da:	9801      	ldr	r0, [sp, #4]
    41dc:	f7ff fce6 	bl	3bac <hci_reset_complete>
	net_buf_unref(rsp);
    41e0:	ac02      	add	r4, sp, #8
    41e2:	f854 0d04 	ldr.w	r0, [r4, #-4]!
    41e6:	f015 ff8d 	bl	1a104 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    41ea:	4622      	mov	r2, r4
    41ec:	2100      	movs	r1, #0
    41ee:	f241 0003 	movw	r0, #4099	; 0x1003
    41f2:	f7ff ffa5 	bl	4140 <bt_hci_cmd_send_sync>
	if (err) {
    41f6:	4604      	mov	r4, r0
    41f8:	2800      	cmp	r0, #0
    41fa:	d1eb      	bne.n	41d4 <common_init+0x14>
	read_local_features_complete(rsp);
    41fc:	9801      	ldr	r0, [sp, #4]
    41fe:	f7ff fced 	bl	3bdc <read_local_features_complete>
	net_buf_unref(rsp);
    4202:	ac02      	add	r4, sp, #8
    4204:	f854 0d04 	ldr.w	r0, [r4, #-4]!
    4208:	f015 ff7c 	bl	1a104 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    420c:	4622      	mov	r2, r4
    420e:	2100      	movs	r1, #0
    4210:	f241 0001 	movw	r0, #4097	; 0x1001
    4214:	f7ff ff94 	bl	4140 <bt_hci_cmd_send_sync>
	if (err) {
    4218:	4604      	mov	r4, r0
    421a:	2800      	cmp	r0, #0
    421c:	d1da      	bne.n	41d4 <common_init+0x14>
	read_local_ver_complete(rsp);
    421e:	9801      	ldr	r0, [sp, #4]
    4220:	f7ff fc72 	bl	3b08 <read_local_ver_complete>
	net_buf_unref(rsp);
    4224:	ac02      	add	r4, sp, #8
    4226:	f854 0d04 	ldr.w	r0, [r4, #-4]!
    422a:	f015 ff6b 	bl	1a104 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    422e:	4622      	mov	r2, r4
    4230:	2100      	movs	r1, #0
    4232:	f241 0009 	movw	r0, #4105	; 0x1009
    4236:	f7ff ff83 	bl	4140 <bt_hci_cmd_send_sync>
	if (err) {
    423a:	4604      	mov	r4, r0
    423c:	2800      	cmp	r0, #0
    423e:	d1c9      	bne.n	41d4 <common_init+0x14>
	read_bdaddr_complete(rsp);
    4240:	9801      	ldr	r0, [sp, #4]
    4242:	f7ff fcd5 	bl	3bf0 <read_bdaddr_complete>
	net_buf_unref(rsp);
    4246:	ac02      	add	r4, sp, #8
    4248:	f854 0d04 	ldr.w	r0, [r4, #-4]!
    424c:	f015 ff5a 	bl	1a104 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    4250:	4622      	mov	r2, r4
    4252:	2100      	movs	r1, #0
    4254:	f241 0002 	movw	r0, #4098	; 0x1002
    4258:	f7ff ff72 	bl	4140 <bt_hci_cmd_send_sync>
	if (err) {
    425c:	4604      	mov	r4, r0
    425e:	2800      	cmp	r0, #0
    4260:	d1b8      	bne.n	41d4 <common_init+0x14>
	read_supported_commands_complete(rsp);
    4262:	9801      	ldr	r0, [sp, #4]
    4264:	f7ff fcd2 	bl	3c0c <read_supported_commands_complete>
	net_buf_unref(rsp);
    4268:	9801      	ldr	r0, [sp, #4]
    426a:	f015 ff4b 	bl	1a104 <net_buf_unref>
	return 0;
    426e:	e7b1      	b.n	41d4 <common_init+0x14>

00004270 <common_init>:
	/* memory allocations */
	common_init();
}

static void common_init(void)
{
    4270:	b538      	push	{r3, r4, r5, lr}
	void *link;

	/* initialise connection pool. */
	if (_radio.connection_count) {
    4272:	4b3a      	ldr	r3, [pc, #232]	; (435c <common_init+0xec>)
    4274:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
    4278:	2a00      	cmp	r2, #0
    427a:	d15e      	bne.n	433a <common_init+0xca>
		mem_init(_radio.conn_pool, CONNECTION_T_SIZE,
			 _radio.connection_count,
			 &_radio.conn_free);
	} else {
		_radio.conn_free = NULL;
    427c:	2200      	movs	r2, #0
    427e:	4b37      	ldr	r3, [pc, #220]	; (435c <common_init+0xec>)
    4280:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	}

	/* initialise rx pool. */
	mem_init(_radio.pkt_rx_data_pool,
		 _radio.packet_rx_data_size,
		 _radio.packet_rx_data_count,
    4284:	4c35      	ldr	r4, [pc, #212]	; (435c <common_init+0xec>)
	mem_init(_radio.pkt_rx_data_pool,
    4286:	f504 7396 	add.w	r3, r4, #300	; 0x12c
    428a:	f894 2136 	ldrb.w	r2, [r4, #310]	; 0x136
    428e:	f8b4 1134 	ldrh.w	r1, [r4, #308]	; 0x134
    4292:	f8d4 0128 	ldr.w	r0, [r4, #296]	; 0x128
    4296:	f00a fa47 	bl	e728 <mem_init>
		 &_radio.pkt_rx_data_free);

	/* initialise rx link pool. */
	mem_init(_radio.link_rx_pool, (sizeof(void *) * 2),
		 (_radio.packet_rx_count + _radio.connection_count),
    429a:	f894 113c 	ldrb.w	r1, [r4, #316]	; 0x13c
    429e:	f894 210c 	ldrb.w	r2, [r4, #268]	; 0x10c
	mem_init(_radio.link_rx_pool, (sizeof(void *) * 2),
    42a2:	f504 75a2 	add.w	r5, r4, #324	; 0x144
    42a6:	462b      	mov	r3, r5
    42a8:	440a      	add	r2, r1
    42aa:	2108      	movs	r1, #8
    42ac:	f8d4 0140 	ldr.w	r0, [r4, #320]	; 0x140
    42b0:	f00a fa3a 	bl	e728 <mem_init>
		 &_radio.link_rx_free);

	/* initialise ctrl tx pool. */
	mem_init(_radio.pkt_tx_ctrl_pool, PACKET_TX_CTRL_SIZE_MIN,
    42b4:	f504 73ac 	add.w	r3, r4, #344	; 0x158
    42b8:	2202      	movs	r2, #2
    42ba:	2124      	movs	r1, #36	; 0x24
    42bc:	f8d4 0154 	ldr.w	r0, [r4, #340]	; 0x154
    42c0:	f00a fa32 	bl	e728 <mem_init>
		 PACKET_MEM_COUNT_TX_CTRL, &_radio.pkt_tx_ctrl_free);

	/* initialise data tx pool. */
	mem_init(_radio.pkt_tx_data_pool, _radio.packet_tx_data_size,
		 (_radio.packet_tx_count - 1), &_radio.pkt_tx_data_free);
    42c4:	f894 2170 	ldrb.w	r2, [r4, #368]	; 0x170
	mem_init(_radio.pkt_tx_data_pool, _radio.packet_tx_data_size,
    42c8:	3a01      	subs	r2, #1
    42ca:	f504 73b0 	add.w	r3, r4, #352	; 0x160
    42ce:	b292      	uxth	r2, r2
    42d0:	f8b4 1164 	ldrh.w	r1, [r4, #356]	; 0x164
    42d4:	f8d4 015c 	ldr.w	r0, [r4, #348]	; 0x15c
    42d8:	f00a fa26 	bl	e728 <mem_init>

	/* initialise the event-cum-data memq */
	link = mem_acquire(&_radio.link_rx_free);
    42dc:	4628      	mov	r0, r5
    42de:	f00a fa48 	bl	e772 <mem_acquire>
	LL_ASSERT(link);
    42e2:	b3a0      	cbz	r0, 434e <common_init+0xde>
	memq_init(link, &_radio.link_rx_head, (void *)&_radio.link_rx_tail);
    42e4:	4c1d      	ldr	r4, [pc, #116]	; (435c <common_init+0xec>)
    42e6:	f504 72a6 	add.w	r2, r4, #332	; 0x14c
    42ea:	f504 71a4 	add.w	r1, r4, #328	; 0x148
    42ee:	f00a faa5 	bl	e83c <memq_init>

	/* initialise advertiser channel map */
	_radio.advertiser.chan_map = 0x07;
    42f2:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
    42f6:	f043 0338 	orr.w	r3, r3, #56	; 0x38
    42fa:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25

	/* initialise connection channel map */
	_radio.data_chan_map[0] = 0xFF;
    42fe:	20ff      	movs	r0, #255	; 0xff
    4300:	f884 0116 	strb.w	r0, [r4, #278]	; 0x116
	_radio.data_chan_map[1] = 0xFF;
    4304:	f884 0117 	strb.w	r0, [r4, #279]	; 0x117
	_radio.data_chan_map[2] = 0xFF;
    4308:	f884 0118 	strb.w	r0, [r4, #280]	; 0x118
	_radio.data_chan_map[3] = 0xFF;
    430c:	f884 0119 	strb.w	r0, [r4, #281]	; 0x119
	_radio.data_chan_map[4] = 0x1F;
    4310:	231f      	movs	r3, #31
    4312:	f884 311a 	strb.w	r3, [r4, #282]	; 0x11a
	_radio.data_chan_count = 37;
    4316:	2325      	movs	r3, #37	; 0x25
    4318:	f884 311b 	strb.w	r3, [r4, #283]	; 0x11b

#if defined(CONFIG_BT_CTLR_DATA_LENGTH)
	/* Initialize the DLE defaults */
	_radio.default_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
    431c:	231b      	movs	r3, #27
    431e:	f8a4 311e 	strh.w	r3, [r4, #286]	; 0x11e
	_radio.default_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN,
    4322:	f44f 73a4 	mov.w	r3, #328	; 0x148
    4326:	f8a4 3120 	strh.w	r3, [r4, #288]	; 0x120
	/* Initialize the PHY defaults */
	_radio.default_phy_tx = BIT(0);
	_radio.default_phy_rx = BIT(0);

#if defined(CONFIG_BT_CTLR_PHY_2M)
	_radio.default_phy_tx |= BIT(1);
    432a:	2303      	movs	r3, #3
    432c:	f8a4 3122 	strh.w	r3, [r4, #290]	; 0x122
	_radio.default_phy_rx |= BIT(1);
    4330:	f8a4 3124 	strh.w	r3, [r4, #292]	; 0x124
	_radio.default_phy_rx |= BIT(2);
#endif /* CONFIG_BT_CTLR_PHY_CODED */
#endif /* CONFIG_BT_CTLR_PHY */

	/* allocate the rx queue */
	packet_rx_allocate(0xFF);
    4334:	f00c ff58 	bl	111e8 <packet_rx_allocate>
    4338:	bd38      	pop	{r3, r4, r5, pc}
		mem_init(_radio.conn_pool, CONNECTION_T_SIZE,
    433a:	4618      	mov	r0, r3
    433c:	f503 7384 	add.w	r3, r3, #264	; 0x108
    4340:	f44f 71aa 	mov.w	r1, #340	; 0x154
    4344:	f8d0 0104 	ldr.w	r0, [r0, #260]	; 0x104
    4348:	f00a f9ee 	bl	e728 <mem_init>
    434c:	e79a      	b.n	4284 <common_init+0x14>
	LL_ASSERT(link);
    434e:	4040      	eors	r0, r0
    4350:	f380 8811 	msr	BASEPRI, r0
    4354:	f04f 0004 	mov.w	r0, #4
    4358:	df02      	svc	2
    435a:	bf00      	nop
    435c:	20000e84 	.word	0x20000e84

00004360 <le_set_event_mask>:
{
    4360:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    4362:	2108      	movs	r1, #8
    4364:	f242 0001 	movw	r0, #8193	; 0x2001
    4368:	f7ff febe 	bl	40e8 <bt_hci_cmd_create>
	if (!buf) {
    436c:	2800      	cmp	r0, #0
    436e:	d042      	beq.n	43f6 <le_set_event_mask+0x96>
    4370:	4604      	mov	r4, r0
	cp_mask = net_buf_add(buf, sizeof(*cp_mask));
    4372:	2108      	movs	r1, #8
    4374:	4408      	add	r0, r1
    4376:	f015 ff11 	bl	1a19c <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    437a:	4b20      	ldr	r3, [pc, #128]	; (43fc <le_set_event_mask+0x9c>)
    437c:	f893 1078 	ldrb.w	r1, [r3, #120]	; 0x78
    4380:	f011 0f02 	tst.w	r1, #2
    4384:	d131      	bne.n	43ea <le_set_event_mask+0x8a>
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
    4386:	220f      	movs	r2, #15
    4388:	2300      	movs	r3, #0
		if (BT_FEAT_LE_DLE(bt_dev.le.features)) {
    438a:	f011 0f20 	tst.w	r1, #32
    438e:	d001      	beq.n	4394 <le_set_event_mask+0x34>
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
    4390:	f042 0240 	orr.w	r2, r2, #64	; 0x40
		if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) ||
    4394:	4d19      	ldr	r5, [pc, #100]	; (43fc <le_set_event_mask+0x9c>)
    4396:	f895 5079 	ldrb.w	r5, [r5, #121]	; 0x79
    439a:	f015 0f09 	tst.w	r5, #9
    439e:	d001      	beq.n	43a4 <le_set_event_mask+0x44>
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
    43a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    43a4:	f011 0f01 	tst.w	r1, #1
    43a8:	d001      	beq.n	43ae <le_set_event_mask+0x4e>
		mask |= BT_EVT_MASK_LE_LTK_REQUEST;
    43aa:	f042 0210 	orr.w	r2, r2, #16
	if ((bt_dev.supported_commands[34] & 0x02) &&
    43ae:	4913      	ldr	r1, [pc, #76]	; (43fc <le_set_event_mask+0x9c>)
    43b0:	f891 1040 	ldrb.w	r1, [r1, #64]	; 0x40
    43b4:	f001 0106 	and.w	r1, r1, #6
    43b8:	2906      	cmp	r1, #6
    43ba:	d019      	beq.n	43f0 <le_set_event_mask+0x90>
	dst[0] = val;
    43bc:	7002      	strb	r2, [r0, #0]
	dst[1] = val >> 8;
    43be:	f3c2 2107 	ubfx	r1, r2, #8, #8
    43c2:	7041      	strb	r1, [r0, #1]
	sys_put_le16(val >> 16, &dst[2]);
    43c4:	0c12      	lsrs	r2, r2, #16
	dst[0] = val;
    43c6:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    43c8:	0a12      	lsrs	r2, r2, #8
    43ca:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
    43cc:	7103      	strb	r3, [r0, #4]
	dst[1] = val >> 8;
    43ce:	f3c3 2207 	ubfx	r2, r3, #8, #8
    43d2:	7142      	strb	r2, [r0, #5]
	sys_put_le16(val >> 16, &dst[2]);
    43d4:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    43d6:	7183      	strb	r3, [r0, #6]
	dst[1] = val >> 8;
    43d8:	0a1b      	lsrs	r3, r3, #8
    43da:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    43dc:	2200      	movs	r2, #0
    43de:	4621      	mov	r1, r4
    43e0:	f242 0001 	movw	r0, #8193	; 0x2001
    43e4:	f7ff feac 	bl	4140 <bt_hci_cmd_send_sync>
    43e8:	bd38      	pop	{r3, r4, r5, pc}
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    43ea:	222f      	movs	r2, #47	; 0x2f
    43ec:	2300      	movs	r3, #0
    43ee:	e7cc      	b.n	438a <le_set_event_mask+0x2a>
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
    43f0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
    43f4:	e7e2      	b.n	43bc <le_set_event_mask+0x5c>
		return -ENOBUFS;
    43f6:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    43fa:	bd38      	pop	{r3, r4, r5, pc}
    43fc:	2000b808 	.word	0x2000b808

00004400 <le_set_event_mask>:
{
    4400:	b570      	push	{r4, r5, r6, lr}
    4402:	460e      	mov	r6, r1
	struct bt_hci_cp_set_event_mask *cmd = (void *)buf->data;
    4404:	6883      	ldr	r3, [r0, #8]
	return ((u16_t)src[1] << 8) | src[0];
    4406:	79da      	ldrb	r2, [r3, #7]
    4408:	7999      	ldrb	r1, [r3, #6]
    440a:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
    440e:	7958      	ldrb	r0, [r3, #5]
    4410:	791a      	ldrb	r2, [r3, #4]
    4412:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    4416:	2400      	movs	r4, #0
    4418:	ea42 4501 	orr.w	r5, r2, r1, lsl #16
	return ((u16_t)src[1] << 8) | src[0];
    441c:	78d9      	ldrb	r1, [r3, #3]
    441e:	789a      	ldrb	r2, [r3, #2]
    4420:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    4424:	7859      	ldrb	r1, [r3, #1]
    4426:	781b      	ldrb	r3, [r3, #0]
    4428:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	return ((u32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
    442c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    4430:	ea44 0003 	orr.w	r0, r4, r3
    4434:	4629      	mov	r1, r5
	le_event_mask = sys_get_le64(cmd->events);
    4436:	4b04      	ldr	r3, [pc, #16]	; (4448 <le_set_event_mask+0x48>)
    4438:	e9c3 0100 	strd	r0, r1, [r3]
	ccst = cmd_complete(evt, sizeof(*ccst));
    443c:	2101      	movs	r1, #1
    443e:	4630      	mov	r0, r6
    4440:	f008 f9b8 	bl	c7b4 <cmd_complete>
	ccst->status = 0x00;
    4444:	7004      	strb	r4, [r0, #0]
    4446:	bd70      	pop	{r4, r5, r6, pc}
    4448:	2000bb00 	.word	0x2000bb00

0000444c <le_init>:
	if (!BT_FEAT_LE(bt_dev.features)) {
    444c:	4b4c      	ldr	r3, [pc, #304]	; (4580 <le_init+0x134>)
    444e:	7e9b      	ldrb	r3, [r3, #26]
    4450:	f013 0f40 	tst.w	r3, #64	; 0x40
    4454:	f000 808c 	beq.w	4570 <le_init+0x124>
{
    4458:	b570      	push	{r4, r5, r6, lr}
    445a:	b082      	sub	sp, #8
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    445c:	aa01      	add	r2, sp, #4
    445e:	2100      	movs	r1, #0
    4460:	f242 0003 	movw	r0, #8195	; 0x2003
    4464:	f7ff fe6c 	bl	4140 <bt_hci_cmd_send_sync>
	if (err) {
    4468:	4603      	mov	r3, r0
    446a:	b110      	cbz	r0, 4472 <le_init+0x26>
}
    446c:	4618      	mov	r0, r3
    446e:	b002      	add	sp, #8
    4470:	bd70      	pop	{r4, r5, r6, pc}
	read_le_features_complete(rsp);
    4472:	9801      	ldr	r0, [sp, #4]
    4474:	f7ff fbd4 	bl	3c20 <read_le_features_complete>
	net_buf_unref(rsp);
    4478:	ac02      	add	r4, sp, #8
    447a:	f854 0d04 	ldr.w	r0, [r4, #-4]!
    447e:	f015 fe41 	bl	1a104 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
    4482:	4622      	mov	r2, r4
    4484:	2100      	movs	r1, #0
    4486:	f242 0002 	movw	r0, #8194	; 0x2002
    448a:	f7ff fe59 	bl	4140 <bt_hci_cmd_send_sync>
	if (err) {
    448e:	4603      	mov	r3, r0
    4490:	2800      	cmp	r0, #0
    4492:	d1eb      	bne.n	446c <le_init+0x20>
	le_read_buffer_size_complete(rsp);
    4494:	9801      	ldr	r0, [sp, #4]
    4496:	f7ff fbcd 	bl	3c34 <le_read_buffer_size_complete>
	net_buf_unref(rsp);
    449a:	9801      	ldr	r0, [sp, #4]
    449c:	f015 fe32 	bl	1a104 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    44a0:	4b37      	ldr	r3, [pc, #220]	; (4580 <le_init+0x134>)
    44a2:	7e9b      	ldrb	r3, [r3, #26]
    44a4:	f013 0f20 	tst.w	r3, #32
    44a8:	d037      	beq.n	451a <le_init+0xce>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    44aa:	4b35      	ldr	r3, [pc, #212]	; (4580 <le_init+0x134>)
    44ac:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
    44b0:	f013 0f08 	tst.w	r3, #8
    44b4:	d149      	bne.n	454a <le_init+0xfe>
	    BT_FEAT_LE_DLE(bt_dev.le.features)) {
    44b6:	4b32      	ldr	r3, [pc, #200]	; (4580 <le_init+0x134>)
    44b8:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
	if (IS_ENABLED(CONFIG_BT_CONN) &&
    44bc:	f013 0f20 	tst.w	r3, #32
    44c0:	d027      	beq.n	4512 <le_init+0xc6>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL,
    44c2:	466a      	mov	r2, sp
    44c4:	2100      	movs	r1, #0
    44c6:	f242 002f 	movw	r0, #8239	; 0x202f
    44ca:	f7ff fe39 	bl	4140 <bt_hci_cmd_send_sync>
		if (err) {
    44ce:	4603      	mov	r3, r0
    44d0:	2800      	cmp	r0, #0
    44d2:	d1cb      	bne.n	446c <le_init+0x20>
		rp = (void *)rsp->data;
    44d4:	9800      	ldr	r0, [sp, #0]
    44d6:	6883      	ldr	r3, [r0, #8]
		tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    44d8:	f8b3 6001 	ldrh.w	r6, [r3, #1]
		tx_time = sys_le16_to_cpu(rp->max_tx_time);
    44dc:	f8b3 5003 	ldrh.w	r5, [r3, #3]
		net_buf_unref(rsp);
    44e0:	f015 fe10 	bl	1a104 <net_buf_unref>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    44e4:	2104      	movs	r1, #4
    44e6:	f242 0024 	movw	r0, #8228	; 0x2024
    44ea:	f7ff fdfd 	bl	40e8 <bt_hci_cmd_create>
		if (!buf) {
    44ee:	4604      	mov	r4, r0
    44f0:	2800      	cmp	r0, #0
    44f2:	d03a      	beq.n	456a <le_init+0x11e>
		cp = net_buf_add(buf, sizeof(*cp));
    44f4:	2104      	movs	r1, #4
    44f6:	3008      	adds	r0, #8
    44f8:	f015 fe50 	bl	1a19c <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    44fc:	8006      	strh	r6, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    44fe:	8045      	strh	r5, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    4500:	2200      	movs	r2, #0
    4502:	4621      	mov	r1, r4
    4504:	f242 0024 	movw	r0, #8228	; 0x2024
    4508:	f7ff fe1a 	bl	4140 <bt_hci_cmd_send_sync>
		if (err) {
    450c:	4603      	mov	r3, r0
    450e:	2800      	cmp	r0, #0
    4510:	d1ac      	bne.n	446c <le_init+0x20>
	return  le_set_event_mask();
    4512:	f7ff ff25 	bl	4360 <le_set_event_mask>
    4516:	4603      	mov	r3, r0
    4518:	e7a8      	b.n	446c <le_init+0x20>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    451a:	2102      	movs	r1, #2
    451c:	f640 406d 	movw	r0, #3181	; 0xc6d
    4520:	f7ff fde2 	bl	40e8 <bt_hci_cmd_create>
		if (!buf) {
    4524:	4604      	mov	r4, r0
    4526:	b338      	cbz	r0, 4578 <le_init+0x12c>
		cp_le = net_buf_add(buf, sizeof(*cp_le));
    4528:	2102      	movs	r1, #2
    452a:	3008      	adds	r0, #8
    452c:	f015 fe36 	bl	1a19c <net_buf_simple_add>
		cp_le->le = 0x01;
    4530:	2301      	movs	r3, #1
    4532:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
    4534:	2200      	movs	r2, #0
    4536:	7042      	strb	r2, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    4538:	4621      	mov	r1, r4
    453a:	f640 406d 	movw	r0, #3181	; 0xc6d
    453e:	f7ff fdff 	bl	4140 <bt_hci_cmd_send_sync>
		if (err) {
    4542:	4603      	mov	r3, r0
    4544:	2800      	cmp	r0, #0
    4546:	d0b0      	beq.n	44aa <le_init+0x5e>
    4548:	e790      	b.n	446c <le_init+0x20>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    454a:	aa01      	add	r2, sp, #4
    454c:	2100      	movs	r1, #0
    454e:	f242 001c 	movw	r0, #8220	; 0x201c
    4552:	f7ff fdf5 	bl	4140 <bt_hci_cmd_send_sync>
		if (err) {
    4556:	4603      	mov	r3, r0
    4558:	2800      	cmp	r0, #0
    455a:	d187      	bne.n	446c <le_init+0x20>
		le_read_supp_states_complete(rsp);
    455c:	9801      	ldr	r0, [sp, #4]
    455e:	f7ff fae5 	bl	3b2c <le_read_supp_states_complete>
		net_buf_unref(rsp);
    4562:	9801      	ldr	r0, [sp, #4]
    4564:	f015 fdce 	bl	1a104 <net_buf_unref>
    4568:	e7a5      	b.n	44b6 <le_init+0x6a>
			return -ENOBUFS;
    456a:	f06f 0368 	mvn.w	r3, #104	; 0x68
    456e:	e77d      	b.n	446c <le_init+0x20>
		return -ENODEV;
    4570:	f06f 0312 	mvn.w	r3, #18
}
    4574:	4618      	mov	r0, r3
    4576:	4770      	bx	lr
			return -ENOBUFS;
    4578:	f06f 0368 	mvn.w	r3, #104	; 0x68
    457c:	e776      	b.n	446c <le_init+0x20>
    457e:	bf00      	nop
    4580:	2000b808 	.word	0x2000b808

00004584 <br_init>:
{
    4584:	b510      	push	{r4, lr}
    4586:	b082      	sub	sp, #8
	if (bt_dev.le.mtu) {
    4588:	4b0b      	ldr	r3, [pc, #44]	; (45b8 <br_init+0x34>)
    458a:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
    458e:	b11b      	cbz	r3, 4598 <br_init+0x14>
		return 0;
    4590:	2400      	movs	r4, #0
}
    4592:	4620      	mov	r0, r4
    4594:	b002      	add	sp, #8
    4596:	bd10      	pop	{r4, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
    4598:	aa01      	add	r2, sp, #4
    459a:	2100      	movs	r1, #0
    459c:	f241 0005 	movw	r0, #4101	; 0x1005
    45a0:	f7ff fdce 	bl	4140 <bt_hci_cmd_send_sync>
	if (err) {
    45a4:	4604      	mov	r4, r0
    45a6:	2800      	cmp	r0, #0
    45a8:	d1f3      	bne.n	4592 <br_init+0xe>
	read_buffer_size_complete(rsp);
    45aa:	9801      	ldr	r0, [sp, #4]
    45ac:	f7ff fb58 	bl	3c60 <read_buffer_size_complete>
	net_buf_unref(rsp);
    45b0:	9801      	ldr	r0, [sp, #4]
    45b2:	f015 fda7 	bl	1a104 <net_buf_unref>
	return 0;
    45b6:	e7ec      	b.n	4592 <br_init+0xe>
    45b8:	2000b808 	.word	0x2000b808

000045bc <set_event_mask>:
{
    45bc:	b510      	push	{r4, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    45be:	2108      	movs	r1, #8
    45c0:	f640 4001 	movw	r0, #3073	; 0xc01
    45c4:	f7ff fd90 	bl	40e8 <bt_hci_cmd_create>
	if (!buf) {
    45c8:	b348      	cbz	r0, 461e <set_event_mask+0x62>
    45ca:	4604      	mov	r4, r0
	ev = net_buf_add(buf, sizeof(*ev));
    45cc:	2108      	movs	r1, #8
    45ce:	4408      	add	r0, r1
    45d0:	f015 fde4 	bl	1a19c <net_buf_simple_add>
	    BT_FEAT_LE_ENCR(bt_dev.le.features)) {
    45d4:	4b13      	ldr	r3, [pc, #76]	; (4624 <set_event_mask+0x68>)
    45d6:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    45da:	f013 0f01 	tst.w	r3, #1
    45de:	d11b      	bne.n	4618 <set_event_mask+0x5c>
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
    45e0:	4a11      	ldr	r2, [pc, #68]	; (4628 <set_event_mask+0x6c>)
    45e2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
	sys_put_le16(val, dst);
    45e6:	b291      	uxth	r1, r2
	dst[0] = val;
    45e8:	7002      	strb	r2, [r0, #0]
	dst[1] = val >> 8;
    45ea:	0a09      	lsrs	r1, r1, #8
    45ec:	7041      	strb	r1, [r0, #1]
	sys_put_le16(val >> 16, &dst[2]);
    45ee:	0c12      	lsrs	r2, r2, #16
    45f0:	b291      	uxth	r1, r2
	dst[0] = val;
    45f2:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    45f4:	0a0a      	lsrs	r2, r1, #8
    45f6:	70c2      	strb	r2, [r0, #3]
	sys_put_le16(val, dst);
    45f8:	b29a      	uxth	r2, r3
	dst[0] = val;
    45fa:	7103      	strb	r3, [r0, #4]
	dst[1] = val >> 8;
    45fc:	0a12      	lsrs	r2, r2, #8
    45fe:	7142      	strb	r2, [r0, #5]
	sys_put_le16(val >> 16, &dst[2]);
    4600:	0c1b      	lsrs	r3, r3, #16
    4602:	b29a      	uxth	r2, r3
	dst[0] = val;
    4604:	7183      	strb	r3, [r0, #6]
	dst[1] = val >> 8;
    4606:	0a13      	lsrs	r3, r2, #8
    4608:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    460a:	2200      	movs	r2, #0
    460c:	4621      	mov	r1, r4
    460e:	f640 4001 	movw	r0, #3073	; 0xc01
    4612:	f7ff fd95 	bl	4140 <bt_hci_cmd_send_sync>
    4616:	bd10      	pop	{r4, pc}
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
    4618:	4a04      	ldr	r2, [pc, #16]	; (462c <set_event_mask+0x70>)
    461a:	4b05      	ldr	r3, [pc, #20]	; (4630 <set_event_mask+0x74>)
    461c:	e7e3      	b.n	45e6 <set_event_mask+0x2a>
		return -ENOBUFS;
    461e:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    4622:	bd10      	pop	{r4, pc}
    4624:	2000b808 	.word	0x2000b808
    4628:	02008810 	.word	0x02008810
    462c:	02008890 	.word	0x02008890
    4630:	20008000 	.word	0x20008000

00004634 <set_event_mask>:
{
    4634:	b570      	push	{r4, r5, r6, lr}
    4636:	460e      	mov	r6, r1
	struct bt_hci_cp_set_event_mask *cmd = (void *)buf->data;
    4638:	6883      	ldr	r3, [r0, #8]
	return ((u16_t)src[1] << 8) | src[0];
    463a:	79da      	ldrb	r2, [r3, #7]
    463c:	7999      	ldrb	r1, [r3, #6]
    463e:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
    4642:	7958      	ldrb	r0, [r3, #5]
    4644:	791a      	ldrb	r2, [r3, #4]
    4646:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    464a:	2400      	movs	r4, #0
    464c:	ea42 4501 	orr.w	r5, r2, r1, lsl #16
	return ((u16_t)src[1] << 8) | src[0];
    4650:	78d9      	ldrb	r1, [r3, #3]
    4652:	789a      	ldrb	r2, [r3, #2]
    4654:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    4658:	7859      	ldrb	r1, [r3, #1]
    465a:	781b      	ldrb	r3, [r3, #0]
    465c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	return ((u32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
    4660:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    4664:	ea44 0003 	orr.w	r0, r4, r3
    4668:	4629      	mov	r1, r5
	event_mask = sys_get_le64(cmd->events);
    466a:	4b04      	ldr	r3, [pc, #16]	; (467c <set_event_mask+0x48>)
    466c:	e9c3 0100 	strd	r0, r1, [r3]
	ccst = cmd_complete(evt, sizeof(*ccst));
    4670:	2101      	movs	r1, #1
    4672:	4630      	mov	r0, r6
    4674:	f008 f89e 	bl	c7b4 <cmd_complete>
	ccst->status = 0x00;
    4678:	7004      	strb	r4, [r0, #0]
    467a:	bd70      	pop	{r4, r5, r6, pc}
    467c:	2000baf8 	.word	0x2000baf8

00004680 <hci_vs_init>:
{
    4680:	b510      	push	{r4, lr}
    4682:	b082      	sub	sp, #8
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    4684:	aa01      	add	r2, sp, #4
    4686:	2100      	movs	r1, #0
    4688:	f64f 4001 	movw	r0, #64513	; 0xfc01
    468c:	f7ff fd58 	bl	4140 <bt_hci_cmd_send_sync>
	if (err) {
    4690:	b108      	cbz	r0, 4696 <hci_vs_init+0x16>
}
    4692:	b002      	add	sp, #8
    4694:	bd10      	pop	{r4, pc}
	net_buf_unref(rsp);
    4696:	ac02      	add	r4, sp, #8
    4698:	f854 0d04 	ldr.w	r0, [r4, #-4]!
    469c:	f015 fd32 	bl	1a104 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    46a0:	4622      	mov	r2, r4
    46a2:	2100      	movs	r1, #0
    46a4:	f64f 4002 	movw	r0, #64514	; 0xfc02
    46a8:	f7ff fd4a 	bl	4140 <bt_hci_cmd_send_sync>
	if (err) {
    46ac:	2800      	cmp	r0, #0
    46ae:	d1f0      	bne.n	4692 <hci_vs_init+0x12>
	rp.cmds = (void *)rsp->data;
    46b0:	9b01      	ldr	r3, [sp, #4]
    46b2:	6899      	ldr	r1, [r3, #8]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    46b4:	2202      	movs	r2, #2
    46b6:	3101      	adds	r1, #1
    46b8:	480d      	ldr	r0, [pc, #52]	; (46f0 <hci_vs_init+0x70>)
    46ba:	f7fb fe01 	bl	2c0 <memcpy>
	net_buf_unref(rsp);
    46be:	ac02      	add	r4, sp, #8
    46c0:	f854 0d04 	ldr.w	r0, [r4, #-4]!
    46c4:	f015 fd1e 	bl	1a104 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    46c8:	4622      	mov	r2, r4
    46ca:	2100      	movs	r1, #0
    46cc:	f64f 4003 	movw	r0, #64515	; 0xfc03
    46d0:	f7ff fd36 	bl	4140 <bt_hci_cmd_send_sync>
	if (err) {
    46d4:	2800      	cmp	r0, #0
    46d6:	d1dc      	bne.n	4692 <hci_vs_init+0x12>
	rp.feat = (void *)rsp->data;
    46d8:	9b01      	ldr	r3, [sp, #4]
    46da:	6899      	ldr	r1, [r3, #8]
	memcpy(bt_dev.vs_features, rp.feat->features, BT_DEV_VS_FEAT_MAX);
    46dc:	2201      	movs	r2, #1
    46de:	4411      	add	r1, r2
    46e0:	4804      	ldr	r0, [pc, #16]	; (46f4 <hci_vs_init+0x74>)
    46e2:	f7fb fded 	bl	2c0 <memcpy>
	net_buf_unref(rsp);
    46e6:	9801      	ldr	r0, [sp, #4]
    46e8:	f015 fd0c 	bl	1a104 <net_buf_unref>
    46ec:	e7d1      	b.n	4692 <hci_vs_init+0x12>
    46ee:	bf00      	nop
    46f0:	2000b867 	.word	0x2000b867
    46f4:	2000b866 	.word	0x2000b866

000046f8 <set_random_address>:
{
    46f8:	b570      	push	{r4, r5, r6, lr}
    46fa:	4605      	mov	r5, r0
	return memcmp(a, b, sizeof(*a));
    46fc:	2206      	movs	r2, #6
    46fe:	4914      	ldr	r1, [pc, #80]	; (4750 <set_random_address+0x58>)
    4700:	f026 f92c 	bl	2a95c <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    4704:	4604      	mov	r4, r0
    4706:	b908      	cbnz	r0, 470c <set_random_address+0x14>
}
    4708:	4620      	mov	r0, r4
    470a:	bd70      	pop	{r4, r5, r6, pc}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    470c:	2106      	movs	r1, #6
    470e:	f242 0005 	movw	r0, #8197	; 0x2005
    4712:	f7ff fce9 	bl	40e8 <bt_hci_cmd_create>
	if (!buf) {
    4716:	4604      	mov	r4, r0
    4718:	b1b8      	cbz	r0, 474a <set_random_address+0x52>
	net_buf_add_mem(buf, addr, sizeof(*addr));
    471a:	2206      	movs	r2, #6
    471c:	4629      	mov	r1, r5
    471e:	3008      	adds	r0, #8
    4720:	f015 fd42 	bl	1a1a8 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    4724:	2200      	movs	r2, #0
    4726:	4621      	mov	r1, r4
    4728:	f242 0005 	movw	r0, #8197	; 0x2005
    472c:	f7ff fd08 	bl	4140 <bt_hci_cmd_send_sync>
	if (err) {
    4730:	4604      	mov	r4, r0
    4732:	2800      	cmp	r0, #0
    4734:	d1e8      	bne.n	4708 <set_random_address+0x10>
	memcpy(dst, src, sizeof(*dst));
    4736:	4e07      	ldr	r6, [pc, #28]	; (4754 <set_random_address+0x5c>)
    4738:	2206      	movs	r2, #6
    473a:	4629      	mov	r1, r5
    473c:	f106 0008 	add.w	r0, r6, #8
    4740:	f7fb fdbe 	bl	2c0 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    4744:	2301      	movs	r3, #1
    4746:	71f3      	strb	r3, [r6, #7]
	return 0;
    4748:	e7de      	b.n	4708 <set_random_address+0x10>
		return -ENOBUFS;
    474a:	f06f 0468 	mvn.w	r4, #104	; 0x68
    474e:	e7db      	b.n	4708 <set_random_address+0x10>
    4750:	2000b810 	.word	0x2000b810
    4754:	2000b808 	.word	0x2000b808

00004758 <le_set_private_addr>:
{
    4758:	b500      	push	{lr}
    475a:	b083      	sub	sp, #12
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
    475c:	2106      	movs	r1, #6
    475e:	4668      	mov	r0, sp
    4760:	f00c f9a6 	bl	10ab0 <bt_rand>
	if (err) {
    4764:	4603      	mov	r3, r0
    4766:	b118      	cbz	r0, 4770 <le_set_private_addr+0x18>
}
    4768:	4618      	mov	r0, r3
    476a:	b003      	add	sp, #12
    476c:	f85d fb04 	ldr.w	pc, [sp], #4
	nrpa.val[5] &= 0x3f;
    4770:	f89d 3005 	ldrb.w	r3, [sp, #5]
    4774:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    4778:	f88d 3005 	strb.w	r3, [sp, #5]
	return set_random_address(&nrpa);
    477c:	4668      	mov	r0, sp
    477e:	f7ff ffbb 	bl	46f8 <set_random_address>
    4782:	4603      	mov	r3, r0
    4784:	e7f0      	b.n	4768 <le_set_private_addr+0x10>
	...

00004788 <bt_hci_stop_scanning>:
{
    4788:	b530      	push	{r4, r5, lr}
    478a:	b083      	sub	sp, #12
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    478c:	f3bf 8f5b 	dmb	ish
    4790:	4b26      	ldr	r3, [pc, #152]	; (482c <bt_hci_stop_scanning+0xa4>)
    4792:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    4794:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    4798:	f013 0f80 	tst.w	r3, #128	; 0x80
    479c:	d03f      	beq.n	481e <bt_hci_stop_scanning+0x96>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE,
    479e:	2102      	movs	r1, #2
    47a0:	f242 000c 	movw	r0, #8204	; 0x200c
    47a4:	f7ff fca0 	bl	40e8 <bt_hci_cmd_create>
	if (!buf) {
    47a8:	4604      	mov	r4, r0
    47aa:	2800      	cmp	r0, #0
    47ac:	d03a      	beq.n	4824 <bt_hci_stop_scanning+0x9c>
	scan_enable = net_buf_add(buf, sizeof(*scan_enable));
    47ae:	2102      	movs	r1, #2
    47b0:	3008      	adds	r0, #8
    47b2:	f015 fcf3 	bl	1a19c <net_buf_simple_add>
    47b6:	4605      	mov	r5, r0
	memset(scan_enable, 0, sizeof(*scan_enable));
    47b8:	2202      	movs	r2, #2
    47ba:	2100      	movs	r1, #0
    47bc:	f026 f962 	bl	2aa84 <memset>
	scan_enable->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
    47c0:	2300      	movs	r3, #0
    47c2:	706b      	strb	r3, [r5, #1]
	scan_enable->enable = BT_HCI_LE_SCAN_DISABLE;
    47c4:	702b      	strb	r3, [r5, #0]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, &rsp);
    47c6:	aa01      	add	r2, sp, #4
    47c8:	4621      	mov	r1, r4
    47ca:	f242 000c 	movw	r0, #8204	; 0x200c
    47ce:	f7ff fcb7 	bl	4140 <bt_hci_cmd_send_sync>
	if (err) {
    47d2:	4604      	mov	r4, r0
    47d4:	b930      	cbnz	r0, 47e4 <bt_hci_stop_scanning+0x5c>
	err = rsp->data[0];
    47d6:	9b01      	ldr	r3, [sp, #4]
    47d8:	689b      	ldr	r3, [r3, #8]
    47da:	781c      	ldrb	r4, [r3, #0]
	if (!err) {
    47dc:	b12c      	cbz	r4, 47ea <bt_hci_stop_scanning+0x62>
	net_buf_unref(rsp);
    47de:	9801      	ldr	r0, [sp, #4]
    47e0:	f015 fc90 	bl	1a104 <net_buf_unref>
}
    47e4:	4620      	mov	r0, r4
    47e6:	b003      	add	sp, #12
    47e8:	bd30      	pop	{r4, r5, pc}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    47ea:	4b11      	ldr	r3, [pc, #68]	; (4830 <bt_hci_stop_scanning+0xa8>)
    47ec:	f3bf 8f5b 	dmb	ish
    47f0:	e853 2f00 	ldrex	r2, [r3]
    47f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    47f8:	e843 2100 	strex	r1, r2, [r3]
    47fc:	2900      	cmp	r1, #0
    47fe:	d1f7      	bne.n	47f0 <bt_hci_stop_scanning+0x68>
    4800:	f3bf 8f5b 	dmb	ish
    4804:	f3bf 8f5b 	dmb	ish
    4808:	e853 2f00 	ldrex	r2, [r3]
    480c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
    4810:	e843 2100 	strex	r1, r2, [r3]
    4814:	2900      	cmp	r1, #0
    4816:	d1f7      	bne.n	4808 <bt_hci_stop_scanning+0x80>
    4818:	f3bf 8f5b 	dmb	ish
    481c:	e7df      	b.n	47de <bt_hci_stop_scanning+0x56>
		return -EALREADY;
    481e:	f06f 0477 	mvn.w	r4, #119	; 0x77
    4822:	e7df      	b.n	47e4 <bt_hci_stop_scanning+0x5c>
		return -ENOBUFS;
    4824:	f06f 0468 	mvn.w	r4, #104	; 0x68
    4828:	e7dc      	b.n	47e4 <bt_hci_stop_scanning+0x5c>
    482a:	bf00      	nop
    482c:	2000b808 	.word	0x2000b808
    4830:	2000b878 	.word	0x2000b878

00004834 <set_advertise_enable>:
{
    4834:	b538      	push	{r3, r4, r5, lr}
    4836:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    4838:	2101      	movs	r1, #1
    483a:	f242 000a 	movw	r0, #8202	; 0x200a
    483e:	f7ff fc53 	bl	40e8 <bt_hci_cmd_create>
	if (!buf) {
    4842:	b380      	cbz	r0, 48a6 <set_advertise_enable+0x72>
    4844:	4604      	mov	r4, r0
	if (enable) {
    4846:	b1dd      	cbz	r5, 4880 <set_advertise_enable+0x4c>
		net_buf_add_u8(buf, BT_HCI_LE_ADV_ENABLE);
    4848:	2101      	movs	r1, #1
    484a:	3008      	adds	r0, #8
    484c:	f015 fcb7 	bl	1a1be <net_buf_simple_add_u8>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
    4850:	2200      	movs	r2, #0
    4852:	4621      	mov	r1, r4
    4854:	f242 000a 	movw	r0, #8202	; 0x200a
    4858:	f7ff fc72 	bl	4140 <bt_hci_cmd_send_sync>
	if (err) {
    485c:	4603      	mov	r3, r0
    485e:	b968      	cbnz	r0, 487c <set_advertise_enable+0x48>
	if (enable) {
    4860:	b99d      	cbnz	r5, 488a <set_advertise_enable+0x56>
    4862:	4a12      	ldr	r2, [pc, #72]	; (48ac <set_advertise_enable+0x78>)
    4864:	f3bf 8f5b 	dmb	ish
    4868:	e852 1f00 	ldrex	r1, [r2]
    486c:	f021 0120 	bic.w	r1, r1, #32
    4870:	e842 1000 	strex	r0, r1, [r2]
    4874:	2800      	cmp	r0, #0
    4876:	d1f7      	bne.n	4868 <set_advertise_enable+0x34>
    4878:	f3bf 8f5b 	dmb	ish
}
    487c:	4618      	mov	r0, r3
    487e:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
    4880:	2100      	movs	r1, #0
    4882:	3008      	adds	r0, #8
    4884:	f015 fc9b 	bl	1a1be <net_buf_simple_add_u8>
    4888:	e7e2      	b.n	4850 <set_advertise_enable+0x1c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    488a:	4a08      	ldr	r2, [pc, #32]	; (48ac <set_advertise_enable+0x78>)
    488c:	f3bf 8f5b 	dmb	ish
    4890:	e852 1f00 	ldrex	r1, [r2]
    4894:	f041 0120 	orr.w	r1, r1, #32
    4898:	e842 1000 	strex	r0, r1, [r2]
    489c:	2800      	cmp	r0, #0
    489e:	d1f7      	bne.n	4890 <set_advertise_enable+0x5c>
    48a0:	f3bf 8f5b 	dmb	ish
    48a4:	e7ea      	b.n	487c <set_advertise_enable+0x48>
		return -ENOBUFS;
    48a6:	f06f 0368 	mvn.w	r3, #104	; 0x68
    48aa:	e7e7      	b.n	487c <set_advertise_enable+0x48>
    48ac:	2000b878 	.word	0x2000b878

000048b0 <hci_le_create_conn>:
{
    48b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    48b2:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN, sizeof(*cp));
    48b4:	2119      	movs	r1, #25
    48b6:	f242 000d 	movw	r0, #8205	; 0x200d
    48ba:	f7ff fc15 	bl	40e8 <bt_hci_cmd_create>
	if (!buf) {
    48be:	b378      	cbz	r0, 4920 <hci_le_create_conn+0x70>
    48c0:	4607      	mov	r7, r0
	cp = net_buf_add(buf, sizeof(*cp));
    48c2:	2119      	movs	r1, #25
    48c4:	3008      	adds	r0, #8
    48c6:	f015 fc69 	bl	1a19c <net_buf_simple_add>
    48ca:	4604      	mov	r4, r0
	memset(cp, 0, sizeof(*cp));
    48cc:	2219      	movs	r2, #25
    48ce:	2100      	movs	r1, #0
    48d0:	f026 f8d8 	bl	2aa84 <memset>
	cp->scan_interval = sys_cpu_to_le16(BT_GAP_SCAN_FAST_INTERVAL);
    48d4:	2600      	movs	r6, #0
    48d6:	2360      	movs	r3, #96	; 0x60
    48d8:	7023      	strb	r3, [r4, #0]
    48da:	7066      	strb	r6, [r4, #1]
	cp->scan_window = cp->scan_interval;
    48dc:	70a3      	strb	r3, [r4, #2]
    48de:	70e6      	strb	r6, [r4, #3]
}

static inline void bt_addr_le_copy(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    48e0:	2207      	movs	r2, #7
    48e2:	f105 0156 	add.w	r1, r5, #86	; 0x56
    48e6:	1d60      	adds	r0, r4, #5
    48e8:	f7fb fcea 	bl	2c0 <memcpy>
	cp->own_addr_type = conn->le.init_addr.type;
    48ec:	f895 304f 	ldrb.w	r3, [r5, #79]	; 0x4f
    48f0:	7323      	strb	r3, [r4, #12]
	cp->conn_interval_min = sys_cpu_to_le16(conn->le.interval_min);
    48f2:	f8b5 3060 	ldrh.w	r3, [r5, #96]	; 0x60
    48f6:	f8a4 300d 	strh.w	r3, [r4, #13]
	cp->conn_interval_max = sys_cpu_to_le16(conn->le.interval_max);
    48fa:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
    48fe:	f8a4 300f 	strh.w	r3, [r4, #15]
	cp->conn_latency = sys_cpu_to_le16(conn->le.latency);
    4902:	f8b5 3064 	ldrh.w	r3, [r5, #100]	; 0x64
    4906:	f8a4 3011 	strh.w	r3, [r4, #17]
	cp->supervision_timeout = sys_cpu_to_le16(conn->le.timeout);
    490a:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
    490e:	f8a4 3013 	strh.w	r3, [r4, #19]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
    4912:	4632      	mov	r2, r6
    4914:	4639      	mov	r1, r7
    4916:	f242 000d 	movw	r0, #8205	; 0x200d
    491a:	f7ff fc11 	bl	4140 <bt_hci_cmd_send_sync>
    491e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
    4920:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    4924:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00004926 <set_ad>:

static int set_ad(u16_t hci_op, const struct bt_data *ad, size_t ad_len)
{
    4926:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    492a:	4682      	mov	sl, r0
    492c:	460f      	mov	r7, r1
    492e:	4690      	mov	r8, r2
	struct bt_hci_cp_le_set_adv_data *set_data;
	struct net_buf *buf;
	int i;

	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    4930:	2120      	movs	r1, #32
    4932:	f7ff fbd9 	bl	40e8 <bt_hci_cmd_create>
	if (!buf) {
    4936:	2800      	cmp	r0, #0
    4938:	d03c      	beq.n	49b4 <set_ad+0x8e>
    493a:	4681      	mov	r9, r0
		return -ENOBUFS;
	}

	set_data = net_buf_add(buf, sizeof(*set_data));
    493c:	2120      	movs	r1, #32
    493e:	3008      	adds	r0, #8
    4940:	f015 fc2c 	bl	1a19c <net_buf_simple_add>
    4944:	4604      	mov	r4, r0

	memset(set_data, 0, sizeof(*set_data));
    4946:	2220      	movs	r2, #32
    4948:	2100      	movs	r1, #0
    494a:	f026 f89b 	bl	2aa84 <memset>

	for (i = 0; i < ad_len; i++) {
    494e:	2600      	movs	r6, #0
    4950:	4546      	cmp	r6, r8
    4952:	d228      	bcs.n	49a6 <set_ad+0x80>
		/* Check if ad fit in the remaining buffer */
		if (set_data->len + ad[i].data_len + 2 > 31) {
    4954:	7822      	ldrb	r2, [r4, #0]
    4956:	eb07 05c6 	add.w	r5, r7, r6, lsl #3
    495a:	786b      	ldrb	r3, [r5, #1]
    495c:	4413      	add	r3, r2
    495e:	3302      	adds	r3, #2
    4960:	2b1f      	cmp	r3, #31
    4962:	dc19      	bgt.n	4998 <set_ad+0x72>
			net_buf_unref(buf);
			return -EINVAL;
		}

		set_data->data[set_data->len++] = ad[i].data_len + 1;
    4964:	1c53      	adds	r3, r2, #1
    4966:	b2db      	uxtb	r3, r3
    4968:	7023      	strb	r3, [r4, #0]
    496a:	7869      	ldrb	r1, [r5, #1]
    496c:	3101      	adds	r1, #1
    496e:	4422      	add	r2, r4
    4970:	7051      	strb	r1, [r2, #1]
		set_data->data[set_data->len++] = ad[i].type;
    4972:	1c58      	adds	r0, r3, #1
    4974:	b2c0      	uxtb	r0, r0
    4976:	7020      	strb	r0, [r4, #0]
    4978:	f817 2036 	ldrb.w	r2, [r7, r6, lsl #3]
    497c:	4423      	add	r3, r4
    497e:	705a      	strb	r2, [r3, #1]

		memcpy(&set_data->data[set_data->len], ad[i].data,
    4980:	4420      	add	r0, r4
    4982:	786a      	ldrb	r2, [r5, #1]
    4984:	6869      	ldr	r1, [r5, #4]
    4986:	3001      	adds	r0, #1
    4988:	f7fb fc9a 	bl	2c0 <memcpy>
		       ad[i].data_len);
		set_data->len += ad[i].data_len;
    498c:	786b      	ldrb	r3, [r5, #1]
    498e:	7822      	ldrb	r2, [r4, #0]
    4990:	4413      	add	r3, r2
    4992:	7023      	strb	r3, [r4, #0]
	for (i = 0; i < ad_len; i++) {
    4994:	3601      	adds	r6, #1
    4996:	e7db      	b.n	4950 <set_ad+0x2a>
			net_buf_unref(buf);
    4998:	4648      	mov	r0, r9
    499a:	f015 fbb3 	bl	1a104 <net_buf_unref>
			return -EINVAL;
    499e:	f06f 0015 	mvn.w	r0, #21
    49a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	}

	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    49a6:	2200      	movs	r2, #0
    49a8:	4649      	mov	r1, r9
    49aa:	4650      	mov	r0, sl
    49ac:	f7ff fbc8 	bl	4140 <bt_hci_cmd_send_sync>
    49b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -ENOBUFS;
    49b4:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    49b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000049bc <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
    49bc:	8802      	ldrh	r2, [r0, #0]
    49be:	8843      	ldrh	r3, [r0, #2]
    49c0:	429a      	cmp	r2, r3
    49c2:	d81a      	bhi.n	49fa <bt_le_conn_params_valid+0x3e>
    49c4:	2a05      	cmp	r2, #5
    49c6:	d91a      	bls.n	49fe <bt_le_conn_params_valid+0x42>
	    param->interval_min < 6 || param->interval_max > 3200) {
    49c8:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    49cc:	d819      	bhi.n	4a02 <bt_le_conn_params_valid+0x46>
	if (param->latency > 499) {
    49ce:	8881      	ldrh	r1, [r0, #4]
    49d0:	f5b1 7ffa 	cmp.w	r1, #500	; 0x1f4
    49d4:	d217      	bcs.n	4a06 <bt_le_conn_params_valid+0x4a>
{
    49d6:	b410      	push	{r4}
	if (param->timeout < 10 || param->timeout > 3200 ||
    49d8:	88c0      	ldrh	r0, [r0, #6]
    49da:	f1a0 020a 	sub.w	r2, r0, #10
    49de:	b292      	uxth	r2, r2
    49e0:	f640 4476 	movw	r4, #3190	; 0xc76
    49e4:	42a2      	cmp	r2, r4
    49e6:	d810      	bhi.n	4a0a <bt_le_conn_params_valid+0x4e>
	     ((1 + param->latency) * param->interval_max))) {
    49e8:	fb01 3303 	mla	r3, r1, r3, r3
	if (param->timeout < 10 || param->timeout > 3200 ||
    49ec:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
    49f0:	da01      	bge.n	49f6 <bt_le_conn_params_valid+0x3a>
	return true;
    49f2:	2001      	movs	r0, #1
    49f4:	e00a      	b.n	4a0c <bt_le_conn_params_valid+0x50>
		return false;
    49f6:	2000      	movs	r0, #0
    49f8:	e008      	b.n	4a0c <bt_le_conn_params_valid+0x50>
		return false;
    49fa:	2000      	movs	r0, #0
    49fc:	4770      	bx	lr
    49fe:	2000      	movs	r0, #0
    4a00:	4770      	bx	lr
    4a02:	2000      	movs	r0, #0
    4a04:	4770      	bx	lr
		return false;
    4a06:	2000      	movs	r0, #0
    4a08:	4770      	bx	lr
		return false;
    4a0a:	2000      	movs	r0, #0
}
    4a0c:	bc10      	pop	{r4}
    4a0e:	4770      	bx	lr

00004a10 <bt_addr_le_create_static>:
{
    4a10:	b510      	push	{r4, lr}
    4a12:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
    4a14:	2301      	movs	r3, #1
    4a16:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
    4a1a:	2106      	movs	r1, #6
    4a1c:	f00c f848 	bl	10ab0 <bt_rand>
	if (err) {
    4a20:	4602      	mov	r2, r0
    4a22:	b918      	cbnz	r0, 4a2c <bt_addr_le_create_static+0x1c>
	BT_ADDR_SET_STATIC(&addr->a);
    4a24:	79a3      	ldrb	r3, [r4, #6]
    4a26:	f063 033f 	orn	r3, r3, #63	; 0x3f
    4a2a:	71a3      	strb	r3, [r4, #6]
}
    4a2c:	4610      	mov	r0, r2
    4a2e:	bd10      	pop	{r4, pc}

00004a30 <set_static_addr>:
{
    4a30:	b510      	push	{r4, lr}
    4a32:	b082      	sub	sp, #8
	if (bt_storage) {
    4a34:	4b2e      	ldr	r3, [pc, #184]	; (4af0 <set_static_addr+0xc0>)
    4a36:	681b      	ldr	r3, [r3, #0]
    4a38:	b13b      	cbz	r3, 4a4a <set_static_addr+0x1a>
		ret = bt_storage->read(NULL, BT_STORAGE_ID_ADDR,
    4a3a:	681c      	ldr	r4, [r3, #0]
    4a3c:	2307      	movs	r3, #7
    4a3e:	4a2d      	ldr	r2, [pc, #180]	; (4af4 <set_static_addr+0xc4>)
    4a40:	2100      	movs	r1, #0
    4a42:	4608      	mov	r0, r1
    4a44:	47a0      	blx	r4
		if (ret == sizeof(bt_dev.id_addr)) {
    4a46:	2807      	cmp	r0, #7
    4a48:	d02c      	beq.n	4aa4 <set_static_addr+0x74>
	if (bt_dev.vs_commands[1] & BIT(0)) {
    4a4a:	4b2a      	ldr	r3, [pc, #168]	; (4af4 <set_static_addr+0xc4>)
    4a4c:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
    4a50:	f013 0f01 	tst.w	r3, #1
    4a54:	d018      	beq.n	4a88 <set_static_addr+0x58>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS,
    4a56:	aa01      	add	r2, sp, #4
    4a58:	2100      	movs	r1, #0
    4a5a:	f64f 4009 	movw	r0, #64521	; 0xfc09
    4a5e:	f7ff fb6f 	bl	4140 <bt_hci_cmd_send_sync>
		if (err) {
    4a62:	b988      	cbnz	r0, 4a88 <set_static_addr+0x58>
		rp = (void *)rsp->data;
    4a64:	9801      	ldr	r0, [sp, #4]
    4a66:	6881      	ldr	r1, [r0, #8]
		if (rp->num_addrs) {
    4a68:	784b      	ldrb	r3, [r1, #1]
    4a6a:	b15b      	cbz	r3, 4a84 <set_static_addr+0x54>
			bt_dev.id_addr.type = BT_ADDR_LE_RANDOM;
    4a6c:	4821      	ldr	r0, [pc, #132]	; (4af4 <set_static_addr+0xc4>)
    4a6e:	2301      	movs	r3, #1
    4a70:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(dst, src, sizeof(*dst));
    4a74:	2206      	movs	r2, #6
    4a76:	3102      	adds	r1, #2
    4a78:	f7fb fc22 	bl	2c0 <memcpy>
			net_buf_unref(rsp);
    4a7c:	9801      	ldr	r0, [sp, #4]
    4a7e:	f015 fb41 	bl	1a104 <net_buf_unref>
    4a82:	e00f      	b.n	4aa4 <set_static_addr+0x74>
		net_buf_unref(rsp);
    4a84:	f015 fb3e 	bl	1a104 <net_buf_unref>
	err = bt_addr_le_create_static(&bt_dev.id_addr);
    4a88:	481a      	ldr	r0, [pc, #104]	; (4af4 <set_static_addr+0xc4>)
    4a8a:	f7ff ffc1 	bl	4a10 <bt_addr_le_create_static>
	if (err) {
    4a8e:	4603      	mov	r3, r0
    4a90:	b9b8      	cbnz	r0, 4ac2 <set_static_addr+0x92>
	if (bt_storage) {
    4a92:	4b17      	ldr	r3, [pc, #92]	; (4af0 <set_static_addr+0xc0>)
    4a94:	681b      	ldr	r3, [r3, #0]
    4a96:	b12b      	cbz	r3, 4aa4 <set_static_addr+0x74>
		ret = bt_storage->write(NULL, BT_STORAGE_ID_ADDR,
    4a98:	685c      	ldr	r4, [r3, #4]
    4a9a:	2307      	movs	r3, #7
    4a9c:	4a15      	ldr	r2, [pc, #84]	; (4af4 <set_static_addr+0xc4>)
    4a9e:	2100      	movs	r1, #0
    4aa0:	4608      	mov	r0, r1
    4aa2:	47a0      	blx	r4
	if (bt_dev.id_addr.type != BT_ADDR_LE_RANDOM ||
    4aa4:	4b13      	ldr	r3, [pc, #76]	; (4af4 <set_static_addr+0xc4>)
    4aa6:	781b      	ldrb	r3, [r3, #0]
    4aa8:	2b01      	cmp	r3, #1
    4aaa:	d11b      	bne.n	4ae4 <set_static_addr+0xb4>
	    (bt_dev.id_addr.a.val[5] & 0xc0) != 0xc0) {
    4aac:	4b11      	ldr	r3, [pc, #68]	; (4af4 <set_static_addr+0xc4>)
    4aae:	799b      	ldrb	r3, [r3, #6]
	if (bt_dev.id_addr.type != BT_ADDR_LE_RANDOM ||
    4ab0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    4ab4:	2bc0      	cmp	r3, #192	; 0xc0
    4ab6:	d118      	bne.n	4aea <set_static_addr+0xba>
	err = set_random_address(&bt_dev.id_addr.a);
    4ab8:	480f      	ldr	r0, [pc, #60]	; (4af8 <set_static_addr+0xc8>)
    4aba:	f7ff fe1d 	bl	46f8 <set_random_address>
	if (err) {
    4abe:	4603      	mov	r3, r0
    4ac0:	b110      	cbz	r0, 4ac8 <set_static_addr+0x98>
}
    4ac2:	4618      	mov	r0, r3
    4ac4:	b002      	add	sp, #8
    4ac6:	bd10      	pop	{r4, pc}
    4ac8:	4a0c      	ldr	r2, [pc, #48]	; (4afc <set_static_addr+0xcc>)
    4aca:	f3bf 8f5b 	dmb	ish
    4ace:	e852 1f00 	ldrex	r1, [r2]
    4ad2:	f041 0104 	orr.w	r1, r1, #4
    4ad6:	e842 1000 	strex	r0, r1, [r2]
    4ada:	2800      	cmp	r0, #0
    4adc:	d1f7      	bne.n	4ace <set_static_addr+0x9e>
    4ade:	f3bf 8f5b 	dmb	ish
	return 0;
    4ae2:	e7ee      	b.n	4ac2 <set_static_addr+0x92>
		return -EINVAL;
    4ae4:	f06f 0315 	mvn.w	r3, #21
    4ae8:	e7eb      	b.n	4ac2 <set_static_addr+0x92>
    4aea:	f06f 0315 	mvn.w	r3, #21
    4aee:	e7e8      	b.n	4ac2 <set_static_addr+0x92>
    4af0:	20002954 	.word	0x20002954
    4af4:	2000b808 	.word	0x2000b808
    4af8:	2000b809 	.word	0x2000b809
    4afc:	2000b878 	.word	0x2000b878

00004b00 <hci_init>:
{
    4b00:	b510      	push	{r4, lr}
    4b02:	b084      	sub	sp, #16
	err = common_init();
    4b04:	f7ff fb5c 	bl	41c0 <common_init>
	if (err) {
    4b08:	4604      	mov	r4, r0
    4b0a:	b110      	cbz	r0, 4b12 <hci_init+0x12>
}
    4b0c:	4620      	mov	r0, r4
    4b0e:	b004      	add	sp, #16
    4b10:	bd10      	pop	{r4, pc}
	err = le_init();
    4b12:	f7ff fc9b 	bl	444c <le_init>
	if (err) {
    4b16:	4604      	mov	r4, r0
    4b18:	2800      	cmp	r0, #0
    4b1a:	d1f7      	bne.n	4b0c <hci_init+0xc>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    4b1c:	4b17      	ldr	r3, [pc, #92]	; (4b7c <hci_init+0x7c>)
    4b1e:	7e9b      	ldrb	r3, [r3, #26]
    4b20:	f013 0f20 	tst.w	r3, #32
    4b24:	d104      	bne.n	4b30 <hci_init+0x30>
		err = br_init();
    4b26:	f7ff fd2d 	bl	4584 <br_init>
		if (err) {
    4b2a:	4604      	mov	r4, r0
    4b2c:	2800      	cmp	r0, #0
    4b2e:	d1ed      	bne.n	4b0c <hci_init+0xc>
	err = set_event_mask();
    4b30:	f7ff fd44 	bl	45bc <set_event_mask>
	if (err) {
    4b34:	4604      	mov	r4, r0
    4b36:	2800      	cmp	r0, #0
    4b38:	d1e8      	bne.n	4b0c <hci_init+0xc>
	hci_vs_init();
    4b3a:	f7ff fda1 	bl	4680 <hci_vs_init>
	if (!bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_ANY) ||
    4b3e:	2300      	movs	r3, #0
    4b40:	9300      	str	r3, [sp, #0]
    4b42:	f8cd 3003 	str.w	r3, [sp, #3]
	return memcmp(a, b, sizeof(*a));
    4b46:	2207      	movs	r2, #7
    4b48:	4669      	mov	r1, sp
    4b4a:	480c      	ldr	r0, [pc, #48]	; (4b7c <hci_init+0x7c>)
    4b4c:	f025 ff06 	bl	2a95c <memcmp>
    4b50:	b178      	cbz	r0, 4b72 <hci_init+0x72>
	    !bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_NONE)) {
    4b52:	4b0b      	ldr	r3, [pc, #44]	; (4b80 <hci_init+0x80>)
    4b54:	e893 0003 	ldmia.w	r3, {r0, r1}
    4b58:	9002      	str	r0, [sp, #8]
    4b5a:	f8ad 100c 	strh.w	r1, [sp, #12]
    4b5e:	0c09      	lsrs	r1, r1, #16
    4b60:	f88d 100e 	strb.w	r1, [sp, #14]
    4b64:	2207      	movs	r2, #7
    4b66:	a902      	add	r1, sp, #8
    4b68:	4804      	ldr	r0, [pc, #16]	; (4b7c <hci_init+0x7c>)
    4b6a:	f025 fef7 	bl	2a95c <memcmp>
	if (!bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_ANY) ||
    4b6e:	2800      	cmp	r0, #0
    4b70:	d1cc      	bne.n	4b0c <hci_init+0xc>
		err = set_static_addr();
    4b72:	f7ff ff5d 	bl	4a30 <set_static_addr>
    4b76:	4604      	mov	r4, r0
    4b78:	e7c8      	b.n	4b0c <hci_init+0xc>
    4b7a:	bf00      	nop
    4b7c:	2000b808 	.word	0x2000b808
    4b80:	0002ee20 	.word	0x0002ee20

00004b84 <hci_init>:
		return HCI_CLASS_ACL_DATA;
	}
}

void hci_init(struct k_poll_signal *signal_host_buf)
{
    4b84:	b508      	push	{r3, lr}
#if defined(CONFIG_BT_HCI_ACL_FLOW_CONTROL)
	hbuf_signal = signal_host_buf;
#endif
	reset(NULL, NULL);
    4b86:	2100      	movs	r1, #0
    4b88:	4608      	mov	r0, r1
    4b8a:	f007 ffb1 	bl	caf0 <reset>
    4b8e:	bd08      	pop	{r3, pc}

00004b90 <bt_send>:
{
    4b90:	b508      	push	{r3, lr}
	return bt_dev.drv->send(buf);
    4b92:	4b03      	ldr	r3, [pc, #12]	; (4ba0 <bt_send+0x10>)
    4b94:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    4b98:	68db      	ldr	r3, [r3, #12]
    4b9a:	4798      	blx	r3
}
    4b9c:	bd08      	pop	{r3, pc}
    4b9e:	bf00      	nop
    4ba0:	2000b808 	.word	0x2000b808

00004ba4 <bt_hci_cmd_send>:
{
    4ba4:	b538      	push	{r3, r4, r5, lr}
    4ba6:	4605      	mov	r5, r0
	if (!buf) {
    4ba8:	460c      	mov	r4, r1
    4baa:	b151      	cbz	r1, 4bc2 <bt_hci_cmd_send+0x1e>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
    4bac:	f640 4335 	movw	r3, #3125	; 0xc35
    4bb0:	429d      	cmp	r5, r3
    4bb2:	d00e      	beq.n	4bd2 <bt_hci_cmd_send+0x2e>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    4bb4:	4621      	mov	r1, r4
    4bb6:	480c      	ldr	r0, [pc, #48]	; (4be8 <bt_hci_cmd_send+0x44>)
    4bb8:	f015 fa96 	bl	1a0e8 <net_buf_put>
	return 0;
    4bbc:	2500      	movs	r5, #0
}
    4bbe:	4628      	mov	r0, r5
    4bc0:	bd38      	pop	{r3, r4, r5, pc}
		buf = bt_hci_cmd_create(opcode, 0);
    4bc2:	f7ff fa91 	bl	40e8 <bt_hci_cmd_create>
		if (!buf) {
    4bc6:	4604      	mov	r4, r0
    4bc8:	2800      	cmp	r0, #0
    4bca:	d1ef      	bne.n	4bac <bt_hci_cmd_send+0x8>
			return -ENOBUFS;
    4bcc:	f06f 0568 	mvn.w	r5, #104	; 0x68
    4bd0:	e7f5      	b.n	4bbe <bt_hci_cmd_send+0x1a>
		err = bt_send(buf);
    4bd2:	4620      	mov	r0, r4
    4bd4:	f7ff ffdc 	bl	4b90 <bt_send>
		if (err) {
    4bd8:	4605      	mov	r5, r0
    4bda:	2800      	cmp	r0, #0
    4bdc:	d0ef      	beq.n	4bbe <bt_hci_cmd_send+0x1a>
			net_buf_unref(buf);
    4bde:	4620      	mov	r0, r4
    4be0:	f015 fa90 	bl	1a104 <net_buf_unref>
    4be4:	e7eb      	b.n	4bbe <bt_hci_cmd_send+0x1a>
    4be6:	bf00      	nop
    4be8:	2000b8dc 	.word	0x2000b8dc

00004bec <start_le_scan>:
{
    4bec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4bf0:	b083      	sub	sp, #12
    4bf2:	4606      	mov	r6, r0
    4bf4:	4689      	mov	r9, r1
    4bf6:	4615      	mov	r5, r2
    4bf8:	4698      	mov	r8, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM,
    4bfa:	2107      	movs	r1, #7
    4bfc:	f242 000b 	movw	r0, #8203	; 0x200b
    4c00:	f7ff fa72 	bl	40e8 <bt_hci_cmd_create>
	if (!buf) {
    4c04:	2800      	cmp	r0, #0
    4c06:	d072      	beq.n	4cee <start_le_scan+0x102>
    4c08:	4607      	mov	r7, r0
	set_param = net_buf_add(buf, sizeof(*set_param));
    4c0a:	2107      	movs	r1, #7
    4c0c:	3008      	adds	r0, #8
    4c0e:	f015 fac5 	bl	1a19c <net_buf_simple_add>
    4c12:	4604      	mov	r4, r0
	memset(set_param, 0, sizeof(*set_param));
    4c14:	2207      	movs	r2, #7
    4c16:	2100      	movs	r1, #0
    4c18:	f025 ff34 	bl	2aa84 <memset>
	set_param->scan_type = scan_type;
    4c1c:	7026      	strb	r6, [r4, #0]
	set_param->interval = sys_cpu_to_le16(interval);
    4c1e:	f8a4 9001 	strh.w	r9, [r4, #1]
	set_param->window = sys_cpu_to_le16(window);
    4c22:	f8a4 5003 	strh.w	r5, [r4, #3]
	set_param->filter_policy = 0x00;
    4c26:	2300      	movs	r3, #0
    4c28:	71a3      	strb	r3, [r4, #6]
		set_param->addr_type =  bt_dev.id_addr.type;
    4c2a:	4b34      	ldr	r3, [pc, #208]	; (4cfc <start_le_scan+0x110>)
    4c2c:	781b      	ldrb	r3, [r3, #0]
    4c2e:	7163      	strb	r3, [r4, #5]
		if (scan_type == BT_HCI_LE_SCAN_ACTIVE &&
    4c30:	2e01      	cmp	r6, #1
    4c32:	d02c      	beq.n	4c8e <start_le_scan+0xa2>
	bt_hci_cmd_send(BT_HCI_OP_LE_SET_SCAN_PARAM, buf);
    4c34:	4639      	mov	r1, r7
    4c36:	f242 000b 	movw	r0, #8203	; 0x200b
    4c3a:	f7ff ffb3 	bl	4ba4 <bt_hci_cmd_send>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE,
    4c3e:	2102      	movs	r1, #2
    4c40:	f242 000c 	movw	r0, #8204	; 0x200c
    4c44:	f7ff fa50 	bl	40e8 <bt_hci_cmd_create>
	if (!buf) {
    4c48:	4604      	mov	r4, r0
    4c4a:	2800      	cmp	r0, #0
    4c4c:	d052      	beq.n	4cf4 <start_le_scan+0x108>
	scan_enable = net_buf_add(buf, sizeof(*scan_enable));
    4c4e:	2102      	movs	r1, #2
    4c50:	3008      	adds	r0, #8
    4c52:	f015 faa3 	bl	1a19c <net_buf_simple_add>
    4c56:	4605      	mov	r5, r0
	memset(scan_enable, 0, sizeof(*scan_enable));
    4c58:	2202      	movs	r2, #2
    4c5a:	2100      	movs	r1, #0
    4c5c:	f025 ff12 	bl	2aa84 <memset>
	scan_enable->filter_dup = filter_dup;
    4c60:	f885 8001 	strb.w	r8, [r5, #1]
	scan_enable->enable = BT_HCI_LE_SCAN_ENABLE;
    4c64:	2301      	movs	r3, #1
    4c66:	702b      	strb	r3, [r5, #0]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, &rsp);
    4c68:	aa01      	add	r2, sp, #4
    4c6a:	4621      	mov	r1, r4
    4c6c:	f242 000c 	movw	r0, #8204	; 0x200c
    4c70:	f7ff fa66 	bl	4140 <bt_hci_cmd_send_sync>
	if (err) {
    4c74:	4605      	mov	r5, r0
    4c76:	b930      	cbnz	r0, 4c86 <start_le_scan+0x9a>
	err = rsp->data[0];
    4c78:	9b01      	ldr	r3, [sp, #4]
    4c7a:	689b      	ldr	r3, [r3, #8]
    4c7c:	781d      	ldrb	r5, [r3, #0]
	if (!err) {
    4c7e:	b1d5      	cbz	r5, 4cb6 <start_le_scan+0xca>
	net_buf_unref(rsp);
    4c80:	9801      	ldr	r0, [sp, #4]
    4c82:	f015 fa3f 	bl	1a104 <net_buf_unref>
}
    4c86:	4628      	mov	r0, r5
    4c88:	b003      	add	sp, #12
    4c8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    4c8e:	f3bf 8f5b 	dmb	ish
    4c92:	4b1a      	ldr	r3, [pc, #104]	; (4cfc <start_le_scan+0x110>)
    4c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    4c96:	f3bf 8f5b 	dmb	ish
		if (scan_type == BT_HCI_LE_SCAN_ACTIVE &&
    4c9a:	f013 0f20 	tst.w	r3, #32
    4c9e:	d1c9      	bne.n	4c34 <start_le_scan+0x48>
			err = le_set_private_addr();
    4ca0:	f7ff fd5a 	bl	4758 <le_set_private_addr>
			if (err) {
    4ca4:	4605      	mov	r5, r0
    4ca6:	b910      	cbnz	r0, 4cae <start_le_scan+0xc2>
			set_param->addr_type = BT_ADDR_LE_RANDOM;
    4ca8:	2301      	movs	r3, #1
    4caa:	7163      	strb	r3, [r4, #5]
    4cac:	e7c2      	b.n	4c34 <start_le_scan+0x48>
				net_buf_unref(buf);
    4cae:	4638      	mov	r0, r7
    4cb0:	f015 fa28 	bl	1a104 <net_buf_unref>
				return err;
    4cb4:	e7e7      	b.n	4c86 <start_le_scan+0x9a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    4cb6:	4b12      	ldr	r3, [pc, #72]	; (4d00 <start_le_scan+0x114>)
    4cb8:	f3bf 8f5b 	dmb	ish
    4cbc:	e853 2f00 	ldrex	r2, [r3]
    4cc0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    4cc4:	e843 2100 	strex	r1, r2, [r3]
    4cc8:	2900      	cmp	r1, #0
    4cca:	d1f7      	bne.n	4cbc <start_le_scan+0xd0>
    4ccc:	f3bf 8f5b 	dmb	ish
		if (scan_type == BT_HCI_LE_SCAN_ACTIVE) {
    4cd0:	2e01      	cmp	r6, #1
    4cd2:	d1d5      	bne.n	4c80 <start_le_scan+0x94>
    4cd4:	f3bf 8f5b 	dmb	ish
    4cd8:	e853 2f00 	ldrex	r2, [r3]
    4cdc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    4ce0:	e843 2100 	strex	r1, r2, [r3]
    4ce4:	2900      	cmp	r1, #0
    4ce6:	d1f7      	bne.n	4cd8 <start_le_scan+0xec>
    4ce8:	f3bf 8f5b 	dmb	ish
    4cec:	e7c8      	b.n	4c80 <start_le_scan+0x94>
		return -ENOBUFS;
    4cee:	f06f 0568 	mvn.w	r5, #104	; 0x68
    4cf2:	e7c8      	b.n	4c86 <start_le_scan+0x9a>
		return -ENOBUFS;
    4cf4:	f06f 0568 	mvn.w	r5, #104	; 0x68
    4cf8:	e7c5      	b.n	4c86 <start_le_scan+0x9a>
    4cfa:	bf00      	nop
    4cfc:	2000b808 	.word	0x2000b808
    4d00:	2000b878 	.word	0x2000b878

00004d04 <bt_le_scan_update>:
{
    4d04:	b538      	push	{r3, r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    4d06:	f3bf 8f5b 	dmb	ish
    4d0a:	4b17      	ldr	r3, [pc, #92]	; (4d68 <bt_le_scan_update+0x64>)
    4d0c:	6f1c      	ldr	r4, [r3, #112]	; 0x70
    4d0e:	f3bf 8f5b 	dmb	ish
 */
static inline int atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));

	return (1 & (val >> (bit & (ATOMIC_BITS - 1))));
    4d12:	f3c4 2400 	ubfx	r4, r4, #8, #1
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    4d16:	b114      	cbz	r4, 4d1e <bt_le_scan_update+0x1a>
		return 0;
    4d18:	2300      	movs	r3, #0
}
    4d1a:	4618      	mov	r0, r3
    4d1c:	bd38      	pop	{r3, r4, r5, pc}
    4d1e:	4605      	mov	r5, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    4d20:	f3bf 8f5b 	dmb	ish
    4d24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    4d26:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    4d2a:	f013 0f80 	tst.w	r3, #128	; 0x80
    4d2e:	d004      	beq.n	4d3a <bt_le_scan_update+0x36>
		err = bt_hci_stop_scanning();
    4d30:	f7ff fd2a 	bl	4788 <bt_hci_stop_scanning>
		if (err) {
    4d34:	4603      	mov	r3, r0
    4d36:	2800      	cmp	r0, #0
    4d38:	d1ef      	bne.n	4d1a <bt_le_scan_update+0x16>
		conn = bt_conn_lookup_state_le(NULL, BT_CONN_CONNECT_SCAN);
    4d3a:	2101      	movs	r1, #1
    4d3c:	2000      	movs	r0, #0
    4d3e:	f001 fcd9 	bl	66f4 <bt_conn_lookup_state_le>
		if (!conn) {
    4d42:	b170      	cbz	r0, 4d62 <bt_le_scan_update+0x5e>
		bt_conn_unref(conn);
    4d44:	f001 fd08 	bl	6758 <bt_conn_unref>
		if (fast_scan) {
    4d48:	b13d      	cbz	r5, 4d5a <bt_le_scan_update+0x56>
			window = BT_GAP_SCAN_FAST_WINDOW;
    4d4a:	2230      	movs	r2, #48	; 0x30
			interval = BT_GAP_SCAN_FAST_INTERVAL;
    4d4c:	2160      	movs	r1, #96	; 0x60
		return start_le_scan(BT_HCI_LE_SCAN_PASSIVE, interval, window,
    4d4e:	2301      	movs	r3, #1
    4d50:	2000      	movs	r0, #0
    4d52:	f7ff ff4b 	bl	4bec <start_le_scan>
    4d56:	4603      	mov	r3, r0
    4d58:	e7df      	b.n	4d1a <bt_le_scan_update+0x16>
			window = BT_GAP_SCAN_SLOW_WINDOW_1;
    4d5a:	2212      	movs	r2, #18
			interval = BT_GAP_SCAN_SLOW_INTERVAL_1;
    4d5c:	f44f 6100 	mov.w	r1, #2048	; 0x800
    4d60:	e7f5      	b.n	4d4e <bt_le_scan_update+0x4a>
			return 0;
    4d62:	4623      	mov	r3, r4
    4d64:	e7d9      	b.n	4d1a <bt_le_scan_update+0x16>
    4d66:	bf00      	nop
    4d68:	2000b808 	.word	0x2000b808

00004d6c <bt_init>:
{
    4d6c:	b510      	push	{r4, lr}
	err = hci_init();
    4d6e:	f7ff fec7 	bl	4b00 <hci_init>
	if (err) {
    4d72:	4604      	mov	r4, r0
    4d74:	b108      	cbz	r0, 4d7a <bt_init+0xe>
}
    4d76:	4620      	mov	r0, r4
    4d78:	bd10      	pop	{r4, pc}
		err = bt_conn_init();
    4d7a:	f002 f83b 	bl	6df4 <bt_conn_init>
		if (err) {
    4d7e:	4604      	mov	r4, r0
    4d80:	2800      	cmp	r0, #0
    4d82:	d1f8      	bne.n	4d76 <bt_init+0xa>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    4d84:	4b07      	ldr	r3, [pc, #28]	; (4da4 <bt_init+0x38>)
    4d86:	f3bf 8f5b 	dmb	ish
    4d8a:	e853 2f00 	ldrex	r2, [r3]
    4d8e:	f042 0202 	orr.w	r2, r2, #2
    4d92:	e843 2100 	strex	r1, r2, [r3]
    4d96:	2900      	cmp	r1, #0
    4d98:	d1f7      	bne.n	4d8a <bt_init+0x1e>
    4d9a:	f3bf 8f5b 	dmb	ish
	bt_le_scan_update(false);
    4d9e:	f7ff ffb1 	bl	4d04 <bt_le_scan_update>
	return 0;
    4da2:	e7e8      	b.n	4d76 <bt_init+0xa>
    4da4:	2000b878 	.word	0x2000b878

00004da8 <init_work>:
{
    4da8:	b508      	push	{r3, lr}
	err = bt_init();
    4daa:	f7ff ffdf 	bl	4d6c <bt_init>
	if (ready_cb) {
    4dae:	4b02      	ldr	r3, [pc, #8]	; (4db8 <init_work+0x10>)
    4db0:	681b      	ldr	r3, [r3, #0]
    4db2:	b103      	cbz	r3, 4db6 <init_work+0xe>
		ready_cb(err);
    4db4:	4798      	blx	r3
    4db6:	bd08      	pop	{r3, pc}
    4db8:	200002b4 	.word	0x200002b4

00004dbc <hci_disconn_complete>:
{
    4dbc:	b530      	push	{r4, r5, lr}
    4dbe:	b085      	sub	sp, #20
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    4dc0:	6884      	ldr	r4, [r0, #8]
	u16_t handle = sys_le16_to_cpu(evt->handle);
    4dc2:	f8b4 0001 	ldrh.w	r0, [r4, #1]
	if (evt->status) {
    4dc6:	7823      	ldrb	r3, [r4, #0]
    4dc8:	b10b      	cbz	r3, 4dce <hci_disconn_complete+0x12>
}
    4dca:	b005      	add	sp, #20
    4dcc:	bd30      	pop	{r4, r5, pc}
	conn = bt_conn_lookup_handle(handle);
    4dce:	f001 fc3f 	bl	6650 <bt_conn_lookup_handle>
	if (!conn) {
    4dd2:	4605      	mov	r5, r0
    4dd4:	2800      	cmp	r0, #0
    4dd6:	d034      	beq.n	4e42 <hci_disconn_complete+0x86>
	conn->err = evt->reason;
    4dd8:	78e3      	ldrb	r3, [r4, #3]
    4dda:	72c3      	strb	r3, [r0, #11]
	k_call_stacks_analyze();
    4ddc:	f022 faf8 	bl	273d0 <k_call_stacks_analyze>
		} else {
			break;
		}
	}
#else
	for (i = 0; i < size; i++) {
    4de0:	2200      	movs	r2, #0
	size_t unused = 0;
    4de2:	4613      	mov	r3, r2
	for (i = 0; i < size; i++) {
    4de4:	f5b2 7f20 	cmp.w	r2, #640	; 0x280
    4de8:	d206      	bcs.n	4df8 <hci_disconn_complete+0x3c>
		if ((unsigned char)stack[i] == 0xaa) {
    4dea:	4927      	ldr	r1, [pc, #156]	; (4e88 <hci_disconn_complete+0xcc>)
    4dec:	5c89      	ldrb	r1, [r1, r2]
    4dee:	29aa      	cmp	r1, #170	; 0xaa
    4df0:	d102      	bne.n	4df8 <hci_disconn_complete+0x3c>
			unused++;
    4df2:	3301      	adds	r3, #1
	for (i = 0; i < size; i++) {
    4df4:	3201      	adds	r2, #1
    4df6:	e7f5      	b.n	4de4 <hci_disconn_complete+0x28>
	unsigned int pcnt, unused = 0;

	unused = stack_unused_space_get(stack, size);

	/* Calculate the real size reserved for the stack */
	pcnt = ((size - unused) * 100) / size;
    4df8:	f5c3 7120 	rsb	r1, r3, #640	; 0x280
    4dfc:	2264      	movs	r2, #100	; 0x64
    4dfe:	fb02 f201 	mul.w	r2, r2, r1
    4e02:	4822      	ldr	r0, [pc, #136]	; (4e8c <hci_disconn_complete+0xd0>)
    4e04:	fba0 0202 	umull	r0, r2, r0, r2
    4e08:	0a52      	lsrs	r2, r2, #9

	printk("%s (real size %u):\tunused %u\tusage %u / %u (%u %%)\n", name,
    4e0a:	9202      	str	r2, [sp, #8]
    4e0c:	f44f 7220 	mov.w	r2, #640	; 0x280
    4e10:	9201      	str	r2, [sp, #4]
    4e12:	9100      	str	r1, [sp, #0]
    4e14:	491e      	ldr	r1, [pc, #120]	; (4e90 <hci_disconn_complete+0xd4>)
    4e16:	481f      	ldr	r0, [pc, #124]	; (4e94 <hci_disconn_complete+0xd8>)
    4e18:	f7fe f896 	bl	2f48 <printk>
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    4e1c:	2100      	movs	r1, #0
    4e1e:	4628      	mov	r0, r5
    4e20:	f001 fd28 	bl	6874 <bt_conn_set_state>
	conn->handle = 0;
    4e24:	2300      	movs	r3, #0
    4e26:	802b      	strh	r3, [r5, #0]
	if (conn->type != BT_CONN_TYPE_LE) {
    4e28:	78ab      	ldrb	r3, [r5, #2]
    4e2a:	bb03      	cbnz	r3, 4e6e <hci_disconn_complete+0xb2>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    4e2c:	f3bf 8f5b 	dmb	ish
    4e30:	686b      	ldr	r3, [r5, #4]
    4e32:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
    4e36:	f013 0f01 	tst.w	r3, #1
    4e3a:	d11c      	bne.n	4e76 <hci_disconn_complete+0xba>
	bt_conn_unref(conn);
    4e3c:	4628      	mov	r0, r5
    4e3e:	f001 fc8b 	bl	6758 <bt_conn_unref>
    4e42:	f3bf 8f5b 	dmb	ish
    4e46:	4b14      	ldr	r3, [pc, #80]	; (4e98 <hci_disconn_complete+0xdc>)
    4e48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    4e4a:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    4e4e:	f013 0f40 	tst.w	r3, #64	; 0x40
    4e52:	d0ba      	beq.n	4dca <hci_disconn_complete+0xe>
    4e54:	f3bf 8f5b 	dmb	ish
    4e58:	4b0f      	ldr	r3, [pc, #60]	; (4e98 <hci_disconn_complete+0xdc>)
    4e5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    4e5c:	f3bf 8f5b 	dmb	ish
    4e60:	f013 0f20 	tst.w	r3, #32
    4e64:	d1b1      	bne.n	4dca <hci_disconn_complete+0xe>
		set_advertise_enable(true);
    4e66:	2001      	movs	r0, #1
    4e68:	f7ff fce4 	bl	4834 <set_advertise_enable>
    4e6c:	e7ad      	b.n	4dca <hci_disconn_complete+0xe>
		bt_conn_unref(conn);
    4e6e:	4628      	mov	r0, r5
    4e70:	f001 fc72 	bl	6758 <bt_conn_unref>
		return;
    4e74:	e7a9      	b.n	4dca <hci_disconn_complete+0xe>
		bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    4e76:	2101      	movs	r1, #1
    4e78:	4628      	mov	r0, r5
    4e7a:	f001 fcfb 	bl	6874 <bt_conn_set_state>
		bt_le_scan_update(false);
    4e7e:	2000      	movs	r0, #0
    4e80:	f7ff ff40 	bl	4d04 <bt_le_scan_update>
    4e84:	e7da      	b.n	4e3c <hci_disconn_complete+0x80>
    4e86:	bf00      	nop
    4e88:	20003ba8 	.word	0x20003ba8
    4e8c:	cccccccd 	.word	0xcccccccd
    4e90:	0002f43c 	.word	0x0002f43c
    4e94:	0002f448 	.word	0x0002f448
    4e98:	2000b808 	.word	0x2000b808

00004e9c <check_pending_conn>:
{
    4e9c:	b538      	push	{r3, r4, r5, lr}
    4e9e:	f3bf 8f5b 	dmb	ish
    4ea2:	4b23      	ldr	r3, [pc, #140]	; (4f30 <check_pending_conn+0x94>)
    4ea4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    4ea6:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    4eaa:	f413 7f80 	tst.w	r3, #256	; 0x100
    4eae:	d101      	bne.n	4eb4 <check_pending_conn+0x18>
	if (evtype != BT_LE_ADV_IND && evtype != BT_LE_ADV_DIRECT_IND) {
    4eb0:	2a01      	cmp	r2, #1
    4eb2:	d900      	bls.n	4eb6 <check_pending_conn+0x1a>
    4eb4:	bd38      	pop	{r3, r4, r5, pc}
    4eb6:	460c      	mov	r4, r1
	conn = bt_conn_lookup_state_le(id_addr, BT_CONN_CONNECT_SCAN);
    4eb8:	2101      	movs	r1, #1
    4eba:	f001 fc1b 	bl	66f4 <bt_conn_lookup_state_le>
	if (!conn) {
    4ebe:	4605      	mov	r5, r0
    4ec0:	2800      	cmp	r0, #0
    4ec2:	d0f7      	beq.n	4eb4 <check_pending_conn+0x18>
	if (bt_hci_stop_scanning()) {
    4ec4:	f7ff fc60 	bl	4788 <bt_hci_stop_scanning>
    4ec8:	b9c0      	cbnz	r0, 4efc <check_pending_conn+0x60>
    4eca:	f3bf 8f5b 	dmb	ish
    4ece:	4b18      	ldr	r3, [pc, #96]	; (4f30 <check_pending_conn+0x94>)
    4ed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    4ed2:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(bt_dev.flags, BT_DEV_ID_STATIC_RANDOM)) {
    4ed6:	f013 0f04 	tst.w	r3, #4
    4eda:	d11c      	bne.n	4f16 <check_pending_conn+0x7a>
	memcpy(dst, src, sizeof(*dst));
    4edc:	2207      	movs	r2, #7
    4ede:	4914      	ldr	r1, [pc, #80]	; (4f30 <check_pending_conn+0x94>)
    4ee0:	f105 004f 	add.w	r0, r5, #79	; 0x4f
    4ee4:	f7fb f9ec 	bl	2c0 <memcpy>
    4ee8:	2207      	movs	r2, #7
    4eea:	4621      	mov	r1, r4
    4eec:	f105 0056 	add.w	r0, r5, #86	; 0x56
    4ef0:	f7fb f9e6 	bl	2c0 <memcpy>
	if (hci_le_create_conn(conn)) {
    4ef4:	4628      	mov	r0, r5
    4ef6:	f7ff fcdb 	bl	48b0 <hci_le_create_conn>
    4efa:	b180      	cbz	r0, 4f1e <check_pending_conn+0x82>
	conn->err = BT_HCI_ERR_UNSPECIFIED;
    4efc:	231f      	movs	r3, #31
    4efe:	72eb      	strb	r3, [r5, #11]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    4f00:	2100      	movs	r1, #0
    4f02:	4628      	mov	r0, r5
    4f04:	f001 fcb6 	bl	6874 <bt_conn_set_state>
	bt_conn_unref(conn);
    4f08:	4628      	mov	r0, r5
    4f0a:	f001 fc25 	bl	6758 <bt_conn_unref>
	bt_le_scan_update(false);
    4f0e:	2000      	movs	r0, #0
    4f10:	f7ff fef8 	bl	4d04 <bt_le_scan_update>
    4f14:	e7ce      	b.n	4eb4 <check_pending_conn+0x18>
			set_random_address(&bt_dev.id_addr.a);
    4f16:	4807      	ldr	r0, [pc, #28]	; (4f34 <check_pending_conn+0x98>)
    4f18:	f7ff fbee 	bl	46f8 <set_random_address>
    4f1c:	e7de      	b.n	4edc <check_pending_conn+0x40>
	bt_conn_set_state(conn, BT_CONN_CONNECT);
    4f1e:	2102      	movs	r1, #2
    4f20:	4628      	mov	r0, r5
    4f22:	f001 fca7 	bl	6874 <bt_conn_set_state>
	bt_conn_unref(conn);
    4f26:	4628      	mov	r0, r5
    4f28:	f001 fc16 	bl	6758 <bt_conn_unref>
	return;
    4f2c:	bd38      	pop	{r3, r4, r5, pc}
    4f2e:	bf00      	nop
    4f30:	2000b808 	.word	0x2000b808
    4f34:	2000b809 	.word	0x2000b809

00004f38 <le_adv_report>:
{
    4f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4f3c:	b083      	sub	sp, #12
    4f3e:	4605      	mov	r5, r0
	u8_t num_reports = net_buf_pull_u8(buf);
    4f40:	f100 0308 	add.w	r3, r0, #8
    4f44:	9300      	str	r3, [sp, #0]
    4f46:	4618      	mov	r0, r3
    4f48:	f015 f97d 	bl	1a246 <net_buf_simple_pull_u8>
	while (num_reports--) {
    4f4c:	e00a      	b.n	4f64 <le_adv_report+0x2c>
		check_pending_conn(addr, &info->addr, info->evt_type);
    4f4e:	7822      	ldrb	r2, [r4, #0]
    4f50:	4631      	mov	r1, r6
    4f52:	9801      	ldr	r0, [sp, #4]
    4f54:	f7ff ffa2 	bl	4e9c <check_pending_conn>
		net_buf_pull(buf, info->length + sizeof(rssi));
    4f58:	7a21      	ldrb	r1, [r4, #8]
    4f5a:	3101      	adds	r1, #1
    4f5c:	9800      	ldr	r0, [sp, #0]
    4f5e:	f015 f96a 	bl	1a236 <net_buf_simple_pull>
	while (num_reports--) {
    4f62:	4638      	mov	r0, r7
    4f64:	1e43      	subs	r3, r0, #1
    4f66:	b2df      	uxtb	r7, r3
    4f68:	b368      	cbz	r0, 4fc6 <le_adv_report+0x8e>
		info = (void *)buf->data;
    4f6a:	68ac      	ldr	r4, [r5, #8]
		net_buf_pull(buf, sizeof(*info));
    4f6c:	2109      	movs	r1, #9
    4f6e:	f8dd 9000 	ldr.w	r9, [sp]
    4f72:	4648      	mov	r0, r9
    4f74:	f015 f95f 	bl	1a236 <net_buf_simple_pull>
		rssi = info->data[info->length];
    4f78:	7a23      	ldrb	r3, [r4, #8]
    4f7a:	4423      	add	r3, r4
    4f7c:	f993 8009 	ldrsb.w	r8, [r3, #9]
		addr = find_id_addr(&info->addr);
    4f80:	1c66      	adds	r6, r4, #1
    4f82:	4630      	mov	r0, r6
    4f84:	f7fe ff6b 	bl	3e5e <find_id_addr>
    4f88:	9001      	str	r0, [sp, #4]
		if (scan_dev_found_cb) {
    4f8a:	4b10      	ldr	r3, [pc, #64]	; (4fcc <le_adv_report+0x94>)
    4f8c:	681b      	ldr	r3, [r3, #0]
    4f8e:	2b00      	cmp	r3, #0
    4f90:	d0dd      	beq.n	4f4e <le_adv_report+0x16>
	state->offset = net_buf_simple_headroom(buf);
    4f92:	f8cd 9000 	str.w	r9, [sp]
    4f96:	4648      	mov	r0, r9
    4f98:	f015 f965 	bl	1a266 <net_buf_simple_headroom>
    4f9c:	fa1f fa80 	uxth.w	sl, r0
	state->len = buf->len;
    4fa0:	f8b5 900c 	ldrh.w	r9, [r5, #12]
			buf->len = info->length;
    4fa4:	7a23      	ldrb	r3, [r4, #8]
    4fa6:	81ab      	strh	r3, [r5, #12]
			scan_dev_found_cb(addr, rssi, info->evt_type, &buf->b);
    4fa8:	4b08      	ldr	r3, [pc, #32]	; (4fcc <le_adv_report+0x94>)
    4faa:	f8d3 b000 	ldr.w	fp, [r3]
    4fae:	9b00      	ldr	r3, [sp, #0]
    4fb0:	7822      	ldrb	r2, [r4, #0]
    4fb2:	4641      	mov	r1, r8
    4fb4:	9801      	ldr	r0, [sp, #4]
    4fb6:	47d8      	blx	fp
	buf->data = buf->__buf + state->offset;
    4fb8:	f105 0310 	add.w	r3, r5, #16
    4fbc:	4453      	add	r3, sl
    4fbe:	60ab      	str	r3, [r5, #8]
	buf->len = state->len;
    4fc0:	f8a5 900c 	strh.w	r9, [r5, #12]
    4fc4:	e7c3      	b.n	4f4e <le_adv_report+0x16>
}
    4fc6:	b003      	add	sp, #12
    4fc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4fcc:	200002b8 	.word	0x200002b8

00004fd0 <hci_le_read_remote_features>:
{
    4fd0:	b538      	push	{r3, r4, r5, lr}
    4fd2:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
    4fd4:	2102      	movs	r1, #2
    4fd6:	f242 0016 	movw	r0, #8214	; 0x2016
    4fda:	f7ff f885 	bl	40e8 <bt_hci_cmd_create>
	if (!buf) {
    4fde:	b168      	cbz	r0, 4ffc <hci_le_read_remote_features+0x2c>
    4fe0:	4604      	mov	r4, r0
	cp = net_buf_add(buf, sizeof(*cp));
    4fe2:	2102      	movs	r1, #2
    4fe4:	3008      	adds	r0, #8
    4fe6:	f015 f8d9 	bl	1a19c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    4fea:	882b      	ldrh	r3, [r5, #0]
    4fec:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    4fee:	4621      	mov	r1, r4
    4ff0:	f242 0016 	movw	r0, #8214	; 0x2016
    4ff4:	f7ff fdd6 	bl	4ba4 <bt_hci_cmd_send>
	return 0;
    4ff8:	2000      	movs	r0, #0
    4ffa:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
    4ffc:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    5000:	bd38      	pop	{r3, r4, r5, pc}

00005002 <hci_le_set_phy>:
{
    5002:	b538      	push	{r3, r4, r5, lr}
    5004:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
    5006:	2107      	movs	r1, #7
    5008:	f242 0032 	movw	r0, #8242	; 0x2032
    500c:	f7ff f86c 	bl	40e8 <bt_hci_cmd_create>
	if (!buf) {
    5010:	b1a0      	cbz	r0, 503c <hci_le_set_phy+0x3a>
    5012:	4605      	mov	r5, r0
	cp = net_buf_add(buf, sizeof(*cp));
    5014:	2107      	movs	r1, #7
    5016:	3008      	adds	r0, #8
    5018:	f015 f8c0 	bl	1a19c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    501c:	8823      	ldrh	r3, [r4, #0]
    501e:	8003      	strh	r3, [r0, #0]
	cp->all_phys = 0;
    5020:	2400      	movs	r4, #0
    5022:	7084      	strb	r4, [r0, #2]
	cp->tx_phys = BT_HCI_LE_PHY_PREFER_2M;
    5024:	2302      	movs	r3, #2
    5026:	70c3      	strb	r3, [r0, #3]
	cp->rx_phys = BT_HCI_LE_PHY_PREFER_2M;
    5028:	7103      	strb	r3, [r0, #4]
	cp->phy_opts = BT_HCI_LE_PHY_CODED_ANY;
    502a:	7144      	strb	r4, [r0, #5]
    502c:	7184      	strb	r4, [r0, #6]
	bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
    502e:	4629      	mov	r1, r5
    5030:	f242 0032 	movw	r0, #8242	; 0x2032
    5034:	f7ff fdb6 	bl	4ba4 <bt_hci_cmd_send>
	return 0;
    5038:	4620      	mov	r0, r4
    503a:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
    503c:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    5040:	bd38      	pop	{r3, r4, r5, pc}

00005042 <hci_le_set_data_len>:
{
    5042:	b5f0      	push	{r4, r5, r6, r7, lr}
    5044:	b083      	sub	sp, #12
    5046:	4604      	mov	r4, r0
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
    5048:	aa01      	add	r2, sp, #4
    504a:	2100      	movs	r1, #0
    504c:	f242 002f 	movw	r0, #8239	; 0x202f
    5050:	f7ff f876 	bl	4140 <bt_hci_cmd_send_sync>
	if (err) {
    5054:	4603      	mov	r3, r0
    5056:	b110      	cbz	r0, 505e <hci_le_set_data_len+0x1c>
}
    5058:	4618      	mov	r0, r3
    505a:	b003      	add	sp, #12
    505c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	rp = (void *)rsp->data;
    505e:	9801      	ldr	r0, [sp, #4]
    5060:	6883      	ldr	r3, [r0, #8]
	tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    5062:	f8b3 7001 	ldrh.w	r7, [r3, #1]
	tx_time = sys_le16_to_cpu(rp->max_tx_time);
    5066:	f8b3 6003 	ldrh.w	r6, [r3, #3]
	net_buf_unref(rsp);
    506a:	f015 f84b 	bl	1a104 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
    506e:	2106      	movs	r1, #6
    5070:	f242 0022 	movw	r0, #8226	; 0x2022
    5074:	f7ff f838 	bl	40e8 <bt_hci_cmd_create>
	if (!buf) {
    5078:	4605      	mov	r5, r0
    507a:	b170      	cbz	r0, 509a <hci_le_set_data_len+0x58>
	cp = net_buf_add(buf, sizeof(*cp));
    507c:	2106      	movs	r1, #6
    507e:	3008      	adds	r0, #8
    5080:	f015 f88c 	bl	1a19c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    5084:	8823      	ldrh	r3, [r4, #0]
    5086:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
    5088:	8047      	strh	r7, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
    508a:	8086      	strh	r6, [r0, #4]
	err = bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
    508c:	4629      	mov	r1, r5
    508e:	f242 0022 	movw	r0, #8226	; 0x2022
    5092:	f7ff fd87 	bl	4ba4 <bt_hci_cmd_send>
    5096:	4603      	mov	r3, r0
    5098:	e7de      	b.n	5058 <hci_le_set_data_len+0x16>
		return -ENOBUFS;
    509a:	f06f 0368 	mvn.w	r3, #104	; 0x68
    509e:	e7db      	b.n	5058 <hci_le_set_data_len+0x16>

000050a0 <le_conn_complete>:
{
    50a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
    50a4:	6884      	ldr	r4, [r0, #8]
	u16_t handle = sys_le16_to_cpu(evt->handle);
    50a6:	f8b4 6001 	ldrh.w	r6, [r4, #1]
	if (evt->status) {
    50aa:	7823      	ldrb	r3, [r4, #0]
    50ac:	b17b      	cbz	r3, 50ce <le_conn_complete+0x2e>
		conn = bt_conn_lookup_state_le(NULL, BT_CONN_CONNECT);
    50ae:	2102      	movs	r1, #2
    50b0:	2000      	movs	r0, #0
    50b2:	f001 fb1f 	bl	66f4 <bt_conn_lookup_state_le>
		if (!conn) {
    50b6:	4605      	mov	r5, r0
    50b8:	b3d0      	cbz	r0, 5130 <le_conn_complete+0x90>
		conn->err = evt->status;
    50ba:	7823      	ldrb	r3, [r4, #0]
    50bc:	72c3      	strb	r3, [r0, #11]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    50be:	2100      	movs	r1, #0
    50c0:	f001 fbd8 	bl	6874 <bt_conn_set_state>
		bt_conn_unref(conn);
    50c4:	4628      	mov	r0, r5
    50c6:	f001 fb47 	bl	6758 <bt_conn_unref>
		return;
    50ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	id_addr = find_id_addr(&evt->peer_addr);
    50ce:	1d27      	adds	r7, r4, #4
    50d0:	4638      	mov	r0, r7
    50d2:	f7fe fec4 	bl	3e5e <find_id_addr>
    50d6:	4680      	mov	r8, r0
	conn = bt_conn_lookup_state_le(id_addr, BT_CONN_CONNECT);
    50d8:	2102      	movs	r1, #2
    50da:	f001 fb0b 	bl	66f4 <bt_conn_lookup_state_le>
    50de:	4605      	mov	r5, r0
	if (evt->role == BT_CONN_ROLE_SLAVE) {
    50e0:	78e3      	ldrb	r3, [r4, #3]
    50e2:	2b01      	cmp	r3, #1
    50e4:	d026      	beq.n	5134 <le_conn_complete+0x94>
	if (!conn) {
    50e6:	b31d      	cbz	r5, 5130 <le_conn_complete+0x90>
	conn->handle   = handle;
    50e8:	4628      	mov	r0, r5
    50ea:	f820 6b48 	strh.w	r6, [r0], #72
    50ee:	2207      	movs	r2, #7
    50f0:	4641      	mov	r1, r8
    50f2:	f7fb f8e5 	bl	2c0 <memcpy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
    50f6:	f8b4 300b 	ldrh.w	r3, [r4, #11]
    50fa:	f8a5 305e 	strh.w	r3, [r5, #94]	; 0x5e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
    50fe:	f8b4 300d 	ldrh.w	r3, [r4, #13]
    5102:	f8a5 3064 	strh.w	r3, [r5, #100]	; 0x64
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    5106:	f8b4 300f 	ldrh.w	r3, [r4, #15]
    510a:	f8a5 3066 	strh.w	r3, [r5, #102]	; 0x66
	conn->role = evt->role;
    510e:	78e3      	ldrb	r3, [r4, #3]
    5110:	70eb      	strb	r3, [r5, #3]
	if (conn->role == BT_HCI_ROLE_SLAVE) {
    5112:	2b01      	cmp	r3, #1
    5114:	d022      	beq.n	515c <le_conn_complete+0xbc>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
    5116:	2103      	movs	r1, #3
    5118:	4628      	mov	r0, r5
    511a:	f001 fbab 	bl	6874 <bt_conn_set_state>
	if (conn->state != BT_CONN_CONNECTED) {
    511e:	7b2b      	ldrb	r3, [r5, #12]
    5120:	2b03      	cmp	r3, #3
    5122:	d03b      	beq.n	519c <le_conn_complete+0xfc>
	bt_conn_unref(conn);
    5124:	4628      	mov	r0, r5
    5126:	f001 fb17 	bl	6758 <bt_conn_unref>
	bt_le_scan_update(false);
    512a:	2000      	movs	r0, #0
    512c:	f7ff fdea 	bl	4d04 <bt_le_scan_update>
    5130:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    5134:	4b3a      	ldr	r3, [pc, #232]	; (5220 <le_conn_complete+0x180>)
    5136:	f3bf 8f5b 	dmb	ish
    513a:	e853 2f00 	ldrex	r2, [r3]
    513e:	f022 0220 	bic.w	r2, r2, #32
    5142:	e843 2100 	strex	r1, r2, [r3]
    5146:	2900      	cmp	r1, #0
    5148:	d1f7      	bne.n	513a <le_conn_complete+0x9a>
    514a:	f3bf 8f5b 	dmb	ish
		if (!conn) {
    514e:	2d00      	cmp	r5, #0
    5150:	d1c9      	bne.n	50e6 <le_conn_complete+0x46>
			conn = bt_conn_add_le(id_addr);
    5152:	4640      	mov	r0, r8
    5154:	f001 fa30 	bl	65b8 <bt_conn_add_le>
    5158:	4605      	mov	r5, r0
    515a:	e7c4      	b.n	50e6 <le_conn_complete+0x46>
    515c:	2207      	movs	r2, #7
    515e:	4639      	mov	r1, r7
    5160:	f105 004f 	add.w	r0, r5, #79	; 0x4f
    5164:	f7fb f8ac 	bl	2c0 <memcpy>
    5168:	4e2e      	ldr	r6, [pc, #184]	; (5224 <le_conn_complete+0x184>)
    516a:	2207      	movs	r2, #7
    516c:	4631      	mov	r1, r6
    516e:	f105 0056 	add.w	r0, r5, #86	; 0x56
    5172:	f7fb f8a5 	bl	2c0 <memcpy>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    5176:	f3bf 8f5b 	dmb	ish
    517a:	6f33      	ldr	r3, [r6, #112]	; 0x70
    517c:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    5180:	f013 0f40 	tst.w	r3, #64	; 0x40
    5184:	d0c7      	beq.n	5116 <le_conn_complete+0x76>
		    BT_LE_STATES_SLAVE_CONN_ADV(bt_dev.le.states)) {
    5186:	e9d6 2320 	ldrd	r2, r3, [r6, #128]	; 0x80
    518a:	2200      	movs	r2, #0
    518c:	f003 0340 	and.w	r3, r3, #64	; 0x40
		if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    5190:	4313      	orrs	r3, r2
    5192:	d0c0      	beq.n	5116 <le_conn_complete+0x76>
			set_advertise_enable(true);
    5194:	2001      	movs	r0, #1
    5196:	f7ff fb4d 	bl	4834 <set_advertise_enable>
    519a:	e7bc      	b.n	5116 <le_conn_complete+0x76>
	if ((evt->role == BT_HCI_ROLE_MASTER) ||
    519c:	78e3      	ldrb	r3, [r4, #3]
    519e:	b12b      	cbz	r3, 51ac <le_conn_complete+0x10c>
	    BT_FEAT_LE_SLAVE_FEATURE_XCHG(bt_dev.le.features)) {
    51a0:	4b20      	ldr	r3, [pc, #128]	; (5224 <le_conn_complete+0x184>)
    51a2:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
	if ((evt->role == BT_HCI_ROLE_MASTER) ||
    51a6:	f013 0f08 	tst.w	r3, #8
    51aa:	d004      	beq.n	51b6 <le_conn_complete+0x116>
		err = hci_le_read_remote_features(conn);
    51ac:	4628      	mov	r0, r5
    51ae:	f7ff ff0f 	bl	4fd0 <hci_le_read_remote_features>
		if (!err) {
    51b2:	2800      	cmp	r0, #0
    51b4:	d0b6      	beq.n	5124 <le_conn_complete+0x84>
	if (BT_FEAT_LE_PHY_2M(bt_dev.le.features)) {
    51b6:	4b1b      	ldr	r3, [pc, #108]	; (5224 <le_conn_complete+0x184>)
    51b8:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
    51bc:	f013 0f01 	tst.w	r3, #1
    51c0:	d10d      	bne.n	51de <le_conn_complete+0x13e>
	if (BT_FEAT_LE_DLE(bt_dev.le.features)) {
    51c2:	4b18      	ldr	r3, [pc, #96]	; (5224 <le_conn_complete+0x184>)
    51c4:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    51c8:	f013 0f20 	tst.w	r3, #32
    51cc:	d003      	beq.n	51d6 <le_conn_complete+0x136>
		err = hci_le_set_data_len(conn);
    51ce:	4628      	mov	r0, r5
    51d0:	f7ff ff37 	bl	5042 <hci_le_set_data_len>
		if (!err) {
    51d4:	b1b0      	cbz	r0, 5204 <le_conn_complete+0x164>
	update_conn_param(conn);
    51d6:	4628      	mov	r0, r5
    51d8:	f7fe fe4a 	bl	3e70 <update_conn_param>
    51dc:	e7a2      	b.n	5124 <le_conn_complete+0x84>
		err = hci_le_set_phy(conn);
    51de:	4628      	mov	r0, r5
    51e0:	f7ff ff0f 	bl	5002 <hci_le_set_phy>
		if (!err) {
    51e4:	2800      	cmp	r0, #0
    51e6:	d1ec      	bne.n	51c2 <le_conn_complete+0x122>
			atomic_set_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE);
    51e8:	1d2b      	adds	r3, r5, #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    51ea:	f3bf 8f5b 	dmb	ish
    51ee:	e853 2f00 	ldrex	r2, [r3]
    51f2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    51f6:	e843 2100 	strex	r1, r2, [r3]
    51fa:	2900      	cmp	r1, #0
    51fc:	d1f7      	bne.n	51ee <le_conn_complete+0x14e>
    51fe:	f3bf 8f5b 	dmb	ish
    5202:	e78f      	b.n	5124 <le_conn_complete+0x84>
			atomic_set_bit(conn->flags, BT_CONN_AUTO_DATA_LEN);
    5204:	1d2b      	adds	r3, r5, #4
    5206:	f3bf 8f5b 	dmb	ish
    520a:	e853 2f00 	ldrex	r2, [r3]
    520e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    5212:	e843 2100 	strex	r1, r2, [r3]
    5216:	2900      	cmp	r1, #0
    5218:	d1f7      	bne.n	520a <le_conn_complete+0x16a>
    521a:	f3bf 8f5b 	dmb	ish
    521e:	e781      	b.n	5124 <le_conn_complete+0x84>
    5220:	2000b878 	.word	0x2000b878
    5224:	2000b808 	.word	0x2000b808

00005228 <le_conn_complete>:
{
    5228:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    522c:	4604      	mov	r4, r0
    522e:	460f      	mov	r7, r1
    5230:	4690      	mov	r8, r2
	ll_rl_crpa_set(radio_cc->peer_addr_type, &radio_cc->peer_addr[0],
    5232:	1d85      	adds	r5, r0, #6
    5234:	f100 060c 	add.w	r6, r0, #12
    5238:	4633      	mov	r3, r6
    523a:	22ff      	movs	r2, #255	; 0xff
    523c:	4629      	mov	r1, r5
    523e:	7940      	ldrb	r0, [r0, #5]
    5240:	f014 faf8 	bl	19834 <ll_rl_crpa_set>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    5244:	4b40      	ldr	r3, [pc, #256]	; (5348 <le_conn_complete+0x120>)
    5246:	e9d3 2300 	ldrd	r2, r3, [r3]
    524a:	2200      	movs	r2, #0
    524c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    5250:	4313      	orrs	r3, r2
    5252:	d077      	beq.n	5344 <le_conn_complete+0x11c>
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    5254:	4b3d      	ldr	r3, [pc, #244]	; (534c <le_conn_complete+0x124>)
    5256:	e9d3 2300 	ldrd	r2, r3, [r3]
    525a:	f002 0001 	and.w	r0, r2, #1
    525e:	2100      	movs	r1, #0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    5260:	4301      	orrs	r1, r0
    5262:	d104      	bne.n	526e <le_conn_complete+0x46>
	     !(le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE))) {
    5264:	f402 7000 	and.w	r0, r2, #512	; 0x200
    5268:	2100      	movs	r1, #0
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    526a:	4301      	orrs	r1, r0
    526c:	d06a      	beq.n	5344 <le_conn_complete+0x11c>
	if (!radio_cc->status) {
    526e:	78e1      	ldrb	r1, [r4, #3]
    5270:	b919      	cbnz	r1, 527a <le_conn_complete+0x52>
		conn_count++;
    5272:	4837      	ldr	r0, [pc, #220]	; (5350 <le_conn_complete+0x128>)
    5274:	6801      	ldr	r1, [r0, #0]
    5276:	3101      	adds	r1, #1
    5278:	6001      	str	r1, [r0, #0]
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
    527a:	f402 7200 	and.w	r2, r2, #512	; 0x200
    527e:	2300      	movs	r3, #0
    5280:	4313      	orrs	r3, r2
    5282:	d03e      	beq.n	5302 <le_conn_complete+0xda>
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    5284:	221e      	movs	r2, #30
    5286:	210a      	movs	r1, #10
    5288:	4640      	mov	r0, r8
    528a:	f007 fb2d 	bl	c8e8 <meta_evt>
    528e:	4680      	mov	r8, r0
		leecc->status = radio_cc->status;
    5290:	78e3      	ldrb	r3, [r4, #3]
    5292:	7003      	strb	r3, [r0, #0]
		leecc->handle = sys_cpu_to_le16(handle);
    5294:	f8a0 7001 	strh.w	r7, [r0, #1]
		leecc->role = radio_cc->role;
    5298:	7923      	ldrb	r3, [r4, #4]
    529a:	70c3      	strb	r3, [r0, #3]
		leecc->peer_addr.type = radio_cc->peer_addr_type;
    529c:	7963      	ldrb	r3, [r4, #5]
    529e:	7103      	strb	r3, [r0, #4]
		memcpy(&leecc->peer_addr.a.val[0], &radio_cc->peer_addr[0],
    52a0:	2206      	movs	r2, #6
    52a2:	4629      	mov	r1, r5
    52a4:	3005      	adds	r0, #5
    52a6:	f7fb f80b 	bl	2c0 <memcpy>
		if ((radio_cc->own_addr_type) &&
    52aa:	7ca3      	ldrb	r3, [r4, #18]
    52ac:	b123      	cbz	r3, 52b8 <le_conn_complete+0x90>
		    ((radio_cc->own_addr[5] & 0xc0) == 0x40)) {
    52ae:	7e23      	ldrb	r3, [r4, #24]
		if ((radio_cc->own_addr_type) &&
    52b0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    52b4:	2b40      	cmp	r3, #64	; 0x40
    52b6:	d01c      	beq.n	52f2 <le_conn_complete+0xca>
			memset(&leecc->local_rpa.val[0], 0x0, BDADDR_SIZE);
    52b8:	2206      	movs	r2, #6
    52ba:	2100      	movs	r1, #0
    52bc:	f108 000b 	add.w	r0, r8, #11
    52c0:	f025 fbe0 	bl	2aa84 <memset>
		memcpy(&leecc->peer_rpa.val[0], &radio_cc->peer_rpa[0],
    52c4:	2206      	movs	r2, #6
    52c6:	4631      	mov	r1, r6
    52c8:	f108 0011 	add.w	r0, r8, #17
    52cc:	f7fa fff8 	bl	2c0 <memcpy>
		leecc->interval = sys_cpu_to_le16(radio_cc->interval);
    52d0:	f8b4 3019 	ldrh.w	r3, [r4, #25]
    52d4:	f8a8 3017 	strh.w	r3, [r8, #23]
		leecc->latency = sys_cpu_to_le16(radio_cc->latency);
    52d8:	f8b4 301b 	ldrh.w	r3, [r4, #27]
    52dc:	f8a8 3019 	strh.w	r3, [r8, #25]
		leecc->supv_timeout = sys_cpu_to_le16(radio_cc->timeout);
    52e0:	f8b4 301d 	ldrh.w	r3, [r4, #29]
    52e4:	f8a8 301b 	strh.w	r3, [r8, #27]
		leecc->clock_accuracy = radio_cc->mca;
    52e8:	7fe3      	ldrb	r3, [r4, #31]
    52ea:	f888 301d 	strb.w	r3, [r8, #29]
		return;
    52ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			memcpy(&leecc->local_rpa.val[0], &radio_cc->own_addr[0],
    52f2:	2206      	movs	r2, #6
    52f4:	f104 0113 	add.w	r1, r4, #19
    52f8:	f108 000b 	add.w	r0, r8, #11
    52fc:	f7fa ffe0 	bl	2c0 <memcpy>
    5300:	e7e0      	b.n	52c4 <le_conn_complete+0x9c>
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    5302:	2212      	movs	r2, #18
    5304:	2101      	movs	r1, #1
    5306:	4640      	mov	r0, r8
    5308:	f007 faee 	bl	c8e8 <meta_evt>
    530c:	4606      	mov	r6, r0
	lecc->status = radio_cc->status;
    530e:	78e3      	ldrb	r3, [r4, #3]
    5310:	7003      	strb	r3, [r0, #0]
	lecc->handle = sys_cpu_to_le16(handle);
    5312:	f8a0 7001 	strh.w	r7, [r0, #1]
	lecc->role = radio_cc->role;
    5316:	7923      	ldrb	r3, [r4, #4]
    5318:	70c3      	strb	r3, [r0, #3]
	lecc->peer_addr.type = radio_cc->peer_addr_type;
    531a:	7963      	ldrb	r3, [r4, #5]
    531c:	7103      	strb	r3, [r0, #4]
	memcpy(&lecc->peer_addr.a.val[0], &radio_cc->peer_addr[0], BDADDR_SIZE);
    531e:	2206      	movs	r2, #6
    5320:	4629      	mov	r1, r5
    5322:	3005      	adds	r0, #5
    5324:	f7fa ffcc 	bl	2c0 <memcpy>
	lecc->interval = sys_cpu_to_le16(radio_cc->interval);
    5328:	f8b4 3019 	ldrh.w	r3, [r4, #25]
    532c:	f8a6 300b 	strh.w	r3, [r6, #11]
	lecc->latency = sys_cpu_to_le16(radio_cc->latency);
    5330:	f8b4 301b 	ldrh.w	r3, [r4, #27]
    5334:	f8a6 300d 	strh.w	r3, [r6, #13]
	lecc->supv_timeout = sys_cpu_to_le16(radio_cc->timeout);
    5338:	f8b4 301d 	ldrh.w	r3, [r4, #29]
    533c:	f8a6 300f 	strh.w	r3, [r6, #15]
	lecc->clock_accuracy = radio_cc->mca;
    5340:	7fe3      	ldrb	r3, [r4, #31]
    5342:	7473      	strb	r3, [r6, #17]
    5344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5348:	2000baf8 	.word	0x2000baf8
    534c:	2000bb00 	.word	0x2000bb00
    5350:	200009d4 	.word	0x200009d4

00005354 <le_remote_feat_complete>:
{
    5354:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
    5356:	6885      	ldr	r5, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
    5358:	f8b5 0001 	ldrh.w	r0, [r5, #1]
    535c:	f001 f978 	bl	6650 <bt_conn_lookup_handle>
	if (!conn) {
    5360:	b1f0      	cbz	r0, 53a0 <le_remote_feat_complete+0x4c>
    5362:	4604      	mov	r4, r0
	if (!evt->status) {
    5364:	782b      	ldrb	r3, [r5, #0]
    5366:	b1e3      	cbz	r3, 53a2 <le_remote_feat_complete+0x4e>
	if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) &&
    5368:	4b24      	ldr	r3, [pc, #144]	; (53fc <le_remote_feat_complete+0xa8>)
    536a:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
    536e:	f013 0f01 	tst.w	r3, #1
    5372:	d004      	beq.n	537e <le_remote_feat_complete+0x2a>
	    BT_FEAT_LE_PHY_2M(conn->le.features)) {
    5374:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
	if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) &&
    5378:	f013 0f01 	tst.w	r3, #1
    537c:	d117      	bne.n	53ae <le_remote_feat_complete+0x5a>
	if (BT_FEAT_LE_DLE(bt_dev.le.features) &&
    537e:	4b1f      	ldr	r3, [pc, #124]	; (53fc <le_remote_feat_complete+0xa8>)
    5380:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    5384:	f013 0f20 	tst.w	r3, #32
    5388:	d004      	beq.n	5394 <le_remote_feat_complete+0x40>
	    BT_FEAT_LE_DLE(conn->le.features)) {
    538a:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
	if (BT_FEAT_LE_DLE(bt_dev.le.features) &&
    538e:	f013 0f20 	tst.w	r3, #32
    5392:	d11f      	bne.n	53d4 <le_remote_feat_complete+0x80>
	update_conn_param(conn);
    5394:	4620      	mov	r0, r4
    5396:	f7fe fd6b 	bl	3e70 <update_conn_param>
	bt_conn_unref(conn);
    539a:	4620      	mov	r0, r4
    539c:	f001 f9dc 	bl	6758 <bt_conn_unref>
    53a0:	bd38      	pop	{r3, r4, r5, pc}
		memcpy(conn->le.features, evt->features,
    53a2:	2208      	movs	r2, #8
    53a4:	1ce9      	adds	r1, r5, #3
    53a6:	3068      	adds	r0, #104	; 0x68
    53a8:	f7fa ff8a 	bl	2c0 <memcpy>
    53ac:	e7dc      	b.n	5368 <le_remote_feat_complete+0x14>
		err = hci_le_set_phy(conn);
    53ae:	4620      	mov	r0, r4
    53b0:	f7ff fe27 	bl	5002 <hci_le_set_phy>
		if (!err) {
    53b4:	2800      	cmp	r0, #0
    53b6:	d1e2      	bne.n	537e <le_remote_feat_complete+0x2a>
			atomic_set_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE);
    53b8:	1d23      	adds	r3, r4, #4
    53ba:	f3bf 8f5b 	dmb	ish
    53be:	e853 2f00 	ldrex	r2, [r3]
    53c2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    53c6:	e843 2100 	strex	r1, r2, [r3]
    53ca:	2900      	cmp	r1, #0
    53cc:	d1f7      	bne.n	53be <le_remote_feat_complete+0x6a>
    53ce:	f3bf 8f5b 	dmb	ish
    53d2:	e7e2      	b.n	539a <le_remote_feat_complete+0x46>
		err = hci_le_set_data_len(conn);
    53d4:	4620      	mov	r0, r4
    53d6:	f7ff fe34 	bl	5042 <hci_le_set_data_len>
		if (!err) {
    53da:	2800      	cmp	r0, #0
    53dc:	d1da      	bne.n	5394 <le_remote_feat_complete+0x40>
			atomic_set_bit(conn->flags, BT_CONN_AUTO_DATA_LEN);
    53de:	1d23      	adds	r3, r4, #4
    53e0:	f3bf 8f5b 	dmb	ish
    53e4:	e853 2f00 	ldrex	r2, [r3]
    53e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    53ec:	e843 2100 	strex	r1, r2, [r3]
    53f0:	2900      	cmp	r1, #0
    53f2:	d1f7      	bne.n	53e4 <le_remote_feat_complete+0x90>
    53f4:	f3bf 8f5b 	dmb	ish
    53f8:	e7cf      	b.n	539a <le_remote_feat_complete+0x46>
    53fa:	bf00      	nop
    53fc:	2000b808 	.word	0x2000b808

00005400 <le_remote_feat_complete>:
{
    5400:	b570      	push	{r4, r5, r6, lr}
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    5402:	4c14      	ldr	r4, [pc, #80]	; (5454 <le_remote_feat_complete+0x54>)
    5404:	e9d4 4500 	ldrd	r4, r5, [r4]
    5408:	2400      	movs	r4, #0
    540a:	f005 5500 	and.w	r5, r5, #536870912	; 0x20000000
    540e:	432c      	orrs	r4, r5
    5410:	d007      	beq.n	5422 <le_remote_feat_complete+0x22>
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
    5412:	4c11      	ldr	r4, [pc, #68]	; (5458 <le_remote_feat_complete+0x58>)
    5414:	e9d4 4500 	ldrd	r4, r5, [r4]
    5418:	f004 0408 	and.w	r4, r4, #8
    541c:	2500      	movs	r5, #0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    541e:	432c      	orrs	r4, r5
    5420:	d100      	bne.n	5424 <le_remote_feat_complete+0x24>
    5422:	bd70      	pop	{r4, r5, r6, pc}
    5424:	4615      	mov	r5, r2
    5426:	460e      	mov	r6, r1
    5428:	4604      	mov	r4, r0
	sep = meta_evt(buf, BT_HCI_EV_LE_REMOTE_FEAT_COMPLETE, sizeof(*sep));
    542a:	220b      	movs	r2, #11
    542c:	2104      	movs	r1, #4
    542e:	4618      	mov	r0, r3
    5430:	f007 fa5a 	bl	c8e8 <meta_evt>
	sep->status = status;
    5434:	7004      	strb	r4, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    5436:	f8a0 5001 	strh.w	r5, [r0, #1]
	if (!status) {
    543a:	b12c      	cbz	r4, 5448 <le_remote_feat_complete+0x48>
		memset(&sep->features[0], 0x00, sizeof(sep->features));
    543c:	2208      	movs	r2, #8
    543e:	2100      	movs	r1, #0
    5440:	3003      	adds	r0, #3
    5442:	f025 fb1f 	bl	2aa84 <memset>
    5446:	e7ec      	b.n	5422 <le_remote_feat_complete+0x22>
		memcpy(&sep->features[0],
    5448:	2208      	movs	r2, #8
    544a:	1d31      	adds	r1, r6, #4
    544c:	3003      	adds	r0, #3
    544e:	f7fa ff37 	bl	2c0 <memcpy>
    5452:	bd70      	pop	{r4, r5, r6, pc}
    5454:	2000baf8 	.word	0x2000baf8
    5458:	2000bb00 	.word	0x2000bb00

0000545c <le_phy_update_complete>:
{
    545c:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_le_phy_update_complete *evt = (void *)buf->data;
    545e:	6883      	ldr	r3, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
    5460:	f8b3 0001 	ldrh.w	r0, [r3, #1]
    5464:	f001 f8f4 	bl	6650 <bt_conn_lookup_handle>
	if (!conn) {
    5468:	b308      	cbz	r0, 54ae <le_phy_update_complete+0x52>
    546a:	4604      	mov	r4, r0
	if (!atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
    546c:	1d05      	adds	r5, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    546e:	f3bf 8f5b 	dmb	ish
    5472:	e855 3f00 	ldrex	r3, [r5]
    5476:	f023 0280 	bic.w	r2, r3, #128	; 0x80
    547a:	e845 2100 	strex	r1, r2, [r5]
    547e:	2900      	cmp	r1, #0
    5480:	d1f7      	bne.n	5472 <le_phy_update_complete+0x16>
    5482:	f3bf 8f5b 	dmb	ish
    5486:	f013 0f80 	tst.w	r3, #128	; 0x80
    548a:	d00d      	beq.n	54a8 <le_phy_update_complete+0x4c>
	if (BT_FEAT_LE_DLE(bt_dev.le.features) &&
    548c:	4b11      	ldr	r3, [pc, #68]	; (54d4 <le_phy_update_complete+0x78>)
    548e:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    5492:	f013 0f20 	tst.w	r3, #32
    5496:	d004      	beq.n	54a2 <le_phy_update_complete+0x46>
	    BT_FEAT_LE_DLE(conn->le.features)) {
    5498:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
	if (BT_FEAT_LE_DLE(bt_dev.le.features) &&
    549c:	f013 0f20 	tst.w	r3, #32
    54a0:	d106      	bne.n	54b0 <le_phy_update_complete+0x54>
	update_conn_param(conn);
    54a2:	4620      	mov	r0, r4
    54a4:	f7fe fce4 	bl	3e70 <update_conn_param>
	bt_conn_unref(conn);
    54a8:	4620      	mov	r0, r4
    54aa:	f001 f955 	bl	6758 <bt_conn_unref>
    54ae:	bd38      	pop	{r3, r4, r5, pc}
		err = hci_le_set_data_len(conn);
    54b0:	4620      	mov	r0, r4
    54b2:	f7ff fdc6 	bl	5042 <hci_le_set_data_len>
		if (!err) {
    54b6:	2800      	cmp	r0, #0
    54b8:	d1f3      	bne.n	54a2 <le_phy_update_complete+0x46>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    54ba:	f3bf 8f5b 	dmb	ish
    54be:	e855 3f00 	ldrex	r3, [r5]
    54c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    54c6:	e845 3200 	strex	r2, r3, [r5]
    54ca:	2a00      	cmp	r2, #0
    54cc:	d1f7      	bne.n	54be <le_phy_update_complete+0x62>
    54ce:	f3bf 8f5b 	dmb	ish
    54d2:	e7e9      	b.n	54a8 <le_phy_update_complete+0x4c>
    54d4:	2000b808 	.word	0x2000b808

000054d8 <le_conn_param_neg_reply>:
{
    54d8:	b570      	push	{r4, r5, r6, lr}
    54da:	4606      	mov	r6, r0
    54dc:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
    54de:	2103      	movs	r1, #3
    54e0:	f242 0021 	movw	r0, #8225	; 0x2021
    54e4:	f7fe fe00 	bl	40e8 <bt_hci_cmd_create>
	if (!buf) {
    54e8:	b160      	cbz	r0, 5504 <le_conn_param_neg_reply+0x2c>
    54ea:	4604      	mov	r4, r0
	cp = net_buf_add(buf, sizeof(*cp));
    54ec:	2103      	movs	r1, #3
    54ee:	3008      	adds	r0, #8
    54f0:	f014 fe54 	bl	1a19c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(handle);
    54f4:	8006      	strh	r6, [r0, #0]
	cp->reason = sys_cpu_to_le16(reason);
    54f6:	7085      	strb	r5, [r0, #2]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    54f8:	4621      	mov	r1, r4
    54fa:	f242 0021 	movw	r0, #8225	; 0x2021
    54fe:	f7ff fb51 	bl	4ba4 <bt_hci_cmd_send>
    5502:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    5504:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    5508:	bd70      	pop	{r4, r5, r6, pc}

0000550a <le_conn_param_req_reply>:
{
    550a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    550c:	4607      	mov	r7, r0
    550e:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
    5510:	210e      	movs	r1, #14
    5512:	f242 0020 	movw	r0, #8224	; 0x2020
    5516:	f7fe fde7 	bl	40e8 <bt_hci_cmd_create>
	if (!buf) {
    551a:	b1c0      	cbz	r0, 554e <le_conn_param_req_reply+0x44>
    551c:	4606      	mov	r6, r0
	cp = net_buf_add(buf, sizeof(*cp));
    551e:	210e      	movs	r1, #14
    5520:	3008      	adds	r0, #8
    5522:	f014 fe3b 	bl	1a19c <net_buf_simple_add>
    5526:	4604      	mov	r4, r0
	memset(cp, 0, sizeof(*cp));
    5528:	220e      	movs	r2, #14
    552a:	2100      	movs	r1, #0
    552c:	f025 faaa 	bl	2aa84 <memset>
	cp->handle = sys_cpu_to_le16(handle);
    5530:	8027      	strh	r7, [r4, #0]
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    5532:	882b      	ldrh	r3, [r5, #0]
    5534:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    5536:	886b      	ldrh	r3, [r5, #2]
    5538:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
    553a:	88ab      	ldrh	r3, [r5, #4]
    553c:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    553e:	88eb      	ldrh	r3, [r5, #6]
    5540:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    5542:	4631      	mov	r1, r6
    5544:	f242 0020 	movw	r0, #8224	; 0x2020
    5548:	f7ff fb2c 	bl	4ba4 <bt_hci_cmd_send>
    554c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
    554e:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    5552:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00005554 <le_conn_param_req_reply>:
{
    5554:	b570      	push	{r4, r5, r6, lr}
    5556:	b082      	sub	sp, #8
    5558:	460e      	mov	r6, r1
	struct bt_hci_cp_le_conn_param_req_reply *cmd = (void *)buf->data;
    555a:	6882      	ldr	r2, [r0, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    555c:	8814      	ldrh	r4, [r2, #0]
	interval_max = sys_le16_to_cpu(cmd->interval_max);
    555e:	8893      	ldrh	r3, [r2, #4]
	latency = sys_le16_to_cpu(cmd->latency);
    5560:	88d1      	ldrh	r1, [r2, #6]
	timeout = sys_le16_to_cpu(cmd->timeout);
    5562:	8912      	ldrh	r2, [r2, #8]
	status = ll_conn_update(handle, 2, 0, interval_max, latency,
    5564:	9201      	str	r2, [sp, #4]
    5566:	9100      	str	r1, [sp, #0]
    5568:	2200      	movs	r2, #0
    556a:	2102      	movs	r1, #2
    556c:	b2a0      	uxth	r0, r4
    556e:	f012 f927 	bl	177c0 <ll_conn_update>
    5572:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    5574:	2103      	movs	r1, #3
    5576:	4630      	mov	r0, r6
    5578:	f007 f91c 	bl	c7b4 <cmd_complete>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    557c:	b12d      	cbz	r5, 558a <le_conn_param_req_reply+0x36>
    557e:	230c      	movs	r3, #12
    5580:	7003      	strb	r3, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    5582:	f8a0 4001 	strh.w	r4, [r0, #1]
}
    5586:	b002      	add	sp, #8
    5588:	bd70      	pop	{r4, r5, r6, pc}
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    558a:	2300      	movs	r3, #0
    558c:	e7f8      	b.n	5580 <le_conn_param_req_reply+0x2c>
	...

00005590 <le_conn_param_req>:
{
    5590:	b530      	push	{r4, r5, lr}
    5592:	b083      	sub	sp, #12
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
    5594:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
    5596:	881c      	ldrh	r4, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    5598:	885a      	ldrh	r2, [r3, #2]
    559a:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    559e:	889a      	ldrh	r2, [r3, #4]
    55a0:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
    55a4:	88da      	ldrh	r2, [r3, #6]
    55a6:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
    55aa:	891b      	ldrh	r3, [r3, #8]
    55ac:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
    55b0:	4620      	mov	r0, r4
    55b2:	f001 f84d 	bl	6650 <bt_conn_lookup_handle>
	if (!conn) {
    55b6:	b178      	cbz	r0, 55d8 <le_conn_param_req+0x48>
    55b8:	4605      	mov	r5, r0
	if (!le_param_req(conn, &param)) {
    55ba:	4669      	mov	r1, sp
    55bc:	f000 fdf6 	bl	61ac <le_param_req>
    55c0:	b980      	cbnz	r0, 55e4 <le_conn_param_req+0x54>
		err = le_conn_param_neg_reply(handle,
    55c2:	211e      	movs	r1, #30
    55c4:	4620      	mov	r0, r4
    55c6:	f7ff ff87 	bl	54d8 <le_conn_param_neg_reply>
    55ca:	4604      	mov	r4, r0
	bt_conn_unref(conn);
    55cc:	4628      	mov	r0, r5
    55ce:	f001 f8c3 	bl	6758 <bt_conn_unref>
}
    55d2:	4620      	mov	r0, r4
    55d4:	b003      	add	sp, #12
    55d6:	bd30      	pop	{r4, r5, pc}
		return le_conn_param_neg_reply(handle,
    55d8:	2102      	movs	r1, #2
    55da:	4620      	mov	r0, r4
    55dc:	f7ff ff7c 	bl	54d8 <le_conn_param_neg_reply>
    55e0:	4604      	mov	r4, r0
    55e2:	e7f6      	b.n	55d2 <le_conn_param_req+0x42>
		err = le_conn_param_req_reply(handle, &param);
    55e4:	4669      	mov	r1, sp
    55e6:	4620      	mov	r0, r4
    55e8:	f7ff ff8f 	bl	550a <le_conn_param_req_reply>
    55ec:	4604      	mov	r4, r0
    55ee:	e7ed      	b.n	55cc <le_conn_param_req+0x3c>

000055f0 <le_conn_param_req>:
{
    55f0:	b530      	push	{r4, r5, lr}
    55f2:	b083      	sub	sp, #12
    55f4:	4604      	mov	r4, r0
    55f6:	460d      	mov	r5, r1
    55f8:	4610      	mov	r0, r2
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    55fa:	4b14      	ldr	r3, [pc, #80]	; (564c <le_conn_param_req+0x5c>)
    55fc:	e9d3 2300 	ldrd	r2, r3, [r3]
    5600:	2200      	movs	r2, #0
    5602:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    5606:	4313      	orrs	r3, r2
    5608:	d007      	beq.n	561a <le_conn_param_req+0x2a>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_PARAM_REQ)) {
    560a:	4b11      	ldr	r3, [pc, #68]	; (5650 <le_conn_param_req+0x60>)
    560c:	e9d3 2300 	ldrd	r2, r3, [r3]
    5610:	f002 0220 	and.w	r2, r2, #32
    5614:	2300      	movs	r3, #0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    5616:	4313      	orrs	r3, r2
    5618:	d109      	bne.n	562e <le_conn_param_req+0x3e>
		ll_conn_update(handle, 2, BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    561a:	2300      	movs	r3, #0
    561c:	9301      	str	r3, [sp, #4]
    561e:	9300      	str	r3, [sp, #0]
    5620:	221a      	movs	r2, #26
    5622:	2102      	movs	r1, #2
    5624:	4628      	mov	r0, r5
    5626:	f012 f8cb 	bl	177c0 <ll_conn_update>
}
    562a:	b003      	add	sp, #12
    562c:	bd30      	pop	{r4, r5, pc}
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_PARAM_REQ, sizeof(*sep));
    562e:	220a      	movs	r2, #10
    5630:	2106      	movs	r1, #6
    5632:	f007 f959 	bl	c8e8 <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    5636:	8005      	strh	r5, [r0, #0]
		pdu_data->payload.llctrl.ctrldata.conn_param_req.interval_min;
    5638:	88a3      	ldrh	r3, [r4, #4]
	sep->interval_min =
    563a:	8043      	strh	r3, [r0, #2]
		pdu_data->payload.llctrl.ctrldata.conn_param_req.interval_max;
    563c:	88e3      	ldrh	r3, [r4, #6]
	sep->interval_max =
    563e:	8083      	strh	r3, [r0, #4]
	sep->latency = pdu_data->payload.llctrl.ctrldata.conn_param_req.latency;
    5640:	8923      	ldrh	r3, [r4, #8]
    5642:	80c3      	strh	r3, [r0, #6]
	sep->timeout = pdu_data->payload.llctrl.ctrldata.conn_param_req.timeout;
    5644:	8963      	ldrh	r3, [r4, #10]
    5646:	8103      	strh	r3, [r0, #8]
    5648:	e7ef      	b.n	562a <le_conn_param_req+0x3a>
    564a:	bf00      	nop
    564c:	2000baf8 	.word	0x2000baf8
    5650:	2000bb00 	.word	0x2000bb00

00005654 <le_ltk_request>:
{
    5654:	b5f0      	push	{r4, r5, r6, r7, lr}
    5656:	b085      	sub	sp, #20
	struct bt_hci_evt_le_ltk_request *evt = (void *)buf->data;
    5658:	6884      	ldr	r4, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
    565a:	8820      	ldrh	r0, [r4, #0]
    565c:	f000 fff8 	bl	6650 <bt_conn_lookup_handle>
	if (!conn) {
    5660:	2800      	cmp	r0, #0
    5662:	d040      	beq.n	56e6 <le_ltk_request+0x92>
    5664:	4605      	mov	r5, r0
	if (evt->rand == 0 && evt->ediv == 0 && bt_smp_get_tk(conn, tk)) {
    5666:	f8d4 2002 	ldr.w	r2, [r4, #2]
    566a:	f8d4 3006 	ldr.w	r3, [r4, #6]
    566e:	4313      	orrs	r3, r2
    5670:	d102      	bne.n	5678 <le_ltk_request+0x24>
    5672:	8963      	ldrh	r3, [r4, #10]
    5674:	2b00      	cmp	r3, #0
    5676:	d038      	beq.n	56ea <le_ltk_request+0x96>
	if (!conn->le.keys) {
    5678:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    567a:	2b00      	cmp	r3, #0
    567c:	d053      	beq.n	5726 <le_ltk_request+0xd2>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256) &&
    567e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    5680:	b16b      	cbz	r3, 569e <le_ltk_request+0x4a>
    5682:	899a      	ldrh	r2, [r3, #12]
    5684:	f012 0f20 	tst.w	r2, #32
    5688:	d009      	beq.n	569e <le_ltk_request+0x4a>
	    evt->rand == 0 && evt->ediv == 0) {
    568a:	f8d4 0002 	ldr.w	r0, [r4, #2]
    568e:	f8d4 1006 	ldr.w	r1, [r4, #6]
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256) &&
    5692:	ea50 0201 	orrs.w	r2, r0, r1
    5696:	d102      	bne.n	569e <le_ltk_request+0x4a>
	    evt->rand == 0 && evt->ediv == 0) {
    5698:	8962      	ldrh	r2, [r4, #10]
    569a:	2a00      	cmp	r2, #0
    569c:	d052      	beq.n	5744 <le_ltk_request+0xf0>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_SLAVE_LTK) &&
    569e:	b16b      	cbz	r3, 56bc <le_ltk_request+0x68>
    56a0:	899a      	ldrh	r2, [r3, #12]
    56a2:	f012 0f01 	tst.w	r2, #1
    56a6:	d009      	beq.n	56bc <le_ltk_request+0x68>
	    conn->le.keys->slave_ltk.rand == evt->rand &&
    56a8:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
    56ac:	f8d4 6002 	ldr.w	r6, [r4, #2]
    56b0:	f8d4 7006 	ldr.w	r7, [r4, #6]
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_SLAVE_LTK) &&
    56b4:	42b9      	cmp	r1, r7
    56b6:	bf08      	it	eq
    56b8:	42b0      	cmpeq	r0, r6
    56ba:	d06a      	beq.n	5792 <le_ltk_request+0x13e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
    56bc:	2102      	movs	r1, #2
    56be:	f242 001b 	movw	r0, #8219	; 0x201b
    56c2:	f7fe fd11 	bl	40e8 <bt_hci_cmd_create>
	if (!buf) {
    56c6:	4606      	mov	r6, r0
    56c8:	b150      	cbz	r0, 56e0 <le_ltk_request+0x8c>
	cp = net_buf_add(buf, sizeof(*cp));
    56ca:	2102      	movs	r1, #2
    56cc:	3008      	adds	r0, #8
    56ce:	f014 fd65 	bl	1a19c <net_buf_simple_add>
	cp->handle = evt->handle;
    56d2:	8823      	ldrh	r3, [r4, #0]
    56d4:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    56d6:	4631      	mov	r1, r6
    56d8:	f242 001b 	movw	r0, #8219	; 0x201b
    56dc:	f7ff fa62 	bl	4ba4 <bt_hci_cmd_send>
	bt_conn_unref(conn);
    56e0:	4628      	mov	r0, r5
    56e2:	f001 f839 	bl	6758 <bt_conn_unref>
}
    56e6:	b005      	add	sp, #20
    56e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (evt->rand == 0 && evt->ediv == 0 && bt_smp_get_tk(conn, tk)) {
    56ea:	4669      	mov	r1, sp
    56ec:	f006 ff14 	bl	c518 <bt_smp_get_tk>
    56f0:	2800      	cmp	r0, #0
    56f2:	d0c1      	beq.n	5678 <le_ltk_request+0x24>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
    56f4:	2112      	movs	r1, #18
    56f6:	f242 001a 	movw	r0, #8218	; 0x201a
    56fa:	f7fe fcf5 	bl	40e8 <bt_hci_cmd_create>
		if (!buf) {
    56fe:	4606      	mov	r6, r0
    5700:	2800      	cmp	r0, #0
    5702:	d0ed      	beq.n	56e0 <le_ltk_request+0x8c>
		cp = net_buf_add(buf, sizeof(*cp));
    5704:	2112      	movs	r1, #18
    5706:	3008      	adds	r0, #8
    5708:	f014 fd48 	bl	1a19c <net_buf_simple_add>
		cp->handle = evt->handle;
    570c:	8823      	ldrh	r3, [r4, #0]
    570e:	f820 3b02 	strh.w	r3, [r0], #2
		memcpy(cp->ltk, tk, sizeof(cp->ltk));
    5712:	2210      	movs	r2, #16
    5714:	4669      	mov	r1, sp
    5716:	f7fa fdd3 	bl	2c0 <memcpy>
		bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
    571a:	4631      	mov	r1, r6
    571c:	f242 001a 	movw	r0, #8218	; 0x201a
    5720:	f7ff fa40 	bl	4ba4 <bt_hci_cmd_send>
		goto done;
    5724:	e7dc      	b.n	56e0 <le_ltk_request+0x8c>
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, &conn->le.dst);
    5726:	f105 0648 	add.w	r6, r5, #72	; 0x48
    572a:	4631      	mov	r1, r6
    572c:	2020      	movs	r0, #32
    572e:	f006 ff59 	bl	c5e4 <bt_keys_find>
    5732:	6728      	str	r0, [r5, #112]	; 0x70
		if (!conn->le.keys) {
    5734:	2800      	cmp	r0, #0
    5736:	d1a2      	bne.n	567e <le_ltk_request+0x2a>
			conn->le.keys = bt_keys_find(BT_KEYS_SLAVE_LTK,
    5738:	4631      	mov	r1, r6
    573a:	2001      	movs	r0, #1
    573c:	f006 ff52 	bl	c5e4 <bt_keys_find>
    5740:	6728      	str	r0, [r5, #112]	; 0x70
    5742:	e79c      	b.n	567e <le_ltk_request+0x2a>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
    5744:	2112      	movs	r1, #18
    5746:	f242 001a 	movw	r0, #8218	; 0x201a
    574a:	f7fe fccd 	bl	40e8 <bt_hci_cmd_create>
		if (!buf) {
    574e:	4606      	mov	r6, r0
    5750:	2800      	cmp	r0, #0
    5752:	d0c5      	beq.n	56e0 <le_ltk_request+0x8c>
		cp = net_buf_add(buf, sizeof(*cp));
    5754:	2112      	movs	r1, #18
    5756:	3008      	adds	r0, #8
    5758:	f014 fd20 	bl	1a19c <net_buf_simple_add>
		cp->handle = evt->handle;
    575c:	8823      	ldrh	r3, [r4, #0]
    575e:	4604      	mov	r4, r0
    5760:	f824 3b02 	strh.w	r3, [r4], #2
		memcpy(cp->ltk, conn->le.keys->ltk.val,
    5764:	6f29      	ldr	r1, [r5, #112]	; 0x70
    5766:	79ca      	ldrb	r2, [r1, #7]
    5768:	311a      	adds	r1, #26
    576a:	4620      	mov	r0, r4
    576c:	f7fa fda8 	bl	2c0 <memcpy>
		if (conn->le.keys->enc_size < sizeof(cp->ltk)) {
    5770:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    5772:	79d8      	ldrb	r0, [r3, #7]
    5774:	280f      	cmp	r0, #15
    5776:	d905      	bls.n	5784 <le_ltk_request+0x130>
		bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
    5778:	4631      	mov	r1, r6
    577a:	f242 001a 	movw	r0, #8218	; 0x201a
    577e:	f7ff fa11 	bl	4ba4 <bt_hci_cmd_send>
		goto done;
    5782:	e7ad      	b.n	56e0 <le_ltk_request+0x8c>
			memset(cp->ltk + conn->le.keys->enc_size, 0,
    5784:	f1c0 0210 	rsb	r2, r0, #16
    5788:	2100      	movs	r1, #0
    578a:	4420      	add	r0, r4
    578c:	f025 f97a 	bl	2aa84 <memset>
    5790:	e7f2      	b.n	5778 <le_ltk_request+0x124>
	    conn->le.keys->slave_ltk.ediv == evt->ediv) {
    5792:	f8b3 2078 	ldrh.w	r2, [r3, #120]	; 0x78
    5796:	8963      	ldrh	r3, [r4, #10]
	    conn->le.keys->slave_ltk.rand == evt->rand &&
    5798:	429a      	cmp	r2, r3
    579a:	d18f      	bne.n	56bc <le_ltk_request+0x68>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
    579c:	2112      	movs	r1, #18
    579e:	f242 001a 	movw	r0, #8218	; 0x201a
    57a2:	f7fe fca1 	bl	40e8 <bt_hci_cmd_create>
		if (!buf) {
    57a6:	4606      	mov	r6, r0
    57a8:	2800      	cmp	r0, #0
    57aa:	d099      	beq.n	56e0 <le_ltk_request+0x8c>
		cp = net_buf_add(buf, sizeof(*cp));
    57ac:	2112      	movs	r1, #18
    57ae:	3008      	adds	r0, #8
    57b0:	f014 fcf4 	bl	1a19c <net_buf_simple_add>
		cp->handle = evt->handle;
    57b4:	8823      	ldrh	r3, [r4, #0]
    57b6:	4604      	mov	r4, r0
    57b8:	f824 3b02 	strh.w	r3, [r4], #2
		memcpy(cp->ltk, conn->le.keys->slave_ltk.val,
    57bc:	6f29      	ldr	r1, [r5, #112]	; 0x70
    57be:	79ca      	ldrb	r2, [r1, #7]
    57c0:	317a      	adds	r1, #122	; 0x7a
    57c2:	4620      	mov	r0, r4
    57c4:	f7fa fd7c 	bl	2c0 <memcpy>
		if (conn->le.keys->enc_size < sizeof(cp->ltk)) {
    57c8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    57ca:	79d8      	ldrb	r0, [r3, #7]
    57cc:	280f      	cmp	r0, #15
    57ce:	d905      	bls.n	57dc <le_ltk_request+0x188>
		bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
    57d0:	4631      	mov	r1, r6
    57d2:	f242 001a 	movw	r0, #8218	; 0x201a
    57d6:	f7ff f9e5 	bl	4ba4 <bt_hci_cmd_send>
		goto done;
    57da:	e781      	b.n	56e0 <le_ltk_request+0x8c>
			memset(cp->ltk + conn->le.keys->enc_size, 0,
    57dc:	f1c0 0210 	rsb	r2, r0, #16
    57e0:	2100      	movs	r1, #0
    57e2:	4420      	add	r0, r4
    57e4:	f025 f94e 	bl	2aa84 <memset>
    57e8:	e7f2      	b.n	57d0 <le_ltk_request+0x17c>
	...

000057ec <le_ltk_request>:
{
    57ec:	b570      	push	{r4, r5, r6, lr}
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    57ee:	4b15      	ldr	r3, [pc, #84]	; (5844 <le_ltk_request+0x58>)
    57f0:	e9d3 4500 	ldrd	r4, r5, [r3]
    57f4:	2400      	movs	r4, #0
    57f6:	f005 5500 	and.w	r5, r5, #536870912	; 0x20000000
    57fa:	ea54 0305 	orrs.w	r3, r4, r5
    57fe:	d008      	beq.n	5812 <le_ltk_request+0x26>
	    !(le_event_mask & BT_EVT_MASK_LE_LTK_REQUEST)) {
    5800:	4b11      	ldr	r3, [pc, #68]	; (5848 <le_ltk_request+0x5c>)
    5802:	e9d3 4500 	ldrd	r4, r5, [r3]
    5806:	f004 0410 	and.w	r4, r4, #16
    580a:	2500      	movs	r5, #0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    580c:	ea54 0305 	orrs.w	r3, r4, r5
    5810:	d100      	bne.n	5814 <le_ltk_request+0x28>
    5812:	bd70      	pop	{r4, r5, r6, pc}
    5814:	4613      	mov	r3, r2
    5816:	460d      	mov	r5, r1
    5818:	4604      	mov	r4, r0
	sep = meta_evt(buf, BT_HCI_EVT_LE_LTK_REQUEST, sizeof(*sep));
    581a:	220c      	movs	r2, #12
    581c:	2105      	movs	r1, #5
    581e:	4618      	mov	r0, r3
    5820:	f007 f862 	bl	c8e8 <meta_evt>
    5824:	4606      	mov	r6, r0
	sep->handle = sys_cpu_to_le16(handle);
    5826:	f820 5b02 	strh.w	r5, [r0], #2
	memcpy(&sep->rand, pdu_data->payload.llctrl.ctrldata.enc_req.rand,
    582a:	2208      	movs	r2, #8
    582c:	1d21      	adds	r1, r4, #4
    582e:	f7fa fd47 	bl	2c0 <memcpy>
	memcpy(&sep->ediv, pdu_data->payload.llctrl.ctrldata.enc_req.ediv,
    5832:	2202      	movs	r2, #2
    5834:	f104 010c 	add.w	r1, r4, #12
    5838:	f106 000a 	add.w	r0, r6, #10
    583c:	f7fa fd40 	bl	2c0 <memcpy>
    5840:	e7e7      	b.n	5812 <le_ltk_request+0x26>
    5842:	bf00      	nop
    5844:	2000baf8 	.word	0x2000baf8
    5848:	2000bb00 	.word	0x2000bb00

0000584c <hci_le_meta_event>:
{
    584c:	b538      	push	{r3, r4, r5, lr}
    584e:	4604      	mov	r4, r0
	struct bt_hci_evt_le_meta_event *evt = (void *)buf->data;
    5850:	f850 5f08 	ldr.w	r5, [r0, #8]!
	net_buf_pull(buf, sizeof(*evt));
    5854:	2101      	movs	r1, #1
    5856:	f014 fcee 	bl	1a236 <net_buf_simple_pull>
	switch (evt->subevent) {
    585a:	782b      	ldrb	r3, [r5, #0]
    585c:	3b01      	subs	r3, #1
    585e:	2b0b      	cmp	r3, #11
    5860:	d82e      	bhi.n	58c0 <hci_le_meta_event+0x74>
    5862:	e8df f003 	tbb	[pc, r3]
    5866:	2a06      	.short	0x2a06
    5868:	121e0e0a 	.word	0x121e0e0a
    586c:	2d262216 	.word	0x2d262216
    5870:	1a2d      	.short	0x1a2d
		le_conn_complete(buf);
    5872:	4620      	mov	r0, r4
    5874:	f7ff fc14 	bl	50a0 <le_conn_complete>
		break;
    5878:	bd38      	pop	{r3, r4, r5, pc}
		le_conn_update_complete(buf);
    587a:	4620      	mov	r0, r4
    587c:	f7fe fb52 	bl	3f24 <le_conn_update_complete>
		break;
    5880:	bd38      	pop	{r3, r4, r5, pc}
		le_remote_feat_complete(buf);
    5882:	4620      	mov	r0, r4
    5884:	f7ff fd66 	bl	5354 <le_remote_feat_complete>
		break;
    5888:	bd38      	pop	{r3, r4, r5, pc}
		le_conn_param_req(buf);
    588a:	4620      	mov	r0, r4
    588c:	f7ff fe80 	bl	5590 <le_conn_param_req>
		break;
    5890:	bd38      	pop	{r3, r4, r5, pc}
		le_data_len_change(buf);
    5892:	4620      	mov	r0, r4
    5894:	f7fe fafc 	bl	3e90 <le_data_len_change>
		break;
    5898:	bd38      	pop	{r3, r4, r5, pc}
		le_phy_update_complete(buf);
    589a:	4620      	mov	r0, r4
    589c:	f7ff fdde 	bl	545c <le_phy_update_complete>
		break;
    58a0:	bd38      	pop	{r3, r4, r5, pc}
		le_ltk_request(buf);
    58a2:	4620      	mov	r0, r4
    58a4:	f7ff fed6 	bl	5654 <le_ltk_request>
		break;
    58a8:	bd38      	pop	{r3, r4, r5, pc}
		le_pkey_complete(buf);
    58aa:	4620      	mov	r0, r4
    58ac:	f7fe f9f0 	bl	3c90 <le_pkey_complete>
		break;
    58b0:	bd38      	pop	{r3, r4, r5, pc}
		le_dhkey_complete(buf);
    58b2:	4620      	mov	r0, r4
    58b4:	f7fe f916 	bl	3ae4 <le_dhkey_complete>
		break;
    58b8:	bd38      	pop	{r3, r4, r5, pc}
		le_adv_report(buf);
    58ba:	4620      	mov	r0, r4
    58bc:	f7ff fb3c 	bl	4f38 <le_adv_report>
    58c0:	bd38      	pop	{r3, r4, r5, pc}

000058c2 <hci_event>:
{
    58c2:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_hdr *hdr = (void *)buf->data;
    58c4:	6885      	ldr	r5, [r0, #8]
	BT_ASSERT(!bt_hci_evt_is_prio(hdr->evt));
    58c6:	782b      	ldrb	r3, [r5, #0]
 * @return true if the event can be processed in the RX thread, false
 *         if it cannot.
 */
static inline bool bt_hci_evt_is_prio(u8_t evt)
{
	switch (evt) {
    58c8:	2b0e      	cmp	r3, #14
    58ca:	d316      	bcc.n	58fa <hci_event+0x38>
    58cc:	2b0f      	cmp	r3, #15
    58ce:	d901      	bls.n	58d4 <hci_event+0x12>
    58d0:	2b13      	cmp	r3, #19
    58d2:	d112      	bne.n	58fa <hci_event+0x38>
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
#if defined(CONFIG_BT_CONN)
	case BT_HCI_EVT_NUM_COMPLETED_PACKETS:
#endif
		return true;
    58d4:	2301      	movs	r3, #1
    58d6:	b993      	cbnz	r3, 58fe <hci_event+0x3c>
    58d8:	4604      	mov	r4, r0
	net_buf_pull(buf, sizeof(*hdr));
    58da:	2102      	movs	r1, #2
    58dc:	3008      	adds	r0, #8
    58de:	f014 fcaa 	bl	1a236 <net_buf_simple_pull>
	switch (hdr->evt) {
    58e2:	782b      	ldrb	r3, [r5, #0]
    58e4:	2b08      	cmp	r3, #8
    58e6:	d019      	beq.n	591c <hci_event+0x5a>
    58e8:	d90f      	bls.n	590a <hci_event+0x48>
    58ea:	2b30      	cmp	r3, #48	; 0x30
    58ec:	d01a      	beq.n	5924 <hci_event+0x62>
    58ee:	2b3e      	cmp	r3, #62	; 0x3e
    58f0:	d110      	bne.n	5914 <hci_event+0x52>
		hci_le_meta_event(buf);
    58f2:	4620      	mov	r0, r4
    58f4:	f7ff ffaa 	bl	584c <hci_le_meta_event>
		break;
    58f8:	e00c      	b.n	5914 <hci_event+0x52>
	default:
		return false;
    58fa:	2300      	movs	r3, #0
    58fc:	e7eb      	b.n	58d6 <hci_event+0x14>
	BT_ASSERT(!bt_hci_evt_is_prio(hdr->evt));
    58fe:	4040      	eors	r0, r0
    5900:	f380 8811 	msr	BASEPRI, r0
    5904:	f04f 0004 	mov.w	r0, #4
    5908:	df02      	svc	2
	switch (hdr->evt) {
    590a:	2b05      	cmp	r3, #5
    590c:	d102      	bne.n	5914 <hci_event+0x52>
		hci_disconn_complete(buf);
    590e:	4620      	mov	r0, r4
    5910:	f7ff fa54 	bl	4dbc <hci_disconn_complete>
	net_buf_unref(buf);
    5914:	4620      	mov	r0, r4
    5916:	f014 fbf5 	bl	1a104 <net_buf_unref>
    591a:	bd38      	pop	{r3, r4, r5, pc}
		hci_encrypt_change(buf);
    591c:	4620      	mov	r0, r4
    591e:	f7fe fa56 	bl	3dce <hci_encrypt_change>
		break;
    5922:	e7f7      	b.n	5914 <hci_event+0x52>
		hci_encrypt_key_refresh_complete(buf);
    5924:	4620      	mov	r0, r4
    5926:	f7fe fa7a 	bl	3e1e <hci_encrypt_key_refresh_complete>
		break;
    592a:	e7f3      	b.n	5914 <hci_event+0x52>

0000592c <send_cmd>:
{
    592c:	b538      	push	{r3, r4, r5, lr}
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    592e:	2100      	movs	r1, #0
    5930:	4820      	ldr	r0, [pc, #128]	; (59b4 <send_cmd+0x88>)
    5932:	f014 fbba 	bl	1a0aa <net_buf_get>
	BT_ASSERT(buf);
    5936:	b1d0      	cbz	r0, 596e <send_cmd+0x42>
    5938:	4604      	mov	r4, r0
    593a:	4d1f      	ldr	r5, [pc, #124]	; (59b8 <send_cmd+0x8c>)
    593c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    5940:	f105 00a8 	add.w	r0, r5, #168	; 0xa8
    5944:	f022 ff3c 	bl	287c0 <_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
    5948:	f8d5 00c0 	ldr.w	r0, [r5, #192]	; 0xc0
    594c:	b120      	cbz	r0, 5958 <send_cmd+0x2c>
		net_buf_unref(bt_dev.sent_cmd);
    594e:	f014 fbd9 	bl	1a104 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    5952:	2200      	movs	r2, #0
    5954:	f8c5 20c0 	str.w	r2, [r5, #192]	; 0xc0
	bt_dev.sent_cmd = net_buf_ref(buf);
    5958:	4620      	mov	r0, r4
    595a:	f014 fbef 	bl	1a13c <net_buf_ref>
    595e:	4b16      	ldr	r3, [pc, #88]	; (59b8 <send_cmd+0x8c>)
    5960:	f8c3 00c0 	str.w	r0, [r3, #192]	; 0xc0
	err = bt_send(buf);
    5964:	4620      	mov	r0, r4
    5966:	f7ff f913 	bl	4b90 <bt_send>
	if (err) {
    596a:	b930      	cbnz	r0, 597a <send_cmd+0x4e>
    596c:	bd38      	pop	{r3, r4, r5, pc}
	BT_ASSERT(buf);
    596e:	4040      	eors	r0, r0
    5970:	f380 8811 	msr	BASEPRI, r0
    5974:	f04f 0004 	mov.w	r0, #4
    5978:	df02      	svc	2
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    597a:	4d0f      	ldr	r5, [pc, #60]	; (59b8 <send_cmd+0x8c>)
    597c:	f105 00a8 	add.w	r0, r5, #168	; 0xa8
    5980:	f022 ff0b 	bl	2879a <_impl_k_sem_give>
	return (void *)ROUND_UP((buf->__buf + buf->size), sizeof(int));
    5984:	f104 0310 	add.w	r3, r4, #16
    5988:	89e2      	ldrh	r2, [r4, #14]
    598a:	4413      	add	r3, r2
    598c:	3303      	adds	r3, #3
    598e:	f023 0303 	bic.w	r3, r3, #3
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED,
    5992:	2200      	movs	r2, #0
    5994:	211f      	movs	r1, #31
    5996:	8858      	ldrh	r0, [r3, #2]
    5998:	f7fe fb10 	bl	3fbc <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
    599c:	f8d5 00c0 	ldr.w	r0, [r5, #192]	; 0xc0
    59a0:	f014 fbb0 	bl	1a104 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    59a4:	2300      	movs	r3, #0
    59a6:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
		net_buf_unref(buf);
    59aa:	4620      	mov	r0, r4
    59ac:	f014 fbaa 	bl	1a104 <net_buf_unref>
}
    59b0:	e7dc      	b.n	596c <send_cmd+0x40>
    59b2:	bf00      	nop
    59b4:	2000b8dc 	.word	0x2000b8dc
    59b8:	2000b808 	.word	0x2000b808

000059bc <process_events>:
{
    59bc:	b538      	push	{r3, r4, r5, lr}
    59be:	4604      	mov	r4, r0
    59c0:	460d      	mov	r5, r1
	for (; count; ev++, count--) {
    59c2:	e003      	b.n	59cc <process_events+0x10>
				send_cmd();
    59c4:	f7ff ffb2 	bl	592c <send_cmd>
	for (; count; ev++, count--) {
    59c8:	3414      	adds	r4, #20
    59ca:	3d01      	subs	r5, #1
    59cc:	b1a5      	cbz	r5, 59f8 <process_events+0x3c>
		switch (ev->state) {
    59ce:	7b63      	ldrb	r3, [r4, #13]
    59d0:	091b      	lsrs	r3, r3, #4
    59d2:	2b04      	cmp	r3, #4
    59d4:	d1f8      	bne.n	59c8 <process_events+0xc>
			if (ev->tag == BT_EVENT_CMD_TX) {
    59d6:	7b23      	ldrb	r3, [r4, #12]
    59d8:	2b00      	cmp	r3, #0
    59da:	d0f3      	beq.n	59c4 <process_events+0x8>
				if (ev->tag == BT_EVENT_CONN_TX_NOTIFY) {
    59dc:	2b01      	cmp	r3, #1
    59de:	d006      	beq.n	59ee <process_events+0x32>
				} else if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
    59e0:	2b02      	cmp	r3, #2
    59e2:	d1f1      	bne.n	59c8 <process_events+0xc>
					conn = CONTAINER_OF(ev->fifo,
    59e4:	6920      	ldr	r0, [r4, #16]
					bt_conn_process_tx(conn);
    59e6:	382c      	subs	r0, #44	; 0x2c
    59e8:	f001 f9c8 	bl	6d7c <bt_conn_process_tx>
    59ec:	e7ec      	b.n	59c8 <process_events+0xc>
					conn = CONTAINER_OF(ev->fifo,
    59ee:	6920      	ldr	r0, [r4, #16]
					bt_conn_notify_tx(conn);
    59f0:	381c      	subs	r0, #28
    59f2:	f000 fd65 	bl	64c0 <bt_conn_notify_tx>
    59f6:	e7e7      	b.n	59c8 <process_events+0xc>
}
    59f8:	bd38      	pop	{r3, r4, r5, pc}
	...

000059fc <hci_tx_thread>:
{
    59fc:	b538      	push	{r3, r4, r5, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
    59fe:	4c0f      	ldr	r4, [pc, #60]	; (5a3c <hci_tx_thread+0x40>)
    5a00:	7b63      	ldrb	r3, [r4, #13]
    5a02:	f36f 1307 	bfc	r3, #4, #4
    5a06:	7363      	strb	r3, [r4, #13]
			ev_count += bt_conn_prepare_events(&events[1]);
    5a08:	f104 0014 	add.w	r0, r4, #20
    5a0c:	f000 feca 	bl	67a4 <bt_conn_prepare_events>
    5a10:	1c45      	adds	r5, r0, #1
		err = k_poll(events, ev_count, K_FOREVER);
    5a12:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    5a16:	4629      	mov	r1, r5
    5a18:	4620      	mov	r0, r4
    5a1a:	f022 f81d 	bl	27a58 <k_poll>
		BT_ASSERT(err == 0);
    5a1e:	b930      	cbnz	r0, 5a2e <hci_tx_thread+0x32>
		process_events(events, ev_count);
    5a20:	4629      	mov	r1, r5
    5a22:	4806      	ldr	r0, [pc, #24]	; (5a3c <hci_tx_thread+0x40>)
    5a24:	f7ff ffca 	bl	59bc <process_events>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    5a28:	f022 fd5e 	bl	284e8 <_impl_k_yield>
    5a2c:	e7e7      	b.n	59fe <hci_tx_thread+0x2>
		BT_ASSERT(err == 0);
    5a2e:	4040      	eors	r0, r0
    5a30:	f380 8811 	msr	BASEPRI, r0
    5a34:	f04f 0004 	mov.w	r0, #4
    5a38:	df02      	svc	2
    5a3a:	bf00      	nop
    5a3c:	2000b8f0 	.word	0x2000b8f0

00005a40 <bt_recv>:
{
    5a40:	b510      	push	{r4, lr}
    5a42:	4604      	mov	r4, r0
	pool = net_buf_pool_get(buf->pool_id);
    5a44:	7980      	ldrb	r0, [r0, #6]
    5a46:	f014 fae3 	bl	1a010 <net_buf_pool_get>
	if (pool->user_data_size < BT_BUF_USER_DATA_MIN) {
    5a4a:	8ac3      	ldrh	r3, [r0, #22]
    5a4c:	2b03      	cmp	r3, #3
    5a4e:	d910      	bls.n	5a72 <bt_recv+0x32>
    5a50:	f104 0310 	add.w	r3, r4, #16
    5a54:	89e2      	ldrh	r2, [r4, #14]
    5a56:	4413      	add	r3, r2
    5a58:	3303      	adds	r3, #3
    5a5a:	f023 0303 	bic.w	r3, r3, #3
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return *(u8_t *)net_buf_user_data(buf);
    5a5e:	781b      	ldrb	r3, [r3, #0]
	switch (bt_buf_get_type(buf)) {
    5a60:	2b01      	cmp	r3, #1
    5a62:	d00c      	beq.n	5a7e <bt_recv+0x3e>
    5a64:	2b03      	cmp	r3, #3
    5a66:	d10f      	bne.n	5a88 <bt_recv+0x48>
		hci_acl(buf);
    5a68:	4620      	mov	r0, r4
    5a6a:	f7fe f949 	bl	3d00 <hci_acl>
		return 0;
    5a6e:	2000      	movs	r0, #0
    5a70:	bd10      	pop	{r4, pc}
		net_buf_unref(buf);
    5a72:	4620      	mov	r0, r4
    5a74:	f014 fb46 	bl	1a104 <net_buf_unref>
		return -EINVAL;
    5a78:	f06f 0015 	mvn.w	r0, #21
    5a7c:	bd10      	pop	{r4, pc}
		hci_event(buf);
    5a7e:	4620      	mov	r0, r4
    5a80:	f7ff ff1f 	bl	58c2 <hci_event>
		return 0;
    5a84:	2000      	movs	r0, #0
    5a86:	bd10      	pop	{r4, pc}
		net_buf_unref(buf);
    5a88:	4620      	mov	r0, r4
    5a8a:	f014 fb3b 	bl	1a104 <net_buf_unref>
		return -EINVAL;
    5a8e:	f06f 0015 	mvn.w	r0, #21
}
    5a92:	bd10      	pop	{r4, pc}

00005a94 <bt_recv_prio>:
{
    5a94:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_hdr *hdr = (void *)buf->data;
    5a96:	6885      	ldr	r5, [r0, #8]
    5a98:	f100 0310 	add.w	r3, r0, #16
    5a9c:	89c2      	ldrh	r2, [r0, #14]
    5a9e:	4413      	add	r3, r2
    5aa0:	3303      	adds	r3, #3
    5aa2:	f023 0303 	bic.w	r3, r3, #3
    5aa6:	781b      	ldrb	r3, [r3, #0]
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    5aa8:	2b01      	cmp	r3, #1
    5aaa:	d120      	bne.n	5aee <bt_recv_prio+0x5a>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    5aac:	8983      	ldrh	r3, [r0, #12]
    5aae:	2b01      	cmp	r3, #1
    5ab0:	d923      	bls.n	5afa <bt_recv_prio+0x66>
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));
    5ab2:	782b      	ldrb	r3, [r5, #0]
	switch (evt) {
    5ab4:	2b0e      	cmp	r3, #14
    5ab6:	d326      	bcc.n	5b06 <bt_recv_prio+0x72>
    5ab8:	2b0f      	cmp	r3, #15
    5aba:	d901      	bls.n	5ac0 <bt_recv_prio+0x2c>
    5abc:	2b13      	cmp	r3, #19
    5abe:	d122      	bne.n	5b06 <bt_recv_prio+0x72>
		return true;
    5ac0:	2301      	movs	r3, #1
    5ac2:	b313      	cbz	r3, 5b0a <bt_recv_prio+0x76>
    5ac4:	4604      	mov	r4, r0
	net_buf_pull(buf, sizeof(*hdr));
    5ac6:	2102      	movs	r1, #2
    5ac8:	3008      	adds	r0, #8
    5aca:	f014 fbb4 	bl	1a236 <net_buf_simple_pull>
	switch (hdr->evt) {
    5ace:	782b      	ldrb	r3, [r5, #0]
    5ad0:	2b0f      	cmp	r3, #15
    5ad2:	d028      	beq.n	5b26 <bt_recv_prio+0x92>
    5ad4:	2b13      	cmp	r3, #19
    5ad6:	d02a      	beq.n	5b2e <bt_recv_prio+0x9a>
    5ad8:	2b0e      	cmp	r3, #14
    5ada:	d01c      	beq.n	5b16 <bt_recv_prio+0x82>
		net_buf_unref(buf);
    5adc:	4620      	mov	r0, r4
    5ade:	f014 fb11 	bl	1a104 <net_buf_unref>
		BT_ASSERT(0);
    5ae2:	4040      	eors	r0, r0
    5ae4:	f380 8811 	msr	BASEPRI, r0
    5ae8:	f04f 0004 	mov.w	r0, #4
    5aec:	df02      	svc	2
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    5aee:	4040      	eors	r0, r0
    5af0:	f380 8811 	msr	BASEPRI, r0
    5af4:	f04f 0004 	mov.w	r0, #4
    5af8:	df02      	svc	2
	BT_ASSERT(buf->len >= sizeof(*hdr));
    5afa:	4040      	eors	r0, r0
    5afc:	f380 8811 	msr	BASEPRI, r0
    5b00:	f04f 0004 	mov.w	r0, #4
    5b04:	df02      	svc	2
		return false;
    5b06:	2300      	movs	r3, #0
    5b08:	e7db      	b.n	5ac2 <bt_recv_prio+0x2e>
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));
    5b0a:	4040      	eors	r0, r0
    5b0c:	f380 8811 	msr	BASEPRI, r0
    5b10:	f04f 0004 	mov.w	r0, #4
    5b14:	df02      	svc	2
		hci_cmd_complete(buf);
    5b16:	4620      	mov	r0, r4
    5b18:	f7fe fa70 	bl	3ffc <hci_cmd_complete>
	net_buf_unref(buf);
    5b1c:	4620      	mov	r0, r4
    5b1e:	f014 faf1 	bl	1a104 <net_buf_unref>
}
    5b22:	2000      	movs	r0, #0
    5b24:	bd38      	pop	{r3, r4, r5, pc}
		hci_cmd_status(buf);
    5b26:	4620      	mov	r0, r4
    5b28:	f7fe fa80 	bl	402c <hci_cmd_status>
		break;
    5b2c:	e7f6      	b.n	5b1c <bt_recv_prio+0x88>
		hci_num_completed_packets(buf);
    5b2e:	4620      	mov	r0, r4
    5b30:	f7fe fa92 	bl	4058 <hci_num_completed_packets>
		break;
    5b34:	e7f2      	b.n	5b1c <bt_recv_prio+0x88>
	...

00005b38 <bt_hci_driver_register>:
	if (bt_dev.drv) {
    5b38:	4b0a      	ldr	r3, [pc, #40]	; (5b64 <bt_hci_driver_register+0x2c>)
    5b3a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    5b3e:	b943      	cbnz	r3, 5b52 <bt_hci_driver_register+0x1a>
	if (!drv->open || !drv->send) {
    5b40:	6883      	ldr	r3, [r0, #8]
    5b42:	b14b      	cbz	r3, 5b58 <bt_hci_driver_register+0x20>
    5b44:	68c3      	ldr	r3, [r0, #12]
    5b46:	b153      	cbz	r3, 5b5e <bt_hci_driver_register+0x26>
	bt_dev.drv = drv;
    5b48:	4b06      	ldr	r3, [pc, #24]	; (5b64 <bt_hci_driver_register+0x2c>)
    5b4a:	f8c3 00e4 	str.w	r0, [r3, #228]	; 0xe4
	return 0;
    5b4e:	2000      	movs	r0, #0
    5b50:	4770      	bx	lr
		return -EALREADY;
    5b52:	f06f 0077 	mvn.w	r0, #119	; 0x77
    5b56:	4770      	bx	lr
		return -EINVAL;
    5b58:	f06f 0015 	mvn.w	r0, #21
    5b5c:	4770      	bx	lr
    5b5e:	f06f 0015 	mvn.w	r0, #21
}
    5b62:	4770      	bx	lr
    5b64:	2000b808 	.word	0x2000b808

00005b68 <bt_enable>:
{
    5b68:	b530      	push	{r4, r5, lr}
    5b6a:	b087      	sub	sp, #28
	if (!bt_dev.drv) {
    5b6c:	4b29      	ldr	r3, [pc, #164]	; (5c14 <bt_enable+0xac>)
    5b6e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    5b72:	2b00      	cmp	r3, #0
    5b74:	d047      	beq.n	5c06 <bt_enable+0x9e>
    5b76:	4b28      	ldr	r3, [pc, #160]	; (5c18 <bt_enable+0xb0>)
    5b78:	f3bf 8f5b 	dmb	ish
    5b7c:	e853 2f00 	ldrex	r2, [r3]
    5b80:	f042 0101 	orr.w	r1, r2, #1
    5b84:	e843 1400 	strex	r4, r1, [r3]
    5b88:	2c00      	cmp	r4, #0
    5b8a:	d1f7      	bne.n	5b7c <bt_enable+0x14>
    5b8c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    5b90:	f012 0f01 	tst.w	r2, #1
    5b94:	d13a      	bne.n	5c0c <bt_enable+0xa4>
    5b96:	4604      	mov	r4, r0
	ready_cb = cb;
    5b98:	4b20      	ldr	r3, [pc, #128]	; (5c1c <bt_enable+0xb4>)
    5b9a:	6018      	str	r0, [r3, #0]
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay);
    5b9c:	2300      	movs	r3, #0
    5b9e:	9305      	str	r3, [sp, #20]
    5ba0:	9304      	str	r3, [sp, #16]
    5ba2:	f06f 0208 	mvn.w	r2, #8
    5ba6:	9203      	str	r2, [sp, #12]
    5ba8:	9302      	str	r3, [sp, #8]
    5baa:	9301      	str	r3, [sp, #4]
    5bac:	9300      	str	r3, [sp, #0]
    5bae:	4b1c      	ldr	r3, [pc, #112]	; (5c20 <bt_enable+0xb8>)
    5bb0:	f44f 7220 	mov.w	r2, #640	; 0x280
    5bb4:	491b      	ldr	r1, [pc, #108]	; (5c24 <bt_enable+0xbc>)
    5bb6:	481c      	ldr	r0, [pc, #112]	; (5c28 <bt_enable+0xc0>)
    5bb8:	f023 f86e 	bl	28c98 <_impl_k_thread_create>
	err = bt_dev.drv->open();
    5bbc:	4b15      	ldr	r3, [pc, #84]	; (5c14 <bt_enable+0xac>)
    5bbe:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    5bc2:	689b      	ldr	r3, [r3, #8]
    5bc4:	4798      	blx	r3
	if (err) {
    5bc6:	4605      	mov	r5, r0
    5bc8:	b980      	cbnz	r0, 5bec <bt_enable+0x84>
	if (!cb) {
    5bca:	b194      	cbz	r4, 5bf2 <bt_enable+0x8a>
    5bcc:	4b17      	ldr	r3, [pc, #92]	; (5c2c <bt_enable+0xc4>)
    5bce:	f3bf 8f5b 	dmb	ish
    5bd2:	e853 2f00 	ldrex	r2, [r3]
    5bd6:	f042 0101 	orr.w	r1, r2, #1
    5bda:	e843 1000 	strex	r0, r1, [r3]
    5bde:	2800      	cmp	r0, #0
    5be0:	d1f7      	bne.n	5bd2 <bt_enable+0x6a>
    5be2:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    5be6:	f012 0f01 	tst.w	r2, #1
    5bea:	d006      	beq.n	5bfa <bt_enable+0x92>
}
    5bec:	4628      	mov	r0, r5
    5bee:	b007      	add	sp, #28
    5bf0:	bd30      	pop	{r4, r5, pc}
		return bt_init();
    5bf2:	f7ff f8bb 	bl	4d6c <bt_init>
    5bf6:	4605      	mov	r5, r0
    5bf8:	e7f8      	b.n	5bec <bt_enable+0x84>
		k_queue_append(&work_q->queue, work);
    5bfa:	f1a3 0108 	sub.w	r1, r3, #8
    5bfe:	480c      	ldr	r0, [pc, #48]	; (5c30 <bt_enable+0xc8>)
    5c00:	f022 fa34 	bl	2806c <k_queue_append>
    5c04:	e7f2      	b.n	5bec <bt_enable+0x84>
		return -ENODEV;
    5c06:	f06f 0512 	mvn.w	r5, #18
    5c0a:	e7ef      	b.n	5bec <bt_enable+0x84>
		return -EALREADY;
    5c0c:	f06f 0577 	mvn.w	r5, #119	; 0x77
    5c10:	e7ec      	b.n	5bec <bt_enable+0x84>
    5c12:	bf00      	nop
    5c14:	2000b808 	.word	0x2000b808
    5c18:	2000b878 	.word	0x2000b878
    5c1c:	200002b4 	.word	0x200002b4
    5c20:	000059fd 	.word	0x000059fd
    5c24:	20003ba8 	.word	0x20003ba8
    5c28:	200002bc 	.word	0x200002bc
    5c2c:	2000b874 	.word	0x2000b874
    5c30:	20002b08 	.word	0x20002b08

00005c34 <bt_addr_le_is_bonded>:
{
    5c34:	b508      	push	{r3, lr}
		struct bt_keys *keys = bt_keys_find_addr(addr);
    5c36:	f006 fd51 	bl	c6dc <bt_keys_find_addr>
		return keys && keys->keys;
    5c3a:	b118      	cbz	r0, 5c44 <bt_addr_le_is_bonded+0x10>
    5c3c:	8983      	ldrh	r3, [r0, #12]
    5c3e:	b91b      	cbnz	r3, 5c48 <bt_addr_le_is_bonded+0x14>
    5c40:	2000      	movs	r0, #0
    5c42:	bd08      	pop	{r3, pc}
    5c44:	2000      	movs	r0, #0
    5c46:	bd08      	pop	{r3, pc}
    5c48:	2001      	movs	r0, #1
}
    5c4a:	bd08      	pop	{r3, pc}

00005c4c <bt_le_adv_start>:

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
    5c4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5c50:	4605      	mov	r5, r0
    5c52:	460c      	mov	r4, r1
    5c54:	4617      	mov	r7, r2
    5c56:	461e      	mov	r6, r3
	struct net_buf *buf;
	struct bt_hci_cp_le_set_adv_param *set_param;
	int err;

	if (!valid_adv_param(param)) {
    5c58:	f7fd ff88 	bl	3b6c <valid_adv_param>
    5c5c:	2800      	cmp	r0, #0
    5c5e:	f000 808d 	beq.w	5d7c <bt_le_adv_start+0x130>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    5c62:	f3bf 8f5b 	dmb	ish
    5c66:	4b4b      	ldr	r3, [pc, #300]	; (5d94 <bt_le_adv_start+0x148>)
    5c68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    5c6a:	f3bf 8f5b 	dmb	ish
		return -EINVAL;
	}

	if (atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    5c6e:	f013 0f20 	tst.w	r3, #32
    5c72:	f040 8086 	bne.w	5d82 <bt_le_adv_start+0x136>
		return -EALREADY;
	}

	err = set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
    5c76:	463a      	mov	r2, r7
    5c78:	4621      	mov	r1, r4
    5c7a:	f242 0008 	movw	r0, #8200	; 0x2008
    5c7e:	f7fe fe52 	bl	4926 <set_ad>
	if (err) {
    5c82:	4604      	mov	r4, r0
    5c84:	2800      	cmp	r0, #0
    5c86:	d13b      	bne.n	5d00 <bt_le_adv_start+0xb4>
	 * If sd was not provided but we enable connectable undirected
	 * advertising sd needs to be cleared from values set by previous calls.
	 * Clearing sd is done by calling set_ad() with NULL data and zero len.
	 * So following condition check is unusual but correct.
	 */
	if (sd || (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    5c88:	2e00      	cmp	r6, #0
    5c8a:	d03c      	beq.n	5d06 <bt_le_adv_start+0xba>
		err = set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
    5c8c:	9a06      	ldr	r2, [sp, #24]
    5c8e:	4631      	mov	r1, r6
    5c90:	f242 0009 	movw	r0, #8201	; 0x2009
    5c94:	f7fe fe47 	bl	4926 <set_ad>
		if (err) {
    5c98:	4604      	mov	r4, r0
    5c9a:	bb88      	cbnz	r0, 5d00 <bt_le_adv_start+0xb4>
			return err;
		}
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM,
    5c9c:	210f      	movs	r1, #15
    5c9e:	f242 0006 	movw	r0, #8198	; 0x2006
    5ca2:	f7fe fa21 	bl	40e8 <bt_hci_cmd_create>
				sizeof(*set_param));
	if (!buf) {
    5ca6:	4680      	mov	r8, r0
    5ca8:	2800      	cmp	r0, #0
    5caa:	d06d      	beq.n	5d88 <bt_le_adv_start+0x13c>
		return -ENOBUFS;
	}

	set_param = net_buf_add(buf, sizeof(*set_param));
    5cac:	210f      	movs	r1, #15
    5cae:	3008      	adds	r0, #8
    5cb0:	f014 fa74 	bl	1a19c <net_buf_simple_add>
    5cb4:	4607      	mov	r7, r0

	memset(set_param, 0, sizeof(*set_param));
    5cb6:	220f      	movs	r2, #15
    5cb8:	2100      	movs	r1, #0
    5cba:	f024 fee3 	bl	2aa84 <memset>
	set_param->min_interval = sys_cpu_to_le16(param->interval_min);
    5cbe:	886b      	ldrh	r3, [r5, #2]
    5cc0:	803b      	strh	r3, [r7, #0]
	set_param->max_interval = sys_cpu_to_le16(param->interval_max);
    5cc2:	88ab      	ldrh	r3, [r5, #4]
    5cc4:	807b      	strh	r3, [r7, #2]
	set_param->channel_map  = 0x07;
    5cc6:	2307      	movs	r3, #7
    5cc8:	737b      	strb	r3, [r7, #13]

	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    5cca:	782b      	ldrb	r3, [r5, #0]
    5ccc:	f013 0f01 	tst.w	r3, #1
    5cd0:	d11e      	bne.n	5d10 <bt_le_adv_start+0xc4>
			set_param->own_addr_type = bt_dev.id_addr.type;
		}

		set_param->type = BT_LE_ADV_IND;
	} else {
		if (param->own_addr) {
    5cd2:	68a8      	ldr	r0, [r5, #8]
    5cd4:	b378      	cbz	r0, 5d36 <bt_le_adv_start+0xea>
			/* Only NRPA is allowed */
			if (!BT_ADDR_IS_NRPA(param->own_addr)) {
    5cd6:	7943      	ldrb	r3, [r0, #5]
    5cd8:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    5cdc:	d157      	bne.n	5d8e <bt_le_adv_start+0x142>
				return -EINVAL;
			}

			err = set_random_address(param->own_addr);
    5cde:	f7fe fd0b 	bl	46f8 <set_random_address>
    5ce2:	4604      	mov	r4, r0
		} else {
			err = le_set_private_addr();
		}

		if (err) {
    5ce4:	bb5c      	cbnz	r4, 5d3e <bt_le_adv_start+0xf2>
			net_buf_unref(buf);
			return err;
		}

		set_param->own_addr_type = BT_ADDR_LE_RANDOM;
    5ce6:	2301      	movs	r3, #1
    5ce8:	717b      	strb	r3, [r7, #5]

		if (sd) {
    5cea:	b366      	cbz	r6, 5d46 <bt_le_adv_start+0xfa>
			set_param->type = BT_LE_ADV_SCAN_IND;
    5cec:	2302      	movs	r3, #2
    5cee:	713b      	strb	r3, [r7, #4]
		} else {
			set_param->type = BT_LE_ADV_NONCONN_IND;
		}
	}

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
    5cf0:	2200      	movs	r2, #0
    5cf2:	4641      	mov	r1, r8
    5cf4:	f242 0006 	movw	r0, #8198	; 0x2006
    5cf8:	f7fe fa22 	bl	4140 <bt_hci_cmd_send_sync>
	if (err) {
    5cfc:	4604      	mov	r4, r0
    5cfe:	b328      	cbz	r0, 5d4c <bt_le_adv_start+0x100>
	if (!(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING);
	}

	return 0;
}
    5d00:	4620      	mov	r0, r4
    5d02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (sd || (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    5d06:	782b      	ldrb	r3, [r5, #0]
    5d08:	f013 0f01 	tst.w	r3, #1
    5d0c:	d0c6      	beq.n	5c9c <bt_le_adv_start+0x50>
    5d0e:	e7bd      	b.n	5c8c <bt_le_adv_start+0x40>
    5d10:	f3bf 8f5b 	dmb	ish
    5d14:	4b1f      	ldr	r3, [pc, #124]	; (5d94 <bt_le_adv_start+0x148>)
    5d16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    5d18:	f3bf 8f5b 	dmb	ish
			if (atomic_test_bit(bt_dev.flags,
    5d1c:	f013 0f04 	tst.w	r3, #4
    5d20:	d105      	bne.n	5d2e <bt_le_adv_start+0xe2>
			set_param->own_addr_type = bt_dev.id_addr.type;
    5d22:	4b1c      	ldr	r3, [pc, #112]	; (5d94 <bt_le_adv_start+0x148>)
    5d24:	781b      	ldrb	r3, [r3, #0]
    5d26:	717b      	strb	r3, [r7, #5]
		set_param->type = BT_LE_ADV_IND;
    5d28:	2300      	movs	r3, #0
    5d2a:	713b      	strb	r3, [r7, #4]
    5d2c:	e7e0      	b.n	5cf0 <bt_le_adv_start+0xa4>
				set_random_address(&bt_dev.id_addr.a);
    5d2e:	481a      	ldr	r0, [pc, #104]	; (5d98 <bt_le_adv_start+0x14c>)
    5d30:	f7fe fce2 	bl	46f8 <set_random_address>
    5d34:	e7f5      	b.n	5d22 <bt_le_adv_start+0xd6>
			err = le_set_private_addr();
    5d36:	f7fe fd0f 	bl	4758 <le_set_private_addr>
    5d3a:	4604      	mov	r4, r0
    5d3c:	e7d2      	b.n	5ce4 <bt_le_adv_start+0x98>
			net_buf_unref(buf);
    5d3e:	4640      	mov	r0, r8
    5d40:	f014 f9e0 	bl	1a104 <net_buf_unref>
			return err;
    5d44:	e7dc      	b.n	5d00 <bt_le_adv_start+0xb4>
			set_param->type = BT_LE_ADV_NONCONN_IND;
    5d46:	2303      	movs	r3, #3
    5d48:	713b      	strb	r3, [r7, #4]
    5d4a:	e7d1      	b.n	5cf0 <bt_le_adv_start+0xa4>
	err = set_advertise_enable(true);
    5d4c:	2001      	movs	r0, #1
    5d4e:	f7fe fd71 	bl	4834 <set_advertise_enable>
	if (err) {
    5d52:	4604      	mov	r4, r0
    5d54:	2800      	cmp	r0, #0
    5d56:	d1d3      	bne.n	5d00 <bt_le_adv_start+0xb4>
	if (!(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
    5d58:	782b      	ldrb	r3, [r5, #0]
    5d5a:	f013 0f02 	tst.w	r3, #2
    5d5e:	d1cf      	bne.n	5d00 <bt_le_adv_start+0xb4>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    5d60:	4b0e      	ldr	r3, [pc, #56]	; (5d9c <bt_le_adv_start+0x150>)
    5d62:	f3bf 8f5b 	dmb	ish
    5d66:	e853 2f00 	ldrex	r2, [r3]
    5d6a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    5d6e:	e843 2100 	strex	r1, r2, [r3]
    5d72:	2900      	cmp	r1, #0
    5d74:	d1f7      	bne.n	5d66 <bt_le_adv_start+0x11a>
    5d76:	f3bf 8f5b 	dmb	ish
    5d7a:	e7c1      	b.n	5d00 <bt_le_adv_start+0xb4>
		return -EINVAL;
    5d7c:	f06f 0415 	mvn.w	r4, #21
    5d80:	e7be      	b.n	5d00 <bt_le_adv_start+0xb4>
		return -EALREADY;
    5d82:	f06f 0477 	mvn.w	r4, #119	; 0x77
    5d86:	e7bb      	b.n	5d00 <bt_le_adv_start+0xb4>
		return -ENOBUFS;
    5d88:	f06f 0468 	mvn.w	r4, #104	; 0x68
    5d8c:	e7b8      	b.n	5d00 <bt_le_adv_start+0xb4>
				return -EINVAL;
    5d8e:	f06f 0415 	mvn.w	r4, #21
    5d92:	e7b5      	b.n	5d00 <bt_le_adv_start+0xb4>
    5d94:	2000b808 	.word	0x2000b808
    5d98:	2000b809 	.word	0x2000b809
    5d9c:	2000b878 	.word	0x2000b878

00005da0 <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
    5da0:	b510      	push	{r4, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    5da2:	4b16      	ldr	r3, [pc, #88]	; (5dfc <bt_le_adv_stop+0x5c>)
    5da4:	f103 0270 	add.w	r2, r3, #112	; 0x70
    5da8:	f3bf 8f5b 	dmb	ish
    5dac:	e852 1f00 	ldrex	r1, [r2]
    5db0:	f021 0140 	bic.w	r1, r1, #64	; 0x40
    5db4:	e842 1000 	strex	r0, r1, [r2]
    5db8:	2800      	cmp	r0, #0
    5dba:	d1f7      	bne.n	5dac <bt_le_adv_stop+0xc>
    5dbc:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    5dc0:	f3bf 8f5b 	dmb	ish
    5dc4:	6f1c      	ldr	r4, [r3, #112]	; 0x70
    5dc6:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1))));
    5dca:	f3c4 1440 	ubfx	r4, r4, #5, #1
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING);

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    5dce:	b90c      	cbnz	r4, 5dd4 <bt_le_adv_stop+0x34>
			le_set_private_addr();
		}
	}

	return 0;
}
    5dd0:	4620      	mov	r0, r4
    5dd2:	bd10      	pop	{r4, pc}
	err = set_advertise_enable(false);
    5dd4:	2000      	movs	r0, #0
    5dd6:	f7fe fd2d 	bl	4834 <set_advertise_enable>
	if (err) {
    5dda:	4604      	mov	r4, r0
    5ddc:	2800      	cmp	r0, #0
    5dde:	d1f7      	bne.n	5dd0 <bt_le_adv_stop+0x30>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    5de0:	f3bf 8f5b 	dmb	ish
    5de4:	4b05      	ldr	r3, [pc, #20]	; (5dfc <bt_le_adv_stop+0x5c>)
    5de6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    5de8:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1))));
    5dec:	f3c3 2340 	ubfx	r3, r3, #9, #1
		if (atomic_test_bit(bt_dev.flags, BT_DEV_ACTIVE_SCAN)) {
    5df0:	b90b      	cbnz	r3, 5df6 <bt_le_adv_stop+0x56>
	return 0;
    5df2:	461c      	mov	r4, r3
    5df4:	e7ec      	b.n	5dd0 <bt_le_adv_stop+0x30>
			le_set_private_addr();
    5df6:	f7fe fcaf 	bl	4758 <le_set_private_addr>
    5dfa:	e7e9      	b.n	5dd0 <bt_le_adv_stop+0x30>
    5dfc:	2000b808 	.word	0x2000b808

00005e00 <bt_buf_get_rx>:

	return bt_le_scan_update(false);
}

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, s32_t timeout)
{
    5e00:	b538      	push	{r3, r4, r5, lr}
    5e02:	4605      	mov	r5, r0
		buf = net_buf_alloc(&hci_rx_pool, timeout);
	} else {
		buf = net_buf_alloc(&acl_in_pool, timeout);
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
    5e04:	4808      	ldr	r0, [pc, #32]	; (5e28 <bt_buf_get_rx+0x28>)
    5e06:	f014 f90f 	bl	1a028 <net_buf_alloc>
#endif

	if (buf) {
    5e0a:	4604      	mov	r4, r0
    5e0c:	b150      	cbz	r0, 5e24 <bt_buf_get_rx+0x24>
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    5e0e:	2100      	movs	r1, #0
    5e10:	f014 f965 	bl	1a0de <net_buf_reserve>
    5e14:	f104 0310 	add.w	r3, r4, #16
    5e18:	89e2      	ldrh	r2, [r4, #14]
    5e1a:	4413      	add	r3, r2
    5e1c:	3303      	adds	r3, #3
    5e1e:	f023 0303 	bic.w	r3, r3, #3
	*(u8_t *)net_buf_user_data(buf) = type;
    5e22:	701d      	strb	r5, [r3, #0]
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    5e24:	4620      	mov	r0, r4
    5e26:	bd38      	pop	{r3, r4, r5, pc}
    5e28:	2000d0c4 	.word	0x2000d0c4

00005e2c <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(s32_t timeout)
{
    5e2c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    5e2e:	f04f 0320 	mov.w	r3, #32
    5e32:	f3ef 8211 	mrs	r2, BASEPRI
    5e36:	f383 8811 	msr	BASEPRI, r3
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
    5e3a:	4b0f      	ldr	r3, [pc, #60]	; (5e78 <bt_buf_get_cmd_complete+0x4c>)
    5e3c:	f8d3 40c0 	ldr.w	r4, [r3, #192]	; 0xc0
	bt_dev.sent_cmd = NULL;
    5e40:	2500      	movs	r5, #0
    5e42:	f8c3 50c0 	str.w	r5, [r3, #192]	; 0xc0
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    5e46:	f382 8811 	msr	BASEPRI, r2
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
    5e4a:	b17c      	cbz	r4, 5e6c <bt_buf_get_cmd_complete+0x40>
    5e4c:	f104 0310 	add.w	r3, r4, #16
    5e50:	89e2      	ldrh	r2, [r4, #14]
    5e52:	4413      	add	r3, r2
    5e54:	3303      	adds	r3, #3
    5e56:	f023 0303 	bic.w	r3, r3, #3
    5e5a:	2201      	movs	r2, #1
    5e5c:	701a      	strb	r2, [r3, #0]
		bt_buf_set_type(buf, BT_BUF_EVT);
		buf->len = 0;
    5e5e:	4629      	mov	r1, r5
    5e60:	81a5      	strh	r5, [r4, #12]
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    5e62:	4620      	mov	r0, r4
    5e64:	f014 f93b 	bl	1a0de <net_buf_reserve>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
    5e68:	4620      	mov	r0, r4
    5e6a:	bd38      	pop	{r3, r4, r5, pc}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    5e6c:	4601      	mov	r1, r0
    5e6e:	2001      	movs	r0, #1
    5e70:	f7ff ffc6 	bl	5e00 <bt_buf_get_rx>
    5e74:	4604      	mov	r4, r0
    5e76:	e7f7      	b.n	5e68 <bt_buf_get_cmd_complete+0x3c>
    5e78:	2000b808 	.word	0x2000b808

00005e7c <bt_pub_key_gen>:
{
	return cmd(buf)->opcode;
}

int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
    5e7c:	b570      	push	{r4, r5, r6, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!(bt_dev.supported_commands[34] & 0x02) ||
    5e7e:	4b29      	ldr	r3, [pc, #164]	; (5f24 <bt_pub_key_gen+0xa8>)
    5e80:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
    5e84:	f003 0306 	and.w	r3, r3, #6
    5e88:	2b06      	cmp	r3, #6
    5e8a:	d148      	bne.n	5f1e <bt_pub_key_gen+0xa2>
	    !(bt_dev.supported_commands[34] & 0x04)) {
		BT_WARN("ECC HCI commands not available");
		return -ENOTSUP;
	}

	new_cb->_next = pub_key_cb;
    5e8c:	4b26      	ldr	r3, [pc, #152]	; (5f28 <bt_pub_key_gen+0xac>)
    5e8e:	681a      	ldr	r2, [r3, #0]
    5e90:	6042      	str	r2, [r0, #4]
	pub_key_cb = new_cb;
    5e92:	6018      	str	r0, [r3, #0]
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    5e94:	4b25      	ldr	r3, [pc, #148]	; (5f2c <bt_pub_key_gen+0xb0>)
    5e96:	f3bf 8f5b 	dmb	ish
    5e9a:	e853 2f00 	ldrex	r2, [r3]
    5e9e:	f042 0110 	orr.w	r1, r2, #16
    5ea2:	e843 1400 	strex	r4, r1, [r3]
    5ea6:	2c00      	cmp	r4, #0
    5ea8:	d1f7      	bne.n	5e9a <bt_pub_key_gen+0x1e>
    5eaa:	f3bf 8f5b 	dmb	ish

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    5eae:	f012 0f10 	tst.w	r2, #16
    5eb2:	d002      	beq.n	5eba <bt_pub_key_gen+0x3e>
		return 0;
    5eb4:	2600      	movs	r6, #0
			cb->func(NULL);
		}
	}

	return 0;
}
    5eb6:	4630      	mov	r0, r6
    5eb8:	bd70      	pop	{r4, r5, r6, pc}
    5eba:	4605      	mov	r5, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    5ebc:	f3bf 8f5b 	dmb	ish
    5ec0:	e853 2f00 	ldrex	r2, [r3]
    5ec4:	f022 0208 	bic.w	r2, r2, #8
    5ec8:	e843 2100 	strex	r1, r2, [r3]
    5ecc:	2900      	cmp	r1, #0
    5ece:	d1f7      	bne.n	5ec0 <bt_pub_key_gen+0x44>
    5ed0:	f3bf 8f5b 	dmb	ish
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
    5ed4:	2200      	movs	r2, #0
    5ed6:	4611      	mov	r1, r2
    5ed8:	f242 0025 	movw	r0, #8229	; 0x2025
    5edc:	f7fe f930 	bl	4140 <bt_hci_cmd_send_sync>
	if (err) {
    5ee0:	4606      	mov	r6, r0
    5ee2:	b910      	cbnz	r0, 5eea <bt_pub_key_gen+0x6e>
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    5ee4:	4b10      	ldr	r3, [pc, #64]	; (5f28 <bt_pub_key_gen+0xac>)
    5ee6:	681c      	ldr	r4, [r3, #0]
    5ee8:	e011      	b.n	5f0e <bt_pub_key_gen+0x92>
    5eea:	4b10      	ldr	r3, [pc, #64]	; (5f2c <bt_pub_key_gen+0xb0>)
    5eec:	f3bf 8f5b 	dmb	ish
    5ef0:	e853 2f00 	ldrex	r2, [r3]
    5ef4:	f022 0210 	bic.w	r2, r2, #16
    5ef8:	e843 2100 	strex	r1, r2, [r3]
    5efc:	2900      	cmp	r1, #0
    5efe:	d1f7      	bne.n	5ef0 <bt_pub_key_gen+0x74>
    5f00:	f3bf 8f5b 	dmb	ish
		pub_key_cb = NULL;
    5f04:	2200      	movs	r2, #0
    5f06:	4b08      	ldr	r3, [pc, #32]	; (5f28 <bt_pub_key_gen+0xac>)
    5f08:	601a      	str	r2, [r3, #0]
		return err;
    5f0a:	e7d4      	b.n	5eb6 <bt_pub_key_gen+0x3a>
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    5f0c:	6864      	ldr	r4, [r4, #4]
    5f0e:	2c00      	cmp	r4, #0
    5f10:	d0d1      	beq.n	5eb6 <bt_pub_key_gen+0x3a>
		if (cb != new_cb) {
    5f12:	42ac      	cmp	r4, r5
    5f14:	d0fa      	beq.n	5f0c <bt_pub_key_gen+0x90>
			cb->func(NULL);
    5f16:	6823      	ldr	r3, [r4, #0]
    5f18:	2000      	movs	r0, #0
    5f1a:	4798      	blx	r3
    5f1c:	e7f6      	b.n	5f0c <bt_pub_key_gen+0x90>
		return -ENOTSUP;
    5f1e:	f06f 0685 	mvn.w	r6, #133	; 0x85
    5f22:	e7c8      	b.n	5eb6 <bt_pub_key_gen+0x3a>
    5f24:	2000b808 	.word	0x2000b808
    5f28:	200002b0 	.word	0x200002b0
    5f2c:	2000b878 	.word	0x2000b878

00005f30 <bt_dh_key_gen>:

	return NULL;
}

int bt_dh_key_gen(const u8_t remote_pk[64], bt_dh_key_cb_t cb)
{
    5f30:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_cp_le_generate_dhkey *cp;
	struct net_buf *buf;
	int err;

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    5f32:	4b21      	ldr	r3, [pc, #132]	; (5fb8 <bt_dh_key_gen+0x88>)
    5f34:	681b      	ldr	r3, [r3, #0]
    5f36:	bbab      	cbnz	r3, 5fa4 <bt_dh_key_gen+0x74>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    5f38:	f3bf 8f5b 	dmb	ish
    5f3c:	4b1f      	ldr	r3, [pc, #124]	; (5fbc <bt_dh_key_gen+0x8c>)
    5f3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    5f40:	f3bf 8f5b 	dmb	ish
    5f44:	f013 0f10 	tst.w	r3, #16
    5f48:	d130      	bne.n	5fac <bt_dh_key_gen+0x7c>
    5f4a:	f3bf 8f5b 	dmb	ish
    5f4e:	4b1b      	ldr	r3, [pc, #108]	; (5fbc <bt_dh_key_gen+0x8c>)
    5f50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    5f52:	f3bf 8f5b 	dmb	ish
		return -EBUSY;
	}

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
    5f56:	f013 0f08 	tst.w	r3, #8
    5f5a:	d02a      	beq.n	5fb2 <bt_dh_key_gen+0x82>
    5f5c:	4604      	mov	r4, r0
		return -EADDRNOTAVAIL;
	}

	dh_key_cb = cb;
    5f5e:	4b16      	ldr	r3, [pc, #88]	; (5fb8 <bt_dh_key_gen+0x88>)
    5f60:	6019      	str	r1, [r3, #0]

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
    5f62:	2140      	movs	r1, #64	; 0x40
    5f64:	f242 0026 	movw	r0, #8230	; 0x2026
    5f68:	f7fe f8be 	bl	40e8 <bt_hci_cmd_create>
	if (!buf) {
    5f6c:	4605      	mov	r5, r0
    5f6e:	b198      	cbz	r0, 5f98 <bt_dh_key_gen+0x68>
		dh_key_cb = NULL;
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));
    5f70:	2140      	movs	r1, #64	; 0x40
    5f72:	3008      	adds	r0, #8
    5f74:	f014 f912 	bl	1a19c <net_buf_simple_add>
	memcpy(cp->key, remote_pk, sizeof(cp->key));
    5f78:	2240      	movs	r2, #64	; 0x40
    5f7a:	4621      	mov	r1, r4
    5f7c:	f7fa f9a0 	bl	2c0 <memcpy>

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
    5f80:	2200      	movs	r2, #0
    5f82:	4629      	mov	r1, r5
    5f84:	f242 0026 	movw	r0, #8230	; 0x2026
    5f88:	f7fe f8da 	bl	4140 <bt_hci_cmd_send_sync>
	if (err) {
    5f8c:	4603      	mov	r3, r0
    5f8e:	b158      	cbz	r0, 5fa8 <bt_dh_key_gen+0x78>
		dh_key_cb = NULL;
    5f90:	2100      	movs	r1, #0
    5f92:	4a09      	ldr	r2, [pc, #36]	; (5fb8 <bt_dh_key_gen+0x88>)
    5f94:	6011      	str	r1, [r2, #0]
		return err;
    5f96:	e007      	b.n	5fa8 <bt_dh_key_gen+0x78>
		dh_key_cb = NULL;
    5f98:	2200      	movs	r2, #0
    5f9a:	4b07      	ldr	r3, [pc, #28]	; (5fb8 <bt_dh_key_gen+0x88>)
    5f9c:	601a      	str	r2, [r3, #0]
		return -ENOBUFS;
    5f9e:	f06f 0368 	mvn.w	r3, #104	; 0x68
    5fa2:	e001      	b.n	5fa8 <bt_dh_key_gen+0x78>
		return -EBUSY;
    5fa4:	f06f 030f 	mvn.w	r3, #15
	}

	return 0;
}
    5fa8:	4618      	mov	r0, r3
    5faa:	bd38      	pop	{r3, r4, r5, pc}
		return -EBUSY;
    5fac:	f06f 030f 	mvn.w	r3, #15
    5fb0:	e7fa      	b.n	5fa8 <bt_dh_key_gen+0x78>
		return -EADDRNOTAVAIL;
    5fb2:	f06f 037c 	mvn.w	r3, #124	; 0x7c
    5fb6:	e7f7      	b.n	5fa8 <bt_dh_key_gen+0x78>
    5fb8:	2000026c 	.word	0x2000026c
    5fbc:	2000b808 	.word	0x2000b808

00005fc0 <notify_connected>:
		return "(unknown)";
	}
}

static void notify_connected(struct bt_conn *conn)
{
    5fc0:	b538      	push	{r3, r4, r5, lr}
    5fc2:	4605      	mov	r5, r0
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
    5fc4:	4b06      	ldr	r3, [pc, #24]	; (5fe0 <notify_connected+0x20>)
    5fc6:	681c      	ldr	r4, [r3, #0]
    5fc8:	e000      	b.n	5fcc <notify_connected+0xc>
    5fca:	69a4      	ldr	r4, [r4, #24]
    5fcc:	b134      	cbz	r4, 5fdc <notify_connected+0x1c>
		if (cb->connected) {
    5fce:	6823      	ldr	r3, [r4, #0]
    5fd0:	2b00      	cmp	r3, #0
    5fd2:	d0fa      	beq.n	5fca <notify_connected+0xa>
			cb->connected(conn, conn->err);
    5fd4:	7ae9      	ldrb	r1, [r5, #11]
    5fd6:	4628      	mov	r0, r5
    5fd8:	4798      	blx	r3
    5fda:	e7f6      	b.n	5fca <notify_connected+0xa>
		}
	}
}
    5fdc:	bd38      	pop	{r3, r4, r5, pc}
    5fde:	bf00      	nop
    5fe0:	2000038c 	.word	0x2000038c

00005fe4 <notify_disconnected>:

static void notify_disconnected(struct bt_conn *conn)
{
    5fe4:	b538      	push	{r3, r4, r5, lr}
    5fe6:	4605      	mov	r5, r0
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
    5fe8:	4b06      	ldr	r3, [pc, #24]	; (6004 <notify_disconnected+0x20>)
    5fea:	681c      	ldr	r4, [r3, #0]
    5fec:	e000      	b.n	5ff0 <notify_disconnected+0xc>
    5fee:	69a4      	ldr	r4, [r4, #24]
    5ff0:	b134      	cbz	r4, 6000 <notify_disconnected+0x1c>
		if (cb->disconnected) {
    5ff2:	6863      	ldr	r3, [r4, #4]
    5ff4:	2b00      	cmp	r3, #0
    5ff6:	d0fa      	beq.n	5fee <notify_disconnected+0xa>
			cb->disconnected(conn, conn->err);
    5ff8:	7ae9      	ldrb	r1, [r5, #11]
    5ffa:	4628      	mov	r0, r5
    5ffc:	4798      	blx	r3
    5ffe:	e7f6      	b.n	5fee <notify_disconnected+0xa>
		}
	}
}
    6000:	bd38      	pop	{r3, r4, r5, pc}
    6002:	bf00      	nop
    6004:	2000038c 	.word	0x2000038c

00006008 <tx_free>:
	return 0;
}

static void tx_free(struct bt_conn_tx *tx)
{
	tx->cb = NULL;
    6008:	2300      	movs	r3, #0
    600a:	6043      	str	r3, [r0, #4]
	node->next = list->head;
    600c:	4b04      	ldr	r3, [pc, #16]	; (6020 <tx_free+0x18>)
    600e:	681a      	ldr	r2, [r3, #0]
    6010:	6002      	str	r2, [r0, #0]
	list->head = node;
    6012:	6018      	str	r0, [r3, #0]
	if (!list->tail) {
    6014:	685b      	ldr	r3, [r3, #4]
    6016:	b103      	cbz	r3, 601a <tx_free+0x12>
    6018:	4770      	bx	lr
		list->tail = list->head;
    601a:	4b01      	ldr	r3, [pc, #4]	; (6020 <tx_free+0x18>)
    601c:	6058      	str	r0, [r3, #4]
	sys_slist_prepend(&free_tx, &tx->node);
}
    601e:	e7fb      	b.n	6018 <tx_free+0x10>
    6020:	2000052c 	.word	0x2000052c

00006024 <add_pending_tx>:
		}
	}
}

static sys_snode_t *add_pending_tx(struct bt_conn *conn, bt_conn_tx_cb_t cb)
{
    6024:	b410      	push	{r4}
	sys_snode_t *node = list->head;
    6026:	4a0f      	ldr	r2, [pc, #60]	; (6064 <add_pending_tx+0x40>)
    6028:	6813      	ldr	r3, [r2, #0]
	list->head = node->next;
    602a:	681c      	ldr	r4, [r3, #0]
    602c:	6014      	str	r4, [r2, #0]
	if (list->tail == node) {
    602e:	6852      	ldr	r2, [r2, #4]
    6030:	4293      	cmp	r3, r2
    6032:	d011      	beq.n	6058 <add_pending_tx+0x34>
	BT_DBG("conn %p cb %p", conn, cb);

	__ASSERT(!sys_slist_is_empty(&free_tx), "No free conn TX contexts");

	node = sys_slist_get_not_empty(&free_tx);
	CONTAINER_OF(node, struct bt_conn_tx, node)->cb = cb;
    6034:	6059      	str	r1, [r3, #4]
	__asm__ volatile(
    6036:	f04f 0220 	mov.w	r2, #32
    603a:	f3ef 8111 	mrs	r1, BASEPRI
    603e:	f382 8811 	msr	BASEPRI, r2
	node->next = NULL;
    6042:	2200      	movs	r2, #0
    6044:	601a      	str	r2, [r3, #0]
	if (!list->tail) {
    6046:	6982      	ldr	r2, [r0, #24]
    6048:	b14a      	cbz	r2, 605e <add_pending_tx+0x3a>
		list->tail->next = node;
    604a:	6013      	str	r3, [r2, #0]
		list->tail = node;
    604c:	6183      	str	r3, [r0, #24]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    604e:	f381 8811 	msr	BASEPRI, r1
	key = irq_lock();
	sys_slist_append(&conn->tx_pending, node);
	irq_unlock(key);

	return node;
}
    6052:	4618      	mov	r0, r3
    6054:	bc10      	pop	{r4}
    6056:	4770      	bx	lr
		list->tail = list->head;
    6058:	4a02      	ldr	r2, [pc, #8]	; (6064 <add_pending_tx+0x40>)
    605a:	6054      	str	r4, [r2, #4]
    605c:	e7ea      	b.n	6034 <add_pending_tx+0x10>
		list->tail = node;
    605e:	6183      	str	r3, [r0, #24]
		list->head = node;
    6060:	6143      	str	r3, [r0, #20]
    6062:	e7f4      	b.n	604e <add_pending_tx+0x2a>
    6064:	2000052c 	.word	0x2000052c

00006068 <remove_pending_tx>:

static void remove_pending_tx(struct bt_conn *conn, sys_snode_t *node)
{
    6068:	b510      	push	{r4, lr}
	__asm__ volatile(
    606a:	f04f 0320 	mov.w	r3, #32
    606e:	f3ef 8411 	mrs	r4, BASEPRI
    6072:	f383 8811 	msr	BASEPRI, r3
	return list->head;
    6076:	6943      	ldr	r3, [r0, #20]
	sys_snode_t *prev = NULL;
    6078:	2200      	movs	r2, #0
	SYS_SLIST_FOR_EACH_NODE(list, test) {
    607a:	b163      	cbz	r3, 6096 <remove_pending_tx+0x2e>
		if (test == node) {
    607c:	4299      	cmp	r1, r3
    607e:	d002      	beq.n	6086 <remove_pending_tx+0x1e>
		prev = test;
    6080:	461a      	mov	r2, r3
	SYS_SLIST_FOR_EACH_NODE(list, test) {
    6082:	681b      	ldr	r3, [r3, #0]
    6084:	e7f9      	b.n	607a <remove_pending_tx+0x12>
	if (!prev_node) {
    6086:	b162      	cbz	r2, 60a2 <remove_pending_tx+0x3a>
		prev_node->next = node->next;
    6088:	680b      	ldr	r3, [r1, #0]
    608a:	6013      	str	r3, [r2, #0]
		if (list->tail == node) {
    608c:	6983      	ldr	r3, [r0, #24]
    608e:	4299      	cmp	r1, r3
    6090:	d00e      	beq.n	60b0 <remove_pending_tx+0x48>
	node->next = NULL;
    6092:	2300      	movs	r3, #0
    6094:	600b      	str	r3, [r1, #0]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    6096:	f384 8811 	msr	BASEPRI, r4

	key = irq_lock();
	sys_slist_find_and_remove(&conn->tx_pending, node);
	irq_unlock(key);

	tx_free(CONTAINER_OF(node, struct bt_conn_tx, node));
    609a:	4608      	mov	r0, r1
    609c:	f7ff ffb4 	bl	6008 <tx_free>
    60a0:	bd10      	pop	{r4, pc}
		list->head = node->next;
    60a2:	680b      	ldr	r3, [r1, #0]
    60a4:	6143      	str	r3, [r0, #20]
		if (list->tail == node) {
    60a6:	6982      	ldr	r2, [r0, #24]
    60a8:	4291      	cmp	r1, r2
    60aa:	d1f2      	bne.n	6092 <remove_pending_tx+0x2a>
			list->tail = list->head;
    60ac:	6183      	str	r3, [r0, #24]
    60ae:	e7f0      	b.n	6092 <remove_pending_tx+0x2a>
			list->tail = prev_node;
    60b0:	6182      	str	r2, [r0, #24]
    60b2:	e7ee      	b.n	6092 <remove_pending_tx+0x2a>

000060b4 <bt_conn_set_param_le>:

#if defined(CONFIG_BT_CENTRAL)
static void bt_conn_set_param_le(struct bt_conn *conn,
				 const struct bt_le_conn_param *param)
{
	conn->le.interval_max = param->interval_max;
    60b4:	884b      	ldrh	r3, [r1, #2]
    60b6:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
	conn->le.latency = param->latency;
    60ba:	888b      	ldrh	r3, [r1, #4]
    60bc:	f8a0 3064 	strh.w	r3, [r0, #100]	; 0x64
	conn->le.timeout = param->timeout;
    60c0:	88cb      	ldrh	r3, [r1, #6]
    60c2:	f8a0 3066 	strh.w	r3, [r0, #102]	; 0x66
    60c6:	4770      	bx	lr

000060c8 <bt_conn_reset_rx_state>:
	if (!conn->rx_len) {
    60c8:	89c3      	ldrh	r3, [r0, #14]
    60ca:	b903      	cbnz	r3, 60ce <bt_conn_reset_rx_state+0x6>
    60cc:	4770      	bx	lr
{
    60ce:	b510      	push	{r4, lr}
    60d0:	4604      	mov	r4, r0
	net_buf_unref(conn->rx);
    60d2:	6900      	ldr	r0, [r0, #16]
    60d4:	f014 f816 	bl	1a104 <net_buf_unref>
	conn->rx = NULL;
    60d8:	2300      	movs	r3, #0
    60da:	6123      	str	r3, [r4, #16]
	conn->rx_len = 0;
    60dc:	81e3      	strh	r3, [r4, #14]
    60de:	bd10      	pop	{r4, pc}

000060e0 <conn_new>:
{
    60e0:	b510      	push	{r4, lr}
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    60e2:	2300      	movs	r3, #0
    60e4:	b1ab      	cbz	r3, 6112 <conn_new+0x32>
	struct bt_conn *conn = NULL;
    60e6:	2400      	movs	r4, #0
	if (!conn) {
    60e8:	b18c      	cbz	r4, 610e <conn_new+0x2e>
	memset(conn, 0, sizeof(*conn));
    60ea:	229c      	movs	r2, #156	; 0x9c
    60ec:	2100      	movs	r1, #0
    60ee:	4620      	mov	r0, r4
    60f0:	f024 fcc8 	bl	2aa84 <memset>
	atomic_set(&conn->ref, 1);
    60f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    60f8:	2201      	movs	r2, #1
    60fa:	f3bf 8f5b 	dmb	ish
    60fe:	e853 1f00 	ldrex	r1, [r3]
    6102:	e843 2000 	strex	r0, r2, [r3]
    6106:	2800      	cmp	r0, #0
    6108:	d1f9      	bne.n	60fe <conn_new+0x1e>
    610a:	f3bf 8f5b 	dmb	ish
}
    610e:	4620      	mov	r0, r4
    6110:	bd10      	pop	{r4, pc}
		if (!atomic_get(&conns[i].ref)) {
    6112:	229c      	movs	r2, #156	; 0x9c
    6114:	fb02 f203 	mul.w	r2, r2, r3
    6118:	3240      	adds	r2, #64	; 0x40
    611a:	4907      	ldr	r1, [pc, #28]	; (6138 <conn_new+0x58>)
    611c:	440a      	add	r2, r1
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    611e:	f3bf 8f5b 	dmb	ish
    6122:	6852      	ldr	r2, [r2, #4]
    6124:	f3bf 8f5b 	dmb	ish
    6128:	b10a      	cbz	r2, 612e <conn_new+0x4e>
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    612a:	3301      	adds	r3, #1
    612c:	e7da      	b.n	60e4 <conn_new+0x4>
			conn = &conns[i];
    612e:	229c      	movs	r2, #156	; 0x9c
    6130:	fb02 1403 	mla	r4, r2, r3, r1
			break;
    6134:	e7d8      	b.n	60e8 <conn_new+0x8>
    6136:	bf00      	nop
    6138:	200003a0 	.word	0x200003a0

0000613c <bt_conn_get_pkts>:
}
    613c:	4800      	ldr	r0, [pc, #0]	; (6140 <bt_conn_get_pkts+0x4>)
    613e:	4770      	bx	lr
    6140:	2000b894 	.word	0x2000b894

00006144 <process_unack_tx>:
{
    6144:	b510      	push	{r4, lr}
    6146:	4604      	mov	r4, r0
    6148:	e009      	b.n	615e <process_unack_tx+0x1a>
    614a:	f383 8811 	msr	BASEPRI, r3
		if (!node) {
    614e:	b1b0      	cbz	r0, 617e <process_unack_tx+0x3a>
		tx_free(CONTAINER_OF(node, struct bt_conn_tx, node));
    6150:	f7ff ff5a 	bl	6008 <tx_free>
		k_sem_give(bt_conn_get_pkts(conn));
    6154:	4620      	mov	r0, r4
    6156:	f7ff fff1 	bl	613c <bt_conn_get_pkts>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    615a:	f022 fb1e 	bl	2879a <_impl_k_sem_give>
	__asm__ volatile(
    615e:	f04f 0220 	mov.w	r2, #32
    6162:	f3ef 8311 	mrs	r3, BASEPRI
    6166:	f382 8811 	msr	BASEPRI, r2
	return (!list->head);
    616a:	6960      	ldr	r0, [r4, #20]
	return sys_slist_is_empty(list) ? NULL : sys_slist_get_not_empty(list);
    616c:	2800      	cmp	r0, #0
    616e:	d0ec      	beq.n	614a <process_unack_tx+0x6>
	list->head = node->next;
    6170:	6802      	ldr	r2, [r0, #0]
    6172:	6162      	str	r2, [r4, #20]
	if (list->tail == node) {
    6174:	69a1      	ldr	r1, [r4, #24]
    6176:	4288      	cmp	r0, r1
    6178:	d1e7      	bne.n	614a <process_unack_tx+0x6>
		list->tail = list->head;
    617a:	61a2      	str	r2, [r4, #24]
    617c:	e7e5      	b.n	614a <process_unack_tx+0x6>
    617e:	bd10      	pop	{r4, pc}

00006180 <notify_le_param_updated>:
{
    6180:	b570      	push	{r4, r5, r6, lr}
    6182:	4605      	mov	r5, r0
	for (cb = callback_list; cb; cb = cb->_next) {
    6184:	4b08      	ldr	r3, [pc, #32]	; (61a8 <notify_le_param_updated+0x28>)
    6186:	681c      	ldr	r4, [r3, #0]
    6188:	e000      	b.n	618c <notify_le_param_updated+0xc>
    618a:	69a4      	ldr	r4, [r4, #24]
    618c:	b15c      	cbz	r4, 61a6 <notify_le_param_updated+0x26>
		if (cb->le_param_updated) {
    618e:	68e6      	ldr	r6, [r4, #12]
    6190:	2e00      	cmp	r6, #0
    6192:	d0fa      	beq.n	618a <notify_le_param_updated+0xa>
			cb->le_param_updated(conn, conn->le.interval,
    6194:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
    6198:	f8b5 2064 	ldrh.w	r2, [r5, #100]	; 0x64
    619c:	f8b5 105e 	ldrh.w	r1, [r5, #94]	; 0x5e
    61a0:	4628      	mov	r0, r5
    61a2:	47b0      	blx	r6
    61a4:	e7f1      	b.n	618a <notify_le_param_updated+0xa>
}
    61a6:	bd70      	pop	{r4, r5, r6, pc}
    61a8:	2000038c 	.word	0x2000038c

000061ac <le_param_req>:
{
    61ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    61ae:	4606      	mov	r6, r0
    61b0:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
    61b2:	4608      	mov	r0, r1
    61b4:	f7fe fc02 	bl	49bc <bt_le_conn_params_valid>
    61b8:	4607      	mov	r7, r0
    61ba:	b198      	cbz	r0, 61e4 <le_param_req+0x38>
	for (cb = callback_list; cb; cb = cb->_next) {
    61bc:	4b0a      	ldr	r3, [pc, #40]	; (61e8 <le_param_req+0x3c>)
    61be:	681c      	ldr	r4, [r3, #0]
    61c0:	e000      	b.n	61c4 <le_param_req+0x18>
    61c2:	69a4      	ldr	r4, [r4, #24]
    61c4:	b174      	cbz	r4, 61e4 <le_param_req+0x38>
		if (!cb->le_param_req) {
    61c6:	68a3      	ldr	r3, [r4, #8]
    61c8:	2b00      	cmp	r3, #0
    61ca:	d0fa      	beq.n	61c2 <le_param_req+0x16>
		if (!cb->le_param_req(conn, param)) {
    61cc:	4629      	mov	r1, r5
    61ce:	4630      	mov	r0, r6
    61d0:	4798      	blx	r3
    61d2:	b130      	cbz	r0, 61e2 <le_param_req+0x36>
		if (!bt_le_conn_params_valid(param)) {
    61d4:	4628      	mov	r0, r5
    61d6:	f7fe fbf1 	bl	49bc <bt_le_conn_params_valid>
    61da:	2800      	cmp	r0, #0
    61dc:	d1f1      	bne.n	61c2 <le_param_req+0x16>
			return false;
    61de:	4607      	mov	r7, r0
    61e0:	e000      	b.n	61e4 <le_param_req+0x38>
			return false;
    61e2:	4607      	mov	r7, r0
}
    61e4:	4638      	mov	r0, r7
    61e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    61e8:	2000038c 	.word	0x2000038c

000061ec <bt_conn_identity_resolved>:
{
    61ec:	b570      	push	{r4, r5, r6, lr}
    61ee:	4605      	mov	r5, r0
	if (conn->role == BT_HCI_ROLE_MASTER) {
    61f0:	78c3      	ldrb	r3, [r0, #3]
    61f2:	b923      	cbnz	r3, 61fe <bt_conn_identity_resolved+0x12>
		rpa = &conn->le.resp_addr;
    61f4:	f100 0656 	add.w	r6, r0, #86	; 0x56
	for (cb = callback_list; cb; cb = cb->_next) {
    61f8:	4b08      	ldr	r3, [pc, #32]	; (621c <bt_conn_identity_resolved+0x30>)
    61fa:	681c      	ldr	r4, [r3, #0]
    61fc:	e003      	b.n	6206 <bt_conn_identity_resolved+0x1a>
		rpa = &conn->le.init_addr;
    61fe:	f100 064f 	add.w	r6, r0, #79	; 0x4f
    6202:	e7f9      	b.n	61f8 <bt_conn_identity_resolved+0xc>
	for (cb = callback_list; cb; cb = cb->_next) {
    6204:	69a4      	ldr	r4, [r4, #24]
    6206:	b144      	cbz	r4, 621a <bt_conn_identity_resolved+0x2e>
		if (cb->identity_resolved) {
    6208:	6923      	ldr	r3, [r4, #16]
    620a:	2b00      	cmp	r3, #0
    620c:	d0fa      	beq.n	6204 <bt_conn_identity_resolved+0x18>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
    620e:	f105 0248 	add.w	r2, r5, #72	; 0x48
    6212:	4631      	mov	r1, r6
    6214:	4628      	mov	r0, r5
    6216:	4798      	blx	r3
    6218:	e7f4      	b.n	6204 <bt_conn_identity_resolved+0x18>
}
    621a:	bd70      	pop	{r4, r5, r6, pc}
    621c:	2000038c 	.word	0x2000038c

00006220 <bt_conn_le_start_encryption>:
{
    6220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6224:	4680      	mov	r8, r0
    6226:	4617      	mov	r7, r2
    6228:	461c      	mov	r4, r3
    622a:	9d08      	ldr	r5, [sp, #32]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_START_ENCRYPTION, sizeof(*cp));
    622c:	211c      	movs	r1, #28
    622e:	f242 0019 	movw	r0, #8217	; 0x2019
    6232:	f7fd ff59 	bl	40e8 <bt_hci_cmd_create>
	if (!buf) {
    6236:	b338      	cbz	r0, 6288 <bt_conn_le_start_encryption+0x68>
    6238:	4606      	mov	r6, r0
	cp = net_buf_add(buf, sizeof(*cp));
    623a:	211c      	movs	r1, #28
    623c:	3008      	adds	r0, #8
    623e:	f013 ffad 	bl	1a19c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    6242:	f8b8 2000 	ldrh.w	r2, [r8]
    6246:	4603      	mov	r3, r0
    6248:	f823 2b02 	strh.w	r2, [r3], #2
	cp->rand = rand;
    624c:	f8c0 7002 	str.w	r7, [r0, #2]
    6250:	605c      	str	r4, [r3, #4]
	cp->ediv = ediv;
    6252:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    6256:	8143      	strh	r3, [r0, #10]
	memcpy(cp->ltk, ltk, len);
    6258:	f100 040c 	add.w	r4, r0, #12
    625c:	462a      	mov	r2, r5
    625e:	9907      	ldr	r1, [sp, #28]
    6260:	4620      	mov	r0, r4
    6262:	f7fa f82d 	bl	2c0 <memcpy>
	if (len < sizeof(cp->ltk)) {
    6266:	2d0f      	cmp	r5, #15
    6268:	d907      	bls.n	627a <bt_conn_le_start_encryption+0x5a>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_START_ENCRYPTION, buf, NULL);
    626a:	2200      	movs	r2, #0
    626c:	4631      	mov	r1, r6
    626e:	f242 0019 	movw	r0, #8217	; 0x2019
    6272:	f7fd ff65 	bl	4140 <bt_hci_cmd_send_sync>
    6276:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memset(cp->ltk + len, 0, sizeof(cp->ltk) - len);
    627a:	f1c5 0210 	rsb	r2, r5, #16
    627e:	2100      	movs	r1, #0
    6280:	1960      	adds	r0, r4, r5
    6282:	f024 fbff 	bl	2aa84 <memset>
    6286:	e7f0      	b.n	626a <bt_conn_le_start_encryption+0x4a>
		return -ENOBUFS;
    6288:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    628c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00006290 <start_security>:
{
    6290:	b530      	push	{r4, r5, lr}
    6292:	b085      	sub	sp, #20
    6294:	4604      	mov	r4, r0
	switch (conn->role) {
    6296:	78c3      	ldrb	r3, [r0, #3]
    6298:	b123      	cbz	r3, 62a4 <start_security+0x14>
    629a:	2b01      	cmp	r3, #1
    629c:	d052      	beq.n	6344 <start_security+0xb4>
		return -EINVAL;
    629e:	f06f 0015 	mvn.w	r0, #21
    62a2:	e051      	b.n	6348 <start_security+0xb8>
		if (!conn->le.keys) {
    62a4:	6f03      	ldr	r3, [r0, #112]	; 0x70
    62a6:	b353      	cbz	r3, 62fe <start_security+0x6e>
		if (!conn->le.keys ||
    62a8:	6f23      	ldr	r3, [r4, #112]	; 0x70
    62aa:	2b00      	cmp	r3, #0
    62ac:	d036      	beq.n	631c <start_security+0x8c>
		    !(conn->le.keys->keys & (BT_KEYS_LTK | BT_KEYS_LTK_P256))) {
    62ae:	899a      	ldrh	r2, [r3, #12]
		if (!conn->le.keys ||
    62b0:	f012 0f24 	tst.w	r2, #36	; 0x24
    62b4:	d032      	beq.n	631c <start_security+0x8c>
		if (conn->required_sec_level > BT_SECURITY_MEDIUM &&
    62b6:	7a62      	ldrb	r2, [r4, #9]
    62b8:	2a02      	cmp	r2, #2
    62ba:	d833      	bhi.n	6324 <start_security+0x94>
		if (conn->required_sec_level > BT_SECURITY_HIGH &&
    62bc:	7a63      	ldrb	r3, [r4, #9]
    62be:	2b03      	cmp	r3, #3
    62c0:	d90d      	bls.n	62de <start_security+0x4e>
		    !atomic_test_bit(conn->le.keys->flags,
    62c2:	6f23      	ldr	r3, [r4, #112]	; 0x70
    62c4:	f3bf 8f5b 	dmb	ish
    62c8:	689b      	ldr	r3, [r3, #8]
    62ca:	f3bf 8f5b 	dmb	ish
		if (conn->required_sec_level > BT_SECURITY_HIGH &&
    62ce:	f013 0f01 	tst.w	r3, #1
    62d2:	d104      	bne.n	62de <start_security+0x4e>
		    !(conn->le.keys->keys & BT_KEYS_LTK_P256)) {
    62d4:	6f23      	ldr	r3, [r4, #112]	; 0x70
    62d6:	899b      	ldrh	r3, [r3, #12]
				     BT_KEYS_AUTHENTICATED) &&
    62d8:	f013 0f20 	tst.w	r3, #32
    62dc:	d02e      	beq.n	633c <start_security+0xac>
						   conn->le.keys->ltk.rand,
    62de:	6f23      	ldr	r3, [r4, #112]	; 0x70
						   conn->le.keys->ltk.val,
    62e0:	f103 021a 	add.w	r2, r3, #26
						   conn->le.keys->enc_size);
    62e4:	79dd      	ldrb	r5, [r3, #7]
		return bt_conn_le_start_encryption(conn,
    62e6:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
    62ea:	9502      	str	r5, [sp, #8]
    62ec:	9201      	str	r2, [sp, #4]
    62ee:	8b1b      	ldrh	r3, [r3, #24]
    62f0:	9300      	str	r3, [sp, #0]
    62f2:	4602      	mov	r2, r0
    62f4:	460b      	mov	r3, r1
    62f6:	4620      	mov	r0, r4
    62f8:	f7ff ff92 	bl	6220 <bt_conn_le_start_encryption>
    62fc:	e024      	b.n	6348 <start_security+0xb8>
						     &conn->le.dst);
    62fe:	f100 0548 	add.w	r5, r0, #72	; 0x48
			conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256,
    6302:	4629      	mov	r1, r5
    6304:	2020      	movs	r0, #32
    6306:	f006 f96d 	bl	c5e4 <bt_keys_find>
    630a:	6720      	str	r0, [r4, #112]	; 0x70
			if (!conn->le.keys) {
    630c:	2800      	cmp	r0, #0
    630e:	d1cb      	bne.n	62a8 <start_security+0x18>
				conn->le.keys = bt_keys_find(BT_KEYS_LTK,
    6310:	4629      	mov	r1, r5
    6312:	2004      	movs	r0, #4
    6314:	f006 f966 	bl	c5e4 <bt_keys_find>
    6318:	6720      	str	r0, [r4, #112]	; 0x70
    631a:	e7c5      	b.n	62a8 <start_security+0x18>
			return bt_smp_send_pairing_req(conn);
    631c:	4620      	mov	r0, r4
    631e:	f005 ff14 	bl	c14a <bt_smp_send_pairing_req>
    6322:	e011      	b.n	6348 <start_security+0xb8>
    6324:	f3bf 8f5b 	dmb	ish
    6328:	689b      	ldr	r3, [r3, #8]
    632a:	f3bf 8f5b 	dmb	ish
		if (conn->required_sec_level > BT_SECURITY_MEDIUM &&
    632e:	f013 0f01 	tst.w	r3, #1
    6332:	d1c3      	bne.n	62bc <start_security+0x2c>
			return bt_smp_send_pairing_req(conn);
    6334:	4620      	mov	r0, r4
    6336:	f005 ff08 	bl	c14a <bt_smp_send_pairing_req>
    633a:	e005      	b.n	6348 <start_security+0xb8>
			return bt_smp_send_pairing_req(conn);
    633c:	4620      	mov	r0, r4
    633e:	f005 ff04 	bl	c14a <bt_smp_send_pairing_req>
    6342:	e001      	b.n	6348 <start_security+0xb8>
		return bt_smp_send_security_req(conn);
    6344:	f005 feae 	bl	c0a4 <bt_smp_send_security_req>
}
    6348:	b005      	add	sp, #20
    634a:	bd30      	pop	{r4, r5, pc}

0000634c <bt_conn_security_changed>:
{
    634c:	b538      	push	{r3, r4, r5, lr}
    634e:	4605      	mov	r5, r0
	for (cb = callback_list; cb; cb = cb->_next) {
    6350:	4b06      	ldr	r3, [pc, #24]	; (636c <bt_conn_security_changed+0x20>)
    6352:	681c      	ldr	r4, [r3, #0]
    6354:	e000      	b.n	6358 <bt_conn_security_changed+0xc>
    6356:	69a4      	ldr	r4, [r4, #24]
    6358:	b134      	cbz	r4, 6368 <bt_conn_security_changed+0x1c>
		if (cb->security_changed) {
    635a:	6963      	ldr	r3, [r4, #20]
    635c:	2b00      	cmp	r3, #0
    635e:	d0fa      	beq.n	6356 <bt_conn_security_changed+0xa>
			cb->security_changed(conn, conn->sec_level);
    6360:	7a29      	ldrb	r1, [r5, #8]
    6362:	4628      	mov	r0, r5
    6364:	4798      	blx	r3
    6366:	e7f6      	b.n	6356 <bt_conn_security_changed+0xa>
}
    6368:	bd38      	pop	{r3, r4, r5, pc}
    636a:	bf00      	nop
    636c:	2000038c 	.word	0x2000038c

00006370 <bt_conn_security>:
	if (conn->state != BT_CONN_CONNECTED) {
    6370:	7b03      	ldrb	r3, [r0, #12]
    6372:	2b03      	cmp	r3, #3
    6374:	d112      	bne.n	639c <bt_conn_security+0x2c>
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
    6376:	7a03      	ldrb	r3, [r0, #8]
    6378:	428b      	cmp	r3, r1
    637a:	d212      	bcs.n	63a2 <bt_conn_security+0x32>
    637c:	7a43      	ldrb	r3, [r0, #9]
    637e:	4299      	cmp	r1, r3
    6380:	d801      	bhi.n	6386 <bt_conn_security+0x16>
		return 0;
    6382:	2300      	movs	r3, #0
    6384:	e00e      	b.n	63a4 <bt_conn_security+0x34>
{
    6386:	b510      	push	{r4, lr}
    6388:	4604      	mov	r4, r0
	conn->required_sec_level = sec;
    638a:	7241      	strb	r1, [r0, #9]
	err = start_security(conn);
    638c:	f7ff ff80 	bl	6290 <start_security>
	if (err) {
    6390:	4603      	mov	r3, r0
    6392:	b108      	cbz	r0, 6398 <bt_conn_security+0x28>
		conn->required_sec_level = conn->sec_level;
    6394:	7a22      	ldrb	r2, [r4, #8]
    6396:	7262      	strb	r2, [r4, #9]
}
    6398:	4618      	mov	r0, r3
    639a:	bd10      	pop	{r4, pc}
		return -ENOTCONN;
    639c:	f06f 037f 	mvn.w	r3, #127	; 0x7f
    63a0:	e000      	b.n	63a4 <bt_conn_security+0x34>
		return 0;
    63a2:	2300      	movs	r3, #0
}
    63a4:	4618      	mov	r0, r3
    63a6:	4770      	bx	lr

000063a8 <bt_conn_cb_register>:
	cb->_next = callback_list;
    63a8:	4b02      	ldr	r3, [pc, #8]	; (63b4 <bt_conn_cb_register+0xc>)
    63aa:	681a      	ldr	r2, [r3, #0]
    63ac:	6182      	str	r2, [r0, #24]
	callback_list = cb;
    63ae:	6018      	str	r0, [r3, #0]
    63b0:	4770      	bx	lr
    63b2:	bf00      	nop
    63b4:	2000038c 	.word	0x2000038c

000063b8 <bt_conn_recv>:
{
    63b8:	b570      	push	{r4, r5, r6, lr}
    63ba:	4605      	mov	r5, r0
    63bc:	460c      	mov	r4, r1
	switch (flags) {
    63be:	2a01      	cmp	r2, #1
    63c0:	d01a      	beq.n	63f8 <bt_conn_recv+0x40>
    63c2:	2a02      	cmp	r2, #2
    63c4:	d149      	bne.n	645a <bt_conn_recv+0xa2>
		hdr = (void *)buf->data;
    63c6:	688b      	ldr	r3, [r1, #8]
		len = sys_le16_to_cpu(hdr->len);
    63c8:	881e      	ldrh	r6, [r3, #0]
		if (conn->rx_len) {
    63ca:	89c3      	ldrh	r3, [r0, #14]
    63cc:	b97b      	cbnz	r3, 63ee <bt_conn_recv+0x36>
		conn->rx_len = (sizeof(*hdr) + len) - buf->len;
    63ce:	89a3      	ldrh	r3, [r4, #12]
    63d0:	1af3      	subs	r3, r6, r3
    63d2:	3304      	adds	r3, #4
    63d4:	b29b      	uxth	r3, r3
    63d6:	81eb      	strh	r3, [r5, #14]
		if (conn->rx_len) {
    63d8:	b963      	cbnz	r3, 63f4 <bt_conn_recv+0x3c>
	hdr = (void *)buf->data;
    63da:	68a3      	ldr	r3, [r4, #8]
	len = sys_le16_to_cpu(hdr->len);
    63dc:	881b      	ldrh	r3, [r3, #0]
	if (sizeof(*hdr) + len != buf->len) {
    63de:	3304      	adds	r3, #4
    63e0:	89a2      	ldrh	r2, [r4, #12]
    63e2:	4293      	cmp	r3, r2
    63e4:	d03f      	beq.n	6466 <bt_conn_recv+0xae>
		net_buf_unref(buf);
    63e6:	4620      	mov	r0, r4
    63e8:	f013 fe8c 	bl	1a104 <net_buf_unref>
		return;
    63ec:	bd70      	pop	{r4, r5, r6, pc}
			bt_conn_reset_rx_state(conn);
    63ee:	f7ff fe6b 	bl	60c8 <bt_conn_reset_rx_state>
    63f2:	e7ec      	b.n	63ce <bt_conn_recv+0x16>
			conn->rx = buf;
    63f4:	612c      	str	r4, [r5, #16]
			return;
    63f6:	bd70      	pop	{r4, r5, r6, pc}
		if (!conn->rx_len) {
    63f8:	89c3      	ldrh	r3, [r0, #14]
    63fa:	b1db      	cbz	r3, 6434 <bt_conn_recv+0x7c>
		if (buf->len > conn->rx_len) {
    63fc:	898e      	ldrh	r6, [r1, #12]
    63fe:	42b3      	cmp	r3, r6
    6400:	d31e      	bcc.n	6440 <bt_conn_recv+0x88>
		if (buf->len > net_buf_tailroom(conn->rx)) {
    6402:	6900      	ldr	r0, [r0, #16]
    6404:	3008      	adds	r0, #8
    6406:	f013 ff32 	bl	1a26e <net_buf_simple_tailroom>
    640a:	4286      	cmp	r6, r0
    640c:	d81e      	bhi.n	644c <bt_conn_recv+0x94>
		net_buf_add_mem(conn->rx, buf->data, buf->len);
    640e:	6928      	ldr	r0, [r5, #16]
    6410:	89a2      	ldrh	r2, [r4, #12]
    6412:	68a1      	ldr	r1, [r4, #8]
    6414:	3008      	adds	r0, #8
    6416:	f013 fec7 	bl	1a1a8 <net_buf_simple_add_mem>
		conn->rx_len -= buf->len;
    641a:	89a2      	ldrh	r2, [r4, #12]
    641c:	89eb      	ldrh	r3, [r5, #14]
    641e:	1a9b      	subs	r3, r3, r2
    6420:	81eb      	strh	r3, [r5, #14]
		net_buf_unref(buf);
    6422:	4620      	mov	r0, r4
    6424:	f013 fe6e 	bl	1a104 <net_buf_unref>
		if (conn->rx_len) {
    6428:	89eb      	ldrh	r3, [r5, #14]
    642a:	bb03      	cbnz	r3, 646e <bt_conn_recv+0xb6>
		buf = conn->rx;
    642c:	692c      	ldr	r4, [r5, #16]
		conn->rx = NULL;
    642e:	612b      	str	r3, [r5, #16]
		conn->rx_len = 0;
    6430:	81eb      	strh	r3, [r5, #14]
		break;
    6432:	e7d2      	b.n	63da <bt_conn_recv+0x22>
			bt_conn_reset_rx_state(conn);
    6434:	f7ff fe48 	bl	60c8 <bt_conn_reset_rx_state>
			net_buf_unref(buf);
    6438:	4620      	mov	r0, r4
    643a:	f013 fe63 	bl	1a104 <net_buf_unref>
			return;
    643e:	bd70      	pop	{r4, r5, r6, pc}
			bt_conn_reset_rx_state(conn);
    6440:	f7ff fe42 	bl	60c8 <bt_conn_reset_rx_state>
			net_buf_unref(buf);
    6444:	4620      	mov	r0, r4
    6446:	f013 fe5d 	bl	1a104 <net_buf_unref>
			return;
    644a:	bd70      	pop	{r4, r5, r6, pc}
			bt_conn_reset_rx_state(conn);
    644c:	4628      	mov	r0, r5
    644e:	f7ff fe3b 	bl	60c8 <bt_conn_reset_rx_state>
			net_buf_unref(buf);
    6452:	4620      	mov	r0, r4
    6454:	f013 fe56 	bl	1a104 <net_buf_unref>
			return;
    6458:	bd70      	pop	{r4, r5, r6, pc}
		bt_conn_reset_rx_state(conn);
    645a:	f7ff fe35 	bl	60c8 <bt_conn_reset_rx_state>
		net_buf_unref(buf);
    645e:	4620      	mov	r0, r4
    6460:	f013 fe50 	bl	1a104 <net_buf_unref>
		return;
    6464:	bd70      	pop	{r4, r5, r6, pc}
	bt_l2cap_recv(conn, buf);
    6466:	4621      	mov	r1, r4
    6468:	4628      	mov	r0, r5
    646a:	f001 fd06 	bl	7e7a <bt_l2cap_recv>
    646e:	bd70      	pop	{r4, r5, r6, pc}

00006470 <bt_conn_send_cb>:
{
    6470:	b570      	push	{r4, r5, r6, lr}
    6472:	4605      	mov	r5, r0
    6474:	460c      	mov	r4, r1
    6476:	4616      	mov	r6, r2
	pool = net_buf_pool_get(buf->pool_id);
    6478:	7988      	ldrb	r0, [r1, #6]
    647a:	f013 fdc9 	bl	1a010 <net_buf_pool_get>
	if (pool->user_data_size < BT_BUF_USER_DATA_MIN) {
    647e:	8ac3      	ldrh	r3, [r0, #22]
    6480:	2b03      	cmp	r3, #3
    6482:	d911      	bls.n	64a8 <bt_conn_send_cb+0x38>
	if (conn->state != BT_CONN_CONNECTED) {
    6484:	7b2b      	ldrb	r3, [r5, #12]
    6486:	2b03      	cmp	r3, #3
    6488:	d114      	bne.n	64b4 <bt_conn_send_cb+0x44>
    648a:	f104 0310 	add.w	r3, r4, #16
    648e:	89e2      	ldrh	r2, [r4, #14]
    6490:	4413      	add	r3, r2
    6492:	3303      	adds	r3, #3
    6494:	f023 0303 	bic.w	r3, r3, #3
	conn_tx(buf)->cb = cb;
    6498:	601e      	str	r6, [r3, #0]
	net_buf_put(&conn->tx_queue, buf);
    649a:	4621      	mov	r1, r4
    649c:	f105 002c 	add.w	r0, r5, #44	; 0x2c
    64a0:	f013 fe22 	bl	1a0e8 <net_buf_put>
	return 0;
    64a4:	2000      	movs	r0, #0
}
    64a6:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
    64a8:	4620      	mov	r0, r4
    64aa:	f013 fe2b 	bl	1a104 <net_buf_unref>
		return -EINVAL;
    64ae:	f06f 0015 	mvn.w	r0, #21
    64b2:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
    64b4:	4620      	mov	r0, r4
    64b6:	f013 fe25 	bl	1a104 <net_buf_unref>
		return -ENOTCONN;
    64ba:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    64be:	bd70      	pop	{r4, r5, r6, pc}

000064c0 <bt_conn_notify_tx>:
{
    64c0:	b538      	push	{r3, r4, r5, lr}
    64c2:	4605      	mov	r5, r0
	while ((tx = k_fifo_get(&conn->tx_notify, K_NO_WAIT))) {
    64c4:	e002      	b.n	64cc <bt_conn_notify_tx+0xc>
		tx_free(tx);
    64c6:	4620      	mov	r0, r4
    64c8:	f7ff fd9e 	bl	6008 <tx_free>
	while ((tx = k_fifo_get(&conn->tx_notify, K_NO_WAIT))) {
    64cc:	2100      	movs	r1, #0
    64ce:	f105 001c 	add.w	r0, r5, #28
    64d2:	f021 fdf3 	bl	280bc <k_queue_get>
    64d6:	4604      	mov	r4, r0
    64d8:	b128      	cbz	r0, 64e6 <bt_conn_notify_tx+0x26>
		if (tx->cb) {
    64da:	6863      	ldr	r3, [r4, #4]
    64dc:	2b00      	cmp	r3, #0
    64de:	d0f2      	beq.n	64c6 <bt_conn_notify_tx+0x6>
			tx->cb(conn);
    64e0:	4628      	mov	r0, r5
    64e2:	4798      	blx	r3
    64e4:	e7ef      	b.n	64c6 <bt_conn_notify_tx+0x6>
}
    64e6:	bd38      	pop	{r3, r4, r5, pc}

000064e8 <notify_tx>:
{
    64e8:	b510      	push	{r4, lr}
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    64ea:	2400      	movs	r4, #0
    64ec:	b104      	cbz	r4, 64f0 <notify_tx+0x8>
}
    64ee:	bd10      	pop	{r4, pc}
		if (!atomic_get(&conns[i].ref)) {
    64f0:	239c      	movs	r3, #156	; 0x9c
    64f2:	fb03 f304 	mul.w	r3, r3, r4
    64f6:	3340      	adds	r3, #64	; 0x40
    64f8:	4a0b      	ldr	r2, [pc, #44]	; (6528 <notify_tx+0x40>)
    64fa:	4413      	add	r3, r2
    64fc:	f3bf 8f5b 	dmb	ish
    6500:	685b      	ldr	r3, [r3, #4]
    6502:	f3bf 8f5b 	dmb	ish
    6506:	b13b      	cbz	r3, 6518 <notify_tx+0x30>
		if (conns[i].state == BT_CONN_CONNECTED ||
    6508:	239c      	movs	r3, #156	; 0x9c
    650a:	fb03 2304 	mla	r3, r3, r4, r2
    650e:	7b1b      	ldrb	r3, [r3, #12]
    6510:	3b03      	subs	r3, #3
    6512:	b2db      	uxtb	r3, r3
    6514:	2b01      	cmp	r3, #1
    6516:	d901      	bls.n	651c <notify_tx+0x34>
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    6518:	3401      	adds	r4, #1
    651a:	e7e7      	b.n	64ec <notify_tx+0x4>
			bt_conn_notify_tx(&conns[i]);
    651c:	209c      	movs	r0, #156	; 0x9c
    651e:	fb00 2004 	mla	r0, r0, r4, r2
    6522:	f7ff ffcd 	bl	64c0 <bt_conn_notify_tx>
    6526:	e7f7      	b.n	6518 <notify_tx+0x30>
    6528:	200003a0 	.word	0x200003a0

0000652c <send_frag>:
{
    652c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6530:	4606      	mov	r6, r0
    6532:	460d      	mov	r5, r1
    6534:	4690      	mov	r8, r2
    6536:	461c      	mov	r4, r3
	k_sem_take(bt_conn_get_pkts(conn), K_FOREVER);
    6538:	f7ff fe00 	bl	613c <bt_conn_get_pkts>
    653c:	4607      	mov	r7, r0
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    653e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    6542:	f022 f93d 	bl	287c0 <_impl_k_sem_take>
	notify_tx();
    6546:	f7ff ffcf 	bl	64e8 <notify_tx>
	if (conn->state != BT_CONN_CONNECTED) {
    654a:	7b33      	ldrb	r3, [r6, #12]
    654c:	2b03      	cmp	r3, #3
    654e:	d006      	beq.n	655e <send_frag+0x32>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    6550:	4638      	mov	r0, r7
    6552:	f022 f922 	bl	2879a <_impl_k_sem_give>
	if (always_consume) {
    6556:	bb4c      	cbnz	r4, 65ac <send_frag+0x80>
}
    6558:	4620      	mov	r0, r4
    655a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	hdr = net_buf_push(buf, sizeof(*hdr));
    655e:	2104      	movs	r1, #4
    6560:	f105 0008 	add.w	r0, r5, #8
    6564:	f013 fe51 	bl	1a20a <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    6568:	f9b6 3000 	ldrsh.w	r3, [r6]
    656c:	ea43 3808 	orr.w	r8, r3, r8, lsl #12
    6570:	f8a0 8000 	strh.w	r8, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    6574:	89ab      	ldrh	r3, [r5, #12]
    6576:	3b04      	subs	r3, #4
    6578:	8043      	strh	r3, [r0, #2]
    657a:	f105 0310 	add.w	r3, r5, #16
    657e:	89ea      	ldrh	r2, [r5, #14]
    6580:	4413      	add	r3, r2
    6582:	3303      	adds	r3, #3
    6584:	f023 0303 	bic.w	r3, r3, #3
	cb = conn_tx(buf)->cb;
    6588:	6819      	ldr	r1, [r3, #0]
    658a:	2202      	movs	r2, #2
    658c:	701a      	strb	r2, [r3, #0]
	node = add_pending_tx(conn, cb);
    658e:	4630      	mov	r0, r6
    6590:	f7ff fd48 	bl	6024 <add_pending_tx>
    6594:	4680      	mov	r8, r0
	err = bt_send(buf);
    6596:	4628      	mov	r0, r5
    6598:	f7fe fafa 	bl	4b90 <bt_send>
	if (err) {
    659c:	b908      	cbnz	r0, 65a2 <send_frag+0x76>
	return true;
    659e:	2401      	movs	r4, #1
    65a0:	e7da      	b.n	6558 <send_frag+0x2c>
		remove_pending_tx(conn, node);
    65a2:	4641      	mov	r1, r8
    65a4:	4630      	mov	r0, r6
    65a6:	f7ff fd5f 	bl	6068 <remove_pending_tx>
		goto fail;
    65aa:	e7d1      	b.n	6550 <send_frag+0x24>
		net_buf_unref(buf);
    65ac:	4628      	mov	r0, r5
    65ae:	f013 fda9 	bl	1a104 <net_buf_unref>
	return false;
    65b2:	2400      	movs	r4, #0
    65b4:	e7d0      	b.n	6558 <send_frag+0x2c>
	...

000065b8 <bt_conn_add_le>:
{
    65b8:	b538      	push	{r3, r4, r5, lr}
    65ba:	4605      	mov	r5, r0
	struct bt_conn *conn = conn_new();
    65bc:	f7ff fd90 	bl	60e0 <conn_new>
	if (!conn) {
    65c0:	4604      	mov	r4, r0
    65c2:	b1a0      	cbz	r0, 65ee <bt_conn_add_le+0x36>
    65c4:	2207      	movs	r2, #7
    65c6:	4629      	mov	r1, r5
    65c8:	3048      	adds	r0, #72	; 0x48
    65ca:	f7f9 fe79 	bl	2c0 <memcpy>
	conn->sec_level = BT_SECURITY_LOW;
    65ce:	2301      	movs	r3, #1
    65d0:	7223      	strb	r3, [r4, #8]
	conn->required_sec_level = BT_SECURITY_LOW;
    65d2:	7263      	strb	r3, [r4, #9]
	conn->type = BT_CONN_TYPE_LE;
    65d4:	2300      	movs	r3, #0
    65d6:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
    65d8:	2318      	movs	r3, #24
    65da:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;
    65de:	2328      	movs	r3, #40	; 0x28
    65e0:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
	k_delayed_work_init(&conn->le.update_work, le_conn_update);
    65e4:	4903      	ldr	r1, [pc, #12]	; (65f4 <bt_conn_add_le+0x3c>)
    65e6:	f104 0074 	add.w	r0, r4, #116	; 0x74
    65ea:	f022 fea7 	bl	2933c <k_delayed_work_init>
}
    65ee:	4620      	mov	r0, r4
    65f0:	bd38      	pop	{r3, r4, r5, pc}
    65f2:	bf00      	nop
    65f4:	00006bf5 	.word	0x00006bf5

000065f8 <bt_conn_addr_le_cmp>:
{
    65f8:	b538      	push	{r3, r4, r5, lr}
    65fa:	4604      	mov	r4, r0
    65fc:	460d      	mov	r5, r1
	return memcmp(a, b, sizeof(*a));
    65fe:	2207      	movs	r2, #7
    6600:	f100 0148 	add.w	r1, r0, #72	; 0x48
    6604:	4628      	mov	r0, r5
    6606:	f024 f9a9 	bl	2a95c <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
    660a:	4603      	mov	r3, r0
    660c:	b140      	cbz	r0, 6620 <bt_conn_addr_le_cmp+0x28>
	if (conn->role == BT_HCI_ROLE_MASTER) {
    660e:	78e3      	ldrb	r3, [r4, #3]
    6610:	b143      	cbz	r3, 6624 <bt_conn_addr_le_cmp+0x2c>
    6612:	2207      	movs	r2, #7
    6614:	f104 014f 	add.w	r1, r4, #79	; 0x4f
    6618:	4628      	mov	r0, r5
    661a:	f024 f99f 	bl	2a95c <memcmp>
    661e:	4603      	mov	r3, r0
}
    6620:	4618      	mov	r0, r3
    6622:	bd38      	pop	{r3, r4, r5, pc}
    6624:	2207      	movs	r2, #7
    6626:	f104 0156 	add.w	r1, r4, #86	; 0x56
    662a:	4628      	mov	r0, r5
    662c:	f024 f996 	bl	2a95c <memcmp>
    6630:	4603      	mov	r3, r0
		return bt_addr_le_cmp(peer, &conn->le.resp_addr);
    6632:	e7f5      	b.n	6620 <bt_conn_addr_le_cmp+0x28>

00006634 <bt_conn_ref>:
	atomic_inc(&conn->ref);
    6634:	f100 0344 	add.w	r3, r0, #68	; 0x44
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    6638:	f3bf 8f5b 	dmb	ish
    663c:	e853 2f00 	ldrex	r2, [r3]
    6640:	3201      	adds	r2, #1
    6642:	e843 2100 	strex	r1, r2, [r3]
    6646:	2900      	cmp	r1, #0
    6648:	d1f8      	bne.n	663c <bt_conn_ref+0x8>
    664a:	f3bf 8f5b 	dmb	ish
}
    664e:	4770      	bx	lr

00006650 <bt_conn_lookup_handle>:
{
    6650:	b508      	push	{r3, lr}
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    6652:	2300      	movs	r3, #0
    6654:	b10b      	cbz	r3, 665a <bt_conn_lookup_handle+0xa>
	return NULL;
    6656:	2000      	movs	r0, #0
}
    6658:	bd08      	pop	{r3, pc}
		if (!atomic_get(&conns[i].ref)) {
    665a:	229c      	movs	r2, #156	; 0x9c
    665c:	fb02 f203 	mul.w	r2, r2, r3
    6660:	3240      	adds	r2, #64	; 0x40
    6662:	490f      	ldr	r1, [pc, #60]	; (66a0 <bt_conn_lookup_handle+0x50>)
    6664:	440a      	add	r2, r1
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    6666:	f3bf 8f5b 	dmb	ish
    666a:	6852      	ldr	r2, [r2, #4]
    666c:	f3bf 8f5b 	dmb	ish
    6670:	b13a      	cbz	r2, 6682 <bt_conn_lookup_handle+0x32>
		if (conns[i].state != BT_CONN_CONNECTED &&
    6672:	229c      	movs	r2, #156	; 0x9c
    6674:	fb02 1203 	mla	r2, r2, r3, r1
    6678:	7b12      	ldrb	r2, [r2, #12]
    667a:	3a03      	subs	r2, #3
    667c:	b2d2      	uxtb	r2, r2
    667e:	2a01      	cmp	r2, #1
    6680:	d901      	bls.n	6686 <bt_conn_lookup_handle+0x36>
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    6682:	3301      	adds	r3, #1
    6684:	e7e6      	b.n	6654 <bt_conn_lookup_handle+0x4>
		if (conns[i].handle == handle) {
    6686:	229c      	movs	r2, #156	; 0x9c
    6688:	fb02 f203 	mul.w	r2, r2, r3
    668c:	5a8a      	ldrh	r2, [r1, r2]
    668e:	4282      	cmp	r2, r0
    6690:	d1f7      	bne.n	6682 <bt_conn_lookup_handle+0x32>
			return bt_conn_ref(&conns[i]);
    6692:	209c      	movs	r0, #156	; 0x9c
    6694:	fb00 1003 	mla	r0, r0, r3, r1
    6698:	f7ff ffcc 	bl	6634 <bt_conn_ref>
    669c:	bd08      	pop	{r3, pc}
    669e:	bf00      	nop
    66a0:	200003a0 	.word	0x200003a0

000066a4 <bt_conn_lookup_addr_le>:
{
    66a4:	b570      	push	{r4, r5, r6, lr}
    66a6:	4605      	mov	r5, r0
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    66a8:	2400      	movs	r4, #0
    66aa:	b10c      	cbz	r4, 66b0 <bt_conn_lookup_addr_le+0xc>
	return NULL;
    66ac:	2000      	movs	r0, #0
}
    66ae:	bd70      	pop	{r4, r5, r6, pc}
		if (!atomic_get(&conns[i].ref)) {
    66b0:	239c      	movs	r3, #156	; 0x9c
    66b2:	fb03 f304 	mul.w	r3, r3, r4
    66b6:	3340      	adds	r3, #64	; 0x40
    66b8:	4a0d      	ldr	r2, [pc, #52]	; (66f0 <bt_conn_lookup_addr_le+0x4c>)
    66ba:	4413      	add	r3, r2
    66bc:	f3bf 8f5b 	dmb	ish
    66c0:	685b      	ldr	r3, [r3, #4]
    66c2:	f3bf 8f5b 	dmb	ish
    66c6:	b123      	cbz	r3, 66d2 <bt_conn_lookup_addr_le+0x2e>
		if (conns[i].type != BT_CONN_TYPE_LE) {
    66c8:	239c      	movs	r3, #156	; 0x9c
    66ca:	fb03 2304 	mla	r3, r3, r4, r2
    66ce:	789b      	ldrb	r3, [r3, #2]
    66d0:	b10b      	cbz	r3, 66d6 <bt_conn_lookup_addr_le+0x32>
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    66d2:	3401      	adds	r4, #1
    66d4:	e7e9      	b.n	66aa <bt_conn_lookup_addr_le+0x6>
		if (!bt_conn_addr_le_cmp(&conns[i], peer)) {
    66d6:	269c      	movs	r6, #156	; 0x9c
    66d8:	fb06 2604 	mla	r6, r6, r4, r2
    66dc:	4629      	mov	r1, r5
    66de:	4630      	mov	r0, r6
    66e0:	f7ff ff8a 	bl	65f8 <bt_conn_addr_le_cmp>
    66e4:	2800      	cmp	r0, #0
    66e6:	d1f4      	bne.n	66d2 <bt_conn_lookup_addr_le+0x2e>
			return bt_conn_ref(&conns[i]);
    66e8:	4630      	mov	r0, r6
    66ea:	f7ff ffa3 	bl	6634 <bt_conn_ref>
    66ee:	bd70      	pop	{r4, r5, r6, pc}
    66f0:	200003a0 	.word	0x200003a0

000066f4 <bt_conn_lookup_state_le>:
{
    66f4:	b570      	push	{r4, r5, r6, lr}
    66f6:	4605      	mov	r5, r0
    66f8:	460e      	mov	r6, r1
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    66fa:	2400      	movs	r4, #0
    66fc:	b10c      	cbz	r4, 6702 <bt_conn_lookup_state_le+0xe>
	return NULL;
    66fe:	2000      	movs	r0, #0
}
    6700:	bd70      	pop	{r4, r5, r6, pc}
		if (!atomic_get(&conns[i].ref)) {
    6702:	239c      	movs	r3, #156	; 0x9c
    6704:	fb03 f304 	mul.w	r3, r3, r4
    6708:	3340      	adds	r3, #64	; 0x40
    670a:	4a12      	ldr	r2, [pc, #72]	; (6754 <bt_conn_lookup_state_le+0x60>)
    670c:	4413      	add	r3, r2
    670e:	f3bf 8f5b 	dmb	ish
    6712:	685b      	ldr	r3, [r3, #4]
    6714:	f3bf 8f5b 	dmb	ish
    6718:	b19b      	cbz	r3, 6742 <bt_conn_lookup_state_le+0x4e>
		if (conns[i].type != BT_CONN_TYPE_LE) {
    671a:	239c      	movs	r3, #156	; 0x9c
    671c:	fb03 2304 	mla	r3, r3, r4, r2
    6720:	789b      	ldrb	r3, [r3, #2]
    6722:	b973      	cbnz	r3, 6742 <bt_conn_lookup_state_le+0x4e>
		if (peer && bt_conn_addr_le_cmp(&conns[i], peer)) {
    6724:	b135      	cbz	r5, 6734 <bt_conn_lookup_state_le+0x40>
    6726:	4629      	mov	r1, r5
    6728:	209c      	movs	r0, #156	; 0x9c
    672a:	fb00 2004 	mla	r0, r0, r4, r2
    672e:	f7ff ff63 	bl	65f8 <bt_conn_addr_le_cmp>
    6732:	b930      	cbnz	r0, 6742 <bt_conn_lookup_state_le+0x4e>
		if (conns[i].state == state) {
    6734:	239c      	movs	r3, #156	; 0x9c
    6736:	4a07      	ldr	r2, [pc, #28]	; (6754 <bt_conn_lookup_state_le+0x60>)
    6738:	fb03 2304 	mla	r3, r3, r4, r2
    673c:	7b1b      	ldrb	r3, [r3, #12]
    673e:	42b3      	cmp	r3, r6
    6740:	d001      	beq.n	6746 <bt_conn_lookup_state_le+0x52>
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    6742:	3401      	adds	r4, #1
    6744:	e7da      	b.n	66fc <bt_conn_lookup_state_le+0x8>
			return bt_conn_ref(&conns[i]);
    6746:	209c      	movs	r0, #156	; 0x9c
    6748:	fb00 2004 	mla	r0, r0, r4, r2
    674c:	f7ff ff72 	bl	6634 <bt_conn_ref>
    6750:	bd70      	pop	{r4, r5, r6, pc}
    6752:	bf00      	nop
    6754:	200003a0 	.word	0x200003a0

00006758 <bt_conn_unref>:
	atomic_dec(&conn->ref);
    6758:	3044      	adds	r0, #68	; 0x44
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    675a:	f3bf 8f5b 	dmb	ish
    675e:	e850 3f00 	ldrex	r3, [r0]
    6762:	3b01      	subs	r3, #1
    6764:	e840 3200 	strex	r2, r3, [r0]
    6768:	2a00      	cmp	r2, #0
    676a:	d1f8      	bne.n	675e <bt_conn_unref+0x6>
    676c:	f3bf 8f5b 	dmb	ish
    6770:	4770      	bx	lr

00006772 <conn_cleanup>:
{
    6772:	b510      	push	{r4, lr}
    6774:	4604      	mov	r4, r0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
    6776:	e002      	b.n	677e <conn_cleanup+0xc>
		net_buf_unref(buf);
    6778:	4618      	mov	r0, r3
    677a:	f013 fcc3 	bl	1a104 <net_buf_unref>
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
    677e:	2100      	movs	r1, #0
    6780:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    6784:	f013 fc91 	bl	1a0aa <net_buf_get>
    6788:	4603      	mov	r3, r0
    678a:	2800      	cmp	r0, #0
    678c:	d1f4      	bne.n	6778 <conn_cleanup+0x6>
	bt_conn_notify_tx(conn);
    678e:	4620      	mov	r0, r4
    6790:	f7ff fe96 	bl	64c0 <bt_conn_notify_tx>
	bt_conn_reset_rx_state(conn);
    6794:	4620      	mov	r0, r4
    6796:	f7ff fc97 	bl	60c8 <bt_conn_reset_rx_state>
	bt_conn_unref(conn);
    679a:	4620      	mov	r0, r4
    679c:	f7ff ffdc 	bl	6758 <bt_conn_unref>
    67a0:	bd10      	pop	{r4, pc}
	...

000067a4 <bt_conn_prepare_events>:
{
    67a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    67a8:	4606      	mov	r6, r0
	conn_change.signaled = 0;
    67aa:	4b30      	ldr	r3, [pc, #192]	; (686c <bt_conn_prepare_events+0xc8>)
    67ac:	2400      	movs	r4, #0
    67ae:	609c      	str	r4, [r3, #8]
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    67b0:	4622      	mov	r2, r4
    67b2:	2101      	movs	r1, #1
    67b4:	f021 f93c 	bl	27a30 <k_poll_event_init>
    67b8:	2501      	movs	r5, #1
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    67ba:	b114      	cbz	r4, 67c2 <bt_conn_prepare_events+0x1e>
}
    67bc:	4628      	mov	r0, r5
    67be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = &conns[i];
    67c2:	4a2b      	ldr	r2, [pc, #172]	; (6870 <bt_conn_prepare_events+0xcc>)
    67c4:	239c      	movs	r3, #156	; 0x9c
    67c6:	fb03 f304 	mul.w	r3, r3, r4
    67ca:	18d0      	adds	r0, r2, r3
		if (!atomic_get(&conn->ref)) {
    67cc:	3340      	adds	r3, #64	; 0x40
    67ce:	4413      	add	r3, r2
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    67d0:	f3bf 8f5b 	dmb	ish
    67d4:	685b      	ldr	r3, [r3, #4]
    67d6:	f3bf 8f5b 	dmb	ish
    67da:	b143      	cbz	r3, 67ee <bt_conn_prepare_events+0x4a>
		if (conn->state == BT_CONN_DISCONNECTED &&
    67dc:	7b03      	ldrb	r3, [r0, #12]
    67de:	b143      	cbz	r3, 67f2 <bt_conn_prepare_events+0x4e>
		if (conn->state != BT_CONN_CONNECTED) {
    67e0:	239c      	movs	r3, #156	; 0x9c
    67e2:	4a23      	ldr	r2, [pc, #140]	; (6870 <bt_conn_prepare_events+0xcc>)
    67e4:	fb03 2304 	mla	r3, r3, r4, r2
    67e8:	7b1b      	ldrb	r3, [r3, #12]
    67ea:	2b03      	cmp	r3, #3
    67ec:	d015      	beq.n	681a <bt_conn_prepare_events+0x76>
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    67ee:	3401      	adds	r4, #1
    67f0:	e7e3      	b.n	67ba <bt_conn_prepare_events+0x16>
		    atomic_test_and_clear_bit(conn->flags, BT_CONN_CLEANUP)) {
    67f2:	4603      	mov	r3, r0
    67f4:	3304      	adds	r3, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    67f6:	f3bf 8f5b 	dmb	ish
    67fa:	e853 2f00 	ldrex	r2, [r3]
    67fe:	f022 0140 	bic.w	r1, r2, #64	; 0x40
    6802:	e843 1700 	strex	r7, r1, [r3]
    6806:	2f00      	cmp	r7, #0
    6808:	d1f7      	bne.n	67fa <bt_conn_prepare_events+0x56>
    680a:	f3bf 8f5b 	dmb	ish
		if (conn->state == BT_CONN_DISCONNECTED &&
    680e:	f012 0f40 	tst.w	r2, #64	; 0x40
    6812:	d0e5      	beq.n	67e0 <bt_conn_prepare_events+0x3c>
			conn_cleanup(conn);
    6814:	f7ff ffad 	bl	6772 <conn_cleanup>
			continue;
    6818:	e7e9      	b.n	67ee <bt_conn_prepare_events+0x4a>
		k_poll_event_init(&events[ev_count],
    681a:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    681e:	ea4f 0883 	mov.w	r8, r3, lsl #2
    6822:	44b0      	add	r8, r6
				  &conn->tx_notify);
    6824:	4691      	mov	r9, r2
    6826:	279c      	movs	r7, #156	; 0x9c
    6828:	fb07 f704 	mul.w	r7, r7, r4
    682c:	f107 0318 	add.w	r3, r7, #24
    6830:	4413      	add	r3, r2
		k_poll_event_init(&events[ev_count],
    6832:	3304      	adds	r3, #4
    6834:	2200      	movs	r2, #0
    6836:	2104      	movs	r1, #4
    6838:	4640      	mov	r0, r8
    683a:	f021 f8f9 	bl	27a30 <k_poll_event_init>
		events[ev_count++].tag = BT_EVENT_CONN_TX_NOTIFY;
    683e:	1c6b      	adds	r3, r5, #1
    6840:	2201      	movs	r2, #1
    6842:	f888 200c 	strb.w	r2, [r8, #12]
		k_poll_event_init(&events[ev_count],
    6846:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    684a:	ea4f 0883 	mov.w	r8, r3, lsl #2
    684e:	44b0      	add	r8, r6
				  &conn->tx_queue);
    6850:	f107 0328 	add.w	r3, r7, #40	; 0x28
    6854:	444b      	add	r3, r9
		k_poll_event_init(&events[ev_count],
    6856:	3304      	adds	r3, #4
    6858:	2200      	movs	r2, #0
    685a:	2104      	movs	r1, #4
    685c:	4640      	mov	r0, r8
    685e:	f021 f8e7 	bl	27a30 <k_poll_event_init>
		events[ev_count++].tag = BT_EVENT_CONN_TX_QUEUE;
    6862:	3502      	adds	r5, #2
    6864:	2302      	movs	r3, #2
    6866:	f888 300c 	strb.w	r3, [r8, #12]
    686a:	e7c0      	b.n	67ee <bt_conn_prepare_events+0x4a>
    686c:	2000b940 	.word	0x2000b940
    6870:	200003a0 	.word	0x200003a0

00006874 <bt_conn_set_state>:
{
    6874:	b538      	push	{r3, r4, r5, lr}
	if (conn->state == state) {
    6876:	7b05      	ldrb	r5, [r0, #12]
    6878:	428d      	cmp	r5, r1
    687a:	d00a      	beq.n	6892 <bt_conn_set_state+0x1e>
    687c:	4604      	mov	r4, r0
	conn->state = state;
    687e:	7301      	strb	r1, [r0, #12]
	switch (old_state) {
    6880:	b145      	cbz	r5, 6894 <bt_conn_set_state+0x20>
    6882:	2d02      	cmp	r5, #2
    6884:	d009      	beq.n	689a <bt_conn_set_state+0x26>
	switch (conn->state) {
    6886:	7b23      	ldrb	r3, [r4, #12]
    6888:	2b02      	cmp	r3, #2
    688a:	d068      	beq.n	695e <bt_conn_set_state+0xea>
    688c:	2b03      	cmp	r3, #3
    688e:	d00b      	beq.n	68a8 <bt_conn_set_state+0x34>
    6890:	b31b      	cbz	r3, 68da <bt_conn_set_state+0x66>
    6892:	bd38      	pop	{r3, r4, r5, pc}
		bt_conn_ref(conn);
    6894:	f7ff fece 	bl	6634 <bt_conn_ref>
		break;
    6898:	e7f5      	b.n	6886 <bt_conn_set_state+0x12>
		    conn->type == BT_CONN_TYPE_LE) {
    689a:	7883      	ldrb	r3, [r0, #2]
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    689c:	2b00      	cmp	r3, #0
    689e:	d1f2      	bne.n	6886 <bt_conn_set_state+0x12>
			k_delayed_work_cancel(&conn->le.update_work);
    68a0:	3074      	adds	r0, #116	; 0x74
    68a2:	f022 fd69 	bl	29378 <k_delayed_work_cancel>
    68a6:	e7ee      	b.n	6886 <bt_conn_set_state+0x12>
		if (conn->type == BT_CONN_TYPE_SCO) {
    68a8:	78a3      	ldrb	r3, [r4, #2]
    68aa:	2b02      	cmp	r3, #2
    68ac:	d0f1      	beq.n	6892 <bt_conn_set_state+0x1e>
		k_fifo_init(&conn->tx_queue);
    68ae:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    68b2:	f021 fba8 	bl	28006 <k_queue_init>
		k_fifo_init(&conn->tx_notify);
    68b6:	f104 001c 	add.w	r0, r4, #28
    68ba:	f021 fba4 	bl	28006 <k_queue_init>
		k_poll_signal(&conn_change, 0);
    68be:	2100      	movs	r1, #0
    68c0:	482d      	ldr	r0, [pc, #180]	; (6978 <bt_conn_set_state+0x104>)
    68c2:	f021 fb41 	bl	27f48 <k_poll_signal>
	list->head = NULL;
    68c6:	2300      	movs	r3, #0
    68c8:	63e3      	str	r3, [r4, #60]	; 0x3c
	list->tail = NULL;
    68ca:	6423      	str	r3, [r4, #64]	; 0x40
		bt_l2cap_connected(conn);
    68cc:	4620      	mov	r0, r4
    68ce:	f001 f87d 	bl	79cc <bt_l2cap_connected>
		notify_connected(conn);
    68d2:	4620      	mov	r0, r4
    68d4:	f7ff fb74 	bl	5fc0 <notify_connected>
		break;
    68d8:	bd38      	pop	{r3, r4, r5, pc}
		if (conn->type == BT_CONN_TYPE_SCO) {
    68da:	78a3      	ldrb	r3, [r4, #2]
    68dc:	2b02      	cmp	r3, #2
    68de:	d00d      	beq.n	68fc <bt_conn_set_state+0x88>
		if (old_state == BT_CONN_CONNECTED ||
    68e0:	1eeb      	subs	r3, r5, #3
    68e2:	b2db      	uxtb	r3, r3
    68e4:	2b01      	cmp	r3, #1
    68e6:	d90d      	bls.n	6904 <bt_conn_set_state+0x90>
		} else if (old_state == BT_CONN_CONNECT) {
    68e8:	2d02      	cmp	r5, #2
    68ea:	d02d      	beq.n	6948 <bt_conn_set_state+0xd4>
		} else if (old_state == BT_CONN_CONNECT_SCAN) {
    68ec:	2d01      	cmp	r5, #1
    68ee:	d1d0      	bne.n	6892 <bt_conn_set_state+0x1e>
			if (conn->err) {
    68f0:	7ae3      	ldrb	r3, [r4, #11]
    68f2:	bb83      	cbnz	r3, 6956 <bt_conn_set_state+0xe2>
			bt_conn_unref(conn);
    68f4:	4620      	mov	r0, r4
    68f6:	f7ff ff2f 	bl	6758 <bt_conn_unref>
    68fa:	bd38      	pop	{r3, r4, r5, pc}
			bt_conn_unref(conn);
    68fc:	4620      	mov	r0, r4
    68fe:	f7ff ff2b 	bl	6758 <bt_conn_unref>
			break;
    6902:	bd38      	pop	{r3, r4, r5, pc}
			bt_l2cap_disconnected(conn);
    6904:	4620      	mov	r0, r4
    6906:	f000 fd21 	bl	734c <bt_l2cap_disconnected>
			notify_disconnected(conn);
    690a:	4620      	mov	r0, r4
    690c:	f7ff fb6a 	bl	5fe4 <notify_disconnected>
			process_unack_tx(conn);
    6910:	4620      	mov	r0, r4
    6912:	f7ff fc17 	bl	6144 <process_unack_tx>
			if (conn->type == BT_CONN_TYPE_LE) {
    6916:	78a3      	ldrb	r3, [r4, #2]
    6918:	b18b      	cbz	r3, 693e <bt_conn_set_state+0xca>
			atomic_set_bit(conn->flags, BT_CONN_CLEANUP);
    691a:	3404      	adds	r4, #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    691c:	f3bf 8f5b 	dmb	ish
    6920:	e854 3f00 	ldrex	r3, [r4]
    6924:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    6928:	e844 3200 	strex	r2, r3, [r4]
    692c:	2a00      	cmp	r2, #0
    692e:	d1f7      	bne.n	6920 <bt_conn_set_state+0xac>
    6930:	f3bf 8f5b 	dmb	ish
			k_poll_signal(&conn_change, 0);
    6934:	2100      	movs	r1, #0
    6936:	4810      	ldr	r0, [pc, #64]	; (6978 <bt_conn_set_state+0x104>)
    6938:	f021 fb06 	bl	27f48 <k_poll_signal>
    693c:	bd38      	pop	{r3, r4, r5, pc}
				k_delayed_work_cancel(&conn->le.update_work);
    693e:	f104 0074 	add.w	r0, r4, #116	; 0x74
    6942:	f022 fd19 	bl	29378 <k_delayed_work_cancel>
    6946:	e7e8      	b.n	691a <bt_conn_set_state+0xa6>
			notify_connected(conn);
    6948:	4620      	mov	r0, r4
    694a:	f7ff fb39 	bl	5fc0 <notify_connected>
			bt_conn_unref(conn);
    694e:	4620      	mov	r0, r4
    6950:	f7ff ff02 	bl	6758 <bt_conn_unref>
    6954:	bd38      	pop	{r3, r4, r5, pc}
				notify_connected(conn);
    6956:	4620      	mov	r0, r4
    6958:	f7ff fb32 	bl	5fc0 <notify_connected>
    695c:	e7ca      	b.n	68f4 <bt_conn_set_state+0x80>
		if (conn->type == BT_CONN_TYPE_SCO) {
    695e:	78a3      	ldrb	r3, [r4, #2]
    6960:	2b02      	cmp	r3, #2
    6962:	d096      	beq.n	6892 <bt_conn_set_state+0x1e>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    6964:	2b00      	cmp	r3, #0
    6966:	d194      	bne.n	6892 <bt_conn_set_state+0x1e>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    6968:	f640 32b8 	movw	r2, #3000	; 0xbb8
    696c:	f104 0174 	add.w	r1, r4, #116	; 0x74
    6970:	4802      	ldr	r0, [pc, #8]	; (697c <bt_conn_set_state+0x108>)
    6972:	f022 fd5b 	bl	2942c <k_delayed_work_submit_to_queue>
    6976:	e78c      	b.n	6892 <bt_conn_set_state+0x1e>
    6978:	2000b940 	.word	0x2000b940
    697c:	20002b08 	.word	0x20002b08

00006980 <bt_hci_disconnect>:
{
    6980:	b570      	push	{r4, r5, r6, lr}
    6982:	4605      	mov	r5, r0
    6984:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
    6986:	2103      	movs	r1, #3
    6988:	f240 4006 	movw	r0, #1030	; 0x406
    698c:	f7fd fbac 	bl	40e8 <bt_hci_cmd_create>
	if (!buf) {
    6990:	b1a8      	cbz	r0, 69be <bt_hci_disconnect+0x3e>
    6992:	4604      	mov	r4, r0
	disconn = net_buf_add(buf, sizeof(*disconn));
    6994:	2103      	movs	r1, #3
    6996:	3008      	adds	r0, #8
    6998:	f013 fc00 	bl	1a19c <net_buf_simple_add>
	disconn->handle = sys_cpu_to_le16(conn->handle);
    699c:	882b      	ldrh	r3, [r5, #0]
    699e:	8003      	strh	r3, [r0, #0]
	disconn->reason = reason;
    69a0:	7086      	strb	r6, [r0, #2]
	err = bt_hci_cmd_send(BT_HCI_OP_DISCONNECT, buf);
    69a2:	4621      	mov	r1, r4
    69a4:	f240 4006 	movw	r0, #1030	; 0x406
    69a8:	f7fe f8fc 	bl	4ba4 <bt_hci_cmd_send>
	if (err) {
    69ac:	4604      	mov	r4, r0
    69ae:	b108      	cbz	r0, 69b4 <bt_hci_disconnect+0x34>
}
    69b0:	4620      	mov	r0, r4
    69b2:	bd70      	pop	{r4, r5, r6, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT);
    69b4:	2104      	movs	r1, #4
    69b6:	4628      	mov	r0, r5
    69b8:	f7ff ff5c 	bl	6874 <bt_conn_set_state>
	return 0;
    69bc:	e7f8      	b.n	69b0 <bt_hci_disconnect+0x30>
		return -ENOBUFS;
    69be:	f06f 0468 	mvn.w	r4, #104	; 0x68
    69c2:	e7f5      	b.n	69b0 <bt_hci_disconnect+0x30>

000069c4 <bt_conn_get_info>:
	info->type = conn->type;
    69c4:	7883      	ldrb	r3, [r0, #2]
    69c6:	700b      	strb	r3, [r1, #0]
	info->role = conn->role;
    69c8:	78c3      	ldrb	r3, [r0, #3]
    69ca:	704b      	strb	r3, [r1, #1]
	switch (conn->type) {
    69cc:	7883      	ldrb	r3, [r0, #2]
    69ce:	b9cb      	cbnz	r3, 6a04 <bt_conn_get_info+0x40>
		if (conn->role == BT_HCI_ROLE_MASTER) {
    69d0:	78c3      	ldrb	r3, [r0, #3]
    69d2:	b983      	cbnz	r3, 69f6 <bt_conn_get_info+0x32>
			info->le.src = &conn->le.init_addr;
    69d4:	f100 034f 	add.w	r3, r0, #79	; 0x4f
    69d8:	604b      	str	r3, [r1, #4]
			info->le.dst = &conn->le.resp_addr;
    69da:	f100 0356 	add.w	r3, r0, #86	; 0x56
    69de:	608b      	str	r3, [r1, #8]
		info->le.interval = conn->le.interval;
    69e0:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
    69e4:	818b      	strh	r3, [r1, #12]
		info->le.latency = conn->le.latency;
    69e6:	f8b0 3064 	ldrh.w	r3, [r0, #100]	; 0x64
    69ea:	81cb      	strh	r3, [r1, #14]
		info->le.timeout = conn->le.timeout;
    69ec:	f8b0 3066 	ldrh.w	r3, [r0, #102]	; 0x66
    69f0:	820b      	strh	r3, [r1, #16]
		return 0;
    69f2:	2000      	movs	r0, #0
    69f4:	4770      	bx	lr
			info->le.src = &conn->le.resp_addr;
    69f6:	f100 0356 	add.w	r3, r0, #86	; 0x56
    69fa:	604b      	str	r3, [r1, #4]
			info->le.dst = &conn->le.init_addr;
    69fc:	f100 034f 	add.w	r3, r0, #79	; 0x4f
    6a00:	608b      	str	r3, [r1, #8]
    6a02:	e7ed      	b.n	69e0 <bt_conn_get_info+0x1c>
	return -EINVAL;
    6a04:	f06f 0015 	mvn.w	r0, #21
}
    6a08:	4770      	bx	lr
	...

00006a0c <bt_le_set_auto_conn>:
	return conn;
}

int bt_le_set_auto_conn(bt_addr_le_t *addr,
			const struct bt_le_conn_param *param)
{
    6a0c:	b570      	push	{r4, r5, r6, lr}
    6a0e:	4606      	mov	r6, r0
	struct bt_conn *conn;

	if (param && !bt_le_conn_params_valid(param)) {
    6a10:	460d      	mov	r5, r1
    6a12:	b121      	cbz	r1, 6a1e <bt_le_set_auto_conn+0x12>
    6a14:	4608      	mov	r0, r1
    6a16:	f7fd ffd1 	bl	49bc <bt_le_conn_params_valid>
    6a1a:	2800      	cmp	r0, #0
    6a1c:	d05a      	beq.n	6ad4 <bt_le_set_auto_conn+0xc8>
		return -EINVAL;
	}

	conn = bt_conn_lookup_addr_le(addr);
    6a1e:	4630      	mov	r0, r6
    6a20:	f7ff fe40 	bl	66a4 <bt_conn_lookup_addr_le>
	if (!conn) {
    6a24:	4604      	mov	r4, r0
    6a26:	b1d8      	cbz	r0, 6a60 <bt_le_set_auto_conn+0x54>
		if (!conn) {
			return -ENOMEM;
		}
	}

	if (param) {
    6a28:	b33d      	cbz	r5, 6a7a <bt_le_set_auto_conn+0x6e>
		bt_conn_set_param_le(conn, param);
    6a2a:	4629      	mov	r1, r5
    6a2c:	4620      	mov	r0, r4
    6a2e:	f7ff fb41 	bl	60b4 <bt_conn_set_param_le>

		if (!atomic_test_and_set_bit(conn->flags,
    6a32:	1d23      	adds	r3, r4, #4
    6a34:	f3bf 8f5b 	dmb	ish
    6a38:	e853 2f00 	ldrex	r2, [r3]
    6a3c:	f042 0101 	orr.w	r1, r2, #1
    6a40:	e843 1000 	strex	r0, r1, [r3]
    6a44:	2800      	cmp	r0, #0
    6a46:	d1f7      	bne.n	6a38 <bt_le_set_auto_conn+0x2c>
    6a48:	f3bf 8f5b 	dmb	ish
    6a4c:	f012 0f01 	tst.w	r2, #1
    6a50:	d00f      	beq.n	6a72 <bt_le_set_auto_conn+0x66>
				bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
			}
		}
	}

	if (conn->state == BT_CONN_DISCONNECTED &&
    6a52:	7b23      	ldrb	r3, [r4, #12]
    6a54:	b363      	cbz	r3, 6ab0 <bt_le_set_auto_conn+0xa4>
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
		}
		bt_le_scan_update(false);
	}

	bt_conn_unref(conn);
    6a56:	4620      	mov	r0, r4
    6a58:	f7ff fe7e 	bl	6758 <bt_conn_unref>

	return 0;
    6a5c:	2000      	movs	r0, #0
    6a5e:	bd70      	pop	{r4, r5, r6, pc}
		conn = bt_conn_add_le(addr);
    6a60:	4630      	mov	r0, r6
    6a62:	f7ff fda9 	bl	65b8 <bt_conn_add_le>
		if (!conn) {
    6a66:	4604      	mov	r4, r0
    6a68:	2800      	cmp	r0, #0
    6a6a:	d1dd      	bne.n	6a28 <bt_le_set_auto_conn+0x1c>
			return -ENOMEM;
    6a6c:	f06f 000b 	mvn.w	r0, #11
}
    6a70:	bd70      	pop	{r4, r5, r6, pc}
			bt_conn_ref(conn);
    6a72:	4620      	mov	r0, r4
    6a74:	f7ff fdde 	bl	6634 <bt_conn_ref>
    6a78:	e7eb      	b.n	6a52 <bt_le_set_auto_conn+0x46>
		if (atomic_test_and_clear_bit(conn->flags,
    6a7a:	1d23      	adds	r3, r4, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    6a7c:	f3bf 8f5b 	dmb	ish
    6a80:	e853 2f00 	ldrex	r2, [r3]
    6a84:	f022 0101 	bic.w	r1, r2, #1
    6a88:	e843 1000 	strex	r0, r1, [r3]
    6a8c:	2800      	cmp	r0, #0
    6a8e:	d1f7      	bne.n	6a80 <bt_le_set_auto_conn+0x74>
    6a90:	f3bf 8f5b 	dmb	ish
    6a94:	f012 0f01 	tst.w	r2, #1
    6a98:	d0db      	beq.n	6a52 <bt_le_set_auto_conn+0x46>
			bt_conn_unref(conn);
    6a9a:	4620      	mov	r0, r4
    6a9c:	f7ff fe5c 	bl	6758 <bt_conn_unref>
			if (conn->state == BT_CONN_CONNECT_SCAN) {
    6aa0:	7b23      	ldrb	r3, [r4, #12]
    6aa2:	2b01      	cmp	r3, #1
    6aa4:	d1d5      	bne.n	6a52 <bt_le_set_auto_conn+0x46>
				bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    6aa6:	2100      	movs	r1, #0
    6aa8:	4620      	mov	r0, r4
    6aaa:	f7ff fee3 	bl	6874 <bt_conn_set_state>
    6aae:	e7d0      	b.n	6a52 <bt_le_set_auto_conn+0x46>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    6ab0:	f3bf 8f5b 	dmb	ish
    6ab4:	4b09      	ldr	r3, [pc, #36]	; (6adc <bt_le_set_auto_conn+0xd0>)
    6ab6:	681b      	ldr	r3, [r3, #0]
    6ab8:	f3bf 8f5b 	dmb	ish
	if (conn->state == BT_CONN_DISCONNECTED &&
    6abc:	f013 0f02 	tst.w	r3, #2
    6ac0:	d0c9      	beq.n	6a56 <bt_le_set_auto_conn+0x4a>
		if (param) {
    6ac2:	b11d      	cbz	r5, 6acc <bt_le_set_auto_conn+0xc0>
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    6ac4:	2101      	movs	r1, #1
    6ac6:	4620      	mov	r0, r4
    6ac8:	f7ff fed4 	bl	6874 <bt_conn_set_state>
		bt_le_scan_update(false);
    6acc:	2000      	movs	r0, #0
    6ace:	f7fe f919 	bl	4d04 <bt_le_scan_update>
    6ad2:	e7c0      	b.n	6a56 <bt_le_set_auto_conn+0x4a>
		return -EINVAL;
    6ad4:	f06f 0015 	mvn.w	r0, #21
    6ad8:	bd70      	pop	{r4, r5, r6, pc}
    6ada:	bf00      	nop
    6adc:	2000b878 	.word	0x2000b878

00006ae0 <bt_conn_disconnect>:
{
    6ae0:	b538      	push	{r3, r4, r5, lr}
    6ae2:	4604      	mov	r4, r0
    6ae4:	460d      	mov	r5, r1
	    conn->type == BT_CONN_TYPE_LE) {
    6ae6:	7883      	ldrb	r3, [r0, #2]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    6ae8:	b13b      	cbz	r3, 6afa <bt_conn_disconnect+0x1a>
	switch (conn->state) {
    6aea:	7b23      	ldrb	r3, [r4, #12]
    6aec:	3b01      	subs	r3, #1
    6aee:	2b03      	cmp	r3, #3
    6af0:	d823      	bhi.n	6b3a <bt_conn_disconnect+0x5a>
    6af2:	e8df f003 	tbb	[pc, r3]
    6af6:	1309      	.short	0x1309
    6af8:	071d      	.short	0x071d
		bt_le_set_auto_conn(&conn->le.dst, NULL);
    6afa:	2100      	movs	r1, #0
    6afc:	3048      	adds	r0, #72	; 0x48
    6afe:	f7ff ff85 	bl	6a0c <bt_le_set_auto_conn>
    6b02:	e7f2      	b.n	6aea <bt_conn_disconnect+0xa>
		return 0;
    6b04:	2000      	movs	r0, #0
    6b06:	bd38      	pop	{r3, r4, r5, pc}
		conn->err = reason;
    6b08:	72e5      	strb	r5, [r4, #11]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    6b0a:	2100      	movs	r1, #0
    6b0c:	4620      	mov	r0, r4
    6b0e:	f7ff feb1 	bl	6874 <bt_conn_set_state>
		bt_le_scan_update(false);
    6b12:	2000      	movs	r0, #0
    6b14:	f7fe f8f6 	bl	4d04 <bt_le_scan_update>
		return 0;
    6b18:	2000      	movs	r0, #0
    6b1a:	bd38      	pop	{r3, r4, r5, pc}
			k_delayed_work_cancel(&conn->le.update_work);
    6b1c:	f104 0074 	add.w	r0, r4, #116	; 0x74
    6b20:	f022 fc2a 	bl	29378 <k_delayed_work_cancel>
			return bt_hci_cmd_send(BT_HCI_OP_LE_CREATE_CONN_CANCEL,
    6b24:	2100      	movs	r1, #0
    6b26:	f242 000e 	movw	r0, #8206	; 0x200e
    6b2a:	f7fe f83b 	bl	4ba4 <bt_hci_cmd_send>
    6b2e:	bd38      	pop	{r3, r4, r5, pc}
		return bt_hci_disconnect(conn, reason);
    6b30:	4629      	mov	r1, r5
    6b32:	4620      	mov	r0, r4
    6b34:	f7ff ff24 	bl	6980 <bt_hci_disconnect>
    6b38:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTCONN;
    6b3a:	f06f 007f 	mvn.w	r0, #127	; 0x7f
}
    6b3e:	bd38      	pop	{r3, r4, r5, pc}

00006b40 <bt_conn_le_conn_update>:
}
#endif /* CONFIG_BT_PERIPHERAL */

int bt_conn_le_conn_update(struct bt_conn *conn,
			   const struct bt_le_conn_param *param)
{
    6b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6b42:	4607      	mov	r7, r0
    6b44:	460d      	mov	r5, r1
	struct hci_cp_le_conn_update *conn_update;
	struct net_buf *buf;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
    6b46:	210e      	movs	r1, #14
    6b48:	f242 0013 	movw	r0, #8211	; 0x2013
    6b4c:	f7fd facc 	bl	40e8 <bt_hci_cmd_create>
				sizeof(*conn_update));
	if (!buf) {
    6b50:	b1c8      	cbz	r0, 6b86 <bt_conn_le_conn_update+0x46>
    6b52:	4606      	mov	r6, r0
		return -ENOBUFS;
	}

	conn_update = net_buf_add(buf, sizeof(*conn_update));
    6b54:	210e      	movs	r1, #14
    6b56:	3008      	adds	r0, #8
    6b58:	f013 fb20 	bl	1a19c <net_buf_simple_add>
    6b5c:	4604      	mov	r4, r0
	memset(conn_update, 0, sizeof(*conn_update));
    6b5e:	220e      	movs	r2, #14
    6b60:	2100      	movs	r1, #0
    6b62:	f023 ff8f 	bl	2aa84 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
    6b66:	883b      	ldrh	r3, [r7, #0]
    6b68:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
    6b6a:	882b      	ldrh	r3, [r5, #0]
    6b6c:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
    6b6e:	886b      	ldrh	r3, [r5, #2]
    6b70:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
    6b72:	88ab      	ldrh	r3, [r5, #4]
    6b74:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
    6b76:	88eb      	ldrh	r3, [r5, #6]
    6b78:	8123      	strh	r3, [r4, #8]

	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_UPDATE, buf);
    6b7a:	4631      	mov	r1, r6
    6b7c:	f242 0013 	movw	r0, #8211	; 0x2013
    6b80:	f7fe f810 	bl	4ba4 <bt_hci_cmd_send>
    6b84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
    6b86:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    6b8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00006b8c <bt_conn_le_param_update>:
{
    6b8c:	b538      	push	{r3, r4, r5, lr}
	if (conn->le.interval >= param->interval_min &&
    6b8e:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
    6b92:	880a      	ldrh	r2, [r1, #0]
    6b94:	4293      	cmp	r3, r2
    6b96:	d307      	bcc.n	6ba8 <bt_conn_le_param_update+0x1c>
	    conn->le.interval <= param->interval_max &&
    6b98:	884a      	ldrh	r2, [r1, #2]
	if (conn->le.interval >= param->interval_min &&
    6b9a:	4293      	cmp	r3, r2
    6b9c:	d804      	bhi.n	6ba8 <bt_conn_le_param_update+0x1c>
	    conn->le.latency == param->latency &&
    6b9e:	f8b0 2064 	ldrh.w	r2, [r0, #100]	; 0x64
    6ba2:	888b      	ldrh	r3, [r1, #4]
	    conn->le.interval <= param->interval_max &&
    6ba4:	429a      	cmp	r2, r3
    6ba6:	d016      	beq.n	6bd6 <bt_conn_le_param_update+0x4a>
    6ba8:	460d      	mov	r5, r1
    6baa:	4604      	mov	r4, r0
	k_delayed_work_cancel(&conn->le.update_work);
    6bac:	3074      	adds	r0, #116	; 0x74
    6bae:	f022 fbe3 	bl	29378 <k_delayed_work_cancel>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    6bb2:	4b0f      	ldr	r3, [pc, #60]	; (6bf0 <bt_conn_le_param_update+0x64>)
    6bb4:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    6bb8:	f013 0f02 	tst.w	r3, #2
    6bbc:	d004      	beq.n	6bc8 <bt_conn_le_param_update+0x3c>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features)) ||
    6bbe:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    6bc2:	f013 0f02 	tst.w	r3, #2
    6bc6:	d101      	bne.n	6bcc <bt_conn_le_param_update+0x40>
	    (conn->role == BT_HCI_ROLE_MASTER)) {
    6bc8:	78e3      	ldrb	r3, [r4, #3]
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features)) ||
    6bca:	b963      	cbnz	r3, 6be6 <bt_conn_le_param_update+0x5a>
		return bt_conn_le_conn_update(conn, param);
    6bcc:	4629      	mov	r1, r5
    6bce:	4620      	mov	r0, r4
    6bd0:	f7ff ffb6 	bl	6b40 <bt_conn_le_conn_update>
    6bd4:	bd38      	pop	{r3, r4, r5, pc}
	    conn->le.timeout == param->timeout) {
    6bd6:	f8b0 2066 	ldrh.w	r2, [r0, #102]	; 0x66
    6bda:	88cb      	ldrh	r3, [r1, #6]
	    conn->le.latency == param->latency &&
    6bdc:	429a      	cmp	r2, r3
    6bde:	d1e3      	bne.n	6ba8 <bt_conn_le_param_update+0x1c>
		return -EALREADY;
    6be0:	f06f 0077 	mvn.w	r0, #119	; 0x77
}
    6be4:	bd38      	pop	{r3, r4, r5, pc}
	return bt_l2cap_update_conn_param(conn, param);
    6be6:	4629      	mov	r1, r5
    6be8:	4620      	mov	r0, r4
    6bea:	f001 f821 	bl	7c30 <bt_l2cap_update_conn_param>
    6bee:	bd38      	pop	{r3, r4, r5, pc}
    6bf0:	2000b808 	.word	0x2000b808

00006bf4 <le_conn_update>:
{
    6bf4:	b500      	push	{lr}
    6bf6:	b083      	sub	sp, #12
	struct bt_conn *conn = CONTAINER_OF(le, struct bt_conn, le);
    6bf8:	f1a0 0274 	sub.w	r2, r0, #116	; 0x74
	    conn->state == BT_CONN_CONNECT) {
    6bfc:	f810 3c68 	ldrb.w	r3, [r0, #-104]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    6c00:	2b02      	cmp	r3, #2
    6c02:	d016      	beq.n	6c32 <le_conn_update+0x3e>
	param = BT_LE_CONN_PARAM(conn->le.interval_min,
    6c04:	f830 3c14 	ldrh.w	r3, [r0, #-20]
    6c08:	f8ad 3000 	strh.w	r3, [sp]
    6c0c:	f830 3c12 	ldrh.w	r3, [r0, #-18]
    6c10:	f8ad 3002 	strh.w	r3, [sp, #2]
    6c14:	f830 3c10 	ldrh.w	r3, [r0, #-16]
    6c18:	f8ad 3004 	strh.w	r3, [sp, #4]
    6c1c:	f830 3c0e 	ldrh.w	r3, [r0, #-14]
    6c20:	f8ad 3006 	strh.w	r3, [sp, #6]
	bt_conn_le_param_update(conn, param);
    6c24:	4669      	mov	r1, sp
    6c26:	4610      	mov	r0, r2
    6c28:	f7ff ffb0 	bl	6b8c <bt_conn_le_param_update>
}
    6c2c:	b003      	add	sp, #12
    6c2e:	f85d fb04 	ldr.w	pc, [sp], #4
		bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
    6c32:	2113      	movs	r1, #19
    6c34:	4610      	mov	r0, r2
    6c36:	f7ff ff53 	bl	6ae0 <bt_conn_disconnect>
		return;
    6c3a:	e7f7      	b.n	6c2c <le_conn_update+0x38>

00006c3c <le_conn_update>:
{
    6c3c:	b510      	push	{r4, lr}
    6c3e:	b082      	sub	sp, #8
    6c40:	460c      	mov	r4, r1
	struct hci_cp_le_conn_update *cmd = (void *)buf->data;
    6c42:	6882      	ldr	r2, [r0, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    6c44:	8810      	ldrh	r0, [r2, #0]
	conn_interval_max = sys_le16_to_cpu(cmd->conn_interval_max);
    6c46:	8893      	ldrh	r3, [r2, #4]
	conn_latency = sys_le16_to_cpu(cmd->conn_latency);
    6c48:	88d1      	ldrh	r1, [r2, #6]
	supervision_timeout = sys_le16_to_cpu(cmd->supervision_timeout);
    6c4a:	8912      	ldrh	r2, [r2, #8]
	status = ll_conn_update(handle, 0, 0, conn_interval_max,
    6c4c:	9201      	str	r2, [sp, #4]
    6c4e:	9100      	str	r1, [sp, #0]
    6c50:	2200      	movs	r2, #0
    6c52:	4611      	mov	r1, r2
    6c54:	f010 fdb4 	bl	177c0 <ll_conn_update>
	*evt = cmd_status((!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED);
    6c58:	b100      	cbz	r0, 6c5c <le_conn_update+0x20>
    6c5a:	200c      	movs	r0, #12
    6c5c:	f005 fd82 	bl	c764 <cmd_status>
    6c60:	6020      	str	r0, [r4, #0]
}
    6c62:	b002      	add	sp, #8
    6c64:	bd10      	pop	{r4, pc}
	...

00006c68 <bt_conn_create_pdu>:

struct net_buf *bt_conn_create_pdu(struct net_buf_pool *pool, size_t reserve)
{
    6c68:	b538      	push	{r3, r4, r5, lr}
    6c6a:	460d      	mov	r5, r1
	struct net_buf *buf;

	if (!pool) {
    6c6c:	4603      	mov	r3, r0
    6c6e:	b150      	cbz	r0, 6c86 <bt_conn_create_pdu+0x1e>
		pool = &acl_tx_pool;
	}

	buf = net_buf_alloc(pool, K_FOREVER);
    6c70:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    6c74:	4618      	mov	r0, r3
    6c76:	f013 f9d7 	bl	1a028 <net_buf_alloc>
    6c7a:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(buf);

	reserve += sizeof(struct bt_hci_acl_hdr) + CONFIG_BT_HCI_RESERVE;
	net_buf_reserve(buf, reserve);
    6c7c:	1d29      	adds	r1, r5, #4
    6c7e:	f013 fa2e 	bl	1a0de <net_buf_reserve>

	return buf;
}
    6c82:	4620      	mov	r0, r4
    6c84:	bd38      	pop	{r3, r4, r5, pc}
		pool = &acl_tx_pool;
    6c86:	4b01      	ldr	r3, [pc, #4]	; (6c8c <bt_conn_create_pdu+0x24>)
    6c88:	e7f2      	b.n	6c70 <bt_conn_create_pdu+0x8>
    6c8a:	bf00      	nop
    6c8c:	2000d084 	.word	0x2000d084

00006c90 <create_frag>:
{
    6c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6c92:	4606      	mov	r6, r0
    6c94:	460c      	mov	r4, r1
	frag = bt_conn_create_pdu(NULL, 0);
    6c96:	2100      	movs	r1, #0
    6c98:	4608      	mov	r0, r1
    6c9a:	f7ff ffe5 	bl	6c68 <bt_conn_create_pdu>
    6c9e:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
    6ca0:	7b33      	ldrb	r3, [r6, #12]
    6ca2:	2b03      	cmp	r3, #3
    6ca4:	d121      	bne.n	6cea <create_frag+0x5a>
    6ca6:	f100 0310 	add.w	r3, r0, #16
    6caa:	89c2      	ldrh	r2, [r0, #14]
    6cac:	4413      	add	r3, r2
    6cae:	3303      	adds	r3, #3
    6cb0:	f023 0303 	bic.w	r3, r3, #3
	conn_tx(frag)->cb = NULL;
    6cb4:	2200      	movs	r2, #0
    6cb6:	601a      	str	r2, [r3, #0]
	return bt_dev.le.mtu;
    6cb8:	4b10      	ldr	r3, [pc, #64]	; (6cfc <create_frag+0x6c>)
    6cba:	f8b3 7088 	ldrh.w	r7, [r3, #136]	; 0x88
	frag_len = min(conn_mtu(conn), net_buf_tailroom(frag));
    6cbe:	f100 0608 	add.w	r6, r0, #8
    6cc2:	4630      	mov	r0, r6
    6cc4:	f013 fad3 	bl	1a26e <net_buf_simple_tailroom>
    6cc8:	4287      	cmp	r7, r0
    6cca:	d212      	bcs.n	6cf2 <create_frag+0x62>
	return bt_dev.le.mtu;
    6ccc:	4b0b      	ldr	r3, [pc, #44]	; (6cfc <create_frag+0x6c>)
    6cce:	f8b3 7088 	ldrh.w	r7, [r3, #136]	; 0x88
	net_buf_add_mem(frag, buf->data, frag_len);
    6cd2:	463a      	mov	r2, r7
    6cd4:	f854 1f08 	ldr.w	r1, [r4, #8]!
    6cd8:	4630      	mov	r0, r6
    6cda:	f013 fa65 	bl	1a1a8 <net_buf_simple_add_mem>
	net_buf_pull(buf, frag_len);
    6cde:	4639      	mov	r1, r7
    6ce0:	4620      	mov	r0, r4
    6ce2:	f013 faa8 	bl	1a236 <net_buf_simple_pull>
}
    6ce6:	4628      	mov	r0, r5
    6ce8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		net_buf_unref(frag);
    6cea:	f013 fa0b 	bl	1a104 <net_buf_unref>
		return NULL;
    6cee:	2500      	movs	r5, #0
    6cf0:	e7f9      	b.n	6ce6 <create_frag+0x56>
	frag_len = min(conn_mtu(conn), net_buf_tailroom(frag));
    6cf2:	4630      	mov	r0, r6
    6cf4:	f013 fabb 	bl	1a26e <net_buf_simple_tailroom>
    6cf8:	b287      	uxth	r7, r0
    6cfa:	e7ea      	b.n	6cd2 <create_frag+0x42>
    6cfc:	2000b808 	.word	0x2000b808

00006d00 <send_buf>:
{
    6d00:	b538      	push	{r3, r4, r5, lr}
    6d02:	4605      	mov	r5, r0
    6d04:	460c      	mov	r4, r1
	if (buf->len <= conn_mtu(conn)) {
    6d06:	898a      	ldrh	r2, [r1, #12]
	return bt_dev.le.mtu;
    6d08:	4b1b      	ldr	r3, [pc, #108]	; (6d78 <send_buf+0x78>)
    6d0a:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
	if (buf->len <= conn_mtu(conn)) {
    6d0e:	429a      	cmp	r2, r3
    6d10:	d91f      	bls.n	6d52 <send_buf+0x52>
	frag = create_frag(conn, buf);
    6d12:	f7ff ffbd 	bl	6c90 <create_frag>
	if (!frag) {
    6d16:	4601      	mov	r1, r0
    6d18:	b350      	cbz	r0, 6d70 <send_buf+0x70>
	if (!send_frag(conn, frag, BT_ACL_START_NO_FLUSH, true)) {
    6d1a:	2301      	movs	r3, #1
    6d1c:	2200      	movs	r2, #0
    6d1e:	4628      	mov	r0, r5
    6d20:	f7ff fc04 	bl	652c <send_frag>
    6d24:	4603      	mov	r3, r0
    6d26:	b1c8      	cbz	r0, 6d5c <send_buf+0x5c>
	while (buf->len > conn_mtu(conn)) {
    6d28:	89a3      	ldrh	r3, [r4, #12]
	return bt_dev.le.mtu;
    6d2a:	4a13      	ldr	r2, [pc, #76]	; (6d78 <send_buf+0x78>)
    6d2c:	f8b2 2088 	ldrh.w	r2, [r2, #136]	; 0x88
	while (buf->len > conn_mtu(conn)) {
    6d30:	429a      	cmp	r2, r3
    6d32:	d215      	bcs.n	6d60 <send_buf+0x60>
		frag = create_frag(conn, buf);
    6d34:	4621      	mov	r1, r4
    6d36:	4628      	mov	r0, r5
    6d38:	f7ff ffaa 	bl	6c90 <create_frag>
		if (!frag) {
    6d3c:	4601      	mov	r1, r0
    6d3e:	b1c8      	cbz	r0, 6d74 <send_buf+0x74>
		if (!send_frag(conn, frag, BT_ACL_CONT, true)) {
    6d40:	2301      	movs	r3, #1
    6d42:	461a      	mov	r2, r3
    6d44:	4628      	mov	r0, r5
    6d46:	f7ff fbf1 	bl	652c <send_frag>
    6d4a:	4603      	mov	r3, r0
    6d4c:	2800      	cmp	r0, #0
    6d4e:	d1eb      	bne.n	6d28 <send_buf+0x28>
    6d50:	e004      	b.n	6d5c <send_buf+0x5c>
		return send_frag(conn, buf, BT_ACL_START_NO_FLUSH, false);
    6d52:	2300      	movs	r3, #0
    6d54:	461a      	mov	r2, r3
    6d56:	f7ff fbe9 	bl	652c <send_frag>
    6d5a:	4603      	mov	r3, r0
}
    6d5c:	4618      	mov	r0, r3
    6d5e:	bd38      	pop	{r3, r4, r5, pc}
	return send_frag(conn, buf, BT_ACL_CONT, false);
    6d60:	2300      	movs	r3, #0
    6d62:	2201      	movs	r2, #1
    6d64:	4621      	mov	r1, r4
    6d66:	4628      	mov	r0, r5
    6d68:	f7ff fbe0 	bl	652c <send_frag>
    6d6c:	4603      	mov	r3, r0
    6d6e:	e7f5      	b.n	6d5c <send_buf+0x5c>
		return false;
    6d70:	2300      	movs	r3, #0
    6d72:	e7f3      	b.n	6d5c <send_buf+0x5c>
			return false;
    6d74:	2300      	movs	r3, #0
    6d76:	e7f1      	b.n	6d5c <send_buf+0x5c>
    6d78:	2000b808 	.word	0x2000b808

00006d7c <bt_conn_process_tx>:
{
    6d7c:	b538      	push	{r3, r4, r5, lr}
    6d7e:	4604      	mov	r4, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
    6d80:	7b03      	ldrb	r3, [r0, #12]
    6d82:	b97b      	cbnz	r3, 6da4 <bt_conn_process_tx+0x28>
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_CLEANUP)) {
    6d84:	1d03      	adds	r3, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    6d86:	f3bf 8f5b 	dmb	ish
    6d8a:	e853 2f00 	ldrex	r2, [r3]
    6d8e:	f022 0140 	bic.w	r1, r2, #64	; 0x40
    6d92:	e843 1000 	strex	r0, r1, [r3]
    6d96:	2800      	cmp	r0, #0
    6d98:	d1f7      	bne.n	6d8a <bt_conn_process_tx+0xe>
    6d9a:	f3bf 8f5b 	dmb	ish
	if (conn->state == BT_CONN_DISCONNECTED &&
    6d9e:	f012 0f40 	tst.w	r2, #64	; 0x40
    6da2:	d10c      	bne.n	6dbe <bt_conn_process_tx+0x42>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
    6da4:	2100      	movs	r1, #0
    6da6:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    6daa:	f013 f97e 	bl	1a0aa <net_buf_get>
	BT_ASSERT(buf);
    6dae:	4605      	mov	r5, r0
    6db0:	b148      	cbz	r0, 6dc6 <bt_conn_process_tx+0x4a>
	if (!send_buf(conn, buf)) {
    6db2:	4601      	mov	r1, r0
    6db4:	4620      	mov	r0, r4
    6db6:	f7ff ffa3 	bl	6d00 <send_buf>
    6dba:	b150      	cbz	r0, 6dd2 <bt_conn_process_tx+0x56>
    6dbc:	bd38      	pop	{r3, r4, r5, pc}
		conn_cleanup(conn);
    6dbe:	4620      	mov	r0, r4
    6dc0:	f7ff fcd7 	bl	6772 <conn_cleanup>
		return;
    6dc4:	bd38      	pop	{r3, r4, r5, pc}
	BT_ASSERT(buf);
    6dc6:	4040      	eors	r0, r0
    6dc8:	f380 8811 	msr	BASEPRI, r0
    6dcc:	f04f 0004 	mov.w	r0, #4
    6dd0:	df02      	svc	2
		net_buf_unref(buf);
    6dd2:	4628      	mov	r0, r5
    6dd4:	f013 f996 	bl	1a104 <net_buf_unref>
    6dd8:	e7f0      	b.n	6dbc <bt_conn_process_tx+0x40>
	...

00006ddc <bt_conn_get_id>:
}
#endif /* CONFIG_BT_SMP || CONFIG_BT_BREDR */

u8_t bt_conn_get_id(struct bt_conn *conn)
{
	return conn - conns;
    6ddc:	4b03      	ldr	r3, [pc, #12]	; (6dec <bt_conn_get_id+0x10>)
    6dde:	1ac0      	subs	r0, r0, r3
    6de0:	1080      	asrs	r0, r0, #2
    6de2:	4b03      	ldr	r3, [pc, #12]	; (6df0 <bt_conn_get_id+0x14>)
    6de4:	fb03 f000 	mul.w	r0, r3, r0
}
    6de8:	b2c0      	uxtb	r0, r0
    6dea:	4770      	bx	lr
    6dec:	200003a0 	.word	0x200003a0
    6df0:	96f96f97 	.word	0x96f96f97

00006df4 <bt_conn_init>:

	return bt_conn_ref(conn);
}

int bt_conn_init(void)
{
    6df4:	b538      	push	{r3, r4, r5, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
    6df6:	2300      	movs	r3, #0
    6df8:	e000      	b.n	6dfc <bt_conn_init+0x8>
    6dfa:	3301      	adds	r3, #1
    6dfc:	2b01      	cmp	r3, #1
    6dfe:	d80d      	bhi.n	6e1c <bt_conn_init+0x28>
		sys_slist_prepend(&free_tx, &conn_tx[i].node);
    6e00:	491a      	ldr	r1, [pc, #104]	; (6e6c <bt_conn_init+0x78>)
    6e02:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
	node->next = list->head;
    6e06:	4a1a      	ldr	r2, [pc, #104]	; (6e70 <bt_conn_init+0x7c>)
    6e08:	6814      	ldr	r4, [r2, #0]
    6e0a:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
	list->head = node;
    6e0e:	6010      	str	r0, [r2, #0]
	if (!list->tail) {
    6e10:	6852      	ldr	r2, [r2, #4]
    6e12:	2a00      	cmp	r2, #0
    6e14:	d1f1      	bne.n	6dfa <bt_conn_init+0x6>
		list->tail = list->head;
    6e16:	4a16      	ldr	r2, [pc, #88]	; (6e70 <bt_conn_init+0x7c>)
    6e18:	6050      	str	r0, [r2, #4]
    6e1a:	e7ee      	b.n	6dfa <bt_conn_init+0x6>
	}

	bt_att_init();
    6e1c:	f002 fa68 	bl	92f0 <bt_att_init>

	err = bt_smp_init();
    6e20:	f005 fba2 	bl	c568 <bt_smp_init>
	if (err) {
    6e24:	4605      	mov	r5, r0
    6e26:	b108      	cbz	r0, 6e2c <bt_conn_init+0x38>
			}
		}
	}

	return 0;
}
    6e28:	4628      	mov	r0, r5
    6e2a:	bd38      	pop	{r3, r4, r5, pc}
	bt_l2cap_init();
    6e2c:	f000 ff20 	bl	7c70 <bt_l2cap_init>
		for (i = 0; i < ARRAY_SIZE(conns); i++) {
    6e30:	462c      	mov	r4, r5
    6e32:	2c00      	cmp	r4, #0
    6e34:	d1f8      	bne.n	6e28 <bt_conn_init+0x34>
			struct bt_conn *conn = &conns[i];
    6e36:	4a0f      	ldr	r2, [pc, #60]	; (6e74 <bt_conn_init+0x80>)
    6e38:	239c      	movs	r3, #156	; 0x9c
    6e3a:	fb03 f304 	mul.w	r3, r3, r4
    6e3e:	18d0      	adds	r0, r2, r3
			if (!atomic_get(&conn->ref)) {
    6e40:	3340      	adds	r3, #64	; 0x40
    6e42:	4413      	add	r3, r2
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    6e44:	f3bf 8f5b 	dmb	ish
    6e48:	685b      	ldr	r3, [r3, #4]
    6e4a:	f3bf 8f5b 	dmb	ish
    6e4e:	b90b      	cbnz	r3, 6e54 <bt_conn_init+0x60>
		for (i = 0; i < ARRAY_SIZE(conns); i++) {
    6e50:	3401      	adds	r4, #1
    6e52:	e7ee      	b.n	6e32 <bt_conn_init+0x3e>
    6e54:	f3bf 8f5b 	dmb	ish
    6e58:	6843      	ldr	r3, [r0, #4]
    6e5a:	f3bf 8f5b 	dmb	ish
			if (atomic_test_bit(conn->flags,
    6e5e:	f013 0f01 	tst.w	r3, #1
    6e62:	d0f5      	beq.n	6e50 <bt_conn_init+0x5c>
				bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    6e64:	2101      	movs	r1, #1
    6e66:	f7ff fd05 	bl	6874 <bt_conn_set_state>
    6e6a:	e7f1      	b.n	6e50 <bt_conn_init+0x5c>
    6e6c:	20000390 	.word	0x20000390
    6e70:	2000052c 	.word	0x2000052c
    6e74:	200003a0 	.word	0x200003a0

00006e78 <get_ident>:

static u8_t get_ident(void)
{
	static u8_t ident;

	ident++;
    6e78:	4a05      	ldr	r2, [pc, #20]	; (6e90 <get_ident+0x18>)
    6e7a:	7813      	ldrb	r3, [r2, #0]
    6e7c:	3301      	adds	r3, #1
    6e7e:	b2db      	uxtb	r3, r3
    6e80:	7013      	strb	r3, [r2, #0]
	/* handle integer overflow (0 is not valid) */
	if (!ident) {
    6e82:	b90b      	cbnz	r3, 6e88 <get_ident+0x10>
		ident++;
    6e84:	3301      	adds	r3, #1
    6e86:	7013      	strb	r3, [r2, #0]
	}

	return ident;
}
    6e88:	4b01      	ldr	r3, [pc, #4]	; (6e90 <get_ident+0x18>)
    6e8a:	7818      	ldrb	r0, [r3, #0]
    6e8c:	4770      	bx	lr
    6e8e:	bf00      	nop
    6e90:	200005d0 	.word	0x200005d0

00006e94 <__l2cap_lookup_ident>:
	return NULL;
}

static struct bt_l2cap_le_chan *
__l2cap_lookup_ident(struct bt_conn *conn, u16_t ident, bool remove)
{
    6e94:	b430      	push	{r4, r5}
	return list->head;
    6e96:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
	struct bt_l2cap_chan *chan;
	sys_snode_t *prev = NULL;

	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    6e98:	b113      	cbz	r3, 6ea0 <__l2cap_lookup_ident+0xc>
    6e9a:	3b08      	subs	r3, #8
    6e9c:	2400      	movs	r4, #0
    6e9e:	e01b      	b.n	6ed8 <__l2cap_lookup_ident+0x44>
    6ea0:	2300      	movs	r3, #0
    6ea2:	e7fb      	b.n	6e9c <__l2cap_lookup_ident+0x8>
		if (chan->ident == ident) {
			if (remove) {
    6ea4:	b35a      	cbz	r2, 6efe <__l2cap_lookup_ident+0x6a>
				sys_slist_remove(&conn->channels, prev,
    6ea6:	f103 0208 	add.w	r2, r3, #8
	if (!prev_node) {
    6eaa:	b144      	cbz	r4, 6ebe <__l2cap_lookup_ident+0x2a>
		prev_node->next = node->next;
    6eac:	6899      	ldr	r1, [r3, #8]
    6eae:	6021      	str	r1, [r4, #0]
		if (list->tail == node) {
    6eb0:	6c01      	ldr	r1, [r0, #64]	; 0x40
    6eb2:	428a      	cmp	r2, r1
    6eb4:	d00a      	beq.n	6ecc <__l2cap_lookup_ident+0x38>
	node->next = NULL;
    6eb6:	2200      	movs	r2, #0
    6eb8:	609a      	str	r2, [r3, #8]
						 &chan->node);
			}
			return BT_L2CAP_LE_CHAN(chan);
    6eba:	4618      	mov	r0, r3
    6ebc:	e01d      	b.n	6efa <__l2cap_lookup_ident+0x66>
		list->head = node->next;
    6ebe:	6899      	ldr	r1, [r3, #8]
    6ec0:	63c1      	str	r1, [r0, #60]	; 0x3c
		if (list->tail == node) {
    6ec2:	6c04      	ldr	r4, [r0, #64]	; 0x40
    6ec4:	4294      	cmp	r4, r2
    6ec6:	d1f6      	bne.n	6eb6 <__l2cap_lookup_ident+0x22>
			list->tail = list->head;
    6ec8:	6401      	str	r1, [r0, #64]	; 0x40
    6eca:	e7f4      	b.n	6eb6 <__l2cap_lookup_ident+0x22>
			list->tail = prev_node;
    6ecc:	6404      	str	r4, [r0, #64]	; 0x40
    6ece:	e7f2      	b.n	6eb6 <__l2cap_lookup_ident+0x22>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    6ed0:	4625      	mov	r5, r4
    6ed2:	e00a      	b.n	6eea <__l2cap_lookup_ident+0x56>
    6ed4:	4623      	mov	r3, r4
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    6ed6:	3b08      	subs	r3, #8
    6ed8:	b173      	cbz	r3, 6ef8 <__l2cap_lookup_ident+0x64>
		if (chan->ident == ident) {
    6eda:	f893 503c 	ldrb.w	r5, [r3, #60]	; 0x3c
    6ede:	428d      	cmp	r5, r1
    6ee0:	d0e0      	beq.n	6ea4 <__l2cap_lookup_ident+0x10>
    6ee2:	f113 0408 	adds.w	r4, r3, #8
    6ee6:	d0f3      	beq.n	6ed0 <__l2cap_lookup_ident+0x3c>
	return node->next;
    6ee8:	689d      	ldr	r5, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    6eea:	b11d      	cbz	r5, 6ef4 <__l2cap_lookup_ident+0x60>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    6eec:	2c00      	cmp	r4, #0
    6eee:	d0f1      	beq.n	6ed4 <__l2cap_lookup_ident+0x40>
	return node->next;
    6ef0:	689b      	ldr	r3, [r3, #8]
    6ef2:	e7f0      	b.n	6ed6 <__l2cap_lookup_ident+0x42>
    6ef4:	2300      	movs	r3, #0
    6ef6:	e7ef      	b.n	6ed8 <__l2cap_lookup_ident+0x44>
		}

		prev = &chan->node;
	}

	return NULL;
    6ef8:	2000      	movs	r0, #0
}
    6efa:	bc30      	pop	{r4, r5}
    6efc:	4770      	bx	lr
			return BT_L2CAP_LE_CHAN(chan);
    6efe:	4618      	mov	r0, r3
    6f00:	e7fb      	b.n	6efa <__l2cap_lookup_ident+0x66>
	...

00006f04 <l2cap_server_lookup_psm>:
	return list->head;
    6f04:	4b0d      	ldr	r3, [pc, #52]	; (6f3c <l2cap_server_lookup_psm+0x38>)
    6f06:	681b      	ldr	r3, [r3, #0]
#if defined(CONFIG_BT_L2CAP_DYNAMIC_CHANNEL)
static struct bt_l2cap_server *l2cap_server_lookup_psm(u16_t psm)
{
	struct bt_l2cap_server *server;

	SYS_SLIST_FOR_EACH_CONTAINER(&servers, server, node) {
    6f08:	b10b      	cbz	r3, 6f0e <l2cap_server_lookup_psm+0xa>
    6f0a:	3b08      	subs	r3, #8
    6f0c:	e006      	b.n	6f1c <l2cap_server_lookup_psm+0x18>
    6f0e:	2300      	movs	r3, #0
    6f10:	e004      	b.n	6f1c <l2cap_server_lookup_psm+0x18>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    6f12:	4611      	mov	r1, r2
    6f14:	e00a      	b.n	6f2c <l2cap_server_lookup_psm+0x28>
	return node->next;
    6f16:	689a      	ldr	r2, [r3, #8]
    6f18:	f1a2 0308 	sub.w	r3, r2, #8
    6f1c:	b163      	cbz	r3, 6f38 <l2cap_server_lookup_psm+0x34>
		if (server->psm == psm) {
    6f1e:	881a      	ldrh	r2, [r3, #0]
    6f20:	4282      	cmp	r2, r0
    6f22:	d009      	beq.n	6f38 <l2cap_server_lookup_psm+0x34>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    6f24:	f113 0208 	adds.w	r2, r3, #8
    6f28:	d0f3      	beq.n	6f12 <l2cap_server_lookup_psm+0xe>
	return node->next;
    6f2a:	6899      	ldr	r1, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&servers, server, node) {
    6f2c:	b111      	cbz	r1, 6f34 <l2cap_server_lookup_psm+0x30>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    6f2e:	2a00      	cmp	r2, #0
    6f30:	d1f1      	bne.n	6f16 <l2cap_server_lookup_psm+0x12>
    6f32:	e7f1      	b.n	6f18 <l2cap_server_lookup_psm+0x14>
    6f34:	2300      	movs	r3, #0
    6f36:	e7f1      	b.n	6f1c <l2cap_server_lookup_psm+0x18>
			return server;
		}
	}

	return NULL;
}
    6f38:	4618      	mov	r0, r3
    6f3a:	4770      	bx	lr
    6f3c:	200005dc 	.word	0x200005dc

00006f40 <l2cap_remove_tx_cid>:
{
	struct bt_l2cap_chan *chan;
	sys_snode_t *prev = NULL;

	/* Protect fixed channels against accidental removal */
	if (!L2CAP_LE_CID_IS_DYN(cid)) {
    6f40:	f1a1 0340 	sub.w	r3, r1, #64	; 0x40
    6f44:	b29b      	uxth	r3, r3
    6f46:	2b3f      	cmp	r3, #63	; 0x3f
    6f48:	d835      	bhi.n	6fb6 <l2cap_remove_tx_cid+0x76>
	return list->head;
    6f4a:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
		return NULL;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    6f4c:	b12b      	cbz	r3, 6f5a <l2cap_remove_tx_cid+0x1a>
    6f4e:	3b08      	subs	r3, #8
    6f50:	2200      	movs	r2, #0
    6f52:	2b00      	cmp	r3, #0
    6f54:	d031      	beq.n	6fba <l2cap_remove_tx_cid+0x7a>
{
    6f56:	b410      	push	{r4}
    6f58:	e01c      	b.n	6f94 <l2cap_remove_tx_cid+0x54>
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    6f5a:	2300      	movs	r3, #0
    6f5c:	e7f8      	b.n	6f50 <l2cap_remove_tx_cid+0x10>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
			sys_slist_remove(&conn->channels, prev, &chan->node);
    6f5e:	f103 0108 	add.w	r1, r3, #8
	if (!prev_node) {
    6f62:	b14a      	cbz	r2, 6f78 <l2cap_remove_tx_cid+0x38>
		prev_node->next = node->next;
    6f64:	689c      	ldr	r4, [r3, #8]
    6f66:	6014      	str	r4, [r2, #0]
		if (list->tail == node) {
    6f68:	6c04      	ldr	r4, [r0, #64]	; 0x40
    6f6a:	42a1      	cmp	r1, r4
    6f6c:	d00b      	beq.n	6f86 <l2cap_remove_tx_cid+0x46>
	node->next = NULL;
    6f6e:	2200      	movs	r2, #0
    6f70:	609a      	str	r2, [r3, #8]
			return BT_L2CAP_LE_CHAN(chan);
    6f72:	4618      	mov	r0, r3

		prev = &chan->node;
	}

	return NULL;
}
    6f74:	bc10      	pop	{r4}
    6f76:	4770      	bx	lr
		list->head = node->next;
    6f78:	689a      	ldr	r2, [r3, #8]
    6f7a:	63c2      	str	r2, [r0, #60]	; 0x3c
		if (list->tail == node) {
    6f7c:	6c04      	ldr	r4, [r0, #64]	; 0x40
    6f7e:	428c      	cmp	r4, r1
    6f80:	d1f5      	bne.n	6f6e <l2cap_remove_tx_cid+0x2e>
			list->tail = list->head;
    6f82:	6402      	str	r2, [r0, #64]	; 0x40
    6f84:	e7f3      	b.n	6f6e <l2cap_remove_tx_cid+0x2e>
			list->tail = prev_node;
    6f86:	6402      	str	r2, [r0, #64]	; 0x40
    6f88:	e7f1      	b.n	6f6e <l2cap_remove_tx_cid+0x2e>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    6f8a:	4614      	mov	r4, r2
    6f8c:	e00a      	b.n	6fa4 <l2cap_remove_tx_cid+0x64>
    6f8e:	4613      	mov	r3, r2
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    6f90:	3b08      	subs	r3, #8
    6f92:	b173      	cbz	r3, 6fb2 <l2cap_remove_tx_cid+0x72>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
    6f94:	f8b3 4040 	ldrh.w	r4, [r3, #64]	; 0x40
    6f98:	42a1      	cmp	r1, r4
    6f9a:	d0e0      	beq.n	6f5e <l2cap_remove_tx_cid+0x1e>
    6f9c:	f113 0208 	adds.w	r2, r3, #8
    6fa0:	d0f3      	beq.n	6f8a <l2cap_remove_tx_cid+0x4a>
	return node->next;
    6fa2:	689c      	ldr	r4, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    6fa4:	b11c      	cbz	r4, 6fae <l2cap_remove_tx_cid+0x6e>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    6fa6:	2a00      	cmp	r2, #0
    6fa8:	d0f1      	beq.n	6f8e <l2cap_remove_tx_cid+0x4e>
	return node->next;
    6faa:	689b      	ldr	r3, [r3, #8]
    6fac:	e7f0      	b.n	6f90 <l2cap_remove_tx_cid+0x50>
    6fae:	2300      	movs	r3, #0
    6fb0:	e7ef      	b.n	6f92 <l2cap_remove_tx_cid+0x52>
	return NULL;
    6fb2:	2000      	movs	r0, #0
    6fb4:	e7de      	b.n	6f74 <l2cap_remove_tx_cid+0x34>
		return NULL;
    6fb6:	2000      	movs	r0, #0
    6fb8:	4770      	bx	lr
	return NULL;
    6fba:	2000      	movs	r0, #0
}
    6fbc:	4770      	bx	lr

00006fbe <l2cap_connected>:

	return 0;
}

static void l2cap_connected(struct bt_l2cap_chan *chan)
{
    6fbe:	4770      	bx	lr

00006fc0 <l2cap_disconnected>:
	BT_DBG("ch %p cid 0x%04x", BT_L2CAP_LE_CHAN(chan),
	       BT_L2CAP_LE_CHAN(chan)->rx.cid);
}

static void l2cap_disconnected(struct bt_l2cap_chan *chan)
{
    6fc0:	4770      	bx	lr
	...

00006fc4 <l2cap_accept>:
		.recv = l2cap_recv,
	};

	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
    6fc4:	2000      	movs	r0, #0
    6fc6:	b110      	cbz	r0, 6fce <l2cap_accept+0xa>
		return 0;
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
    6fc8:	f06f 000b 	mvn.w	r0, #11
}
    6fcc:	4770      	bx	lr
		if (l2cap->chan.chan.conn) {
    6fce:	239c      	movs	r3, #156	; 0x9c
    6fd0:	fb03 f300 	mul.w	r3, r3, r0
    6fd4:	4a06      	ldr	r2, [pc, #24]	; (6ff0 <l2cap_accept+0x2c>)
    6fd6:	58d3      	ldr	r3, [r2, r3]
    6fd8:	b10b      	cbz	r3, 6fde <l2cap_accept+0x1a>
	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
    6fda:	3001      	adds	r0, #1
    6fdc:	e7f3      	b.n	6fc6 <l2cap_accept+0x2>
		l2cap->chan.chan.ops = &ops;
    6fde:	239c      	movs	r3, #156	; 0x9c
    6fe0:	4a03      	ldr	r2, [pc, #12]	; (6ff0 <l2cap_accept+0x2c>)
    6fe2:	fb03 2300 	mla	r3, r3, r0, r2
    6fe6:	4a03      	ldr	r2, [pc, #12]	; (6ff4 <l2cap_accept+0x30>)
    6fe8:	605a      	str	r2, [r3, #4]
		*chan = &l2cap->chan.chan;
    6fea:	600b      	str	r3, [r1, #0]
		return 0;
    6fec:	4770      	bx	lr
    6fee:	bf00      	nop
    6ff0:	20000534 	.word	0x20000534
    6ff4:	2000b95c 	.word	0x2000b95c

00006ff8 <l2cap_alloc_frag>:
{
    6ff8:	b538      	push	{r3, r4, r5, lr}
    6ffa:	4605      	mov	r5, r0
	frag = chan->chan.ops->alloc_buf(&chan->chan);
    6ffc:	6843      	ldr	r3, [r0, #4]
    6ffe:	68db      	ldr	r3, [r3, #12]
    7000:	4798      	blx	r3
	if (!frag) {
    7002:	4604      	mov	r4, r0
    7004:	b120      	cbz	r0, 7010 <l2cap_alloc_frag+0x18>
	net_buf_frag_add(chan->_sdu, frag);
    7006:	4601      	mov	r1, r0
    7008:	f8d5 0094 	ldr.w	r0, [r5, #148]	; 0x94
    700c:	f013 f8ab 	bl	1a166 <net_buf_frag_add>
}
    7010:	4620      	mov	r0, r4
    7012:	bd38      	pop	{r3, r4, r5, pc}

00007014 <l2cap_chan_rx_give_credits>:
{
    7014:	b538      	push	{r3, r4, r5, lr}
    7016:	4605      	mov	r5, r0
	while (credits--) {
    7018:	e004      	b.n	7024 <l2cap_chan_rx_give_credits+0x10>
    701a:	f105 0048 	add.w	r0, r5, #72	; 0x48
    701e:	f021 fbbc 	bl	2879a <_impl_k_sem_give>
    7022:	4621      	mov	r1, r4
    7024:	1e4b      	subs	r3, r1, #1
    7026:	b29c      	uxth	r4, r3
    7028:	2900      	cmp	r1, #0
    702a:	d1f6      	bne.n	701a <l2cap_chan_rx_give_credits+0x6>
}
    702c:	bd38      	pop	{r3, r4, r5, pc}

0000702e <l2cap_chan_tx_give_credits>:
{
    702e:	b538      	push	{r3, r4, r5, lr}
    7030:	4605      	mov	r5, r0
	while (credits--) {
    7032:	e004      	b.n	703e <l2cap_chan_tx_give_credits+0x10>
    7034:	f105 0068 	add.w	r0, r5, #104	; 0x68
    7038:	f021 fbaf 	bl	2879a <_impl_k_sem_give>
    703c:	4621      	mov	r1, r4
    703e:	1e4b      	subs	r3, r1, #1
    7040:	b29c      	uxth	r4, r3
    7042:	2900      	cmp	r1, #0
    7044:	d1f6      	bne.n	7034 <l2cap_chan_tx_give_credits+0x6>
}
    7046:	bd38      	pop	{r3, r4, r5, pc}

00007048 <l2cap_chan_destroy>:
{
    7048:	b510      	push	{r4, lr}
    704a:	4604      	mov	r4, r0
	k_delayed_work_cancel(&chan->rtx_work);
    704c:	3010      	adds	r0, #16
    704e:	f022 f993 	bl	29378 <k_delayed_work_cancel>
	while ((buf = net_buf_get(&ch->tx_queue, K_NO_WAIT))) {
    7052:	e002      	b.n	705a <l2cap_chan_destroy+0x12>
		net_buf_unref(buf);
    7054:	4618      	mov	r0, r3
    7056:	f013 f855 	bl	1a104 <net_buf_unref>
	while ((buf = net_buf_get(&ch->tx_queue, K_NO_WAIT))) {
    705a:	2100      	movs	r1, #0
    705c:	f104 0080 	add.w	r0, r4, #128	; 0x80
    7060:	f013 f823 	bl	1a0aa <net_buf_get>
    7064:	4603      	mov	r3, r0
    7066:	2800      	cmp	r0, #0
    7068:	d1f4      	bne.n	7054 <l2cap_chan_destroy+0xc>
	if (ch->_sdu) {
    706a:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    706e:	b130      	cbz	r0, 707e <l2cap_chan_destroy+0x36>
		net_buf_unref(ch->_sdu);
    7070:	f013 f848 	bl	1a104 <net_buf_unref>
		ch->_sdu = NULL;
    7074:	2300      	movs	r3, #0
    7076:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
		ch->_sdu_len = 0;
    707a:	f8a4 3098 	strh.w	r3, [r4, #152]	; 0x98
    707e:	bd10      	pop	{r4, pc}

00007080 <l2cap_chan_le_get_tx_buf>:
{
    7080:	b508      	push	{r3, lr}
    7082:	4603      	mov	r3, r0
	if (ch->tx_buf) {
    7084:	f8d0 0090 	ldr.w	r0, [r0, #144]	; 0x90
    7088:	b118      	cbz	r0, 7092 <l2cap_chan_le_get_tx_buf+0x12>
		ch->tx_buf = NULL;
    708a:	2200      	movs	r2, #0
    708c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		return buf;
    7090:	bd08      	pop	{r3, pc}
	return net_buf_get(&ch->tx_queue, K_NO_WAIT);
    7092:	2100      	movs	r1, #0
    7094:	f103 0080 	add.w	r0, r3, #128	; 0x80
    7098:	f013 f807 	bl	1a0aa <net_buf_get>
}
    709c:	bd08      	pop	{r3, pc}

0000709e <l2cap_chan_tx_init>:
{
    709e:	b510      	push	{r4, lr}
    70a0:	4604      	mov	r4, r0
	memset(&chan->tx, 0, sizeof(chan->tx));
    70a2:	2220      	movs	r2, #32
    70a4:	2100      	movs	r1, #0
    70a6:	3060      	adds	r0, #96	; 0x60
    70a8:	f023 fcec 	bl	2aa84 <memset>
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    70ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    70b0:	2100      	movs	r1, #0
    70b2:	f104 0068 	add.w	r0, r4, #104	; 0x68
    70b6:	f021 fb67 	bl	28788 <_impl_k_sem_init>
	k_fifo_init(&chan->tx_queue);
    70ba:	f104 0080 	add.w	r0, r4, #128	; 0x80
    70be:	f020 ffa2 	bl	28006 <k_queue_init>
    70c2:	bd10      	pop	{r4, pc}

000070c4 <l2cap_chan_rx_init>:
{
    70c4:	b508      	push	{r3, lr}
	if (!chan->rx.mtu) {
    70c6:	f8b0 3042 	ldrh.w	r3, [r0, #66]	; 0x42
    70ca:	b913      	cbnz	r3, 70d2 <l2cap_chan_rx_init+0xe>
		chan->rx.mtu = L2CAP_MAX_LE_MTU;
    70cc:	2342      	movs	r3, #66	; 0x42
    70ce:	f8a0 3042 	strh.w	r3, [r0, #66]	; 0x42
	if (!chan->rx.init_credits) {
    70d2:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
    70d6:	b96b      	cbnz	r3, 70f4 <l2cap_chan_rx_init+0x30>
		if (chan->chan.ops->alloc_buf) {
    70d8:	6843      	ldr	r3, [r0, #4]
    70da:	68db      	ldr	r3, [r3, #12]
    70dc:	b1cb      	cbz	r3, 7112 <l2cap_chan_rx_init+0x4e>
			chan->rx.init_credits = (chan->rx.mtu +
    70de:	f8b0 3042 	ldrh.w	r3, [r0, #66]	; 0x42
    70e2:	3343      	adds	r3, #67	; 0x43
						 (L2CAP_MAX_LE_MPS - 1)) /
    70e4:	4a0d      	ldr	r2, [pc, #52]	; (711c <l2cap_chan_rx_init+0x58>)
    70e6:	fb82 1203 	smull	r1, r2, r2, r3
    70ea:	17db      	asrs	r3, r3, #31
    70ec:	ebc3 1362 	rsb	r3, r3, r2, asr #5
			chan->rx.init_credits = (chan->rx.mtu +
    70f0:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
	chan->rx.mps = min(chan->rx.mtu + 2, L2CAP_MAX_LE_MPS);
    70f4:	f8b0 3042 	ldrh.w	r3, [r0, #66]	; 0x42
    70f8:	3302      	adds	r3, #2
    70fa:	2b44      	cmp	r3, #68	; 0x44
    70fc:	bfa8      	it	ge
    70fe:	2344      	movge	r3, #68	; 0x44
    7100:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
    7104:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    7108:	2100      	movs	r1, #0
    710a:	3048      	adds	r0, #72	; 0x48
    710c:	f021 fb3c 	bl	28788 <_impl_k_sem_init>
    7110:	bd08      	pop	{r3, pc}
			chan->rx.init_credits = L2CAP_LE_MAX_CREDITS;
    7112:	2302      	movs	r3, #2
    7114:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
    7118:	e7ec      	b.n	70f4 <l2cap_chan_rx_init+0x30>
    711a:	bf00      	nop
    711c:	78787879 	.word	0x78787879

00007120 <l2cap_change_security>:
{
    7120:	b508      	push	{r3, lr}
	switch (err) {
    7122:	2905      	cmp	r1, #5
    7124:	d00e      	beq.n	7144 <l2cap_change_security+0x24>
    7126:	2908      	cmp	r1, #8
    7128:	d120      	bne.n	716c <l2cap_change_security+0x4c>
		if (chan->chan.required_sec_level >= BT_SECURITY_MEDIUM) {
    712a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
    712e:	2b01      	cmp	r3, #1
    7130:	d81f      	bhi.n	7172 <l2cap_change_security+0x52>
		chan->chan.required_sec_level = BT_SECURITY_MEDIUM;
    7132:	2302      	movs	r3, #2
    7134:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
	return bt_conn_security(chan->chan.conn, chan->chan.required_sec_level);
    7138:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
    713c:	6800      	ldr	r0, [r0, #0]
    713e:	f7ff f917 	bl	6370 <bt_conn_security>
    7142:	bd08      	pop	{r3, pc}
		if (chan->chan.required_sec_level < BT_SECURITY_MEDIUM) {
    7144:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
    7148:	2b01      	cmp	r3, #1
    714a:	d905      	bls.n	7158 <l2cap_change_security+0x38>
		} else if (chan->chan.required_sec_level < BT_SECURITY_HIGH) {
    714c:	2b02      	cmp	r3, #2
    714e:	d807      	bhi.n	7160 <l2cap_change_security+0x40>
			chan->chan.required_sec_level = BT_SECURITY_HIGH;
    7150:	2303      	movs	r3, #3
    7152:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    7156:	e7ef      	b.n	7138 <l2cap_change_security+0x18>
			chan->chan.required_sec_level = BT_SECURITY_MEDIUM;
    7158:	2302      	movs	r3, #2
    715a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    715e:	e7eb      	b.n	7138 <l2cap_change_security+0x18>
		} else if (chan->chan.required_sec_level < BT_SECURITY_FIPS) {
    7160:	2b03      	cmp	r3, #3
    7162:	d809      	bhi.n	7178 <l2cap_change_security+0x58>
			chan->chan.required_sec_level = BT_SECURITY_FIPS;
    7164:	2304      	movs	r3, #4
    7166:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    716a:	e7e5      	b.n	7138 <l2cap_change_security+0x18>
		return -EINVAL;
    716c:	f06f 0015 	mvn.w	r0, #21
    7170:	bd08      	pop	{r3, pc}
			return -EALREADY;
    7172:	f06f 0077 	mvn.w	r0, #119	; 0x77
    7176:	bd08      	pop	{r3, pc}
			return -EALREADY;
    7178:	f06f 0077 	mvn.w	r0, #119	; 0x77
}
    717c:	bd08      	pop	{r3, pc}
	...

00007180 <bt_l2cap_le_fixed_chan_register>:
	sys_slist_append(&le_channels, &chan->node);
    7180:	f100 0308 	add.w	r3, r0, #8
	node->next = NULL;
    7184:	2200      	movs	r2, #0
    7186:	6082      	str	r2, [r0, #8]
	if (!list->tail) {
    7188:	4a05      	ldr	r2, [pc, #20]	; (71a0 <bt_l2cap_le_fixed_chan_register+0x20>)
    718a:	6852      	ldr	r2, [r2, #4]
    718c:	b11a      	cbz	r2, 7196 <bt_l2cap_le_fixed_chan_register+0x16>
		list->tail->next = node;
    718e:	6013      	str	r3, [r2, #0]
		list->tail = node;
    7190:	4a03      	ldr	r2, [pc, #12]	; (71a0 <bt_l2cap_le_fixed_chan_register+0x20>)
    7192:	6053      	str	r3, [r2, #4]
    7194:	4770      	bx	lr
		list->tail = node;
    7196:	4a02      	ldr	r2, [pc, #8]	; (71a0 <bt_l2cap_le_fixed_chan_register+0x20>)
    7198:	6053      	str	r3, [r2, #4]
		list->head = node;
    719a:	6013      	str	r3, [r2, #0]
    719c:	4770      	bx	lr
    719e:	bf00      	nop
    71a0:	200005d4 	.word	0x200005d4

000071a4 <bt_l2cap_chan_remove>:
	return list->head;
    71a4:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    71a6:	b123      	cbz	r3, 71b2 <bt_l2cap_chan_remove+0xe>
    71a8:	3b08      	subs	r3, #8
    71aa:	2200      	movs	r2, #0
    71ac:	b35b      	cbz	r3, 7206 <bt_l2cap_chan_remove+0x62>
{
    71ae:	b410      	push	{r4}
    71b0:	e01c      	b.n	71ec <bt_l2cap_chan_remove+0x48>
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    71b2:	2300      	movs	r3, #0
    71b4:	e7f9      	b.n	71aa <bt_l2cap_chan_remove+0x6>
			sys_slist_remove(&conn->channels, prev, &chan->node);
    71b6:	f103 0108 	add.w	r1, r3, #8
	if (!prev_node) {
    71ba:	b142      	cbz	r2, 71ce <bt_l2cap_chan_remove+0x2a>
		prev_node->next = node->next;
    71bc:	689c      	ldr	r4, [r3, #8]
    71be:	6014      	str	r4, [r2, #0]
		if (list->tail == node) {
    71c0:	6c04      	ldr	r4, [r0, #64]	; 0x40
    71c2:	42a1      	cmp	r1, r4
    71c4:	d00a      	beq.n	71dc <bt_l2cap_chan_remove+0x38>
	node->next = NULL;
    71c6:	2200      	movs	r2, #0
    71c8:	609a      	str	r2, [r3, #8]
}
    71ca:	bc10      	pop	{r4}
    71cc:	4770      	bx	lr
		list->head = node->next;
    71ce:	689a      	ldr	r2, [r3, #8]
    71d0:	63c2      	str	r2, [r0, #60]	; 0x3c
		if (list->tail == node) {
    71d2:	6c04      	ldr	r4, [r0, #64]	; 0x40
    71d4:	428c      	cmp	r4, r1
    71d6:	d1f6      	bne.n	71c6 <bt_l2cap_chan_remove+0x22>
			list->tail = list->head;
    71d8:	6402      	str	r2, [r0, #64]	; 0x40
    71da:	e7f4      	b.n	71c6 <bt_l2cap_chan_remove+0x22>
			list->tail = prev_node;
    71dc:	6402      	str	r2, [r0, #64]	; 0x40
    71de:	e7f2      	b.n	71c6 <bt_l2cap_chan_remove+0x22>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    71e0:	4614      	mov	r4, r2
    71e2:	e009      	b.n	71f8 <bt_l2cap_chan_remove+0x54>
    71e4:	4613      	mov	r3, r2
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    71e6:	3b08      	subs	r3, #8
    71e8:	2b00      	cmp	r3, #0
    71ea:	d0ee      	beq.n	71ca <bt_l2cap_chan_remove+0x26>
		if (chan == ch) {
    71ec:	428b      	cmp	r3, r1
    71ee:	d0e2      	beq.n	71b6 <bt_l2cap_chan_remove+0x12>
    71f0:	f113 0208 	adds.w	r2, r3, #8
    71f4:	d0f4      	beq.n	71e0 <bt_l2cap_chan_remove+0x3c>
	return node->next;
    71f6:	689c      	ldr	r4, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    71f8:	b11c      	cbz	r4, 7202 <bt_l2cap_chan_remove+0x5e>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    71fa:	2a00      	cmp	r2, #0
    71fc:	d0f2      	beq.n	71e4 <bt_l2cap_chan_remove+0x40>
	return node->next;
    71fe:	689b      	ldr	r3, [r3, #8]
    7200:	e7f1      	b.n	71e6 <bt_l2cap_chan_remove+0x42>
    7202:	2300      	movs	r3, #0
    7204:	e7f0      	b.n	71e8 <bt_l2cap_chan_remove+0x44>
    7206:	4770      	bx	lr

00007208 <bt_l2cap_chan_set_state>:
	chan->state = state;
    7208:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
    720c:	4770      	bx	lr

0000720e <bt_l2cap_chan_del>:
{
    720e:	b510      	push	{r4, lr}
    7210:	4604      	mov	r4, r0
	if (!chan->conn) {
    7212:	6803      	ldr	r3, [r0, #0]
    7214:	b12b      	cbz	r3, 7222 <bt_l2cap_chan_del+0x14>
	if (chan->ops->disconnected) {
    7216:	6843      	ldr	r3, [r0, #4]
    7218:	685b      	ldr	r3, [r3, #4]
    721a:	b103      	cbz	r3, 721e <bt_l2cap_chan_del+0x10>
		chan->ops->disconnected(chan);
    721c:	4798      	blx	r3
	chan->conn = NULL;
    721e:	2300      	movs	r3, #0
    7220:	6023      	str	r3, [r4, #0]
	bt_l2cap_chan_set_state(chan, BT_L2CAP_DISCONNECTED);
    7222:	2100      	movs	r1, #0
    7224:	4620      	mov	r0, r4
    7226:	f7ff ffef 	bl	7208 <bt_l2cap_chan_set_state>
	chan->psm = 0;
    722a:	2300      	movs	r3, #0
    722c:	8763      	strh	r3, [r4, #58]	; 0x3a
	if (chan->destroy) {
    722e:	68e3      	ldr	r3, [r4, #12]
    7230:	b10b      	cbz	r3, 7236 <bt_l2cap_chan_del+0x28>
		chan->destroy(chan);
    7232:	4620      	mov	r0, r4
    7234:	4798      	blx	r3
    7236:	bd10      	pop	{r4, pc}

00007238 <l2cap_rtx_timeout>:
{
    7238:	b510      	push	{r4, lr}
	bt_l2cap_chan_remove(chan->chan.conn, &chan->chan);
    723a:	f1a0 0410 	sub.w	r4, r0, #16
    723e:	4621      	mov	r1, r4
    7240:	f850 0c10 	ldr.w	r0, [r0, #-16]
    7244:	f7ff ffae 	bl	71a4 <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
    7248:	4620      	mov	r0, r4
    724a:	f7ff ffe0 	bl	720e <bt_l2cap_chan_del>
    724e:	bd10      	pop	{r4, pc}

00007250 <le_conn_rsp>:
{
    7250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct bt_conn *conn = l2cap->chan.chan.conn;
    7254:	6806      	ldr	r6, [r0, #0]
	struct bt_l2cap_le_conn_rsp *rsp = (void *)buf->data;
    7256:	6893      	ldr	r3, [r2, #8]
	if (buf->len < sizeof(*rsp)) {
    7258:	8992      	ldrh	r2, [r2, #12]
    725a:	2a09      	cmp	r2, #9
    725c:	d927      	bls.n	72ae <le_conn_rsp+0x5e>
	dcid = sys_le16_to_cpu(rsp->dcid);
    725e:	f8b3 a000 	ldrh.w	sl, [r3]
	mtu = sys_le16_to_cpu(rsp->mtu);
    7262:	f8b3 9002 	ldrh.w	r9, [r3, #2]
	mps = sys_le16_to_cpu(rsp->mps);
    7266:	f8b3 8004 	ldrh.w	r8, [r3, #4]
	credits = sys_le16_to_cpu(rsp->credits);
    726a:	88df      	ldrh	r7, [r3, #6]
	result = sys_le16_to_cpu(rsp->result);
    726c:	891d      	ldrh	r5, [r3, #8]
	if (result == BT_L2CAP_SUCCESS ||
    726e:	b14d      	cbz	r5, 7284 <le_conn_rsp+0x34>
    7270:	2d05      	cmp	r5, #5
    7272:	d007      	beq.n	7284 <le_conn_rsp+0x34>
	    result == BT_L2CAP_ERR_AUTHENTICATION ||
    7274:	2d08      	cmp	r5, #8
    7276:	d005      	beq.n	7284 <le_conn_rsp+0x34>
		chan = l2cap_remove_ident(conn, ident);
    7278:	2201      	movs	r2, #1
    727a:	4630      	mov	r0, r6
    727c:	f7ff fe0a 	bl	6e94 <__l2cap_lookup_ident>
    7280:	4604      	mov	r4, r0
    7282:	e004      	b.n	728e <le_conn_rsp+0x3e>
		chan = l2cap_lookup_ident(conn, ident);
    7284:	2200      	movs	r2, #0
    7286:	4630      	mov	r0, r6
    7288:	f7ff fe04 	bl	6e94 <__l2cap_lookup_ident>
    728c:	4604      	mov	r4, r0
	if (!chan) {
    728e:	b174      	cbz	r4, 72ae <le_conn_rsp+0x5e>
	k_delayed_work_cancel(&chan->chan.rtx_work);
    7290:	f104 0010 	add.w	r0, r4, #16
    7294:	f022 f870 	bl	29378 <k_delayed_work_cancel>
	chan->chan.ident = 0;
    7298:	2300      	movs	r3, #0
    729a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
	switch (result) {
    729e:	2d05      	cmp	r5, #5
    72a0:	d021      	beq.n	72e6 <le_conn_rsp+0x96>
    72a2:	2d08      	cmp	r5, #8
    72a4:	d01f      	beq.n	72e6 <le_conn_rsp+0x96>
    72a6:	b125      	cbz	r5, 72b2 <le_conn_rsp+0x62>
		bt_l2cap_chan_del(&chan->chan);
    72a8:	4620      	mov	r0, r4
    72aa:	f7ff ffb0 	bl	720e <bt_l2cap_chan_del>
    72ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		chan->tx.cid = dcid;
    72b2:	f8a4 a060 	strh.w	sl, [r4, #96]	; 0x60
		chan->tx.mtu = mtu;
    72b6:	f8a4 9062 	strh.w	r9, [r4, #98]	; 0x62
		chan->tx.mps = mps;
    72ba:	f8a4 8064 	strh.w	r8, [r4, #100]	; 0x64
		bt_l2cap_chan_set_state(&chan->chan, BT_L2CAP_CONNECTED);
    72be:	2103      	movs	r1, #3
    72c0:	4620      	mov	r0, r4
    72c2:	f7ff ffa1 	bl	7208 <bt_l2cap_chan_set_state>
		if (chan->chan.ops->connected) {
    72c6:	6863      	ldr	r3, [r4, #4]
    72c8:	681b      	ldr	r3, [r3, #0]
    72ca:	b10b      	cbz	r3, 72d0 <le_conn_rsp+0x80>
			chan->chan.ops->connected(&chan->chan);
    72cc:	4620      	mov	r0, r4
    72ce:	4798      	blx	r3
		l2cap_chan_tx_give_credits(chan, credits);
    72d0:	4639      	mov	r1, r7
    72d2:	4620      	mov	r0, r4
    72d4:	f7ff feab 	bl	702e <l2cap_chan_tx_give_credits>
		l2cap_chan_rx_give_credits(chan, chan->rx.init_credits);
    72d8:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
    72dc:	4620      	mov	r0, r4
    72de:	f7ff fe99 	bl	7014 <l2cap_chan_rx_give_credits>
		break;
    72e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (l2cap_change_security(chan, result) == 0) {
    72e6:	4629      	mov	r1, r5
    72e8:	4620      	mov	r0, r4
    72ea:	f7ff ff19 	bl	7120 <l2cap_change_security>
    72ee:	2800      	cmp	r0, #0
    72f0:	d0dd      	beq.n	72ae <le_conn_rsp+0x5e>
		bt_l2cap_chan_remove(conn, &chan->chan);
    72f2:	4621      	mov	r1, r4
    72f4:	4630      	mov	r0, r6
    72f6:	f7ff ff55 	bl	71a4 <bt_l2cap_chan_remove>
    72fa:	e7d5      	b.n	72a8 <le_conn_rsp+0x58>

000072fc <le_disconn_rsp>:
{
    72fc:	b508      	push	{r3, lr}
	struct bt_conn *conn = l2cap->chan.chan.conn;
    72fe:	6800      	ldr	r0, [r0, #0]
	struct bt_l2cap_disconn_rsp *rsp = (void *)buf->data;
    7300:	6891      	ldr	r1, [r2, #8]
	if (buf->len < sizeof(*rsp)) {
    7302:	8993      	ldrh	r3, [r2, #12]
    7304:	2b03      	cmp	r3, #3
    7306:	d800      	bhi.n	730a <le_disconn_rsp+0xe>
    7308:	bd08      	pop	{r3, pc}
	chan = l2cap_remove_tx_cid(conn, dcid);
    730a:	8809      	ldrh	r1, [r1, #0]
    730c:	f7ff fe18 	bl	6f40 <l2cap_remove_tx_cid>
	if (!chan) {
    7310:	2800      	cmp	r0, #0
    7312:	d0f9      	beq.n	7308 <le_disconn_rsp+0xc>
	bt_l2cap_chan_del(&chan->chan);
    7314:	f7ff ff7b 	bl	720e <bt_l2cap_chan_del>
    7318:	e7f6      	b.n	7308 <le_disconn_rsp+0xc>

0000731a <reject_cmd>:
{
    731a:	b508      	push	{r3, lr}
	chan = l2cap_remove_ident(conn, ident);
    731c:	2201      	movs	r2, #1
    731e:	6800      	ldr	r0, [r0, #0]
    7320:	f7ff fdb8 	bl	6e94 <__l2cap_lookup_ident>
	if (!chan) {
    7324:	b108      	cbz	r0, 732a <reject_cmd+0x10>
	bt_l2cap_chan_del(&chan->chan);
    7326:	f7ff ff72 	bl	720e <bt_l2cap_chan_del>
    732a:	bd08      	pop	{r3, pc}

0000732c <bt_l2cap_chan_add>:
{
    732c:	b410      	push	{r4}
	sys_slist_append(&conn->channels, &chan->node);
    732e:	f101 0308 	add.w	r3, r1, #8
	node->next = NULL;
    7332:	2400      	movs	r4, #0
    7334:	608c      	str	r4, [r1, #8]
	if (!list->tail) {
    7336:	6c04      	ldr	r4, [r0, #64]	; 0x40
    7338:	b12c      	cbz	r4, 7346 <bt_l2cap_chan_add+0x1a>
		list->tail->next = node;
    733a:	6023      	str	r3, [r4, #0]
		list->tail = node;
    733c:	6403      	str	r3, [r0, #64]	; 0x40
	chan->conn = conn;
    733e:	6008      	str	r0, [r1, #0]
	chan->destroy = destroy;
    7340:	60ca      	str	r2, [r1, #12]
}
    7342:	bc10      	pop	{r4}
    7344:	4770      	bx	lr
		list->tail = node;
    7346:	6403      	str	r3, [r0, #64]	; 0x40
		list->head = node;
    7348:	63c3      	str	r3, [r0, #60]	; 0x3c
    734a:	e7f8      	b.n	733e <bt_l2cap_chan_add+0x12>

0000734c <bt_l2cap_disconnected>:
{
    734c:	b510      	push	{r4, lr}
	return list->head;
    734e:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
    7350:	b140      	cbz	r0, 7364 <bt_l2cap_disconnected+0x18>
    7352:	3808      	subs	r0, #8
    7354:	b140      	cbz	r0, 7368 <bt_l2cap_disconnected+0x1c>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    7356:	f110 0408 	adds.w	r4, r0, #8
    735a:	d000      	beq.n	735e <bt_l2cap_disconnected+0x12>
	return node->next;
    735c:	6884      	ldr	r4, [r0, #8]
    735e:	b12c      	cbz	r4, 736c <bt_l2cap_disconnected+0x20>
    7360:	3c08      	subs	r4, #8
    7362:	e00a      	b.n	737a <bt_l2cap_disconnected+0x2e>
    7364:	2000      	movs	r0, #0
    7366:	e7f5      	b.n	7354 <bt_l2cap_disconnected+0x8>
    7368:	4604      	mov	r4, r0
    736a:	e006      	b.n	737a <bt_l2cap_disconnected+0x2e>
    736c:	2400      	movs	r4, #0
    736e:	e004      	b.n	737a <bt_l2cap_disconnected+0x2e>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    7370:	461a      	mov	r2, r3
    7372:	e00a      	b.n	738a <bt_l2cap_disconnected+0x3e>
    7374:	3b08      	subs	r3, #8
    7376:	4620      	mov	r0, r4
    7378:	461c      	mov	r4, r3
    737a:	b178      	cbz	r0, 739c <bt_l2cap_disconnected+0x50>
		bt_l2cap_chan_del(chan);
    737c:	f7ff ff47 	bl	720e <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
    7380:	b144      	cbz	r4, 7394 <bt_l2cap_disconnected+0x48>
    7382:	f114 0308 	adds.w	r3, r4, #8
    7386:	d0f3      	beq.n	7370 <bt_l2cap_disconnected+0x24>
	return node->next;
    7388:	68a2      	ldr	r2, [r4, #8]
    738a:	b12a      	cbz	r2, 7398 <bt_l2cap_disconnected+0x4c>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    738c:	2b00      	cmp	r3, #0
    738e:	d0f1      	beq.n	7374 <bt_l2cap_disconnected+0x28>
	return node->next;
    7390:	68a3      	ldr	r3, [r4, #8]
    7392:	e7ef      	b.n	7374 <bt_l2cap_disconnected+0x28>
    7394:	4623      	mov	r3, r4
    7396:	e7ee      	b.n	7376 <bt_l2cap_disconnected+0x2a>
    7398:	2300      	movs	r3, #0
    739a:	e7ec      	b.n	7376 <bt_l2cap_disconnected+0x2a>
}
    739c:	bd10      	pop	{r4, pc}

0000739e <bt_l2cap_create_pdu>:
{
    739e:	b508      	push	{r3, lr}
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    73a0:	3104      	adds	r1, #4
    73a2:	f7ff fc61 	bl	6c68 <bt_conn_create_pdu>
}
    73a6:	bd08      	pop	{r3, pc}

000073a8 <l2cap_create_le_sig_pdu>:
{
    73a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    73aa:	460f      	mov	r7, r1
    73ac:	4616      	mov	r6, r2
    73ae:	461d      	mov	r5, r3
	buf = bt_l2cap_create_pdu(NULL, 0);
    73b0:	2100      	movs	r1, #0
    73b2:	4608      	mov	r0, r1
    73b4:	f7ff fff3 	bl	739e <bt_l2cap_create_pdu>
    73b8:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    73ba:	2104      	movs	r1, #4
    73bc:	3008      	adds	r0, #8
    73be:	f012 feed 	bl	1a19c <net_buf_simple_add>
	hdr->code = code;
    73c2:	7007      	strb	r7, [r0, #0]
	hdr->ident = ident;
    73c4:	7046      	strb	r6, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
    73c6:	8045      	strh	r5, [r0, #2]
}
    73c8:	4620      	mov	r0, r4
    73ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000073cc <l2cap_chan_create_seg>:
{
    73cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    73d0:	4605      	mov	r5, r0
    73d2:	460c      	mov	r4, r1
    73d4:	4690      	mov	r8, r2
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    73d6:	7988      	ldrb	r0, [r1, #6]
    73d8:	f012 fe1a 	bl	1a010 <net_buf_pool_get>
	if (buf->len + sdu_hdr_len > ch->tx.mps) {
    73dc:	89a3      	ldrh	r3, [r4, #12]
    73de:	4443      	add	r3, r8
    73e0:	f8b5 2064 	ldrh.w	r2, [r5, #100]	; 0x64
    73e4:	4293      	cmp	r3, r2
    73e6:	d802      	bhi.n	73ee <l2cap_chan_create_seg+0x22>
	if (pool->user_data_size < BT_BUF_USER_DATA_MIN) {
    73e8:	8ac3      	ldrh	r3, [r0, #22]
    73ea:	2b03      	cmp	r3, #3
    73ec:	d815      	bhi.n	741a <l2cap_chan_create_seg+0x4e>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    73ee:	79a0      	ldrb	r0, [r4, #6]
    73f0:	f012 fe0e 	bl	1a010 <net_buf_pool_get>
	if (pool->user_data_size >= BT_BUF_USER_DATA_MIN &&
    73f4:	8ac3      	ldrh	r3, [r0, #22]
    73f6:	2b03      	cmp	r3, #3
    73f8:	d902      	bls.n	7400 <l2cap_chan_create_seg+0x34>
	    pool->buf_size >= BT_L2CAP_BUF_SIZE(L2CAP_MAX_LE_MPS)) {
    73fa:	8a83      	ldrh	r3, [r0, #20]
	if (pool->user_data_size >= BT_BUF_USER_DATA_MIN &&
    73fc:	2b4b      	cmp	r3, #75	; 0x4b
    73fe:	d82e      	bhi.n	745e <l2cap_chan_create_seg+0x92>
	return bt_l2cap_create_pdu(NULL, 0);
    7400:	2100      	movs	r1, #0
    7402:	4608      	mov	r0, r1
    7404:	f7ff ffcb 	bl	739e <bt_l2cap_create_pdu>
    7408:	4606      	mov	r6, r0
	if (sdu_hdr_len) {
    740a:	f1b8 0f00 	cmp.w	r8, #0
    740e:	d038      	beq.n	7482 <l2cap_chan_create_seg+0xb6>
		net_buf_add_le16(seg, net_buf_frags_len(buf));
    7410:	f106 0008 	add.w	r0, r6, #8
    7414:	4623      	mov	r3, r4
 *
 *  @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
	size_t bytes = 0;
    7416:	2100      	movs	r1, #0
    7418:	e02e      	b.n	7478 <l2cap_chan_create_seg+0xac>
	headroom = BT_L2CAP_CHAN_SEND_RESERVE + sdu_hdr_len;
    741a:	fa1f f688 	uxth.w	r6, r8
    741e:	3608      	adds	r6, #8
    7420:	b2b6      	uxth	r6, r6
	if (net_buf_headroom(buf) >= headroom && !buf->frags) {
    7422:	f104 0708 	add.w	r7, r4, #8
    7426:	4638      	mov	r0, r7
    7428:	f012 ff1d 	bl	1a266 <net_buf_simple_headroom>
    742c:	42b0      	cmp	r0, r6
    742e:	d3de      	bcc.n	73ee <l2cap_chan_create_seg+0x22>
    7430:	6823      	ldr	r3, [r4, #0]
    7432:	2b00      	cmp	r3, #0
    7434:	d1db      	bne.n	73ee <l2cap_chan_create_seg+0x22>
		if (sdu_hdr_len) {
    7436:	f1b8 0f00 	cmp.w	r8, #0
    743a:	d00b      	beq.n	7454 <l2cap_chan_create_seg+0x88>
    743c:	4623      	mov	r3, r4
    743e:	2100      	movs	r1, #0
    7440:	e002      	b.n	7448 <l2cap_chan_create_seg+0x7c>

	while (buf) {
		bytes += buf->len;
    7442:	899a      	ldrh	r2, [r3, #12]
    7444:	4411      	add	r1, r2
		buf = buf->frags;
    7446:	681b      	ldr	r3, [r3, #0]
	while (buf) {
    7448:	2b00      	cmp	r3, #0
    744a:	d1fa      	bne.n	7442 <l2cap_chan_create_seg+0x76>
			net_buf_push_le16(buf, net_buf_frags_len(buf));
    744c:	b289      	uxth	r1, r1
    744e:	4638      	mov	r0, r7
    7450:	f012 fee3 	bl	1a21a <net_buf_simple_push_le16>
		return net_buf_ref(buf);
    7454:	4620      	mov	r0, r4
    7456:	f012 fe71 	bl	1a13c <net_buf_ref>
    745a:	4606      	mov	r6, r0
    745c:	e02f      	b.n	74be <l2cap_chan_create_seg+0xf2>
		seg = net_buf_alloc(pool, K_NO_WAIT);
    745e:	2100      	movs	r1, #0
    7460:	f012 fde2 	bl	1a028 <net_buf_alloc>
		if (seg) {
    7464:	4606      	mov	r6, r0
    7466:	2800      	cmp	r0, #0
    7468:	d0ca      	beq.n	7400 <l2cap_chan_create_seg+0x34>
			net_buf_reserve(seg, BT_L2CAP_CHAN_SEND_RESERVE);
    746a:	2108      	movs	r1, #8
    746c:	f012 fe37 	bl	1a0de <net_buf_reserve>
    7470:	e7cb      	b.n	740a <l2cap_chan_create_seg+0x3e>
		bytes += buf->len;
    7472:	899a      	ldrh	r2, [r3, #12]
    7474:	4411      	add	r1, r2
		buf = buf->frags;
    7476:	681b      	ldr	r3, [r3, #0]
	while (buf) {
    7478:	2b00      	cmp	r3, #0
    747a:	d1fa      	bne.n	7472 <l2cap_chan_create_seg+0xa6>
		net_buf_add_le16(seg, net_buf_frags_len(buf));
    747c:	b289      	uxth	r1, r1
    747e:	f012 fea5 	bl	1a1cc <net_buf_simple_add_le16>
	len = min(net_buf_tailroom(seg), ch->tx.mps - sdu_hdr_len);
    7482:	f106 0708 	add.w	r7, r6, #8
    7486:	4638      	mov	r0, r7
    7488:	f012 fef1 	bl	1a26e <net_buf_simple_tailroom>
    748c:	f8b5 5064 	ldrh.w	r5, [r5, #100]	; 0x64
    7490:	eba5 0308 	sub.w	r3, r5, r8
    7494:	4298      	cmp	r0, r3
    7496:	d315      	bcc.n	74c4 <l2cap_chan_create_seg+0xf8>
    7498:	fa1f f888 	uxth.w	r8, r8
    749c:	eba5 0508 	sub.w	r5, r5, r8
    74a0:	b2ad      	uxth	r5, r5
	len = min(buf->len, len);
    74a2:	89a0      	ldrh	r0, [r4, #12]
    74a4:	4285      	cmp	r5, r0
    74a6:	bf28      	it	cs
    74a8:	4605      	movcs	r5, r0
	net_buf_add_mem(seg, buf->data, len);
    74aa:	462a      	mov	r2, r5
    74ac:	f854 1f08 	ldr.w	r1, [r4, #8]!
    74b0:	4638      	mov	r0, r7
    74b2:	f012 fe79 	bl	1a1a8 <net_buf_simple_add_mem>
	net_buf_pull(buf, len);
    74b6:	4629      	mov	r1, r5
    74b8:	4620      	mov	r0, r4
    74ba:	f012 febc 	bl	1a236 <net_buf_simple_pull>
}
    74be:	4630      	mov	r0, r6
    74c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	len = min(net_buf_tailroom(seg), ch->tx.mps - sdu_hdr_len);
    74c4:	4638      	mov	r0, r7
    74c6:	f012 fed2 	bl	1a26e <net_buf_simple_tailroom>
    74ca:	b285      	uxth	r5, r0
    74cc:	e7e9      	b.n	74a2 <l2cap_chan_create_seg+0xd6>

000074ce <bt_l2cap_send_cb>:
{
    74ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    74d0:	4605      	mov	r5, r0
    74d2:	460f      	mov	r7, r1
    74d4:	4614      	mov	r4, r2
    74d6:	461e      	mov	r6, r3
	hdr = net_buf_push(buf, sizeof(*hdr));
    74d8:	2104      	movs	r1, #4
    74da:	f102 0008 	add.w	r0, r2, #8
    74de:	f012 fe94 	bl	1a20a <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    74e2:	89a3      	ldrh	r3, [r4, #12]
    74e4:	3b04      	subs	r3, #4
    74e6:	8003      	strh	r3, [r0, #0]
	hdr->cid = sys_cpu_to_le16(cid);
    74e8:	8047      	strh	r7, [r0, #2]
	bt_conn_send_cb(conn, buf, cb);
    74ea:	4632      	mov	r2, r6
    74ec:	4621      	mov	r1, r4
    74ee:	4628      	mov	r0, r5
    74f0:	f7fe ffbe 	bl	6470 <bt_conn_send_cb>
    74f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000074f8 <l2cap_chan_send_req>:
{
    74f8:	b538      	push	{r3, r4, r5, lr}
    74fa:	4604      	mov	r4, r0
    74fc:	460d      	mov	r5, r1
	if (timeout) {
    74fe:	b94a      	cbnz	r2, 7514 <l2cap_chan_send_req+0x1c>
		k_delayed_work_cancel(&chan->chan.rtx_work);
    7500:	3010      	adds	r0, #16
    7502:	f021 ff39 	bl	29378 <k_delayed_work_cancel>
		      bt_conn_tx_cb_t cb);

static inline void bt_l2cap_send(struct bt_conn *conn, u16_t cid,
				 struct net_buf *buf)
{
	bt_l2cap_send_cb(conn, cid, buf, NULL);
    7506:	2300      	movs	r3, #0
    7508:	462a      	mov	r2, r5
    750a:	2105      	movs	r1, #5
    750c:	6820      	ldr	r0, [r4, #0]
    750e:	f7ff ffde 	bl	74ce <bt_l2cap_send_cb>
    7512:	bd38      	pop	{r3, r4, r5, pc}
    7514:	f100 0110 	add.w	r1, r0, #16
    7518:	4801      	ldr	r0, [pc, #4]	; (7520 <l2cap_chan_send_req+0x28>)
    751a:	f021 ff87 	bl	2942c <k_delayed_work_submit_to_queue>
    751e:	e7f2      	b.n	7506 <l2cap_chan_send_req+0xe>
    7520:	20002b08 	.word	0x20002b08

00007524 <l2cap_le_conn_req>:
{
    7524:	b538      	push	{r3, r4, r5, lr}
    7526:	4604      	mov	r4, r0
	ch->chan.ident = get_ident();
    7528:	f7ff fca6 	bl	6e78 <get_ident>
    752c:	4602      	mov	r2, r0
    752e:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_LE_CONN_REQ,
    7532:	230a      	movs	r3, #10
    7534:	2114      	movs	r1, #20
    7536:	2000      	movs	r0, #0
    7538:	f7ff ff36 	bl	73a8 <l2cap_create_le_sig_pdu>
    753c:	4605      	mov	r5, r0
	req = net_buf_add(buf, sizeof(*req));
    753e:	210a      	movs	r1, #10
    7540:	3008      	adds	r0, #8
    7542:	f012 fe2b 	bl	1a19c <net_buf_simple_add>
	req->psm = sys_cpu_to_le16(ch->chan.psm);
    7546:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
    7548:	8003      	strh	r3, [r0, #0]
	req->scid = sys_cpu_to_le16(ch->rx.cid);
    754a:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
    754e:	8043      	strh	r3, [r0, #2]
	req->mtu = sys_cpu_to_le16(ch->rx.mtu);
    7550:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
    7554:	8083      	strh	r3, [r0, #4]
	req->mps = sys_cpu_to_le16(ch->rx.mps);
    7556:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
    755a:	80c3      	strh	r3, [r0, #6]
	req->credits = sys_cpu_to_le16(ch->rx.init_credits);
    755c:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
    7560:	8103      	strh	r3, [r0, #8]
	l2cap_chan_send_req(ch, buf, L2CAP_CONN_TIMEOUT);
    7562:	f649 4240 	movw	r2, #40000	; 0x9c40
    7566:	4629      	mov	r1, r5
    7568:	4620      	mov	r0, r4
    756a:	f7ff ffc5 	bl	74f8 <l2cap_chan_send_req>
}
    756e:	2000      	movs	r0, #0
    7570:	bd38      	pop	{r3, r4, r5, pc}

00007572 <l2cap_le_encrypt_change>:
	if (chan->state != BT_L2CAP_CONNECT || chan->ident) {
    7572:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
    7576:	2b01      	cmp	r3, #1
    7578:	d000      	beq.n	757c <l2cap_le_encrypt_change+0xa>
    757a:	4770      	bx	lr
    757c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
    7580:	2b00      	cmp	r3, #0
    7582:	d1fa      	bne.n	757a <l2cap_le_encrypt_change+0x8>
{
    7584:	b510      	push	{r4, lr}
    7586:	4604      	mov	r4, r0
	if (status) {
    7588:	b911      	cbnz	r1, 7590 <l2cap_le_encrypt_change+0x1e>
	l2cap_le_conn_req(BT_L2CAP_LE_CHAN(chan));
    758a:	f7ff ffcb 	bl	7524 <l2cap_le_conn_req>
    758e:	bd10      	pop	{r4, pc}
		bt_l2cap_chan_remove(chan->conn, chan);
    7590:	4601      	mov	r1, r0
    7592:	6800      	ldr	r0, [r0, #0]
    7594:	f7ff fe06 	bl	71a4 <bt_l2cap_chan_remove>
		bt_l2cap_chan_del(chan);
    7598:	4620      	mov	r0, r4
    759a:	f7ff fe38 	bl	720e <bt_l2cap_chan_del>
		return;
    759e:	bd10      	pop	{r4, pc}

000075a0 <bt_l2cap_encrypt_change>:
{
    75a0:	b538      	push	{r3, r4, r5, lr}
    75a2:	460d      	mov	r5, r1
	return list->head;
    75a4:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    75a6:	b10c      	cbz	r4, 75ac <bt_l2cap_encrypt_change+0xc>
    75a8:	3c08      	subs	r4, #8
    75aa:	e00a      	b.n	75c2 <bt_l2cap_encrypt_change+0x22>
    75ac:	2400      	movs	r4, #0
    75ae:	e008      	b.n	75c2 <bt_l2cap_encrypt_change+0x22>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    75b0:	f114 0308 	adds.w	r3, r4, #8
    75b4:	d012      	beq.n	75dc <bt_l2cap_encrypt_change+0x3c>
	return node->next;
    75b6:	68a2      	ldr	r2, [r4, #8]
    75b8:	b192      	cbz	r2, 75e0 <bt_l2cap_encrypt_change+0x40>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    75ba:	b103      	cbz	r3, 75be <bt_l2cap_encrypt_change+0x1e>
	return node->next;
    75bc:	68a3      	ldr	r3, [r4, #8]
    75be:	f1a3 0408 	sub.w	r4, r3, #8
    75c2:	b17c      	cbz	r4, 75e4 <bt_l2cap_encrypt_change+0x44>
		l2cap_le_encrypt_change(chan, hci_status);
    75c4:	4629      	mov	r1, r5
    75c6:	4620      	mov	r0, r4
    75c8:	f7ff ffd3 	bl	7572 <l2cap_le_encrypt_change>
		if (chan->ops->encrypt_change) {
    75cc:	6863      	ldr	r3, [r4, #4]
    75ce:	689b      	ldr	r3, [r3, #8]
    75d0:	2b00      	cmp	r3, #0
    75d2:	d0ed      	beq.n	75b0 <bt_l2cap_encrypt_change+0x10>
			chan->ops->encrypt_change(chan, hci_status);
    75d4:	4629      	mov	r1, r5
    75d6:	4620      	mov	r0, r4
    75d8:	4798      	blx	r3
    75da:	e7e9      	b.n	75b0 <bt_l2cap_encrypt_change+0x10>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    75dc:	461a      	mov	r2, r3
    75de:	e7eb      	b.n	75b8 <bt_l2cap_encrypt_change+0x18>
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    75e0:	2400      	movs	r4, #0
    75e2:	e7ee      	b.n	75c2 <bt_l2cap_encrypt_change+0x22>
}
    75e4:	bd38      	pop	{r3, r4, r5, pc}

000075e6 <l2cap_chan_update_credits>:
{
    75e6:	b570      	push	{r4, r5, r6, lr}
 */
__syscall unsigned int k_sem_count_get(struct k_sem *sem);

static inline unsigned int _impl_k_sem_count_get(struct k_sem *sem)
{
	return sem->count;
    75e8:	6d04      	ldr	r4, [r0, #80]	; 0x50
	    L2CAP_LE_CREDITS_THRESHOLD(chan->rx.init_credits)) {
    75ea:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
	if (k_sem_count_get(&chan->rx.credits) >
    75ee:	ebb4 0f53 	cmp.w	r4, r3, lsr #1
    75f2:	d900      	bls.n	75f6 <l2cap_chan_update_credits+0x10>
    75f4:	bd70      	pop	{r4, r5, r6, pc}
    75f6:	460e      	mov	r6, r1
    75f8:	4605      	mov	r5, r0
	credits = chan->rx.init_credits - k_sem_count_get(&chan->rx.credits);
    75fa:	b2a4      	uxth	r4, r4
    75fc:	1b1b      	subs	r3, r3, r4
    75fe:	b29c      	uxth	r4, r3
	l2cap_chan_rx_give_credits(chan, credits);
    7600:	4621      	mov	r1, r4
    7602:	f7ff fd07 	bl	7014 <l2cap_chan_rx_give_credits>
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_LE_CREDITS, get_ident(),
    7606:	f7ff fc37 	bl	6e78 <get_ident>
    760a:	2304      	movs	r3, #4
    760c:	4602      	mov	r2, r0
    760e:	2116      	movs	r1, #22
    7610:	4630      	mov	r0, r6
    7612:	f7ff fec9 	bl	73a8 <l2cap_create_le_sig_pdu>
    7616:	4606      	mov	r6, r0
	ev = net_buf_add(buf, sizeof(*ev));
    7618:	2104      	movs	r1, #4
    761a:	3008      	adds	r0, #8
    761c:	f012 fdbe 	bl	1a19c <net_buf_simple_add>
	ev->cid = sys_cpu_to_le16(chan->rx.cid);
    7620:	f8b5 3040 	ldrh.w	r3, [r5, #64]	; 0x40
    7624:	8003      	strh	r3, [r0, #0]
	ev->credits = sys_cpu_to_le16(credits);
    7626:	8044      	strh	r4, [r0, #2]
    7628:	2300      	movs	r3, #0
    762a:	4632      	mov	r2, r6
    762c:	2105      	movs	r1, #5
    762e:	6828      	ldr	r0, [r5, #0]
    7630:	f7ff ff4d 	bl	74ce <bt_l2cap_send_cb>
}
    7634:	e7de      	b.n	75f4 <l2cap_chan_update_credits+0xe>

00007636 <l2cap_chan_le_send>:
{
    7636:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7638:	4604      	mov	r4, r0
    763a:	460d      	mov	r5, r1
    763c:	4616      	mov	r6, r2
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    763e:	2100      	movs	r1, #0
    7640:	3068      	adds	r0, #104	; 0x68
    7642:	f021 f8bd 	bl	287c0 <_impl_k_sem_take>
	if (k_sem_take(&ch->tx.credits, K_NO_WAIT)) {
    7646:	b9b0      	cbnz	r0, 7676 <l2cap_chan_le_send+0x40>
	buf = l2cap_chan_create_seg(ch, buf, sdu_hdr_len);
    7648:	4632      	mov	r2, r6
    764a:	4629      	mov	r1, r5
    764c:	4620      	mov	r0, r4
    764e:	f7ff febd 	bl	73cc <l2cap_chan_create_seg>
	if (!ch->chan.conn) {
    7652:	6827      	ldr	r7, [r4, #0]
    7654:	b157      	cbz	r7, 766c <l2cap_chan_le_send+0x36>
	len = buf->len - sdu_hdr_len;
    7656:	8985      	ldrh	r5, [r0, #12]
    7658:	1bad      	subs	r5, r5, r6
    765a:	2300      	movs	r3, #0
    765c:	4602      	mov	r2, r0
    765e:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
    7662:	4638      	mov	r0, r7
    7664:	f7ff ff33 	bl	74ce <bt_l2cap_send_cb>
}
    7668:	4628      	mov	r0, r5
    766a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		net_buf_unref(buf);
    766c:	f012 fd4a 	bl	1a104 <net_buf_unref>
		return -ECONNRESET;
    7670:	f06f 0567 	mvn.w	r5, #103	; 0x67
    7674:	e7f8      	b.n	7668 <l2cap_chan_le_send+0x32>
		return -EAGAIN;
    7676:	f06f 050a 	mvn.w	r5, #10
    767a:	e7f5      	b.n	7668 <l2cap_chan_le_send+0x32>

0000767c <l2cap_chan_le_send_sdu>:
{
    767c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7680:	b082      	sub	sp, #8
    7682:	9201      	str	r2, [sp, #4]
	total_len = net_buf_frags_len(*buf) + sent;
    7684:	680d      	ldr	r5, [r1, #0]
    7686:	462b      	mov	r3, r5
	size_t bytes = 0;
    7688:	2200      	movs	r2, #0
    768a:	e002      	b.n	7692 <l2cap_chan_le_send_sdu+0x16>
		bytes += buf->len;
    768c:	899c      	ldrh	r4, [r3, #12]
    768e:	4422      	add	r2, r4
		buf = buf->frags;
    7690:	681b      	ldr	r3, [r3, #0]
	while (buf) {
    7692:	2b00      	cmp	r3, #0
    7694:	d1fa      	bne.n	768c <l2cap_chan_le_send_sdu+0x10>
    7696:	9b01      	ldr	r3, [sp, #4]
    7698:	189c      	adds	r4, r3, r2
	if (total_len > ch->tx.mtu) {
    769a:	f8b0 2062 	ldrh.w	r2, [r0, #98]	; 0x62
    769e:	4294      	cmp	r4, r2
    76a0:	dc54      	bgt.n	774c <l2cap_chan_le_send_sdu+0xd0>
	if (!frag->len && frag->frags) {
    76a2:	89aa      	ldrh	r2, [r5, #12]
    76a4:	b912      	cbnz	r2, 76ac <l2cap_chan_le_send_sdu+0x30>
    76a6:	682a      	ldr	r2, [r5, #0]
    76a8:	b102      	cbz	r2, 76ac <l2cap_chan_le_send_sdu+0x30>
		frag = frag->frags;
    76aa:	4615      	mov	r5, r2
    76ac:	4688      	mov	r8, r1
    76ae:	4607      	mov	r7, r0
	if (!sent) {
    76b0:	b10b      	cbz	r3, 76b6 <l2cap_chan_le_send_sdu+0x3a>
		frag = frag->frags;
    76b2:	2600      	movs	r6, #0
    76b4:	e024      	b.n	7700 <l2cap_chan_le_send_sdu+0x84>
		ret = l2cap_chan_le_send(ch, frag, BT_L2CAP_SDU_HDR_LEN);
    76b6:	2202      	movs	r2, #2
    76b8:	4629      	mov	r1, r5
    76ba:	f7ff ffbc 	bl	7636 <l2cap_chan_le_send>
		if (ret < 0) {
    76be:	1e06      	subs	r6, r0, #0
    76c0:	db01      	blt.n	76c6 <l2cap_chan_le_send_sdu+0x4a>
		sent = ret;
    76c2:	9601      	str	r6, [sp, #4]
    76c4:	e7f5      	b.n	76b2 <l2cap_chan_le_send_sdu+0x36>
			if (ret == -EAGAIN) {
    76c6:	f116 0f0b 	cmn.w	r6, #11
    76ca:	d002      	beq.n	76d2 <l2cap_chan_le_send_sdu+0x56>
			*buf = frag;
    76cc:	f8c8 5000 	str.w	r5, [r8]
			return ret;
    76d0:	e038      	b.n	7744 <l2cap_chan_le_send_sdu+0xc8>
	return (void *)ROUND_UP((buf->__buf + buf->size), sizeof(int));
    76d2:	f105 0010 	add.w	r0, r5, #16
    76d6:	89eb      	ldrh	r3, [r5, #14]
    76d8:	4418      	add	r0, r3
    76da:	3003      	adds	r0, #3
				memcpy(net_buf_user_data(frag), &sent,
    76dc:	2204      	movs	r2, #4
    76de:	eb0d 0102 	add.w	r1, sp, r2
    76e2:	f020 0003 	bic.w	r0, r0, #3
    76e6:	f7f8 fdeb 	bl	2c0 <memcpy>
    76ea:	e7ef      	b.n	76cc <l2cap_chan_le_send_sdu+0x50>
		ret = l2cap_chan_le_send(ch, frag, 0);
    76ec:	2200      	movs	r2, #0
    76ee:	4629      	mov	r1, r5
    76f0:	4638      	mov	r0, r7
    76f2:	f7ff ffa0 	bl	7636 <l2cap_chan_le_send>
		if (ret < 0) {
    76f6:	1e06      	subs	r6, r0, #0
    76f8:	db0e      	blt.n	7718 <l2cap_chan_le_send_sdu+0x9c>
	for (ret = 0; sent < total_len; sent += ret) {
    76fa:	9b01      	ldr	r3, [sp, #4]
    76fc:	4433      	add	r3, r6
    76fe:	9301      	str	r3, [sp, #4]
    7700:	9b01      	ldr	r3, [sp, #4]
    7702:	429c      	cmp	r4, r3
    7704:	dd1b      	ble.n	773e <l2cap_chan_le_send_sdu+0xc2>
		if (!frag->len) {
    7706:	89ab      	ldrh	r3, [r5, #12]
    7708:	2b00      	cmp	r3, #0
    770a:	d1ef      	bne.n	76ec <l2cap_chan_le_send_sdu+0x70>
			frag = net_buf_frag_del(NULL, frag);
    770c:	4629      	mov	r1, r5
    770e:	2000      	movs	r0, #0
    7710:	f012 fd38 	bl	1a184 <net_buf_frag_del>
    7714:	4605      	mov	r5, r0
    7716:	e7e9      	b.n	76ec <l2cap_chan_le_send_sdu+0x70>
			if (ret == -EAGAIN) {
    7718:	f116 0f0b 	cmn.w	r6, #11
    771c:	d002      	beq.n	7724 <l2cap_chan_le_send_sdu+0xa8>
			*buf = frag;
    771e:	f8c8 5000 	str.w	r5, [r8]
			return ret;
    7722:	e00f      	b.n	7744 <l2cap_chan_le_send_sdu+0xc8>
    7724:	f105 0010 	add.w	r0, r5, #16
    7728:	89eb      	ldrh	r3, [r5, #14]
    772a:	4418      	add	r0, r3
    772c:	3003      	adds	r0, #3
				memcpy(net_buf_user_data(frag), &sent,
    772e:	2204      	movs	r2, #4
    7730:	eb0d 0102 	add.w	r1, sp, r2
    7734:	f020 0003 	bic.w	r0, r0, #3
    7738:	f7f8 fdc2 	bl	2c0 <memcpy>
    773c:	e7ef      	b.n	771e <l2cap_chan_le_send_sdu+0xa2>
	net_buf_unref(frag);
    773e:	4628      	mov	r0, r5
    7740:	f012 fce0 	bl	1a104 <net_buf_unref>
}
    7744:	4630      	mov	r0, r6
    7746:	b002      	add	sp, #8
    7748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EMSGSIZE;
    774c:	f06f 0679 	mvn.w	r6, #121	; 0x79
    7750:	e7f8      	b.n	7744 <l2cap_chan_le_send_sdu+0xc8>

00007752 <l2cap_chan_le_send_resume>:
{
    7752:	b510      	push	{r4, lr}
    7754:	b082      	sub	sp, #8
    7756:	4604      	mov	r4, r0
	while ((buf = l2cap_chan_le_get_tx_buf(ch))) {
    7758:	4620      	mov	r0, r4
    775a:	f7ff fc91 	bl	7080 <l2cap_chan_le_get_tx_buf>
    775e:	9001      	str	r0, [sp, #4]
    7760:	b180      	cbz	r0, 7784 <l2cap_chan_le_send_resume+0x32>
    7762:	f100 0310 	add.w	r3, r0, #16
    7766:	89c2      	ldrh	r2, [r0, #14]
    7768:	4413      	add	r3, r2
    776a:	3303      	adds	r3, #3
    776c:	f023 0303 	bic.w	r3, r3, #3
		sent = l2cap_chan_le_send_sdu(ch, &buf, sent);
    7770:	681a      	ldr	r2, [r3, #0]
    7772:	a901      	add	r1, sp, #4
    7774:	4620      	mov	r0, r4
    7776:	f7ff ff81 	bl	767c <l2cap_chan_le_send_sdu>
		if (sent < 0) {
    777a:	2800      	cmp	r0, #0
    777c:	daec      	bge.n	7758 <l2cap_chan_le_send_resume+0x6>
			if (sent == -EAGAIN) {
    777e:	f110 0f0b 	cmn.w	r0, #11
    7782:	d001      	beq.n	7788 <l2cap_chan_le_send_resume+0x36>
}
    7784:	b002      	add	sp, #8
    7786:	bd10      	pop	{r4, pc}
				ch->tx_buf = buf;
    7788:	9b01      	ldr	r3, [sp, #4]
    778a:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
    778e:	e7f9      	b.n	7784 <l2cap_chan_le_send_resume+0x32>

00007790 <l2cap_send_reject>:
{
    7790:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7794:	4680      	mov	r8, r0
    7796:	4691      	mov	r9, r2
    7798:	461e      	mov	r6, r3
    779a:	f89d 7020 	ldrb.w	r7, [sp, #32]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    779e:	1cbb      	adds	r3, r7, #2
    77a0:	460a      	mov	r2, r1
    77a2:	2101      	movs	r1, #1
    77a4:	2000      	movs	r0, #0
    77a6:	f7ff fdff 	bl	73a8 <l2cap_create_le_sig_pdu>
    77aa:	4604      	mov	r4, r0
	rej = net_buf_add(buf, sizeof(*rej));
    77ac:	f100 0508 	add.w	r5, r0, #8
    77b0:	2102      	movs	r1, #2
    77b2:	4628      	mov	r0, r5
    77b4:	f012 fcf2 	bl	1a19c <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
    77b8:	f8a0 9000 	strh.w	r9, [r0]
	if (data) {
    77bc:	b126      	cbz	r6, 77c8 <l2cap_send_reject+0x38>
		net_buf_add_mem(buf, data, data_len);
    77be:	463a      	mov	r2, r7
    77c0:	4631      	mov	r1, r6
    77c2:	4628      	mov	r0, r5
    77c4:	f012 fcf0 	bl	1a1a8 <net_buf_simple_add_mem>
    77c8:	2300      	movs	r3, #0
    77ca:	4622      	mov	r2, r4
    77cc:	2105      	movs	r1, #5
    77ce:	4640      	mov	r0, r8
    77d0:	f7ff fe7d 	bl	74ce <bt_l2cap_send_cb>
    77d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000077d8 <le_conn_param_update_req>:
{
    77d8:	b570      	push	{r4, r5, r6, lr}
    77da:	b084      	sub	sp, #16
	struct bt_conn *conn = l2cap->chan.chan.conn;
    77dc:	6804      	ldr	r4, [r0, #0]
	struct bt_l2cap_conn_param_req *req = (void *)buf->data;
    77de:	6893      	ldr	r3, [r2, #8]
	if (buf->len < sizeof(*req)) {
    77e0:	8990      	ldrh	r0, [r2, #12]
    77e2:	2807      	cmp	r0, #7
    77e4:	d908      	bls.n	77f8 <le_conn_param_update_req+0x20>
    77e6:	4610      	mov	r0, r2
	if (conn->role != BT_HCI_ROLE_MASTER) {
    77e8:	78e2      	ldrb	r2, [r4, #3]
    77ea:	b13a      	cbz	r2, 77fc <le_conn_param_update_req+0x24>
		l2cap_send_reject(conn, ident, BT_L2CAP_REJ_NOT_UNDERSTOOD,
    77ec:	2200      	movs	r2, #0
    77ee:	9200      	str	r2, [sp, #0]
    77f0:	4613      	mov	r3, r2
    77f2:	4620      	mov	r0, r4
    77f4:	f7ff ffcc 	bl	7790 <l2cap_send_reject>
}
    77f8:	b004      	add	sp, #16
    77fa:	bd70      	pop	{r4, r5, r6, pc}
	param.interval_min = sys_le16_to_cpu(req->min_interval);
    77fc:	881a      	ldrh	r2, [r3, #0]
    77fe:	f8ad 2008 	strh.w	r2, [sp, #8]
	param.interval_max = sys_le16_to_cpu(req->max_interval);
    7802:	885a      	ldrh	r2, [r3, #2]
    7804:	f8ad 200a 	strh.w	r2, [sp, #10]
	param.latency = sys_le16_to_cpu(req->latency);
    7808:	889a      	ldrh	r2, [r3, #4]
    780a:	f8ad 200c 	strh.w	r2, [sp, #12]
	param.timeout = sys_le16_to_cpu(req->timeout);
    780e:	88db      	ldrh	r3, [r3, #6]
    7810:	f8ad 300e 	strh.w	r3, [sp, #14]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    7814:	2302      	movs	r3, #2
    7816:	460a      	mov	r2, r1
    7818:	2113      	movs	r1, #19
    781a:	f7ff fdc5 	bl	73a8 <l2cap_create_le_sig_pdu>
    781e:	4606      	mov	r6, r0
	accepted = le_param_req(conn, &param);
    7820:	a902      	add	r1, sp, #8
    7822:	4620      	mov	r0, r4
    7824:	f7fe fcc2 	bl	61ac <le_param_req>
    7828:	4605      	mov	r5, r0
	rsp = net_buf_add(buf, sizeof(*rsp));
    782a:	2102      	movs	r1, #2
    782c:	f106 0008 	add.w	r0, r6, #8
    7830:	f012 fcb4 	bl	1a19c <net_buf_simple_add>
	if (accepted) {
    7834:	b17d      	cbz	r5, 7856 <le_conn_param_update_req+0x7e>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_ACCEPTED);
    7836:	2300      	movs	r3, #0
    7838:	7003      	strb	r3, [r0, #0]
    783a:	7043      	strb	r3, [r0, #1]
    783c:	2300      	movs	r3, #0
    783e:	4632      	mov	r2, r6
    7840:	2105      	movs	r1, #5
    7842:	4620      	mov	r0, r4
    7844:	f7ff fe43 	bl	74ce <bt_l2cap_send_cb>
	if (accepted) {
    7848:	2d00      	cmp	r5, #0
    784a:	d0d5      	beq.n	77f8 <le_conn_param_update_req+0x20>
		bt_conn_le_conn_update(conn, &param);
    784c:	a902      	add	r1, sp, #8
    784e:	4620      	mov	r0, r4
    7850:	f7ff f976 	bl	6b40 <bt_conn_le_conn_update>
    7854:	e7d0      	b.n	77f8 <le_conn_param_update_req+0x20>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_REJECTED);
    7856:	2301      	movs	r3, #1
    7858:	7003      	strb	r3, [r0, #0]
    785a:	2300      	movs	r3, #0
    785c:	7043      	strb	r3, [r0, #1]
    785e:	e7ed      	b.n	783c <le_conn_param_update_req+0x64>

00007860 <le_disconn_req>:
{
    7860:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7864:	b084      	sub	sp, #16
	struct bt_conn *conn = l2cap->chan.chan.conn;
    7866:	6806      	ldr	r6, [r0, #0]
	struct bt_l2cap_disconn_req *req = (void *)buf->data;
    7868:	6897      	ldr	r7, [r2, #8]
	if (buf->len < sizeof(*req)) {
    786a:	8993      	ldrh	r3, [r2, #12]
    786c:	2b03      	cmp	r3, #3
    786e:	d802      	bhi.n	7876 <le_disconn_req+0x16>
}
    7870:	b004      	add	sp, #16
    7872:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7876:	4614      	mov	r4, r2
    7878:	460d      	mov	r5, r1
	chan = l2cap_remove_tx_cid(conn, scid);
    787a:	8879      	ldrh	r1, [r7, #2]
    787c:	4630      	mov	r0, r6
    787e:	f7ff fb5f 	bl	6f40 <l2cap_remove_tx_cid>
	if (!chan) {
    7882:	4680      	mov	r8, r0
    7884:	b1d0      	cbz	r0, 78bc <le_disconn_req+0x5c>
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_DISCONN_RSP, ident,
    7886:	2304      	movs	r3, #4
    7888:	462a      	mov	r2, r5
    788a:	2107      	movs	r1, #7
    788c:	4620      	mov	r0, r4
    788e:	f7ff fd8b 	bl	73a8 <l2cap_create_le_sig_pdu>
    7892:	4604      	mov	r4, r0
	rsp = net_buf_add(buf, sizeof(*rsp));
    7894:	2104      	movs	r1, #4
    7896:	3008      	adds	r0, #8
    7898:	f012 fc80 	bl	1a19c <net_buf_simple_add>
	rsp->dcid = sys_cpu_to_le16(chan->rx.cid);
    789c:	f8b8 3040 	ldrh.w	r3, [r8, #64]	; 0x40
    78a0:	8003      	strh	r3, [r0, #0]
	rsp->scid = sys_cpu_to_le16(chan->tx.cid);
    78a2:	f8b8 3060 	ldrh.w	r3, [r8, #96]	; 0x60
    78a6:	8043      	strh	r3, [r0, #2]
	bt_l2cap_chan_del(&chan->chan);
    78a8:	4640      	mov	r0, r8
    78aa:	f7ff fcb0 	bl	720e <bt_l2cap_chan_del>
    78ae:	2300      	movs	r3, #0
    78b0:	4622      	mov	r2, r4
    78b2:	2105      	movs	r1, #5
    78b4:	4630      	mov	r0, r6
    78b6:	f7ff fe0a 	bl	74ce <bt_l2cap_send_cb>
    78ba:	e7d9      	b.n	7870 <le_disconn_req+0x10>
		data.scid = req->scid;
    78bc:	887b      	ldrh	r3, [r7, #2]
    78be:	f8ad 300c 	strh.w	r3, [sp, #12]
		data.dcid = req->dcid;
    78c2:	883b      	ldrh	r3, [r7, #0]
    78c4:	f8ad 300e 	strh.w	r3, [sp, #14]
		l2cap_send_reject(conn, ident, BT_L2CAP_REJ_INVALID_CID, &data,
    78c8:	2304      	movs	r3, #4
    78ca:	9300      	str	r3, [sp, #0]
    78cc:	ab03      	add	r3, sp, #12
    78ce:	2202      	movs	r2, #2
    78d0:	4629      	mov	r1, r5
    78d2:	4630      	mov	r0, r6
    78d4:	f7ff ff5c 	bl	7790 <l2cap_send_reject>
    78d8:	e7ca      	b.n	7870 <le_disconn_req+0x10>

000078da <bt_l2cap_le_lookup_tx_cid>:
	return list->head;
    78da:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    78dc:	b108      	cbz	r0, 78e2 <bt_l2cap_le_lookup_tx_cid+0x8>
    78de:	3808      	subs	r0, #8
    78e0:	e006      	b.n	78f0 <bt_l2cap_le_lookup_tx_cid+0x16>
    78e2:	2000      	movs	r0, #0
    78e4:	e004      	b.n	78f0 <bt_l2cap_le_lookup_tx_cid+0x16>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    78e6:	461a      	mov	r2, r3
    78e8:	e00b      	b.n	7902 <bt_l2cap_le_lookup_tx_cid+0x28>
	return node->next;
    78ea:	6883      	ldr	r3, [r0, #8]
    78ec:	f1a3 0008 	sub.w	r0, r3, #8
    78f0:	b168      	cbz	r0, 790e <bt_l2cap_le_lookup_tx_cid+0x34>
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
    78f2:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
    78f6:	428b      	cmp	r3, r1
    78f8:	d009      	beq.n	790e <bt_l2cap_le_lookup_tx_cid+0x34>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    78fa:	f110 0308 	adds.w	r3, r0, #8
    78fe:	d0f2      	beq.n	78e6 <bt_l2cap_le_lookup_tx_cid+0xc>
	return node->next;
    7900:	6882      	ldr	r2, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    7902:	b112      	cbz	r2, 790a <bt_l2cap_le_lookup_tx_cid+0x30>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    7904:	2b00      	cmp	r3, #0
    7906:	d1f0      	bne.n	78ea <bt_l2cap_le_lookup_tx_cid+0x10>
    7908:	e7f0      	b.n	78ec <bt_l2cap_le_lookup_tx_cid+0x12>
    790a:	2000      	movs	r0, #0
    790c:	e7f0      	b.n	78f0 <bt_l2cap_le_lookup_tx_cid+0x16>
}
    790e:	4770      	bx	lr

00007910 <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
    7910:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    7912:	b108      	cbz	r0, 7918 <bt_l2cap_le_lookup_rx_cid+0x8>
    7914:	3808      	subs	r0, #8
    7916:	e006      	b.n	7926 <bt_l2cap_le_lookup_rx_cid+0x16>
    7918:	2000      	movs	r0, #0
    791a:	e004      	b.n	7926 <bt_l2cap_le_lookup_rx_cid+0x16>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    791c:	461a      	mov	r2, r3
    791e:	e00b      	b.n	7938 <bt_l2cap_le_lookup_rx_cid+0x28>
	return node->next;
    7920:	6883      	ldr	r3, [r0, #8]
    7922:	f1a3 0008 	sub.w	r0, r3, #8
    7926:	b168      	cbz	r0, 7944 <bt_l2cap_le_lookup_rx_cid+0x34>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
    7928:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
    792c:	428b      	cmp	r3, r1
    792e:	d009      	beq.n	7944 <bt_l2cap_le_lookup_rx_cid+0x34>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    7930:	f110 0308 	adds.w	r3, r0, #8
    7934:	d0f2      	beq.n	791c <bt_l2cap_le_lookup_rx_cid+0xc>
	return node->next;
    7936:	6882      	ldr	r2, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    7938:	b112      	cbz	r2, 7940 <bt_l2cap_le_lookup_rx_cid+0x30>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    793a:	2b00      	cmp	r3, #0
    793c:	d1f0      	bne.n	7920 <bt_l2cap_le_lookup_rx_cid+0x10>
    793e:	e7f0      	b.n	7922 <bt_l2cap_le_lookup_rx_cid+0x12>
    7940:	2000      	movs	r0, #0
    7942:	e7f0      	b.n	7926 <bt_l2cap_le_lookup_rx_cid+0x16>
}
    7944:	4770      	bx	lr

00007946 <l2cap_chan_alloc_cid>:
{
    7946:	b570      	push	{r4, r5, r6, lr}
    7948:	4606      	mov	r6, r0
	if (ch && ch->rx.cid > 0) {
    794a:	460d      	mov	r5, r1
    794c:	b1a1      	cbz	r1, 7978 <l2cap_chan_alloc_cid+0x32>
    794e:	f8b1 3040 	ldrh.w	r3, [r1, #64]	; 0x40
    7952:	b9ab      	cbnz	r3, 7980 <l2cap_chan_alloc_cid+0x3a>
    7954:	2440      	movs	r4, #64	; 0x40
    7956:	e001      	b.n	795c <l2cap_chan_alloc_cid+0x16>
	for (cid = L2CAP_LE_CID_DYN_START; cid <= L2CAP_LE_CID_DYN_END; cid++) {
    7958:	3401      	adds	r4, #1
    795a:	b2a4      	uxth	r4, r4
    795c:	2c7f      	cmp	r4, #127	; 0x7f
    795e:	d80d      	bhi.n	797c <l2cap_chan_alloc_cid+0x36>
		if (ch && !bt_l2cap_le_lookup_rx_cid(conn, cid)) {
    7960:	2d00      	cmp	r5, #0
    7962:	d0f9      	beq.n	7958 <l2cap_chan_alloc_cid+0x12>
    7964:	4621      	mov	r1, r4
    7966:	4630      	mov	r0, r6
    7968:	f7ff ffd2 	bl	7910 <bt_l2cap_le_lookup_rx_cid>
    796c:	2800      	cmp	r0, #0
    796e:	d1f3      	bne.n	7958 <l2cap_chan_alloc_cid+0x12>
			ch->rx.cid = cid;
    7970:	f8a5 4040 	strh.w	r4, [r5, #64]	; 0x40
			return ch;
    7974:	4628      	mov	r0, r5
    7976:	bd70      	pop	{r4, r5, r6, pc}
    7978:	2440      	movs	r4, #64	; 0x40
    797a:	e7ef      	b.n	795c <l2cap_chan_alloc_cid+0x16>
	return NULL;
    797c:	2000      	movs	r0, #0
    797e:	bd70      	pop	{r4, r5, r6, pc}
		return ch;
    7980:	4608      	mov	r0, r1
}
    7982:	bd70      	pop	{r4, r5, r6, pc}

00007984 <l2cap_chan_add>:
{
    7984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7986:	4606      	mov	r6, r0
    7988:	460c      	mov	r4, r1
    798a:	4617      	mov	r7, r2
	ch = l2cap_chan_alloc_cid(conn, chan);
    798c:	f7ff ffdb 	bl	7946 <l2cap_chan_alloc_cid>
	if (!ch) {
    7990:	b1c0      	cbz	r0, 79c4 <l2cap_chan_add+0x40>
    7992:	4605      	mov	r5, r0
	k_delayed_work_init(&chan->rtx_work, l2cap_rtx_timeout);
    7994:	490c      	ldr	r1, [pc, #48]	; (79c8 <l2cap_chan_add+0x44>)
    7996:	f104 0010 	add.w	r0, r4, #16
    799a:	f021 fccf 	bl	2933c <k_delayed_work_init>
	bt_l2cap_chan_add(conn, chan, destroy);
    799e:	463a      	mov	r2, r7
    79a0:	4621      	mov	r1, r4
    79a2:	4630      	mov	r0, r6
    79a4:	f7ff fcc2 	bl	732c <bt_l2cap_chan_add>
	    L2CAP_LE_CID_IS_DYN(ch->rx.cid)) {
    79a8:	f8b5 3040 	ldrh.w	r3, [r5, #64]	; 0x40
    79ac:	3b40      	subs	r3, #64	; 0x40
    79ae:	b29b      	uxth	r3, r3
	if (IS_ENABLED(CONFIG_BT_L2CAP_DYNAMIC_CHANNEL) &&
    79b0:	2b3f      	cmp	r3, #63	; 0x3f
    79b2:	d901      	bls.n	79b8 <l2cap_chan_add+0x34>
	return true;
    79b4:	2001      	movs	r0, #1
}
    79b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		bt_l2cap_chan_set_state(chan, BT_L2CAP_CONNECT);
    79b8:	2101      	movs	r1, #1
    79ba:	4620      	mov	r0, r4
    79bc:	f7ff fc24 	bl	7208 <bt_l2cap_chan_set_state>
	return true;
    79c0:	2001      	movs	r0, #1
    79c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return false;
    79c4:	2000      	movs	r0, #0
    79c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    79c8:	00007239 	.word	0x00007239

000079cc <bt_l2cap_connected>:
{
    79cc:	b530      	push	{r4, r5, lr}
    79ce:	b083      	sub	sp, #12
    79d0:	4605      	mov	r5, r0
	return list->head;
    79d2:	4b18      	ldr	r3, [pc, #96]	; (7a34 <bt_l2cap_connected+0x68>)
    79d4:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&le_channels, fchan, node) {
    79d6:	b10c      	cbz	r4, 79dc <bt_l2cap_connected+0x10>
    79d8:	3c08      	subs	r4, #8
    79da:	e00a      	b.n	79f2 <bt_l2cap_connected+0x26>
    79dc:	2400      	movs	r4, #0
    79de:	e008      	b.n	79f2 <bt_l2cap_connected+0x26>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    79e0:	f114 0308 	adds.w	r3, r4, #8
    79e4:	d01f      	beq.n	7a26 <bt_l2cap_connected+0x5a>
	return node->next;
    79e6:	68a2      	ldr	r2, [r4, #8]
    79e8:	b1fa      	cbz	r2, 7a2a <bt_l2cap_connected+0x5e>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    79ea:	b103      	cbz	r3, 79ee <bt_l2cap_connected+0x22>
	return node->next;
    79ec:	68a3      	ldr	r3, [r4, #8]
    79ee:	f1a3 0408 	sub.w	r4, r3, #8
    79f2:	b1e4      	cbz	r4, 7a2e <bt_l2cap_connected+0x62>
		if (fchan->accept(conn, &chan) < 0) {
    79f4:	6863      	ldr	r3, [r4, #4]
    79f6:	a901      	add	r1, sp, #4
    79f8:	4628      	mov	r0, r5
    79fa:	4798      	blx	r3
    79fc:	2800      	cmp	r0, #0
    79fe:	dbef      	blt.n	79e0 <bt_l2cap_connected+0x14>
		ch = BT_L2CAP_LE_CHAN(chan);
    7a00:	9901      	ldr	r1, [sp, #4]
		ch->rx.cid = fchan->cid;
    7a02:	8823      	ldrh	r3, [r4, #0]
    7a04:	f8a1 3040 	strh.w	r3, [r1, #64]	; 0x40
		ch->tx.cid = fchan->cid;
    7a08:	8823      	ldrh	r3, [r4, #0]
    7a0a:	f8a1 3060 	strh.w	r3, [r1, #96]	; 0x60
		if (!l2cap_chan_add(conn, chan, NULL)) {
    7a0e:	2200      	movs	r2, #0
    7a10:	4628      	mov	r0, r5
    7a12:	f7ff ffb7 	bl	7984 <l2cap_chan_add>
    7a16:	b150      	cbz	r0, 7a2e <bt_l2cap_connected+0x62>
		if (chan->ops->connected) {
    7a18:	9801      	ldr	r0, [sp, #4]
    7a1a:	6843      	ldr	r3, [r0, #4]
    7a1c:	681b      	ldr	r3, [r3, #0]
    7a1e:	2b00      	cmp	r3, #0
    7a20:	d0de      	beq.n	79e0 <bt_l2cap_connected+0x14>
			chan->ops->connected(chan);
    7a22:	4798      	blx	r3
    7a24:	e7dc      	b.n	79e0 <bt_l2cap_connected+0x14>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    7a26:	461a      	mov	r2, r3
    7a28:	e7de      	b.n	79e8 <bt_l2cap_connected+0x1c>
	SYS_SLIST_FOR_EACH_CONTAINER(&le_channels, fchan, node) {
    7a2a:	2400      	movs	r4, #0
    7a2c:	e7e1      	b.n	79f2 <bt_l2cap_connected+0x26>
}
    7a2e:	b003      	add	sp, #12
    7a30:	bd30      	pop	{r4, r5, pc}
    7a32:	bf00      	nop
    7a34:	200005d4 	.word	0x200005d4

00007a38 <le_conn_req>:
{
    7a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7a3c:	b085      	sub	sp, #20
	struct bt_conn *conn = l2cap->chan.chan.conn;
    7a3e:	6804      	ldr	r4, [r0, #0]
	struct bt_l2cap_le_conn_req *req = (void *)buf->data;
    7a40:	6893      	ldr	r3, [r2, #8]
	if (buf->len < sizeof(*req)) {
    7a42:	8990      	ldrh	r0, [r2, #12]
    7a44:	2809      	cmp	r0, #9
    7a46:	d912      	bls.n	7a6e <le_conn_req+0x36>
	psm = sys_le16_to_cpu(req->psm);
    7a48:	f8b3 9000 	ldrh.w	r9, [r3]
	scid = sys_le16_to_cpu(req->scid);
    7a4c:	f8b3 8002 	ldrh.w	r8, [r3, #2]
    7a50:	fa1f fa88 	uxth.w	sl, r8
	mtu = sys_le16_to_cpu(req->mtu);
    7a54:	889e      	ldrh	r6, [r3, #4]
    7a56:	b2b0      	uxth	r0, r6
	mps = sys_le16_to_cpu(req->mps);
    7a58:	88df      	ldrh	r7, [r3, #6]
    7a5a:	fa1f fe87 	uxth.w	lr, r7
	credits = sys_le16_to_cpu(req->credits);
    7a5e:	891d      	ldrh	r5, [r3, #8]
    7a60:	fa1f fb85 	uxth.w	fp, r5
	if (mtu < L2CAP_LE_MIN_MTU || mps < L2CAP_LE_MIN_MTU) {
    7a64:	2816      	cmp	r0, #22
    7a66:	d902      	bls.n	7a6e <le_conn_req+0x36>
    7a68:	f1be 0f16 	cmp.w	lr, #22
    7a6c:	d802      	bhi.n	7a74 <le_conn_req+0x3c>
}
    7a6e:	b005      	add	sp, #20
    7a70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7a74:	4610      	mov	r0, r2
    7a76:	460a      	mov	r2, r1
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_LE_CONN_RSP, ident,
    7a78:	230a      	movs	r3, #10
    7a7a:	2115      	movs	r1, #21
    7a7c:	f7ff fc94 	bl	73a8 <l2cap_create_le_sig_pdu>
    7a80:	9000      	str	r0, [sp, #0]
	rsp = net_buf_add(buf, sizeof(*rsp));
    7a82:	210a      	movs	r1, #10
    7a84:	3008      	adds	r0, #8
    7a86:	f012 fb89 	bl	1a19c <net_buf_simple_add>
    7a8a:	9001      	str	r0, [sp, #4]
	memset(rsp, 0, sizeof(*rsp));
    7a8c:	220a      	movs	r2, #10
    7a8e:	2100      	movs	r1, #0
    7a90:	f022 fff8 	bl	2aa84 <memset>
	server = l2cap_server_lookup_psm(psm);
    7a94:	4648      	mov	r0, r9
    7a96:	f7ff fa35 	bl	6f04 <l2cap_server_lookup_psm>
	if (!server) {
    7a9a:	4681      	mov	r9, r0
    7a9c:	b168      	cbz	r0, 7aba <le_conn_req+0x82>
	if (conn->sec_level < server->sec_level) {
    7a9e:	7a22      	ldrb	r2, [r4, #8]
    7aa0:	7883      	ldrb	r3, [r0, #2]
    7aa2:	429a      	cmp	r2, r3
    7aa4:	d20d      	bcs.n	7ac2 <le_conn_req+0x8a>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_ERR_AUTHENTICATION);
    7aa6:	2305      	movs	r3, #5
    7aa8:	9a01      	ldr	r2, [sp, #4]
    7aaa:	8113      	strh	r3, [r2, #8]
    7aac:	2300      	movs	r3, #0
    7aae:	9a00      	ldr	r2, [sp, #0]
    7ab0:	2105      	movs	r1, #5
    7ab2:	4620      	mov	r0, r4
    7ab4:	f7ff fd0b 	bl	74ce <bt_l2cap_send_cb>
    7ab8:	e7d9      	b.n	7a6e <le_conn_req+0x36>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_ERR_PSM_NOT_SUPP);
    7aba:	2302      	movs	r3, #2
    7abc:	9a01      	ldr	r2, [sp, #4]
    7abe:	8113      	strh	r3, [r2, #8]
		goto rsp;
    7ac0:	e7f4      	b.n	7aac <le_conn_req+0x74>
	if (!L2CAP_LE_CID_IS_DYN(scid)) {
    7ac2:	f1aa 0340 	sub.w	r3, sl, #64	; 0x40
    7ac6:	b29b      	uxth	r3, r3
    7ac8:	2b3f      	cmp	r3, #63	; 0x3f
    7aca:	d903      	bls.n	7ad4 <le_conn_req+0x9c>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_ERR_INVALID_SCID);
    7acc:	2309      	movs	r3, #9
    7ace:	9a01      	ldr	r2, [sp, #4]
    7ad0:	8113      	strh	r3, [r2, #8]
		goto rsp;
    7ad2:	e7eb      	b.n	7aac <le_conn_req+0x74>
	chan = bt_l2cap_le_lookup_tx_cid(conn, scid);
    7ad4:	4651      	mov	r1, sl
    7ad6:	4620      	mov	r0, r4
    7ad8:	f7ff feff 	bl	78da <bt_l2cap_le_lookup_tx_cid>
    7adc:	9003      	str	r0, [sp, #12]
	if (chan) {
    7ade:	b118      	cbz	r0, 7ae8 <le_conn_req+0xb0>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_ERR_SCID_IN_USE);
    7ae0:	230a      	movs	r3, #10
    7ae2:	9a01      	ldr	r2, [sp, #4]
    7ae4:	8113      	strh	r3, [r2, #8]
		goto rsp;
    7ae6:	e7e1      	b.n	7aac <le_conn_req+0x74>
	if (server->accept(conn, &chan) < 0) {
    7ae8:	f8d9 3004 	ldr.w	r3, [r9, #4]
    7aec:	a903      	add	r1, sp, #12
    7aee:	4620      	mov	r0, r4
    7af0:	4798      	blx	r3
    7af2:	2800      	cmp	r0, #0
    7af4:	da03      	bge.n	7afe <le_conn_req+0xc6>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_ERR_NO_RESOURCES);
    7af6:	2304      	movs	r3, #4
    7af8:	9a01      	ldr	r2, [sp, #4]
    7afa:	8113      	strh	r3, [r2, #8]
		goto rsp;
    7afc:	e7d6      	b.n	7aac <le_conn_req+0x74>
	chan->required_sec_level = server->sec_level;
    7afe:	9903      	ldr	r1, [sp, #12]
    7b00:	f899 3002 	ldrb.w	r3, [r9, #2]
    7b04:	f881 303d 	strb.w	r3, [r1, #61]	; 0x3d
	if (l2cap_chan_add(conn, chan, l2cap_chan_destroy)) {
    7b08:	4a1e      	ldr	r2, [pc, #120]	; (7b84 <le_conn_req+0x14c>)
    7b0a:	4620      	mov	r0, r4
    7b0c:	f7ff ff3a 	bl	7984 <l2cap_chan_add>
    7b10:	b918      	cbnz	r0, 7b1a <le_conn_req+0xe2>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_ERR_NO_RESOURCES);
    7b12:	2304      	movs	r3, #4
    7b14:	9a01      	ldr	r2, [sp, #4]
    7b16:	8113      	strh	r3, [r2, #8]
    7b18:	e7c8      	b.n	7aac <le_conn_req+0x74>
		struct bt_l2cap_le_chan *ch = BT_L2CAP_LE_CHAN(chan);
    7b1a:	f8dd a00c 	ldr.w	sl, [sp, #12]
		l2cap_chan_tx_init(ch);
    7b1e:	4650      	mov	r0, sl
    7b20:	f7ff fabd 	bl	709e <l2cap_chan_tx_init>
		ch->tx.cid = scid;
    7b24:	f8aa 8060 	strh.w	r8, [sl, #96]	; 0x60
		ch->tx.mps = mps;
    7b28:	f8aa 7064 	strh.w	r7, [sl, #100]	; 0x64
		ch->tx.mtu = mtu;
    7b2c:	f8aa 6062 	strh.w	r6, [sl, #98]	; 0x62
		ch->tx.init_credits = credits;
    7b30:	f8aa 5066 	strh.w	r5, [sl, #102]	; 0x66
		l2cap_chan_tx_give_credits(ch, credits);
    7b34:	4659      	mov	r1, fp
    7b36:	4650      	mov	r0, sl
    7b38:	f7ff fa79 	bl	702e <l2cap_chan_tx_give_credits>
		l2cap_chan_rx_init(ch);
    7b3c:	4650      	mov	r0, sl
    7b3e:	f7ff fac1 	bl	70c4 <l2cap_chan_rx_init>
		l2cap_chan_rx_give_credits(ch, ch->rx.init_credits);
    7b42:	f8ba 1046 	ldrh.w	r1, [sl, #70]	; 0x46
    7b46:	4650      	mov	r0, sl
    7b48:	f7ff fa64 	bl	7014 <l2cap_chan_rx_give_credits>
		chan->psm = server->psm;
    7b4c:	9803      	ldr	r0, [sp, #12]
    7b4e:	f8b9 3000 	ldrh.w	r3, [r9]
    7b52:	8743      	strh	r3, [r0, #58]	; 0x3a
		bt_l2cap_chan_set_state(chan, BT_L2CAP_CONNECTED);
    7b54:	2103      	movs	r1, #3
    7b56:	f7ff fb57 	bl	7208 <bt_l2cap_chan_set_state>
		if (chan->ops->connected) {
    7b5a:	9803      	ldr	r0, [sp, #12]
    7b5c:	6843      	ldr	r3, [r0, #4]
    7b5e:	681b      	ldr	r3, [r3, #0]
    7b60:	b103      	cbz	r3, 7b64 <le_conn_req+0x12c>
			chan->ops->connected(chan);
    7b62:	4798      	blx	r3
		rsp->dcid = sys_cpu_to_le16(ch->rx.cid);
    7b64:	f8ba 3040 	ldrh.w	r3, [sl, #64]	; 0x40
    7b68:	9901      	ldr	r1, [sp, #4]
    7b6a:	800b      	strh	r3, [r1, #0]
		rsp->mps = sys_cpu_to_le16(ch->rx.mps);
    7b6c:	f8ba 3044 	ldrh.w	r3, [sl, #68]	; 0x44
    7b70:	808b      	strh	r3, [r1, #4]
		rsp->mtu = sys_cpu_to_le16(ch->rx.mtu);
    7b72:	f8ba 3042 	ldrh.w	r3, [sl, #66]	; 0x42
    7b76:	804b      	strh	r3, [r1, #2]
		rsp->credits = sys_cpu_to_le16(ch->rx.init_credits);
    7b78:	f8ba 3046 	ldrh.w	r3, [sl, #70]	; 0x46
    7b7c:	80cb      	strh	r3, [r1, #6]
		rsp->result = BT_L2CAP_SUCCESS;
    7b7e:	2300      	movs	r3, #0
    7b80:	810b      	strh	r3, [r1, #8]
    7b82:	e793      	b.n	7aac <le_conn_req+0x74>
    7b84:	00007049 	.word	0x00007049

00007b88 <l2cap_le_connect>:

#if defined(CONFIG_BT_L2CAP_DYNAMIC_CHANNEL)
static int l2cap_le_connect(struct bt_conn *conn, struct bt_l2cap_le_chan *ch,
			    u16_t psm)
{
	if (psm < L2CAP_LE_PSM_START || psm > L2CAP_LE_PSM_END) {
    7b88:	1e53      	subs	r3, r2, #1
    7b8a:	b29b      	uxth	r3, r3
    7b8c:	2bfe      	cmp	r3, #254	; 0xfe
    7b8e:	d814      	bhi.n	7bba <l2cap_le_connect+0x32>
{
    7b90:	b570      	push	{r4, r5, r6, lr}
    7b92:	4615      	mov	r5, r2
    7b94:	460c      	mov	r4, r1
    7b96:	4606      	mov	r6, r0
		return -EINVAL;
	}

	l2cap_chan_tx_init(ch);
    7b98:	4608      	mov	r0, r1
    7b9a:	f7ff fa80 	bl	709e <l2cap_chan_tx_init>
	l2cap_chan_rx_init(ch);
    7b9e:	4620      	mov	r0, r4
    7ba0:	f7ff fa90 	bl	70c4 <l2cap_chan_rx_init>

	if (!l2cap_chan_add(conn, &ch->chan, l2cap_chan_destroy)) {
    7ba4:	4a08      	ldr	r2, [pc, #32]	; (7bc8 <l2cap_le_connect+0x40>)
    7ba6:	4621      	mov	r1, r4
    7ba8:	4630      	mov	r0, r6
    7baa:	f7ff feeb 	bl	7984 <l2cap_chan_add>
    7bae:	b138      	cbz	r0, 7bc0 <l2cap_le_connect+0x38>
		return -ENOMEM;
	}

	ch->chan.psm = psm;
    7bb0:	8765      	strh	r5, [r4, #58]	; 0x3a

	return l2cap_le_conn_req(ch);
    7bb2:	4620      	mov	r0, r4
    7bb4:	f7ff fcb6 	bl	7524 <l2cap_le_conn_req>
    7bb8:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    7bba:	f06f 0015 	mvn.w	r0, #21
    7bbe:	4770      	bx	lr
		return -ENOMEM;
    7bc0:	f06f 000b 	mvn.w	r0, #11
}
    7bc4:	bd70      	pop	{r4, r5, r6, pc}
    7bc6:	bf00      	nop
    7bc8:	00007049 	.word	0x00007049

00007bcc <bt_l2cap_server_register>:
	if (server->psm < L2CAP_LE_PSM_START ||
    7bcc:	8802      	ldrh	r2, [r0, #0]
    7bce:	1e53      	subs	r3, r2, #1
    7bd0:	b29b      	uxth	r3, r3
    7bd2:	2bfe      	cmp	r3, #254	; 0xfe
    7bd4:	d81d      	bhi.n	7c12 <bt_l2cap_server_register+0x46>
	    server->psm > L2CAP_LE_PSM_END || !server->accept) {
    7bd6:	6843      	ldr	r3, [r0, #4]
    7bd8:	b1f3      	cbz	r3, 7c18 <bt_l2cap_server_register+0x4c>
	if (server->sec_level > BT_SECURITY_FIPS) {
    7bda:	7883      	ldrb	r3, [r0, #2]
    7bdc:	2b04      	cmp	r3, #4
    7bde:	d81e      	bhi.n	7c1e <bt_l2cap_server_register+0x52>
{
    7be0:	b510      	push	{r4, lr}
	} else if (server->sec_level < BT_SECURITY_LOW) {
    7be2:	b90b      	cbnz	r3, 7be8 <bt_l2cap_server_register+0x1c>
		server->sec_level = BT_SECURITY_LOW;
    7be4:	2301      	movs	r3, #1
    7be6:	7083      	strb	r3, [r0, #2]
    7be8:	4604      	mov	r4, r0
	if (l2cap_server_lookup_psm(server->psm)) {
    7bea:	4610      	mov	r0, r2
    7bec:	f7ff f98a 	bl	6f04 <l2cap_server_lookup_psm>
    7bf0:	b9c0      	cbnz	r0, 7c24 <bt_l2cap_server_register+0x58>
	sys_slist_append(&servers, &server->node);
    7bf2:	f104 0308 	add.w	r3, r4, #8
	node->next = NULL;
    7bf6:	2200      	movs	r2, #0
    7bf8:	60a2      	str	r2, [r4, #8]
	if (!list->tail) {
    7bfa:	4a0c      	ldr	r2, [pc, #48]	; (7c2c <bt_l2cap_server_register+0x60>)
    7bfc:	6852      	ldr	r2, [r2, #4]
    7bfe:	b122      	cbz	r2, 7c0a <bt_l2cap_server_register+0x3e>
		list->tail->next = node;
    7c00:	6013      	str	r3, [r2, #0]
		list->tail = node;
    7c02:	4a0a      	ldr	r2, [pc, #40]	; (7c2c <bt_l2cap_server_register+0x60>)
    7c04:	6053      	str	r3, [r2, #4]
	return 0;
    7c06:	2000      	movs	r0, #0
    7c08:	bd10      	pop	{r4, pc}
		list->tail = node;
    7c0a:	4a08      	ldr	r2, [pc, #32]	; (7c2c <bt_l2cap_server_register+0x60>)
    7c0c:	6053      	str	r3, [r2, #4]
		list->head = node;
    7c0e:	6013      	str	r3, [r2, #0]
    7c10:	bd10      	pop	{r4, pc}
		return -EINVAL;
    7c12:	f06f 0015 	mvn.w	r0, #21
    7c16:	4770      	bx	lr
    7c18:	f06f 0015 	mvn.w	r0, #21
    7c1c:	4770      	bx	lr
		return -EINVAL;
    7c1e:	f06f 0015 	mvn.w	r0, #21
    7c22:	4770      	bx	lr
		return -EADDRINUSE;
    7c24:	f06f 006f 	mvn.w	r0, #111	; 0x6f
}
    7c28:	bd10      	pop	{r4, pc}
    7c2a:	bf00      	nop
    7c2c:	200005dc 	.word	0x200005dc

00007c30 <bt_l2cap_update_conn_param>:
{
    7c30:	b570      	push	{r4, r5, r6, lr}
    7c32:	4606      	mov	r6, r0
    7c34:	460c      	mov	r4, r1
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    7c36:	f7ff f91f 	bl	6e78 <get_ident>
    7c3a:	2308      	movs	r3, #8
    7c3c:	4602      	mov	r2, r0
    7c3e:	2112      	movs	r1, #18
    7c40:	2000      	movs	r0, #0
    7c42:	f7ff fbb1 	bl	73a8 <l2cap_create_le_sig_pdu>
    7c46:	4605      	mov	r5, r0
	req = net_buf_add(buf, sizeof(*req));
    7c48:	2108      	movs	r1, #8
    7c4a:	4408      	add	r0, r1
    7c4c:	f012 faa6 	bl	1a19c <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
    7c50:	8823      	ldrh	r3, [r4, #0]
    7c52:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
    7c54:	8863      	ldrh	r3, [r4, #2]
    7c56:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
    7c58:	88a3      	ldrh	r3, [r4, #4]
    7c5a:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
    7c5c:	88e3      	ldrh	r3, [r4, #6]
    7c5e:	80c3      	strh	r3, [r0, #6]
    7c60:	2300      	movs	r3, #0
    7c62:	462a      	mov	r2, r5
    7c64:	2105      	movs	r1, #5
    7c66:	4630      	mov	r0, r6
    7c68:	f7ff fc31 	bl	74ce <bt_l2cap_send_cb>
}
    7c6c:	2000      	movs	r0, #0
    7c6e:	bd70      	pop	{r4, r5, r6, pc}

00007c70 <bt_l2cap_init>:
{
    7c70:	b508      	push	{r3, lr}
	bt_l2cap_le_fixed_chan_register(&chan);
    7c72:	4802      	ldr	r0, [pc, #8]	; (7c7c <bt_l2cap_init+0xc>)
    7c74:	f7ff fa84 	bl	7180 <bt_l2cap_le_fixed_chan_register>
    7c78:	bd08      	pop	{r3, pc}
    7c7a:	bf00      	nop
    7c7c:	2000b950 	.word	0x2000b950

00007c80 <bt_l2cap_chan_connect>:
int bt_l2cap_chan_connect(struct bt_conn *conn, struct bt_l2cap_chan *chan,
			  u16_t psm)
{
	BT_DBG("conn %p chan %p psm 0x%04x", conn, chan, psm);

	if (!conn || conn->state != BT_CONN_CONNECTED) {
    7c80:	b188      	cbz	r0, 7ca6 <bt_l2cap_chan_connect+0x26>
{
    7c82:	b508      	push	{r3, lr}
    7c84:	4603      	mov	r3, r0
	if (!conn || conn->state != BT_CONN_CONNECTED) {
    7c86:	7b00      	ldrb	r0, [r0, #12]
    7c88:	2803      	cmp	r0, #3
    7c8a:	d10f      	bne.n	7cac <bt_l2cap_chan_connect+0x2c>
		return -ENOTCONN;
	}

	if (!chan) {
    7c8c:	b189      	cbz	r1, 7cb2 <bt_l2cap_chan_connect+0x32>
	if (IS_ENABLED(CONFIG_BT_BREDR) &&
	    conn->type == BT_CONN_TYPE_BR) {
		return bt_l2cap_br_chan_connect(conn, chan, psm);
	}

	if (chan->required_sec_level > BT_SECURITY_FIPS) {
    7c8e:	f891 003d 	ldrb.w	r0, [r1, #61]	; 0x3d
    7c92:	2804      	cmp	r0, #4
    7c94:	d810      	bhi.n	7cb8 <bt_l2cap_chan_connect+0x38>
		return -EINVAL;
	} else if (chan->required_sec_level == BT_SECURITY_NONE) {
    7c96:	b910      	cbnz	r0, 7c9e <bt_l2cap_chan_connect+0x1e>
		chan->required_sec_level = BT_SECURITY_LOW;
    7c98:	2001      	movs	r0, #1
    7c9a:	f881 003d 	strb.w	r0, [r1, #61]	; 0x3d
    7c9e:	4618      	mov	r0, r3
	}

	return l2cap_le_connect(conn, BT_L2CAP_LE_CHAN(chan), psm);
    7ca0:	f7ff ff72 	bl	7b88 <l2cap_le_connect>
    7ca4:	bd08      	pop	{r3, pc}
		return -ENOTCONN;
    7ca6:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    7caa:	4770      	bx	lr
    7cac:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    7cb0:	bd08      	pop	{r3, pc}
		return -EINVAL;
    7cb2:	f06f 0015 	mvn.w	r0, #21
    7cb6:	bd08      	pop	{r3, pc}
		return -EINVAL;
    7cb8:	f06f 0015 	mvn.w	r0, #21
}
    7cbc:	bd08      	pop	{r3, pc}

00007cbe <bt_l2cap_chan_disconnect>:

int bt_l2cap_chan_disconnect(struct bt_l2cap_chan *chan)
{
    7cbe:	b538      	push	{r3, r4, r5, lr}
	struct bt_conn *conn = chan->conn;
    7cc0:	6803      	ldr	r3, [r0, #0]
	struct net_buf *buf;
	struct bt_l2cap_disconn_req *req;
	struct bt_l2cap_le_chan *ch;

	if (!conn) {
    7cc2:	b30b      	cbz	r3, 7d08 <bt_l2cap_chan_disconnect+0x4a>
    7cc4:	4604      	mov	r4, r0
	ch = BT_L2CAP_LE_CHAN(chan);

	BT_DBG("chan %p scid 0x%04x dcid 0x%04x", chan, ch->rx.cid,
	       ch->tx.cid);

	ch->chan.ident = get_ident();
    7cc6:	f7ff f8d7 	bl	6e78 <get_ident>
    7cca:	4602      	mov	r2, r0
    7ccc:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c

	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_DISCONN_REQ,
    7cd0:	2304      	movs	r3, #4
    7cd2:	2106      	movs	r1, #6
    7cd4:	2000      	movs	r0, #0
    7cd6:	f7ff fb67 	bl	73a8 <l2cap_create_le_sig_pdu>
    7cda:	4605      	mov	r5, r0
				      ch->chan.ident, sizeof(*req));

	req = net_buf_add(buf, sizeof(*req));
    7cdc:	2104      	movs	r1, #4
    7cde:	3008      	adds	r0, #8
    7ce0:	f012 fa5c 	bl	1a19c <net_buf_simple_add>
	req->dcid = sys_cpu_to_le16(ch->tx.cid);
    7ce4:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
    7ce8:	8003      	strh	r3, [r0, #0]
	req->scid = sys_cpu_to_le16(ch->rx.cid);
    7cea:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
    7cee:	8043      	strh	r3, [r0, #2]

	l2cap_chan_send_req(ch, buf, L2CAP_DISC_TIMEOUT);
    7cf0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
    7cf4:	4629      	mov	r1, r5
    7cf6:	4620      	mov	r0, r4
    7cf8:	f7ff fbfe 	bl	74f8 <l2cap_chan_send_req>
	bt_l2cap_chan_set_state(chan, BT_L2CAP_DISCONNECT);
    7cfc:	2104      	movs	r1, #4
    7cfe:	4620      	mov	r0, r4
    7d00:	f7ff fa82 	bl	7208 <bt_l2cap_chan_set_state>

	return 0;
    7d04:	2000      	movs	r0, #0
    7d06:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTCONN;
    7d08:	f06f 007f 	mvn.w	r0, #127	; 0x7f
}
    7d0c:	bd38      	pop	{r3, r4, r5, pc}

00007d0e <l2cap_chan_le_recv_sdu>:
{
    7d0e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7d12:	4681      	mov	r9, r0
    7d14:	460e      	mov	r6, r1
	if (net_buf_frags_len(chan->_sdu) + buf->len > chan->_sdu_len) {
    7d16:	f8d0 0094 	ldr.w	r0, [r0, #148]	; 0x94
    7d1a:	4603      	mov	r3, r0
	size_t bytes = 0;
    7d1c:	2200      	movs	r2, #0
    7d1e:	e002      	b.n	7d26 <l2cap_chan_le_recv_sdu+0x18>
		bytes += buf->len;
    7d20:	8999      	ldrh	r1, [r3, #12]
    7d22:	440a      	add	r2, r1
		buf = buf->frags;
    7d24:	681b      	ldr	r3, [r3, #0]
	while (buf) {
    7d26:	2b00      	cmp	r3, #0
    7d28:	d1fa      	bne.n	7d20 <l2cap_chan_le_recv_sdu+0x12>
    7d2a:	89b3      	ldrh	r3, [r6, #12]
    7d2c:	441a      	add	r2, r3
    7d2e:	f8b9 3098 	ldrh.w	r3, [r9, #152]	; 0x98
    7d32:	429a      	cmp	r2, r3
    7d34:	d803      	bhi.n	7d3e <l2cap_chan_le_recv_sdu+0x30>
	frag = net_buf_frag_last(chan->_sdu);
    7d36:	f012 fa05 	bl	1a144 <net_buf_frag_last>
    7d3a:	4680      	mov	r8, r0
	while (buf->len) {
    7d3c:	e017      	b.n	7d6e <l2cap_chan_le_recv_sdu+0x60>
		bt_l2cap_chan_disconnect(&chan->chan);
    7d3e:	4648      	mov	r0, r9
    7d40:	f7ff ffbd 	bl	7cbe <bt_l2cap_chan_disconnect>
		return;
    7d44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		len = min(net_buf_tailroom(frag), buf->len);
    7d48:	f108 0708 	add.w	r7, r8, #8
    7d4c:	4638      	mov	r0, r7
    7d4e:	f012 fa8e 	bl	1a26e <net_buf_simple_tailroom>
    7d52:	89b4      	ldrh	r4, [r6, #12]
    7d54:	42a0      	cmp	r0, r4
    7d56:	d31d      	bcc.n	7d94 <l2cap_chan_le_recv_sdu+0x86>
		net_buf_add_mem(frag, buf->data, len);
    7d58:	4635      	mov	r5, r6
    7d5a:	4622      	mov	r2, r4
    7d5c:	f855 1f08 	ldr.w	r1, [r5, #8]!
    7d60:	4638      	mov	r0, r7
    7d62:	f012 fa21 	bl	1a1a8 <net_buf_simple_add_mem>
		net_buf_pull(buf, len);
    7d66:	4621      	mov	r1, r4
    7d68:	4628      	mov	r0, r5
    7d6a:	f012 fa64 	bl	1a236 <net_buf_simple_pull>
	while (buf->len) {
    7d6e:	89b3      	ldrh	r3, [r6, #12]
    7d70:	b1ab      	cbz	r3, 7d9e <l2cap_chan_le_recv_sdu+0x90>
		if (!net_buf_tailroom(frag)) {
    7d72:	f108 0008 	add.w	r0, r8, #8
    7d76:	f012 fa7a 	bl	1a26e <net_buf_simple_tailroom>
    7d7a:	2800      	cmp	r0, #0
    7d7c:	d1e4      	bne.n	7d48 <l2cap_chan_le_recv_sdu+0x3a>
			frag = l2cap_alloc_frag(chan);
    7d7e:	4648      	mov	r0, r9
    7d80:	f7ff f93a 	bl	6ff8 <l2cap_alloc_frag>
			if (!frag) {
    7d84:	4680      	mov	r8, r0
    7d86:	2800      	cmp	r0, #0
    7d88:	d1de      	bne.n	7d48 <l2cap_chan_le_recv_sdu+0x3a>
				bt_l2cap_chan_disconnect(&chan->chan);
    7d8a:	4648      	mov	r0, r9
    7d8c:	f7ff ff97 	bl	7cbe <bt_l2cap_chan_disconnect>
				return;
    7d90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		len = min(net_buf_tailroom(frag), buf->len);
    7d94:	4638      	mov	r0, r7
    7d96:	f012 fa6a 	bl	1a26e <net_buf_simple_tailroom>
    7d9a:	b284      	uxth	r4, r0
    7d9c:	e7dc      	b.n	7d58 <l2cap_chan_le_recv_sdu+0x4a>
	if (net_buf_frags_len(chan->_sdu) == chan->_sdu_len) {
    7d9e:	f8d9 1094 	ldr.w	r1, [r9, #148]	; 0x94
    7da2:	460b      	mov	r3, r1
	size_t bytes = 0;
    7da4:	2200      	movs	r2, #0
    7da6:	e002      	b.n	7dae <l2cap_chan_le_recv_sdu+0xa0>
		bytes += buf->len;
    7da8:	8998      	ldrh	r0, [r3, #12]
    7daa:	4402      	add	r2, r0
		buf = buf->frags;
    7dac:	681b      	ldr	r3, [r3, #0]
	while (buf) {
    7dae:	2b00      	cmp	r3, #0
    7db0:	d1fa      	bne.n	7da8 <l2cap_chan_le_recv_sdu+0x9a>
    7db2:	f8b9 3098 	ldrh.w	r3, [r9, #152]	; 0x98
    7db6:	4293      	cmp	r3, r2
    7db8:	d005      	beq.n	7dc6 <l2cap_chan_le_recv_sdu+0xb8>
	l2cap_chan_update_credits(chan, buf);
    7dba:	4631      	mov	r1, r6
    7dbc:	4648      	mov	r0, r9
    7dbe:	f7ff fc12 	bl	75e6 <l2cap_chan_update_credits>
    7dc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		chan->chan.ops->recv(&chan->chan, chan->_sdu);
    7dc6:	f8d9 3004 	ldr.w	r3, [r9, #4]
    7dca:	691b      	ldr	r3, [r3, #16]
    7dcc:	4648      	mov	r0, r9
    7dce:	4798      	blx	r3
		net_buf_unref(chan->_sdu);
    7dd0:	f8d9 0094 	ldr.w	r0, [r9, #148]	; 0x94
    7dd4:	f012 f996 	bl	1a104 <net_buf_unref>
		chan->_sdu = NULL;
    7dd8:	2300      	movs	r3, #0
    7dda:	f8c9 3094 	str.w	r3, [r9, #148]	; 0x94
		chan->_sdu_len = 0;
    7dde:	f8a9 3098 	strh.w	r3, [r9, #152]	; 0x98
    7de2:	e7ea      	b.n	7dba <l2cap_chan_le_recv_sdu+0xac>

00007de4 <l2cap_chan_le_recv>:
{
    7de4:	b570      	push	{r4, r5, r6, lr}
    7de6:	4604      	mov	r4, r0
    7de8:	460d      	mov	r5, r1
    7dea:	2100      	movs	r1, #0
    7dec:	3048      	adds	r0, #72	; 0x48
    7dee:	f020 fce7 	bl	287c0 <_impl_k_sem_take>
	if (k_sem_take(&chan->rx.credits, K_NO_WAIT)) {
    7df2:	b938      	cbnz	r0, 7e04 <l2cap_chan_le_recv+0x20>
	if (chan->_sdu) {
    7df4:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
    7df8:	b143      	cbz	r3, 7e0c <l2cap_chan_le_recv+0x28>
		l2cap_chan_le_recv_sdu(chan, buf);
    7dfa:	4629      	mov	r1, r5
    7dfc:	4620      	mov	r0, r4
    7dfe:	f7ff ff86 	bl	7d0e <l2cap_chan_le_recv_sdu>
		return;
    7e02:	bd70      	pop	{r4, r5, r6, pc}
		bt_l2cap_chan_disconnect(&chan->chan);
    7e04:	4620      	mov	r0, r4
    7e06:	f7ff ff5a 	bl	7cbe <bt_l2cap_chan_disconnect>
		return;
    7e0a:	bd70      	pop	{r4, r5, r6, pc}
	sdu_len = net_buf_pull_le16(buf);
    7e0c:	f105 0008 	add.w	r0, r5, #8
    7e10:	f012 fa21 	bl	1a256 <net_buf_simple_pull_le16>
    7e14:	4606      	mov	r6, r0
	if (sdu_len > chan->rx.mtu) {
    7e16:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
    7e1a:	4298      	cmp	r0, r3
    7e1c:	d80e      	bhi.n	7e3c <l2cap_chan_le_recv+0x58>
	if (chan->chan.ops->alloc_buf) {
    7e1e:	6862      	ldr	r2, [r4, #4]
    7e20:	68d3      	ldr	r3, [r2, #12]
    7e22:	b19b      	cbz	r3, 7e4c <l2cap_chan_le_recv+0x68>
		chan->_sdu = chan->chan.ops->alloc_buf(&chan->chan);
    7e24:	4620      	mov	r0, r4
    7e26:	4798      	blx	r3
    7e28:	f8c4 0094 	str.w	r0, [r4, #148]	; 0x94
		if (!chan->_sdu) {
    7e2c:	b150      	cbz	r0, 7e44 <l2cap_chan_le_recv+0x60>
		chan->_sdu_len = sdu_len;
    7e2e:	f8a4 6098 	strh.w	r6, [r4, #152]	; 0x98
		l2cap_chan_le_recv_sdu(chan, buf);
    7e32:	4629      	mov	r1, r5
    7e34:	4620      	mov	r0, r4
    7e36:	f7ff ff6a 	bl	7d0e <l2cap_chan_le_recv_sdu>
		return;
    7e3a:	bd70      	pop	{r4, r5, r6, pc}
		bt_l2cap_chan_disconnect(&chan->chan);
    7e3c:	4620      	mov	r0, r4
    7e3e:	f7ff ff3e 	bl	7cbe <bt_l2cap_chan_disconnect>
		return;
    7e42:	bd70      	pop	{r4, r5, r6, pc}
			bt_l2cap_chan_disconnect(&chan->chan);
    7e44:	4620      	mov	r0, r4
    7e46:	f7ff ff3a 	bl	7cbe <bt_l2cap_chan_disconnect>
			return;
    7e4a:	bd70      	pop	{r4, r5, r6, pc}
	chan->chan.ops->recv(&chan->chan, buf);
    7e4c:	6913      	ldr	r3, [r2, #16]
    7e4e:	4629      	mov	r1, r5
    7e50:	4620      	mov	r0, r4
    7e52:	4798      	blx	r3
	l2cap_chan_update_credits(chan, buf);
    7e54:	4629      	mov	r1, r5
    7e56:	4620      	mov	r0, r4
    7e58:	f7ff fbc5 	bl	75e6 <l2cap_chan_update_credits>
    7e5c:	bd70      	pop	{r4, r5, r6, pc}

00007e5e <l2cap_chan_recv>:
{
    7e5e:	b508      	push	{r3, lr}
	if (L2CAP_LE_CID_IS_DYN(ch->rx.cid)) {
    7e60:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
    7e64:	3b40      	subs	r3, #64	; 0x40
    7e66:	b29b      	uxth	r3, r3
    7e68:	2b3f      	cmp	r3, #63	; 0x3f
    7e6a:	d903      	bls.n	7e74 <l2cap_chan_recv+0x16>
	chan->ops->recv(chan, buf);
    7e6c:	6843      	ldr	r3, [r0, #4]
    7e6e:	691b      	ldr	r3, [r3, #16]
    7e70:	4798      	blx	r3
    7e72:	bd08      	pop	{r3, pc}
		l2cap_chan_le_recv(ch, buf);
    7e74:	f7ff ffb6 	bl	7de4 <l2cap_chan_le_recv>
		return;
    7e78:	bd08      	pop	{r3, pc}

00007e7a <bt_l2cap_recv>:
{
    7e7a:	b570      	push	{r4, r5, r6, lr}
    7e7c:	460c      	mov	r4, r1
	struct bt_l2cap_hdr *hdr = (void *)buf->data;
    7e7e:	688a      	ldr	r2, [r1, #8]
	if (buf->len < sizeof(*hdr)) {
    7e80:	898b      	ldrh	r3, [r1, #12]
    7e82:	2b03      	cmp	r3, #3
    7e84:	d912      	bls.n	7eac <bt_l2cap_recv+0x32>
    7e86:	4605      	mov	r5, r0
	cid = sys_le16_to_cpu(hdr->cid);
    7e88:	8856      	ldrh	r6, [r2, #2]
	net_buf_pull(buf, sizeof(*hdr));
    7e8a:	2104      	movs	r1, #4
    7e8c:	f104 0008 	add.w	r0, r4, #8
    7e90:	f012 f9d1 	bl	1a236 <net_buf_simple_pull>
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
    7e94:	4631      	mov	r1, r6
    7e96:	4628      	mov	r0, r5
    7e98:	f7ff fd3a 	bl	7910 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    7e9c:	b150      	cbz	r0, 7eb4 <bt_l2cap_recv+0x3a>
	l2cap_chan_recv(chan, buf);
    7e9e:	4621      	mov	r1, r4
    7ea0:	f7ff ffdd 	bl	7e5e <l2cap_chan_recv>
	net_buf_unref(buf);
    7ea4:	4620      	mov	r0, r4
    7ea6:	f012 f92d 	bl	1a104 <net_buf_unref>
    7eaa:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
    7eac:	4608      	mov	r0, r1
    7eae:	f012 f929 	bl	1a104 <net_buf_unref>
		return;
    7eb2:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
    7eb4:	4620      	mov	r0, r4
    7eb6:	f012 f925 	bl	1a104 <net_buf_unref>
		return;
    7eba:	bd70      	pop	{r4, r5, r6, pc}

00007ebc <le_credits>:
{
    7ebc:	b538      	push	{r3, r4, r5, lr}
	struct bt_conn *conn = l2cap->chan.chan.conn;
    7ebe:	6800      	ldr	r0, [r0, #0]
	struct bt_l2cap_le_credits *ev = (void *)buf->data;
    7ec0:	6891      	ldr	r1, [r2, #8]
	if (buf->len < sizeof(*ev)) {
    7ec2:	8993      	ldrh	r3, [r2, #12]
    7ec4:	2b03      	cmp	r3, #3
    7ec6:	d800      	bhi.n	7eca <le_credits+0xe>
    7ec8:	bd38      	pop	{r3, r4, r5, pc}
	credits = sys_le16_to_cpu(ev->credits);
    7eca:	884d      	ldrh	r5, [r1, #2]
	chan = bt_l2cap_le_lookup_tx_cid(conn, cid);
    7ecc:	8809      	ldrh	r1, [r1, #0]
    7ece:	f7ff fd04 	bl	78da <bt_l2cap_le_lookup_tx_cid>
	if (!chan) {
    7ed2:	4604      	mov	r4, r0
    7ed4:	2800      	cmp	r0, #0
    7ed6:	d0f7      	beq.n	7ec8 <le_credits+0xc>
    7ed8:	6f03      	ldr	r3, [r0, #112]	; 0x70
	if (k_sem_count_get(&ch->tx.credits) + credits > UINT16_MAX) {
    7eda:	442b      	add	r3, r5
    7edc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    7ee0:	d206      	bcs.n	7ef0 <le_credits+0x34>
	l2cap_chan_tx_give_credits(ch, credits);
    7ee2:	4629      	mov	r1, r5
    7ee4:	f7ff f8a3 	bl	702e <l2cap_chan_tx_give_credits>
	l2cap_chan_le_send_resume(ch);
    7ee8:	4620      	mov	r0, r4
    7eea:	f7ff fc32 	bl	7752 <l2cap_chan_le_send_resume>
    7eee:	e7eb      	b.n	7ec8 <le_credits+0xc>
		bt_l2cap_chan_disconnect(chan);
    7ef0:	f7ff fee5 	bl	7cbe <bt_l2cap_chan_disconnect>
		return;
    7ef4:	bd38      	pop	{r3, r4, r5, pc}
	...

00007ef8 <l2cap_recv>:
{
    7ef8:	b5f0      	push	{r4, r5, r6, r7, lr}
    7efa:	b083      	sub	sp, #12
	struct bt_l2cap_sig_hdr *hdr = (void *)buf->data;
    7efc:	688e      	ldr	r6, [r1, #8]
	if (buf->len < sizeof(*hdr)) {
    7efe:	898b      	ldrh	r3, [r1, #12]
    7f00:	2b03      	cmp	r3, #3
    7f02:	d801      	bhi.n	7f08 <l2cap_recv+0x10>
}
    7f04:	b003      	add	sp, #12
    7f06:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7f08:	460c      	mov	r4, r1
    7f0a:	4605      	mov	r5, r0
	len = sys_le16_to_cpu(hdr->len);
    7f0c:	8877      	ldrh	r7, [r6, #2]
	net_buf_pull(buf, sizeof(*hdr));
    7f0e:	2104      	movs	r1, #4
    7f10:	f104 0008 	add.w	r0, r4, #8
    7f14:	f012 f98f 	bl	1a236 <net_buf_simple_pull>
	if (buf->len != len) {
    7f18:	89a3      	ldrh	r3, [r4, #12]
    7f1a:	429f      	cmp	r7, r3
    7f1c:	d1f2      	bne.n	7f04 <l2cap_recv+0xc>
	if (!hdr->ident) {
    7f1e:	7871      	ldrb	r1, [r6, #1]
    7f20:	2900      	cmp	r1, #0
    7f22:	d0ef      	beq.n	7f04 <l2cap_recv+0xc>
	switch (hdr->code) {
    7f24:	7833      	ldrb	r3, [r6, #0]
    7f26:	3b01      	subs	r3, #1
    7f28:	2b15      	cmp	r3, #21
    7f2a:	d852      	bhi.n	7fd2 <l2cap_recv+0xda>
    7f2c:	a201      	add	r2, pc, #4	; (adr r2, 7f34 <l2cap_recv+0x3c>)
    7f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    7f32:	bf00      	nop
    7f34:	00007fc9 	.word	0x00007fc9
    7f38:	00007fd3 	.word	0x00007fd3
    7f3c:	00007fd3 	.word	0x00007fd3
    7f40:	00007fd3 	.word	0x00007fd3
    7f44:	00007fd3 	.word	0x00007fd3
    7f48:	00007fab 	.word	0x00007fab
    7f4c:	00007fb5 	.word	0x00007fb5
    7f50:	00007fd3 	.word	0x00007fd3
    7f54:	00007fd3 	.word	0x00007fd3
    7f58:	00007fd3 	.word	0x00007fd3
    7f5c:	00007fd3 	.word	0x00007fd3
    7f60:	00007fd3 	.word	0x00007fd3
    7f64:	00007fd3 	.word	0x00007fd3
    7f68:	00007fd3 	.word	0x00007fd3
    7f6c:	00007fd3 	.word	0x00007fd3
    7f70:	00007fd3 	.word	0x00007fd3
    7f74:	00007fd3 	.word	0x00007fd3
    7f78:	00007f8d 	.word	0x00007f8d
    7f7c:	00007f05 	.word	0x00007f05
    7f80:	00007f97 	.word	0x00007f97
    7f84:	00007fa1 	.word	0x00007fa1
    7f88:	00007fbf 	.word	0x00007fbf
		le_conn_param_update_req(l2cap, hdr->ident, buf);
    7f8c:	4622      	mov	r2, r4
    7f8e:	4628      	mov	r0, r5
    7f90:	f7ff fc22 	bl	77d8 <le_conn_param_update_req>
		break;
    7f94:	e7b6      	b.n	7f04 <l2cap_recv+0xc>
		le_conn_req(l2cap, hdr->ident, buf);
    7f96:	4622      	mov	r2, r4
    7f98:	4628      	mov	r0, r5
    7f9a:	f7ff fd4d 	bl	7a38 <le_conn_req>
		break;
    7f9e:	e7b1      	b.n	7f04 <l2cap_recv+0xc>
		le_conn_rsp(l2cap, hdr->ident, buf);
    7fa0:	4622      	mov	r2, r4
    7fa2:	4628      	mov	r0, r5
    7fa4:	f7ff f954 	bl	7250 <le_conn_rsp>
		break;
    7fa8:	e7ac      	b.n	7f04 <l2cap_recv+0xc>
		le_disconn_req(l2cap, hdr->ident, buf);
    7faa:	4622      	mov	r2, r4
    7fac:	4628      	mov	r0, r5
    7fae:	f7ff fc57 	bl	7860 <le_disconn_req>
		break;
    7fb2:	e7a7      	b.n	7f04 <l2cap_recv+0xc>
		le_disconn_rsp(l2cap, hdr->ident, buf);
    7fb4:	4622      	mov	r2, r4
    7fb6:	4628      	mov	r0, r5
    7fb8:	f7ff f9a0 	bl	72fc <le_disconn_rsp>
		break;
    7fbc:	e7a2      	b.n	7f04 <l2cap_recv+0xc>
		le_credits(l2cap, hdr->ident, buf);
    7fbe:	4622      	mov	r2, r4
    7fc0:	4628      	mov	r0, r5
    7fc2:	f7ff ff7b 	bl	7ebc <le_credits>
		break;
    7fc6:	e79d      	b.n	7f04 <l2cap_recv+0xc>
		reject_cmd(l2cap, hdr->ident, buf);
    7fc8:	4622      	mov	r2, r4
    7fca:	4628      	mov	r0, r5
    7fcc:	f7ff f9a5 	bl	731a <reject_cmd>
		break;
    7fd0:	e798      	b.n	7f04 <l2cap_recv+0xc>
		l2cap_send_reject(chan->conn, hdr->ident,
    7fd2:	6828      	ldr	r0, [r5, #0]
    7fd4:	2200      	movs	r2, #0
    7fd6:	9200      	str	r2, [sp, #0]
    7fd8:	4613      	mov	r3, r2
    7fda:	f7ff fbd9 	bl	7790 <l2cap_send_reject>
		break;
    7fde:	e791      	b.n	7f04 <l2cap_recv+0xc>

00007fe0 <bt_l2cap_chan_send>:

int bt_l2cap_chan_send(struct bt_l2cap_chan *chan, struct net_buf *buf)
{
    7fe0:	b510      	push	{r4, lr}
    7fe2:	b082      	sub	sp, #8
    7fe4:	9101      	str	r1, [sp, #4]
	int err;

	if (!buf) {
    7fe6:	b1f9      	cbz	r1, 8028 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x28>
		return -EINVAL;
	}

	BT_DBG("chan %p buf %p len %zu", chan, buf, net_buf_frags_len(buf));

	if (!chan->conn || chan->conn->state != BT_CONN_CONNECTED) {
    7fe8:	6803      	ldr	r3, [r0, #0]
    7fea:	b303      	cbz	r3, 802e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2e>
    7fec:	7b1b      	ldrb	r3, [r3, #12]
    7fee:	2b03      	cmp	r3, #3
    7ff0:	d120      	bne.n	8034 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x34>
    7ff2:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_BREDR) &&
	    chan->conn->type == BT_CONN_TYPE_BR) {
		return bt_l2cap_br_chan_send(chan, buf);
	}

	err = l2cap_chan_le_send_sdu(BT_L2CAP_LE_CHAN(chan), &buf, 0);
    7ff4:	2200      	movs	r2, #0
    7ff6:	a901      	add	r1, sp, #4
    7ff8:	f7ff fb40 	bl	767c <l2cap_chan_le_send_sdu>
	if (err < 0) {
    7ffc:	2800      	cmp	r0, #0
    7ffe:	db01      	blt.n	8004 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4>
		}
		BT_ERR("failed to send message %d", err);
	}

	return err;
}
    8000:	b002      	add	sp, #8
    8002:	bd10      	pop	{r4, pc}
		if (err == -EAGAIN) {
    8004:	f110 0f0b 	cmn.w	r0, #11
    8008:	d1fa      	bne.n	8000 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC>
			net_buf_put(&(BT_L2CAP_LE_CHAN(chan))->tx_queue, buf);
    800a:	9901      	ldr	r1, [sp, #4]
    800c:	f104 0080 	add.w	r0, r4, #128	; 0x80
    8010:	f012 f86a 	bl	1a0e8 <net_buf_put>
			return *((int *)net_buf_user_data(buf));
    8014:	9a01      	ldr	r2, [sp, #4]
	return (void *)ROUND_UP((buf->__buf + buf->size), sizeof(int));
    8016:	f102 0310 	add.w	r3, r2, #16
    801a:	89d2      	ldrh	r2, [r2, #14]
    801c:	4413      	add	r3, r2
    801e:	3303      	adds	r3, #3
    8020:	f023 0303 	bic.w	r3, r3, #3
    8024:	6818      	ldr	r0, [r3, #0]
    8026:	e7eb      	b.n	8000 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC>
		return -EINVAL;
    8028:	f06f 0015 	mvn.w	r0, #21
    802c:	e7e8      	b.n	8000 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC>
		return -ENOTCONN;
    802e:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    8032:	e7e5      	b.n	8000 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC>
    8034:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    8038:	e7e2      	b.n	8000 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC>

0000803a <range_is_valid>:
}

static bool range_is_valid(u16_t start, u16_t end, u16_t *err)
{
	/* Handle 0 is invalid */
	if (!start || !end) {
    803a:	b100      	cbz	r0, 803e <range_is_valid+0x4>
    803c:	b919      	cbnz	r1, 8046 <range_is_valid+0xc>
		if (err) {
    803e:	b142      	cbz	r2, 8052 <range_is_valid+0x18>
			*err = 0;
    8040:	2000      	movs	r0, #0
    8042:	8010      	strh	r0, [r2, #0]
    8044:	4770      	bx	lr
		}
		return false;
	}

	/* Check if range is valid */
	if (start > end) {
    8046:	4288      	cmp	r0, r1
    8048:	d905      	bls.n	8056 <range_is_valid+0x1c>
		if (err) {
    804a:	b132      	cbz	r2, 805a <range_is_valid+0x20>
			*err = start;
    804c:	8010      	strh	r0, [r2, #0]
		}
		return false;
    804e:	2000      	movs	r0, #0
    8050:	4770      	bx	lr
		return false;
    8052:	2000      	movs	r0, #0
    8054:	4770      	bx	lr
	}

	return true;
    8056:	2001      	movs	r0, #1
    8058:	4770      	bx	lr
		return false;
    805a:	2000      	movs	r0, #0
}
    805c:	4770      	bx	lr

0000805e <check_perm>:
}

static u8_t check_perm(struct bt_conn *conn, const struct bt_gatt_attr *attr,
		       u8_t mask)
{
	if ((mask & BT_GATT_PERM_READ) &&
    805e:	f012 0f01 	tst.w	r2, #1
    8062:	d007      	beq.n	8074 <check_perm+0x16>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
    8064:	7c8b      	ldrb	r3, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
    8066:	f013 0f15 	tst.w	r3, #21
    806a:	d101      	bne.n	8070 <check_perm+0x12>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
    806c:	2002      	movs	r0, #2
    806e:	4770      	bx	lr
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
    8070:	684b      	ldr	r3, [r1, #4]
    8072:	b1eb      	cbz	r3, 80b0 <check_perm+0x52>
	}

	if ((mask & BT_GATT_PERM_WRITE) &&
    8074:	f012 0f02 	tst.w	r2, #2
    8078:	d007      	beq.n	808a <check_perm+0x2c>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
    807a:	7c8b      	ldrb	r3, [r1, #18]
	if ((mask & BT_GATT_PERM_WRITE) &&
    807c:	f013 0f2a 	tst.w	r3, #42	; 0x2a
    8080:	d101      	bne.n	8086 <check_perm+0x28>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
    8082:	2003      	movs	r0, #3
    8084:	4770      	bx	lr
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
    8086:	688b      	ldr	r3, [r1, #8]
    8088:	b1a3      	cbz	r3, 80b4 <check_perm+0x56>
	}

	mask &= attr->perm;
    808a:	7c8b      	ldrb	r3, [r1, #18]
    808c:	401a      	ands	r2, r3
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
    808e:	f012 0f30 	tst.w	r2, #48	; 0x30
    8092:	d004      	beq.n	809e <check_perm+0x40>
#if defined(CONFIG_BT_SMP)
		if (conn->sec_level < BT_SECURITY_HIGH) {
    8094:	7a03      	ldrb	r3, [r0, #8]
    8096:	2b02      	cmp	r3, #2
    8098:	d801      	bhi.n	809e <check_perm+0x40>
			return BT_ATT_ERR_AUTHENTICATION;
    809a:	2005      	movs	r0, #5
    809c:	4770      	bx	lr
#else
		return BT_ATT_ERR_AUTHENTICATION;
#endif /* CONFIG_BT_SMP */
	}

	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
    809e:	f012 0f0c 	tst.w	r2, #12
    80a2:	d009      	beq.n	80b8 <check_perm+0x5a>
#if defined(CONFIG_BT_SMP)
		if (!conn->encrypt) {
    80a4:	7a83      	ldrb	r3, [r0, #10]
    80a6:	b90b      	cbnz	r3, 80ac <check_perm+0x4e>
			return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
    80a8:	200f      	movs	r0, #15
		return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
#endif /* CONFIG_BT_SMP */
	}

	return 0;
}
    80aa:	4770      	bx	lr
	return 0;
    80ac:	2000      	movs	r0, #0
    80ae:	4770      	bx	lr
		return BT_ATT_ERR_READ_NOT_PERMITTED;
    80b0:	2002      	movs	r0, #2
    80b2:	4770      	bx	lr
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
    80b4:	2003      	movs	r0, #3
    80b6:	4770      	bx	lr
	return 0;
    80b8:	2000      	movs	r0, #0
    80ba:	4770      	bx	lr

000080bc <err_to_att>:

static u8_t err_to_att(int err)
{
	BT_DBG("%d", err);

	if (err < 0 && err >= -0xff) {
    80bc:	f100 03ff 	add.w	r3, r0, #255	; 0xff
    80c0:	2bfe      	cmp	r3, #254	; 0xfe
    80c2:	d901      	bls.n	80c8 <err_to_att+0xc>
		return -err;
	}

	return BT_ATT_ERR_UNLIKELY;
    80c4:	200e      	movs	r0, #14
}
    80c6:	4770      	bx	lr
		return -err;
    80c8:	4240      	negs	r0, r0
    80ca:	b2c0      	uxtb	r0, r0
    80cc:	4770      	bx	lr

000080ce <write_cb>:
	u16_t offset;
	u8_t err;
};

static u8_t write_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    80ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    80d2:	b082      	sub	sp, #8
    80d4:	4606      	mov	r6, r0
    80d6:	460c      	mov	r4, r1
	int write;

	BT_DBG("handle 0x%04x offset %u", attr->handle, data->offset);

	/* Check attribute permissions */
	data->err = check_perm(data->conn, attr, BT_GATT_PERM_WRITE_MASK);
    80d8:	680f      	ldr	r7, [r1, #0]
    80da:	222a      	movs	r2, #42	; 0x2a
    80dc:	4601      	mov	r1, r0
    80de:	4638      	mov	r0, r7
    80e0:	f7ff ffbd 	bl	805e <check_perm>
    80e4:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    80e6:	b120      	cbz	r0, 80f2 <write_cb+0x24>
		return BT_GATT_ITER_STOP;
    80e8:	2500      	movs	r5, #0
	}

	data->err = 0;

	return BT_GATT_ITER_CONTINUE;
}
    80ea:	4628      	mov	r0, r5
    80ec:	b002      	add	sp, #8
    80ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    80f2:	4605      	mov	r5, r0
	write = attr->write(data->conn, attr, data->value, data->len,
    80f4:	f8d6 8008 	ldr.w	r8, [r6, #8]
    80f8:	7c23      	ldrb	r3, [r4, #16]
    80fa:	8a62      	ldrh	r2, [r4, #18]
    80fc:	2100      	movs	r1, #0
    80fe:	9101      	str	r1, [sp, #4]
    8100:	9200      	str	r2, [sp, #0]
    8102:	68e2      	ldr	r2, [r4, #12]
    8104:	4631      	mov	r1, r6
    8106:	4638      	mov	r0, r7
    8108:	47c0      	blx	r8
	if (write < 0 || write != data->len) {
    810a:	2800      	cmp	r0, #0
    810c:	db02      	blt.n	8114 <write_cb+0x46>
    810e:	7c23      	ldrb	r3, [r4, #16]
    8110:	4298      	cmp	r0, r3
    8112:	d003      	beq.n	811c <write_cb+0x4e>
		data->err = err_to_att(write);
    8114:	f7ff ffd2 	bl	80bc <err_to_att>
    8118:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
    811a:	e7e6      	b.n	80ea <write_cb+0x1c>
	data->err = 0;
    811c:	2300      	movs	r3, #0
    811e:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
    8120:	2501      	movs	r5, #1
    8122:	e7e2      	b.n	80ea <write_cb+0x1c>

00008124 <att_prepare_write_req>:

	BT_DBG("handle 0x%04x offset %u", handle, offset);

	return att_prep_write_rsp(att, handle, offset, buf->data, buf->len);
#endif /* CONFIG_BT_ATT_PREPARE_COUNT */
}
    8124:	2006      	movs	r0, #6
    8126:	4770      	bx	lr

00008128 <att_exec_write_req>:

	BT_DBG("flags 0x%02x", req->flags);

	return att_exec_write_rsp(att, req->flags);
#endif /* CONFIG_BT_ATT_PREPARE_COUNT */
}
    8128:	2006      	movs	r0, #6
    812a:	4770      	bx	lr

0000812c <att_op_get_type>:
static att_type_t att_op_get_type(u8_t op)
{
	const struct att_handler *handler;
	int i;

	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    812c:	2300      	movs	r3, #0
    812e:	2b1a      	cmp	r3, #26
    8130:	d80b      	bhi.n	814a <att_op_get_type+0x1e>
		if (op == handlers[i].op) {
    8132:	4a09      	ldr	r2, [pc, #36]	; (8158 <att_op_get_type+0x2c>)
    8134:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
    8138:	4282      	cmp	r2, r0
    813a:	d001      	beq.n	8140 <att_op_get_type+0x14>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    813c:	3301      	adds	r3, #1
    813e:	e7f6      	b.n	812e <att_op_get_type+0x2>
			return handlers[i].type;
    8140:	4a05      	ldr	r2, [pc, #20]	; (8158 <att_op_get_type+0x2c>)
    8142:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    8146:	7898      	ldrb	r0, [r3, #2]
    8148:	4770      	bx	lr
		}
	}

	if (op & ATT_CMD_MASK) {
    814a:	f010 0f40 	tst.w	r0, #64	; 0x40
    814e:	d101      	bne.n	8154 <att_op_get_type+0x28>
		return ATT_COMMAND;
	}

	return ATT_UNKNOWN;
    8150:	2006      	movs	r0, #6
}
    8152:	4770      	bx	lr
		return ATT_COMMAND;
    8154:	2000      	movs	r0, #0
    8156:	4770      	bx	lr
    8158:	0002f47c 	.word	0x0002f47c

0000815c <att_cb>:
{
    815c:	b508      	push	{r3, lr}
	switch (att_op_get_type(buf->data[0])) {
    815e:	6883      	ldr	r3, [r0, #8]
    8160:	7818      	ldrb	r0, [r3, #0]
    8162:	f7ff ffe3 	bl	812c <att_op_get_type>
    8166:	3801      	subs	r0, #1
    8168:	2804      	cmp	r0, #4
    816a:	d808      	bhi.n	817e <att_cb+0x22>
    816c:	e8df f000 	tbb	[pc, r0]
    8170:	09070305 	.word	0x09070305
    8174:	05          	.byte	0x05
    8175:	00          	.byte	0x00
		return att_rsp_sent;
    8176:	4804      	ldr	r0, [pc, #16]	; (8188 <att_cb+0x2c>)
    8178:	bd08      	pop	{r3, pc}
		return att_req_sent;
    817a:	4804      	ldr	r0, [pc, #16]	; (818c <att_cb+0x30>)
    817c:	bd08      	pop	{r3, pc}
		return att_pdu_sent;
    817e:	4804      	ldr	r0, [pc, #16]	; (8190 <att_cb+0x34>)
    8180:	bd08      	pop	{r3, pc}
		return att_cfm_sent;
    8182:	4804      	ldr	r0, [pc, #16]	; (8194 <att_cb+0x38>)
}
    8184:	bd08      	pop	{r3, pc}
    8186:	bf00      	nop
    8188:	000082cf 	.word	0x000082cf
    818c:	00008341 	.word	0x00008341
    8190:	000082f9 	.word	0x000082f9
    8194:	00008307 	.word	0x00008307

00008198 <read_cb>:
{
    8198:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    819c:	b083      	sub	sp, #12
    819e:	4606      	mov	r6, r0
    81a0:	460c      	mov	r4, r1
	struct bt_att *att = data->att;
    81a2:	f8d1 8000 	ldr.w	r8, [r1]
	struct bt_conn *conn = att->chan.chan.conn;
    81a6:	f8d8 7000 	ldr.w	r7, [r8]
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    81aa:	6888      	ldr	r0, [r1, #8]
    81ac:	2100      	movs	r1, #0
    81ae:	3008      	adds	r0, #8
    81b0:	f011 fff4 	bl	1a19c <net_buf_simple_add>
    81b4:	60e0      	str	r0, [r4, #12]
	data->err = 0x00;
    81b6:	2300      	movs	r3, #0
    81b8:	7423      	strb	r3, [r4, #16]
	data->err = check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    81ba:	2215      	movs	r2, #21
    81bc:	4631      	mov	r1, r6
    81be:	4638      	mov	r0, r7
    81c0:	f7ff ff4d 	bl	805e <check_perm>
    81c4:	7420      	strb	r0, [r4, #16]
	if (data->err) {
    81c6:	b120      	cbz	r0, 81d2 <read_cb+0x3a>
		return BT_GATT_ITER_STOP;
    81c8:	2500      	movs	r5, #0
}
    81ca:	4628      	mov	r0, r5
    81cc:	b003      	add	sp, #12
    81ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    81d2:	4605      	mov	r5, r0
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    81d4:	f8d6 9004 	ldr.w	r9, [r6, #4]
    81d8:	68a3      	ldr	r3, [r4, #8]
    81da:	6899      	ldr	r1, [r3, #8]
    81dc:	899a      	ldrh	r2, [r3, #12]
			  att->chan.tx.mtu - data->buf->len, data->offset);
    81de:	f8b8 3062 	ldrh.w	r3, [r8, #98]	; 0x62
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    81e2:	1a9b      	subs	r3, r3, r2
    81e4:	88a0      	ldrh	r0, [r4, #4]
    81e6:	9000      	str	r0, [sp, #0]
    81e8:	b29b      	uxth	r3, r3
    81ea:	440a      	add	r2, r1
    81ec:	4631      	mov	r1, r6
    81ee:	4638      	mov	r0, r7
    81f0:	47c8      	blx	r9
	if (read < 0) {
    81f2:	1e01      	subs	r1, r0, #0
    81f4:	db05      	blt.n	8202 <read_cb+0x6a>
	net_buf_add(data->buf, read);
    81f6:	68a0      	ldr	r0, [r4, #8]
    81f8:	3008      	adds	r0, #8
    81fa:	f011 ffcf 	bl	1a19c <net_buf_simple_add>
	return BT_GATT_ITER_CONTINUE;
    81fe:	2501      	movs	r5, #1
    8200:	e7e3      	b.n	81ca <read_cb+0x32>
		data->err = err_to_att(read);
    8202:	4608      	mov	r0, r1
    8204:	f7ff ff5a 	bl	80bc <err_to_att>
    8208:	7420      	strb	r0, [r4, #16]
		return BT_GATT_ITER_STOP;
    820a:	e7de      	b.n	81ca <read_cb+0x32>

0000820c <att_chan_get>:
		send_err_rsp(chan->conn, hdr->code, 0, err);
	}
}

static struct bt_att *att_chan_get(struct bt_conn *conn)
{
    820c:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *chan;
	struct bt_att *att;

	if (conn->state != BT_CONN_CONNECTED) {
    820e:	7b03      	ldrb	r3, [r0, #12]
    8210:	2b03      	cmp	r3, #3
    8212:	d10f      	bne.n	8234 <att_chan_get+0x28>
		BT_WARN("Not connected");
		return NULL;
	}

	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
    8214:	2104      	movs	r1, #4
    8216:	f7ff fb7b 	bl	7910 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    821a:	b168      	cbz	r0, 8238 <att_chan_get+0x2c>
    821c:	f3bf 8f5b 	dmb	ish
    8220:	f8d0 209c 	ldr.w	r2, [r0, #156]	; 0x9c
    8224:	f3bf 8f5b 	dmb	ish
		BT_ERR("Unable to find ATT channel");
		return NULL;
	}

	att = ATT_CHAN(chan);
	if (atomic_test_bit(att->flags, ATT_DISCONNECTED)) {
    8228:	f012 0f04 	tst.w	r2, #4
    822c:	d100      	bne.n	8230 <att_chan_get+0x24>
		BT_WARN("ATT context flagged as disconnected");
		return NULL;
	}

	return att;
}
    822e:	bd08      	pop	{r3, pc}
		return NULL;
    8230:	2000      	movs	r0, #0
    8232:	bd08      	pop	{r3, pc}
		return NULL;
    8234:	2000      	movs	r0, #0
    8236:	bd08      	pop	{r3, pc}
		return NULL;
    8238:	2000      	movs	r0, #0
    823a:	bd08      	pop	{r3, pc}

0000823c <bt_att_accept>:
	att->req->buf = NULL;
}
#endif /* CONFIG_BT_SMP */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
    823c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#endif /* CONFIG_BT_SMP */
	};

	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_req_pool); i++) {
    823e:	2400      	movs	r4, #0
    8240:	b11c      	cbz	r4, 824a <bt_att_accept+0xe>
		return 0;
	}

	BT_ERR("No available ATT context for conn %p", conn);

	return -ENOMEM;
    8242:	f06f 040b 	mvn.w	r4, #11
}
    8246:	4620      	mov	r0, r4
    8248:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (att->chan.chan.conn) {
    824a:	23ec      	movs	r3, #236	; 0xec
    824c:	fb03 f304 	mul.w	r3, r3, r4
    8250:	4a12      	ldr	r2, [pc, #72]	; (829c <bt_att_accept+0x60>)
    8252:	58d3      	ldr	r3, [r2, r3]
    8254:	b10b      	cbz	r3, 825a <bt_att_accept+0x1e>
	for (i = 0; i < ARRAY_SIZE(bt_req_pool); i++) {
    8256:	3401      	adds	r4, #1
    8258:	e7f2      	b.n	8240 <bt_att_accept+0x4>
    825a:	460d      	mov	r5, r1
		att->chan.chan.ops = &ops;
    825c:	480f      	ldr	r0, [pc, #60]	; (829c <bt_att_accept+0x60>)
    825e:	23ec      	movs	r3, #236	; 0xec
    8260:	fb03 f304 	mul.w	r3, r3, r4
    8264:	18c6      	adds	r6, r0, r3
    8266:	4a0e      	ldr	r2, [pc, #56]	; (82a0 <bt_att_accept+0x64>)
    8268:	6072      	str	r2, [r6, #4]
		atomic_set(att->flags, 0);
    826a:	f103 0298 	add.w	r2, r3, #152	; 0x98
    826e:	4402      	add	r2, r0
    8270:	3204      	adds	r2, #4
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    8272:	2100      	movs	r1, #0
    8274:	f3bf 8f5b 	dmb	ish
    8278:	e852 7f00 	ldrex	r7, [r2]
    827c:	e842 1e00 	strex	lr, r1, [r2]
    8280:	f1be 0f00 	cmp.w	lr, #0
    8284:	d1f8      	bne.n	8278 <bt_att_accept+0x3c>
    8286:	f3bf 8f5b 	dmb	ish
		k_sem_init(&att->tx_sem, CONFIG_BT_ATT_TX_MAX,
    828a:	33d0      	adds	r3, #208	; 0xd0
    828c:	4418      	add	r0, r3
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    828e:	2202      	movs	r2, #2
    8290:	4611      	mov	r1, r2
    8292:	3004      	adds	r0, #4
    8294:	f020 fa78 	bl	28788 <_impl_k_sem_init>
		*chan = &att->chan.chan;
    8298:	602e      	str	r6, [r5, #0]
		return 0;
    829a:	e7d4      	b.n	8246 <bt_att_accept+0xa>
    829c:	200005e4 	.word	0x200005e4
    82a0:	2000b97c 	.word	0x2000b97c

000082a4 <att_req_destroy>:
{
    82a4:	b510      	push	{r4, lr}
    82a6:	4604      	mov	r4, r0
	if (req->buf) {
    82a8:	6900      	ldr	r0, [r0, #16]
    82aa:	b108      	cbz	r0, 82b0 <att_req_destroy+0xc>
		net_buf_unref(req->buf);
    82ac:	f011 ff2a 	bl	1a104 <net_buf_unref>
	if (req->destroy) {
    82b0:	68a3      	ldr	r3, [r4, #8]
    82b2:	b10b      	cbz	r3, 82b8 <att_req_destroy+0x14>
		req->destroy(req);
    82b4:	4620      	mov	r0, r4
    82b6:	4798      	blx	r3
	memset(req, 0, sizeof(*req));
    82b8:	2218      	movs	r2, #24
    82ba:	2100      	movs	r1, #0
    82bc:	4620      	mov	r0, r4
    82be:	f022 fbe1 	bl	2aa84 <memset>
    82c2:	bd10      	pop	{r4, pc}

000082c4 <att_get>:
{
    82c4:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    82c6:	2104      	movs	r1, #4
    82c8:	f7ff fb07 	bl	78da <bt_l2cap_le_lookup_tx_cid>
}
    82cc:	bd08      	pop	{r3, pc}

000082ce <att_rsp_sent>:
{
    82ce:	b508      	push	{r3, lr}
	struct bt_att *att = att_get(conn);
    82d0:	f7ff fff8 	bl	82c4 <att_get>
	atomic_clear_bit(att->flags, ATT_PENDING_RSP);
    82d4:	f100 039c 	add.w	r3, r0, #156	; 0x9c
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    82d8:	f3bf 8f5b 	dmb	ish
    82dc:	e853 2f00 	ldrex	r2, [r3]
    82e0:	f022 0201 	bic.w	r2, r2, #1
    82e4:	e843 2100 	strex	r1, r2, [r3]
    82e8:	2900      	cmp	r1, #0
    82ea:	d1f7      	bne.n	82dc <att_rsp_sent+0xe>
    82ec:	f3bf 8f5b 	dmb	ish
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    82f0:	30d4      	adds	r0, #212	; 0xd4
    82f2:	f020 fa52 	bl	2879a <_impl_k_sem_give>
    82f6:	bd08      	pop	{r3, pc}

000082f8 <att_pdu_sent>:
{
    82f8:	b508      	push	{r3, lr}
	struct bt_att *att = att_get(conn);
    82fa:	f7ff ffe3 	bl	82c4 <att_get>
    82fe:	30d4      	adds	r0, #212	; 0xd4
    8300:	f020 fa4b 	bl	2879a <_impl_k_sem_give>
    8304:	bd08      	pop	{r3, pc}

00008306 <att_cfm_sent>:
{
    8306:	b508      	push	{r3, lr}
	struct bt_att *att = att_get(conn);
    8308:	f7ff ffdc 	bl	82c4 <att_get>
	atomic_clear_bit(att->flags, ATT_PENDING_CFM);
    830c:	f100 039c 	add.w	r3, r0, #156	; 0x9c
    8310:	f3bf 8f5b 	dmb	ish
    8314:	e853 2f00 	ldrex	r2, [r3]
    8318:	f022 0202 	bic.w	r2, r2, #2
    831c:	e843 2100 	strex	r1, r2, [r3]
    8320:	2900      	cmp	r1, #0
    8322:	d1f7      	bne.n	8314 <att_cfm_sent+0xe>
    8324:	f3bf 8f5b 	dmb	ish
    8328:	30d4      	adds	r0, #212	; 0xd4
    832a:	f020 fa36 	bl	2879a <_impl_k_sem_give>
    832e:	bd08      	pop	{r3, pc}

00008330 <att_notify>:
{
    8330:	b508      	push	{r3, lr}
	handle = net_buf_pull_le16(buf);
    8332:	f101 0008 	add.w	r0, r1, #8
    8336:	f011 ff8e 	bl	1a256 <net_buf_simple_pull_le16>
}
    833a:	2000      	movs	r0, #0
    833c:	bd08      	pop	{r3, pc}
	...

00008340 <att_req_sent>:
{
    8340:	b510      	push	{r4, lr}
	struct bt_att *att = att_get(conn);
    8342:	f7ff ffbf 	bl	82c4 <att_get>
    8346:	4604      	mov	r4, r0
    8348:	30d4      	adds	r0, #212	; 0xd4
    834a:	f020 fa26 	bl	2879a <_impl_k_sem_give>
	if (att->req) {
    834e:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    8352:	b133      	cbz	r3, 8362 <att_req_sent+0x22>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    8354:	f247 5230 	movw	r2, #30000	; 0x7530
    8358:	f104 01ac 	add.w	r1, r4, #172	; 0xac
    835c:	4801      	ldr	r0, [pc, #4]	; (8364 <att_req_sent+0x24>)
    835e:	f021 f865 	bl	2942c <k_delayed_work_submit_to_queue>
    8362:	bd10      	pop	{r4, pc}
    8364:	20002b08 	.word	0x20002b08

00008368 <read_group_cb>:
{
    8368:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    836c:	b084      	sub	sp, #16
    836e:	4605      	mov	r5, r0
    8370:	460c      	mov	r4, r1
	struct bt_att *att = data->att;
    8372:	680e      	ldr	r6, [r1, #0]
	struct bt_conn *conn = att->chan.chan.conn;
    8374:	6837      	ldr	r7, [r6, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    8376:	2300      	movs	r3, #0
    8378:	f88d 3008 	strb.w	r3, [sp, #8]
    837c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    8380:	f8ad 300a 	strh.w	r3, [sp, #10]
    8384:	a902      	add	r1, sp, #8
    8386:	6800      	ldr	r0, [r0, #0]
    8388:	f7fb fb8d 	bl	3aa6 <bt_uuid_cmp>
    838c:	b1a8      	cbz	r0, 83ba <read_group_cb+0x52>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    838e:	2300      	movs	r3, #0
    8390:	f88d 300c 	strb.w	r3, [sp, #12]
    8394:	f642 0301 	movw	r3, #10241	; 0x2801
    8398:	f8ad 300e 	strh.w	r3, [sp, #14]
    839c:	a903      	add	r1, sp, #12
    839e:	6828      	ldr	r0, [r5, #0]
    83a0:	f7fb fb81 	bl	3aa6 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    83a4:	b148      	cbz	r0, 83ba <read_group_cb+0x52>
		if (data->group && attr->handle > data->group->end_handle) {
    83a6:	6923      	ldr	r3, [r4, #16]
    83a8:	2b00      	cmp	r3, #0
    83aa:	d04c      	beq.n	8446 <read_group_cb+0xde>
    83ac:	8a2a      	ldrh	r2, [r5, #16]
    83ae:	8859      	ldrh	r1, [r3, #2]
    83b0:	428a      	cmp	r2, r1
    83b2:	d94a      	bls.n	844a <read_group_cb+0xe2>
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
    83b4:	805a      	strh	r2, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
    83b6:	2001      	movs	r0, #1
    83b8:	e039      	b.n	842e <read_group_cb+0xc6>
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    83ba:	6861      	ldr	r1, [r4, #4]
    83bc:	6828      	ldr	r0, [r5, #0]
    83be:	f7fb fb72 	bl	3aa6 <bt_uuid_cmp>
    83c2:	2800      	cmp	r0, #0
    83c4:	d130      	bne.n	8428 <read_group_cb+0xc0>
	if (data->rsp->len &&
    83c6:	68e3      	ldr	r3, [r4, #12]
    83c8:	781a      	ldrb	r2, [r3, #0]
    83ca:	b132      	cbz	r2, 83da <read_group_cb+0x72>
	    att->chan.tx.mtu - data->buf->len < data->rsp->len) {
    83cc:	f8b6 3062 	ldrh.w	r3, [r6, #98]	; 0x62
    83d0:	68a1      	ldr	r1, [r4, #8]
    83d2:	8989      	ldrh	r1, [r1, #12]
    83d4:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
    83d6:	4293      	cmp	r3, r2
    83d8:	db39      	blt.n	844e <read_group_cb+0xe6>
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    83da:	68a0      	ldr	r0, [r4, #8]
    83dc:	2104      	movs	r1, #4
    83de:	3008      	adds	r0, #8
    83e0:	f011 fedc 	bl	1a19c <net_buf_simple_add>
    83e4:	6120      	str	r0, [r4, #16]
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    83e6:	8a2b      	ldrh	r3, [r5, #16]
    83e8:	8003      	strh	r3, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(attr->handle);
    83ea:	6923      	ldr	r3, [r4, #16]
    83ec:	8a2a      	ldrh	r2, [r5, #16]
    83ee:	805a      	strh	r2, [r3, #2]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    83f0:	f8d5 8004 	ldr.w	r8, [r5, #4]
    83f4:	68a3      	ldr	r3, [r4, #8]
    83f6:	6899      	ldr	r1, [r3, #8]
    83f8:	899a      	ldrh	r2, [r3, #12]
			  att->chan.tx.mtu - data->buf->len, 0);
    83fa:	f8b6 3062 	ldrh.w	r3, [r6, #98]	; 0x62
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    83fe:	1a9b      	subs	r3, r3, r2
    8400:	2000      	movs	r0, #0
    8402:	9000      	str	r0, [sp, #0]
    8404:	b29b      	uxth	r3, r3
    8406:	440a      	add	r2, r1
    8408:	4629      	mov	r1, r5
    840a:	4638      	mov	r0, r7
    840c:	47c0      	blx	r8
	if (read < 0) {
    840e:	1e01      	subs	r1, r0, #0
    8410:	db1f      	blt.n	8452 <read_group_cb+0xea>
	if (!data->rsp->len) {
    8412:	68e2      	ldr	r2, [r4, #12]
    8414:	7813      	ldrb	r3, [r2, #0]
    8416:	b96b      	cbnz	r3, 8434 <read_group_cb+0xcc>
		data->rsp->len = read + sizeof(*data->group);
    8418:	1d0b      	adds	r3, r1, #4
    841a:	7013      	strb	r3, [r2, #0]
	net_buf_add(data->buf, read);
    841c:	68a0      	ldr	r0, [r4, #8]
    841e:	3008      	adds	r0, #8
    8420:	f011 febc 	bl	1a19c <net_buf_simple_add>
	return BT_GATT_ITER_CONTINUE;
    8424:	2001      	movs	r0, #1
    8426:	e002      	b.n	842e <read_group_cb+0xc6>
		data->group = NULL;
    8428:	2300      	movs	r3, #0
    842a:	6123      	str	r3, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
    842c:	2001      	movs	r0, #1
}
    842e:	b004      	add	sp, #16
    8430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (data->rsp->len != read + sizeof(*data->group)) {
    8434:	1d0a      	adds	r2, r1, #4
    8436:	4293      	cmp	r3, r2
    8438:	d0f0      	beq.n	841c <read_group_cb+0xb4>
		data->buf->len -= sizeof(*data->group);
    843a:	68a2      	ldr	r2, [r4, #8]
    843c:	8993      	ldrh	r3, [r2, #12]
    843e:	3b04      	subs	r3, #4
    8440:	8193      	strh	r3, [r2, #12]
		return false;
    8442:	2000      	movs	r0, #0
    8444:	e7f3      	b.n	842e <read_group_cb+0xc6>
		return BT_GATT_ITER_CONTINUE;
    8446:	2001      	movs	r0, #1
    8448:	e7f1      	b.n	842e <read_group_cb+0xc6>
    844a:	2001      	movs	r0, #1
    844c:	e7ef      	b.n	842e <read_group_cb+0xc6>
		return BT_GATT_ITER_STOP;
    844e:	2000      	movs	r0, #0
    8450:	e7ed      	b.n	842e <read_group_cb+0xc6>
		return BT_GATT_ITER_STOP;
    8452:	2000      	movs	r0, #0
    8454:	e7eb      	b.n	842e <read_group_cb+0xc6>

00008456 <read_type_cb>:
{
    8456:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    845a:	b082      	sub	sp, #8
    845c:	4606      	mov	r6, r0
    845e:	460c      	mov	r4, r1
	struct bt_att *att = data->att;
    8460:	680f      	ldr	r7, [r1, #0]
	struct bt_conn *conn = att->chan.chan.conn;
    8462:	f8d7 8000 	ldr.w	r8, [r7]
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    8466:	6849      	ldr	r1, [r1, #4]
    8468:	6800      	ldr	r0, [r0, #0]
    846a:	f7fb fb1c 	bl	3aa6 <bt_uuid_cmp>
    846e:	2800      	cmp	r0, #0
    8470:	d14d      	bne.n	850e <read_type_cb+0xb8>
	data->err = check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    8472:	2215      	movs	r2, #21
    8474:	4631      	mov	r1, r6
    8476:	4640      	mov	r0, r8
    8478:	f7ff fdf1 	bl	805e <check_perm>
    847c:	4605      	mov	r5, r0
    847e:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    8480:	b130      	cbz	r0, 8490 <read_type_cb+0x3a>
		if (data->rsp->len) {
    8482:	68e3      	ldr	r3, [r4, #12]
    8484:	781d      	ldrb	r5, [r3, #0]
    8486:	2d00      	cmp	r5, #0
    8488:	d042      	beq.n	8510 <read_type_cb+0xba>
			data->err = 0x00;
    848a:	2500      	movs	r5, #0
    848c:	7525      	strb	r5, [r4, #20]
    848e:	e03f      	b.n	8510 <read_type_cb+0xba>
	data->err = 0x00;
    8490:	f04f 0900 	mov.w	r9, #0
    8494:	f884 9014 	strb.w	r9, [r4, #20]
	data->item = net_buf_add(data->buf, sizeof(*data->item));
    8498:	68a0      	ldr	r0, [r4, #8]
    849a:	2102      	movs	r1, #2
    849c:	3008      	adds	r0, #8
    849e:	f011 fe7d 	bl	1a19c <net_buf_simple_add>
    84a2:	6120      	str	r0, [r4, #16]
	data->item->handle = sys_cpu_to_le16(attr->handle);
    84a4:	8a33      	ldrh	r3, [r6, #16]
    84a6:	8003      	strh	r3, [r0, #0]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    84a8:	f8d6 a004 	ldr.w	sl, [r6, #4]
    84ac:	68a3      	ldr	r3, [r4, #8]
    84ae:	6899      	ldr	r1, [r3, #8]
    84b0:	899a      	ldrh	r2, [r3, #12]
			  att->chan.tx.mtu - data->buf->len, 0);
    84b2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    84b6:	1a9b      	subs	r3, r3, r2
    84b8:	f8cd 9000 	str.w	r9, [sp]
    84bc:	b29b      	uxth	r3, r3
    84be:	440a      	add	r2, r1
    84c0:	4631      	mov	r1, r6
    84c2:	4640      	mov	r0, r8
    84c4:	47d0      	blx	sl
	if (read < 0) {
    84c6:	1e01      	subs	r1, r0, #0
    84c8:	db14      	blt.n	84f4 <read_type_cb+0x9e>
	if (!data->rsp->len) {
    84ca:	68e2      	ldr	r2, [r4, #12]
    84cc:	7813      	ldrb	r3, [r2, #0]
    84ce:	b9b3      	cbnz	r3, 84fe <read_type_cb+0xa8>
		data->rsp->len = read + sizeof(*data->item);
    84d0:	1c8b      	adds	r3, r1, #2
    84d2:	7013      	strb	r3, [r2, #0]
	net_buf_add(data->buf, read);
    84d4:	68a0      	ldr	r0, [r4, #8]
    84d6:	3008      	adds	r0, #8
    84d8:	f011 fe60 	bl	1a19c <net_buf_simple_add>
	return att->chan.tx.mtu - data->buf->len > data->rsp->len ?
    84dc:	f8b7 5062 	ldrh.w	r5, [r7, #98]	; 0x62
    84e0:	68a3      	ldr	r3, [r4, #8]
    84e2:	899b      	ldrh	r3, [r3, #12]
    84e4:	1aed      	subs	r5, r5, r3
    84e6:	68e3      	ldr	r3, [r4, #12]
    84e8:	781b      	ldrb	r3, [r3, #0]
	       BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    84ea:	429d      	cmp	r5, r3
    84ec:	bfd4      	ite	le
    84ee:	2500      	movle	r5, #0
    84f0:	2501      	movgt	r5, #1
    84f2:	e00d      	b.n	8510 <read_type_cb+0xba>
		data->err = err_to_att(read);
    84f4:	4608      	mov	r0, r1
    84f6:	f7ff fde1 	bl	80bc <err_to_att>
    84fa:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
    84fc:	e008      	b.n	8510 <read_type_cb+0xba>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
    84fe:	1c8a      	adds	r2, r1, #2
    8500:	4293      	cmp	r3, r2
    8502:	d0e7      	beq.n	84d4 <read_type_cb+0x7e>
		data->buf->len -= sizeof(*data->item);
    8504:	68a2      	ldr	r2, [r4, #8]
    8506:	8993      	ldrh	r3, [r2, #12]
    8508:	3b02      	subs	r3, #2
    850a:	8193      	strh	r3, [r2, #12]
		return BT_GATT_ITER_STOP;
    850c:	e000      	b.n	8510 <read_type_cb+0xba>
		return BT_GATT_ITER_CONTINUE;
    850e:	2501      	movs	r5, #1
}
    8510:	4628      	mov	r0, r5
    8512:	b002      	add	sp, #8
    8514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00008518 <uuid_create>:
{
    8518:	b510      	push	{r4, lr}
    851a:	4604      	mov	r4, r0
	switch (buf->len) {
    851c:	898b      	ldrh	r3, [r1, #12]
    851e:	2b02      	cmp	r3, #2
    8520:	d003      	beq.n	852a <uuid_create+0x12>
    8522:	2b10      	cmp	r3, #16
    8524:	d00a      	beq.n	853c <uuid_create+0x24>
	return false;
    8526:	2000      	movs	r0, #0
}
    8528:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_16;
    852a:	2300      	movs	r3, #0
    852c:	7003      	strb	r3, [r0, #0]
		BT_UUID_16(uuid)->val = net_buf_pull_le16(buf);
    852e:	f101 0008 	add.w	r0, r1, #8
    8532:	f011 fe90 	bl	1a256 <net_buf_simple_pull_le16>
    8536:	8060      	strh	r0, [r4, #2]
		return true;
    8538:	2001      	movs	r0, #1
    853a:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_128;
    853c:	2302      	movs	r3, #2
    853e:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(BT_UUID_128(uuid)->val, buf->data, buf->len);
    8542:	898a      	ldrh	r2, [r1, #12]
    8544:	6889      	ldr	r1, [r1, #8]
    8546:	f7f7 febb 	bl	2c0 <memcpy>
		return true;
    854a:	2001      	movs	r0, #1
    854c:	bd10      	pop	{r4, pc}

0000854e <find_info_cb>:
{
    854e:	b570      	push	{r4, r5, r6, lr}
    8550:	4605      	mov	r5, r0
    8552:	460c      	mov	r4, r1
	struct bt_att *att = data->att;
    8554:	680e      	ldr	r6, [r1, #0]
	if (!data->rsp) {
    8556:	688b      	ldr	r3, [r1, #8]
    8558:	b13b      	cbz	r3, 856a <find_info_cb+0x1c>
	switch (data->rsp->format) {
    855a:	68a3      	ldr	r3, [r4, #8]
    855c:	781b      	ldrb	r3, [r3, #0]
    855e:	2b01      	cmp	r3, #1
    8560:	d011      	beq.n	8586 <find_info_cb+0x38>
    8562:	2b02      	cmp	r3, #2
    8564:	d02b      	beq.n	85be <find_info_cb+0x70>
	return BT_GATT_ITER_STOP;
    8566:	2000      	movs	r0, #0
    8568:	bd70      	pop	{r4, r5, r6, pc}
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    856a:	6848      	ldr	r0, [r1, #4]
    856c:	2101      	movs	r1, #1
    856e:	3008      	adds	r0, #8
    8570:	f011 fe14 	bl	1a19c <net_buf_simple_add>
    8574:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
    8576:	682b      	ldr	r3, [r5, #0]
    8578:	781b      	ldrb	r3, [r3, #0]
    857a:	b913      	cbnz	r3, 8582 <find_info_cb+0x34>
    857c:	2301      	movs	r3, #1
    857e:	7003      	strb	r3, [r0, #0]
    8580:	e7eb      	b.n	855a <find_info_cb+0xc>
    8582:	2302      	movs	r3, #2
    8584:	e7fb      	b.n	857e <find_info_cb+0x30>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
    8586:	682b      	ldr	r3, [r5, #0]
    8588:	781b      	ldrb	r3, [r3, #0]
    858a:	b10b      	cbz	r3, 8590 <find_info_cb+0x42>
			return BT_GATT_ITER_STOP;
    858c:	2000      	movs	r0, #0
    858e:	bd70      	pop	{r4, r5, r6, pc}
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
    8590:	6860      	ldr	r0, [r4, #4]
    8592:	2104      	movs	r1, #4
    8594:	3008      	adds	r0, #8
    8596:	f011 fe01 	bl	1a19c <net_buf_simple_add>
    859a:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(attr->handle);
    859c:	8a2b      	ldrh	r3, [r5, #16]
    859e:	8003      	strh	r3, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
    85a0:	68e3      	ldr	r3, [r4, #12]
    85a2:	682a      	ldr	r2, [r5, #0]
    85a4:	8852      	ldrh	r2, [r2, #2]
    85a6:	805a      	strh	r2, [r3, #2]
		if (att->chan.tx.mtu - data->buf->len >
    85a8:	f8b6 3062 	ldrh.w	r3, [r6, #98]	; 0x62
    85ac:	6862      	ldr	r2, [r4, #4]
    85ae:	8992      	ldrh	r2, [r2, #12]
    85b0:	1a9b      	subs	r3, r3, r2
    85b2:	2b04      	cmp	r3, #4
    85b4:	d801      	bhi.n	85ba <find_info_cb+0x6c>
	return BT_GATT_ITER_STOP;
    85b6:	2000      	movs	r0, #0
    85b8:	bd70      	pop	{r4, r5, r6, pc}
			return BT_GATT_ITER_CONTINUE;
    85ba:	2001      	movs	r0, #1
    85bc:	bd70      	pop	{r4, r5, r6, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
    85be:	682b      	ldr	r3, [r5, #0]
    85c0:	781b      	ldrb	r3, [r3, #0]
    85c2:	2b02      	cmp	r3, #2
    85c4:	d001      	beq.n	85ca <find_info_cb+0x7c>
			return BT_GATT_ITER_STOP;
    85c6:	2000      	movs	r0, #0
    85c8:	bd70      	pop	{r4, r5, r6, pc}
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
    85ca:	6860      	ldr	r0, [r4, #4]
    85cc:	2112      	movs	r1, #18
    85ce:	3008      	adds	r0, #8
    85d0:	f011 fde4 	bl	1a19c <net_buf_simple_add>
    85d4:	60e0      	str	r0, [r4, #12]
		data->info128->handle = sys_cpu_to_le16(attr->handle);
    85d6:	8a2b      	ldrh	r3, [r5, #16]
    85d8:	8003      	strh	r3, [r0, #0]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
    85da:	68e0      	ldr	r0, [r4, #12]
    85dc:	6829      	ldr	r1, [r5, #0]
    85de:	2210      	movs	r2, #16
    85e0:	3101      	adds	r1, #1
    85e2:	3002      	adds	r0, #2
    85e4:	f7f7 fe6c 	bl	2c0 <memcpy>
		if (att->chan.tx.mtu - data->buf->len >
    85e8:	f8b6 3062 	ldrh.w	r3, [r6, #98]	; 0x62
    85ec:	6862      	ldr	r2, [r4, #4]
    85ee:	8992      	ldrh	r2, [r2, #12]
    85f0:	1a9b      	subs	r3, r3, r2
    85f2:	2b12      	cmp	r3, #18
    85f4:	d901      	bls.n	85fa <find_info_cb+0xac>
			return BT_GATT_ITER_CONTINUE;
    85f6:	2001      	movs	r0, #1
    85f8:	bd70      	pop	{r4, r5, r6, pc}
	return BT_GATT_ITER_STOP;
    85fa:	2000      	movs	r0, #0
}
    85fc:	bd70      	pop	{r4, r5, r6, pc}

000085fe <find_type_cb>:
{
    85fe:	b5f0      	push	{r4, r5, r6, r7, lr}
    8600:	b089      	sub	sp, #36	; 0x24
    8602:	4605      	mov	r5, r0
    8604:	460c      	mov	r4, r1
	struct bt_att *att = data->att;
    8606:	680e      	ldr	r6, [r1, #0]
	struct bt_conn *conn = att->chan.chan.conn;
    8608:	6837      	ldr	r7, [r6, #0]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    860a:	2300      	movs	r3, #0
    860c:	f88d 3018 	strb.w	r3, [sp, #24]
    8610:	f642 0301 	movw	r3, #10241	; 0x2801
    8614:	f8ad 301a 	strh.w	r3, [sp, #26]
    8618:	a906      	add	r1, sp, #24
    861a:	6800      	ldr	r0, [r0, #0]
    861c:	f7fb fa43 	bl	3aa6 <bt_uuid_cmp>
    8620:	b920      	cbnz	r0, 862c <find_type_cb+0x2e>
		data->group = NULL;
    8622:	2300      	movs	r3, #0
    8624:	60a3      	str	r3, [r4, #8]
		return BT_GATT_ITER_CONTINUE;
    8626:	2001      	movs	r0, #1
}
    8628:	b009      	add	sp, #36	; 0x24
    862a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
    862c:	2300      	movs	r3, #0
    862e:	f88d 301c 	strb.w	r3, [sp, #28]
    8632:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    8636:	f8ad 301e 	strh.w	r3, [sp, #30]
    863a:	a907      	add	r1, sp, #28
    863c:	6828      	ldr	r0, [r5, #0]
    863e:	f7fb fa32 	bl	3aa6 <bt_uuid_cmp>
    8642:	b148      	cbz	r0, 8658 <find_type_cb+0x5a>
		if (data->group && attr->handle > data->group->end_handle) {
    8644:	68a3      	ldr	r3, [r4, #8]
    8646:	2b00      	cmp	r3, #0
    8648:	d039      	beq.n	86be <find_type_cb+0xc0>
    864a:	8a2a      	ldrh	r2, [r5, #16]
    864c:	8859      	ldrh	r1, [r3, #2]
    864e:	428a      	cmp	r2, r1
    8650:	d937      	bls.n	86c2 <find_type_cb+0xc4>
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
    8652:	805a      	strh	r2, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
    8654:	2001      	movs	r0, #1
    8656:	e7e7      	b.n	8628 <find_type_cb+0x2a>
	if (att->chan.tx.mtu - data->buf->len < sizeof(*data->group)) {
    8658:	f8b6 3062 	ldrh.w	r3, [r6, #98]	; 0x62
    865c:	6862      	ldr	r2, [r4, #4]
    865e:	8992      	ldrh	r2, [r2, #12]
    8660:	1a9b      	subs	r3, r3, r2
    8662:	2b03      	cmp	r3, #3
    8664:	d801      	bhi.n	866a <find_type_cb+0x6c>
		return BT_GATT_ITER_STOP;
    8666:	2000      	movs	r0, #0
    8668:	e7de      	b.n	8628 <find_type_cb+0x2a>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
    866a:	686e      	ldr	r6, [r5, #4]
    866c:	2300      	movs	r3, #0
    866e:	9300      	str	r3, [sp, #0]
    8670:	2310      	movs	r3, #16
    8672:	aa02      	add	r2, sp, #8
    8674:	4629      	mov	r1, r5
    8676:	4638      	mov	r0, r7
    8678:	47b0      	blx	r6
	if (read < 0) {
    867a:	1e02      	subs	r2, r0, #0
    867c:	db06      	blt.n	868c <find_type_cb+0x8e>
	if (read != data->value_len || memcmp(data->value, uuid, read)) {
    867e:	7c23      	ldrb	r3, [r4, #16]
    8680:	429a      	cmp	r2, r3
    8682:	d007      	beq.n	8694 <find_type_cb+0x96>
		data->group = NULL;
    8684:	2300      	movs	r3, #0
    8686:	60a3      	str	r3, [r4, #8]
		return BT_GATT_ITER_CONTINUE;
    8688:	2001      	movs	r0, #1
    868a:	e7cd      	b.n	8628 <find_type_cb+0x2a>
		data->group = NULL;
    868c:	2300      	movs	r3, #0
    868e:	60a3      	str	r3, [r4, #8]
		return BT_GATT_ITER_CONTINUE;
    8690:	2001      	movs	r0, #1
    8692:	e7c9      	b.n	8628 <find_type_cb+0x2a>
	if (read != data->value_len || memcmp(data->value, uuid, read)) {
    8694:	a902      	add	r1, sp, #8
    8696:	68e0      	ldr	r0, [r4, #12]
    8698:	f022 f960 	bl	2a95c <memcmp>
    869c:	2800      	cmp	r0, #0
    869e:	d1f1      	bne.n	8684 <find_type_cb+0x86>
	data->err = 0x00;
    86a0:	2300      	movs	r3, #0
    86a2:	7463      	strb	r3, [r4, #17]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    86a4:	6860      	ldr	r0, [r4, #4]
    86a6:	2104      	movs	r1, #4
    86a8:	3008      	adds	r0, #8
    86aa:	f011 fd77 	bl	1a19c <net_buf_simple_add>
    86ae:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    86b0:	8a2b      	ldrh	r3, [r5, #16]
    86b2:	8003      	strh	r3, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(attr->handle);
    86b4:	68a3      	ldr	r3, [r4, #8]
    86b6:	8a2a      	ldrh	r2, [r5, #16]
    86b8:	805a      	strh	r2, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
    86ba:	2001      	movs	r0, #1
    86bc:	e7b4      	b.n	8628 <find_type_cb+0x2a>
		return BT_GATT_ITER_CONTINUE;
    86be:	2001      	movs	r0, #1
    86c0:	e7b2      	b.n	8628 <find_type_cb+0x2a>
    86c2:	2001      	movs	r0, #1
    86c4:	e7b0      	b.n	8628 <find_type_cb+0x2a>

000086c6 <att_change_security>:
{
    86c6:	b508      	push	{r3, lr}
	switch (err) {
    86c8:	2905      	cmp	r1, #5
    86ca:	d008      	beq.n	86de <att_change_security+0x18>
    86cc:	290f      	cmp	r1, #15
    86ce:	d113      	bne.n	86f8 <att_change_security+0x32>
		if (conn->sec_level >= BT_SECURITY_MEDIUM)
    86d0:	7a03      	ldrb	r3, [r0, #8]
    86d2:	2b01      	cmp	r3, #1
    86d4:	d813      	bhi.n	86fe <att_change_security+0x38>
		sec = BT_SECURITY_MEDIUM;
    86d6:	2102      	movs	r1, #2
	return bt_conn_security(conn, sec);
    86d8:	f7fd fe4a 	bl	6370 <bt_conn_security>
    86dc:	bd08      	pop	{r3, pc}
		if (conn->sec_level < BT_SECURITY_MEDIUM) {
    86de:	7a03      	ldrb	r3, [r0, #8]
    86e0:	2b01      	cmp	r3, #1
    86e2:	d905      	bls.n	86f0 <att_change_security+0x2a>
		} else if (conn->sec_level < BT_SECURITY_HIGH) {
    86e4:	2b02      	cmp	r3, #2
    86e6:	d905      	bls.n	86f4 <att_change_security+0x2e>
		} else if (conn->sec_level < BT_SECURITY_FIPS) {
    86e8:	2b03      	cmp	r3, #3
    86ea:	d80b      	bhi.n	8704 <att_change_security+0x3e>
			sec = BT_SECURITY_FIPS;
    86ec:	2104      	movs	r1, #4
    86ee:	e7f3      	b.n	86d8 <att_change_security+0x12>
			sec = BT_SECURITY_MEDIUM;
    86f0:	2102      	movs	r1, #2
    86f2:	e7f1      	b.n	86d8 <att_change_security+0x12>
			sec = BT_SECURITY_HIGH;
    86f4:	2103      	movs	r1, #3
    86f6:	e7ef      	b.n	86d8 <att_change_security+0x12>
		return -EINVAL;
    86f8:	f06f 0015 	mvn.w	r0, #21
    86fc:	bd08      	pop	{r3, pc}
			return -EALREADY;
    86fe:	f06f 0077 	mvn.w	r0, #119	; 0x77
    8702:	bd08      	pop	{r3, pc}
			return -EALREADY;
    8704:	f06f 0077 	mvn.w	r0, #119	; 0x77
}
    8708:	bd08      	pop	{r3, pc}
	...

0000870c <bt_att_connected>:
{
    870c:	b510      	push	{r4, lr}
    870e:	4604      	mov	r4, r0
	ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    8710:	2317      	movs	r3, #23
    8712:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
	ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
    8716:	f8a0 3042 	strh.w	r3, [r0, #66]	; 0x42
	k_delayed_work_init(&att->timeout_work, att_timeout);
    871a:	4906      	ldr	r1, [pc, #24]	; (8734 <bt_att_connected+0x28>)
    871c:	30ac      	adds	r0, #172	; 0xac
    871e:	f020 fe0d 	bl	2933c <k_delayed_work_init>
	list->head = NULL;
    8722:	2300      	movs	r3, #0
    8724:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
	list->tail = NULL;
    8728:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
	bt_gatt_connected(ch->chan.conn);
    872c:	6820      	ldr	r0, [r4, #0]
    872e:	f001 fadd 	bl	9cec <bt_gatt_connected>
    8732:	bd10      	pop	{r4, pc}
    8734:	00008a93 	.word	0x00008a93

00008738 <att_send_req>:
{
    8738:	b570      	push	{r4, r5, r6, lr}
    873a:	4605      	mov	r5, r0
    873c:	460c      	mov	r4, r1
	att->req = req;
    873e:	f8c0 10a0 	str.w	r1, [r0, #160]	; 0xa0
	k_sem_take(&att->tx_sem, K_FOREVER);
    8742:	f100 06d4 	add.w	r6, r0, #212	; 0xd4
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    8746:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    874a:	4630      	mov	r0, r6
    874c:	f020 f838 	bl	287c0 <_impl_k_sem_take>
	return (att->chan.chan.conn->state != BT_CONN_CONNECTED ||
    8750:	682b      	ldr	r3, [r5, #0]
    8752:	7b1b      	ldrb	r3, [r3, #12]
    8754:	2b03      	cmp	r3, #3
    8756:	d019      	beq.n	878c <att_send_req+0x54>
    8758:	2301      	movs	r3, #1
	if (!att_is_connected(att)) {
    875a:	b323      	cbz	r3, 87a6 <att_send_req+0x6e>
	net_buf_simple_save(&req->buf->b, &req->state);
    875c:	6926      	ldr	r6, [r4, #16]
	state->offset = net_buf_simple_headroom(buf);
    875e:	f106 0008 	add.w	r0, r6, #8
    8762:	f011 fd80 	bl	1a266 <net_buf_simple_headroom>
    8766:	81a0      	strh	r0, [r4, #12]
	state->len = buf->len;
    8768:	89b3      	ldrh	r3, [r6, #12]
    876a:	81e3      	strh	r3, [r4, #14]
	bt_l2cap_send_cb(att->chan.chan.conn, BT_L2CAP_CID_ATT,
    876c:	682d      	ldr	r5, [r5, #0]
    876e:	6920      	ldr	r0, [r4, #16]
    8770:	f011 fce4 	bl	1a13c <net_buf_ref>
    8774:	4606      	mov	r6, r0
    8776:	6920      	ldr	r0, [r4, #16]
    8778:	f7ff fcf0 	bl	815c <att_cb>
    877c:	4603      	mov	r3, r0
    877e:	4632      	mov	r2, r6
    8780:	2104      	movs	r1, #4
    8782:	4628      	mov	r0, r5
    8784:	f7fe fea3 	bl	74ce <bt_l2cap_send_cb>
	return 0;
    8788:	2000      	movs	r0, #0
}
    878a:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    878c:	f3bf 8f5b 	dmb	ish
    8790:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
    8794:	f3bf 8f5b 	dmb	ish
	return (att->chan.chan.conn->state != BT_CONN_CONNECTED ||
    8798:	f013 0f04 	tst.w	r3, #4
    879c:	d101      	bne.n	87a2 <att_send_req+0x6a>
    879e:	2301      	movs	r3, #1
    87a0:	e7db      	b.n	875a <att_send_req+0x22>
    87a2:	2300      	movs	r3, #0
    87a4:	e7d9      	b.n	875a <att_send_req+0x22>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    87a6:	4630      	mov	r0, r6
    87a8:	f01f fff7 	bl	2879a <_impl_k_sem_give>
		return -ENOTCONN;
    87ac:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    87b0:	bd70      	pop	{r4, r5, r6, pc}

000087b2 <att_process>:
{
    87b2:	b508      	push	{r3, lr}
	return (!list->head);
    87b4:	f8d0 10a4 	ldr.w	r1, [r0, #164]	; 0xa4
	return sys_slist_is_empty(list) ? NULL : sys_slist_get_not_empty(list);
    87b8:	b131      	cbz	r1, 87c8 <att_process+0x16>
	list->head = node->next;
    87ba:	680b      	ldr	r3, [r1, #0]
    87bc:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
	if (list->tail == node) {
    87c0:	f8d0 20a8 	ldr.w	r2, [r0, #168]	; 0xa8
    87c4:	4291      	cmp	r1, r2
    87c6:	d003      	beq.n	87d0 <att_process+0x1e>
	if (!node) {
    87c8:	b109      	cbz	r1, 87ce <att_process+0x1c>
	att_send_req(att, ATT_REQ(node));
    87ca:	f7ff ffb5 	bl	8738 <att_send_req>
    87ce:	bd08      	pop	{r3, pc}
		list->tail = list->head;
    87d0:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
    87d4:	e7f8      	b.n	87c8 <att_process+0x16>

000087d6 <att_handle_rsp>:
{
    87d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    87da:	b082      	sub	sp, #8
    87dc:	4604      	mov	r4, r0
    87de:	460e      	mov	r6, r1
    87e0:	4617      	mov	r7, r2
    87e2:	461d      	mov	r5, r3
	k_delayed_work_cancel(&att->timeout_work);
    87e4:	30ac      	adds	r0, #172	; 0xac
    87e6:	f020 fdc7 	bl	29378 <k_delayed_work_cancel>
	if (!att->req) {
    87ea:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    87ee:	b1e3      	cbz	r3, 882a <att_handle_rsp+0x54>
	if (att->req->buf) {
    87f0:	6918      	ldr	r0, [r3, #16]
    87f2:	b128      	cbz	r0, 8800 <att_handle_rsp+0x2a>
		net_buf_unref(att->req->buf);
    87f4:	f011 fc86 	bl	1a104 <net_buf_unref>
		att->req->buf = NULL;
    87f8:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    87fc:	2200      	movs	r2, #0
    87fe:	611a      	str	r2, [r3, #16]
	func = att->req->func;
    8800:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    8804:	f8d3 8004 	ldr.w	r8, [r3, #4]
	att->req->func = NULL;
    8808:	2200      	movs	r2, #0
    880a:	605a      	str	r2, [r3, #4]
	func(att->chan.chan.conn, err, pdu, len, att->req);
    880c:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    8810:	9300      	str	r3, [sp, #0]
    8812:	463b      	mov	r3, r7
    8814:	4632      	mov	r2, r6
    8816:	4629      	mov	r1, r5
    8818:	6820      	ldr	r0, [r4, #0]
    881a:	47c0      	blx	r8
	if (!att->req->func) {
    881c:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
    8820:	6843      	ldr	r3, [r0, #4]
    8822:	b14b      	cbz	r3, 8838 <att_handle_rsp+0x62>
	att->req = NULL;
    8824:	2300      	movs	r3, #0
    8826:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	att_process(att);
    882a:	4620      	mov	r0, r4
    882c:	f7ff ffc1 	bl	87b2 <att_process>
}
    8830:	2000      	movs	r0, #0
    8832:	b002      	add	sp, #8
    8834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		att_req_destroy(att->req);
    8838:	f7ff fd34 	bl	82a4 <att_req_destroy>
    883c:	e7f2      	b.n	8824 <att_handle_rsp+0x4e>

0000883e <att_confirm>:
{
    883e:	b508      	push	{r3, lr}
	return att_handle_rsp(att, buf->data, buf->len, 0);
    8840:	2300      	movs	r3, #0
    8842:	898a      	ldrh	r2, [r1, #12]
    8844:	6889      	ldr	r1, [r1, #8]
    8846:	f7ff ffc6 	bl	87d6 <att_handle_rsp>
}
    884a:	bd08      	pop	{r3, pc}

0000884c <att_handle_exec_write_rsp>:
{
    884c:	b508      	push	{r3, lr}
	return att_handle_rsp(att, buf->data, buf->len, 0);
    884e:	2300      	movs	r3, #0
    8850:	898a      	ldrh	r2, [r1, #12]
    8852:	6889      	ldr	r1, [r1, #8]
    8854:	f7ff ffbf 	bl	87d6 <att_handle_rsp>
}
    8858:	bd08      	pop	{r3, pc}

0000885a <att_handle_prepare_write_rsp>:
{
    885a:	b508      	push	{r3, lr}
	return att_handle_rsp(att, buf->data, buf->len, 0);
    885c:	2300      	movs	r3, #0
    885e:	898a      	ldrh	r2, [r1, #12]
    8860:	6889      	ldr	r1, [r1, #8]
    8862:	f7ff ffb8 	bl	87d6 <att_handle_rsp>
}
    8866:	bd08      	pop	{r3, pc}

00008868 <att_handle_write_rsp>:
{
    8868:	b508      	push	{r3, lr}
	return att_handle_rsp(att, buf->data, buf->len, 0);
    886a:	2300      	movs	r3, #0
    886c:	898a      	ldrh	r2, [r1, #12]
    886e:	6889      	ldr	r1, [r1, #8]
    8870:	f7ff ffb1 	bl	87d6 <att_handle_rsp>
}
    8874:	bd08      	pop	{r3, pc}

00008876 <att_handle_read_mult_rsp>:
{
    8876:	b508      	push	{r3, lr}
	return att_handle_rsp(att, buf->data, buf->len, 0);
    8878:	2300      	movs	r3, #0
    887a:	898a      	ldrh	r2, [r1, #12]
    887c:	6889      	ldr	r1, [r1, #8]
    887e:	f7ff ffaa 	bl	87d6 <att_handle_rsp>
}
    8882:	bd08      	pop	{r3, pc}

00008884 <att_handle_read_blob_rsp>:
{
    8884:	b508      	push	{r3, lr}
	return att_handle_rsp(att, buf->data, buf->len, 0);
    8886:	2300      	movs	r3, #0
    8888:	898a      	ldrh	r2, [r1, #12]
    888a:	6889      	ldr	r1, [r1, #8]
    888c:	f7ff ffa3 	bl	87d6 <att_handle_rsp>
}
    8890:	bd08      	pop	{r3, pc}

00008892 <att_handle_read_rsp>:
{
    8892:	b508      	push	{r3, lr}
	return att_handle_rsp(att, buf->data, buf->len, 0);
    8894:	2300      	movs	r3, #0
    8896:	898a      	ldrh	r2, [r1, #12]
    8898:	6889      	ldr	r1, [r1, #8]
    889a:	f7ff ff9c 	bl	87d6 <att_handle_rsp>
}
    889e:	bd08      	pop	{r3, pc}

000088a0 <att_handle_read_type_rsp>:
{
    88a0:	b508      	push	{r3, lr}
	return att_handle_rsp(att, buf->data, buf->len, 0);
    88a2:	2300      	movs	r3, #0
    88a4:	898a      	ldrh	r2, [r1, #12]
    88a6:	6889      	ldr	r1, [r1, #8]
    88a8:	f7ff ff95 	bl	87d6 <att_handle_rsp>
}
    88ac:	bd08      	pop	{r3, pc}

000088ae <att_handle_find_type_rsp>:
{
    88ae:	b508      	push	{r3, lr}
	return att_handle_rsp(att, buf->data, buf->len, 0);
    88b0:	2300      	movs	r3, #0
    88b2:	898a      	ldrh	r2, [r1, #12]
    88b4:	6889      	ldr	r1, [r1, #8]
    88b6:	f7ff ff8e 	bl	87d6 <att_handle_rsp>
}
    88ba:	bd08      	pop	{r3, pc}

000088bc <att_handle_find_info_rsp>:
{
    88bc:	b508      	push	{r3, lr}
	return att_handle_rsp(att, buf->data, buf->len, 0);
    88be:	2300      	movs	r3, #0
    88c0:	898a      	ldrh	r2, [r1, #12]
    88c2:	6889      	ldr	r1, [r1, #8]
    88c4:	f7ff ff87 	bl	87d6 <att_handle_rsp>
}
    88c8:	bd08      	pop	{r3, pc}

000088ca <att_mtu_rsp>:
	if (!att) {
    88ca:	b1b8      	cbz	r0, 88fc <att_mtu_rsp+0x32>
{
    88cc:	b508      	push	{r3, lr}
    88ce:	460a      	mov	r2, r1
	rsp = (void *)buf->data;
    88d0:	6889      	ldr	r1, [r1, #8]
	mtu = sys_le16_to_cpu(rsp->mtu);
    88d2:	880b      	ldrh	r3, [r1, #0]
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
    88d4:	2b16      	cmp	r3, #22
    88d6:	d90b      	bls.n	88f0 <att_mtu_rsp+0x26>
	att->chan.rx.mtu = min(mtu, BT_ATT_MTU);
    88d8:	2b41      	cmp	r3, #65	; 0x41
    88da:	bf28      	it	cs
    88dc:	2341      	movcs	r3, #65	; 0x41
    88de:	f8a0 3042 	strh.w	r3, [r0, #66]	; 0x42
	att->chan.tx.mtu = att->chan.rx.mtu;
    88e2:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
	return att_handle_rsp(att, rsp, buf->len, 0);
    88e6:	2300      	movs	r3, #0
    88e8:	8992      	ldrh	r2, [r2, #12]
    88ea:	f7ff ff74 	bl	87d6 <att_handle_rsp>
    88ee:	bd08      	pop	{r3, pc}
		return att_handle_rsp(att, NULL, 0, BT_ATT_ERR_INVALID_PDU);
    88f0:	2304      	movs	r3, #4
    88f2:	2200      	movs	r2, #0
    88f4:	4611      	mov	r1, r2
    88f6:	f7ff ff6e 	bl	87d6 <att_handle_rsp>
    88fa:	bd08      	pop	{r3, pc}
		return 0;
    88fc:	2000      	movs	r0, #0
    88fe:	4770      	bx	lr

00008900 <bt_att_encrypt_change>:
{
    8900:	b570      	push	{r4, r5, r6, lr}
    8902:	4604      	mov	r4, r0
	struct bt_conn *conn = ch->chan.conn;
    8904:	6805      	ldr	r5, [r0, #0]
	if (hci_status) {
    8906:	b941      	cbnz	r1, 891a <bt_att_encrypt_change+0x1a>
	if (conn->sec_level == BT_SECURITY_LOW) {
    8908:	7a2b      	ldrb	r3, [r5, #8]
    890a:	2b01      	cmp	r3, #1
    890c:	d004      	beq.n	8918 <bt_att_encrypt_change+0x18>
	if (!att->req || !att->req->retrying) {
    890e:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    8912:	b10b      	cbz	r3, 8918 <bt_att_encrypt_change+0x18>
    8914:	7d1b      	ldrb	r3, [r3, #20]
    8916:	b933      	cbnz	r3, 8926 <bt_att_encrypt_change+0x26>
    8918:	bd70      	pop	{r4, r5, r6, pc}
		att_handle_rsp(att, NULL, 0, BT_ATT_ERR_AUTHENTICATION);
    891a:	2305      	movs	r3, #5
    891c:	2200      	movs	r2, #0
    891e:	4611      	mov	r1, r2
    8920:	f7ff ff59 	bl	87d6 <att_handle_rsp>
		return;
    8924:	bd70      	pop	{r4, r5, r6, pc}
	k_sem_take(&att->tx_sem, K_FOREVER);
    8926:	f100 06d4 	add.w	r6, r0, #212	; 0xd4
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    892a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    892e:	4630      	mov	r0, r6
    8930:	f01f ff46 	bl	287c0 <_impl_k_sem_take>
	return (att->chan.chan.conn->state != BT_CONN_CONNECTED ||
    8934:	6823      	ldr	r3, [r4, #0]
    8936:	7b1b      	ldrb	r3, [r3, #12]
    8938:	2b03      	cmp	r3, #3
    893a:	d012      	beq.n	8962 <bt_att_encrypt_change+0x62>
    893c:	2301      	movs	r3, #1
	if (!att_is_connected(att)) {
    893e:	b1eb      	cbz	r3, 897c <bt_att_encrypt_change+0x7c>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, att->req->buf,
    8940:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    8944:	691e      	ldr	r6, [r3, #16]
    8946:	4630      	mov	r0, r6
    8948:	f7ff fc08 	bl	815c <att_cb>
    894c:	4603      	mov	r3, r0
    894e:	4632      	mov	r2, r6
    8950:	2104      	movs	r1, #4
    8952:	4628      	mov	r0, r5
    8954:	f7fe fdbb 	bl	74ce <bt_l2cap_send_cb>
	att->req->buf = NULL;
    8958:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    895c:	2200      	movs	r2, #0
    895e:	611a      	str	r2, [r3, #16]
    8960:	e7da      	b.n	8918 <bt_att_encrypt_change+0x18>
    8962:	f3bf 8f5b 	dmb	ish
    8966:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
    896a:	f3bf 8f5b 	dmb	ish
	return (att->chan.chan.conn->state != BT_CONN_CONNECTED ||
    896e:	f013 0f04 	tst.w	r3, #4
    8972:	d101      	bne.n	8978 <bt_att_encrypt_change+0x78>
    8974:	2301      	movs	r3, #1
    8976:	e7e2      	b.n	893e <bt_att_encrypt_change+0x3e>
    8978:	2300      	movs	r3, #0
    897a:	e7e0      	b.n	893e <bt_att_encrypt_change+0x3e>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    897c:	4630      	mov	r0, r6
    897e:	f01f ff0c 	bl	2879a <_impl_k_sem_give>
    8982:	bd70      	pop	{r4, r5, r6, pc}

00008984 <att_error_rsp>:
{
    8984:	b538      	push	{r3, r4, r5, lr}
    8986:	4604      	mov	r4, r0
	rsp = (void *)buf->data;
    8988:	6888      	ldr	r0, [r1, #8]
	if (!att->req) {
    898a:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    898e:	b1fb      	cbz	r3, 89d0 <att_error_rsp+0x4c>
	if (att->req->buf) {
    8990:	691a      	ldr	r2, [r3, #16]
    8992:	b132      	cbz	r2, 89a2 <att_error_rsp+0x1e>
	buf->data = buf->__buf + state->offset;
    8994:	f102 0110 	add.w	r1, r2, #16
    8998:	899d      	ldrh	r5, [r3, #12]
    899a:	4429      	add	r1, r5
    899c:	6091      	str	r1, [r2, #8]
	buf->len = state->len;
    899e:	89db      	ldrh	r3, [r3, #14]
    89a0:	8193      	strh	r3, [r2, #12]
	err = rsp->error;
    89a2:	78c5      	ldrb	r5, [r0, #3]
	if (att->req->retrying) {
    89a4:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    89a8:	7d1b      	ldrb	r3, [r3, #20]
    89aa:	b133      	cbz	r3, 89ba <att_error_rsp+0x36>
	return att_handle_rsp(att, NULL, 0, err);
    89ac:	462b      	mov	r3, r5
    89ae:	2200      	movs	r2, #0
    89b0:	4611      	mov	r1, r2
    89b2:	4620      	mov	r0, r4
    89b4:	f7ff ff0f 	bl	87d6 <att_handle_rsp>
}
    89b8:	bd38      	pop	{r3, r4, r5, pc}
	if (!att_change_security(att->chan.chan.conn, err)) {
    89ba:	4629      	mov	r1, r5
    89bc:	6820      	ldr	r0, [r4, #0]
    89be:	f7ff fe82 	bl	86c6 <att_change_security>
    89c2:	2800      	cmp	r0, #0
    89c4:	d1f2      	bne.n	89ac <att_error_rsp+0x28>
		att->req->retrying = true;
    89c6:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    89ca:	2201      	movs	r2, #1
    89cc:	751a      	strb	r2, [r3, #20]
		return 0;
    89ce:	bd38      	pop	{r3, r4, r5, pc}
		err = BT_ATT_ERR_UNLIKELY;
    89d0:	250e      	movs	r5, #14
    89d2:	e7eb      	b.n	89ac <att_error_rsp+0x28>

000089d4 <att_reset>:
{
    89d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    89d6:	b083      	sub	sp, #12
    89d8:	4607      	mov	r7, r0
	atomic_set_bit(att->flags, ATT_DISCONNECTED);
    89da:	f100 039c 	add.w	r3, r0, #156	; 0x9c
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    89de:	f3bf 8f5b 	dmb	ish
    89e2:	e853 2f00 	ldrex	r2, [r3]
    89e6:	f042 0204 	orr.w	r2, r2, #4
    89ea:	e843 2100 	strex	r1, r2, [r3]
    89ee:	2900      	cmp	r1, #0
    89f0:	d1f7      	bne.n	89e2 <att_reset+0xe>
    89f2:	f3bf 8f5b 	dmb	ish
	for (i = 0; i < CONFIG_BT_ATT_TX_MAX; i++) {
    89f6:	2400      	movs	r4, #0
    89f8:	e004      	b.n	8a04 <att_reset+0x30>
    89fa:	f107 00d4 	add.w	r0, r7, #212	; 0xd4
    89fe:	f01f fecc 	bl	2879a <_impl_k_sem_give>
    8a02:	3401      	adds	r4, #1
    8a04:	2c01      	cmp	r4, #1
    8a06:	ddf8      	ble.n	89fa <att_reset+0x26>
	return list->head;
    8a08:	f8d7 50a4 	ldr.w	r5, [r7, #164]	; 0xa4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    8a0c:	b11d      	cbz	r5, 8a16 <att_reset+0x42>
    8a0e:	462c      	mov	r4, r5
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    8a10:	b145      	cbz	r5, 8a24 <att_reset+0x50>
	return node->next;
    8a12:	682c      	ldr	r4, [r5, #0]
    8a14:	e006      	b.n	8a24 <att_reset+0x50>
    8a16:	462c      	mov	r4, r5
    8a18:	e004      	b.n	8a24 <att_reset+0x50>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    8a1a:	4623      	mov	r3, r4
    8a1c:	e014      	b.n	8a48 <att_reset+0x74>
    8a1e:	4623      	mov	r3, r4
    8a20:	4625      	mov	r5, r4
    8a22:	461c      	mov	r4, r3
    8a24:	b1c5      	cbz	r5, 8a58 <att_reset+0x84>
		if (req->func) {
    8a26:	686e      	ldr	r6, [r5, #4]
    8a28:	b12e      	cbz	r6, 8a36 <att_reset+0x62>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0, req);
    8a2a:	9500      	str	r5, [sp, #0]
    8a2c:	2300      	movs	r3, #0
    8a2e:	461a      	mov	r2, r3
    8a30:	210e      	movs	r1, #14
    8a32:	4618      	mov	r0, r3
    8a34:	47b0      	blx	r6
		att_req_destroy(req);
    8a36:	4628      	mov	r0, r5
    8a38:	f7ff fc34 	bl	82a4 <att_req_destroy>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    8a3c:	2c00      	cmp	r4, #0
    8a3e:	d0ee      	beq.n	8a1e <att_reset+0x4a>
    8a40:	4622      	mov	r2, r4
    8a42:	2c00      	cmp	r4, #0
    8a44:	d0e9      	beq.n	8a1a <att_reset+0x46>
	return node->next;
    8a46:	6823      	ldr	r3, [r4, #0]
    8a48:	b113      	cbz	r3, 8a50 <att_reset+0x7c>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    8a4a:	b11a      	cbz	r2, 8a54 <att_reset+0x80>
	return node->next;
    8a4c:	6823      	ldr	r3, [r4, #0]
    8a4e:	e7e7      	b.n	8a20 <att_reset+0x4c>
    8a50:	2300      	movs	r3, #0
    8a52:	e7e5      	b.n	8a20 <att_reset+0x4c>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    8a54:	2300      	movs	r3, #0
    8a56:	e7e3      	b.n	8a20 <att_reset+0x4c>
	list->head = NULL;
    8a58:	2300      	movs	r3, #0
    8a5a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	list->tail = NULL;
    8a5e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	if (!att->req) {
    8a62:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
    8a66:	b12b      	cbz	r3, 8a74 <att_reset+0xa0>
	att_handle_rsp(att, NULL, 0, BT_ATT_ERR_UNLIKELY);
    8a68:	230e      	movs	r3, #14
    8a6a:	2200      	movs	r2, #0
    8a6c:	4611      	mov	r1, r2
    8a6e:	4638      	mov	r0, r7
    8a70:	f7ff feb1 	bl	87d6 <att_handle_rsp>
}
    8a74:	b003      	add	sp, #12
    8a76:	bdf0      	pop	{r4, r5, r6, r7, pc}

00008a78 <bt_att_disconnected>:
{
    8a78:	b510      	push	{r4, lr}
    8a7a:	4604      	mov	r4, r0
	att_reset(att);
    8a7c:	f7ff ffaa 	bl	89d4 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
    8a80:	6820      	ldr	r0, [r4, #0]
    8a82:	f001 f93f 	bl	9d04 <bt_gatt_disconnected>
	memset(att, 0, sizeof(*att));
    8a86:	22ec      	movs	r2, #236	; 0xec
    8a88:	2100      	movs	r1, #0
    8a8a:	4620      	mov	r0, r4
    8a8c:	f021 fffa 	bl	2aa84 <memset>
    8a90:	bd10      	pop	{r4, pc}

00008a92 <att_timeout>:
{
    8a92:	b510      	push	{r4, lr}
    8a94:	4604      	mov	r4, r0
	att_reset(att);
    8a96:	38ac      	subs	r0, #172	; 0xac
    8a98:	f7ff ff9c 	bl	89d4 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
    8a9c:	f854 0cac 	ldr.w	r0, [r4, #-172]
    8aa0:	f001 f930 	bl	9d04 <bt_gatt_disconnected>
	ch->chan.conn = NULL;
    8aa4:	2300      	movs	r3, #0
    8aa6:	f844 3cac 	str.w	r3, [r4, #-172]
    8aaa:	bd10      	pop	{r4, pc}

00008aac <bt_att_create_pdu>:
{
    8aac:	b538      	push	{r3, r4, r5, lr}
    8aae:	460d      	mov	r5, r1
    8ab0:	4614      	mov	r4, r2
	att = att_chan_get(conn);
    8ab2:	f7ff fbab 	bl	820c <att_chan_get>
	if (!att) {
    8ab6:	b180      	cbz	r0, 8ada <bt_att_create_pdu+0x2e>
	if (len + sizeof(op) > att->chan.tx.mtu) {
    8ab8:	3401      	adds	r4, #1
    8aba:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
    8abe:	429c      	cmp	r4, r3
    8ac0:	d80d      	bhi.n	8ade <bt_att_create_pdu+0x32>
	buf = bt_l2cap_create_pdu(NULL, 0);
    8ac2:	2100      	movs	r1, #0
    8ac4:	4608      	mov	r0, r1
    8ac6:	f7fe fc6a 	bl	739e <bt_l2cap_create_pdu>
    8aca:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    8acc:	2101      	movs	r1, #1
    8ace:	3008      	adds	r0, #8
    8ad0:	f011 fb64 	bl	1a19c <net_buf_simple_add>
	hdr->code = op;
    8ad4:	7005      	strb	r5, [r0, #0]
}
    8ad6:	4620      	mov	r0, r4
    8ad8:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
    8ada:	2400      	movs	r4, #0
    8adc:	e7fb      	b.n	8ad6 <bt_att_create_pdu+0x2a>
		return NULL;
    8ade:	2400      	movs	r4, #0
    8ae0:	e7f9      	b.n	8ad6 <bt_att_create_pdu+0x2a>
	...

00008ae4 <att_indicate>:
{
    8ae4:	b510      	push	{r4, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    8ae6:	6804      	ldr	r4, [r0, #0]
	handle = net_buf_pull_le16(buf);
    8ae8:	f101 0008 	add.w	r0, r1, #8
    8aec:	f011 fbb3 	bl	1a256 <net_buf_simple_pull_le16>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_CONFIRM, 0);
    8af0:	2200      	movs	r2, #0
    8af2:	211e      	movs	r1, #30
    8af4:	4620      	mov	r0, r4
    8af6:	f7ff ffd9 	bl	8aac <bt_att_create_pdu>
	if (!buf) {
    8afa:	b128      	cbz	r0, 8b08 <att_indicate+0x24>
    8afc:	4602      	mov	r2, r0
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_cfm_sent);
    8afe:	4b03      	ldr	r3, [pc, #12]	; (8b0c <att_indicate+0x28>)
    8b00:	2104      	movs	r1, #4
    8b02:	4620      	mov	r0, r4
    8b04:	f7fe fce3 	bl	74ce <bt_l2cap_send_cb>
}
    8b08:	2000      	movs	r0, #0
    8b0a:	bd10      	pop	{r4, pc}
    8b0c:	00008307 	.word	0x00008307

00008b10 <att_mtu_req>:
{
    8b10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    8b14:	6807      	ldr	r7, [r0, #0]
	req = (void *)buf->data;
    8b16:	688b      	ldr	r3, [r1, #8]
	mtu_client = sys_le16_to_cpu(req->mtu);
    8b18:	881d      	ldrh	r5, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
    8b1a:	2d16      	cmp	r5, #22
    8b1c:	d802      	bhi.n	8b24 <att_mtu_req+0x14>
		return BT_ATT_ERR_INVALID_PDU;
    8b1e:	2004      	movs	r0, #4
    8b20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8b24:	4604      	mov	r4, r0
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
    8b26:	2202      	movs	r2, #2
    8b28:	2103      	movs	r1, #3
    8b2a:	4638      	mov	r0, r7
    8b2c:	f7ff ffbe 	bl	8aac <bt_att_create_pdu>
	if (!pdu) {
    8b30:	4680      	mov	r8, r0
    8b32:	b1b8      	cbz	r0, 8b64 <att_mtu_req+0x54>
	rsp = net_buf_add(pdu, sizeof(*rsp));
    8b34:	2102      	movs	r1, #2
    8b36:	3008      	adds	r0, #8
    8b38:	f011 fb30 	bl	1a19c <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
    8b3c:	2600      	movs	r6, #0
    8b3e:	2341      	movs	r3, #65	; 0x41
    8b40:	7003      	strb	r3, [r0, #0]
    8b42:	7046      	strb	r6, [r0, #1]
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, pdu, att_rsp_sent);
    8b44:	4b09      	ldr	r3, [pc, #36]	; (8b6c <att_mtu_req+0x5c>)
    8b46:	4642      	mov	r2, r8
    8b48:	2104      	movs	r1, #4
    8b4a:	4638      	mov	r0, r7
    8b4c:	f7fe fcbf 	bl	74ce <bt_l2cap_send_cb>
	att->chan.rx.mtu = min(mtu_client, mtu_server);
    8b50:	2d41      	cmp	r5, #65	; 0x41
    8b52:	bf28      	it	cs
    8b54:	2541      	movcs	r5, #65	; 0x41
    8b56:	f8a4 5042 	strh.w	r5, [r4, #66]	; 0x42
	att->chan.tx.mtu = att->chan.rx.mtu;
    8b5a:	f8a4 5062 	strh.w	r5, [r4, #98]	; 0x62
	return 0;
    8b5e:	4630      	mov	r0, r6
    8b60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_ATT_ERR_UNLIKELY;
    8b64:	200e      	movs	r0, #14
}
    8b66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8b6a:	bf00      	nop
    8b6c:	000082cf 	.word	0x000082cf

00008b70 <send_err_rsp>:
	if (!req) {
    8b70:	b901      	cbnz	r1, 8b74 <send_err_rsp+0x4>
    8b72:	4770      	bx	lr
{
    8b74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8b78:	460f      	mov	r7, r1
    8b7a:	461d      	mov	r5, r3
    8b7c:	4616      	mov	r6, r2
    8b7e:	4604      	mov	r4, r0
	buf = bt_att_create_pdu(conn, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    8b80:	2204      	movs	r2, #4
    8b82:	2101      	movs	r1, #1
    8b84:	f7ff ff92 	bl	8aac <bt_att_create_pdu>
	if (!buf) {
    8b88:	4680      	mov	r8, r0
    8b8a:	b168      	cbz	r0, 8ba8 <send_err_rsp+0x38>
	rsp = net_buf_add(buf, sizeof(*rsp));
    8b8c:	2104      	movs	r1, #4
    8b8e:	3008      	adds	r0, #8
    8b90:	f011 fb04 	bl	1a19c <net_buf_simple_add>
	rsp->request = req;
    8b94:	7007      	strb	r7, [r0, #0]
	rsp->handle = sys_cpu_to_le16(handle);
    8b96:	f8a0 6001 	strh.w	r6, [r0, #1]
	rsp->error = err;
    8b9a:	70c5      	strb	r5, [r0, #3]
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_rsp_sent);
    8b9c:	4b03      	ldr	r3, [pc, #12]	; (8bac <send_err_rsp+0x3c>)
    8b9e:	4642      	mov	r2, r8
    8ba0:	2104      	movs	r1, #4
    8ba2:	4620      	mov	r0, r4
    8ba4:	f7fe fc93 	bl	74ce <bt_l2cap_send_cb>
    8ba8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8bac:	000082cf 	.word	0x000082cf

00008bb0 <bt_att_recv>:
{
    8bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_att_hdr *hdr = (void *)buf->data;
    8bb2:	688d      	ldr	r5, [r1, #8]
	if (buf->len < sizeof(*hdr)) {
    8bb4:	898b      	ldrh	r3, [r1, #12]
    8bb6:	b903      	cbnz	r3, 8bba <bt_att_recv+0xa>
    8bb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8bba:	460e      	mov	r6, r1
    8bbc:	4607      	mov	r7, r0
	net_buf_pull(buf, sizeof(*hdr));
    8bbe:	2101      	movs	r1, #1
    8bc0:	f106 0008 	add.w	r0, r6, #8
    8bc4:	f011 fb37 	bl	1a236 <net_buf_simple_pull>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    8bc8:	2300      	movs	r3, #0
    8bca:	2b1a      	cmp	r3, #26
    8bcc:	d822      	bhi.n	8c14 <bt_att_recv+0x64>
		if (hdr->code == handlers[i].op) {
    8bce:	782c      	ldrb	r4, [r5, #0]
    8bd0:	4a2c      	ldr	r2, [pc, #176]	; (8c84 <bt_att_recv+0xd4>)
    8bd2:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
    8bd6:	4294      	cmp	r4, r2
    8bd8:	d001      	beq.n	8bde <bt_att_recv+0x2e>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    8bda:	3301      	adds	r3, #1
    8bdc:	e7f5      	b.n	8bca <bt_att_recv+0x1a>
			handler = &handlers[i];
    8bde:	4c29      	ldr	r4, [pc, #164]	; (8c84 <bt_att_recv+0xd4>)
    8be0:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
	if (!handler) {
    8be4:	b1c4      	cbz	r4, 8c18 <bt_att_recv+0x68>
		if (handler->type == ATT_REQUEST &&
    8be6:	78a3      	ldrb	r3, [r4, #2]
    8be8:	2b01      	cmp	r3, #1
    8bea:	d022      	beq.n	8c32 <bt_att_recv+0x82>
		} else if (handler->type == ATT_INDICATION &&
    8bec:	78a3      	ldrb	r3, [r4, #2]
    8bee:	2b05      	cmp	r3, #5
    8bf0:	d031      	beq.n	8c56 <bt_att_recv+0xa6>
	if (buf->len < handler->expect_len) {
    8bf2:	89b2      	ldrh	r2, [r6, #12]
    8bf4:	7863      	ldrb	r3, [r4, #1]
    8bf6:	429a      	cmp	r2, r3
    8bf8:	d23f      	bcs.n	8c7a <bt_att_recv+0xca>
		err = BT_ATT_ERR_INVALID_PDU;
    8bfa:	2004      	movs	r0, #4
	if (handler->type == ATT_REQUEST && err) {
    8bfc:	78a2      	ldrb	r2, [r4, #2]
    8bfe:	2a01      	cmp	r2, #1
    8c00:	d1da      	bne.n	8bb8 <bt_att_recv+0x8>
    8c02:	2800      	cmp	r0, #0
    8c04:	d0d8      	beq.n	8bb8 <bt_att_recv+0x8>
		send_err_rsp(chan->conn, hdr->code, 0, err);
    8c06:	4603      	mov	r3, r0
    8c08:	2200      	movs	r2, #0
    8c0a:	7829      	ldrb	r1, [r5, #0]
    8c0c:	6838      	ldr	r0, [r7, #0]
    8c0e:	f7ff ffaf 	bl	8b70 <send_err_rsp>
    8c12:	e7d1      	b.n	8bb8 <bt_att_recv+0x8>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    8c14:	2400      	movs	r4, #0
    8c16:	e7e5      	b.n	8be4 <bt_att_recv+0x34>
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
    8c18:	782c      	ldrb	r4, [r5, #0]
    8c1a:	4620      	mov	r0, r4
    8c1c:	f7ff fa86 	bl	812c <att_op_get_type>
    8c20:	2800      	cmp	r0, #0
    8c22:	d0c9      	beq.n	8bb8 <bt_att_recv+0x8>
			send_err_rsp(chan->conn, hdr->code, 0,
    8c24:	2306      	movs	r3, #6
    8c26:	2200      	movs	r2, #0
    8c28:	4621      	mov	r1, r4
    8c2a:	6838      	ldr	r0, [r7, #0]
    8c2c:	f7ff ffa0 	bl	8b70 <send_err_rsp>
    8c30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		    atomic_test_and_set_bit(att->flags, ATT_PENDING_RSP)) {
    8c32:	f107 039c 	add.w	r3, r7, #156	; 0x9c
    8c36:	f3bf 8f5b 	dmb	ish
    8c3a:	e853 2f00 	ldrex	r2, [r3]
    8c3e:	f042 0101 	orr.w	r1, r2, #1
    8c42:	e843 1000 	strex	r0, r1, [r3]
    8c46:	2800      	cmp	r0, #0
    8c48:	d1f7      	bne.n	8c3a <bt_att_recv+0x8a>
    8c4a:	f3bf 8f5b 	dmb	ish
		if (handler->type == ATT_REQUEST &&
    8c4e:	f012 0f01 	tst.w	r2, #1
    8c52:	d0cb      	beq.n	8bec <bt_att_recv+0x3c>
    8c54:	e7b0      	b.n	8bb8 <bt_att_recv+0x8>
			   atomic_test_and_set_bit(att->flags,
    8c56:	f107 039c 	add.w	r3, r7, #156	; 0x9c
    8c5a:	f3bf 8f5b 	dmb	ish
    8c5e:	e853 2f00 	ldrex	r2, [r3]
    8c62:	f042 0102 	orr.w	r1, r2, #2
    8c66:	e843 1000 	strex	r0, r1, [r3]
    8c6a:	2800      	cmp	r0, #0
    8c6c:	d1f7      	bne.n	8c5e <bt_att_recv+0xae>
    8c6e:	f3bf 8f5b 	dmb	ish
		} else if (handler->type == ATT_INDICATION &&
    8c72:	f012 0f02 	tst.w	r2, #2
    8c76:	d0bc      	beq.n	8bf2 <bt_att_recv+0x42>
    8c78:	e79e      	b.n	8bb8 <bt_att_recv+0x8>
		err = handler->func(att, buf);
    8c7a:	6863      	ldr	r3, [r4, #4]
    8c7c:	4631      	mov	r1, r6
    8c7e:	4638      	mov	r0, r7
    8c80:	4798      	blx	r3
    8c82:	e7bb      	b.n	8bfc <bt_att_recv+0x4c>
    8c84:	0002f47c 	.word	0x0002f47c

00008c88 <att_write_rsp>:
{
    8c88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8c8c:	b086      	sub	sp, #24
	if (!handle) {
    8c8e:	b923      	cbnz	r3, 8c9a <att_write_rsp+0x12>
		return BT_ATT_ERR_INVALID_HANDLE;
    8c90:	2401      	movs	r4, #1
}
    8c92:	4620      	mov	r0, r4
    8c94:	b006      	add	sp, #24
    8c96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8c9a:	4698      	mov	r8, r3
    8c9c:	4617      	mov	r7, r2
    8c9e:	460e      	mov	r6, r1
    8ca0:	4605      	mov	r5, r0
	memset(&data, 0, sizeof(data));
    8ca2:	2218      	movs	r2, #24
    8ca4:	2100      	movs	r1, #0
    8ca6:	4668      	mov	r0, sp
    8ca8:	f021 feec 	bl	2aa84 <memset>
	if (rsp) {
    8cac:	b137      	cbz	r7, 8cbc <att_write_rsp+0x34>
		data.buf = bt_att_create_pdu(conn, rsp, 0);
    8cae:	2200      	movs	r2, #0
    8cb0:	4639      	mov	r1, r7
    8cb2:	4628      	mov	r0, r5
    8cb4:	f7ff fefa 	bl	8aac <bt_att_create_pdu>
    8cb8:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
    8cba:	b3a0      	cbz	r0, 8d26 <att_write_rsp+0x9e>
	data.conn = conn;
    8cbc:	9500      	str	r5, [sp, #0]
	data.op = op;
    8cbe:	f88d 6008 	strb.w	r6, [sp, #8]
	data.offset = offset;
    8cc2:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    8cc6:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.value = value;
    8cca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8ccc:	9303      	str	r3, [sp, #12]
	data.len = len;
    8cce:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    8cd2:	f88d 3010 	strb.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    8cd6:	2301      	movs	r3, #1
    8cd8:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    8cdc:	466b      	mov	r3, sp
    8cde:	4a13      	ldr	r2, [pc, #76]	; (8d2c <att_write_rsp+0xa4>)
    8ce0:	4641      	mov	r1, r8
    8ce2:	4640      	mov	r0, r8
    8ce4:	f000 ff26 	bl	9b34 <bt_gatt_foreach_attr>
	if (data.err) {
    8ce8:	f89d 4014 	ldrb.w	r4, [sp, #20]
    8cec:	b194      	cbz	r4, 8d14 <att_write_rsp+0x8c>
		if (rsp) {
    8cee:	b91f      	cbnz	r7, 8cf8 <att_write_rsp+0x70>
		return op == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    8cf0:	2e18      	cmp	r6, #24
    8cf2:	d00c      	beq.n	8d0e <att_write_rsp+0x86>
    8cf4:	2400      	movs	r4, #0
    8cf6:	e7cc      	b.n	8c92 <att_write_rsp+0xa>
			net_buf_unref(data.buf);
    8cf8:	9801      	ldr	r0, [sp, #4]
    8cfa:	f011 fa03 	bl	1a104 <net_buf_unref>
			send_err_rsp(conn, op, handle, data.err);
    8cfe:	f89d 3014 	ldrb.w	r3, [sp, #20]
    8d02:	4642      	mov	r2, r8
    8d04:	4631      	mov	r1, r6
    8d06:	4628      	mov	r0, r5
    8d08:	f7ff ff32 	bl	8b70 <send_err_rsp>
    8d0c:	e7f0      	b.n	8cf0 <att_write_rsp+0x68>
		return op == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    8d0e:	f89d 4014 	ldrb.w	r4, [sp, #20]
    8d12:	e7be      	b.n	8c92 <att_write_rsp+0xa>
	if (data.buf) {
    8d14:	9a01      	ldr	r2, [sp, #4]
    8d16:	2a00      	cmp	r2, #0
    8d18:	d0bb      	beq.n	8c92 <att_write_rsp+0xa>
		bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf,
    8d1a:	4b05      	ldr	r3, [pc, #20]	; (8d30 <att_write_rsp+0xa8>)
    8d1c:	2104      	movs	r1, #4
    8d1e:	4628      	mov	r0, r5
    8d20:	f7fe fbd5 	bl	74ce <bt_l2cap_send_cb>
    8d24:	e7b5      	b.n	8c92 <att_write_rsp+0xa>
			return BT_ATT_ERR_UNLIKELY;
    8d26:	240e      	movs	r4, #14
    8d28:	e7b3      	b.n	8c92 <att_write_rsp+0xa>
    8d2a:	bf00      	nop
    8d2c:	000080cf 	.word	0x000080cf
    8d30:	000082cf 	.word	0x000082cf

00008d34 <att_signed_write_cmd>:
{
    8d34:	b5f0      	push	{r4, r5, r6, r7, lr}
    8d36:	b085      	sub	sp, #20
    8d38:	460d      	mov	r5, r1
	struct bt_conn *conn = att->chan.chan.conn;
    8d3a:	6806      	ldr	r6, [r0, #0]
	req = (void *)buf->data;
    8d3c:	460c      	mov	r4, r1
    8d3e:	f854 3f08 	ldr.w	r3, [r4, #8]!
	handle = sys_le16_to_cpu(req->handle);
    8d42:	881f      	ldrh	r7, [r3, #0]
	net_buf_push(buf, sizeof(struct bt_att_hdr));
    8d44:	2101      	movs	r1, #1
    8d46:	4620      	mov	r0, r4
    8d48:	f011 fa5f 	bl	1a20a <net_buf_simple_push>
	err = bt_smp_sign_verify(conn, buf);
    8d4c:	4629      	mov	r1, r5
    8d4e:	4630      	mov	r0, r6
    8d50:	f003 faf2 	bl	c338 <bt_smp_sign_verify>
	if (err) {
    8d54:	b110      	cbz	r0, 8d5c <att_signed_write_cmd+0x28>
		return 0;
    8d56:	2000      	movs	r0, #0
}
    8d58:	b005      	add	sp, #20
    8d5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	net_buf_pull(buf, sizeof(struct bt_att_hdr));
    8d5c:	2101      	movs	r1, #1
    8d5e:	4620      	mov	r0, r4
    8d60:	f011 fa69 	bl	1a236 <net_buf_simple_pull>
	net_buf_pull(buf, sizeof(*req));
    8d64:	2102      	movs	r1, #2
    8d66:	4620      	mov	r0, r4
    8d68:	f011 fa65 	bl	1a236 <net_buf_simple_pull>
	return att_write_rsp(conn, 0, 0, handle, 0, buf->data,
    8d6c:	68aa      	ldr	r2, [r5, #8]
			     buf->len - sizeof(struct bt_att_signature));
    8d6e:	89ab      	ldrh	r3, [r5, #12]
	return att_write_rsp(conn, 0, 0, handle, 0, buf->data,
    8d70:	3b0c      	subs	r3, #12
    8d72:	b2db      	uxtb	r3, r3
    8d74:	9302      	str	r3, [sp, #8]
    8d76:	9201      	str	r2, [sp, #4]
    8d78:	2100      	movs	r1, #0
    8d7a:	9100      	str	r1, [sp, #0]
    8d7c:	463b      	mov	r3, r7
    8d7e:	460a      	mov	r2, r1
    8d80:	4630      	mov	r0, r6
    8d82:	f7ff ff81 	bl	8c88 <att_write_rsp>
    8d86:	e7e7      	b.n	8d58 <att_signed_write_cmd+0x24>

00008d88 <att_write_cmd>:
{
    8d88:	b530      	push	{r4, r5, lr}
    8d8a:	b085      	sub	sp, #20
    8d8c:	460c      	mov	r4, r1
	struct bt_conn *conn = att->chan.chan.conn;
    8d8e:	6805      	ldr	r5, [r0, #0]
	handle = net_buf_pull_le16(buf);
    8d90:	f101 0008 	add.w	r0, r1, #8
    8d94:	f011 fa5f 	bl	1a256 <net_buf_simple_pull_le16>
	return att_write_rsp(conn, 0, 0, handle, 0, buf->data, buf->len);
    8d98:	68a3      	ldr	r3, [r4, #8]
    8d9a:	7b22      	ldrb	r2, [r4, #12]
    8d9c:	9202      	str	r2, [sp, #8]
    8d9e:	9301      	str	r3, [sp, #4]
    8da0:	2100      	movs	r1, #0
    8da2:	9100      	str	r1, [sp, #0]
    8da4:	4603      	mov	r3, r0
    8da6:	460a      	mov	r2, r1
    8da8:	4628      	mov	r0, r5
    8daa:	f7ff ff6d 	bl	8c88 <att_write_rsp>
}
    8dae:	b005      	add	sp, #20
    8db0:	bd30      	pop	{r4, r5, pc}

00008db2 <att_write_req>:
{
    8db2:	b530      	push	{r4, r5, lr}
    8db4:	b085      	sub	sp, #20
    8db6:	460c      	mov	r4, r1
	struct bt_conn *conn = att->chan.chan.conn;
    8db8:	6805      	ldr	r5, [r0, #0]
	handle = net_buf_pull_le16(buf);
    8dba:	f101 0008 	add.w	r0, r1, #8
    8dbe:	f011 fa4a 	bl	1a256 <net_buf_simple_pull_le16>
			     handle, 0, buf->data, buf->len);
    8dc2:	68a3      	ldr	r3, [r4, #8]
	return att_write_rsp(conn, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
    8dc4:	7b22      	ldrb	r2, [r4, #12]
    8dc6:	9202      	str	r2, [sp, #8]
    8dc8:	9301      	str	r3, [sp, #4]
    8dca:	2300      	movs	r3, #0
    8dcc:	9300      	str	r3, [sp, #0]
    8dce:	4603      	mov	r3, r0
    8dd0:	2213      	movs	r2, #19
    8dd2:	2112      	movs	r1, #18
    8dd4:	4628      	mov	r0, r5
    8dd6:	f7ff ff57 	bl	8c88 <att_write_rsp>
}
    8dda:	b005      	add	sp, #20
    8ddc:	bd30      	pop	{r4, r5, pc}
	...

00008de0 <att_read_group_rsp>:
{
    8de0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8de4:	b086      	sub	sp, #24
    8de6:	4604      	mov	r4, r0
    8de8:	4688      	mov	r8, r1
    8dea:	4616      	mov	r6, r2
    8dec:	461f      	mov	r7, r3
	struct bt_conn *conn = att->chan.chan.conn;
    8dee:	6805      	ldr	r5, [r0, #0]
	memset(&data, 0, sizeof(data));
    8df0:	2214      	movs	r2, #20
    8df2:	2100      	movs	r1, #0
    8df4:	a801      	add	r0, sp, #4
    8df6:	f021 fe45 	bl	2aa84 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
    8dfa:	2201      	movs	r2, #1
    8dfc:	2111      	movs	r1, #17
    8dfe:	4628      	mov	r0, r5
    8e00:	f7ff fe54 	bl	8aac <bt_att_create_pdu>
    8e04:	9003      	str	r0, [sp, #12]
	if (!data.buf) {
    8e06:	b328      	cbz	r0, 8e54 <att_read_group_rsp+0x74>
	data.att = att;
    8e08:	9401      	str	r4, [sp, #4]
	data.uuid = uuid;
    8e0a:	f8cd 8008 	str.w	r8, [sp, #8]
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    8e0e:	2101      	movs	r1, #1
    8e10:	3008      	adds	r0, #8
    8e12:	f011 f9c3 	bl	1a19c <net_buf_simple_add>
    8e16:	9004      	str	r0, [sp, #16]
	data.rsp->len = 0;
    8e18:	2300      	movs	r3, #0
    8e1a:	7003      	strb	r3, [r0, #0]
	data.group = NULL;
    8e1c:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    8e1e:	ab01      	add	r3, sp, #4
    8e20:	4a0f      	ldr	r2, [pc, #60]	; (8e60 <att_read_group_rsp+0x80>)
    8e22:	4639      	mov	r1, r7
    8e24:	4630      	mov	r0, r6
    8e26:	f000 fe85 	bl	9b34 <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
    8e2a:	9b04      	ldr	r3, [sp, #16]
    8e2c:	781c      	ldrb	r4, [r3, #0]
    8e2e:	b13c      	cbz	r4, 8e40 <att_read_group_rsp+0x60>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    8e30:	4b0c      	ldr	r3, [pc, #48]	; (8e64 <att_read_group_rsp+0x84>)
    8e32:	9a03      	ldr	r2, [sp, #12]
    8e34:	2104      	movs	r1, #4
    8e36:	4628      	mov	r0, r5
    8e38:	f7fe fb49 	bl	74ce <bt_l2cap_send_cb>
	return 0;
    8e3c:	2400      	movs	r4, #0
    8e3e:	e00a      	b.n	8e56 <att_read_group_rsp+0x76>
		net_buf_unref(data.buf);
    8e40:	9803      	ldr	r0, [sp, #12]
    8e42:	f011 f95f 	bl	1a104 <net_buf_unref>
		send_err_rsp(conn, BT_ATT_OP_READ_GROUP_REQ, start_handle,
    8e46:	230a      	movs	r3, #10
    8e48:	4632      	mov	r2, r6
    8e4a:	2110      	movs	r1, #16
    8e4c:	4628      	mov	r0, r5
    8e4e:	f7ff fe8f 	bl	8b70 <send_err_rsp>
		return 0;
    8e52:	e000      	b.n	8e56 <att_read_group_rsp+0x76>
		return BT_ATT_ERR_UNLIKELY;
    8e54:	240e      	movs	r4, #14
}
    8e56:	4620      	mov	r0, r4
    8e58:	b006      	add	sp, #24
    8e5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8e5e:	bf00      	nop
    8e60:	00008369 	.word	0x00008369
    8e64:	000082cf 	.word	0x000082cf

00008e68 <att_read_group_req>:
{
    8e68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8e6c:	b088      	sub	sp, #32
	struct bt_conn *conn = att->chan.chan.conn;
    8e6e:	6806      	ldr	r6, [r0, #0]
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    8e70:	898b      	ldrh	r3, [r1, #12]
    8e72:	2b06      	cmp	r3, #6
    8e74:	d005      	beq.n	8e82 <att_read_group_req+0x1a>
    8e76:	2b14      	cmp	r3, #20
    8e78:	d003      	beq.n	8e82 <att_read_group_req+0x1a>
		return BT_ATT_ERR_INVALID_PDU;
    8e7a:	2004      	movs	r0, #4
}
    8e7c:	b008      	add	sp, #32
    8e7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8e82:	460c      	mov	r4, r1
    8e84:	4605      	mov	r5, r0
	req = (void *)buf->data;
    8e86:	4608      	mov	r0, r1
    8e88:	f850 3f08 	ldr.w	r3, [r0, #8]!
	start_handle = sys_le16_to_cpu(req->start_handle);
    8e8c:	881f      	ldrh	r7, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    8e8e:	f8b3 8002 	ldrh.w	r8, [r3, #2]
	net_buf_pull(buf, sizeof(*req));
    8e92:	2104      	movs	r1, #4
    8e94:	f011 f9cf 	bl	1a236 <net_buf_simple_pull>
	if (!uuid_create(&u.uuid, buf)) {
    8e98:	4621      	mov	r1, r4
    8e9a:	a801      	add	r0, sp, #4
    8e9c:	f7ff fb3c 	bl	8518 <uuid_create>
    8ea0:	b908      	cbnz	r0, 8ea6 <att_read_group_req+0x3e>
		return BT_ATT_ERR_UNLIKELY;
    8ea2:	200e      	movs	r0, #14
    8ea4:	e7ea      	b.n	8e7c <att_read_group_req+0x14>
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
    8ea6:	f10d 0216 	add.w	r2, sp, #22
    8eaa:	4641      	mov	r1, r8
    8eac:	4638      	mov	r0, r7
    8eae:	f7ff f8c4 	bl	803a <range_is_valid>
    8eb2:	b1f0      	cbz	r0, 8ef2 <att_read_group_req+0x8a>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    8eb4:	2300      	movs	r3, #0
    8eb6:	f88d 3018 	strb.w	r3, [sp, #24]
    8eba:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    8ebe:	f8ad 301a 	strh.w	r3, [sp, #26]
    8ec2:	a906      	add	r1, sp, #24
    8ec4:	a801      	add	r0, sp, #4
    8ec6:	f7fa fdee 	bl	3aa6 <bt_uuid_cmp>
    8eca:	b158      	cbz	r0, 8ee4 <att_read_group_req+0x7c>
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
    8ecc:	2300      	movs	r3, #0
    8ece:	f88d 301c 	strb.w	r3, [sp, #28]
    8ed2:	f642 0301 	movw	r3, #10241	; 0x2801
    8ed6:	f8ad 301e 	strh.w	r3, [sp, #30]
    8eda:	a907      	add	r1, sp, #28
    8edc:	a801      	add	r0, sp, #4
    8ede:	f7fa fde2 	bl	3aa6 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    8ee2:	b978      	cbnz	r0, 8f04 <att_read_group_req+0x9c>
	return att_read_group_rsp(att, &u.uuid, start_handle, end_handle);
    8ee4:	4643      	mov	r3, r8
    8ee6:	463a      	mov	r2, r7
    8ee8:	a901      	add	r1, sp, #4
    8eea:	4628      	mov	r0, r5
    8eec:	f7ff ff78 	bl	8de0 <att_read_group_rsp>
    8ef0:	e7c4      	b.n	8e7c <att_read_group_req+0x14>
		send_err_rsp(conn, BT_ATT_OP_READ_GROUP_REQ, err_handle,
    8ef2:	2301      	movs	r3, #1
    8ef4:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    8ef8:	2110      	movs	r1, #16
    8efa:	4630      	mov	r0, r6
    8efc:	f7ff fe38 	bl	8b70 <send_err_rsp>
		return 0;
    8f00:	2000      	movs	r0, #0
    8f02:	e7bb      	b.n	8e7c <att_read_group_req+0x14>
		send_err_rsp(conn, BT_ATT_OP_READ_GROUP_REQ, start_handle,
    8f04:	2310      	movs	r3, #16
    8f06:	463a      	mov	r2, r7
    8f08:	4619      	mov	r1, r3
    8f0a:	4630      	mov	r0, r6
    8f0c:	f7ff fe30 	bl	8b70 <send_err_rsp>
		return 0;
    8f10:	2000      	movs	r0, #0
    8f12:	e7b3      	b.n	8e7c <att_read_group_req+0x14>

00008f14 <att_read_mult_req>:
{
    8f14:	b570      	push	{r4, r5, r6, lr}
    8f16:	b086      	sub	sp, #24
    8f18:	4605      	mov	r5, r0
    8f1a:	460c      	mov	r4, r1
	struct bt_conn *conn = att->chan.chan.conn;
    8f1c:	6806      	ldr	r6, [r0, #0]
	memset(&data, 0, sizeof(data));
    8f1e:	2214      	movs	r2, #20
    8f20:	2100      	movs	r1, #0
    8f22:	a801      	add	r0, sp, #4
    8f24:	f021 fdae 	bl	2aa84 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
    8f28:	2200      	movs	r2, #0
    8f2a:	210f      	movs	r1, #15
    8f2c:	4630      	mov	r0, r6
    8f2e:	f7ff fdbd 	bl	8aac <bt_att_create_pdu>
    8f32:	9003      	str	r0, [sp, #12]
	if (!data.buf) {
    8f34:	b348      	cbz	r0, 8f8a <att_read_mult_req+0x76>
	data.att = att;
    8f36:	9501      	str	r5, [sp, #4]
	while (buf->len >= sizeof(u16_t)) {
    8f38:	89a3      	ldrh	r3, [r4, #12]
    8f3a:	2b01      	cmp	r3, #1
    8f3c:	d91c      	bls.n	8f78 <att_read_mult_req+0x64>
		handle = net_buf_pull_le16(buf);
    8f3e:	f104 0008 	add.w	r0, r4, #8
    8f42:	f011 f988 	bl	1a256 <net_buf_simple_pull_le16>
    8f46:	4605      	mov	r5, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    8f48:	2301      	movs	r3, #1
    8f4a:	f88d 3014 	strb.w	r3, [sp, #20]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    8f4e:	ab01      	add	r3, sp, #4
    8f50:	4a0f      	ldr	r2, [pc, #60]	; (8f90 <att_read_mult_req+0x7c>)
    8f52:	4601      	mov	r1, r0
    8f54:	f000 fdee 	bl	9b34 <bt_gatt_foreach_attr>
		if (data.err) {
    8f58:	f89d 3014 	ldrb.w	r3, [sp, #20]
    8f5c:	2b00      	cmp	r3, #0
    8f5e:	d0eb      	beq.n	8f38 <att_read_mult_req+0x24>
			net_buf_unref(data.buf);
    8f60:	9803      	ldr	r0, [sp, #12]
    8f62:	f011 f8cf 	bl	1a104 <net_buf_unref>
			send_err_rsp(conn, BT_ATT_OP_READ_MULT_REQ, handle,
    8f66:	f89d 3014 	ldrb.w	r3, [sp, #20]
    8f6a:	462a      	mov	r2, r5
    8f6c:	210e      	movs	r1, #14
    8f6e:	4630      	mov	r0, r6
    8f70:	f7ff fdfe 	bl	8b70 <send_err_rsp>
			return 0;
    8f74:	2000      	movs	r0, #0
    8f76:	e006      	b.n	8f86 <att_read_mult_req+0x72>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    8f78:	4b06      	ldr	r3, [pc, #24]	; (8f94 <att_read_mult_req+0x80>)
    8f7a:	9a03      	ldr	r2, [sp, #12]
    8f7c:	2104      	movs	r1, #4
    8f7e:	4630      	mov	r0, r6
    8f80:	f7fe faa5 	bl	74ce <bt_l2cap_send_cb>
	return 0;
    8f84:	2000      	movs	r0, #0
}
    8f86:	b006      	add	sp, #24
    8f88:	bd70      	pop	{r4, r5, r6, pc}
		return BT_ATT_ERR_UNLIKELY;
    8f8a:	200e      	movs	r0, #14
    8f8c:	e7fb      	b.n	8f86 <att_read_mult_req+0x72>
    8f8e:	bf00      	nop
    8f90:	00008199 	.word	0x00008199
    8f94:	000082cf 	.word	0x000082cf

00008f98 <att_read_rsp>:
{
    8f98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8f9c:	b086      	sub	sp, #24
	struct bt_conn *conn = att->chan.chan.conn;
    8f9e:	6807      	ldr	r7, [r0, #0]
	if (!handle) {
    8fa0:	b923      	cbnz	r3, 8fac <att_read_rsp+0x14>
		return BT_ATT_ERR_INVALID_HANDLE;
    8fa2:	2401      	movs	r4, #1
}
    8fa4:	4620      	mov	r0, r4
    8fa6:	b006      	add	sp, #24
    8fa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8fac:	461d      	mov	r5, r3
    8fae:	4616      	mov	r6, r2
    8fb0:	4688      	mov	r8, r1
    8fb2:	4604      	mov	r4, r0
	memset(&data, 0, sizeof(data));
    8fb4:	2214      	movs	r2, #20
    8fb6:	2100      	movs	r1, #0
    8fb8:	a801      	add	r0, sp, #4
    8fba:	f021 fd63 	bl	2aa84 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
    8fbe:	2200      	movs	r2, #0
    8fc0:	4631      	mov	r1, r6
    8fc2:	4638      	mov	r0, r7
    8fc4:	f7ff fd72 	bl	8aac <bt_att_create_pdu>
    8fc8:	9003      	str	r0, [sp, #12]
	if (!data.buf) {
    8fca:	b318      	cbz	r0, 9014 <att_read_rsp+0x7c>
	data.att = att;
    8fcc:	9401      	str	r4, [sp, #4]
	data.offset = offset;
    8fce:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    8fd2:	f8ad 3008 	strh.w	r3, [sp, #8]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    8fd6:	2301      	movs	r3, #1
    8fd8:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    8fdc:	ab01      	add	r3, sp, #4
    8fde:	4a0e      	ldr	r2, [pc, #56]	; (9018 <att_read_rsp+0x80>)
    8fe0:	4629      	mov	r1, r5
    8fe2:	4628      	mov	r0, r5
    8fe4:	f000 fda6 	bl	9b34 <bt_gatt_foreach_attr>
	if (data.err) {
    8fe8:	f89d 4014 	ldrb.w	r4, [sp, #20]
    8fec:	b934      	cbnz	r4, 8ffc <att_read_rsp+0x64>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    8fee:	4b0b      	ldr	r3, [pc, #44]	; (901c <att_read_rsp+0x84>)
    8ff0:	9a03      	ldr	r2, [sp, #12]
    8ff2:	2104      	movs	r1, #4
    8ff4:	4638      	mov	r0, r7
    8ff6:	f7fe fa6a 	bl	74ce <bt_l2cap_send_cb>
	return 0;
    8ffa:	e7d3      	b.n	8fa4 <att_read_rsp+0xc>
		net_buf_unref(data.buf);
    8ffc:	9803      	ldr	r0, [sp, #12]
    8ffe:	f011 f881 	bl	1a104 <net_buf_unref>
		send_err_rsp(conn, op, handle, data.err);
    9002:	f89d 3014 	ldrb.w	r3, [sp, #20]
    9006:	462a      	mov	r2, r5
    9008:	4641      	mov	r1, r8
    900a:	4638      	mov	r0, r7
    900c:	f7ff fdb0 	bl	8b70 <send_err_rsp>
		return 0;
    9010:	2400      	movs	r4, #0
    9012:	e7c7      	b.n	8fa4 <att_read_rsp+0xc>
		return BT_ATT_ERR_UNLIKELY;
    9014:	240e      	movs	r4, #14
    9016:	e7c5      	b.n	8fa4 <att_read_rsp+0xc>
    9018:	00008199 	.word	0x00008199
    901c:	000082cf 	.word	0x000082cf

00009020 <att_read_blob_req>:
{
    9020:	b500      	push	{lr}
    9022:	b083      	sub	sp, #12
	req = (void *)buf->data;
    9024:	688a      	ldr	r2, [r1, #8]
	handle = sys_le16_to_cpu(req->handle);
    9026:	8813      	ldrh	r3, [r2, #0]
	offset = sys_le16_to_cpu(req->offset);
    9028:	8852      	ldrh	r2, [r2, #2]
	return att_read_rsp(att, BT_ATT_OP_READ_BLOB_REQ,
    902a:	9200      	str	r2, [sp, #0]
    902c:	220d      	movs	r2, #13
    902e:	210c      	movs	r1, #12
    9030:	f7ff ffb2 	bl	8f98 <att_read_rsp>
}
    9034:	b003      	add	sp, #12
    9036:	f85d fb04 	ldr.w	pc, [sp], #4

0000903a <att_read_req>:
{
    903a:	b500      	push	{lr}
    903c:	b083      	sub	sp, #12
	req = (void *)buf->data;
    903e:	688b      	ldr	r3, [r1, #8]
	handle = sys_le16_to_cpu(req->handle);
    9040:	881b      	ldrh	r3, [r3, #0]
	return att_read_rsp(att, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
    9042:	2200      	movs	r2, #0
    9044:	9200      	str	r2, [sp, #0]
    9046:	220b      	movs	r2, #11
    9048:	210a      	movs	r1, #10
    904a:	f7ff ffa5 	bl	8f98 <att_read_rsp>
}
    904e:	b003      	add	sp, #12
    9050:	f85d fb04 	ldr.w	pc, [sp], #4

00009054 <att_read_type_rsp>:
{
    9054:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9058:	b086      	sub	sp, #24
    905a:	4604      	mov	r4, r0
    905c:	4688      	mov	r8, r1
    905e:	4616      	mov	r6, r2
    9060:	461f      	mov	r7, r3
	struct bt_conn *conn = att->chan.chan.conn;
    9062:	6805      	ldr	r5, [r0, #0]
	memset(&data, 0, sizeof(data));
    9064:	2218      	movs	r2, #24
    9066:	2100      	movs	r1, #0
    9068:	4668      	mov	r0, sp
    906a:	f021 fd0b 	bl	2aa84 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
    906e:	2201      	movs	r2, #1
    9070:	2109      	movs	r1, #9
    9072:	4628      	mov	r0, r5
    9074:	f7ff fd1a 	bl	8aac <bt_att_create_pdu>
    9078:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    907a:	b340      	cbz	r0, 90ce <att_read_type_rsp+0x7a>
	data.att = att;
    907c:	9400      	str	r4, [sp, #0]
	data.uuid = uuid;
    907e:	f8cd 8004 	str.w	r8, [sp, #4]
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    9082:	2101      	movs	r1, #1
    9084:	3008      	adds	r0, #8
    9086:	f011 f889 	bl	1a19c <net_buf_simple_add>
    908a:	9003      	str	r0, [sp, #12]
	data.rsp->len = 0;
    908c:	2300      	movs	r3, #0
    908e:	7003      	strb	r3, [r0, #0]
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    9090:	230a      	movs	r3, #10
    9092:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    9096:	466b      	mov	r3, sp
    9098:	4a0f      	ldr	r2, [pc, #60]	; (90d8 <att_read_type_rsp+0x84>)
    909a:	4639      	mov	r1, r7
    909c:	4630      	mov	r0, r6
    909e:	f000 fd49 	bl	9b34 <bt_gatt_foreach_attr>
	if (data.err) {
    90a2:	f89d 4014 	ldrb.w	r4, [sp, #20]
    90a6:	b934      	cbnz	r4, 90b6 <att_read_type_rsp+0x62>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    90a8:	4b0c      	ldr	r3, [pc, #48]	; (90dc <att_read_type_rsp+0x88>)
    90aa:	9a02      	ldr	r2, [sp, #8]
    90ac:	2104      	movs	r1, #4
    90ae:	4628      	mov	r0, r5
    90b0:	f7fe fa0d 	bl	74ce <bt_l2cap_send_cb>
	return 0;
    90b4:	e00c      	b.n	90d0 <att_read_type_rsp+0x7c>
		net_buf_unref(data.buf);
    90b6:	9802      	ldr	r0, [sp, #8]
    90b8:	f011 f824 	bl	1a104 <net_buf_unref>
		send_err_rsp(conn, BT_ATT_OP_READ_TYPE_REQ, start_handle,
    90bc:	f89d 3014 	ldrb.w	r3, [sp, #20]
    90c0:	4632      	mov	r2, r6
    90c2:	2108      	movs	r1, #8
    90c4:	4628      	mov	r0, r5
    90c6:	f7ff fd53 	bl	8b70 <send_err_rsp>
		return 0;
    90ca:	2400      	movs	r4, #0
    90cc:	e000      	b.n	90d0 <att_read_type_rsp+0x7c>
		return BT_ATT_ERR_UNLIKELY;
    90ce:	240e      	movs	r4, #14
}
    90d0:	4620      	mov	r0, r4
    90d2:	b006      	add	sp, #24
    90d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    90d8:	00008457 	.word	0x00008457
    90dc:	000082cf 	.word	0x000082cf

000090e0 <att_read_type_req>:
{
    90e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    90e4:	b086      	sub	sp, #24
	struct bt_conn *conn = att->chan.chan.conn;
    90e6:	6806      	ldr	r6, [r0, #0]
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    90e8:	898b      	ldrh	r3, [r1, #12]
    90ea:	2b06      	cmp	r3, #6
    90ec:	d005      	beq.n	90fa <att_read_type_req+0x1a>
    90ee:	2b14      	cmp	r3, #20
    90f0:	d003      	beq.n	90fa <att_read_type_req+0x1a>
		return BT_ATT_ERR_INVALID_PDU;
    90f2:	2004      	movs	r0, #4
}
    90f4:	b006      	add	sp, #24
    90f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    90fa:	460c      	mov	r4, r1
    90fc:	4605      	mov	r5, r0
	req = (void *)buf->data;
    90fe:	4608      	mov	r0, r1
    9100:	f850 3f08 	ldr.w	r3, [r0, #8]!
	start_handle = sys_le16_to_cpu(req->start_handle);
    9104:	881f      	ldrh	r7, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    9106:	f8b3 8002 	ldrh.w	r8, [r3, #2]
	net_buf_pull(buf, sizeof(*req));
    910a:	2104      	movs	r1, #4
    910c:	f011 f893 	bl	1a236 <net_buf_simple_pull>
	if (!uuid_create(&u.uuid, buf)) {
    9110:	4621      	mov	r1, r4
    9112:	a801      	add	r0, sp, #4
    9114:	f7ff fa00 	bl	8518 <uuid_create>
    9118:	b908      	cbnz	r0, 911e <att_read_type_req+0x3e>
		return BT_ATT_ERR_UNLIKELY;
    911a:	200e      	movs	r0, #14
    911c:	e7ea      	b.n	90f4 <att_read_type_req+0x14>
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
    911e:	f10d 0216 	add.w	r2, sp, #22
    9122:	4641      	mov	r1, r8
    9124:	4638      	mov	r0, r7
    9126:	f7fe ff88 	bl	803a <range_is_valid>
    912a:	b130      	cbz	r0, 913a <att_read_type_req+0x5a>
	return att_read_type_rsp(att, &u.uuid, start_handle, end_handle);
    912c:	4643      	mov	r3, r8
    912e:	463a      	mov	r2, r7
    9130:	a901      	add	r1, sp, #4
    9132:	4628      	mov	r0, r5
    9134:	f7ff ff8e 	bl	9054 <att_read_type_rsp>
    9138:	e7dc      	b.n	90f4 <att_read_type_req+0x14>
		send_err_rsp(conn, BT_ATT_OP_READ_TYPE_REQ, err_handle,
    913a:	2301      	movs	r3, #1
    913c:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    9140:	2108      	movs	r1, #8
    9142:	4630      	mov	r0, r6
    9144:	f7ff fd14 	bl	8b70 <send_err_rsp>
		return 0;
    9148:	2000      	movs	r0, #0
    914a:	e7d3      	b.n	90f4 <att_read_type_req+0x14>

0000914c <att_find_type_rsp>:
{
    914c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9150:	b086      	sub	sp, #24
    9152:	4604      	mov	r4, r0
    9154:	460e      	mov	r6, r1
    9156:	4617      	mov	r7, r2
    9158:	4698      	mov	r8, r3
	struct bt_conn *conn = att->chan.chan.conn;
    915a:	6805      	ldr	r5, [r0, #0]
	memset(&data, 0, sizeof(data));
    915c:	2214      	movs	r2, #20
    915e:	2100      	movs	r1, #0
    9160:	a801      	add	r0, sp, #4
    9162:	f021 fc8f 	bl	2aa84 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
    9166:	2200      	movs	r2, #0
    9168:	2107      	movs	r1, #7
    916a:	4628      	mov	r0, r5
    916c:	f7ff fc9e 	bl	8aac <bt_att_create_pdu>
    9170:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    9172:	b338      	cbz	r0, 91c4 <att_find_type_rsp+0x78>
	data.att = att;
    9174:	9401      	str	r4, [sp, #4]
	data.group = NULL;
    9176:	2300      	movs	r3, #0
    9178:	9303      	str	r3, [sp, #12]
	data.value = value;
    917a:	f8cd 8010 	str.w	r8, [sp, #16]
	data.value_len = value_len;
    917e:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    9182:	f88d 3014 	strb.w	r3, [sp, #20]
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    9186:	230a      	movs	r3, #10
    9188:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    918c:	ab01      	add	r3, sp, #4
    918e:	4a10      	ldr	r2, [pc, #64]	; (91d0 <att_find_type_rsp+0x84>)
    9190:	4639      	mov	r1, r7
    9192:	4630      	mov	r0, r6
    9194:	f000 fcce 	bl	9b34 <bt_gatt_foreach_attr>
	if (data.err) {
    9198:	f89d 4015 	ldrb.w	r4, [sp, #21]
    919c:	b934      	cbnz	r4, 91ac <att_find_type_rsp+0x60>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    919e:	4b0d      	ldr	r3, [pc, #52]	; (91d4 <att_find_type_rsp+0x88>)
    91a0:	9a02      	ldr	r2, [sp, #8]
    91a2:	2104      	movs	r1, #4
    91a4:	4628      	mov	r0, r5
    91a6:	f7fe f992 	bl	74ce <bt_l2cap_send_cb>
	return 0;
    91aa:	e00c      	b.n	91c6 <att_find_type_rsp+0x7a>
		net_buf_unref(data.buf);
    91ac:	9802      	ldr	r0, [sp, #8]
    91ae:	f010 ffa9 	bl	1a104 <net_buf_unref>
		send_err_rsp(conn, BT_ATT_OP_FIND_TYPE_REQ, start_handle,
    91b2:	f89d 3015 	ldrb.w	r3, [sp, #21]
    91b6:	4632      	mov	r2, r6
    91b8:	2106      	movs	r1, #6
    91ba:	4628      	mov	r0, r5
    91bc:	f7ff fcd8 	bl	8b70 <send_err_rsp>
		return 0;
    91c0:	2400      	movs	r4, #0
    91c2:	e000      	b.n	91c6 <att_find_type_rsp+0x7a>
		return BT_ATT_ERR_UNLIKELY;
    91c4:	240e      	movs	r4, #14
}
    91c6:	4620      	mov	r0, r4
    91c8:	b006      	add	sp, #24
    91ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    91ce:	bf00      	nop
    91d0:	000085ff 	.word	0x000085ff
    91d4:	000082cf 	.word	0x000082cf

000091d8 <att_find_type_req>:
{
    91d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    91dc:	b084      	sub	sp, #16
    91de:	4605      	mov	r5, r0
    91e0:	460f      	mov	r7, r1
	struct bt_conn *conn = att->chan.chan.conn;
    91e2:	f8d0 9000 	ldr.w	r9, [r0]
	req = (void *)buf->data;
    91e6:	4608      	mov	r0, r1
    91e8:	f850 3f08 	ldr.w	r3, [r0, #8]!
	start_handle = sys_le16_to_cpu(req->start_handle);
    91ec:	881c      	ldrh	r4, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    91ee:	885e      	ldrh	r6, [r3, #2]
	type = sys_le16_to_cpu(req->type);
    91f0:	f8b3 8004 	ldrh.w	r8, [r3, #4]
	value = net_buf_pull(buf, sizeof(*req));
    91f4:	2106      	movs	r1, #6
    91f6:	f011 f81e 	bl	1a236 <net_buf_simple_pull>
    91fa:	4682      	mov	sl, r0
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
    91fc:	f10d 020e 	add.w	r2, sp, #14
    9200:	4631      	mov	r1, r6
    9202:	4620      	mov	r0, r4
    9204:	f7fe ff19 	bl	803a <range_is_valid>
    9208:	b160      	cbz	r0, 9224 <att_find_type_req+0x4c>
	if (type != BT_UUID_GATT_PRIMARY_VAL) {
    920a:	f5b8 5f20 	cmp.w	r8, #10240	; 0x2800
    920e:	d012      	beq.n	9236 <att_find_type_req+0x5e>
		send_err_rsp(conn, BT_ATT_OP_FIND_TYPE_REQ, start_handle,
    9210:	230a      	movs	r3, #10
    9212:	4622      	mov	r2, r4
    9214:	2106      	movs	r1, #6
    9216:	4648      	mov	r0, r9
    9218:	f7ff fcaa 	bl	8b70 <send_err_rsp>
		return 0;
    921c:	2000      	movs	r0, #0
}
    921e:	b004      	add	sp, #16
    9220:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		send_err_rsp(conn, BT_ATT_OP_FIND_TYPE_REQ, err_handle,
    9224:	2301      	movs	r3, #1
    9226:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    922a:	2106      	movs	r1, #6
    922c:	4648      	mov	r0, r9
    922e:	f7ff fc9f 	bl	8b70 <send_err_rsp>
		return 0;
    9232:	2000      	movs	r0, #0
    9234:	e7f3      	b.n	921e <att_find_type_req+0x46>
	return att_find_type_rsp(att, start_handle, end_handle, value,
    9236:	7b3b      	ldrb	r3, [r7, #12]
    9238:	9300      	str	r3, [sp, #0]
    923a:	4653      	mov	r3, sl
    923c:	4632      	mov	r2, r6
    923e:	4621      	mov	r1, r4
    9240:	4628      	mov	r0, r5
    9242:	f7ff ff83 	bl	914c <att_find_type_rsp>
    9246:	e7ea      	b.n	921e <att_find_type_req+0x46>

00009248 <att_find_info_rsp>:
{
    9248:	b5f0      	push	{r4, r5, r6, r7, lr}
    924a:	b085      	sub	sp, #20
    924c:	4605      	mov	r5, r0
    924e:	460e      	mov	r6, r1
    9250:	4617      	mov	r7, r2
	struct bt_conn *conn = att->chan.chan.conn;
    9252:	6804      	ldr	r4, [r0, #0]
	memset(&data, 0, sizeof(data));
    9254:	2210      	movs	r2, #16
    9256:	2100      	movs	r1, #0
    9258:	4668      	mov	r0, sp
    925a:	f021 fc13 	bl	2aa84 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
    925e:	2200      	movs	r2, #0
    9260:	2105      	movs	r1, #5
    9262:	4620      	mov	r0, r4
    9264:	f7ff fc22 	bl	8aac <bt_att_create_pdu>
    9268:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
    926a:	b1e8      	cbz	r0, 92a8 <att_find_info_rsp+0x60>
	data.att = att;
    926c:	ab04      	add	r3, sp, #16
    926e:	f843 5d10 	str.w	r5, [r3, #-16]!
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    9272:	4a0e      	ldr	r2, [pc, #56]	; (92ac <att_find_info_rsp+0x64>)
    9274:	4639      	mov	r1, r7
    9276:	4630      	mov	r0, r6
    9278:	f000 fc5c 	bl	9b34 <bt_gatt_foreach_attr>
	if (!data.rsp) {
    927c:	9b02      	ldr	r3, [sp, #8]
    927e:	b143      	cbz	r3, 9292 <att_find_info_rsp+0x4a>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    9280:	4b0b      	ldr	r3, [pc, #44]	; (92b0 <att_find_info_rsp+0x68>)
    9282:	9a01      	ldr	r2, [sp, #4]
    9284:	2104      	movs	r1, #4
    9286:	4620      	mov	r0, r4
    9288:	f7fe f921 	bl	74ce <bt_l2cap_send_cb>
	return 0;
    928c:	2000      	movs	r0, #0
}
    928e:	b005      	add	sp, #20
    9290:	bdf0      	pop	{r4, r5, r6, r7, pc}
		net_buf_unref(data.buf);
    9292:	9801      	ldr	r0, [sp, #4]
    9294:	f010 ff36 	bl	1a104 <net_buf_unref>
		send_err_rsp(conn, BT_ATT_OP_FIND_INFO_REQ, start_handle,
    9298:	230a      	movs	r3, #10
    929a:	4632      	mov	r2, r6
    929c:	2104      	movs	r1, #4
    929e:	4620      	mov	r0, r4
    92a0:	f7ff fc66 	bl	8b70 <send_err_rsp>
		return 0;
    92a4:	2000      	movs	r0, #0
    92a6:	e7f2      	b.n	928e <att_find_info_rsp+0x46>
		return BT_ATT_ERR_UNLIKELY;
    92a8:	200e      	movs	r0, #14
    92aa:	e7f0      	b.n	928e <att_find_info_rsp+0x46>
    92ac:	0000854f 	.word	0x0000854f
    92b0:	000082cf 	.word	0x000082cf

000092b4 <att_find_info_req>:
{
    92b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    92b6:	b083      	sub	sp, #12
    92b8:	4604      	mov	r4, r0
	struct bt_conn *conn = att->chan.chan.conn;
    92ba:	6807      	ldr	r7, [r0, #0]
	req = (void *)buf->data;
    92bc:	688b      	ldr	r3, [r1, #8]
	start_handle = sys_le16_to_cpu(req->start_handle);
    92be:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    92c0:	885e      	ldrh	r6, [r3, #2]
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
    92c2:	f10d 0206 	add.w	r2, sp, #6
    92c6:	4631      	mov	r1, r6
    92c8:	4628      	mov	r0, r5
    92ca:	f7fe feb6 	bl	803a <range_is_valid>
    92ce:	b130      	cbz	r0, 92de <att_find_info_req+0x2a>
	return att_find_info_rsp(att, start_handle, end_handle);
    92d0:	4632      	mov	r2, r6
    92d2:	4629      	mov	r1, r5
    92d4:	4620      	mov	r0, r4
    92d6:	f7ff ffb7 	bl	9248 <att_find_info_rsp>
}
    92da:	b003      	add	sp, #12
    92dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		send_err_rsp(conn, BT_ATT_OP_FIND_INFO_REQ, err_handle,
    92de:	2301      	movs	r3, #1
    92e0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    92e4:	2104      	movs	r1, #4
    92e6:	4638      	mov	r0, r7
    92e8:	f7ff fc42 	bl	8b70 <send_err_rsp>
		return 0;
    92ec:	2000      	movs	r0, #0
    92ee:	e7f4      	b.n	92da <att_find_info_req+0x26>

000092f0 <bt_att_init>:

void bt_att_init(void)
{
    92f0:	b508      	push	{r3, lr}
	static struct bt_l2cap_fixed_chan chan = {
		.cid		= BT_L2CAP_CID_ATT,
		.accept		= bt_att_accept,
	};

	bt_l2cap_le_fixed_chan_register(&chan);
    92f2:	4803      	ldr	r0, [pc, #12]	; (9300 <bt_att_init+0x10>)
    92f4:	f7fd ff44 	bl	7180 <bt_l2cap_le_fixed_chan_register>

	bt_gatt_init();
    92f8:	f000 fb3c 	bl	9974 <bt_gatt_init>
    92fc:	bd08      	pop	{r3, pc}
    92fe:	bf00      	nop
    9300:	2000b970 	.word	0x2000b970

00009304 <bt_att_send>:
	/* tx and rx MTU shall be symmetric */
	return att->chan.tx.mtu;
}

int bt_att_send(struct bt_conn *conn, struct net_buf *buf)
{
    9304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_att *att;
	struct bt_att_hdr *hdr;

	if (!conn || !buf) {
    9306:	2800      	cmp	r0, #0
    9308:	d043      	beq.n	9392 <bt_att_send+0x8e>
    930a:	4606      	mov	r6, r0
    930c:	2900      	cmp	r1, #0
    930e:	d043      	beq.n	9398 <bt_att_send+0x94>
    9310:	460c      	mov	r4, r1
		return -EINVAL;
	}

	att = att_chan_get(conn);
    9312:	f7fe ff7b 	bl	820c <att_chan_get>
	if (!att) {
    9316:	4605      	mov	r5, r0
    9318:	2800      	cmp	r0, #0
    931a:	d040      	beq.n	939e <bt_att_send+0x9a>
		return -ENOTCONN;
	}

	k_sem_take(&att->tx_sem, K_FOREVER);
    931c:	f100 07d4 	add.w	r7, r0, #212	; 0xd4
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    9320:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    9324:	4638      	mov	r0, r7
    9326:	f01f fa4b 	bl	287c0 <_impl_k_sem_take>
	return (att->chan.chan.conn->state != BT_CONN_CONNECTED ||
    932a:	682b      	ldr	r3, [r5, #0]
    932c:	7b1b      	ldrb	r3, [r3, #12]
    932e:	2b03      	cmp	r3, #3
    9330:	d011      	beq.n	9356 <bt_att_send+0x52>
    9332:	2301      	movs	r3, #1
	if (!att_is_connected(att)) {
    9334:	b1e3      	cbz	r3, 9370 <bt_att_send+0x6c>
		BT_WARN("Disconnected");
		k_sem_give(&att->tx_sem);
		return -ENOTCONN;
	}

	hdr = (void *)buf->data;
    9336:	68a3      	ldr	r3, [r4, #8]

	BT_DBG("code 0x%02x", hdr->code);

	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    9338:	781b      	ldrb	r3, [r3, #0]
    933a:	2bd2      	cmp	r3, #210	; 0xd2
    933c:	d01e      	beq.n	937c <bt_att_send+0x78>
			k_sem_give(&att->tx_sem);
			return err;
		}
	}

	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_cb(buf));
    933e:	4620      	mov	r0, r4
    9340:	f7fe ff0c 	bl	815c <att_cb>
    9344:	4603      	mov	r3, r0
    9346:	4622      	mov	r2, r4
    9348:	2104      	movs	r1, #4
    934a:	4630      	mov	r0, r6
    934c:	f7fe f8bf 	bl	74ce <bt_l2cap_send_cb>

	return 0;
    9350:	2500      	movs	r5, #0
}
    9352:	4628      	mov	r0, r5
    9354:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    9356:	f3bf 8f5b 	dmb	ish
    935a:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
    935e:	f3bf 8f5b 	dmb	ish
	return (att->chan.chan.conn->state != BT_CONN_CONNECTED ||
    9362:	f013 0f04 	tst.w	r3, #4
    9366:	d101      	bne.n	936c <bt_att_send+0x68>
    9368:	2301      	movs	r3, #1
    936a:	e7e3      	b.n	9334 <bt_att_send+0x30>
    936c:	2300      	movs	r3, #0
    936e:	e7e1      	b.n	9334 <bt_att_send+0x30>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    9370:	4638      	mov	r0, r7
    9372:	f01f fa12 	bl	2879a <_impl_k_sem_give>
		return -ENOTCONN;
    9376:	f06f 057f 	mvn.w	r5, #127	; 0x7f
    937a:	e7ea      	b.n	9352 <bt_att_send+0x4e>
		err = bt_smp_sign(conn, buf);
    937c:	4621      	mov	r1, r4
    937e:	4630      	mov	r0, r6
    9380:	f003 f81a 	bl	c3b8 <bt_smp_sign>
		if (err) {
    9384:	4605      	mov	r5, r0
    9386:	2800      	cmp	r0, #0
    9388:	d0d9      	beq.n	933e <bt_att_send+0x3a>
    938a:	4638      	mov	r0, r7
    938c:	f01f fa05 	bl	2879a <_impl_k_sem_give>
			return err;
    9390:	e7df      	b.n	9352 <bt_att_send+0x4e>
		return -EINVAL;
    9392:	f06f 0515 	mvn.w	r5, #21
    9396:	e7dc      	b.n	9352 <bt_att_send+0x4e>
    9398:	f06f 0515 	mvn.w	r5, #21
    939c:	e7d9      	b.n	9352 <bt_att_send+0x4e>
		return -ENOTCONN;
    939e:	f06f 057f 	mvn.w	r5, #127	; 0x7f
    93a2:	e7d6      	b.n	9352 <bt_att_send+0x4e>

000093a4 <bt_att_req_send>:
{
	struct bt_att *att;

	BT_DBG("conn %p req %p", conn, req);

	if (!conn || !req) {
    93a4:	b1e0      	cbz	r0, 93e0 <bt_att_req_send+0x3c>
    93a6:	b1f1      	cbz	r1, 93e6 <bt_att_req_send+0x42>
{
    93a8:	b510      	push	{r4, lr}
    93aa:	460c      	mov	r4, r1
		return -EINVAL;
	}

	att = att_chan_get(conn);
    93ac:	f7fe ff2e 	bl	820c <att_chan_get>
	if (!att) {
    93b0:	b1e0      	cbz	r0, 93ec <bt_att_req_send+0x48>
		return -ENOTCONN;
	}

	/* Check if there is a request outstanding */
	if (att->req) {
    93b2:	f8d0 20a0 	ldr.w	r2, [r0, #160]	; 0xa0
    93b6:	b17a      	cbz	r2, 93d8 <bt_att_req_send+0x34>
	node->next = NULL;
    93b8:	2200      	movs	r2, #0
    93ba:	6022      	str	r2, [r4, #0]
	if (!list->tail) {
    93bc:	f8d0 20a8 	ldr.w	r2, [r0, #168]	; 0xa8
    93c0:	b122      	cbz	r2, 93cc <bt_att_req_send+0x28>
		list->tail->next = node;
    93c2:	6014      	str	r4, [r2, #0]
		list->tail = node;
    93c4:	f8c0 40a8 	str.w	r4, [r0, #168]	; 0xa8
		/* Queue the request to be send later */
		sys_slist_append(&att->reqs, &req->node);
		return 0;
    93c8:	2000      	movs	r0, #0
    93ca:	bd10      	pop	{r4, pc}
		list->tail = node;
    93cc:	f8c0 40a8 	str.w	r4, [r0, #168]	; 0xa8
		list->head = node;
    93d0:	f8c0 40a4 	str.w	r4, [r0, #164]	; 0xa4
    93d4:	2000      	movs	r0, #0
    93d6:	bd10      	pop	{r4, pc}
	}

	return att_send_req(att, req);
    93d8:	4621      	mov	r1, r4
    93da:	f7ff f9ad 	bl	8738 <att_send_req>
    93de:	bd10      	pop	{r4, pc}
		return -EINVAL;
    93e0:	f06f 0015 	mvn.w	r0, #21
    93e4:	4770      	bx	lr
    93e6:	f06f 0015 	mvn.w	r0, #21
    93ea:	4770      	bx	lr
		return -ENOTCONN;
    93ec:	f06f 007f 	mvn.w	r0, #127	; 0x7f
}
    93f0:	bd10      	pop	{r4, pc}

000093f2 <sc_ccc_cfg_changed>:

static struct bt_gatt_ccc_cfg sc_ccc_cfg[BT_GATT_CCC_MAX] = {};

static void sc_ccc_cfg_changed(const struct bt_gatt_attr *attr,
			       u16_t value)
{
    93f2:	4770      	bx	lr

000093f4 <gatt_register>:
};

static struct bt_gatt_service gatt_svc = BT_GATT_SERVICE(gatt_attrs);

static int gatt_register(struct bt_gatt_service *svc)
{
    93f4:	b430      	push	{r4, r5}
	struct bt_gatt_service *last;
	u16_t handle;
	struct bt_gatt_attr *attrs = svc->attrs;
    93f6:	6804      	ldr	r4, [r0, #0]
	u16_t count = svc->attr_count;
    93f8:	8883      	ldrh	r3, [r0, #4]
	return (!list->head);
    93fa:	4a1c      	ldr	r2, [pc, #112]	; (946c <gatt_register+0x78>)
    93fc:	6812      	ldr	r2, [r2, #0]

	if (sys_slist_is_empty(&db)) {
    93fe:	b172      	cbz	r2, 941e <gatt_register+0x2a>
	return list->tail;
    9400:	4a1a      	ldr	r2, [pc, #104]	; (946c <gatt_register+0x78>)
    9402:	6852      	ldr	r2, [r2, #4]
		handle = 0;
		goto populate;
	}

	last = SYS_SLIST_PEEK_TAIL_CONTAINER(&db, last, node);
    9404:	b14a      	cbz	r2, 941a <gatt_register+0x26>
    9406:	3a08      	subs	r2, #8
	handle = last->attrs[last->attr_count - 1].handle;
    9408:	6815      	ldr	r5, [r2, #0]
    940a:	8892      	ldrh	r2, [r2, #4]
    940c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    9410:	0091      	lsls	r1, r2, #2
    9412:	3914      	subs	r1, #20
    9414:	4429      	add	r1, r5
    9416:	8a0a      	ldrh	r2, [r1, #16]
    9418:	e009      	b.n	942e <gatt_register+0x3a>
	last = SYS_SLIST_PEEK_TAIL_CONTAINER(&db, last, node);
    941a:	2200      	movs	r2, #0
    941c:	e7f4      	b.n	9408 <gatt_register+0x14>
		handle = 0;
    941e:	2200      	movs	r2, #0
    9420:	e005      	b.n	942e <gatt_register+0x3a>
	/* Populate the handles and append them to the list */
	for (; attrs && count; attrs++, count--) {
		if (!attrs->handle) {
			/* Allocate handle if not set already */
			attrs->handle = ++handle;
		} else if (attrs->handle > handle) {
    9422:	428a      	cmp	r2, r1
    9424:	d21e      	bcs.n	9464 <gatt_register+0x70>
			/* Use existing handle if valid */
			handle = attrs->handle;
    9426:	460a      	mov	r2, r1
	for (; attrs && count; attrs++, count--) {
    9428:	3414      	adds	r4, #20
    942a:	3b01      	subs	r3, #1
    942c:	b29b      	uxth	r3, r3
    942e:	b13c      	cbz	r4, 9440 <gatt_register+0x4c>
    9430:	b133      	cbz	r3, 9440 <gatt_register+0x4c>
		if (!attrs->handle) {
    9432:	8a21      	ldrh	r1, [r4, #16]
    9434:	2900      	cmp	r1, #0
    9436:	d1f4      	bne.n	9422 <gatt_register+0x2e>
			attrs->handle = ++handle;
    9438:	3201      	adds	r2, #1
    943a:	b292      	uxth	r2, r2
    943c:	8222      	strh	r2, [r4, #16]
    943e:	e7f3      	b.n	9428 <gatt_register+0x34>
		BT_DBG("attr %p handle 0x%04x uuid %s perm 0x%02x",
		       attrs, attrs->handle, bt_uuid_str(attrs->uuid),
		       attrs->perm);
	}

	sys_slist_append(&db, &svc->node);
    9440:	f100 0308 	add.w	r3, r0, #8
	node->next = NULL;
    9444:	2200      	movs	r2, #0
    9446:	6082      	str	r2, [r0, #8]
	if (!list->tail) {
    9448:	4a08      	ldr	r2, [pc, #32]	; (946c <gatt_register+0x78>)
    944a:	6852      	ldr	r2, [r2, #4]
    944c:	b12a      	cbz	r2, 945a <gatt_register+0x66>
		list->tail->next = node;
    944e:	6013      	str	r3, [r2, #0]
		list->tail = node;
    9450:	4a06      	ldr	r2, [pc, #24]	; (946c <gatt_register+0x78>)
    9452:	6053      	str	r3, [r2, #4]

	return 0;
    9454:	2000      	movs	r0, #0
}
    9456:	bc30      	pop	{r4, r5}
    9458:	4770      	bx	lr
		list->tail = node;
    945a:	4a04      	ldr	r2, [pc, #16]	; (946c <gatt_register+0x78>)
    945c:	6053      	str	r3, [r2, #4]
		list->head = node;
    945e:	6013      	str	r3, [r2, #0]
	return 0;
    9460:	2000      	movs	r0, #0
    9462:	e7f8      	b.n	9456 <gatt_register+0x62>
			return -EINVAL;
    9464:	f06f 0015 	mvn.w	r0, #21
    9468:	e7f5      	b.n	9456 <gatt_register+0x62>
    946a:	bf00      	nop
    946c:	200006d0 	.word	0x200006d0

00009470 <update_range>:
	k_delayed_work_init(&gatt_sc.work, sc_process);
}

static bool update_range(u16_t *start, u16_t *end, u16_t new_start,
			 u16_t new_end)
{
    9470:	b430      	push	{r4, r5}
	BT_DBG("start 0x%04x end 0x%04x new_start 0x%04x new_end 0x%04x",
	       *start, *end, new_start, new_end);

	/* Check if inside existing range */
	if (new_start >= *start && new_end <= *end) {
    9472:	8804      	ldrh	r4, [r0, #0]
    9474:	4294      	cmp	r4, r2
    9476:	d802      	bhi.n	947e <update_range+0xe>
    9478:	880d      	ldrh	r5, [r1, #0]
    947a:	429d      	cmp	r5, r3
    947c:	d209      	bcs.n	9492 <update_range+0x22>
		return false;
	}

	/* Update range */
	if (*start > new_start) {
    947e:	4294      	cmp	r4, r2
    9480:	d900      	bls.n	9484 <update_range+0x14>
		*start = new_start;
    9482:	8002      	strh	r2, [r0, #0]
	}

	if (*end < new_end) {
    9484:	880a      	ldrh	r2, [r1, #0]
    9486:	4293      	cmp	r3, r2
    9488:	d905      	bls.n	9496 <update_range+0x26>
		*end = new_end;
    948a:	800b      	strh	r3, [r1, #0]
	}

	return true;
    948c:	2001      	movs	r0, #1
}
    948e:	bc30      	pop	{r4, r5}
    9490:	4770      	bx	lr
		return false;
    9492:	2000      	movs	r0, #0
    9494:	e7fb      	b.n	948e <update_range+0x1e>
	return true;
    9496:	2001      	movs	r0, #1
    9498:	e7f9      	b.n	948e <update_range+0x1e>

0000949a <find_next>:

static u8_t find_next(const struct bt_gatt_attr *attr, void *user_data)
{
	struct bt_gatt_attr **next = user_data;

	*next = (struct bt_gatt_attr *)attr;
    949a:	6008      	str	r0, [r1, #0]

	return BT_GATT_ITER_STOP;
}
    949c:	2000      	movs	r0, #0
    949e:	4770      	bx	lr

000094a0 <gatt_ccc_changed>:
				 sizeof(value));
}

static void gatt_ccc_changed(const struct bt_gatt_attr *attr,
			     struct _bt_gatt_ccc *ccc)
{
    94a0:	b510      	push	{r4, lr}
	int i;
	u16_t value = 0x0000;
    94a2:	2400      	movs	r4, #0

	for (i = 0; i < ccc->cfg_len; i++) {
    94a4:	4623      	mov	r3, r4
    94a6:	e000      	b.n	94aa <gatt_ccc_changed+0xa>
    94a8:	3301      	adds	r3, #1
    94aa:	684a      	ldr	r2, [r1, #4]
    94ac:	429a      	cmp	r2, r3
    94ae:	d907      	bls.n	94c0 <gatt_ccc_changed+0x20>
		if (ccc->cfg[i].value > value) {
    94b0:	680a      	ldr	r2, [r1, #0]
    94b2:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    94b6:	8912      	ldrh	r2, [r2, #8]
    94b8:	4294      	cmp	r4, r2
    94ba:	d2f5      	bcs.n	94a8 <gatt_ccc_changed+0x8>
			value = ccc->cfg[i].value;
    94bc:	4614      	mov	r4, r2
    94be:	e7f3      	b.n	94a8 <gatt_ccc_changed+0x8>
		}
	}

	BT_DBG("ccc %p value 0x%04x", ccc, value);

	if (value != ccc->value) {
    94c0:	890b      	ldrh	r3, [r1, #8]
    94c2:	429c      	cmp	r4, r3
    94c4:	d003      	beq.n	94ce <gatt_ccc_changed+0x2e>
		ccc->value = value;
    94c6:	810c      	strh	r4, [r1, #8]
		ccc->cfg_changed(attr, value);
    94c8:	68cb      	ldr	r3, [r1, #12]
    94ca:	4621      	mov	r1, r4
    94cc:	4798      	blx	r3
    94ce:	bd10      	pop	{r4, pc}

000094d0 <gatt_indicate_rsp>:
	return 0;
}

static void gatt_indicate_rsp(struct bt_conn *conn, u8_t err,
			      const void *pdu, u16_t length, void *user_data)
{
    94d0:	b510      	push	{r4, lr}
    94d2:	9b02      	ldr	r3, [sp, #8]
	struct bt_gatt_indicate_params *params = user_data;

	params->func(conn, params->attr, err);
    94d4:	69dc      	ldr	r4, [r3, #28]
    94d6:	460a      	mov	r2, r1
    94d8:	6999      	ldr	r1, [r3, #24]
    94da:	47a0      	blx	r4
    94dc:	bd10      	pop	{r4, pc}
	...

000094e0 <sc_indicate_rsp>:
{
    94e0:	b508      	push	{r3, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    94e2:	4b0f      	ldr	r3, [pc, #60]	; (9520 <sc_indicate_rsp+0x40>)
    94e4:	f103 0254 	add.w	r2, r3, #84	; 0x54
    94e8:	f3bf 8f5b 	dmb	ish
    94ec:	e852 1f00 	ldrex	r1, [r2]
    94f0:	f021 0102 	bic.w	r1, r1, #2
    94f4:	e842 1000 	strex	r0, r1, [r2]
    94f8:	2800      	cmp	r0, #0
    94fa:	d1f7      	bne.n	94ec <sc_indicate_rsp+0xc>
    94fc:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    9500:	f3bf 8f5b 	dmb	ish
    9504:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    9506:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    950a:	f013 0f01 	tst.w	r3, #1
    950e:	d100      	bne.n	9512 <sc_indicate_rsp+0x32>
    9510:	bd08      	pop	{r3, pc}
    9512:	2200      	movs	r2, #0
    9514:	4903      	ldr	r1, [pc, #12]	; (9524 <sc_indicate_rsp+0x44>)
    9516:	4804      	ldr	r0, [pc, #16]	; (9528 <sc_indicate_rsp+0x48>)
    9518:	f01f ff88 	bl	2942c <k_delayed_work_submit_to_queue>
}
    951c:	e7f8      	b.n	9510 <sc_indicate_rsp+0x30>
    951e:	bf00      	nop
    9520:	200006d8 	.word	0x200006d8
    9524:	20000704 	.word	0x20000704
    9528:	20002b08 	.word	0x20002b08

0000952c <sc_indicate>:
{
    952c:	b510      	push	{r4, lr}
    952e:	4604      	mov	r4, r0
	if (!atomic_test_and_set_bit(sc->flags, SC_RANGE_CHANGED)) {
    9530:	3054      	adds	r0, #84	; 0x54
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    9532:	f3bf 8f5b 	dmb	ish
    9536:	e850 3f00 	ldrex	r3, [r0]
    953a:	f043 0e01 	orr.w	lr, r3, #1
    953e:	e840 ec00 	strex	ip, lr, [r0]
    9542:	f1bc 0f00 	cmp.w	ip, #0
    9546:	d1f6      	bne.n	9536 <sc_indicate+0xa>
    9548:	f3bf 8f5b 	dmb	ish
    954c:	f013 0f01 	tst.w	r3, #1
    9550:	d10a      	bne.n	9568 <sc_indicate+0x3c>
		sc->start = start;
    9552:	8521      	strh	r1, [r4, #40]	; 0x28
		sc->end = end;
    9554:	8562      	strh	r2, [r4, #42]	; 0x2a
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    9556:	f3bf 8f5b 	dmb	ish
    955a:	6d63      	ldr	r3, [r4, #84]	; 0x54
    955c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(sc->flags, SC_INDICATE_PENDING)) {
    9560:	f013 0f02 	tst.w	r3, #2
    9564:	d00b      	beq.n	957e <sc_indicate+0x52>
    9566:	bd10      	pop	{r4, pc}
	if (!update_range(&sc->start, &sc->end, start, end)) {
    9568:	4613      	mov	r3, r2
    956a:	460a      	mov	r2, r1
    956c:	f104 012a 	add.w	r1, r4, #42	; 0x2a
    9570:	f104 0028 	add.w	r0, r4, #40	; 0x28
    9574:	f7ff ff7c 	bl	9470 <update_range>
    9578:	2800      	cmp	r0, #0
    957a:	d1ec      	bne.n	9556 <sc_indicate+0x2a>
    957c:	e7f3      	b.n	9566 <sc_indicate+0x3a>
    957e:	220a      	movs	r2, #10
    9580:	f104 012c 	add.w	r1, r4, #44	; 0x2c
    9584:	4801      	ldr	r0, [pc, #4]	; (958c <sc_indicate+0x60>)
    9586:	f01f ff51 	bl	2942c <k_delayed_work_submit_to_queue>
    958a:	e7ec      	b.n	9566 <sc_indicate+0x3a>
    958c:	20002b08 	.word	0x20002b08

00009590 <sc_save>:
	u16_t end;
};

static void sc_save(struct bt_gatt_ccc_cfg *cfg,
		    struct bt_gatt_indicate_params *params)
{
    9590:	b510      	push	{r4, lr}
    9592:	b082      	sub	sp, #8
    9594:	4604      	mov	r4, r0
	struct sc_data data;
	struct sc_data *stored;

	memcpy(&data, params->data, params->len);
    9596:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    9598:	6a09      	ldr	r1, [r1, #32]
    959a:	a801      	add	r0, sp, #4
    959c:	f7f6 fe90 	bl	2c0 <memcpy>

	data.start = sys_le16_to_cpu(data.start);
    95a0:	f8bd 2004 	ldrh.w	r2, [sp, #4]
	data.end = sys_le16_to_cpu(data.end);
    95a4:	f8bd 3006 	ldrh.w	r3, [sp, #6]

	/* Load data stored */
	stored = (struct sc_data *)cfg->data;

	/* Check if there is any change stored */
	if (!stored->start && !stored->end) {
    95a8:	89a1      	ldrh	r1, [r4, #12]
    95aa:	b909      	cbnz	r1, 95b0 <sc_save+0x20>
    95ac:	89e1      	ldrh	r1, [r4, #14]
    95ae:	b139      	cbz	r1, 95c0 <sc_save+0x30>
		*stored = data;
		goto done;
	}

	update_range(&stored->start, &stored->end,
    95b0:	f104 010e 	add.w	r1, r4, #14
    95b4:	f104 000c 	add.w	r0, r4, #12
    95b8:	f7ff ff5a 	bl	9470 <update_range>
		     data.start, data.end);

done:
	BT_DBG("peer %s start 0x%04x end 0x%04x", bt_addr_le_str(&cfg->peer),
	       stored->start, stored->end);
}
    95bc:	b002      	add	sp, #8
    95be:	bd10      	pop	{r4, pc}
		*stored = data;
    95c0:	9801      	ldr	r0, [sp, #4]
    95c2:	60e0      	str	r0, [r4, #12]
		goto done;
    95c4:	e7fa      	b.n	95bc <sc_save+0x2c>

000095c6 <bt_gatt_attr_write_ccc>:
{
    95c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    95ca:	f8bd 4020 	ldrh.w	r4, [sp, #32]
	struct _bt_gatt_ccc *ccc = attr->user_data;
    95ce:	68cd      	ldr	r5, [r1, #12]
	if (offset > sizeof(u16_t)) {
    95d0:	2c02      	cmp	r4, #2
    95d2:	d84f      	bhi.n	9674 <bt_gatt_attr_write_ccc+0xae>
	if (offset + len > sizeof(u16_t)) {
    95d4:	4698      	mov	r8, r3
    95d6:	441c      	add	r4, r3
    95d8:	2c02      	cmp	r4, #2
    95da:	d84e      	bhi.n	967a <bt_gatt_attr_write_ccc+0xb4>
    95dc:	460f      	mov	r7, r1
    95de:	4681      	mov	r9, r0
	return ((u16_t)src[1] << 8) | src[0];
    95e0:	7853      	ldrb	r3, [r2, #1]
    95e2:	7816      	ldrb	r6, [r2, #0]
    95e4:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
	for (i = 0; i < ccc->cfg_len; i++) {
    95e8:	2400      	movs	r4, #0
    95ea:	686b      	ldr	r3, [r5, #4]
    95ec:	429c      	cmp	r4, r3
    95ee:	d209      	bcs.n	9604 <bt_gatt_attr_write_ccc+0x3e>
		if (!bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    95f0:	6829      	ldr	r1, [r5, #0]
    95f2:	eb01 1104 	add.w	r1, r1, r4, lsl #4
    95f6:	3101      	adds	r1, #1
    95f8:	4648      	mov	r0, r9
    95fa:	f7fc fffd 	bl	65f8 <bt_conn_addr_le_cmp>
    95fe:	b108      	cbz	r0, 9604 <bt_gatt_attr_write_ccc+0x3e>
	for (i = 0; i < ccc->cfg_len; i++) {
    9600:	3401      	adds	r4, #1
    9602:	e7f2      	b.n	95ea <bt_gatt_attr_write_ccc+0x24>
	if (i == ccc->cfg_len) {
    9604:	686b      	ldr	r3, [r5, #4]
    9606:	429c      	cmp	r4, r3
    9608:	d026      	beq.n	9658 <bt_gatt_attr_write_ccc+0x92>
	} else if (!value) {
    960a:	b91e      	cbnz	r6, 9614 <bt_gatt_attr_write_ccc+0x4e>
		ccc->cfg[i].valid = false;
    960c:	682a      	ldr	r2, [r5, #0]
    960e:	0123      	lsls	r3, r4, #4
    9610:	2100      	movs	r1, #0
    9612:	54d1      	strb	r1, [r2, r3]
	ccc->cfg[i].value = value;
    9614:	682b      	ldr	r3, [r5, #0]
    9616:	0124      	lsls	r4, r4, #4
    9618:	4423      	add	r3, r4
    961a:	811e      	strh	r6, [r3, #8]
	if (ccc->cfg[i].value != ccc->value) {
    961c:	682b      	ldr	r3, [r5, #0]
    961e:	441c      	add	r4, r3
    9620:	8922      	ldrh	r2, [r4, #8]
    9622:	892b      	ldrh	r3, [r5, #8]
    9624:	429a      	cmp	r2, r3
    9626:	d003      	beq.n	9630 <bt_gatt_attr_write_ccc+0x6a>
		gatt_ccc_changed(attr, ccc);
    9628:	4629      	mov	r1, r5
    962a:	4638      	mov	r0, r7
    962c:	f7ff ff38 	bl	94a0 <gatt_ccc_changed>
}
    9630:	4640      	mov	r0, r8
    9632:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	memcpy(dst, src, sizeof(*dst));
    9636:	2207      	movs	r2, #7
    9638:	f109 0148 	add.w	r1, r9, #72	; 0x48
    963c:	3001      	adds	r0, #1
    963e:	f7f6 fe3f 	bl	2c0 <memcpy>
			if (value) {
    9642:	b11e      	cbz	r6, 964c <bt_gatt_attr_write_ccc+0x86>
				ccc->cfg[i].valid = true;
    9644:	682b      	ldr	r3, [r5, #0]
    9646:	2201      	movs	r2, #1
    9648:	f803 200a 	strb.w	r2, [r3, sl]
		if (i == ccc->cfg_len) {
    964c:	686b      	ldr	r3, [r5, #4]
    964e:	429c      	cmp	r4, r3
    9650:	d1e0      	bne.n	9614 <bt_gatt_attr_write_ccc+0x4e>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
    9652:	f06f 0810 	mvn.w	r8, #16
    9656:	e7eb      	b.n	9630 <bt_gatt_attr_write_ccc+0x6a>
    9658:	2400      	movs	r4, #0
		for (i = 0; i < ccc->cfg_len; i++) {
    965a:	429c      	cmp	r4, r3
    965c:	d2f6      	bcs.n	964c <bt_gatt_attr_write_ccc+0x86>
			if (ccc->cfg[i].valid) {
    965e:	682a      	ldr	r2, [r5, #0]
    9660:	ea4f 1a04 	mov.w	sl, r4, lsl #4
    9664:	eb02 000a 	add.w	r0, r2, sl
    9668:	f812 200a 	ldrb.w	r2, [r2, sl]
    966c:	2a00      	cmp	r2, #0
    966e:	d0e2      	beq.n	9636 <bt_gatt_attr_write_ccc+0x70>
		for (i = 0; i < ccc->cfg_len; i++) {
    9670:	3401      	adds	r4, #1
    9672:	e7f2      	b.n	965a <bt_gatt_attr_write_ccc+0x94>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    9674:	f06f 0806 	mvn.w	r8, #6
    9678:	e7da      	b.n	9630 <bt_gatt_attr_write_ccc+0x6a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    967a:	f06f 080c 	mvn.w	r8, #12
    967e:	e7d7      	b.n	9630 <bt_gatt_attr_write_ccc+0x6a>

00009680 <gatt_send>:
{
    9680:	b538      	push	{r3, r4, r5, lr}
    9682:	460d      	mov	r5, r1
	if (params) {
    9684:	b153      	cbz	r3, 969c <gatt_send+0x1c>
    9686:	4619      	mov	r1, r3
		req->buf = buf;
    9688:	611d      	str	r5, [r3, #16]
		req->func = func;
    968a:	605a      	str	r2, [r3, #4]
		req->destroy = destroy;
    968c:	9b04      	ldr	r3, [sp, #16]
    968e:	608b      	str	r3, [r1, #8]
		err = bt_att_req_send(conn, req);
    9690:	f7ff fe88 	bl	93a4 <bt_att_req_send>
    9694:	4604      	mov	r4, r0
	if (err) {
    9696:	b92c      	cbnz	r4, 96a4 <gatt_send+0x24>
}
    9698:	4620      	mov	r0, r4
    969a:	bd38      	pop	{r3, r4, r5, pc}
		err = bt_att_send(conn, buf);
    969c:	f7ff fe32 	bl	9304 <bt_att_send>
    96a0:	4604      	mov	r4, r0
    96a2:	e7f8      	b.n	9696 <gatt_send+0x16>
		net_buf_unref(buf);
    96a4:	4628      	mov	r0, r5
    96a6:	f010 fd2d 	bl	1a104 <net_buf_unref>
	return err;
    96aa:	e7f5      	b.n	9698 <gatt_send+0x18>

000096ac <gatt_indicate>:
{
    96ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    96b0:	b082      	sub	sp, #8
    96b2:	4680      	mov	r8, r0
    96b4:	460c      	mov	r4, r1
				sizeof(*ind) + params->len);
    96b6:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
    96b8:	3202      	adds	r2, #2
    96ba:	211d      	movs	r1, #29
    96bc:	f7ff f9f6 	bl	8aac <bt_att_create_pdu>
	if (!buf) {
    96c0:	b1f8      	cbz	r0, 9702 <gatt_indicate+0x56>
    96c2:	4606      	mov	r6, r0
	ind = net_buf_add(buf, sizeof(*ind));
    96c4:	f100 0708 	add.w	r7, r0, #8
    96c8:	2102      	movs	r1, #2
    96ca:	4638      	mov	r0, r7
    96cc:	f010 fd66 	bl	1a19c <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(params->attr->handle);
    96d0:	69a3      	ldr	r3, [r4, #24]
    96d2:	8a1b      	ldrh	r3, [r3, #16]
    96d4:	4605      	mov	r5, r0
    96d6:	f825 3b02 	strh.w	r3, [r5], #2
	net_buf_add(buf, params->len);
    96da:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
    96dc:	4638      	mov	r0, r7
    96de:	f010 fd5d 	bl	1a19c <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
    96e2:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
    96e4:	6a21      	ldr	r1, [r4, #32]
    96e6:	4628      	mov	r0, r5
    96e8:	f7f6 fdea 	bl	2c0 <memcpy>
	return gatt_send(conn, buf, gatt_indicate_rsp, params, NULL);
    96ec:	2300      	movs	r3, #0
    96ee:	9300      	str	r3, [sp, #0]
    96f0:	4623      	mov	r3, r4
    96f2:	4a05      	ldr	r2, [pc, #20]	; (9708 <gatt_indicate+0x5c>)
    96f4:	4631      	mov	r1, r6
    96f6:	4640      	mov	r0, r8
    96f8:	f7ff ffc2 	bl	9680 <gatt_send>
}
    96fc:	b002      	add	sp, #8
    96fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOMEM;
    9702:	f06f 000b 	mvn.w	r0, #11
    9706:	e7f9      	b.n	96fc <gatt_indicate+0x50>
    9708:	000094d1 	.word	0x000094d1

0000970c <gatt_notify>:
{
    970c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9710:	4680      	mov	r8, r0
    9712:	468a      	mov	sl, r1
    9714:	4691      	mov	r9, r2
    9716:	461c      	mov	r4, r3
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY, sizeof(*nfy) + len);
    9718:	1c9a      	adds	r2, r3, #2
    971a:	211b      	movs	r1, #27
    971c:	f7ff f9c6 	bl	8aac <bt_att_create_pdu>
	if (!buf) {
    9720:	b1d8      	cbz	r0, 975a <gatt_notify+0x4e>
    9722:	4606      	mov	r6, r0
	nfy = net_buf_add(buf, sizeof(*nfy));
    9724:	f100 0708 	add.w	r7, r0, #8
    9728:	2102      	movs	r1, #2
    972a:	4638      	mov	r0, r7
    972c:	f010 fd36 	bl	1a19c <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
    9730:	4605      	mov	r5, r0
    9732:	f825 ab02 	strh.w	sl, [r5], #2
	net_buf_add(buf, len);
    9736:	4621      	mov	r1, r4
    9738:	4638      	mov	r0, r7
    973a:	f010 fd2f 	bl	1a19c <net_buf_simple_add>
	memcpy(nfy->value, data, len);
    973e:	4622      	mov	r2, r4
    9740:	4649      	mov	r1, r9
    9742:	4628      	mov	r0, r5
    9744:	f7f6 fdbc 	bl	2c0 <memcpy>
    9748:	2300      	movs	r3, #0
    974a:	4632      	mov	r2, r6
    974c:	2104      	movs	r1, #4
    974e:	4640      	mov	r0, r8
    9750:	f7fd febd 	bl	74ce <bt_l2cap_send_cb>
	return 0;
    9754:	2000      	movs	r0, #0
    9756:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -ENOMEM;
    975a:	f06f 000b 	mvn.w	r0, #11
}
    975e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

00009764 <notify_cb>:

static u8_t notify_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    9764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9768:	b082      	sub	sp, #8
    976a:	4604      	mov	r4, r0
    976c:	460f      	mov	r7, r1
	struct notify_data *data = user_data;
	struct _bt_gatt_ccc *ccc;
	size_t i;

	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC)) {
    976e:	2300      	movs	r3, #0
    9770:	f88d 3000 	strb.w	r3, [sp]
    9774:	f642 1302 	movw	r3, #10498	; 0x2902
    9778:	f8ad 3002 	strh.w	r3, [sp, #2]
    977c:	4669      	mov	r1, sp
    977e:	6800      	ldr	r0, [r0, #0]
    9780:	f7fa f991 	bl	3aa6 <bt_uuid_cmp>
    9784:	b938      	cbnz	r0, 9796 <notify_cb+0x32>
		}
		return BT_GATT_ITER_CONTINUE;
	}

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
    9786:	68a2      	ldr	r2, [r4, #8]
    9788:	4b29      	ldr	r3, [pc, #164]	; (9830 <notify_cb+0xcc>)
    978a:	429a      	cmp	r2, r3
    978c:	d012      	beq.n	97b4 <notify_cb+0x50>
		return BT_GATT_ITER_CONTINUE;
    978e:	2001      	movs	r0, #1

		data->err = 0;
	}

	return BT_GATT_ITER_CONTINUE;
}
    9790:	b002      	add	sp, #8
    9792:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
    9796:	6820      	ldr	r0, [r4, #0]
    9798:	2300      	movs	r3, #0
    979a:	f88d 3004 	strb.w	r3, [sp, #4]
    979e:	f642 0303 	movw	r3, #10243	; 0x2803
    97a2:	f8ad 3006 	strh.w	r3, [sp, #6]
    97a6:	a901      	add	r1, sp, #4
    97a8:	f7fa f97d 	bl	3aa6 <bt_uuid_cmp>
    97ac:	2800      	cmp	r0, #0
    97ae:	d0ef      	beq.n	9790 <notify_cb+0x2c>
		return BT_GATT_ITER_CONTINUE;
    97b0:	2001      	movs	r0, #1
    97b2:	e7ed      	b.n	9790 <notify_cb+0x2c>
	ccc = attr->user_data;
    97b4:	68e5      	ldr	r5, [r4, #12]
	for (i = 0; i < ccc->cfg_len; i++) {
    97b6:	2400      	movs	r4, #0
    97b8:	e01a      	b.n	97f0 <notify_cb+0x8c>
			if (ccc->cfg == sc_ccc_cfg) {
    97ba:	6828      	ldr	r0, [r5, #0]
    97bc:	4b1d      	ldr	r3, [pc, #116]	; (9834 <notify_cb+0xd0>)
    97be:	4298      	cmp	r0, r3
    97c0:	d115      	bne.n	97ee <notify_cb+0x8a>
				sc_save(&ccc->cfg[i], data->params);
    97c2:	6979      	ldr	r1, [r7, #20]
    97c4:	4430      	add	r0, r6
    97c6:	f7ff fee3 	bl	9590 <sc_save>
			continue;
    97ca:	e010      	b.n	97ee <notify_cb+0x8a>
		if (data->type == BT_GATT_CCC_INDICATE) {
    97cc:	88bb      	ldrh	r3, [r7, #4]
    97ce:	2b02      	cmp	r3, #2
    97d0:	d024      	beq.n	981c <notify_cb+0xb8>
			err = gatt_notify(conn, data->attr->handle, data->data,
    97d2:	68b9      	ldr	r1, [r7, #8]
    97d4:	8a3b      	ldrh	r3, [r7, #16]
    97d6:	68fa      	ldr	r2, [r7, #12]
    97d8:	8a09      	ldrh	r1, [r1, #16]
    97da:	f7ff ff97 	bl	970c <gatt_notify>
    97de:	4606      	mov	r6, r0
		bt_conn_unref(conn);
    97e0:	4640      	mov	r0, r8
    97e2:	f7fc ffb9 	bl	6758 <bt_conn_unref>
		if (err < 0) {
    97e6:	2e00      	cmp	r6, #0
    97e8:	db1f      	blt.n	982a <notify_cb+0xc6>
		data->err = 0;
    97ea:	2300      	movs	r3, #0
    97ec:	603b      	str	r3, [r7, #0]
	for (i = 0; i < ccc->cfg_len; i++) {
    97ee:	3401      	adds	r4, #1
    97f0:	686b      	ldr	r3, [r5, #4]
    97f2:	429c      	cmp	r4, r3
    97f4:	d217      	bcs.n	9826 <notify_cb+0xc2>
		if (ccc->cfg[i].value != data->type) {
    97f6:	6828      	ldr	r0, [r5, #0]
    97f8:	0126      	lsls	r6, r4, #4
    97fa:	4430      	add	r0, r6
    97fc:	8902      	ldrh	r2, [r0, #8]
    97fe:	88bb      	ldrh	r3, [r7, #4]
    9800:	429a      	cmp	r2, r3
    9802:	d1f4      	bne.n	97ee <notify_cb+0x8a>
		conn = bt_conn_lookup_addr_le(&ccc->cfg[i].peer);
    9804:	3001      	adds	r0, #1
    9806:	f7fc ff4d 	bl	66a4 <bt_conn_lookup_addr_le>
		if (!conn) {
    980a:	4680      	mov	r8, r0
    980c:	2800      	cmp	r0, #0
    980e:	d0d4      	beq.n	97ba <notify_cb+0x56>
		if (conn->state != BT_CONN_CONNECTED) {
    9810:	7b03      	ldrb	r3, [r0, #12]
    9812:	2b03      	cmp	r3, #3
    9814:	d0da      	beq.n	97cc <notify_cb+0x68>
			bt_conn_unref(conn);
    9816:	f7fc ff9f 	bl	6758 <bt_conn_unref>
			continue;
    981a:	e7e8      	b.n	97ee <notify_cb+0x8a>
			err = gatt_indicate(conn, data->params);
    981c:	6979      	ldr	r1, [r7, #20]
    981e:	f7ff ff45 	bl	96ac <gatt_indicate>
    9822:	4606      	mov	r6, r0
    9824:	e7dc      	b.n	97e0 <notify_cb+0x7c>
	return BT_GATT_ITER_CONTINUE;
    9826:	2001      	movs	r0, #1
    9828:	e7b2      	b.n	9790 <notify_cb+0x2c>
			return BT_GATT_ITER_STOP;
    982a:	2000      	movs	r0, #0
    982c:	e7b0      	b.n	9790 <notify_cb+0x2c>
    982e:	bf00      	nop
    9830:	000095c7 	.word	0x000095c7
    9834:	20000730 	.word	0x20000730

00009838 <sc_restore>:

static void sc_restore(struct bt_gatt_ccc_cfg *cfg)
{
	struct sc_data *data = (struct sc_data *)cfg->data;

	if (!data->start && !data->end) {
    9838:	8981      	ldrh	r1, [r0, #12]
    983a:	b909      	cbnz	r1, 9840 <sc_restore+0x8>
    983c:	89c3      	ldrh	r3, [r0, #14]
    983e:	b163      	cbz	r3, 985a <sc_restore+0x22>
{
    9840:	b510      	push	{r4, lr}
    9842:	4604      	mov	r4, r0
	}

	BT_DBG("peer %s start 0x%04x end 0x%04x", bt_addr_le_str(&cfg->peer),
	       data->start, data->end);

	sc_indicate(&gatt_sc, data->start, data->end);
    9844:	89c2      	ldrh	r2, [r0, #14]
    9846:	4805      	ldr	r0, [pc, #20]	; (985c <sc_restore+0x24>)
    9848:	f7ff fe70 	bl	952c <sc_indicate>

	/* Reset config data */
	memset(cfg->data, 0, sizeof(cfg->data));
    984c:	2204      	movs	r2, #4
    984e:	2100      	movs	r1, #0
    9850:	f104 000c 	add.w	r0, r4, #12
    9854:	f021 f916 	bl	2aa84 <memset>
    9858:	bd10      	pop	{r4, pc}
    985a:	4770      	bx	lr
    985c:	200006d8 	.word	0x200006d8

00009860 <connected_cb>:
	struct bt_conn *conn = user_data;
	struct _bt_gatt_ccc *ccc;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
    9860:	6882      	ldr	r2, [r0, #8]
    9862:	4b16      	ldr	r3, [pc, #88]	; (98bc <connected_cb+0x5c>)
    9864:	429a      	cmp	r2, r3
    9866:	d001      	beq.n	986c <connected_cb+0xc>
			return BT_GATT_ITER_CONTINUE;
		}
	}

	return BT_GATT_ITER_CONTINUE;
}
    9868:	2001      	movs	r0, #1
    986a:	4770      	bx	lr
{
    986c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9870:	460f      	mov	r7, r1
    9872:	4680      	mov	r8, r0
	ccc = attr->user_data;
    9874:	68c5      	ldr	r5, [r0, #12]
	for (i = 0; i < ccc->cfg_len; i++) {
    9876:	2400      	movs	r4, #0
    9878:	e004      	b.n	9884 <connected_cb+0x24>
				sc_restore(&ccc->cfg[i]);
    987a:	4430      	add	r0, r6
    987c:	f7ff ffdc 	bl	9838 <sc_restore>
    9880:	e019      	b.n	98b6 <connected_cb+0x56>
	for (i = 0; i < ccc->cfg_len; i++) {
    9882:	3401      	adds	r4, #1
    9884:	686b      	ldr	r3, [r5, #4]
    9886:	429c      	cmp	r4, r3
    9888:	d215      	bcs.n	98b6 <connected_cb+0x56>
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    988a:	6829      	ldr	r1, [r5, #0]
    988c:	0126      	lsls	r6, r4, #4
    988e:	4431      	add	r1, r6
    9890:	3101      	adds	r1, #1
    9892:	4638      	mov	r0, r7
    9894:	f7fc feb0 	bl	65f8 <bt_conn_addr_le_cmp>
    9898:	2800      	cmp	r0, #0
    989a:	d1f2      	bne.n	9882 <connected_cb+0x22>
		if (ccc->cfg[i].value) {
    989c:	682b      	ldr	r3, [r5, #0]
    989e:	4433      	add	r3, r6
    98a0:	891b      	ldrh	r3, [r3, #8]
    98a2:	2b00      	cmp	r3, #0
    98a4:	d0ed      	beq.n	9882 <connected_cb+0x22>
			gatt_ccc_changed(attr, ccc);
    98a6:	4629      	mov	r1, r5
    98a8:	4640      	mov	r0, r8
    98aa:	f7ff fdf9 	bl	94a0 <gatt_ccc_changed>
			if (ccc->cfg == sc_ccc_cfg) {
    98ae:	6828      	ldr	r0, [r5, #0]
    98b0:	4b03      	ldr	r3, [pc, #12]	; (98c0 <connected_cb+0x60>)
    98b2:	4298      	cmp	r0, r3
    98b4:	d0e1      	beq.n	987a <connected_cb+0x1a>
}
    98b6:	2001      	movs	r0, #1
    98b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    98bc:	000095c7 	.word	0x000095c7
    98c0:	20000730 	.word	0x20000730

000098c4 <disconnected_cb>:

static u8_t disconnected_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    98c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = user_data;
	struct _bt_gatt_ccc *ccc;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
    98c8:	6882      	ldr	r2, [r0, #8]
    98ca:	4b29      	ldr	r3, [pc, #164]	; (9970 <disconnected_cb+0xac>)
    98cc:	429a      	cmp	r2, r3
    98ce:	d002      	beq.n	98d6 <disconnected_cb+0x12>
	}

	BT_DBG("ccc %p reseted", ccc);

	return BT_GATT_ITER_CONTINUE;
}
    98d0:	2001      	movs	r0, #1
    98d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ccc = attr->user_data;
    98d6:	68c5      	ldr	r5, [r0, #12]
	if (!ccc->value) {
    98d8:	892b      	ldrh	r3, [r5, #8]
    98da:	2b00      	cmp	r3, #0
    98dc:	d0f8      	beq.n	98d0 <disconnected_cb+0xc>
    98de:	4688      	mov	r8, r1
    98e0:	4607      	mov	r7, r0
    98e2:	2400      	movs	r4, #0
    98e4:	e012      	b.n	990c <disconnected_cb+0x48>
					bt_conn_unref(tmp);
    98e6:	f7fc ff37 	bl	6758 <bt_conn_unref>
					return BT_GATT_ITER_CONTINUE;
    98ea:	e7f1      	b.n	98d0 <disconnected_cb+0xc>
			if (!bt_addr_le_is_bonded(&conn->le.dst)) {
    98ec:	f108 0948 	add.w	r9, r8, #72	; 0x48
    98f0:	4648      	mov	r0, r9
    98f2:	f7fc f99f 	bl	5c34 <bt_addr_le_is_bonded>
    98f6:	bb28      	cbnz	r0, 9944 <disconnected_cb+0x80>
				ccc->cfg[i].valid = false;
    98f8:	682b      	ldr	r3, [r5, #0]
    98fa:	2100      	movs	r1, #0
    98fc:	5599      	strb	r1, [r3, r6]
				memset(&ccc->cfg[i].value, 0,
    98fe:	6828      	ldr	r0, [r5, #0]
    9900:	4430      	add	r0, r6
    9902:	2202      	movs	r2, #2
    9904:	3008      	adds	r0, #8
    9906:	f021 f8bd 	bl	2aa84 <memset>
	for (i = 0; i < ccc->cfg_len; i++) {
    990a:	3401      	adds	r4, #1
    990c:	686b      	ldr	r3, [r5, #4]
    990e:	429c      	cmp	r4, r3
    9910:	d220      	bcs.n	9954 <disconnected_cb+0x90>
		if (!ccc->cfg[i].value) {
    9912:	6829      	ldr	r1, [r5, #0]
    9914:	0126      	lsls	r6, r4, #4
    9916:	4431      	add	r1, r6
    9918:	890b      	ldrh	r3, [r1, #8]
    991a:	2b00      	cmp	r3, #0
    991c:	d0f5      	beq.n	990a <disconnected_cb+0x46>
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    991e:	3101      	adds	r1, #1
    9920:	4640      	mov	r0, r8
    9922:	f7fc fe69 	bl	65f8 <bt_conn_addr_le_cmp>
    9926:	2800      	cmp	r0, #0
    9928:	d0e0      	beq.n	98ec <disconnected_cb+0x28>
			tmp = bt_conn_lookup_addr_le(&ccc->cfg[i].peer);
    992a:	6828      	ldr	r0, [r5, #0]
    992c:	4430      	add	r0, r6
    992e:	3001      	adds	r0, #1
    9930:	f7fc feb8 	bl	66a4 <bt_conn_lookup_addr_le>
			if (tmp) {
    9934:	2800      	cmp	r0, #0
    9936:	d0e8      	beq.n	990a <disconnected_cb+0x46>
				if (tmp->state == BT_CONN_CONNECTED) {
    9938:	7b02      	ldrb	r2, [r0, #12]
    993a:	2a03      	cmp	r2, #3
    993c:	d0d3      	beq.n	98e6 <disconnected_cb+0x22>
				bt_conn_unref(tmp);
    993e:	f7fc ff0b 	bl	6758 <bt_conn_unref>
    9942:	e7e2      	b.n	990a <disconnected_cb+0x46>
				bt_addr_le_copy(&ccc->cfg[i].peer,
    9944:	6828      	ldr	r0, [r5, #0]
    9946:	4430      	add	r0, r6
    9948:	2207      	movs	r2, #7
    994a:	4649      	mov	r1, r9
    994c:	3001      	adds	r0, #1
    994e:	f7f6 fcb7 	bl	2c0 <memcpy>
    9952:	e7da      	b.n	990a <disconnected_cb+0x46>
	memset(&ccc->value, 0, sizeof(ccc->value));
    9954:	2202      	movs	r2, #2
    9956:	2100      	movs	r1, #0
    9958:	f105 0008 	add.w	r0, r5, #8
    995c:	f021 f892 	bl	2aa84 <memset>
	if (ccc->cfg_changed) {
    9960:	68eb      	ldr	r3, [r5, #12]
    9962:	2b00      	cmp	r3, #0
    9964:	d0b4      	beq.n	98d0 <disconnected_cb+0xc>
		ccc->cfg_changed(attr, ccc->value);
    9966:	8929      	ldrh	r1, [r5, #8]
    9968:	4638      	mov	r0, r7
    996a:	4798      	blx	r3
    996c:	e7b0      	b.n	98d0 <disconnected_cb+0xc>
    996e:	bf00      	nop
    9970:	000095c7 	.word	0x000095c7

00009974 <bt_gatt_init>:
{
    9974:	b508      	push	{r3, lr}
	gatt_register(&gap_svc);
    9976:	4805      	ldr	r0, [pc, #20]	; (998c <bt_gatt_init+0x18>)
    9978:	f7ff fd3c 	bl	93f4 <gatt_register>
	gatt_register(&gatt_svc);
    997c:	4804      	ldr	r0, [pc, #16]	; (9990 <bt_gatt_init+0x1c>)
    997e:	f7ff fd39 	bl	93f4 <gatt_register>
	k_delayed_work_init(&gatt_sc.work, sc_process);
    9982:	4904      	ldr	r1, [pc, #16]	; (9994 <bt_gatt_init+0x20>)
    9984:	4804      	ldr	r0, [pc, #16]	; (9998 <bt_gatt_init+0x24>)
    9986:	f01f fcd9 	bl	2933c <k_delayed_work_init>
    998a:	bd08      	pop	{r3, pc}
    998c:	2000ba64 	.word	0x2000ba64
    9990:	2000bac0 	.word	0x2000bac0
    9994:	00009c69 	.word	0x00009c69
    9998:	20000704 	.word	0x20000704

0000999c <bt_gatt_service_register>:
{
    999c:	b510      	push	{r4, lr}
    999e:	b082      	sub	sp, #8
    99a0:	4604      	mov	r4, r0
	if (!bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GAP) ||
    99a2:	6803      	ldr	r3, [r0, #0]
    99a4:	6818      	ldr	r0, [r3, #0]
    99a6:	2300      	movs	r3, #0
    99a8:	f88d 3000 	strb.w	r3, [sp]
    99ac:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
    99b0:	f8ad 3002 	strh.w	r3, [sp, #2]
    99b4:	4669      	mov	r1, sp
    99b6:	f7fa f876 	bl	3aa6 <bt_uuid_cmp>
    99ba:	b300      	cbz	r0, 99fe <bt_gatt_service_register+0x62>
	    !bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GATT)) {
    99bc:	6823      	ldr	r3, [r4, #0]
    99be:	6818      	ldr	r0, [r3, #0]
    99c0:	2300      	movs	r3, #0
    99c2:	f88d 3004 	strb.w	r3, [sp, #4]
    99c6:	f641 0301 	movw	r3, #6145	; 0x1801
    99ca:	f8ad 3006 	strh.w	r3, [sp, #6]
    99ce:	a901      	add	r1, sp, #4
    99d0:	f7fa f869 	bl	3aa6 <bt_uuid_cmp>
	if (!bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GAP) ||
    99d4:	b1b0      	cbz	r0, 9a04 <bt_gatt_service_register+0x68>
	err = gatt_register(svc);
    99d6:	4620      	mov	r0, r4
    99d8:	f7ff fd0c 	bl	93f4 <gatt_register>
	if (err < 0) {
    99dc:	2800      	cmp	r0, #0
    99de:	db0c      	blt.n	99fa <bt_gatt_service_register+0x5e>
	sc_indicate(&gatt_sc, svc->attrs[0].handle,
    99e0:	6821      	ldr	r1, [r4, #0]
		    svc->attrs[svc->attr_count - 1].handle);
    99e2:	88a2      	ldrh	r2, [r4, #4]
    99e4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    99e8:	0093      	lsls	r3, r2, #2
    99ea:	3b14      	subs	r3, #20
    99ec:	440b      	add	r3, r1
	sc_indicate(&gatt_sc, svc->attrs[0].handle,
    99ee:	8a1a      	ldrh	r2, [r3, #16]
    99f0:	8a09      	ldrh	r1, [r1, #16]
    99f2:	4806      	ldr	r0, [pc, #24]	; (9a0c <bt_gatt_service_register+0x70>)
    99f4:	f7ff fd9a 	bl	952c <sc_indicate>
	return 0;
    99f8:	2000      	movs	r0, #0
}
    99fa:	b002      	add	sp, #8
    99fc:	bd10      	pop	{r4, pc}
		return -EALREADY;
    99fe:	f06f 0077 	mvn.w	r0, #119	; 0x77
    9a02:	e7fa      	b.n	99fa <bt_gatt_service_register+0x5e>
    9a04:	f06f 0077 	mvn.w	r0, #119	; 0x77
    9a08:	e7f7      	b.n	99fa <bt_gatt_service_register+0x5e>
    9a0a:	bf00      	nop
    9a0c:	200006d8 	.word	0x200006d8

00009a10 <bt_gatt_attr_read>:
{
    9a10:	b510      	push	{r4, lr}
    9a12:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    9a16:	f8bd 4010 	ldrh.w	r4, [sp, #16]
	if (offset > value_len) {
    9a1a:	42a1      	cmp	r1, r4
    9a1c:	d80c      	bhi.n	9a38 <bt_gatt_attr_read+0x28>
    9a1e:	4610      	mov	r0, r2
	len = min(buf_len, value_len - offset);
    9a20:	1a64      	subs	r4, r4, r1
    9a22:	42a3      	cmp	r3, r4
    9a24:	bfa8      	it	ge
    9a26:	4623      	movge	r3, r4
    9a28:	b29c      	uxth	r4, r3
	memcpy(buf, value + offset, len);
    9a2a:	4622      	mov	r2, r4
    9a2c:	9b03      	ldr	r3, [sp, #12]
    9a2e:	4419      	add	r1, r3
    9a30:	f7f6 fc46 	bl	2c0 <memcpy>
}
    9a34:	4620      	mov	r0, r4
    9a36:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    9a38:	f06f 0406 	mvn.w	r4, #6
    9a3c:	e7fa      	b.n	9a34 <bt_gatt_attr_read+0x24>

00009a3e <read_appearance>:
{
    9a3e:	b530      	push	{r4, r5, lr}
    9a40:	b087      	sub	sp, #28
	u16_t appearance = sys_cpu_to_le16(gap_appearance);
    9a42:	ac06      	add	r4, sp, #24
    9a44:	2500      	movs	r5, #0
    9a46:	f824 5d02 	strh.w	r5, [r4, #-2]!
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
    9a4a:	2502      	movs	r5, #2
    9a4c:	9502      	str	r5, [sp, #8]
    9a4e:	9401      	str	r4, [sp, #4]
    9a50:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
    9a54:	9400      	str	r4, [sp, #0]
    9a56:	f7ff ffdb 	bl	9a10 <bt_gatt_attr_read>
}
    9a5a:	b007      	add	sp, #28
    9a5c:	bd30      	pop	{r4, r5, pc}
	...

00009a60 <read_name>:
{
    9a60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9a64:	b084      	sub	sp, #16
    9a66:	4605      	mov	r5, r0
    9a68:	460e      	mov	r6, r1
    9a6a:	4617      	mov	r7, r2
    9a6c:	4698      	mov	r8, r3
				 strlen(gap_name));
    9a6e:	4c09      	ldr	r4, [pc, #36]	; (9a94 <read_name+0x34>)
    9a70:	4620      	mov	r0, r4
    9a72:	f7f6 fe45 	bl	700 <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, gap_name,
    9a76:	b280      	uxth	r0, r0
    9a78:	9002      	str	r0, [sp, #8]
    9a7a:	9401      	str	r4, [sp, #4]
    9a7c:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    9a80:	9300      	str	r3, [sp, #0]
    9a82:	4643      	mov	r3, r8
    9a84:	463a      	mov	r2, r7
    9a86:	4631      	mov	r1, r6
    9a88:	4628      	mov	r0, r5
    9a8a:	f7ff ffc1 	bl	9a10 <bt_gatt_attr_read>
}
    9a8e:	b004      	add	sp, #16
    9a90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9a94:	0002f5c4 	.word	0x0002f5c4

00009a98 <bt_gatt_attr_read_service>:
{
    9a98:	b570      	push	{r4, r5, r6, lr}
    9a9a:	b086      	sub	sp, #24
    9a9c:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
	struct bt_uuid *uuid = attr->user_data;
    9aa0:	68cc      	ldr	r4, [r1, #12]
	if (uuid->type == BT_UUID_TYPE_16) {
    9aa2:	7826      	ldrb	r6, [r4, #0]
    9aa4:	b146      	cbz	r6, 9ab8 <bt_gatt_attr_read_service+0x20>
				 BT_UUID_128(uuid)->val, 16);
    9aa6:	3401      	adds	r4, #1
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
    9aa8:	2610      	movs	r6, #16
    9aaa:	9602      	str	r6, [sp, #8]
    9aac:	9401      	str	r4, [sp, #4]
    9aae:	9500      	str	r5, [sp, #0]
    9ab0:	f7ff ffae 	bl	9a10 <bt_gatt_attr_read>
}
    9ab4:	b006      	add	sp, #24
    9ab6:	bd70      	pop	{r4, r5, r6, pc}
		u16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
    9ab8:	8866      	ldrh	r6, [r4, #2]
    9aba:	ac06      	add	r4, sp, #24
    9abc:	f824 6d02 	strh.w	r6, [r4, #-2]!
		return bt_gatt_attr_read(conn, attr, buf, len, offset,
    9ac0:	2602      	movs	r6, #2
    9ac2:	9602      	str	r6, [sp, #8]
    9ac4:	9401      	str	r4, [sp, #4]
    9ac6:	9500      	str	r5, [sp, #0]
    9ac8:	f7ff ffa2 	bl	9a10 <bt_gatt_attr_read>
    9acc:	e7f2      	b.n	9ab4 <bt_gatt_attr_read_service+0x1c>

00009ace <bt_gatt_attr_read_ccc>:
{
    9ace:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9ad2:	b086      	sub	sp, #24
    9ad4:	4607      	mov	r7, r0
    9ad6:	4688      	mov	r8, r1
    9ad8:	4691      	mov	r9, r2
    9ada:	469a      	mov	sl, r3
	struct _bt_gatt_ccc *ccc = attr->user_data;
    9adc:	68cd      	ldr	r5, [r1, #12]
	for (i = 0; i < ccc->cfg_len; i++) {
    9ade:	2400      	movs	r4, #0
    9ae0:	686b      	ldr	r3, [r5, #4]
    9ae2:	429c      	cmp	r4, r3
    9ae4:	d20e      	bcs.n	9b04 <bt_gatt_attr_read_ccc+0x36>
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    9ae6:	6829      	ldr	r1, [r5, #0]
    9ae8:	0126      	lsls	r6, r4, #4
    9aea:	4431      	add	r1, r6
    9aec:	3101      	adds	r1, #1
    9aee:	4638      	mov	r0, r7
    9af0:	f7fc fd82 	bl	65f8 <bt_conn_addr_le_cmp>
    9af4:	b108      	cbz	r0, 9afa <bt_gatt_attr_read_ccc+0x2c>
	for (i = 0; i < ccc->cfg_len; i++) {
    9af6:	3401      	adds	r4, #1
    9af8:	e7f2      	b.n	9ae0 <bt_gatt_attr_read_ccc+0x12>
		value = sys_cpu_to_le16(ccc->cfg[i].value);
    9afa:	682b      	ldr	r3, [r5, #0]
    9afc:	441e      	add	r6, r3
    9afe:	8933      	ldrh	r3, [r6, #8]
    9b00:	f8ad 3016 	strh.w	r3, [sp, #22]
	if (i == ccc->cfg_len) {
    9b04:	686b      	ldr	r3, [r5, #4]
    9b06:	429c      	cmp	r4, r3
    9b08:	d010      	beq.n	9b2c <bt_gatt_attr_read_ccc+0x5e>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
    9b0a:	2302      	movs	r3, #2
    9b0c:	9302      	str	r3, [sp, #8]
    9b0e:	f10d 0316 	add.w	r3, sp, #22
    9b12:	9301      	str	r3, [sp, #4]
    9b14:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
    9b18:	9300      	str	r3, [sp, #0]
    9b1a:	4653      	mov	r3, sl
    9b1c:	464a      	mov	r2, r9
    9b1e:	4641      	mov	r1, r8
    9b20:	4638      	mov	r0, r7
    9b22:	f7ff ff75 	bl	9a10 <bt_gatt_attr_read>
}
    9b26:	b006      	add	sp, #24
    9b28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		value = 0x0000;
    9b2c:	2300      	movs	r3, #0
    9b2e:	f8ad 3016 	strh.w	r3, [sp, #22]
    9b32:	e7ea      	b.n	9b0a <bt_gatt_attr_read_ccc+0x3c>

00009b34 <bt_gatt_foreach_attr>:
{
    9b34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9b38:	4606      	mov	r6, r0
    9b3a:	460f      	mov	r7, r1
    9b3c:	4690      	mov	r8, r2
    9b3e:	4699      	mov	r9, r3
	return list->head;
    9b40:	4b15      	ldr	r3, [pc, #84]	; (9b98 <bt_gatt_foreach_attr+0x64>)
    9b42:	681d      	ldr	r5, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    9b44:	b10d      	cbz	r5, 9b4a <bt_gatt_foreach_attr+0x16>
    9b46:	3d08      	subs	r5, #8
    9b48:	e01e      	b.n	9b88 <bt_gatt_foreach_attr+0x54>
    9b4a:	2500      	movs	r5, #0
    9b4c:	e01c      	b.n	9b88 <bt_gatt_foreach_attr+0x54>
		for (i = 0; i < svc->attr_count; i++) {
    9b4e:	3401      	adds	r4, #1
    9b50:	88ab      	ldrh	r3, [r5, #4]
    9b52:	429c      	cmp	r4, r3
    9b54:	da0f      	bge.n	9b76 <bt_gatt_foreach_attr+0x42>
			struct bt_gatt_attr *attr = &svc->attrs[i];
    9b56:	6828      	ldr	r0, [r5, #0]
    9b58:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    9b5c:	0093      	lsls	r3, r2, #2
    9b5e:	4418      	add	r0, r3
			if (attr->handle < start_handle ||
    9b60:	8a03      	ldrh	r3, [r0, #16]
    9b62:	42b3      	cmp	r3, r6
    9b64:	d3f3      	bcc.n	9b4e <bt_gatt_foreach_attr+0x1a>
    9b66:	42bb      	cmp	r3, r7
    9b68:	d8f1      	bhi.n	9b4e <bt_gatt_foreach_attr+0x1a>
			if (func(attr, user_data) == BT_GATT_ITER_STOP) {
    9b6a:	4649      	mov	r1, r9
    9b6c:	47c0      	blx	r8
    9b6e:	2800      	cmp	r0, #0
    9b70:	d1ed      	bne.n	9b4e <bt_gatt_foreach_attr+0x1a>
    9b72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    9b76:	f115 0308 	adds.w	r3, r5, #8
    9b7a:	d009      	beq.n	9b90 <bt_gatt_foreach_attr+0x5c>
	return node->next;
    9b7c:	68aa      	ldr	r2, [r5, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    9b7e:	b14a      	cbz	r2, 9b94 <bt_gatt_foreach_attr+0x60>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    9b80:	b103      	cbz	r3, 9b84 <bt_gatt_foreach_attr+0x50>
	return node->next;
    9b82:	68ab      	ldr	r3, [r5, #8]
    9b84:	f1a3 0508 	sub.w	r5, r3, #8
    9b88:	2d00      	cmp	r5, #0
    9b8a:	d0f2      	beq.n	9b72 <bt_gatt_foreach_attr+0x3e>
    9b8c:	2400      	movs	r4, #0
    9b8e:	e7df      	b.n	9b50 <bt_gatt_foreach_attr+0x1c>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    9b90:	461a      	mov	r2, r3
    9b92:	e7f4      	b.n	9b7e <bt_gatt_foreach_attr+0x4a>
    9b94:	2500      	movs	r5, #0
    9b96:	e7f7      	b.n	9b88 <bt_gatt_foreach_attr+0x54>
    9b98:	200006d0 	.word	0x200006d0

00009b9c <bt_gatt_attr_next>:
{
    9b9c:	b500      	push	{lr}
    9b9e:	b083      	sub	sp, #12
	struct bt_gatt_attr *next = NULL;
    9ba0:	ab02      	add	r3, sp, #8
    9ba2:	2200      	movs	r2, #0
    9ba4:	f843 2d04 	str.w	r2, [r3, #-4]!
	bt_gatt_foreach_attr(attr->handle + 1, attr->handle + 1, find_next,
    9ba8:	8a00      	ldrh	r0, [r0, #16]
    9baa:	3001      	adds	r0, #1
    9bac:	b280      	uxth	r0, r0
    9bae:	4a04      	ldr	r2, [pc, #16]	; (9bc0 <bt_gatt_attr_next+0x24>)
    9bb0:	4601      	mov	r1, r0
    9bb2:	f7ff ffbf 	bl	9b34 <bt_gatt_foreach_attr>
}
    9bb6:	9801      	ldr	r0, [sp, #4]
    9bb8:	b003      	add	sp, #12
    9bba:	f85d fb04 	ldr.w	pc, [sp], #4
    9bbe:	bf00      	nop
    9bc0:	0000949b 	.word	0x0000949b

00009bc4 <bt_gatt_attr_read_chrc>:
{
    9bc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9bc8:	b08a      	sub	sp, #40	; 0x28
    9bca:	4606      	mov	r6, r0
    9bcc:	460c      	mov	r4, r1
    9bce:	4617      	mov	r7, r2
    9bd0:	4698      	mov	r8, r3
	struct bt_gatt_chrc *chrc = attr->user_data;
    9bd2:	68cd      	ldr	r5, [r1, #12]
	pdu.properties = chrc->properties;
    9bd4:	792b      	ldrb	r3, [r5, #4]
    9bd6:	f88d 3014 	strb.w	r3, [sp, #20]
	next = bt_gatt_attr_next(attr);
    9bda:	4608      	mov	r0, r1
    9bdc:	f7ff ffde 	bl	9b9c <bt_gatt_attr_next>
	if (!next) {
    9be0:	b1c0      	cbz	r0, 9c14 <bt_gatt_attr_read_chrc+0x50>
		pdu.value_handle = sys_cpu_to_le16(next->handle);
    9be2:	8a03      	ldrh	r3, [r0, #16]
    9be4:	f8ad 3015 	strh.w	r3, [sp, #21]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
    9be8:	6829      	ldr	r1, [r5, #0]
    9bea:	780b      	ldrb	r3, [r1, #0]
    9bec:	b9c3      	cbnz	r3, 9c20 <bt_gatt_attr_read_chrc+0x5c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
    9bee:	884b      	ldrh	r3, [r1, #2]
    9bf0:	f8ad 3017 	strh.w	r3, [sp, #23]
		value_len += 2;
    9bf4:	2305      	movs	r3, #5
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
    9bf6:	9302      	str	r3, [sp, #8]
    9bf8:	ab05      	add	r3, sp, #20
    9bfa:	9301      	str	r3, [sp, #4]
    9bfc:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
    9c00:	9300      	str	r3, [sp, #0]
    9c02:	4643      	mov	r3, r8
    9c04:	463a      	mov	r2, r7
    9c06:	4621      	mov	r1, r4
    9c08:	4630      	mov	r0, r6
    9c0a:	f7ff ff01 	bl	9a10 <bt_gatt_attr_read>
}
    9c0e:	b00a      	add	sp, #40	; 0x28
    9c10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pdu.value_handle = 0x0000;
    9c14:	2300      	movs	r3, #0
    9c16:	f88d 3015 	strb.w	r3, [sp, #21]
    9c1a:	f88d 3016 	strb.w	r3, [sp, #22]
    9c1e:	e7e3      	b.n	9be8 <bt_gatt_attr_read_chrc+0x24>
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
    9c20:	2210      	movs	r2, #16
    9c22:	3101      	adds	r1, #1
    9c24:	f10d 0017 	add.w	r0, sp, #23
    9c28:	f7f6 fb4a 	bl	2c0 <memcpy>
		value_len += 16;
    9c2c:	2313      	movs	r3, #19
    9c2e:	e7e2      	b.n	9bf6 <bt_gatt_attr_read_chrc+0x32>

00009c30 <bt_gatt_indicate>:
{
    9c30:	b500      	push	{lr}
    9c32:	b087      	sub	sp, #28
	if (conn) {
    9c34:	b120      	cbz	r0, 9c40 <bt_gatt_indicate+0x10>
		return gatt_indicate(conn, params);
    9c36:	f7ff fd39 	bl	96ac <gatt_indicate>
}
    9c3a:	b007      	add	sp, #28
    9c3c:	f85d fb04 	ldr.w	pc, [sp], #4
	nfy.err = -ENOTCONN;
    9c40:	f06f 037f 	mvn.w	r3, #127	; 0x7f
    9c44:	9300      	str	r3, [sp, #0]
	nfy.type = BT_GATT_CCC_INDICATE;
    9c46:	2302      	movs	r3, #2
    9c48:	f8ad 3004 	strh.w	r3, [sp, #4]
	nfy.params = params;
    9c4c:	9105      	str	r1, [sp, #20]
	bt_gatt_foreach_attr(params->attr->handle, 0xffff, notify_cb, &nfy);
    9c4e:	6988      	ldr	r0, [r1, #24]
    9c50:	466b      	mov	r3, sp
    9c52:	4a04      	ldr	r2, [pc, #16]	; (9c64 <bt_gatt_indicate+0x34>)
    9c54:	f64f 71ff 	movw	r1, #65535	; 0xffff
    9c58:	8a00      	ldrh	r0, [r0, #16]
    9c5a:	f7ff ff6b 	bl	9b34 <bt_gatt_foreach_attr>
	return nfy.err;
    9c5e:	9800      	ldr	r0, [sp, #0]
    9c60:	e7eb      	b.n	9c3a <bt_gatt_indicate+0xa>
    9c62:	bf00      	nop
    9c64:	00009765 	.word	0x00009765

00009c68 <sc_process>:
{
    9c68:	b510      	push	{r4, lr}
    9c6a:	b082      	sub	sp, #8
    9c6c:	4603      	mov	r3, r0
	sc_range[0] = sys_cpu_to_le16(sc->start);
    9c6e:	f830 2c04 	ldrh.w	r2, [r0, #-4]
    9c72:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(sc->end);
    9c76:	f830 2c02 	ldrh.w	r2, [r0, #-2]
    9c7a:	f8ad 2006 	strh.w	r2, [sp, #6]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
    9c7e:	f1a0 012c 	sub.w	r1, r0, #44	; 0x2c
    9c82:	f100 0428 	add.w	r4, r0, #40	; 0x28
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    9c86:	f3bf 8f5b 	dmb	ish
    9c8a:	e854 2f00 	ldrex	r2, [r4]
    9c8e:	f022 0201 	bic.w	r2, r2, #1
    9c92:	e844 2000 	strex	r0, r2, [r4]
    9c96:	2800      	cmp	r0, #0
    9c98:	d1f7      	bne.n	9c8a <sc_process+0x22>
    9c9a:	f3bf 8f5b 	dmb	ish
	sc->start = 0;
    9c9e:	2000      	movs	r0, #0
    9ca0:	f823 0c04 	strh.w	r0, [r3, #-4]
	sc->end = 0;
    9ca4:	f823 0c02 	strh.w	r0, [r3, #-2]
	sc->params.attr = &gatt_attrs[2];
    9ca8:	4a0e      	ldr	r2, [pc, #56]	; (9ce4 <sc_process+0x7c>)
    9caa:	f843 2c14 	str.w	r2, [r3, #-20]
	sc->params.func = sc_indicate_rsp;
    9cae:	4a0e      	ldr	r2, [pc, #56]	; (9ce8 <sc_process+0x80>)
    9cb0:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.data = &sc_range[0];
    9cb4:	aa01      	add	r2, sp, #4
    9cb6:	f843 2c0c 	str.w	r2, [r3, #-12]
	sc->params.len = sizeof(sc_range);
    9cba:	2204      	movs	r2, #4
    9cbc:	f823 2c08 	strh.w	r2, [r3, #-8]
	if (bt_gatt_indicate(NULL, &sc->params)) {
    9cc0:	f7ff ffb6 	bl	9c30 <bt_gatt_indicate>
    9cc4:	b108      	cbz	r0, 9cca <sc_process+0x62>
}
    9cc6:	b002      	add	sp, #8
    9cc8:	bd10      	pop	{r4, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    9cca:	f3bf 8f5b 	dmb	ish
    9cce:	e854 3f00 	ldrex	r3, [r4]
    9cd2:	f043 0302 	orr.w	r3, r3, #2
    9cd6:	e844 3200 	strex	r2, r3, [r4]
    9cda:	2a00      	cmp	r2, #0
    9cdc:	d1f7      	bne.n	9cce <sc_process+0x66>
    9cde:	f3bf 8f5b 	dmb	ish
    9ce2:	e7f0      	b.n	9cc6 <sc_process+0x5e>
    9ce4:	2000ba98 	.word	0x2000ba98
    9ce8:	000094e1 	.word	0x000094e1

00009cec <bt_gatt_connected>:
}

#endif /* CONFIG_BT_GATT_CLIENT */

void bt_gatt_connected(struct bt_conn *conn)
{
    9cec:	b508      	push	{r3, lr}
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, connected_cb, conn);
    9cee:	4603      	mov	r3, r0
    9cf0:	4a03      	ldr	r2, [pc, #12]	; (9d00 <bt_gatt_connected+0x14>)
    9cf2:	f64f 71ff 	movw	r1, #65535	; 0xffff
    9cf6:	2001      	movs	r0, #1
    9cf8:	f7ff ff1c 	bl	9b34 <bt_gatt_foreach_attr>
    9cfc:	bd08      	pop	{r3, pc}
    9cfe:	bf00      	nop
    9d00:	00009861 	.word	0x00009861

00009d04 <bt_gatt_disconnected>:
	add_subscriptions(conn);
#endif /* CONFIG_BT_GATT_CLIENT */
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
    9d04:	b508      	push	{r3, lr}
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    9d06:	4603      	mov	r3, r0
    9d08:	4a03      	ldr	r2, [pc, #12]	; (9d18 <bt_gatt_disconnected+0x14>)
    9d0a:	f64f 71ff 	movw	r1, #65535	; 0xffff
    9d0e:	2001      	movs	r0, #1
    9d10:	f7ff ff10 	bl	9b34 <bt_gatt_foreach_attr>
    9d14:	bd08      	pop	{r3, pc}
    9d16:	bf00      	nop
    9d18:	000098c5 	.word	0x000098c5

00009d1c <get_io_capa>:
static bool sc_local_pkey_valid;
static u8_t sc_public_key[64];

static u8_t get_io_capa(void)
{
	if (!bt_auth) {
    9d1c:	4b11      	ldr	r3, [pc, #68]	; (9d64 <get_io_capa+0x48>)
    9d1e:	681b      	ldr	r3, [r3, #0]
    9d20:	b1db      	cbz	r3, 9d5a <get_io_capa+0x3e>
		return BT_SMP_IO_NO_INPUT_OUTPUT;
	}

	/* Passkey Confirmation is valid only for LE SC */
	if (bt_auth->passkey_display && bt_auth->passkey_entry &&
    9d22:	681a      	ldr	r2, [r3, #0]
    9d24:	b152      	cbz	r2, 9d3c <get_io_capa+0x20>
    9d26:	6859      	ldr	r1, [r3, #4]
    9d28:	b141      	cbz	r1, 9d3c <get_io_capa+0x20>
	    (bt_auth->passkey_confirm || !sc_supported)) {
    9d2a:	6899      	ldr	r1, [r3, #8]
	if (bt_auth->passkey_display && bt_auth->passkey_entry &&
    9d2c:	b109      	cbz	r1, 9d32 <get_io_capa+0x16>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
    9d2e:	2004      	movs	r0, #4
    9d30:	4770      	bx	lr
	    (bt_auth->passkey_confirm || !sc_supported)) {
    9d32:	490d      	ldr	r1, [pc, #52]	; (9d68 <get_io_capa+0x4c>)
    9d34:	7809      	ldrb	r1, [r1, #0]
    9d36:	b909      	cbnz	r1, 9d3c <get_io_capa+0x20>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
    9d38:	2004      	movs	r0, #4
    9d3a:	4770      	bx	lr
	}

	/* DisplayYesNo is useful only for LE SC */
	if (sc_supported && bt_auth->passkey_display &&
    9d3c:	490a      	ldr	r1, [pc, #40]	; (9d68 <get_io_capa+0x4c>)
    9d3e:	7809      	ldrb	r1, [r1, #0]
    9d40:	b121      	cbz	r1, 9d4c <get_io_capa+0x30>
    9d42:	b11a      	cbz	r2, 9d4c <get_io_capa+0x30>
	    bt_auth->passkey_confirm) {
    9d44:	6899      	ldr	r1, [r3, #8]
	if (sc_supported && bt_auth->passkey_display &&
    9d46:	b109      	cbz	r1, 9d4c <get_io_capa+0x30>
		return BT_SMP_IO_DISPLAY_YESNO;
    9d48:	2001      	movs	r0, #1
    9d4a:	4770      	bx	lr
	}

	if (bt_auth->passkey_entry) {
    9d4c:	685b      	ldr	r3, [r3, #4]
    9d4e:	b10b      	cbz	r3, 9d54 <get_io_capa+0x38>
		return BT_SMP_IO_KEYBOARD_ONLY;
    9d50:	2002      	movs	r0, #2
    9d52:	4770      	bx	lr
	}

	if (bt_auth->passkey_display) {
    9d54:	b11a      	cbz	r2, 9d5e <get_io_capa+0x42>
		return BT_SMP_IO_DISPLAY_ONLY;
    9d56:	2000      	movs	r0, #0
    9d58:	4770      	bx	lr
		return BT_SMP_IO_NO_INPUT_OUTPUT;
    9d5a:	2003      	movs	r0, #3
    9d5c:	4770      	bx	lr
	}

	return BT_SMP_IO_NO_INPUT_OUTPUT;
    9d5e:	2003      	movs	r0, #3
}
    9d60:	4770      	bx	lr
    9d62:	bf00      	nop
    9d64:	20002940 	.word	0x20002940
    9d68:	20000938 	.word	0x20000938

00009d6c <get_pair_method>:

static u8_t get_pair_method(struct bt_smp *smp, u8_t remote_io)
{
	struct bt_smp_pairing *req, *rsp;

	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY)
    9d6c:	2904      	cmp	r1, #4
    9d6e:	d811      	bhi.n	9d94 <get_pair_method+0x28>

	req = (struct bt_smp_pairing *)&smp->preq[1];
	rsp = (struct bt_smp_pairing *)&smp->prsp[1];

	/* if none side requires MITM use JustWorks */
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
    9d70:	f890 30a8 	ldrb.w	r3, [r0, #168]	; 0xa8
    9d74:	f890 20af 	ldrb.w	r2, [r0, #175]	; 0xaf
    9d78:	4313      	orrs	r3, r2
    9d7a:	f013 0f04 	tst.w	r3, #4
    9d7e:	d00b      	beq.n	9d98 <get_pair_method+0x2c>
{
    9d80:	b510      	push	{r4, lr}
    9d82:	460c      	mov	r4, r1
		return JUST_WORKS;
	}

	return gen_method_sc[remote_io][get_io_capa()];
    9d84:	f7ff ffca 	bl	9d1c <get_io_capa>
    9d88:	eb04 0184 	add.w	r1, r4, r4, lsl #2
    9d8c:	4c03      	ldr	r4, [pc, #12]	; (9d9c <get_pair_method+0x30>)
    9d8e:	4421      	add	r1, r4
    9d90:	5c08      	ldrb	r0, [r1, r0]
    9d92:	bd10      	pop	{r4, pc}
		return JUST_WORKS;
    9d94:	2000      	movs	r0, #0
    9d96:	4770      	bx	lr
		return JUST_WORKS;
    9d98:	2000      	movs	r0, #0
    9d9a:	4770      	bx	lr
    9d9c:	0002f5e8 	.word	0x0002f5e8

00009da0 <get_encryption_key_size>:
	/*
	 * The smaller value of the initiating and responding devices maximum
	 * encryption key length parameters shall be used as the encryption key
	 * size.
	 */
	return min(req->max_key_size, rsp->max_key_size);
    9da0:	f890 20b0 	ldrb.w	r2, [r0, #176]	; 0xb0
    9da4:	f890 00a9 	ldrb.w	r0, [r0, #169]	; 0xa9
}
    9da8:	4290      	cmp	r0, r2
    9daa:	bf28      	it	cs
    9dac:	4610      	movcs	r0, r2
    9dae:	4770      	bx	lr

00009db0 <xor_128>:
	return 0;
}

#if !defined(CONFIG_BT_SMP_SC_ONLY)
static void xor_128(const u8_t p[16], const u8_t q[16], u8_t r[16])
{
    9db0:	b430      	push	{r4, r5}
	size_t len = 16;
    9db2:	2310      	movs	r3, #16

	while (len--) {
    9db4:	e007      	b.n	9dc6 <xor_128+0x16>
		*r++ = *p++ ^ *q++;
    9db6:	7803      	ldrb	r3, [r0, #0]
    9db8:	780d      	ldrb	r5, [r1, #0]
    9dba:	406b      	eors	r3, r5
    9dbc:	7013      	strb	r3, [r2, #0]
	while (len--) {
    9dbe:	4623      	mov	r3, r4
		*r++ = *p++ ^ *q++;
    9dc0:	3201      	adds	r2, #1
    9dc2:	3101      	adds	r1, #1
    9dc4:	3001      	adds	r0, #1
	while (len--) {
    9dc6:	1e5c      	subs	r4, r3, #1
    9dc8:	2b00      	cmp	r3, #0
    9dca:	d1f4      	bne.n	9db6 <xor_128+0x6>
	}
}
    9dcc:	bc30      	pop	{r4, r5}
    9dce:	4770      	bx	lr

00009dd0 <legacy_get_pair_method>:
static u8_t legacy_get_pair_method(struct bt_smp *smp, u8_t remote_io)
{
	struct bt_smp_pairing *req, *rsp;
	u8_t method;

	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY)
    9dd0:	2904      	cmp	r1, #4
    9dd2:	d819      	bhi.n	9e08 <legacy_get_pair_method+0x38>
{
    9dd4:	b538      	push	{r3, r4, r5, lr}

	req = (struct bt_smp_pairing *)&smp->preq[1];
	rsp = (struct bt_smp_pairing *)&smp->prsp[1];

	/* if none side requires MITM use JustWorks */
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
    9dd6:	f890 30a8 	ldrb.w	r3, [r0, #168]	; 0xa8
    9dda:	f890 20af 	ldrb.w	r2, [r0, #175]	; 0xaf
    9dde:	4313      	orrs	r3, r2
    9de0:	f013 0f04 	tst.w	r3, #4
    9de4:	d012      	beq.n	9e0c <legacy_get_pair_method+0x3c>
    9de6:	460c      	mov	r4, r1
    9de8:	4605      	mov	r5, r0
		return JUST_WORKS;
	}

	method = gen_method_legacy[remote_io][get_io_capa()];
    9dea:	f7ff ff97 	bl	9d1c <get_io_capa>
    9dee:	eb04 0184 	add.w	r1, r4, r4, lsl #2
    9df2:	4c08      	ldr	r4, [pc, #32]	; (9e14 <legacy_get_pair_method+0x44>)
    9df4:	4421      	add	r1, r4
    9df6:	5c08      	ldrb	r0, [r1, r0]

	/* if both sides have KeyboardDisplay capabilities, initiator displays
	 * and responder inputs
	 */
	if (method == PASSKEY_ROLE) {
    9df8:	2804      	cmp	r0, #4
    9dfa:	d000      	beq.n	9dfe <legacy_get_pair_method+0x2e>
			method = PASSKEY_INPUT;
		}
	}

	return method;
}
    9dfc:	bd38      	pop	{r3, r4, r5, pc}
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    9dfe:	682b      	ldr	r3, [r5, #0]
    9e00:	78db      	ldrb	r3, [r3, #3]
    9e02:	b92b      	cbnz	r3, 9e10 <legacy_get_pair_method+0x40>
			method = PASSKEY_DISPLAY;
    9e04:	2002      	movs	r0, #2
    9e06:	bd38      	pop	{r3, r4, r5, pc}
		return JUST_WORKS;
    9e08:	2000      	movs	r0, #0
    9e0a:	4770      	bx	lr
		return JUST_WORKS;
    9e0c:	2000      	movs	r0, #0
    9e0e:	bd38      	pop	{r3, r4, r5, pc}
			method = PASSKEY_INPUT;
    9e10:	2001      	movs	r0, #1
    9e12:	e7f3      	b.n	9dfc <legacy_get_pair_method+0x2c>
    9e14:	0002f5cc 	.word	0x0002f5cc

00009e18 <get_auth>:

	return 0;
}

static u8_t get_auth(u8_t auth)
{
    9e18:	b510      	push	{r4, lr}
	if (sc_supported) {
    9e1a:	4b09      	ldr	r3, [pc, #36]	; (9e40 <get_auth+0x28>)
    9e1c:	781b      	ldrb	r3, [r3, #0]
    9e1e:	b143      	cbz	r3, 9e32 <get_auth+0x1a>
		auth &= BT_SMP_AUTH_MASK_SC;
    9e20:	f000 040f 	and.w	r4, r0, #15
	} else {
		auth &= BT_SMP_AUTH_MASK;
	}

	if (get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) {
    9e24:	f7ff ff7a 	bl	9d1c <get_io_capa>
    9e28:	2803      	cmp	r0, #3
    9e2a:	d005      	beq.n	9e38 <get_auth+0x20>
		auth &= ~(BT_SMP_AUTH_MITM);
	} else {
		auth |= BT_SMP_AUTH_MITM;
    9e2c:	f044 0004 	orr.w	r0, r4, #4
	}

	return auth;
}
    9e30:	bd10      	pop	{r4, pc}
		auth &= BT_SMP_AUTH_MASK;
    9e32:	f000 0407 	and.w	r4, r0, #7
    9e36:	e7f5      	b.n	9e24 <get_auth+0xc>
		auth &= ~(BT_SMP_AUTH_MITM);
    9e38:	f004 000b 	and.w	r0, r4, #11
    9e3c:	bd10      	pop	{r4, pc}
    9e3e:	bf00      	nop
    9e40:	20000938 	.word	0x20000938

00009e44 <sec_level_reachable>:

static bool sec_level_reachable(struct bt_conn *conn)
{
    9e44:	b508      	push	{r3, lr}
	switch (conn->required_sec_level) {
    9e46:	7a43      	ldrb	r3, [r0, #9]
    9e48:	3b01      	subs	r3, #1
    9e4a:	2b03      	cmp	r3, #3
    9e4c:	d818      	bhi.n	9e80 <sec_level_reachable+0x3c>
    9e4e:	e8df f003 	tbb	[pc, r3]
    9e52:	0202      	.short	0x0202
    9e54:	0a04      	.short	0x0a04
	case BT_SECURITY_LOW:
	case BT_SECURITY_MEDIUM:
		return true;
    9e56:	2001      	movs	r0, #1
    9e58:	bd08      	pop	{r3, pc}
	case BT_SECURITY_HIGH:
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT;
    9e5a:	f7ff ff5f 	bl	9d1c <get_io_capa>
    9e5e:	3803      	subs	r0, #3
    9e60:	bf18      	it	ne
    9e62:	2001      	movne	r0, #1
    9e64:	bd08      	pop	{r3, pc}
	case BT_SECURITY_FIPS:
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT &&
    9e66:	f7ff ff59 	bl	9d1c <get_io_capa>
    9e6a:	2803      	cmp	r0, #3
    9e6c:	d004      	beq.n	9e78 <sec_level_reachable+0x34>
    9e6e:	4b05      	ldr	r3, [pc, #20]	; (9e84 <sec_level_reachable+0x40>)
    9e70:	781b      	ldrb	r3, [r3, #0]
    9e72:	b91b      	cbnz	r3, 9e7c <sec_level_reachable+0x38>
    9e74:	2000      	movs	r0, #0
    9e76:	bd08      	pop	{r3, pc}
    9e78:	2000      	movs	r0, #0
    9e7a:	bd08      	pop	{r3, pc}
    9e7c:	2001      	movs	r0, #1
    9e7e:	bd08      	pop	{r3, pc}
		       sc_supported;
	default:
		return false;
    9e80:	2000      	movs	r0, #0
	}
}
    9e82:	bd08      	pop	{r3, pc}
    9e84:	20000938 	.word	0x20000938

00009e88 <bt_smp_accept>:
		.recv = bt_smp_recv,
	};

	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
    9e88:	2000      	movs	r0, #0
    9e8a:	b110      	cbz	r0, 9e92 <bt_smp_accept+0xa>
		return 0;
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
    9e8c:	f06f 000b 	mvn.w	r0, #11
}
    9e90:	4770      	bx	lr
		if (smp->chan.chan.conn) {
    9e92:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
    9e96:	fb03 f300 	mul.w	r3, r3, r0
    9e9a:	4a07      	ldr	r2, [pc, #28]	; (9eb8 <bt_smp_accept+0x30>)
    9e9c:	58d3      	ldr	r3, [r2, r3]
    9e9e:	b10b      	cbz	r3, 9ea4 <bt_smp_accept+0x1c>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
    9ea0:	3001      	adds	r0, #1
    9ea2:	e7f2      	b.n	9e8a <bt_smp_accept+0x2>
		smp->chan.chan.ops = &ops;
    9ea4:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
    9ea8:	4a03      	ldr	r2, [pc, #12]	; (9eb8 <bt_smp_accept+0x30>)
    9eaa:	fb03 2300 	mla	r3, r3, r0, r2
    9eae:	4a03      	ldr	r2, [pc, #12]	; (9ebc <bt_smp_accept+0x34>)
    9eb0:	605a      	str	r2, [r3, #4]
		*chan = &smp->chan.chan;
    9eb2:	600b      	str	r3, [r1, #0]
		return 0;
    9eb4:	4770      	bx	lr
    9eb6:	bf00      	nop
    9eb8:	20000750 	.word	0x20000750
    9ebc:	2000bad8 	.word	0x2000bad8

00009ec0 <le_sc_supported>:
	/*
	 * If controller based ECC is to be used it must support
	 * "LE Read Local P-256 Public Key" and "LE Generate DH Key" commands.
	 * Otherwise LE SC are not supported.
	 */
	return (bt_dev.supported_commands[34] & 0x02) &&
    9ec0:	4b04      	ldr	r3, [pc, #16]	; (9ed4 <le_sc_supported+0x14>)
    9ec2:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
    9ec6:	f000 0006 	and.w	r0, r0, #6
	       (bt_dev.supported_commands[34] & 0x04);
}
    9eca:	2806      	cmp	r0, #6
    9ecc:	bf14      	ite	ne
    9ece:	2000      	movne	r0, #0
    9ed0:	2001      	moveq	r0, #1
    9ed2:	4770      	bx	lr
    9ed4:	2000b808 	.word	0x2000b808

00009ed8 <smp_chan_get>:
{
    9ed8:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_SMP);
    9eda:	2106      	movs	r1, #6
    9edc:	f7fd fd18 	bl	7910 <bt_l2cap_le_lookup_rx_cid>
}
    9ee0:	bd08      	pop	{r3, pc}

00009ee2 <smp_create_pdu>:
{
    9ee2:	b538      	push	{r3, r4, r5, lr}
    9ee4:	460d      	mov	r5, r1
	buf = bt_l2cap_create_pdu(NULL, 0);
    9ee6:	2100      	movs	r1, #0
    9ee8:	4608      	mov	r0, r1
    9eea:	f7fd fa58 	bl	739e <bt_l2cap_create_pdu>
    9eee:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    9ef0:	2101      	movs	r1, #1
    9ef2:	3008      	adds	r0, #8
    9ef4:	f010 f952 	bl	1a19c <net_buf_simple_add>
	hdr->code = op;
    9ef8:	7005      	strb	r5, [r0, #0]
}
    9efa:	4620      	mov	r0, r4
    9efc:	bd38      	pop	{r3, r4, r5, pc}

00009efe <smp_init>:
{
    9efe:	b510      	push	{r4, lr}
    9f00:	4604      	mov	r4, r0
	memset((u8_t *)smp + sizeof(smp->chan), 0,
    9f02:	22e0      	movs	r2, #224	; 0xe0
    9f04:	2100      	movs	r1, #0
    9f06:	309c      	adds	r0, #156	; 0x9c
    9f08:	f020 fdbc 	bl	2aa84 <memset>
	if (bt_rand(smp->prnd, 16)) {
    9f0c:	2110      	movs	r1, #16
    9f0e:	f104 00c3 	add.w	r0, r4, #195	; 0xc3
    9f12:	f006 fdcd 	bl	10ab0 <bt_rand>
    9f16:	b110      	cbz	r0, 9f1e <smp_init+0x20>
		return BT_SMP_ERR_UNSPECIFIED;
    9f18:	2308      	movs	r3, #8
}
    9f1a:	4618      	mov	r0, r3
    9f1c:	bd10      	pop	{r4, pc}
    9f1e:	4603      	mov	r3, r0
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
    9f20:	349c      	adds	r4, #156	; 0x9c
    9f22:	f3bf 8f5b 	dmb	ish
    9f26:	e854 2f00 	ldrex	r2, [r4]
    9f2a:	f042 0220 	orr.w	r2, r2, #32
    9f2e:	e844 2100 	strex	r1, r2, [r4]
    9f32:	2900      	cmp	r1, #0
    9f34:	d1f7      	bne.n	9f26 <smp_init+0x28>
    9f36:	f3bf 8f5b 	dmb	ish
	return 0;
    9f3a:	e7ee      	b.n	9f1a <smp_init+0x1c>

00009f3c <display_passkey>:
{
    9f3c:	b538      	push	{r3, r4, r5, lr}
    9f3e:	4604      	mov	r4, r0
	if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
    9f40:	2104      	movs	r1, #4
    9f42:	f500 70ba 	add.w	r0, r0, #372	; 0x174
    9f46:	f006 fdb3 	bl	10ab0 <bt_rand>
    9f4a:	b108      	cbz	r0, 9f50 <display_passkey+0x14>
		return BT_SMP_ERR_UNSPECIFIED;
    9f4c:	2008      	movs	r0, #8
}
    9f4e:	bd38      	pop	{r3, r4, r5, pc}
	smp->passkey %= 1000000;
    9f50:	f8d4 3174 	ldr.w	r3, [r4, #372]	; 0x174
    9f54:	4909      	ldr	r1, [pc, #36]	; (9f7c <display_passkey+0x40>)
    9f56:	fba1 2103 	umull	r2, r1, r1, r3
    9f5a:	0c89      	lsrs	r1, r1, #18
    9f5c:	4a08      	ldr	r2, [pc, #32]	; (9f80 <display_passkey+0x44>)
    9f5e:	fb02 3111 	mls	r1, r2, r1, r3
    9f62:	f8c4 1174 	str.w	r1, [r4, #372]	; 0x174
	smp->passkey_round = 0;
    9f66:	2500      	movs	r5, #0
    9f68:	f884 5178 	strb.w	r5, [r4, #376]	; 0x178
	bt_auth->passkey_display(smp->chan.chan.conn, smp->passkey);
    9f6c:	4b05      	ldr	r3, [pc, #20]	; (9f84 <display_passkey+0x48>)
    9f6e:	681b      	ldr	r3, [r3, #0]
    9f70:	681b      	ldr	r3, [r3, #0]
    9f72:	6820      	ldr	r0, [r4, #0]
    9f74:	4798      	blx	r3
	return 0;
    9f76:	4628      	mov	r0, r5
    9f78:	bd38      	pop	{r3, r4, r5, pc}
    9f7a:	bf00      	nop
    9f7c:	431bde83 	.word	0x431bde83
    9f80:	000f4240 	.word	0x000f4240
    9f84:	20002940 	.word	0x20002940

00009f88 <smp_send>:
{
    9f88:	b510      	push	{r4, lr}
    9f8a:	4604      	mov	r4, r0
	bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb);
    9f8c:	4613      	mov	r3, r2
    9f8e:	460a      	mov	r2, r1
    9f90:	2106      	movs	r1, #6
    9f92:	6800      	ldr	r0, [r0, #0]
    9f94:	f7fd fa9b 	bl	74ce <bt_l2cap_send_cb>
    9f98:	f247 5230 	movw	r2, #30000	; 0x7530
    9f9c:	f504 71be 	add.w	r1, r4, #380	; 0x17c
    9fa0:	4801      	ldr	r0, [pc, #4]	; (9fa8 <smp_send+0x20>)
    9fa2:	f01f fa43 	bl	2942c <k_delayed_work_submit_to_queue>
    9fa6:	bd10      	pop	{r4, pc}
    9fa8:	20002b08 	.word	0x20002b08

00009fac <sc_smp_send_dhkey_check>:
{
    9fac:	b570      	push	{r4, r5, r6, lr}
    9fae:	4604      	mov	r4, r0
    9fb0:	460e      	mov	r6, r1
	buf = smp_create_pdu(smp->chan.chan.conn, BT_SMP_DHKEY_CHECK,
    9fb2:	2210      	movs	r2, #16
    9fb4:	210d      	movs	r1, #13
    9fb6:	6800      	ldr	r0, [r0, #0]
    9fb8:	f7ff ff93 	bl	9ee2 <smp_create_pdu>
	if (!buf) {
    9fbc:	b178      	cbz	r0, 9fde <sc_smp_send_dhkey_check+0x32>
    9fbe:	4605      	mov	r5, r0
	req = net_buf_add(buf, sizeof(*req));
    9fc0:	2110      	movs	r1, #16
    9fc2:	3008      	adds	r0, #8
    9fc4:	f010 f8ea 	bl	1a19c <net_buf_simple_add>
	memcpy(req->e, e, sizeof(req->e));
    9fc8:	2210      	movs	r2, #16
    9fca:	4631      	mov	r1, r6
    9fcc:	f7f6 f978 	bl	2c0 <memcpy>
	smp_send(smp, buf, NULL);
    9fd0:	2200      	movs	r2, #0
    9fd2:	4629      	mov	r1, r5
    9fd4:	4620      	mov	r0, r4
    9fd6:	f7ff ffd7 	bl	9f88 <smp_send>
	return 0;
    9fda:	2000      	movs	r0, #0
    9fdc:	bd70      	pop	{r4, r5, r6, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    9fde:	2008      	movs	r0, #8
}
    9fe0:	bd70      	pop	{r4, r5, r6, pc}
	...

00009fe4 <sc_send_public_key>:
{
    9fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9fe6:	4604      	mov	r4, r0
	req_buf = smp_create_pdu(smp->chan.chan.conn, BT_SMP_CMD_PUBLIC_KEY,
    9fe8:	2240      	movs	r2, #64	; 0x40
    9fea:	210c      	movs	r1, #12
    9fec:	6800      	ldr	r0, [r0, #0]
    9fee:	f7ff ff78 	bl	9ee2 <smp_create_pdu>
	if (!req_buf) {
    9ff2:	b1b0      	cbz	r0, a022 <sc_send_public_key+0x3e>
    9ff4:	4605      	mov	r5, r0
	req = net_buf_add(req_buf, sizeof(*req));
    9ff6:	2140      	movs	r1, #64	; 0x40
    9ff8:	3008      	adds	r0, #8
    9ffa:	f010 f8cf 	bl	1a19c <net_buf_simple_add>
    9ffe:	4607      	mov	r7, r0
	memcpy(req->x, sc_public_key, sizeof(req->x));
    a000:	4e09      	ldr	r6, [pc, #36]	; (a028 <sc_send_public_key+0x44>)
    a002:	2220      	movs	r2, #32
    a004:	4631      	mov	r1, r6
    a006:	f7f6 f95b 	bl	2c0 <memcpy>
	memcpy(req->y, &sc_public_key[32], sizeof(req->y));
    a00a:	2220      	movs	r2, #32
    a00c:	18b1      	adds	r1, r6, r2
    a00e:	18b8      	adds	r0, r7, r2
    a010:	f7f6 f956 	bl	2c0 <memcpy>
	smp_send(smp, req_buf, NULL);
    a014:	2200      	movs	r2, #0
    a016:	4629      	mov	r1, r5
    a018:	4620      	mov	r0, r4
    a01a:	f7ff ffb5 	bl	9f88 <smp_send>
	return 0;
    a01e:	2000      	movs	r0, #0
    a020:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    a022:	2008      	movs	r0, #8
}
    a024:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a026:	bf00      	nop
    a028:	200008f8 	.word	0x200008f8

0000a02c <send_pairing_rsp>:
{
    a02c:	b538      	push	{r3, r4, r5, lr}
    a02e:	4604      	mov	r4, r0
	rsp_buf = smp_create_pdu(conn, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
    a030:	2206      	movs	r2, #6
    a032:	2102      	movs	r1, #2
    a034:	6800      	ldr	r0, [r0, #0]
    a036:	f7ff ff54 	bl	9ee2 <smp_create_pdu>
	if (!rsp_buf) {
    a03a:	b180      	cbz	r0, a05e <send_pairing_rsp+0x32>
    a03c:	4605      	mov	r5, r0
	rsp = net_buf_add(rsp_buf, sizeof(*rsp));
    a03e:	2106      	movs	r1, #6
    a040:	3008      	adds	r0, #8
    a042:	f010 f8ab 	bl	1a19c <net_buf_simple_add>
	memcpy(rsp, smp->prsp + 1, sizeof(*rsp));
    a046:	2206      	movs	r2, #6
    a048:	f104 01ad 	add.w	r1, r4, #173	; 0xad
    a04c:	f7f6 f938 	bl	2c0 <memcpy>
	smp_send(smp, rsp_buf, NULL);
    a050:	2200      	movs	r2, #0
    a052:	4629      	mov	r1, r5
    a054:	4620      	mov	r0, r4
    a056:	f7ff ff97 	bl	9f88 <smp_send>
	return 0;
    a05a:	2000      	movs	r0, #0
    a05c:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    a05e:	2008      	movs	r0, #8
}
    a060:	bd38      	pop	{r3, r4, r5, pc}

0000a062 <smp_send_pairing_random>:
{
    a062:	b538      	push	{r3, r4, r5, lr}
    a064:	4604      	mov	r4, r0
	rsp_buf = smp_create_pdu(conn, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
    a066:	2210      	movs	r2, #16
    a068:	2104      	movs	r1, #4
    a06a:	6800      	ldr	r0, [r0, #0]
    a06c:	f7ff ff39 	bl	9ee2 <smp_create_pdu>
	if (!rsp_buf) {
    a070:	b180      	cbz	r0, a094 <smp_send_pairing_random+0x32>
    a072:	4605      	mov	r5, r0
	req = net_buf_add(rsp_buf, sizeof(*req));
    a074:	2110      	movs	r1, #16
    a076:	3008      	adds	r0, #8
    a078:	f010 f890 	bl	1a19c <net_buf_simple_add>
	memcpy(req->val, smp->prnd, sizeof(req->val));
    a07c:	2210      	movs	r2, #16
    a07e:	f104 01c3 	add.w	r1, r4, #195	; 0xc3
    a082:	f7f6 f91d 	bl	2c0 <memcpy>
	smp_send(smp, rsp_buf, NULL);
    a086:	2200      	movs	r2, #0
    a088:	4629      	mov	r1, r5
    a08a:	4620      	mov	r0, r4
    a08c:	f7ff ff7c 	bl	9f88 <smp_send>
	return 0;
    a090:	2000      	movs	r0, #0
    a092:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    a094:	2008      	movs	r0, #8
}
    a096:	bd38      	pop	{r3, r4, r5, pc}

0000a098 <bt_smp_aes_cmac>:
{
    a098:	b570      	push	{r4, r5, r6, lr}
    a09a:	b0c2      	sub	sp, #264	; 0x108
    a09c:	460c      	mov	r4, r1
    a09e:	4615      	mov	r5, r2
    a0a0:	461e      	mov	r6, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
    a0a2:	aa16      	add	r2, sp, #88	; 0x58
    a0a4:	4601      	mov	r1, r0
    a0a6:	4668      	mov	r0, sp
    a0a8:	f7f9 fb9f 	bl	37ea <tc_cmac_setup>
    a0ac:	b180      	cbz	r0, a0d0 <bt_smp_aes_cmac+0x38>
	if (tc_cmac_update(&state, in, len) == TC_CRYPTO_FAIL) {
    a0ae:	462a      	mov	r2, r5
    a0b0:	4621      	mov	r1, r4
    a0b2:	4668      	mov	r0, sp
    a0b4:	f7f9 fbc6 	bl	3844 <tc_cmac_update>
    a0b8:	b168      	cbz	r0, a0d6 <bt_smp_aes_cmac+0x3e>
	if (tc_cmac_final(out, &state) == TC_CRYPTO_FAIL) {
    a0ba:	4669      	mov	r1, sp
    a0bc:	4630      	mov	r0, r6
    a0be:	f7f9 fc2b 	bl	3918 <tc_cmac_final>
    a0c2:	b110      	cbz	r0, a0ca <bt_smp_aes_cmac+0x32>
	return 0;
    a0c4:	2000      	movs	r0, #0
}
    a0c6:	b042      	add	sp, #264	; 0x108
    a0c8:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    a0ca:	f06f 0004 	mvn.w	r0, #4
    a0ce:	e7fa      	b.n	a0c6 <bt_smp_aes_cmac+0x2e>
		return -EIO;
    a0d0:	f06f 0004 	mvn.w	r0, #4
    a0d4:	e7f7      	b.n	a0c6 <bt_smp_aes_cmac+0x2e>
		return -EIO;
    a0d6:	f06f 0004 	mvn.w	r0, #4
    a0da:	e7f4      	b.n	a0c6 <bt_smp_aes_cmac+0x2e>

0000a0dc <smp_sign_buf>:
{
    a0dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    a0e0:	b08b      	sub	sp, #44	; 0x2c
    a0e2:	460d      	mov	r5, r1
	u32_t cnt = UNALIGNED_GET((u32_t *)&msg[len]);
    a0e4:	188f      	adds	r7, r1, r2
    a0e6:	683b      	ldr	r3, [r7, #0]
    a0e8:	9309      	str	r3, [sp, #36]	; 0x24
	sys_mem_swap(m, len + sizeof(cnt));
    a0ea:	1d16      	adds	r6, r2, #4
 */
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
    a0ec:	2300      	movs	r3, #0
    a0ee:	e006      	b.n	a0fe <smp_sign_buf+0x22>
		u8_t tmp = ((u8_t *)buf)[i];
    a0f0:	5cea      	ldrb	r2, [r5, r3]

		((u8_t *)buf)[i] = ((u8_t *)buf)[length - 1 - i];
    a0f2:	1af1      	subs	r1, r6, r3
    a0f4:	3901      	subs	r1, #1
    a0f6:	5c6c      	ldrb	r4, [r5, r1]
    a0f8:	54ec      	strb	r4, [r5, r3]
		((u8_t *)buf)[length - 1 - i] = tmp;
    a0fa:	546a      	strb	r2, [r5, r1]
	for (i = 0; i < (length/2); i++) {
    a0fc:	3301      	adds	r3, #1
    a0fe:	ea4f 0856 	mov.w	r8, r6, lsr #1
    a102:	4543      	cmp	r3, r8
    a104:	d3f4      	bcc.n	a0f0 <smp_sign_buf+0x14>
	src += length - 1;
    a106:	300f      	adds	r0, #15
    a108:	2410      	movs	r4, #16
    a10a:	ab05      	add	r3, sp, #20
    a10c:	e004      	b.n	a118 <smp_sign_buf+0x3c>
		*((u8_t *)dst++) = *((u8_t *)src--);
    a10e:	7802      	ldrb	r2, [r0, #0]
    a110:	701a      	strb	r2, [r3, #0]
	for (; length > 0; length--) {
    a112:	3c01      	subs	r4, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    a114:	3801      	subs	r0, #1
    a116:	3301      	adds	r3, #1
	for (; length > 0; length--) {
    a118:	2c00      	cmp	r4, #0
    a11a:	d1f8      	bne.n	a10e <smp_sign_buf+0x32>
	err = bt_smp_aes_cmac(key_s, m, len + sizeof(cnt), tmp);
    a11c:	ab01      	add	r3, sp, #4
    a11e:	4632      	mov	r2, r6
    a120:	4629      	mov	r1, r5
    a122:	a805      	add	r0, sp, #20
    a124:	f7ff ffb8 	bl	a098 <bt_smp_aes_cmac>
	if (err) {
    a128:	4681      	mov	r9, r0
    a12a:	bb08      	cbnz	r0, a170 <smp_sign_buf+0x94>
    a12c:	4623      	mov	r3, r4
    a12e:	e009      	b.n	a144 <smp_sign_buf+0x68>
		u8_t tmp = ((u8_t *)buf)[i];
    a130:	aa01      	add	r2, sp, #4
    a132:	5cd0      	ldrb	r0, [r2, r3]
		((u8_t *)buf)[i] = ((u8_t *)buf)[length - 1 - i];
    a134:	f1c3 010f 	rsb	r1, r3, #15
    a138:	f812 e001 	ldrb.w	lr, [r2, r1]
    a13c:	f802 e003 	strb.w	lr, [r2, r3]
		((u8_t *)buf)[length - 1 - i] = tmp;
    a140:	5450      	strb	r0, [r2, r1]
	for (i = 0; i < (length/2); i++) {
    a142:	3301      	adds	r3, #1
    a144:	2b07      	cmp	r3, #7
    a146:	d9f3      	bls.n	a130 <smp_sign_buf+0x54>
	memcpy(tmp + 4, &cnt, sizeof(cnt));
    a148:	2204      	movs	r2, #4
    a14a:	a909      	add	r1, sp, #36	; 0x24
    a14c:	a802      	add	r0, sp, #8
    a14e:	f7f6 f8b7 	bl	2c0 <memcpy>
    a152:	e006      	b.n	a162 <smp_sign_buf+0x86>
		u8_t tmp = ((u8_t *)buf)[i];
    a154:	5d2a      	ldrb	r2, [r5, r4]
		((u8_t *)buf)[i] = ((u8_t *)buf)[length - 1 - i];
    a156:	1b33      	subs	r3, r6, r4
    a158:	3b01      	subs	r3, #1
    a15a:	5ce9      	ldrb	r1, [r5, r3]
    a15c:	5529      	strb	r1, [r5, r4]
		((u8_t *)buf)[length - 1 - i] = tmp;
    a15e:	54ea      	strb	r2, [r5, r3]
	for (i = 0; i < (length/2); i++) {
    a160:	3401      	adds	r4, #1
    a162:	45a0      	cmp	r8, r4
    a164:	d8f6      	bhi.n	a154 <smp_sign_buf+0x78>
	memcpy(sig, tmp + 4, 12);
    a166:	220c      	movs	r2, #12
    a168:	a902      	add	r1, sp, #8
    a16a:	4638      	mov	r0, r7
    a16c:	f7f6 f8a8 	bl	2c0 <memcpy>
}
    a170:	4648      	mov	r0, r9
    a172:	b00b      	add	sp, #44	; 0x2c
    a174:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0000a178 <smp_f4>:
{
    a178:	b5f0      	push	{r4, r5, r6, r7, lr}
    a17a:	b097      	sub	sp, #92	; 0x5c
    a17c:	9e1c      	ldr	r6, [sp, #112]	; 0x70
	src += length - 1;
    a17e:	301f      	adds	r0, #31
    a180:	2420      	movs	r4, #32
    a182:	ad01      	add	r5, sp, #4
    a184:	e004      	b.n	a190 <smp_f4+0x18>
		*((u8_t *)dst++) = *((u8_t *)src--);
    a186:	7807      	ldrb	r7, [r0, #0]
    a188:	702f      	strb	r7, [r5, #0]
	for (; length > 0; length--) {
    a18a:	3c01      	subs	r4, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    a18c:	3801      	subs	r0, #1
    a18e:	3501      	adds	r5, #1
	for (; length > 0; length--) {
    a190:	2c00      	cmp	r4, #0
    a192:	d1f8      	bne.n	a186 <smp_f4+0xe>
	src += length - 1;
    a194:	311f      	adds	r1, #31
    a196:	2020      	movs	r0, #32
    a198:	ac09      	add	r4, sp, #36	; 0x24
    a19a:	e004      	b.n	a1a6 <smp_f4+0x2e>
		*((u8_t *)dst++) = *((u8_t *)src--);
    a19c:	780d      	ldrb	r5, [r1, #0]
    a19e:	7025      	strb	r5, [r4, #0]
	for (; length > 0; length--) {
    a1a0:	3801      	subs	r0, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    a1a2:	3901      	subs	r1, #1
    a1a4:	3401      	adds	r4, #1
	for (; length > 0; length--) {
    a1a6:	2800      	cmp	r0, #0
    a1a8:	d1f8      	bne.n	a19c <smp_f4+0x24>
	m[64] = z;
    a1aa:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	src += length - 1;
    a1ae:	320f      	adds	r2, #15
    a1b0:	2410      	movs	r4, #16
    a1b2:	ab12      	add	r3, sp, #72	; 0x48
    a1b4:	e004      	b.n	a1c0 <smp_f4+0x48>
		*((u8_t *)dst++) = *((u8_t *)src--);
    a1b6:	7811      	ldrb	r1, [r2, #0]
    a1b8:	7019      	strb	r1, [r3, #0]
	for (; length > 0; length--) {
    a1ba:	3c01      	subs	r4, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    a1bc:	3a01      	subs	r2, #1
    a1be:	3301      	adds	r3, #1
	for (; length > 0; length--) {
    a1c0:	2c00      	cmp	r4, #0
    a1c2:	d1f8      	bne.n	a1b6 <smp_f4+0x3e>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), res);
    a1c4:	4633      	mov	r3, r6
    a1c6:	2241      	movs	r2, #65	; 0x41
    a1c8:	a901      	add	r1, sp, #4
    a1ca:	a812      	add	r0, sp, #72	; 0x48
    a1cc:	f7ff ff64 	bl	a098 <bt_smp_aes_cmac>
	if (err) {
    a1d0:	4605      	mov	r5, r0
    a1d2:	b138      	cbz	r0, a1e4 <smp_f4+0x6c>
    a1d4:	e008      	b.n	a1e8 <smp_f4+0x70>
		u8_t tmp = ((u8_t *)buf)[i];
    a1d6:	5d32      	ldrb	r2, [r6, r4]
		((u8_t *)buf)[i] = ((u8_t *)buf)[length - 1 - i];
    a1d8:	f1c4 030f 	rsb	r3, r4, #15
    a1dc:	5cf1      	ldrb	r1, [r6, r3]
    a1de:	5531      	strb	r1, [r6, r4]
		((u8_t *)buf)[length - 1 - i] = tmp;
    a1e0:	54f2      	strb	r2, [r6, r3]
	for (i = 0; i < (length/2); i++) {
    a1e2:	3401      	adds	r4, #1
    a1e4:	2c07      	cmp	r4, #7
    a1e6:	d9f6      	bls.n	a1d6 <smp_f4+0x5e>
}
    a1e8:	4628      	mov	r0, r5
    a1ea:	b017      	add	sp, #92	; 0x5c
    a1ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0000a1f0 <sc_smp_check_confirm>:
	switch (smp->method) {
    a1f0:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
    a1f4:	2b03      	cmp	r3, #3
    a1f6:	d827      	bhi.n	a248 <sc_smp_check_confirm+0x58>
    a1f8:	e8df f003 	tbb	[pc, r3]
    a1fc:	0d02020d 	.word	0x0d02020d
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    a200:	f8d0 3174 	ldr.w	r3, [r0, #372]	; 0x174
    a204:	f890 2178 	ldrb.w	r2, [r0, #376]	; 0x178
    a208:	40d3      	lsrs	r3, r2
    a20a:	f003 0301 	and.w	r3, r3, #1
		r |= 0x80;
    a20e:	f063 037f 	orn	r3, r3, #127	; 0x7f
    a212:	b2db      	uxtb	r3, r3
		break;
    a214:	e000      	b.n	a218 <sc_smp_check_confirm+0x28>
		r = 0;
    a216:	2300      	movs	r3, #0
{
    a218:	b510      	push	{r4, lr}
    a21a:	b086      	sub	sp, #24
    a21c:	4604      	mov	r4, r0
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
    a21e:	aa02      	add	r2, sp, #8
    a220:	9200      	str	r2, [sp, #0]
    a222:	f100 02d3 	add.w	r2, r0, #211	; 0xd3
    a226:	490a      	ldr	r1, [pc, #40]	; (a250 <sc_smp_check_confirm+0x60>)
    a228:	30f3      	adds	r0, #243	; 0xf3
    a22a:	f7ff ffa5 	bl	a178 <smp_f4>
    a22e:	b110      	cbz	r0, a236 <sc_smp_check_confirm+0x46>
		return BT_SMP_ERR_UNSPECIFIED;
    a230:	2008      	movs	r0, #8
}
    a232:	b006      	add	sp, #24
    a234:	bd10      	pop	{r4, pc}
	if (memcmp(smp->pcnf, cfm, 16)) {
    a236:	2210      	movs	r2, #16
    a238:	a902      	add	r1, sp, #8
    a23a:	f104 00b3 	add.w	r0, r4, #179	; 0xb3
    a23e:	f020 fb8d 	bl	2a95c <memcmp>
    a242:	b118      	cbz	r0, a24c <sc_smp_check_confirm+0x5c>
		return BT_SMP_ERR_CONFIRM_FAILED;
    a244:	2004      	movs	r0, #4
    a246:	e7f4      	b.n	a232 <sc_smp_check_confirm+0x42>
		return BT_SMP_ERR_UNSPECIFIED;
    a248:	2008      	movs	r0, #8
    a24a:	4770      	bx	lr
	return 0;
    a24c:	2000      	movs	r0, #0
    a24e:	e7f0      	b.n	a232 <sc_smp_check_confirm+0x42>
    a250:	200008f8 	.word	0x200008f8

0000a254 <smp_f5>:
{
    a254:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    a258:	b09b      	sub	sp, #108	; 0x6c
    a25a:	4604      	mov	r4, r0
    a25c:	460e      	mov	r6, r1
    a25e:	4615      	mov	r5, r2
    a260:	461f      	mov	r7, r3
    a262:	f8dd 808c 	ldr.w	r8, [sp, #140]	; 0x8c
    a266:	f8dd 9090 	ldr.w	r9, [sp, #144]	; 0x90
	u8_t m[53] = { 0x00, /* counter */
    a26a:	2235      	movs	r2, #53	; 0x35
    a26c:	2100      	movs	r1, #0
    a26e:	a80c      	add	r0, sp, #48	; 0x30
    a270:	f020 fc08 	bl	2aa84 <memset>
    a274:	2362      	movs	r3, #98	; 0x62
    a276:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    a27a:	2374      	movs	r3, #116	; 0x74
    a27c:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    a280:	236c      	movs	r3, #108	; 0x6c
    a282:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    a286:	2365      	movs	r3, #101	; 0x65
    a288:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
    a28c:	2301      	movs	r3, #1
    a28e:	f88d 3063 	strb.w	r3, [sp, #99]	; 0x63
	src += length - 1;
    a292:	f104 001f 	add.w	r0, r4, #31
    a296:	2320      	movs	r3, #32
    a298:	466a      	mov	r2, sp
    a29a:	e004      	b.n	a2a6 <smp_f5+0x52>
		*((u8_t *)dst++) = *((u8_t *)src--);
    a29c:	7801      	ldrb	r1, [r0, #0]
    a29e:	7011      	strb	r1, [r2, #0]
	for (; length > 0; length--) {
    a2a0:	3b01      	subs	r3, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    a2a2:	3801      	subs	r0, #1
    a2a4:	3201      	adds	r2, #1
	for (; length > 0; length--) {
    a2a6:	2b00      	cmp	r3, #0
    a2a8:	d1f8      	bne.n	a29c <smp_f5+0x48>
	err = bt_smp_aes_cmac(salt, ws, 32, t);
    a2aa:	ab08      	add	r3, sp, #32
    a2ac:	2220      	movs	r2, #32
    a2ae:	4669      	mov	r1, sp
    a2b0:	4838      	ldr	r0, [pc, #224]	; (a394 <smp_f5+0x140>)
    a2b2:	f7ff fef1 	bl	a098 <bt_smp_aes_cmac>
	if (err) {
    a2b6:	4686      	mov	lr, r0
    a2b8:	2800      	cmp	r0, #0
    a2ba:	d166      	bne.n	a38a <smp_f5+0x136>
	src += length - 1;
    a2bc:	360f      	adds	r6, #15
    a2be:	2310      	movs	r3, #16
    a2c0:	f10d 0235 	add.w	r2, sp, #53	; 0x35
    a2c4:	e004      	b.n	a2d0 <smp_f5+0x7c>
		*((u8_t *)dst++) = *((u8_t *)src--);
    a2c6:	7831      	ldrb	r1, [r6, #0]
    a2c8:	7011      	strb	r1, [r2, #0]
	for (; length > 0; length--) {
    a2ca:	3b01      	subs	r3, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    a2cc:	3e01      	subs	r6, #1
    a2ce:	3201      	adds	r2, #1
	for (; length > 0; length--) {
    a2d0:	2b00      	cmp	r3, #0
    a2d2:	d1f8      	bne.n	a2c6 <smp_f5+0x72>
	src += length - 1;
    a2d4:	350f      	adds	r5, #15
    a2d6:	2310      	movs	r3, #16
    a2d8:	f10d 0245 	add.w	r2, sp, #69	; 0x45
    a2dc:	e004      	b.n	a2e8 <smp_f5+0x94>
		*((u8_t *)dst++) = *((u8_t *)src--);
    a2de:	7829      	ldrb	r1, [r5, #0]
    a2e0:	7011      	strb	r1, [r2, #0]
	for (; length > 0; length--) {
    a2e2:	3b01      	subs	r3, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    a2e4:	3d01      	subs	r5, #1
    a2e6:	3201      	adds	r2, #1
	for (; length > 0; length--) {
    a2e8:	2b00      	cmp	r3, #0
    a2ea:	d1f8      	bne.n	a2de <smp_f5+0x8a>
	m[37] = a1->type;
    a2ec:	f817 3b06 	ldrb.w	r3, [r7], #6
    a2f0:	f88d 3055 	strb.w	r3, [sp, #85]	; 0x55
	src += length - 1;
    a2f4:	2306      	movs	r3, #6
    a2f6:	f10d 0256 	add.w	r2, sp, #86	; 0x56
    a2fa:	e004      	b.n	a306 <smp_f5+0xb2>
		*((u8_t *)dst++) = *((u8_t *)src--);
    a2fc:	7839      	ldrb	r1, [r7, #0]
    a2fe:	7011      	strb	r1, [r2, #0]
	for (; length > 0; length--) {
    a300:	3b01      	subs	r3, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    a302:	3f01      	subs	r7, #1
    a304:	3201      	adds	r2, #1
	for (; length > 0; length--) {
    a306:	2b00      	cmp	r3, #0
    a308:	d1f8      	bne.n	a2fc <smp_f5+0xa8>
	m[44] = a2->type;
    a30a:	9b22      	ldr	r3, [sp, #136]	; 0x88
    a30c:	f813 2b06 	ldrb.w	r2, [r3], #6
    a310:	f88d 205c 	strb.w	r2, [sp, #92]	; 0x5c
	src += length - 1;
    a314:	2406      	movs	r4, #6
    a316:	f10d 025d 	add.w	r2, sp, #93	; 0x5d
    a31a:	e004      	b.n	a326 <smp_f5+0xd2>
		*((u8_t *)dst++) = *((u8_t *)src--);
    a31c:	7819      	ldrb	r1, [r3, #0]
    a31e:	7011      	strb	r1, [r2, #0]
	for (; length > 0; length--) {
    a320:	3c01      	subs	r4, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    a322:	3b01      	subs	r3, #1
    a324:	3201      	adds	r2, #1
	for (; length > 0; length--) {
    a326:	2c00      	cmp	r4, #0
    a328:	d1f8      	bne.n	a31c <smp_f5+0xc8>
	err = bt_smp_aes_cmac(t, m, sizeof(m), mackey);
    a32a:	4643      	mov	r3, r8
    a32c:	2235      	movs	r2, #53	; 0x35
    a32e:	a90c      	add	r1, sp, #48	; 0x30
    a330:	a808      	add	r0, sp, #32
    a332:	f7ff feb1 	bl	a098 <bt_smp_aes_cmac>
	if (err) {
    a336:	4686      	mov	lr, r0
    a338:	bb38      	cbnz	r0, a38a <smp_f5+0x136>
    a33a:	4623      	mov	r3, r4
    a33c:	e00a      	b.n	a354 <smp_f5+0x100>
		u8_t tmp = ((u8_t *)buf)[i];
    a33e:	f818 1003 	ldrb.w	r1, [r8, r3]
		((u8_t *)buf)[i] = ((u8_t *)buf)[length - 1 - i];
    a342:	f1c3 020f 	rsb	r2, r3, #15
    a346:	f818 0002 	ldrb.w	r0, [r8, r2]
    a34a:	f808 0003 	strb.w	r0, [r8, r3]
		((u8_t *)buf)[length - 1 - i] = tmp;
    a34e:	f808 1002 	strb.w	r1, [r8, r2]
	for (i = 0; i < (length/2); i++) {
    a352:	3301      	adds	r3, #1
    a354:	2b07      	cmp	r3, #7
    a356:	d9f2      	bls.n	a33e <smp_f5+0xea>
	m[0] = 0x01;
    a358:	a91a      	add	r1, sp, #104	; 0x68
    a35a:	2301      	movs	r3, #1
    a35c:	f801 3d38 	strb.w	r3, [r1, #-56]!
	err = bt_smp_aes_cmac(t, m, sizeof(m), ltk);
    a360:	464b      	mov	r3, r9
    a362:	2235      	movs	r2, #53	; 0x35
    a364:	a808      	add	r0, sp, #32
    a366:	f7ff fe97 	bl	a098 <bt_smp_aes_cmac>
	if (err) {
    a36a:	4686      	mov	lr, r0
    a36c:	b158      	cbz	r0, a386 <smp_f5+0x132>
    a36e:	e00c      	b.n	a38a <smp_f5+0x136>
		u8_t tmp = ((u8_t *)buf)[i];
    a370:	f819 2004 	ldrb.w	r2, [r9, r4]
		((u8_t *)buf)[i] = ((u8_t *)buf)[length - 1 - i];
    a374:	f1c4 030f 	rsb	r3, r4, #15
    a378:	f819 1003 	ldrb.w	r1, [r9, r3]
    a37c:	f809 1004 	strb.w	r1, [r9, r4]
		((u8_t *)buf)[length - 1 - i] = tmp;
    a380:	f809 2003 	strb.w	r2, [r9, r3]
	for (i = 0; i < (length/2); i++) {
    a384:	3401      	adds	r4, #1
    a386:	2c07      	cmp	r4, #7
    a388:	d9f2      	bls.n	a370 <smp_f5+0x11c>
}
    a38a:	4670      	mov	r0, lr
    a38c:	b01b      	add	sp, #108	; 0x6c
    a38e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    a392:	bf00      	nop
    a394:	0002f604 	.word	0x0002f604

0000a398 <smp_f6>:
{
    a398:	b5f0      	push	{r4, r5, r6, r7, lr}
    a39a:	b097      	sub	sp, #92	; 0x5c
    a39c:	4604      	mov	r4, r0
    a39e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
    a3a0:	9d1e      	ldr	r5, [sp, #120]	; 0x78
    a3a2:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
	src += length - 1;
    a3a4:	310f      	adds	r1, #15
    a3a6:	2010      	movs	r0, #16
    a3a8:	f10d 0e04 	add.w	lr, sp, #4
    a3ac:	e007      	b.n	a3be <smp_f6+0x26>
		*((u8_t *)dst++) = *((u8_t *)src--);
    a3ae:	f891 c000 	ldrb.w	ip, [r1]
    a3b2:	f88e c000 	strb.w	ip, [lr]
	for (; length > 0; length--) {
    a3b6:	3801      	subs	r0, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    a3b8:	3901      	subs	r1, #1
    a3ba:	f10e 0e01 	add.w	lr, lr, #1
	for (; length > 0; length--) {
    a3be:	2800      	cmp	r0, #0
    a3c0:	d1f5      	bne.n	a3ae <smp_f6+0x16>
	src += length - 1;
    a3c2:	320f      	adds	r2, #15
    a3c4:	2110      	movs	r1, #16
    a3c6:	a805      	add	r0, sp, #20
    a3c8:	e006      	b.n	a3d8 <smp_f6+0x40>
		*((u8_t *)dst++) = *((u8_t *)src--);
    a3ca:	f892 e000 	ldrb.w	lr, [r2]
    a3ce:	f880 e000 	strb.w	lr, [r0]
	for (; length > 0; length--) {
    a3d2:	3901      	subs	r1, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    a3d4:	3a01      	subs	r2, #1
    a3d6:	3001      	adds	r0, #1
	for (; length > 0; length--) {
    a3d8:	2900      	cmp	r1, #0
    a3da:	d1f6      	bne.n	a3ca <smp_f6+0x32>
	src += length - 1;
    a3dc:	330f      	adds	r3, #15
    a3de:	2210      	movs	r2, #16
    a3e0:	a909      	add	r1, sp, #36	; 0x24
    a3e2:	e004      	b.n	a3ee <smp_f6+0x56>
		*((u8_t *)dst++) = *((u8_t *)src--);
    a3e4:	7818      	ldrb	r0, [r3, #0]
    a3e6:	7008      	strb	r0, [r1, #0]
	for (; length > 0; length--) {
    a3e8:	3a01      	subs	r2, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    a3ea:	3b01      	subs	r3, #1
    a3ec:	3101      	adds	r1, #1
	for (; length > 0; length--) {
    a3ee:	2a00      	cmp	r2, #0
    a3f0:	d1f8      	bne.n	a3e4 <smp_f6+0x4c>
	src += length - 1;
    a3f2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    a3f4:	3302      	adds	r3, #2
    a3f6:	2203      	movs	r2, #3
    a3f8:	a90d      	add	r1, sp, #52	; 0x34
    a3fa:	e004      	b.n	a406 <smp_f6+0x6e>
		*((u8_t *)dst++) = *((u8_t *)src--);
    a3fc:	7818      	ldrb	r0, [r3, #0]
    a3fe:	7008      	strb	r0, [r1, #0]
	for (; length > 0; length--) {
    a400:	3a01      	subs	r2, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    a402:	3b01      	subs	r3, #1
    a404:	3101      	adds	r1, #1
	for (; length > 0; length--) {
    a406:	2a00      	cmp	r2, #0
    a408:	d1f8      	bne.n	a3fc <smp_f6+0x64>
	m[51] = a1->type;
    a40a:	4631      	mov	r1, r6
    a40c:	f811 3b01 	ldrb.w	r3, [r1], #1
    a410:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
	memcpy(m + 52, a1->a.val, 6);
    a414:	2206      	movs	r2, #6
    a416:	a80e      	add	r0, sp, #56	; 0x38
    a418:	f7f5 ff52 	bl	2c0 <memcpy>
	src += length - 1;
    a41c:	3606      	adds	r6, #6
    a41e:	2306      	movs	r3, #6
    a420:	aa0e      	add	r2, sp, #56	; 0x38
    a422:	e004      	b.n	a42e <smp_f6+0x96>
		*((u8_t *)dst++) = *((u8_t *)src--);
    a424:	7831      	ldrb	r1, [r6, #0]
    a426:	7011      	strb	r1, [r2, #0]
	for (; length > 0; length--) {
    a428:	3b01      	subs	r3, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    a42a:	3e01      	subs	r6, #1
    a42c:	3201      	adds	r2, #1
	for (; length > 0; length--) {
    a42e:	2b00      	cmp	r3, #0
    a430:	d1f8      	bne.n	a424 <smp_f6+0x8c>
	m[58] = a2->type;
    a432:	4629      	mov	r1, r5
    a434:	f811 3b01 	ldrb.w	r3, [r1], #1
    a438:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
	memcpy(m + 59, a2->a.val, 6);
    a43c:	2206      	movs	r2, #6
    a43e:	f10d 003f 	add.w	r0, sp, #63	; 0x3f
    a442:	f7f5 ff3d 	bl	2c0 <memcpy>
	src += length - 1;
    a446:	3506      	adds	r5, #6
    a448:	2306      	movs	r3, #6
    a44a:	f10d 023f 	add.w	r2, sp, #63	; 0x3f
    a44e:	e004      	b.n	a45a <smp_f6+0xc2>
		*((u8_t *)dst++) = *((u8_t *)src--);
    a450:	7829      	ldrb	r1, [r5, #0]
    a452:	7011      	strb	r1, [r2, #0]
	for (; length > 0; length--) {
    a454:	3b01      	subs	r3, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    a456:	3d01      	subs	r5, #1
    a458:	3201      	adds	r2, #1
	for (; length > 0; length--) {
    a45a:	2b00      	cmp	r3, #0
    a45c:	d1f8      	bne.n	a450 <smp_f6+0xb8>
	src += length - 1;
    a45e:	f104 000f 	add.w	r0, r4, #15
    a462:	2410      	movs	r4, #16
    a464:	ab12      	add	r3, sp, #72	; 0x48
    a466:	e004      	b.n	a472 <smp_f6+0xda>
		*((u8_t *)dst++) = *((u8_t *)src--);
    a468:	7802      	ldrb	r2, [r0, #0]
    a46a:	701a      	strb	r2, [r3, #0]
	for (; length > 0; length--) {
    a46c:	3c01      	subs	r4, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    a46e:	3801      	subs	r0, #1
    a470:	3301      	adds	r3, #1
	for (; length > 0; length--) {
    a472:	2c00      	cmp	r4, #0
    a474:	d1f8      	bne.n	a468 <smp_f6+0xd0>
	err = bt_smp_aes_cmac(ws, m, sizeof(m), check);
    a476:	463b      	mov	r3, r7
    a478:	2241      	movs	r2, #65	; 0x41
    a47a:	a901      	add	r1, sp, #4
    a47c:	a812      	add	r0, sp, #72	; 0x48
    a47e:	f7ff fe0b 	bl	a098 <bt_smp_aes_cmac>
	if (err) {
    a482:	4605      	mov	r5, r0
    a484:	b138      	cbz	r0, a496 <smp_f6+0xfe>
    a486:	e008      	b.n	a49a <smp_f6+0x102>
		u8_t tmp = ((u8_t *)buf)[i];
    a488:	5d3a      	ldrb	r2, [r7, r4]
		((u8_t *)buf)[i] = ((u8_t *)buf)[length - 1 - i];
    a48a:	f1c4 030f 	rsb	r3, r4, #15
    a48e:	5cf9      	ldrb	r1, [r7, r3]
    a490:	5539      	strb	r1, [r7, r4]
		((u8_t *)buf)[length - 1 - i] = tmp;
    a492:	54fa      	strb	r2, [r7, r3]
	for (i = 0; i < (length/2); i++) {
    a494:	3401      	adds	r4, #1
    a496:	2c07      	cmp	r4, #7
    a498:	d9f6      	bls.n	a488 <smp_f6+0xf0>
}
    a49a:	4628      	mov	r0, r5
    a49c:	b017      	add	sp, #92	; 0x5c
    a49e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000a4a0 <compute_and_send_master_dhcheck>:
{
    a4a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    a4a2:	b08d      	sub	sp, #52	; 0x34
    a4a4:	4604      	mov	r4, r0
	memset(r, 0, sizeof(r));
    a4a6:	2210      	movs	r2, #16
    a4a8:	2100      	movs	r1, #0
    a4aa:	eb0d 0002 	add.w	r0, sp, r2
    a4ae:	f020 fae9 	bl	2aa84 <memset>
	switch (smp->method) {
    a4b2:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    a4b6:	2b03      	cmp	r3, #3
    a4b8:	d84a      	bhi.n	a550 <compute_and_send_master_dhcheck+0xb0>
    a4ba:	e8df f003 	tbb	[pc, r3]
    a4be:	0208      	.short	0x0208
    a4c0:	0802      	.short	0x0802
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
    a4c2:	2204      	movs	r2, #4
    a4c4:	f504 71ba 	add.w	r1, r4, #372	; 0x174
    a4c8:	a804      	add	r0, sp, #16
    a4ca:	f7f5 fef9 	bl	2c0 <memcpy>
	if (smp_f5(smp->dhkey, smp->prnd, smp->rrnd,
    a4ce:	f104 06c3 	add.w	r6, r4, #195	; 0xc3
    a4d2:	f104 07d3 	add.w	r7, r4, #211	; 0xd3
		   &smp->chan.chan.conn->le.init_addr,
    a4d6:	6823      	ldr	r3, [r4, #0]
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
    a4d8:	f103 0256 	add.w	r2, r3, #86	; 0x56
    a4dc:	f204 1563 	addw	r5, r4, #355	; 0x163
		   smp->tk)) {
    a4e0:	f104 01e3 	add.w	r1, r4, #227	; 0xe3
	if (smp_f5(smp->dhkey, smp->prnd, smp->rrnd,
    a4e4:	9102      	str	r1, [sp, #8]
    a4e6:	9501      	str	r5, [sp, #4]
    a4e8:	9200      	str	r2, [sp, #0]
    a4ea:	334f      	adds	r3, #79	; 0x4f
    a4ec:	463a      	mov	r2, r7
    a4ee:	4631      	mov	r1, r6
    a4f0:	f204 1033 	addw	r0, r4, #307	; 0x133
    a4f4:	f7ff feae 	bl	a254 <smp_f5>
    a4f8:	b110      	cbz	r0, a500 <compute_and_send_master_dhcheck+0x60>
		return BT_SMP_ERR_UNSPECIFIED;
    a4fa:	2008      	movs	r0, #8
}
    a4fc:	b00d      	add	sp, #52	; 0x34
    a4fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->preq[1],
    a500:	f104 02a6 	add.w	r2, r4, #166	; 0xa6
		   &smp->chan.chan.conn->le.init_addr,
    a504:	6823      	ldr	r3, [r4, #0]
    a506:	f103 014f 	add.w	r1, r3, #79	; 0x4f
		   &smp->chan.chan.conn->le.resp_addr, e)) {
    a50a:	3356      	adds	r3, #86	; 0x56
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->preq[1],
    a50c:	a808      	add	r0, sp, #32
    a50e:	9003      	str	r0, [sp, #12]
    a510:	9302      	str	r3, [sp, #8]
    a512:	9101      	str	r1, [sp, #4]
    a514:	9200      	str	r2, [sp, #0]
    a516:	ab04      	add	r3, sp, #16
    a518:	463a      	mov	r2, r7
    a51a:	4631      	mov	r1, r6
    a51c:	4628      	mov	r0, r5
    a51e:	f7ff ff3b 	bl	a398 <smp_f6>
    a522:	b108      	cbz	r0, a528 <compute_and_send_master_dhcheck+0x88>
		return BT_SMP_ERR_UNSPECIFIED;
    a524:	2008      	movs	r0, #8
    a526:	e7e9      	b.n	a4fc <compute_and_send_master_dhcheck+0x5c>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
    a528:	f104 039c 	add.w	r3, r4, #156	; 0x9c
    a52c:	f3bf 8f5b 	dmb	ish
    a530:	e853 2f00 	ldrex	r2, [r3]
    a534:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    a538:	e843 2100 	strex	r1, r2, [r3]
    a53c:	2900      	cmp	r1, #0
    a53e:	d1f7      	bne.n	a530 <compute_and_send_master_dhcheck+0x90>
    a540:	f3bf 8f5b 	dmb	ish
	sc_smp_send_dhkey_check(smp, e);
    a544:	a908      	add	r1, sp, #32
    a546:	4620      	mov	r0, r4
    a548:	f7ff fd30 	bl	9fac <sc_smp_send_dhkey_check>
	return 0;
    a54c:	2000      	movs	r0, #0
    a54e:	e7d5      	b.n	a4fc <compute_and_send_master_dhcheck+0x5c>
		return BT_SMP_ERR_UNSPECIFIED;
    a550:	2008      	movs	r0, #8
    a552:	e7d3      	b.n	a4fc <compute_and_send_master_dhcheck+0x5c>

0000a554 <compute_and_check_and_send_slave_dhcheck>:
{
    a554:	b5f0      	push	{r4, r5, r6, r7, lr}
    a556:	b091      	sub	sp, #68	; 0x44
    a558:	4604      	mov	r4, r0
	memset(r, 0, sizeof(r));
    a55a:	2210      	movs	r2, #16
    a55c:	2100      	movs	r1, #0
    a55e:	eb0d 0002 	add.w	r0, sp, r2
    a562:	f020 fa8f 	bl	2aa84 <memset>
	switch (smp->method) {
    a566:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    a56a:	2b03      	cmp	r3, #3
    a56c:	d866      	bhi.n	a63c <compute_and_check_and_send_slave_dhcheck+0xe8>
    a56e:	e8df f003 	tbb	[pc, r3]
    a572:	0208      	.short	0x0208
    a574:	0802      	.short	0x0802
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
    a576:	2204      	movs	r2, #4
    a578:	f504 71ba 	add.w	r1, r4, #372	; 0x174
    a57c:	a804      	add	r0, sp, #16
    a57e:	f7f5 fe9f 	bl	2c0 <memcpy>
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
    a582:	f104 06d3 	add.w	r6, r4, #211	; 0xd3
    a586:	f104 07c3 	add.w	r7, r4, #195	; 0xc3
		   &smp->chan.chan.conn->le.init_addr,
    a58a:	6823      	ldr	r3, [r4, #0]
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
    a58c:	f103 0256 	add.w	r2, r3, #86	; 0x56
    a590:	f204 1563 	addw	r5, r4, #355	; 0x163
		   smp->tk)) {
    a594:	f104 01e3 	add.w	r1, r4, #227	; 0xe3
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
    a598:	9102      	str	r1, [sp, #8]
    a59a:	9501      	str	r5, [sp, #4]
    a59c:	9200      	str	r2, [sp, #0]
    a59e:	334f      	adds	r3, #79	; 0x4f
    a5a0:	463a      	mov	r2, r7
    a5a2:	4631      	mov	r1, r6
    a5a4:	f204 1033 	addw	r0, r4, #307	; 0x133
    a5a8:	f7ff fe54 	bl	a254 <smp_f5>
    a5ac:	b110      	cbz	r0, a5b4 <compute_and_check_and_send_slave_dhcheck+0x60>
		return BT_SMP_ERR_UNSPECIFIED;
    a5ae:	2008      	movs	r0, #8
}
    a5b0:	b011      	add	sp, #68	; 0x44
    a5b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
    a5b4:	f104 02ad 	add.w	r2, r4, #173	; 0xad
		   &smp->chan.chan.conn->le.resp_addr,
    a5b8:	6823      	ldr	r3, [r4, #0]
    a5ba:	f103 0156 	add.w	r1, r3, #86	; 0x56
		   &smp->chan.chan.conn->le.init_addr, e)) {
    a5be:	334f      	adds	r3, #79	; 0x4f
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
    a5c0:	a808      	add	r0, sp, #32
    a5c2:	9003      	str	r0, [sp, #12]
    a5c4:	9302      	str	r3, [sp, #8]
    a5c6:	9101      	str	r1, [sp, #4]
    a5c8:	9200      	str	r2, [sp, #0]
    a5ca:	ab04      	add	r3, sp, #16
    a5cc:	4632      	mov	r2, r6
    a5ce:	4639      	mov	r1, r7
    a5d0:	4628      	mov	r0, r5
    a5d2:	f7ff fee1 	bl	a398 <smp_f6>
    a5d6:	b108      	cbz	r0, a5dc <compute_and_check_and_send_slave_dhcheck+0x88>
		return BT_SMP_ERR_UNSPECIFIED;
    a5d8:	2008      	movs	r0, #8
    a5da:	e7e9      	b.n	a5b0 <compute_and_check_and_send_slave_dhcheck+0x5c>
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
    a5dc:	f104 02a6 	add.w	r2, r4, #166	; 0xa6
		   &smp->chan.chan.conn->le.init_addr,
    a5e0:	6823      	ldr	r3, [r4, #0]
    a5e2:	f103 014f 	add.w	r1, r3, #79	; 0x4f
		   &smp->chan.chan.conn->le.resp_addr, re)) {
    a5e6:	3356      	adds	r3, #86	; 0x56
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
    a5e8:	a80c      	add	r0, sp, #48	; 0x30
    a5ea:	9003      	str	r0, [sp, #12]
    a5ec:	9302      	str	r3, [sp, #8]
    a5ee:	9101      	str	r1, [sp, #4]
    a5f0:	9200      	str	r2, [sp, #0]
    a5f2:	ab04      	add	r3, sp, #16
    a5f4:	463a      	mov	r2, r7
    a5f6:	4631      	mov	r1, r6
    a5f8:	4628      	mov	r0, r5
    a5fa:	f7ff fecd 	bl	a398 <smp_f6>
    a5fe:	b108      	cbz	r0, a604 <compute_and_check_and_send_slave_dhcheck+0xb0>
		return BT_SMP_ERR_UNSPECIFIED;
    a600:	2008      	movs	r0, #8
    a602:	e7d5      	b.n	a5b0 <compute_and_check_and_send_slave_dhcheck+0x5c>
	if (memcmp(smp->e, re, 16)) {
    a604:	2210      	movs	r2, #16
    a606:	a90c      	add	r1, sp, #48	; 0x30
    a608:	f204 1053 	addw	r0, r4, #339	; 0x153
    a60c:	f020 f9a6 	bl	2a95c <memcmp>
    a610:	b108      	cbz	r0, a616 <compute_and_check_and_send_slave_dhcheck+0xc2>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
    a612:	200b      	movs	r0, #11
    a614:	e7cc      	b.n	a5b0 <compute_and_check_and_send_slave_dhcheck+0x5c>
	sc_smp_send_dhkey_check(smp, e);
    a616:	a908      	add	r1, sp, #32
    a618:	4620      	mov	r0, r4
    a61a:	f7ff fcc7 	bl	9fac <sc_smp_send_dhkey_check>
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    a61e:	34a0      	adds	r4, #160	; 0xa0
    a620:	f3bf 8f5b 	dmb	ish
    a624:	e854 3f00 	ldrex	r3, [r4]
    a628:	f043 0302 	orr.w	r3, r3, #2
    a62c:	e844 3200 	strex	r2, r3, [r4]
    a630:	2a00      	cmp	r2, #0
    a632:	d1f7      	bne.n	a624 <compute_and_check_and_send_slave_dhcheck+0xd0>
    a634:	f3bf 8f5b 	dmb	ish
	return 0;
    a638:	2000      	movs	r0, #0
    a63a:	e7b9      	b.n	a5b0 <compute_and_check_and_send_slave_dhcheck+0x5c>
		return BT_SMP_ERR_UNSPECIFIED;
    a63c:	2008      	movs	r0, #8
    a63e:	e7b7      	b.n	a5b0 <compute_and_check_and_send_slave_dhcheck+0x5c>

0000a640 <smp_g2>:
{
    a640:	b5f0      	push	{r4, r5, r6, r7, lr}
    a642:	b099      	sub	sp, #100	; 0x64
    a644:	9c1e      	ldr	r4, [sp, #120]	; 0x78
	src += length - 1;
    a646:	301f      	adds	r0, #31
    a648:	2520      	movs	r5, #32
    a64a:	ae04      	add	r6, sp, #16
    a64c:	e004      	b.n	a658 <smp_g2+0x18>
		*((u8_t *)dst++) = *((u8_t *)src--);
    a64e:	7807      	ldrb	r7, [r0, #0]
    a650:	7037      	strb	r7, [r6, #0]
	for (; length > 0; length--) {
    a652:	3d01      	subs	r5, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    a654:	3801      	subs	r0, #1
    a656:	3601      	adds	r6, #1
	for (; length > 0; length--) {
    a658:	2d00      	cmp	r5, #0
    a65a:	d1f8      	bne.n	a64e <smp_g2+0xe>
	src += length - 1;
    a65c:	311f      	adds	r1, #31
    a65e:	2020      	movs	r0, #32
    a660:	ad0c      	add	r5, sp, #48	; 0x30
    a662:	e004      	b.n	a66e <smp_g2+0x2e>
		*((u8_t *)dst++) = *((u8_t *)src--);
    a664:	780e      	ldrb	r6, [r1, #0]
    a666:	702e      	strb	r6, [r5, #0]
	for (; length > 0; length--) {
    a668:	3801      	subs	r0, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    a66a:	3901      	subs	r1, #1
    a66c:	3501      	adds	r5, #1
	for (; length > 0; length--) {
    a66e:	2800      	cmp	r0, #0
    a670:	d1f8      	bne.n	a664 <smp_g2+0x24>
	src += length - 1;
    a672:	330f      	adds	r3, #15
    a674:	2110      	movs	r1, #16
    a676:	a814      	add	r0, sp, #80	; 0x50
    a678:	e004      	b.n	a684 <smp_g2+0x44>
		*((u8_t *)dst++) = *((u8_t *)src--);
    a67a:	781d      	ldrb	r5, [r3, #0]
    a67c:	7005      	strb	r5, [r0, #0]
	for (; length > 0; length--) {
    a67e:	3901      	subs	r1, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    a680:	3b01      	subs	r3, #1
    a682:	3001      	adds	r0, #1
	for (; length > 0; length--) {
    a684:	2900      	cmp	r1, #0
    a686:	d1f8      	bne.n	a67a <smp_g2+0x3a>
	src += length - 1;
    a688:	320f      	adds	r2, #15
    a68a:	2310      	movs	r3, #16
    a68c:	4669      	mov	r1, sp
    a68e:	e004      	b.n	a69a <smp_g2+0x5a>
		*((u8_t *)dst++) = *((u8_t *)src--);
    a690:	7810      	ldrb	r0, [r2, #0]
    a692:	7008      	strb	r0, [r1, #0]
	for (; length > 0; length--) {
    a694:	3b01      	subs	r3, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    a696:	3a01      	subs	r2, #1
    a698:	3101      	adds	r1, #1
	for (; length > 0; length--) {
    a69a:	2b00      	cmp	r3, #0
    a69c:	d1f8      	bne.n	a690 <smp_g2+0x50>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), xs);
    a69e:	466b      	mov	r3, sp
    a6a0:	2250      	movs	r2, #80	; 0x50
    a6a2:	a904      	add	r1, sp, #16
    a6a4:	4668      	mov	r0, sp
    a6a6:	f7ff fcf7 	bl	a098 <bt_smp_aes_cmac>
	if (err) {
    a6aa:	4605      	mov	r5, r0
    a6ac:	b110      	cbz	r0, a6b4 <smp_g2+0x74>
}
    a6ae:	4628      	mov	r0, r5
    a6b0:	b019      	add	sp, #100	; 0x64
    a6b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	memcpy(passkey, xs + 12, 4);
    a6b4:	2204      	movs	r2, #4
    a6b6:	a903      	add	r1, sp, #12
    a6b8:	4620      	mov	r0, r4
    a6ba:	f7f5 fe01 	bl	2c0 <memcpy>
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
    a6be:	6822      	ldr	r2, [r4, #0]
    a6c0:	0a13      	lsrs	r3, r2, #8
    a6c2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    a6c6:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    a6ca:	0211      	lsls	r1, r2, #8
    a6cc:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
    a6d0:	430b      	orrs	r3, r1
    a6d2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    a6d6:	4a04      	ldr	r2, [pc, #16]	; (a6e8 <smp_g2+0xa8>)
    a6d8:	fba2 1203 	umull	r1, r2, r2, r3
    a6dc:	0c92      	lsrs	r2, r2, #18
    a6de:	4903      	ldr	r1, [pc, #12]	; (a6ec <smp_g2+0xac>)
    a6e0:	fb01 3212 	mls	r2, r1, r2, r3
    a6e4:	6022      	str	r2, [r4, #0]
	return 0;
    a6e6:	e7e2      	b.n	a6ae <smp_g2+0x6e>
    a6e8:	431bde83 	.word	0x431bde83
    a6ec:	000f4240 	.word	0x000f4240

0000a6f0 <smp_send_pairing_confirm>:
{
    a6f0:	b570      	push	{r4, r5, r6, lr}
    a6f2:	b082      	sub	sp, #8
	struct bt_conn *conn = smp->chan.chan.conn;
    a6f4:	6806      	ldr	r6, [r0, #0]
	switch (smp->method) {
    a6f6:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
    a6fa:	2b03      	cmp	r3, #3
    a6fc:	d83f      	bhi.n	a77e <smp_send_pairing_confirm+0x8e>
    a6fe:	e8df f003 	tbb	[pc, r3]
    a702:	020d      	.short	0x020d
    a704:	0d02      	.short	0x0d02
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    a706:	f8d0 5174 	ldr.w	r5, [r0, #372]	; 0x174
    a70a:	f890 3178 	ldrb.w	r3, [r0, #376]	; 0x178
    a70e:	40dd      	lsrs	r5, r3
    a710:	f005 0501 	and.w	r5, r5, #1
		r |= 0x80;
    a714:	f065 057f 	orn	r5, r5, #127	; 0x7f
    a718:	b2ed      	uxtb	r5, r5
		break;
    a71a:	e000      	b.n	a71e <smp_send_pairing_confirm+0x2e>
		r = 0;
    a71c:	2500      	movs	r5, #0
    a71e:	4604      	mov	r4, r0
	buf = smp_create_pdu(conn, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
    a720:	2210      	movs	r2, #16
    a722:	2103      	movs	r1, #3
    a724:	4630      	mov	r0, r6
    a726:	f7ff fbdc 	bl	9ee2 <smp_create_pdu>
	if (!buf) {
    a72a:	4606      	mov	r6, r0
    a72c:	b348      	cbz	r0, a782 <smp_send_pairing_confirm+0x92>
	req = net_buf_add(buf, sizeof(*req));
    a72e:	2110      	movs	r1, #16
    a730:	3008      	adds	r0, #8
    a732:	f00f fd33 	bl	1a19c <net_buf_simple_add>
	if (smp_f4(sc_public_key, smp->pkey, smp->prnd, r, req->val)) {
    a736:	9000      	str	r0, [sp, #0]
    a738:	462b      	mov	r3, r5
    a73a:	f104 02c3 	add.w	r2, r4, #195	; 0xc3
    a73e:	f104 01f3 	add.w	r1, r4, #243	; 0xf3
    a742:	4811      	ldr	r0, [pc, #68]	; (a788 <smp_send_pairing_confirm+0x98>)
    a744:	f7ff fd18 	bl	a178 <smp_f4>
    a748:	b120      	cbz	r0, a754 <smp_send_pairing_confirm+0x64>
		net_buf_unref(buf);
    a74a:	4630      	mov	r0, r6
    a74c:	f00f fcda 	bl	1a104 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
    a750:	2008      	movs	r0, #8
    a752:	e017      	b.n	a784 <smp_send_pairing_confirm+0x94>
	smp_send(smp, buf, NULL);
    a754:	2200      	movs	r2, #0
    a756:	4631      	mov	r1, r6
    a758:	4620      	mov	r0, r4
    a75a:	f7ff fc15 	bl	9f88 <smp_send>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
    a75e:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    a762:	f3bf 8f5b 	dmb	ish
    a766:	e850 3f00 	ldrex	r3, [r0]
    a76a:	f023 0301 	bic.w	r3, r3, #1
    a76e:	e840 3200 	strex	r2, r3, [r0]
    a772:	2a00      	cmp	r2, #0
    a774:	d1f7      	bne.n	a766 <smp_send_pairing_confirm+0x76>
    a776:	f3bf 8f5b 	dmb	ish
	return 0;
    a77a:	2000      	movs	r0, #0
    a77c:	e002      	b.n	a784 <smp_send_pairing_confirm+0x94>
		return BT_SMP_ERR_UNSPECIFIED;
    a77e:	2008      	movs	r0, #8
    a780:	e000      	b.n	a784 <smp_send_pairing_confirm+0x94>
		return BT_SMP_ERR_UNSPECIFIED;
    a782:	2008      	movs	r0, #8
}
    a784:	b002      	add	sp, #8
    a786:	bd70      	pop	{r4, r5, r6, pc}
    a788:	200008f8 	.word	0x200008f8

0000a78c <smp_c1>:
{
    a78c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a790:	b088      	sub	sp, #32
    a792:	4604      	mov	r4, r0
    a794:	460f      	mov	r7, r1
    a796:	4611      	mov	r1, r2
    a798:	4698      	mov	r8, r3
    a79a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    a79c:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
	p1[0] = ia->type;
    a79e:	782b      	ldrb	r3, [r5, #0]
    a7a0:	f88d 3010 	strb.w	r3, [sp, #16]
	p1[1] = ra->type;
    a7a4:	7833      	ldrb	r3, [r6, #0]
    a7a6:	f88d 3011 	strb.w	r3, [sp, #17]
	memcpy(p1 + 2, preq, 7);
    a7aa:	2207      	movs	r2, #7
    a7ac:	f10d 0012 	add.w	r0, sp, #18
    a7b0:	f7f5 fd86 	bl	2c0 <memcpy>
	memcpy(p1 + 9, pres, 7);
    a7b4:	2207      	movs	r2, #7
    a7b6:	4641      	mov	r1, r8
    a7b8:	f10d 0019 	add.w	r0, sp, #25
    a7bc:	f7f5 fd80 	bl	2c0 <memcpy>
	xor_128(r, p1, enc_data);
    a7c0:	9a10      	ldr	r2, [sp, #64]	; 0x40
    a7c2:	a904      	add	r1, sp, #16
    a7c4:	4638      	mov	r0, r7
    a7c6:	f7ff faf3 	bl	9db0 <xor_128>
	err = bt_encrypt_le(k, enc_data, enc_data);
    a7ca:	9a10      	ldr	r2, [sp, #64]	; 0x40
    a7cc:	4611      	mov	r1, r2
    a7ce:	4620      	mov	r0, r4
    a7d0:	f006 f98a 	bl	10ae8 <bt_encrypt_le>
	if (err) {
    a7d4:	4603      	mov	r3, r0
    a7d6:	b118      	cbz	r0, a7e0 <smp_c1+0x54>
}
    a7d8:	4618      	mov	r0, r3
    a7da:	b008      	add	sp, #32
    a7dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	memcpy(p2, ra->a.val, 6);
    a7e0:	2206      	movs	r2, #6
    a7e2:	1c71      	adds	r1, r6, #1
    a7e4:	4668      	mov	r0, sp
    a7e6:	f7f5 fd6b 	bl	2c0 <memcpy>
	memcpy(p2 + 6, ia->a.val, 6);
    a7ea:	2206      	movs	r2, #6
    a7ec:	1c69      	adds	r1, r5, #1
    a7ee:	eb0d 0002 	add.w	r0, sp, r2
    a7f2:	f7f5 fd65 	bl	2c0 <memcpy>
	memset(p2 + 12, 0, 4);
    a7f6:	2204      	movs	r2, #4
    a7f8:	2100      	movs	r1, #0
    a7fa:	a803      	add	r0, sp, #12
    a7fc:	f020 f942 	bl	2aa84 <memset>
	xor_128(enc_data, p2, enc_data);
    a800:	9a10      	ldr	r2, [sp, #64]	; 0x40
    a802:	4669      	mov	r1, sp
    a804:	4610      	mov	r0, r2
    a806:	f7ff fad3 	bl	9db0 <xor_128>
	return bt_encrypt_le(k, enc_data, enc_data);
    a80a:	9a10      	ldr	r2, [sp, #64]	; 0x40
    a80c:	4611      	mov	r1, r2
    a80e:	4620      	mov	r0, r4
    a810:	f006 f96a 	bl	10ae8 <bt_encrypt_le>
    a814:	4603      	mov	r3, r0
    a816:	e7df      	b.n	a7d8 <smp_c1+0x4c>

0000a818 <legacy_send_pairing_confirm>:
{
    a818:	b570      	push	{r4, r5, r6, lr}
    a81a:	b084      	sub	sp, #16
    a81c:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
    a81e:	6805      	ldr	r5, [r0, #0]
	buf = smp_create_pdu(conn, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
    a820:	2210      	movs	r2, #16
    a822:	2103      	movs	r1, #3
    a824:	4628      	mov	r0, r5
    a826:	f7ff fb5c 	bl	9ee2 <smp_create_pdu>
	if (!buf) {
    a82a:	b370      	cbz	r0, a88a <legacy_send_pairing_confirm+0x72>
    a82c:	4606      	mov	r6, r0
	req = net_buf_add(buf, sizeof(*req));
    a82e:	2110      	movs	r1, #16
    a830:	3008      	adds	r0, #8
    a832:	f00f fcb3 	bl	1a19c <net_buf_simple_add>
		   &conn->le.init_addr, &conn->le.resp_addr, req->val)) {
    a836:	f105 034f 	add.w	r3, r5, #79	; 0x4f
    a83a:	3556      	adds	r5, #86	; 0x56
	if (smp_c1(smp->tk, smp->prnd, smp->preq, smp->prsp,
    a83c:	9002      	str	r0, [sp, #8]
    a83e:	9501      	str	r5, [sp, #4]
    a840:	9300      	str	r3, [sp, #0]
    a842:	f104 03ac 	add.w	r3, r4, #172	; 0xac
    a846:	f104 02a5 	add.w	r2, r4, #165	; 0xa5
    a84a:	f104 01c3 	add.w	r1, r4, #195	; 0xc3
    a84e:	f104 00e3 	add.w	r0, r4, #227	; 0xe3
    a852:	f7ff ff9b 	bl	a78c <smp_c1>
    a856:	b120      	cbz	r0, a862 <legacy_send_pairing_confirm+0x4a>
		net_buf_unref(buf);
    a858:	4630      	mov	r0, r6
    a85a:	f00f fc53 	bl	1a104 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
    a85e:	2008      	movs	r0, #8
    a860:	e014      	b.n	a88c <legacy_send_pairing_confirm+0x74>
	smp_send(smp, buf, NULL);
    a862:	2200      	movs	r2, #0
    a864:	4631      	mov	r1, r6
    a866:	4620      	mov	r0, r4
    a868:	f7ff fb8e 	bl	9f88 <smp_send>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
    a86c:	34a0      	adds	r4, #160	; 0xa0
    a86e:	f3bf 8f5b 	dmb	ish
    a872:	e854 3f00 	ldrex	r3, [r4]
    a876:	f023 0301 	bic.w	r3, r3, #1
    a87a:	e844 3200 	strex	r2, r3, [r4]
    a87e:	2a00      	cmp	r2, #0
    a880:	d1f7      	bne.n	a872 <legacy_send_pairing_confirm+0x5a>
    a882:	f3bf 8f5b 	dmb	ish
	return 0;
    a886:	2000      	movs	r0, #0
    a888:	e000      	b.n	a88c <legacy_send_pairing_confirm+0x74>
		return BT_SMP_ERR_UNSPECIFIED;
    a88a:	2008      	movs	r0, #8
}
    a88c:	b004      	add	sp, #16
    a88e:	bd70      	pop	{r4, r5, r6, pc}

0000a890 <legacy_pairing_confirm>:
{
    a890:	b508      	push	{r3, lr}
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    a892:	6803      	ldr	r3, [r0, #0]
    a894:	78db      	ldrb	r3, [r3, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    a896:	b1c3      	cbz	r3, a8ca <legacy_pairing_confirm+0x3a>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    a898:	f100 03a0 	add.w	r3, r0, #160	; 0xa0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    a89c:	f3bf 8f5b 	dmb	ish
    a8a0:	f8d0 20a0 	ldr.w	r2, [r0, #160]	; 0xa0
    a8a4:	f3bf 8f5b 	dmb	ish
    a8a8:	f412 7f00 	tst.w	r2, #512	; 0x200
    a8ac:	d01e      	beq.n	a8ec <legacy_pairing_confirm+0x5c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    a8ae:	f3bf 8f5b 	dmb	ish
    a8b2:	e853 2f00 	ldrex	r2, [r3]
    a8b6:	f042 0201 	orr.w	r2, r2, #1
    a8ba:	e843 2100 	strex	r1, r2, [r3]
    a8be:	2900      	cmp	r1, #0
    a8c0:	d1f7      	bne.n	a8b2 <legacy_pairing_confirm+0x22>
    a8c2:	f3bf 8f5b 	dmb	ish
	return 0;
    a8c6:	2000      	movs	r0, #0
}
    a8c8:	bd08      	pop	{r3, pc}
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    a8ca:	f100 039c 	add.w	r3, r0, #156	; 0x9c
    a8ce:	f3bf 8f5b 	dmb	ish
    a8d2:	e853 2f00 	ldrex	r2, [r3]
    a8d6:	f042 0208 	orr.w	r2, r2, #8
    a8da:	e843 2100 	strex	r1, r2, [r3]
    a8de:	2900      	cmp	r1, #0
    a8e0:	d1f7      	bne.n	a8d2 <legacy_pairing_confirm+0x42>
    a8e2:	f3bf 8f5b 	dmb	ish
		return legacy_send_pairing_confirm(smp);
    a8e6:	f7ff ff97 	bl	a818 <legacy_send_pairing_confirm>
    a8ea:	bd08      	pop	{r3, pc}
			atomic_set_bit(&smp->allowed_cmds,
    a8ec:	f100 039c 	add.w	r3, r0, #156	; 0x9c
    a8f0:	f3bf 8f5b 	dmb	ish
    a8f4:	e853 2f00 	ldrex	r2, [r3]
    a8f8:	f042 0210 	orr.w	r2, r2, #16
    a8fc:	e843 2100 	strex	r1, r2, [r3]
    a900:	2900      	cmp	r1, #0
    a902:	d1f7      	bne.n	a8f4 <legacy_pairing_confirm+0x64>
    a904:	f3bf 8f5b 	dmb	ish
			return legacy_send_pairing_confirm(smp);
    a908:	f7ff ff86 	bl	a818 <legacy_send_pairing_confirm>
    a90c:	bd08      	pop	{r3, pc}

0000a90e <smp_pairing_confirm>:
{
    a90e:	b510      	push	{r4, lr}
    a910:	4604      	mov	r4, r0
	memcpy(smp->pcnf, req->val, sizeof(smp->pcnf));
    a912:	2210      	movs	r2, #16
    a914:	6889      	ldr	r1, [r1, #8]
    a916:	30b3      	adds	r0, #179	; 0xb3
    a918:	f7f5 fcd2 	bl	2c0 <memcpy>
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    a91c:	6823      	ldr	r3, [r4, #0]
    a91e:	78db      	ldrb	r3, [r3, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    a920:	b313      	cbz	r3, a968 <smp_pairing_confirm+0x5a>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    a922:	f104 02a0 	add.w	r2, r4, #160	; 0xa0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    a926:	f3bf 8f5b 	dmb	ish
    a92a:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    a92e:	f3bf 8f5b 	dmb	ish
    a932:	f013 0f20 	tst.w	r3, #32
    a936:	d029      	beq.n	a98c <smp_pairing_confirm+0x7e>
	switch (smp->method) {
    a938:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    a93c:	2b01      	cmp	r3, #1
    a93e:	d029      	beq.n	a994 <smp_pairing_confirm+0x86>
    a940:	2b02      	cmp	r3, #2
    a942:	d150      	bne.n	a9e6 <smp_pairing_confirm+0xd8>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    a944:	f104 039c 	add.w	r3, r4, #156	; 0x9c
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    a948:	f3bf 8f5b 	dmb	ish
    a94c:	e853 2f00 	ldrex	r2, [r3]
    a950:	f042 0210 	orr.w	r2, r2, #16
    a954:	e843 2100 	strex	r1, r2, [r3]
    a958:	2900      	cmp	r1, #0
    a95a:	d1f7      	bne.n	a94c <smp_pairing_confirm+0x3e>
    a95c:	f3bf 8f5b 	dmb	ish
		return smp_send_pairing_confirm(smp);
    a960:	4620      	mov	r0, r4
    a962:	f7ff fec5 	bl	a6f0 <smp_send_pairing_confirm>
    a966:	bd10      	pop	{r4, pc}
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    a968:	f104 039c 	add.w	r3, r4, #156	; 0x9c
    a96c:	f3bf 8f5b 	dmb	ish
    a970:	e853 2f00 	ldrex	r2, [r3]
    a974:	f042 0210 	orr.w	r2, r2, #16
    a978:	e843 2100 	strex	r1, r2, [r3]
    a97c:	2900      	cmp	r1, #0
    a97e:	d1f7      	bne.n	a970 <smp_pairing_confirm+0x62>
    a980:	f3bf 8f5b 	dmb	ish
		return smp_send_pairing_random(smp);
    a984:	4620      	mov	r0, r4
    a986:	f7ff fb6c 	bl	a062 <smp_send_pairing_random>
    a98a:	bd10      	pop	{r4, pc}
		return legacy_pairing_confirm(smp);
    a98c:	4620      	mov	r0, r4
    a98e:	f7ff ff7f 	bl	a890 <legacy_pairing_confirm>
    a992:	bd10      	pop	{r4, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    a994:	f3bf 8f5b 	dmb	ish
    a998:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    a99c:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    a9a0:	f413 7f00 	tst.w	r3, #512	; 0x200
    a9a4:	d111      	bne.n	a9ca <smp_pairing_confirm+0xbc>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    a9a6:	f104 039c 	add.w	r3, r4, #156	; 0x9c
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    a9aa:	f3bf 8f5b 	dmb	ish
    a9ae:	e853 2f00 	ldrex	r2, [r3]
    a9b2:	f042 0210 	orr.w	r2, r2, #16
    a9b6:	e843 2100 	strex	r1, r2, [r3]
    a9ba:	2900      	cmp	r1, #0
    a9bc:	d1f7      	bne.n	a9ae <smp_pairing_confirm+0xa0>
    a9be:	f3bf 8f5b 	dmb	ish
		return smp_send_pairing_confirm(smp);
    a9c2:	4620      	mov	r0, r4
    a9c4:	f7ff fe94 	bl	a6f0 <smp_send_pairing_confirm>
    a9c8:	bd10      	pop	{r4, pc}
    a9ca:	f3bf 8f5b 	dmb	ish
    a9ce:	e852 3f00 	ldrex	r3, [r2]
    a9d2:	f043 0301 	orr.w	r3, r3, #1
    a9d6:	e842 3100 	strex	r1, r3, [r2]
    a9da:	2900      	cmp	r1, #0
    a9dc:	d1f7      	bne.n	a9ce <smp_pairing_confirm+0xc0>
    a9de:	f3bf 8f5b 	dmb	ish
			return 0;
    a9e2:	2000      	movs	r0, #0
    a9e4:	bd10      	pop	{r4, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    a9e6:	2008      	movs	r0, #8
}
    a9e8:	bd10      	pop	{r4, pc}

0000a9ea <smp_s1>:
{
    a9ea:	b570      	push	{r4, r5, r6, lr}
    a9ec:	4605      	mov	r5, r0
    a9ee:	460e      	mov	r6, r1
    a9f0:	4611      	mov	r1, r2
    a9f2:	461c      	mov	r4, r3
	memcpy(out, r2, 8);
    a9f4:	2208      	movs	r2, #8
    a9f6:	4618      	mov	r0, r3
    a9f8:	f7f5 fc62 	bl	2c0 <memcpy>
	memcpy(out + 8, r1, 8);
    a9fc:	2208      	movs	r2, #8
    a9fe:	4631      	mov	r1, r6
    aa00:	18a0      	adds	r0, r4, r2
    aa02:	f7f5 fc5d 	bl	2c0 <memcpy>
	return bt_encrypt_le(k, out, out);
    aa06:	4622      	mov	r2, r4
    aa08:	4621      	mov	r1, r4
    aa0a:	4628      	mov	r0, r5
    aa0c:	f006 f86c 	bl	10ae8 <bt_encrypt_le>
}
    aa10:	bd70      	pop	{r4, r5, r6, pc}

0000aa12 <smp_reset>:
{
    aa12:	b538      	push	{r3, r4, r5, lr}
    aa14:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
    aa16:	6805      	ldr	r5, [r0, #0]
	k_delayed_work_cancel(&smp->work);
    aa18:	f500 70be 	add.w	r0, r0, #380	; 0x17c
    aa1c:	f01e fcac 	bl	29378 <k_delayed_work_cancel>
	smp->method = JUST_WORKS;
    aa20:	2200      	movs	r2, #0
    aa22:	f884 20a4 	strb.w	r2, [r4, #164]	; 0xa4
	atomic_set(&smp->allowed_cmds, 0);
    aa26:	f104 039c 	add.w	r3, r4, #156	; 0x9c
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    aa2a:	f3bf 8f5b 	dmb	ish
    aa2e:	e853 1f00 	ldrex	r1, [r3]
    aa32:	e843 2000 	strex	r0, r2, [r3]
    aa36:	2800      	cmp	r0, #0
    aa38:	d1f9      	bne.n	aa2e <smp_reset+0x1c>
    aa3a:	f3bf 8f5b 	dmb	ish
	atomic_set(smp->flags, 0);
    aa3e:	34a0      	adds	r4, #160	; 0xa0
    aa40:	f3bf 8f5b 	dmb	ish
    aa44:	e854 1f00 	ldrex	r1, [r4]
    aa48:	e844 2000 	strex	r0, r2, [r4]
    aa4c:	2800      	cmp	r0, #0
    aa4e:	d1f9      	bne.n	aa44 <smp_reset+0x32>
    aa50:	f3bf 8f5b 	dmb	ish
	if (conn->required_sec_level != conn->sec_level) {
    aa54:	7a69      	ldrb	r1, [r5, #9]
    aa56:	7a2a      	ldrb	r2, [r5, #8]
    aa58:	4291      	cmp	r1, r2
    aa5a:	d000      	beq.n	aa5e <smp_reset+0x4c>
		conn->required_sec_level = conn->sec_level;
    aa5c:	726a      	strb	r2, [r5, #9]
	    conn->role == BT_HCI_ROLE_MASTER) {
    aa5e:	78ea      	ldrb	r2, [r5, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    aa60:	b162      	cbz	r2, aa7c <smp_reset+0x6a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    aa62:	f3bf 8f5b 	dmb	ish
    aa66:	e853 2f00 	ldrex	r2, [r3]
    aa6a:	f042 0202 	orr.w	r2, r2, #2
    aa6e:	e843 2100 	strex	r1, r2, [r3]
    aa72:	2900      	cmp	r1, #0
    aa74:	d1f7      	bne.n	aa66 <smp_reset+0x54>
    aa76:	f3bf 8f5b 	dmb	ish
    aa7a:	bd38      	pop	{r3, r4, r5, pc}
    aa7c:	f3bf 8f5b 	dmb	ish
    aa80:	e853 2f00 	ldrex	r2, [r3]
    aa84:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    aa88:	e843 2100 	strex	r1, r2, [r3]
    aa8c:	2900      	cmp	r1, #0
    aa8e:	d1f7      	bne.n	aa80 <smp_reset+0x6e>
    aa90:	f3bf 8f5b 	dmb	ish
    aa94:	bd38      	pop	{r3, r4, r5, pc}

0000aa96 <smp_pairing_complete>:
{
    aa96:	b508      	push	{r3, lr}
	smp_reset(smp);
    aa98:	f7ff ffbb 	bl	aa12 <smp_reset>
    aa9c:	bd08      	pop	{r3, pc}

0000aa9e <smp_error>:
{
    aa9e:	b570      	push	{r4, r5, r6, lr}
    aaa0:	4604      	mov	r4, r0
    aaa2:	460e      	mov	r6, r1
	smp_pairing_complete(smp, reason);
    aaa4:	f7ff fff7 	bl	aa96 <smp_pairing_complete>
	buf = smp_create_pdu(smp->chan.chan.conn, BT_SMP_CMD_PAIRING_FAIL,
    aaa8:	2201      	movs	r2, #1
    aaaa:	2105      	movs	r1, #5
    aaac:	6820      	ldr	r0, [r4, #0]
    aaae:	f7ff fa18 	bl	9ee2 <smp_create_pdu>
	if (!buf) {
    aab2:	b168      	cbz	r0, aad0 <smp_error+0x32>
    aab4:	4605      	mov	r5, r0
	rsp = net_buf_add(buf, sizeof(*rsp));
    aab6:	2101      	movs	r1, #1
    aab8:	3008      	adds	r0, #8
    aaba:	f00f fb6f 	bl	1a19c <net_buf_simple_add>
	rsp->reason = reason;
    aabe:	7006      	strb	r6, [r0, #0]
    aac0:	2300      	movs	r3, #0
    aac2:	462a      	mov	r2, r5
    aac4:	2106      	movs	r1, #6
    aac6:	6820      	ldr	r0, [r4, #0]
    aac8:	f7fc fd01 	bl	74ce <bt_l2cap_send_cb>
	return 0;
    aacc:	2000      	movs	r0, #0
    aace:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    aad0:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    aad4:	bd70      	pop	{r4, r5, r6, pc}
	...

0000aad8 <bt_smp_dhkey_ready>:
{
    aad8:	b510      	push	{r4, lr}
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
    aada:	2400      	movs	r4, #0
    aadc:	b384      	cbz	r4, ab40 <bt_smp_dhkey_ready+0x68>
	struct bt_smp *smp = NULL;
    aade:	2400      	movs	r4, #0
	if (!smp) {
    aae0:	b36c      	cbz	r4, ab3e <bt_smp_dhkey_ready+0x66>
    aae2:	4601      	mov	r1, r0
	if (!dhkey) {
    aae4:	2800      	cmp	r0, #0
    aae6:	d04b      	beq.n	ab80 <bt_smp_dhkey_ready+0xa8>
	memcpy(smp->dhkey, dhkey, 32);
    aae8:	2220      	movs	r2, #32
    aaea:	f204 1033 	addw	r0, r4, #307	; 0x133
    aaee:	f7f5 fbe7 	bl	2c0 <memcpy>
	if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    aaf2:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    aaf6:	f3bf 8f5b 	dmb	ish
    aafa:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
    aafe:	f3bf 8f5b 	dmb	ish
    ab02:	f412 7f00 	tst.w	r2, #512	; 0x200
    ab06:	d140      	bne.n	ab8a <bt_smp_dhkey_ready+0xb2>
    ab08:	f3bf 8f5b 	dmb	ish
    ab0c:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
    ab10:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
    ab14:	f412 5f00 	tst.w	r2, #8192	; 0x2000
    ab18:	d144      	bne.n	aba4 <bt_smp_dhkey_ready+0xcc>
    ab1a:	f3bf 8f5b 	dmb	ish
    ab1e:	681b      	ldr	r3, [r3, #0]
    ab20:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_SEND)) {
    ab24:	f413 7f80 	tst.w	r3, #256	; 0x100
    ab28:	d009      	beq.n	ab3e <bt_smp_dhkey_ready+0x66>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    ab2a:	6823      	ldr	r3, [r4, #0]
    ab2c:	78db      	ldrb	r3, [r3, #3]
    ab2e:	2b00      	cmp	r3, #0
    ab30:	d149      	bne.n	abc6 <bt_smp_dhkey_ready+0xee>
			err = compute_and_send_master_dhcheck(smp);
    ab32:	4620      	mov	r0, r4
    ab34:	f7ff fcb4 	bl	a4a0 <compute_and_send_master_dhcheck>
			if (err) {
    ab38:	4601      	mov	r1, r0
    ab3a:	2800      	cmp	r0, #0
    ab3c:	d13f      	bne.n	abbe <bt_smp_dhkey_ready+0xe6>
    ab3e:	bd10      	pop	{r4, pc}
		if (atomic_test_and_clear_bit(bt_smp_pool[i].flags,
    ab40:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
    ab44:	fb03 f304 	mul.w	r3, r3, r4
    ab48:	f103 02a0 	add.w	r2, r3, #160	; 0xa0
    ab4c:	4b23      	ldr	r3, [pc, #140]	; (abdc <bt_smp_dhkey_ready+0x104>)
    ab4e:	4413      	add	r3, r2
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    ab50:	f3bf 8f5b 	dmb	ish
    ab54:	e853 2f00 	ldrex	r2, [r3]
    ab58:	f022 0180 	bic.w	r1, r2, #128	; 0x80
    ab5c:	e843 1e00 	strex	lr, r1, [r3]
    ab60:	f1be 0f00 	cmp.w	lr, #0
    ab64:	d1f6      	bne.n	ab54 <bt_smp_dhkey_ready+0x7c>
    ab66:	f3bf 8f5b 	dmb	ish
    ab6a:	f012 0f80 	tst.w	r2, #128	; 0x80
    ab6e:	d101      	bne.n	ab74 <bt_smp_dhkey_ready+0x9c>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
    ab70:	3401      	adds	r4, #1
    ab72:	e7b3      	b.n	aadc <bt_smp_dhkey_ready+0x4>
			smp = &bt_smp_pool[i];
    ab74:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
    ab78:	4b18      	ldr	r3, [pc, #96]	; (abdc <bt_smp_dhkey_ready+0x104>)
    ab7a:	fb02 3404 	mla	r4, r2, r4, r3
			break;
    ab7e:	e7af      	b.n	aae0 <bt_smp_dhkey_ready+0x8>
		smp_error(smp, BT_SMP_ERR_DHKEY_CHECK_FAILED);
    ab80:	210b      	movs	r1, #11
    ab82:	4620      	mov	r0, r4
    ab84:	f7ff ff8b 	bl	aa9e <smp_error>
		return;
    ab88:	bd10      	pop	{r4, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    ab8a:	f3bf 8f5b 	dmb	ish
    ab8e:	e853 2f00 	ldrex	r2, [r3]
    ab92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    ab96:	e843 2100 	strex	r1, r2, [r3]
    ab9a:	2900      	cmp	r1, #0
    ab9c:	d1f7      	bne.n	ab8e <bt_smp_dhkey_ready+0xb6>
    ab9e:	f3bf 8f5b 	dmb	ish
    aba2:	bd10      	pop	{r4, pc}
    aba4:	f3bf 8f5b 	dmb	ish
    aba8:	e853 2f00 	ldrex	r2, [r3]
    abac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    abb0:	e843 2100 	strex	r1, r2, [r3]
    abb4:	2900      	cmp	r1, #0
    abb6:	d1f7      	bne.n	aba8 <bt_smp_dhkey_ready+0xd0>
    abb8:	f3bf 8f5b 	dmb	ish
    abbc:	bd10      	pop	{r4, pc}
				smp_error(smp, err);
    abbe:	4620      	mov	r0, r4
    abc0:	f7ff ff6d 	bl	aa9e <smp_error>
    abc4:	bd10      	pop	{r4, pc}
		err = compute_and_check_and_send_slave_dhcheck(smp);
    abc6:	4620      	mov	r0, r4
    abc8:	f7ff fcc4 	bl	a554 <compute_and_check_and_send_slave_dhcheck>
		if (err) {
    abcc:	4601      	mov	r1, r0
    abce:	2800      	cmp	r0, #0
    abd0:	d0b5      	beq.n	ab3e <bt_smp_dhkey_ready+0x66>
			smp_error(smp, err);
    abd2:	4620      	mov	r0, r4
    abd4:	f7ff ff63 	bl	aa9e <smp_error>
    abd8:	e7b1      	b.n	ab3e <bt_smp_dhkey_ready+0x66>
    abda:	bf00      	nop
    abdc:	20000750 	.word	0x20000750

0000abe0 <smp_pairing_failed>:
{
    abe0:	b538      	push	{r3, r4, r5, lr}
    abe2:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
    abe4:	6800      	ldr	r0, [r0, #0]
	struct bt_smp_pairing_fail *req = (void *)buf->data;
    abe6:	688d      	ldr	r5, [r1, #8]
	switch (smp->method) {
    abe8:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    abec:	3b01      	subs	r3, #1
    abee:	2b02      	cmp	r3, #2
    abf0:	d913      	bls.n	ac1a <smp_pairing_failed+0x3a>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    abf2:	f3bf 8f5b 	dmb	ish
    abf6:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    abfa:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
    abfe:	f013 0f04 	tst.w	r3, #4
    ac02:	d004      	beq.n	ac0e <smp_pairing_failed+0x2e>
	    smp->chan.chan.conn->le.keys) {
    ac04:	6823      	ldr	r3, [r4, #0]
    ac06:	6f18      	ldr	r0, [r3, #112]	; 0x70
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
    ac08:	b108      	cbz	r0, ac0e <smp_pairing_failed+0x2e>
		bt_keys_clear(smp->chan.chan.conn->le.keys);
    ac0a:	f001 fd98 	bl	c73e <bt_keys_clear>
	smp_pairing_complete(smp, req->reason);
    ac0e:	7829      	ldrb	r1, [r5, #0]
    ac10:	4620      	mov	r0, r4
    ac12:	f7ff ff40 	bl	aa96 <smp_pairing_complete>
}
    ac16:	2000      	movs	r0, #0
    ac18:	bd38      	pop	{r3, r4, r5, pc}
		bt_auth->cancel(conn);
    ac1a:	4b02      	ldr	r3, [pc, #8]	; (ac24 <smp_pairing_failed+0x44>)
    ac1c:	681b      	ldr	r3, [r3, #0]
    ac1e:	68db      	ldr	r3, [r3, #12]
    ac20:	4798      	blx	r3
		break;
    ac22:	e7e6      	b.n	abf2 <smp_pairing_failed+0x12>
    ac24:	20002940 	.word	0x20002940

0000ac28 <bt_smp_disconnected>:
{
    ac28:	b538      	push	{r3, r4, r5, lr}
    ac2a:	4605      	mov	r5, r0
	struct bt_keys *keys = chan->conn->le.keys;
    ac2c:	6803      	ldr	r3, [r0, #0]
    ac2e:	6f1c      	ldr	r4, [r3, #112]	; 0x70
	k_delayed_work_cancel(&smp->work);
    ac30:	f500 70be 	add.w	r0, r0, #380	; 0x17c
    ac34:	f01e fba0 	bl	29378 <k_delayed_work_cancel>
	if (keys) {
    ac38:	b164      	cbz	r4, ac54 <bt_smp_disconnected+0x2c>
		if (!keys->keys ||
    ac3a:	89a3      	ldrh	r3, [r4, #12]
    ac3c:	b13b      	cbz	r3, ac4e <bt_smp_disconnected+0x26>
    ac3e:	f3bf 8f5b 	dmb	ish
    ac42:	68a3      	ldr	r3, [r4, #8]
    ac44:	f3bf 8f5b 	dmb	ish
    ac48:	f013 0f02 	tst.w	r3, #2
    ac4c:	d002      	beq.n	ac54 <bt_smp_disconnected+0x2c>
			bt_keys_clear(keys);
    ac4e:	4620      	mov	r0, r4
    ac50:	f001 fd75 	bl	c73e <bt_keys_clear>
	memset(smp, 0, sizeof(*smp));
    ac54:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
    ac58:	2100      	movs	r1, #0
    ac5a:	4628      	mov	r0, r5
    ac5c:	f01f ff12 	bl	2aa84 <memset>
    ac60:	bd38      	pop	{r3, r4, r5, pc}

0000ac62 <smp_timeout>:
{
    ac62:	b538      	push	{r3, r4, r5, lr}
	struct bt_smp *smp = CONTAINER_OF(work, struct bt_smp, work);
    ac64:	f5a0 75be 	sub.w	r5, r0, #380	; 0x17c
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
    ac68:	f1a0 04dc 	sub.w	r4, r0, #220	; 0xdc
    ac6c:	f3bf 8f5b 	dmb	ish
    ac70:	f850 3cdc 	ldr.w	r3, [r0, #-220]
    ac74:	f3bf 8f5b 	dmb	ish
    ac78:	f013 0f04 	tst.w	r3, #4
    ac7c:	d004      	beq.n	ac88 <smp_timeout+0x26>
	    smp->chan.chan.conn->le.keys) {
    ac7e:	682b      	ldr	r3, [r5, #0]
    ac80:	6f18      	ldr	r0, [r3, #112]	; 0x70
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
    ac82:	b108      	cbz	r0, ac88 <smp_timeout+0x26>
		bt_keys_clear(smp->chan.chan.conn->le.keys);
    ac84:	f001 fd5b 	bl	c73e <bt_keys_clear>
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
    ac88:	2108      	movs	r1, #8
    ac8a:	4628      	mov	r0, r5
    ac8c:	f7ff ff03 	bl	aa96 <smp_pairing_complete>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    ac90:	f3bf 8f5b 	dmb	ish
    ac94:	e854 3f00 	ldrex	r3, [r4]
    ac98:	f043 0310 	orr.w	r3, r3, #16
    ac9c:	e844 3200 	strex	r2, r3, [r4]
    aca0:	2a00      	cmp	r2, #0
    aca2:	d1f7      	bne.n	ac94 <smp_timeout+0x32>
    aca4:	f3bf 8f5b 	dmb	ish
    aca8:	bd38      	pop	{r3, r4, r5, pc}
	...

0000acac <legacy_distribute_keys>:
{
    acac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    acb0:	b088      	sub	sp, #32
	struct bt_conn *conn = smp->chan.chan.conn;
    acb2:	6805      	ldr	r5, [r0, #0]
	struct bt_keys *keys = conn->le.keys;
    acb4:	6f2e      	ldr	r6, [r5, #112]	; 0x70
	if (smp->local_dist & BT_SMP_DIST_ENC_KEY) {
    acb6:	f890 3179 	ldrb.w	r3, [r0, #377]	; 0x179
    acba:	f013 0f01 	tst.w	r3, #1
    acbe:	d102      	bne.n	acc6 <legacy_distribute_keys+0x1a>
}
    acc0:	b008      	add	sp, #32
    acc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    acc6:	4604      	mov	r4, r0
		bt_rand(key, sizeof(key));
    acc8:	2110      	movs	r1, #16
    acca:	eb0d 0001 	add.w	r0, sp, r1
    acce:	f005 feef 	bl	10ab0 <bt_rand>
		bt_rand(&rand, sizeof(rand));
    acd2:	2108      	movs	r1, #8
    acd4:	eb0d 0001 	add.w	r0, sp, r1
    acd8:	f005 feea 	bl	10ab0 <bt_rand>
		bt_rand(&ediv, sizeof(ediv));
    acdc:	2102      	movs	r1, #2
    acde:	f10d 0006 	add.w	r0, sp, #6
    ace2:	f005 fee5 	bl	10ab0 <bt_rand>
		buf = smp_create_pdu(conn, BT_SMP_CMD_ENCRYPT_INFO,
    ace6:	2210      	movs	r2, #16
    ace8:	2106      	movs	r1, #6
    acea:	4628      	mov	r0, r5
    acec:	f7ff f8f9 	bl	9ee2 <smp_create_pdu>
		if (!buf) {
    acf0:	4607      	mov	r7, r0
    acf2:	2800      	cmp	r0, #0
    acf4:	d0e4      	beq.n	acc0 <legacy_distribute_keys+0x14>
		info = net_buf_add(buf, sizeof(*info));
    acf6:	2110      	movs	r1, #16
    acf8:	3008      	adds	r0, #8
    acfa:	f00f fa4f 	bl	1a19c <net_buf_simple_add>
    acfe:	4680      	mov	r8, r0
		memcpy(info->ltk, key, keys->enc_size);
    ad00:	79f2      	ldrb	r2, [r6, #7]
    ad02:	a904      	add	r1, sp, #16
    ad04:	f7f5 fadc 	bl	2c0 <memcpy>
		if (keys->enc_size < sizeof(info->ltk)) {
    ad08:	79f0      	ldrb	r0, [r6, #7]
    ad0a:	280f      	cmp	r0, #15
    ad0c:	d93b      	bls.n	ad86 <legacy_distribute_keys+0xda>
		smp_send(smp, buf, NULL);
    ad0e:	2200      	movs	r2, #0
    ad10:	4639      	mov	r1, r7
    ad12:	4620      	mov	r0, r4
    ad14:	f7ff f938 	bl	9f88 <smp_send>
		buf = smp_create_pdu(conn, BT_SMP_CMD_MASTER_IDENT,
    ad18:	220a      	movs	r2, #10
    ad1a:	2107      	movs	r1, #7
    ad1c:	4628      	mov	r0, r5
    ad1e:	f7ff f8e0 	bl	9ee2 <smp_create_pdu>
		if (!buf) {
    ad22:	4605      	mov	r5, r0
    ad24:	2800      	cmp	r0, #0
    ad26:	d0cb      	beq.n	acc0 <legacy_distribute_keys+0x14>
		ident = net_buf_add(buf, sizeof(*ident));
    ad28:	210a      	movs	r1, #10
    ad2a:	3008      	adds	r0, #8
    ad2c:	f00f fa36 	bl	1a19c <net_buf_simple_add>
		ident->rand = rand;
    ad30:	9b03      	ldr	r3, [sp, #12]
    ad32:	9a02      	ldr	r2, [sp, #8]
    ad34:	f8c0 2002 	str.w	r2, [r0, #2]
    ad38:	f8c0 3006 	str.w	r3, [r0, #6]
		ident->ediv = ediv;
    ad3c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    ad40:	8003      	strh	r3, [r0, #0]
		smp_send(smp, buf, ident_sent);
    ad42:	4a14      	ldr	r2, [pc, #80]	; (ad94 <legacy_distribute_keys+0xe8>)
    ad44:	4629      	mov	r1, r5
    ad46:	4620      	mov	r0, r4
    ad48:	f7ff f91e 	bl	9f88 <smp_send>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    ad4c:	f3bf 8f5b 	dmb	ish
    ad50:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    ad54:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    ad58:	f413 6f80 	tst.w	r3, #1024	; 0x400
    ad5c:	d0b0      	beq.n	acc0 <legacy_distribute_keys+0x14>
			bt_keys_add_type(keys, BT_KEYS_SLAVE_LTK);
    ad5e:	2101      	movs	r1, #1
    ad60:	4630      	mov	r0, r6
    ad62:	f001 fcd5 	bl	c710 <bt_keys_add_type>
			memcpy(keys->slave_ltk.val, key,
    ad66:	2210      	movs	r2, #16
    ad68:	eb0d 0102 	add.w	r1, sp, r2
    ad6c:	f106 007a 	add.w	r0, r6, #122	; 0x7a
    ad70:	f7f5 faa6 	bl	2c0 <memcpy>
			keys->slave_ltk.rand = rand;
    ad74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    ad78:	e9c6 231c 	strd	r2, r3, [r6, #112]	; 0x70
			keys->slave_ltk.ediv = ediv;
    ad7c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    ad80:	f8a6 3078 	strh.w	r3, [r6, #120]	; 0x78
    ad84:	e79c      	b.n	acc0 <legacy_distribute_keys+0x14>
			memset(info->ltk + keys->enc_size, 0,
    ad86:	f1c0 0210 	rsb	r2, r0, #16
    ad8a:	2100      	movs	r1, #0
    ad8c:	4440      	add	r0, r8
    ad8e:	f01f fe79 	bl	2aa84 <memset>
    ad92:	e7bc      	b.n	ad0e <legacy_distribute_keys+0x62>
    ad94:	0000b9c7 	.word	0x0000b9c7

0000ad98 <bt_smp_distribute_keys>:
{
    ad98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
    ad9a:	6805      	ldr	r5, [r0, #0]
	struct bt_keys *keys = conn->le.keys;
    ad9c:	6f2e      	ldr	r6, [r5, #112]	; 0x70
	if (!keys) {
    ad9e:	b176      	cbz	r6, adbe <bt_smp_distribute_keys+0x26>
    ada0:	4604      	mov	r4, r0
    ada2:	f3bf 8f5b 	dmb	ish
    ada6:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    adaa:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    adae:	f013 0f20 	tst.w	r3, #32
    adb2:	d005      	beq.n	adc0 <bt_smp_distribute_keys+0x28>
	if (smp->local_dist & BT_SMP_DIST_SIGN) {
    adb4:	f894 3179 	ldrb.w	r3, [r4, #377]	; 0x179
    adb8:	f013 0f04 	tst.w	r3, #4
    adbc:	d103      	bne.n	adc6 <bt_smp_distribute_keys+0x2e>
    adbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		legacy_distribute_keys(smp);
    adc0:	f7ff ff74 	bl	acac <legacy_distribute_keys>
    adc4:	e7f6      	b.n	adb4 <bt_smp_distribute_keys+0x1c>
		buf = smp_create_pdu(conn, BT_SMP_CMD_SIGNING_INFO,
    adc6:	2210      	movs	r2, #16
    adc8:	210a      	movs	r1, #10
    adca:	4628      	mov	r0, r5
    adcc:	f7ff f889 	bl	9ee2 <smp_create_pdu>
		if (!buf) {
    add0:	4605      	mov	r5, r0
    add2:	2800      	cmp	r0, #0
    add4:	d0f3      	beq.n	adbe <bt_smp_distribute_keys+0x26>
		info = net_buf_add(buf, sizeof(*info));
    add6:	2110      	movs	r1, #16
    add8:	3008      	adds	r0, #8
    adda:	f00f f9df 	bl	1a19c <net_buf_simple_add>
    adde:	4607      	mov	r7, r0
		bt_rand(info->csrk, sizeof(info->csrk));
    ade0:	2110      	movs	r1, #16
    ade2:	f005 fe65 	bl	10ab0 <bt_rand>
    ade6:	f3bf 8f5b 	dmb	ish
    adea:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    adee:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    adf2:	f413 6f80 	tst.w	r3, #1024	; 0x400
    adf6:	d105      	bne.n	ae04 <bt_smp_distribute_keys+0x6c>
		smp_send(smp, buf, sign_info_sent);
    adf8:	4a09      	ldr	r2, [pc, #36]	; (ae20 <bt_smp_distribute_keys+0x88>)
    adfa:	4629      	mov	r1, r5
    adfc:	4620      	mov	r0, r4
    adfe:	f7ff f8c3 	bl	9f88 <smp_send>
    ae02:	e7dc      	b.n	adbe <bt_smp_distribute_keys+0x26>
			bt_keys_add_type(keys, BT_KEYS_LOCAL_CSRK);
    ae04:	2108      	movs	r1, #8
    ae06:	4630      	mov	r0, r6
    ae08:	f001 fc82 	bl	c710 <bt_keys_add_type>
			memcpy(keys->local_csrk.val, info->csrk, 16);
    ae0c:	2210      	movs	r2, #16
    ae0e:	4639      	mov	r1, r7
    ae10:	f106 0048 	add.w	r0, r6, #72	; 0x48
    ae14:	f7f5 fa54 	bl	2c0 <memcpy>
			keys->local_csrk.cnt = 0;
    ae18:	2300      	movs	r3, #0
    ae1a:	65b3      	str	r3, [r6, #88]	; 0x58
    ae1c:	e7ec      	b.n	adf8 <bt_smp_distribute_keys+0x60>
    ae1e:	bf00      	nop
    ae20:	0000b9bd 	.word	0x0000b9bd

0000ae24 <bt_smp_encrypt_change>:
	struct bt_conn *conn = chan->conn;
    ae24:	6803      	ldr	r3, [r0, #0]
	if (hci_status) {
    ae26:	b911      	cbnz	r1, ae2e <bt_smp_encrypt_change+0xa>
	if (!smp || !conn->encrypt) {
    ae28:	b108      	cbz	r0, ae2e <bt_smp_encrypt_change+0xa>
    ae2a:	7a9a      	ldrb	r2, [r3, #10]
    ae2c:	b902      	cbnz	r2, ae30 <bt_smp_encrypt_change+0xc>
    ae2e:	4770      	bx	lr
{
    ae30:	b510      	push	{r4, lr}
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
    ae32:	f100 02a0 	add.w	r2, r0, #160	; 0xa0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    ae36:	f3bf 8f5b 	dmb	ish
    ae3a:	e852 1f00 	ldrex	r1, [r2]
    ae3e:	f021 0402 	bic.w	r4, r1, #2
    ae42:	e842 4e00 	strex	lr, r4, [r2]
    ae46:	f1be 0f00 	cmp.w	lr, #0
    ae4a:	d1f6      	bne.n	ae3a <bt_smp_encrypt_change+0x16>
    ae4c:	f3bf 8f5b 	dmb	ish
    ae50:	f011 0f02 	tst.w	r1, #2
    ae54:	d100      	bne.n	ae58 <bt_smp_encrypt_change+0x34>
    ae56:	bd10      	pop	{r4, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    ae58:	f3bf 8f5b 	dmb	ish
    ae5c:	f8d0 10a0 	ldr.w	r1, [r0, #160]	; 0xa0
    ae60:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    ae64:	f011 0f08 	tst.w	r1, #8
    ae68:	d04b      	beq.n	af02 <bt_smp_encrypt_change+0xde>
    ae6a:	f3bf 8f5b 	dmb	ish
    ae6e:	f8d0 10a0 	ldr.w	r1, [r0, #160]	; 0xa0
    ae72:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    ae76:	f011 0f20 	tst.w	r1, #32
    ae7a:	d015      	beq.n	aea8 <bt_smp_encrypt_change+0x84>
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
    ae7c:	f890 1179 	ldrb.w	r1, [r0, #377]	; 0x179
    ae80:	f011 0f08 	tst.w	r1, #8
    ae84:	d004      	beq.n	ae90 <bt_smp_encrypt_change+0x6c>
		    (smp->remote_dist & BT_SMP_DIST_LINK_KEY)) {
    ae86:	f890 117a 	ldrb.w	r1, [r0, #378]	; 0x17a
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
    ae8a:	f011 0f08 	tst.w	r1, #8
    ae8e:	d146      	bne.n	af1e <bt_smp_encrypt_change+0xfa>
		smp->local_dist &= ~BT_SMP_DIST_LINK_KEY;
    ae90:	f890 1179 	ldrb.w	r1, [r0, #377]	; 0x179
    ae94:	f021 0108 	bic.w	r1, r1, #8
    ae98:	f880 1179 	strb.w	r1, [r0, #377]	; 0x179
		smp->remote_dist &= ~BT_SMP_DIST_LINK_KEY;
    ae9c:	f890 117a 	ldrb.w	r1, [r0, #378]	; 0x17a
    aea0:	f021 0108 	bic.w	r1, r1, #8
    aea4:	f880 117a 	strb.w	r1, [r0, #378]	; 0x17a
	if (smp->remote_dist & BT_SMP_DIST_ENC_KEY) {
    aea8:	f890 117a 	ldrb.w	r1, [r0, #378]	; 0x17a
    aeac:	f011 0f01 	tst.w	r1, #1
    aeb0:	d142      	bne.n	af38 <bt_smp_encrypt_change+0x114>
	} else if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
    aeb2:	f011 0f02 	tst.w	r1, #2
    aeb6:	d14f      	bne.n	af58 <bt_smp_encrypt_change+0x134>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    aeb8:	f011 0f04 	tst.w	r1, #4
    aebc:	d15c      	bne.n	af78 <bt_smp_encrypt_change+0x154>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    aebe:	f3bf 8f5b 	dmb	ish
    aec2:	e852 1f00 	ldrex	r1, [r2]
    aec6:	f041 0104 	orr.w	r1, r1, #4
    aeca:	e842 1400 	strex	r4, r1, [r2]
    aece:	2c00      	cmp	r4, #0
    aed0:	d1f7      	bne.n	aec2 <bt_smp_encrypt_change+0x9e>
    aed2:	f3bf 8f5b 	dmb	ish
	    conn->role == BT_HCI_ROLE_MASTER && smp->remote_dist) {
    aed6:	78db      	ldrb	r3, [r3, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    aed8:	b91b      	cbnz	r3, aee2 <bt_smp_encrypt_change+0xbe>
	    conn->role == BT_HCI_ROLE_MASTER && smp->remote_dist) {
    aeda:	f890 317a 	ldrb.w	r3, [r0, #378]	; 0x17a
    aede:	2b00      	cmp	r3, #0
    aee0:	d1b9      	bne.n	ae56 <bt_smp_encrypt_change+0x32>
    aee2:	4604      	mov	r4, r0
	bt_smp_distribute_keys(smp);
    aee4:	f7ff ff58 	bl	ad98 <bt_smp_distribute_keys>
	if (!smp->local_dist && !smp->remote_dist) {
    aee8:	f8d4 3178 	ldr.w	r3, [r4, #376]	; 0x178
    aeec:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    aef0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    aef4:	2b00      	cmp	r3, #0
    aef6:	d1ae      	bne.n	ae56 <bt_smp_encrypt_change+0x32>
		smp_pairing_complete(smp, 0);
    aef8:	2100      	movs	r1, #0
    aefa:	4620      	mov	r0, r4
    aefc:	f7ff fdcb 	bl	aa96 <smp_pairing_complete>
    af00:	e7a9      	b.n	ae56 <bt_smp_encrypt_change+0x32>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
    af02:	309c      	adds	r0, #156	; 0x9c
    af04:	f3bf 8f5b 	dmb	ish
    af08:	e850 3f00 	ldrex	r3, [r0]
    af0c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    af10:	e840 3200 	strex	r2, r3, [r0]
    af14:	2a00      	cmp	r2, #0
    af16:	d1f7      	bne.n	af08 <bt_smp_encrypt_change+0xe4>
    af18:	f3bf 8f5b 	dmb	ish
    af1c:	bd10      	pop	{r4, pc}
    af1e:	f3bf 8f5b 	dmb	ish
    af22:	e852 1f00 	ldrex	r1, [r2]
    af26:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
    af2a:	e842 1400 	strex	r4, r1, [r2]
    af2e:	2c00      	cmp	r4, #0
    af30:	d1f7      	bne.n	af22 <bt_smp_encrypt_change+0xfe>
    af32:	f3bf 8f5b 	dmb	ish
    af36:	e7ab      	b.n	ae90 <bt_smp_encrypt_change+0x6c>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_ENCRYPT_INFO);
    af38:	f100 019c 	add.w	r1, r0, #156	; 0x9c
    af3c:	f3bf 8f5b 	dmb	ish
    af40:	e851 4f00 	ldrex	r4, [r1]
    af44:	f044 0440 	orr.w	r4, r4, #64	; 0x40
    af48:	e841 4e00 	strex	lr, r4, [r1]
    af4c:	f1be 0f00 	cmp.w	lr, #0
    af50:	d1f6      	bne.n	af40 <bt_smp_encrypt_change+0x11c>
    af52:	f3bf 8f5b 	dmb	ish
    af56:	e7b2      	b.n	aebe <bt_smp_encrypt_change+0x9a>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
    af58:	f100 019c 	add.w	r1, r0, #156	; 0x9c
    af5c:	f3bf 8f5b 	dmb	ish
    af60:	e851 4f00 	ldrex	r4, [r1]
    af64:	f444 7480 	orr.w	r4, r4, #256	; 0x100
    af68:	e841 4e00 	strex	lr, r4, [r1]
    af6c:	f1be 0f00 	cmp.w	lr, #0
    af70:	d1f6      	bne.n	af60 <bt_smp_encrypt_change+0x13c>
    af72:	f3bf 8f5b 	dmb	ish
    af76:	e7a2      	b.n	aebe <bt_smp_encrypt_change+0x9a>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    af78:	f100 019c 	add.w	r1, r0, #156	; 0x9c
    af7c:	f3bf 8f5b 	dmb	ish
    af80:	e851 4f00 	ldrex	r4, [r1]
    af84:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
    af88:	e841 4e00 	strex	lr, r4, [r1]
    af8c:	f1be 0f00 	cmp.w	lr, #0
    af90:	d1f6      	bne.n	af80 <bt_smp_encrypt_change+0x15c>
    af92:	f3bf 8f5b 	dmb	ish
    af96:	e792      	b.n	aebe <bt_smp_encrypt_change+0x9a>

0000af98 <bt_smp_recv>:
{
    af98:	b570      	push	{r4, r5, r6, lr}
	struct bt_smp_hdr *hdr = (void *)buf->data;
    af9a:	688e      	ldr	r6, [r1, #8]
	if (buf->len < sizeof(*hdr)) {
    af9c:	898b      	ldrh	r3, [r1, #12]
    af9e:	b903      	cbnz	r3, afa2 <bt_smp_recv+0xa>
    afa0:	bd70      	pop	{r4, r5, r6, pc}
    afa2:	460c      	mov	r4, r1
    afa4:	4605      	mov	r5, r0
	net_buf_pull(buf, sizeof(*hdr));
    afa6:	2101      	movs	r1, #1
    afa8:	f104 0008 	add.w	r0, r4, #8
    afac:	f00f f943 	bl	1a236 <net_buf_simple_pull>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    afb0:	f3bf 8f5b 	dmb	ish
    afb4:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
    afb8:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
    afbc:	f013 0f10 	tst.w	r3, #16
    afc0:	d1ee      	bne.n	afa0 <bt_smp_recv+0x8>
	if (hdr->code >= ARRAY_SIZE(handlers) || !handlers[hdr->code].func) {
    afc2:	7833      	ldrb	r3, [r6, #0]
    afc4:	2b0d      	cmp	r3, #13
    afc6:	d824      	bhi.n	b012 <bt_smp_recv+0x7a>
    afc8:	4a21      	ldr	r2, [pc, #132]	; (b050 <bt_smp_recv+0xb8>)
    afca:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
    afce:	b302      	cbz	r2, b012 <bt_smp_recv+0x7a>
	if (!atomic_test_and_clear_bit(&smp->allowed_cmds, hdr->code)) {
    afd0:	f105 029c 	add.w	r2, r5, #156	; 0x9c
 *
 * @return 1 if the bit was set, 0 if it wasn't.
 */
static inline int atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    afd4:	f003 001f 	and.w	r0, r3, #31
    afd8:	2101      	movs	r1, #1
    afda:	4081      	lsls	r1, r0
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    afdc:	095b      	lsrs	r3, r3, #5
    afde:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    afe2:	43c8      	mvns	r0, r1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    afe4:	f3bf 8f5b 	dmb	ish
    afe8:	e853 2f00 	ldrex	r2, [r3]
    afec:	ea02 0e00 	and.w	lr, r2, r0
    aff0:	e843 ec00 	strex	ip, lr, [r3]
    aff4:	f1bc 0f00 	cmp.w	ip, #0
    aff8:	d1f6      	bne.n	afe8 <bt_smp_recv+0x50>
    affa:	f3bf 8f5b 	dmb	ish
    affe:	4211      	tst	r1, r2
    b000:	d10c      	bne.n	b01c <bt_smp_recv+0x84>
		if (hdr->code != BT_SMP_CMD_PAIRING_FAIL) {
    b002:	7833      	ldrb	r3, [r6, #0]
    b004:	2b05      	cmp	r3, #5
    b006:	d0cb      	beq.n	afa0 <bt_smp_recv+0x8>
			smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
    b008:	2108      	movs	r1, #8
    b00a:	4628      	mov	r0, r5
    b00c:	f7ff fd47 	bl	aa9e <smp_error>
    b010:	bd70      	pop	{r4, r5, r6, pc}
		smp_error(smp, BT_SMP_ERR_CMD_NOTSUPP);
    b012:	2107      	movs	r1, #7
    b014:	4628      	mov	r0, r5
    b016:	f7ff fd42 	bl	aa9e <smp_error>
		return;
    b01a:	bd70      	pop	{r4, r5, r6, pc}
	if (buf->len != handlers[hdr->code].expect_len) {
    b01c:	89a1      	ldrh	r1, [r4, #12]
    b01e:	7832      	ldrb	r2, [r6, #0]
    b020:	4b0b      	ldr	r3, [pc, #44]	; (b050 <bt_smp_recv+0xb8>)
    b022:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    b026:	791b      	ldrb	r3, [r3, #4]
    b028:	4299      	cmp	r1, r3
    b02a:	d004      	beq.n	b036 <bt_smp_recv+0x9e>
		smp_error(smp, BT_SMP_ERR_INVALID_PARAMS);
    b02c:	210a      	movs	r1, #10
    b02e:	4628      	mov	r0, r5
    b030:	f7ff fd35 	bl	aa9e <smp_error>
		return;
    b034:	bd70      	pop	{r4, r5, r6, pc}
	err = handlers[hdr->code].func(smp, buf);
    b036:	4b06      	ldr	r3, [pc, #24]	; (b050 <bt_smp_recv+0xb8>)
    b038:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    b03c:	4621      	mov	r1, r4
    b03e:	4628      	mov	r0, r5
    b040:	4798      	blx	r3
	if (err) {
    b042:	4601      	mov	r1, r0
    b044:	2800      	cmp	r0, #0
    b046:	d0ab      	beq.n	afa0 <bt_smp_recv+0x8>
		smp_error(smp, err);
    b048:	4628      	mov	r0, r5
    b04a:	f7ff fd28 	bl	aa9e <smp_error>
    b04e:	e7a7      	b.n	afa0 <bt_smp_recv+0x8>
    b050:	0002f554 	.word	0x0002f554

0000b054 <smp_dhkey_check>:
{
    b054:	b570      	push	{r4, r5, r6, lr}
    b056:	b08c      	sub	sp, #48	; 0x30
    b058:	4605      	mov	r5, r0
	struct bt_smp_dhkey_check *req = (void *)buf->data;
    b05a:	688e      	ldr	r6, [r1, #8]
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    b05c:	6803      	ldr	r3, [r0, #0]
    b05e:	78dc      	ldrb	r4, [r3, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    b060:	b12c      	cbz	r4, b06e <smp_dhkey_check+0x1a>
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_SLAVE) {
    b062:	2c01      	cmp	r4, #1
    b064:	d058      	beq.n	b118 <smp_dhkey_check+0xc4>
	return 0;
    b066:	2400      	movs	r4, #0
}
    b068:	4620      	mov	r0, r4
    b06a:	b00c      	add	sp, #48	; 0x30
    b06c:	bd70      	pop	{r4, r5, r6, pc}
		memset(r, 0, sizeof(r));
    b06e:	2210      	movs	r2, #16
    b070:	2100      	movs	r1, #0
    b072:	a808      	add	r0, sp, #32
    b074:	f01f fd06 	bl	2aa84 <memset>
		switch (smp->method) {
    b078:	f895 30a4 	ldrb.w	r3, [r5, #164]	; 0xa4
    b07c:	2b03      	cmp	r3, #3
    b07e:	d847      	bhi.n	b110 <smp_dhkey_check+0xbc>
    b080:	e8df f003 	tbb	[pc, r3]
    b084:	08020208 	.word	0x08020208
			memcpy(r, &smp->passkey, sizeof(smp->passkey));
    b088:	2204      	movs	r2, #4
    b08a:	f505 71ba 	add.w	r1, r5, #372	; 0x174
    b08e:	a808      	add	r0, sp, #32
    b090:	f7f5 f916 	bl	2c0 <memcpy>
		if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->prsp[1],
    b094:	f105 02ad 	add.w	r2, r5, #173	; 0xad
			   &smp->chan.chan.conn->le.resp_addr,
    b098:	682b      	ldr	r3, [r5, #0]
    b09a:	f103 0156 	add.w	r1, r3, #86	; 0x56
			   &smp->chan.chan.conn->le.init_addr, e)) {
    b09e:	334f      	adds	r3, #79	; 0x4f
		if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->prsp[1],
    b0a0:	a804      	add	r0, sp, #16
    b0a2:	9003      	str	r0, [sp, #12]
    b0a4:	9302      	str	r3, [sp, #8]
    b0a6:	9101      	str	r1, [sp, #4]
    b0a8:	9200      	str	r2, [sp, #0]
    b0aa:	ab08      	add	r3, sp, #32
    b0ac:	f105 02c3 	add.w	r2, r5, #195	; 0xc3
    b0b0:	f105 01d3 	add.w	r1, r5, #211	; 0xd3
    b0b4:	f205 1063 	addw	r0, r5, #355	; 0x163
    b0b8:	f7ff f96e 	bl	a398 <smp_f6>
    b0bc:	b108      	cbz	r0, b0c2 <smp_dhkey_check+0x6e>
			return BT_SMP_ERR_UNSPECIFIED;
    b0be:	2408      	movs	r4, #8
    b0c0:	e7d2      	b.n	b068 <smp_dhkey_check+0x14>
		if (memcmp(e, req->e, 16)) {
    b0c2:	2210      	movs	r2, #16
    b0c4:	4631      	mov	r1, r6
    b0c6:	eb0d 0002 	add.w	r0, sp, r2
    b0ca:	f01f fc47 	bl	2a95c <memcmp>
    b0ce:	b108      	cbz	r0, b0d4 <smp_dhkey_check+0x80>
			return BT_SMP_ERR_DHKEY_CHECK_FAILED;
    b0d0:	240b      	movs	r4, #11
    b0d2:	e7c9      	b.n	b068 <smp_dhkey_check+0x14>
		enc_size = get_encryption_key_size(smp);
    b0d4:	4628      	mov	r0, r5
    b0d6:	f7fe fe63 	bl	9da0 <get_encryption_key_size>
						smp->tk, enc_size) < 0) {
    b0da:	f105 03e3 	add.w	r3, r5, #227	; 0xe3
		if (bt_conn_le_start_encryption(smp->chan.chan.conn, 0, 0,
    b0de:	9002      	str	r0, [sp, #8]
    b0e0:	9301      	str	r3, [sp, #4]
    b0e2:	2300      	movs	r3, #0
    b0e4:	9300      	str	r3, [sp, #0]
    b0e6:	2200      	movs	r2, #0
    b0e8:	2300      	movs	r3, #0
    b0ea:	6828      	ldr	r0, [r5, #0]
    b0ec:	f7fb f898 	bl	6220 <bt_conn_le_start_encryption>
    b0f0:	2800      	cmp	r0, #0
    b0f2:	db0f      	blt.n	b114 <smp_dhkey_check+0xc0>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    b0f4:	35a0      	adds	r5, #160	; 0xa0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b0f6:	f3bf 8f5b 	dmb	ish
    b0fa:	e855 3f00 	ldrex	r3, [r5]
    b0fe:	f043 0302 	orr.w	r3, r3, #2
    b102:	e845 3200 	strex	r2, r3, [r5]
    b106:	2a00      	cmp	r2, #0
    b108:	d1f7      	bne.n	b0fa <smp_dhkey_check+0xa6>
    b10a:	f3bf 8f5b 	dmb	ish
		return 0;
    b10e:	e7ab      	b.n	b068 <smp_dhkey_check+0x14>
			return BT_SMP_ERR_UNSPECIFIED;
    b110:	2408      	movs	r4, #8
    b112:	e7a9      	b.n	b068 <smp_dhkey_check+0x14>
			return BT_SMP_ERR_UNSPECIFIED;
    b114:	2408      	movs	r4, #8
    b116:	e7a7      	b.n	b068 <smp_dhkey_check+0x14>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
    b118:	f100 04a0 	add.w	r4, r0, #160	; 0xa0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    b11c:	f3bf 8f5b 	dmb	ish
    b120:	e854 3f00 	ldrex	r3, [r4]
    b124:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    b128:	e844 3200 	strex	r2, r3, [r4]
    b12c:	2a00      	cmp	r2, #0
    b12e:	d1f7      	bne.n	b120 <smp_dhkey_check+0xcc>
    b130:	f3bf 8f5b 	dmb	ish
		memcpy(smp->e, req->e, sizeof(smp->e));
    b134:	2210      	movs	r2, #16
    b136:	4631      	mov	r1, r6
    b138:	f205 1053 	addw	r0, r5, #339	; 0x153
    b13c:	f7f5 f8c0 	bl	2c0 <memcpy>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    b140:	f3bf 8f5b 	dmb	ish
    b144:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
    b148:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
    b14c:	f013 0f80 	tst.w	r3, #128	; 0x80
    b150:	d10d      	bne.n	b16e <smp_dhkey_check+0x11a>
    b152:	f3bf 8f5b 	dmb	ish
    b156:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
    b15a:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    b15e:	f413 7f00 	tst.w	r3, #512	; 0x200
    b162:	d112      	bne.n	b18a <smp_dhkey_check+0x136>
		return compute_and_check_and_send_slave_dhcheck(smp);
    b164:	4628      	mov	r0, r5
    b166:	f7ff f9f5 	bl	a554 <compute_and_check_and_send_slave_dhcheck>
    b16a:	4604      	mov	r4, r0
    b16c:	e77c      	b.n	b068 <smp_dhkey_check+0x14>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b16e:	f3bf 8f5b 	dmb	ish
    b172:	e854 3f00 	ldrex	r3, [r4]
    b176:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    b17a:	e844 3200 	strex	r2, r3, [r4]
    b17e:	2a00      	cmp	r2, #0
    b180:	d1f7      	bne.n	b172 <smp_dhkey_check+0x11e>
    b182:	f3bf 8f5b 	dmb	ish
			return 0;
    b186:	2400      	movs	r4, #0
    b188:	e76e      	b.n	b068 <smp_dhkey_check+0x14>
    b18a:	f3bf 8f5b 	dmb	ish
    b18e:	e854 3f00 	ldrex	r3, [r4]
    b192:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    b196:	e844 3200 	strex	r2, r3, [r4]
    b19a:	2a00      	cmp	r2, #0
    b19c:	d1f7      	bne.n	b18e <smp_dhkey_check+0x13a>
    b19e:	f3bf 8f5b 	dmb	ish
			return 0;
    b1a2:	2400      	movs	r4, #0
    b1a4:	e760      	b.n	b068 <smp_dhkey_check+0x14>

0000b1a6 <legacy_pairing_random>:
{
    b1a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b1aa:	b088      	sub	sp, #32
    b1ac:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
    b1ae:	4605      	mov	r5, r0
    b1b0:	f855 6be3 	ldr.w	r6, [r5], #227
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
    b1b4:	f100 08d3 	add.w	r8, r0, #211	; 0xd3
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
    b1b8:	f106 034f 	add.w	r3, r6, #79	; 0x4f
    b1bc:	f106 0256 	add.w	r2, r6, #86	; 0x56
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
    b1c0:	a904      	add	r1, sp, #16
    b1c2:	9102      	str	r1, [sp, #8]
    b1c4:	9201      	str	r2, [sp, #4]
    b1c6:	9300      	str	r3, [sp, #0]
    b1c8:	f100 03ac 	add.w	r3, r0, #172	; 0xac
    b1cc:	f100 02a5 	add.w	r2, r0, #165	; 0xa5
    b1d0:	4641      	mov	r1, r8
    b1d2:	4628      	mov	r0, r5
    b1d4:	f7ff fada 	bl	a78c <smp_c1>
	if (err) {
    b1d8:	b120      	cbz	r0, b1e4 <legacy_pairing_random+0x3e>
		return BT_SMP_ERR_UNSPECIFIED;
    b1da:	2708      	movs	r7, #8
}
    b1dc:	4638      	mov	r0, r7
    b1de:	b008      	add	sp, #32
    b1e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (memcmp(smp->pcnf, tmp, sizeof(smp->pcnf))) {
    b1e4:	2210      	movs	r2, #16
    b1e6:	eb0d 0102 	add.w	r1, sp, r2
    b1ea:	f104 00b3 	add.w	r0, r4, #179	; 0xb3
    b1ee:	f01f fbb5 	bl	2a95c <memcmp>
    b1f2:	b108      	cbz	r0, b1f8 <legacy_pairing_random+0x52>
		return BT_SMP_ERR_CONFIRM_FAILED;
    b1f4:	2704      	movs	r7, #4
    b1f6:	e7f1      	b.n	b1dc <legacy_pairing_random+0x36>
	    conn->role == BT_HCI_ROLE_MASTER) {
    b1f8:	78f7      	ldrb	r7, [r6, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    b1fa:	bb3f      	cbnz	r7, b24c <legacy_pairing_random+0xa6>
		err = smp_s1(smp->tk, smp->rrnd, smp->prnd, tmp);
    b1fc:	ab04      	add	r3, sp, #16
    b1fe:	f104 02c3 	add.w	r2, r4, #195	; 0xc3
    b202:	4641      	mov	r1, r8
    b204:	4628      	mov	r0, r5
    b206:	f7ff fbf0 	bl	a9ea <smp_s1>
		if (err) {
    b20a:	b108      	cbz	r0, b210 <legacy_pairing_random+0x6a>
			return BT_SMP_ERR_UNSPECIFIED;
    b20c:	2708      	movs	r7, #8
    b20e:	e7e5      	b.n	b1dc <legacy_pairing_random+0x36>
						get_encryption_key_size(smp))) {
    b210:	4620      	mov	r0, r4
    b212:	f7fe fdc5 	bl	9da0 <get_encryption_key_size>
		if (bt_conn_le_start_encryption(conn, 0, 0, tmp,
    b216:	9002      	str	r0, [sp, #8]
    b218:	ab04      	add	r3, sp, #16
    b21a:	9301      	str	r3, [sp, #4]
    b21c:	2300      	movs	r3, #0
    b21e:	9300      	str	r3, [sp, #0]
    b220:	2200      	movs	r2, #0
    b222:	2300      	movs	r3, #0
    b224:	4630      	mov	r0, r6
    b226:	f7fa fffb 	bl	6220 <bt_conn_le_start_encryption>
    b22a:	b108      	cbz	r0, b230 <legacy_pairing_random+0x8a>
			return BT_SMP_ERR_UNSPECIFIED;
    b22c:	2708      	movs	r7, #8
    b22e:	e7d5      	b.n	b1dc <legacy_pairing_random+0x36>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    b230:	34a0      	adds	r4, #160	; 0xa0
    b232:	f3bf 8f5b 	dmb	ish
    b236:	e854 3f00 	ldrex	r3, [r4]
    b23a:	f043 0302 	orr.w	r3, r3, #2
    b23e:	e844 3200 	strex	r2, r3, [r4]
    b242:	2a00      	cmp	r2, #0
    b244:	d1f7      	bne.n	b236 <legacy_pairing_random+0x90>
    b246:	f3bf 8f5b 	dmb	ish
		return 0;
    b24a:	e7c7      	b.n	b1dc <legacy_pairing_random+0x36>
		err = smp_s1(smp->tk, smp->prnd, smp->rrnd, tmp);
    b24c:	ab04      	add	r3, sp, #16
    b24e:	4642      	mov	r2, r8
    b250:	f104 01c3 	add.w	r1, r4, #195	; 0xc3
    b254:	4628      	mov	r0, r5
    b256:	f7ff fbc8 	bl	a9ea <smp_s1>
		if (err) {
    b25a:	b108      	cbz	r0, b260 <legacy_pairing_random+0xba>
			return BT_SMP_ERR_UNSPECIFIED;
    b25c:	2708      	movs	r7, #8
    b25e:	e7bd      	b.n	b1dc <legacy_pairing_random+0x36>
		memcpy(smp->tk, tmp, sizeof(smp->tk));
    b260:	2210      	movs	r2, #16
    b262:	eb0d 0102 	add.w	r1, sp, r2
    b266:	4628      	mov	r0, r5
    b268:	f7f5 f82a 	bl	2c0 <memcpy>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    b26c:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
    b270:	f3bf 8f5b 	dmb	ish
    b274:	e853 2f00 	ldrex	r2, [r3]
    b278:	f042 0202 	orr.w	r2, r2, #2
    b27c:	e843 2100 	strex	r1, r2, [r3]
    b280:	2900      	cmp	r1, #0
    b282:	d1f7      	bne.n	b274 <legacy_pairing_random+0xce>
    b284:	f3bf 8f5b 	dmb	ish
		smp_send_pairing_random(smp);
    b288:	4620      	mov	r0, r4
    b28a:	f7fe feea 	bl	a062 <smp_send_pairing_random>
	return 0;
    b28e:	2700      	movs	r7, #0
    b290:	e7a4      	b.n	b1dc <legacy_pairing_random+0x36>
	...

0000b294 <smp_pairing_random>:
{
    b294:	b5f0      	push	{r4, r5, r6, r7, lr}
    b296:	b085      	sub	sp, #20
    b298:	4604      	mov	r4, r0
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
    b29a:	f100 05d3 	add.w	r5, r0, #211	; 0xd3
    b29e:	2210      	movs	r2, #16
    b2a0:	6889      	ldr	r1, [r1, #8]
    b2a2:	4628      	mov	r0, r5
    b2a4:	f7f5 f80c 	bl	2c0 <memcpy>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    b2a8:	f3bf 8f5b 	dmb	ish
    b2ac:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    b2b0:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    b2b4:	f013 0f20 	tst.w	r3, #32
    b2b8:	d00d      	beq.n	b2d6 <smp_pairing_random+0x42>
    b2ba:	f104 07a0 	add.w	r7, r4, #160	; 0xa0
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    b2be:	6823      	ldr	r3, [r4, #0]
    b2c0:	78db      	ldrb	r3, [r3, #3]
    b2c2:	b17b      	cbz	r3, b2e4 <smp_pairing_random+0x50>
	switch (smp->method) {
    b2c4:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    b2c8:	2b03      	cmp	r3, #3
    b2ca:	f200 8106 	bhi.w	b4da <smp_pairing_random+0x246>
    b2ce:	e8df f003 	tbb	[pc, r3]
    b2d2:	bfa0      	.short	0xbfa0
    b2d4:	81bf      	.short	0x81bf
		return legacy_pairing_random(smp);
    b2d6:	4620      	mov	r0, r4
    b2d8:	f7ff ff65 	bl	b1a6 <legacy_pairing_random>
    b2dc:	4606      	mov	r6, r0
}
    b2de:	4630      	mov	r0, r6
    b2e0:	b005      	add	sp, #20
    b2e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		err = sc_smp_check_confirm(smp);
    b2e4:	4620      	mov	r0, r4
    b2e6:	f7fe ff83 	bl	a1f0 <sc_smp_check_confirm>
		if (err) {
    b2ea:	4606      	mov	r6, r0
    b2ec:	2800      	cmp	r0, #0
    b2ee:	d1f6      	bne.n	b2de <smp_pairing_random+0x4a>
		switch (smp->method) {
    b2f0:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    b2f4:	2b03      	cmp	r3, #3
    b2f6:	f200 80ee 	bhi.w	b4d6 <smp_pairing_random+0x242>
    b2fa:	e8df f003 	tbb	[pc, r3]
    b2fe:	2e50      	.short	0x2e50
    b300:	022e      	.short	0x022e
			if (smp_g2(sc_public_key, smp->pkey, smp->prnd,
    b302:	ab03      	add	r3, sp, #12
    b304:	9300      	str	r3, [sp, #0]
    b306:	462b      	mov	r3, r5
    b308:	f104 02c3 	add.w	r2, r4, #195	; 0xc3
    b30c:	f104 01f3 	add.w	r1, r4, #243	; 0xf3
    b310:	4873      	ldr	r0, [pc, #460]	; (b4e0 <smp_pairing_random+0x24c>)
    b312:	f7ff f995 	bl	a640 <smp_g2>
    b316:	b108      	cbz	r0, b31c <smp_pairing_random+0x88>
				return BT_SMP_ERR_UNSPECIFIED;
    b318:	2608      	movs	r6, #8
    b31a:	e7e0      	b.n	b2de <smp_pairing_random+0x4a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b31c:	f3bf 8f5b 	dmb	ish
    b320:	e857 3f00 	ldrex	r3, [r7]
    b324:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    b328:	e847 3200 	strex	r2, r3, [r7]
    b32c:	2a00      	cmp	r2, #0
    b32e:	d1f7      	bne.n	b320 <smp_pairing_random+0x8c>
    b330:	f3bf 8f5b 	dmb	ish
    b334:	f3bf 8f5b 	dmb	ish
    b338:	e857 3f00 	ldrex	r3, [r7]
    b33c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    b340:	e847 3200 	strex	r2, r3, [r7]
    b344:	2a00      	cmp	r2, #0
    b346:	d1f7      	bne.n	b338 <smp_pairing_random+0xa4>
    b348:	f3bf 8f5b 	dmb	ish
			bt_auth->passkey_confirm(smp->chan.chan.conn, passkey);
    b34c:	4b65      	ldr	r3, [pc, #404]	; (b4e4 <smp_pairing_random+0x250>)
    b34e:	681b      	ldr	r3, [r3, #0]
    b350:	689b      	ldr	r3, [r3, #8]
    b352:	9903      	ldr	r1, [sp, #12]
    b354:	6820      	ldr	r0, [r4, #0]
    b356:	4798      	blx	r3
			return 0;
    b358:	e7c1      	b.n	b2de <smp_pairing_random+0x4a>
			smp->passkey_round++;
    b35a:	f894 3178 	ldrb.w	r3, [r4, #376]	; 0x178
    b35e:	3301      	adds	r3, #1
    b360:	b2db      	uxtb	r3, r3
    b362:	f884 3178 	strb.w	r3, [r4, #376]	; 0x178
			if (smp->passkey_round == 20) {
    b366:	2b14      	cmp	r3, #20
    b368:	d019      	beq.n	b39e <smp_pairing_random+0x10a>
			if (bt_rand(smp->prnd, 16)) {
    b36a:	2110      	movs	r1, #16
    b36c:	f104 00c3 	add.w	r0, r4, #195	; 0xc3
    b370:	f005 fb9e 	bl	10ab0 <bt_rand>
    b374:	b108      	cbz	r0, b37a <smp_pairing_random+0xe6>
				return BT_SMP_ERR_UNSPECIFIED;
    b376:	2608      	movs	r6, #8
    b378:	e7b1      	b.n	b2de <smp_pairing_random+0x4a>
			atomic_set_bit(&smp->allowed_cmds,
    b37a:	f104 039c 	add.w	r3, r4, #156	; 0x9c
    b37e:	f3bf 8f5b 	dmb	ish
    b382:	e853 2f00 	ldrex	r2, [r3]
    b386:	f042 0208 	orr.w	r2, r2, #8
    b38a:	e843 2100 	strex	r1, r2, [r3]
    b38e:	2900      	cmp	r1, #0
    b390:	d1f7      	bne.n	b382 <smp_pairing_random+0xee>
    b392:	f3bf 8f5b 	dmb	ish
			smp_send_pairing_confirm(smp);
    b396:	4620      	mov	r0, r4
    b398:	f7ff f9aa 	bl	a6f0 <smp_send_pairing_confirm>
			return 0;
    b39c:	e79f      	b.n	b2de <smp_pairing_random+0x4a>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    b39e:	f3bf 8f5b 	dmb	ish
    b3a2:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    b3a6:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
    b3aa:	f013 0f80 	tst.w	r3, #128	; 0x80
    b3ae:	d00c      	beq.n	b3ca <smp_pairing_random+0x136>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b3b0:	f3bf 8f5b 	dmb	ish
    b3b4:	e857 3f00 	ldrex	r3, [r7]
    b3b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    b3bc:	e847 3200 	strex	r2, r3, [r7]
    b3c0:	2a00      	cmp	r2, #0
    b3c2:	d1f7      	bne.n	b3b4 <smp_pairing_random+0x120>
    b3c4:	f3bf 8f5b 	dmb	ish
			return 0;
    b3c8:	e789      	b.n	b2de <smp_pairing_random+0x4a>
		return compute_and_send_master_dhcheck(smp);
    b3ca:	4620      	mov	r0, r4
    b3cc:	f7ff f868 	bl	a4a0 <compute_and_send_master_dhcheck>
    b3d0:	4606      	mov	r6, r0
    b3d2:	e784      	b.n	b2de <smp_pairing_random+0x4a>
		if (smp_g2(smp->pkey, sc_public_key, smp->rrnd, smp->prnd,
    b3d4:	ab03      	add	r3, sp, #12
    b3d6:	9300      	str	r3, [sp, #0]
    b3d8:	f104 03c3 	add.w	r3, r4, #195	; 0xc3
    b3dc:	462a      	mov	r2, r5
    b3de:	4940      	ldr	r1, [pc, #256]	; (b4e0 <smp_pairing_random+0x24c>)
    b3e0:	f104 00f3 	add.w	r0, r4, #243	; 0xf3
    b3e4:	f7ff f92c 	bl	a640 <smp_g2>
    b3e8:	b108      	cbz	r0, b3ee <smp_pairing_random+0x15a>
			return BT_SMP_ERR_UNSPECIFIED;
    b3ea:	2608      	movs	r6, #8
    b3ec:	e777      	b.n	b2de <smp_pairing_random+0x4a>
    b3ee:	f3bf 8f5b 	dmb	ish
    b3f2:	e857 3f00 	ldrex	r3, [r7]
    b3f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    b3fa:	e847 3200 	strex	r2, r3, [r7]
    b3fe:	2a00      	cmp	r2, #0
    b400:	d1f7      	bne.n	b3f2 <smp_pairing_random+0x15e>
    b402:	f3bf 8f5b 	dmb	ish
		bt_auth->passkey_confirm(smp->chan.chan.conn, passkey);
    b406:	4b37      	ldr	r3, [pc, #220]	; (b4e4 <smp_pairing_random+0x250>)
    b408:	681b      	ldr	r3, [r3, #0]
    b40a:	689b      	ldr	r3, [r3, #8]
    b40c:	9903      	ldr	r1, [sp, #12]
    b40e:	6820      	ldr	r0, [r4, #0]
    b410:	4798      	blx	r3
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
    b412:	f104 039c 	add.w	r3, r4, #156	; 0x9c
    b416:	f3bf 8f5b 	dmb	ish
    b41a:	e853 2f00 	ldrex	r2, [r3]
    b41e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    b422:	e843 2100 	strex	r1, r2, [r3]
    b426:	2900      	cmp	r1, #0
    b428:	d1f7      	bne.n	b41a <smp_pairing_random+0x186>
    b42a:	f3bf 8f5b 	dmb	ish
    b42e:	f3bf 8f5b 	dmb	ish
    b432:	e857 3f00 	ldrex	r3, [r7]
    b436:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    b43a:	e847 3200 	strex	r2, r3, [r7]
    b43e:	2a00      	cmp	r2, #0
    b440:	d1f7      	bne.n	b432 <smp_pairing_random+0x19e>
    b442:	f3bf 8f5b 	dmb	ish
	smp_send_pairing_random(smp);
    b446:	4620      	mov	r0, r4
    b448:	f7fe fe0b 	bl	a062 <smp_send_pairing_random>
	return 0;
    b44c:	2600      	movs	r6, #0
    b44e:	e746      	b.n	b2de <smp_pairing_random+0x4a>
		err = sc_smp_check_confirm(smp);
    b450:	4620      	mov	r0, r4
    b452:	f7fe fecd 	bl	a1f0 <sc_smp_check_confirm>
		if (err) {
    b456:	4606      	mov	r6, r0
    b458:	2800      	cmp	r0, #0
    b45a:	f47f af40 	bne.w	b2de <smp_pairing_random+0x4a>
		atomic_set_bit(&smp->allowed_cmds,
    b45e:	f104 059c 	add.w	r5, r4, #156	; 0x9c
    b462:	f3bf 8f5b 	dmb	ish
    b466:	e855 3f00 	ldrex	r3, [r5]
    b46a:	f043 0308 	orr.w	r3, r3, #8
    b46e:	e845 3200 	strex	r2, r3, [r5]
    b472:	2a00      	cmp	r2, #0
    b474:	d1f7      	bne.n	b466 <smp_pairing_random+0x1d2>
    b476:	f3bf 8f5b 	dmb	ish
		smp_send_pairing_random(smp);
    b47a:	4620      	mov	r0, r4
    b47c:	f7fe fdf1 	bl	a062 <smp_send_pairing_random>
		smp->passkey_round++;
    b480:	f894 3178 	ldrb.w	r3, [r4, #376]	; 0x178
    b484:	3301      	adds	r3, #1
    b486:	b2db      	uxtb	r3, r3
    b488:	f884 3178 	strb.w	r3, [r4, #376]	; 0x178
		if (smp->passkey_round == 20) {
    b48c:	2b14      	cmp	r3, #20
    b48e:	d009      	beq.n	b4a4 <smp_pairing_random+0x210>
		if (bt_rand(smp->prnd, 16)) {
    b490:	2110      	movs	r1, #16
    b492:	f104 00c3 	add.w	r0, r4, #195	; 0xc3
    b496:	f005 fb0b 	bl	10ab0 <bt_rand>
    b49a:	2800      	cmp	r0, #0
    b49c:	f43f af1f 	beq.w	b2de <smp_pairing_random+0x4a>
			return BT_SMP_ERR_UNSPECIFIED;
    b4a0:	2608      	movs	r6, #8
    b4a2:	e71c      	b.n	b2de <smp_pairing_random+0x4a>
    b4a4:	f3bf 8f5b 	dmb	ish
    b4a8:	e855 3f00 	ldrex	r3, [r5]
    b4ac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    b4b0:	e845 3200 	strex	r2, r3, [r5]
    b4b4:	2a00      	cmp	r2, #0
    b4b6:	d1f7      	bne.n	b4a8 <smp_pairing_random+0x214>
    b4b8:	f3bf 8f5b 	dmb	ish
    b4bc:	f3bf 8f5b 	dmb	ish
    b4c0:	e857 3f00 	ldrex	r3, [r7]
    b4c4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    b4c8:	e847 3200 	strex	r2, r3, [r7]
    b4cc:	2a00      	cmp	r2, #0
    b4ce:	d1f7      	bne.n	b4c0 <smp_pairing_random+0x22c>
    b4d0:	f3bf 8f5b 	dmb	ish
			return 0;
    b4d4:	e703      	b.n	b2de <smp_pairing_random+0x4a>
			return BT_SMP_ERR_UNSPECIFIED;
    b4d6:	2608      	movs	r6, #8
    b4d8:	e701      	b.n	b2de <smp_pairing_random+0x4a>
		return BT_SMP_ERR_UNSPECIFIED;
    b4da:	2608      	movs	r6, #8
    b4dc:	e6ff      	b.n	b2de <smp_pairing_random+0x4a>
    b4de:	bf00      	nop
    b4e0:	200008f8 	.word	0x200008f8
    b4e4:	20002940 	.word	0x20002940

0000b4e8 <generate_dhkey>:
{
    b4e8:	b510      	push	{r4, lr}
    b4ea:	4604      	mov	r4, r0
	if (bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready)) {
    b4ec:	490a      	ldr	r1, [pc, #40]	; (b518 <generate_dhkey+0x30>)
    b4ee:	30f3      	adds	r0, #243	; 0xf3
    b4f0:	f7fa fd1e 	bl	5f30 <bt_dh_key_gen>
    b4f4:	b108      	cbz	r0, b4fa <generate_dhkey+0x12>
		return BT_SMP_ERR_UNSPECIFIED;
    b4f6:	2008      	movs	r0, #8
}
    b4f8:	bd10      	pop	{r4, pc}
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
    b4fa:	34a0      	adds	r4, #160	; 0xa0
    b4fc:	f3bf 8f5b 	dmb	ish
    b500:	e854 3f00 	ldrex	r3, [r4]
    b504:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b508:	e844 3200 	strex	r2, r3, [r4]
    b50c:	2a00      	cmp	r2, #0
    b50e:	d1f7      	bne.n	b500 <generate_dhkey+0x18>
    b510:	f3bf 8f5b 	dmb	ish
	return 0;
    b514:	bd10      	pop	{r4, pc}
    b516:	bf00      	nop
    b518:	0000aad9 	.word	0x0000aad9

0000b51c <smp_public_key_slave>:
{
    b51c:	b510      	push	{r4, lr}
    b51e:	4604      	mov	r4, r0
	err = sc_send_public_key(smp);
    b520:	f7fe fd60 	bl	9fe4 <sc_send_public_key>
	if (err) {
    b524:	4603      	mov	r3, r0
    b526:	2800      	cmp	r0, #0
    b528:	d154      	bne.n	b5d4 <smp_public_key_slave+0xb8>
	switch (smp->method) {
    b52a:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    b52e:	2b03      	cmp	r3, #3
    b530:	d852      	bhi.n	b5d8 <smp_public_key_slave+0xbc>
    b532:	e8df f003 	tbb	[pc, r3]
    b536:	2a02      	.short	0x2a02
    b538:	0216      	.short	0x0216
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    b53a:	f104 039c 	add.w	r3, r4, #156	; 0x9c
    b53e:	f3bf 8f5b 	dmb	ish
    b542:	e853 2f00 	ldrex	r2, [r3]
    b546:	f042 0210 	orr.w	r2, r2, #16
    b54a:	e843 2100 	strex	r1, r2, [r3]
    b54e:	2900      	cmp	r1, #0
    b550:	d1f7      	bne.n	b542 <smp_public_key_slave+0x26>
    b552:	f3bf 8f5b 	dmb	ish
		err = smp_send_pairing_confirm(smp);
    b556:	4620      	mov	r0, r4
    b558:	f7ff f8ca 	bl	a6f0 <smp_send_pairing_confirm>
		if (err) {
    b55c:	4603      	mov	r3, r0
    b55e:	b3a8      	cbz	r0, b5cc <smp_public_key_slave+0xb0>
    b560:	e038      	b.n	b5d4 <smp_public_key_slave+0xb8>
		err = display_passkey(smp);
    b562:	4620      	mov	r0, r4
    b564:	f7fe fcea 	bl	9f3c <display_passkey>
		if (err) {
    b568:	4603      	mov	r3, r0
    b56a:	bb98      	cbnz	r0, b5d4 <smp_public_key_slave+0xb8>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    b56c:	f104 039c 	add.w	r3, r4, #156	; 0x9c
    b570:	f3bf 8f5b 	dmb	ish
    b574:	e853 2f00 	ldrex	r2, [r3]
    b578:	f042 0208 	orr.w	r2, r2, #8
    b57c:	e843 2100 	strex	r1, r2, [r3]
    b580:	2900      	cmp	r1, #0
    b582:	d1f7      	bne.n	b574 <smp_public_key_slave+0x58>
    b584:	f3bf 8f5b 	dmb	ish
    b588:	e020      	b.n	b5cc <smp_public_key_slave+0xb0>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    b58a:	f104 039c 	add.w	r3, r4, #156	; 0x9c
    b58e:	f3bf 8f5b 	dmb	ish
    b592:	e853 2f00 	ldrex	r2, [r3]
    b596:	f042 0208 	orr.w	r2, r2, #8
    b59a:	e843 2100 	strex	r1, r2, [r3]
    b59e:	2900      	cmp	r1, #0
    b5a0:	d1f7      	bne.n	b592 <smp_public_key_slave+0x76>
    b5a2:	f3bf 8f5b 	dmb	ish
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    b5a6:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
    b5aa:	f3bf 8f5b 	dmb	ish
    b5ae:	e853 2f00 	ldrex	r2, [r3]
    b5b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    b5b6:	e843 2100 	strex	r1, r2, [r3]
    b5ba:	2900      	cmp	r1, #0
    b5bc:	d1f7      	bne.n	b5ae <smp_public_key_slave+0x92>
    b5be:	f3bf 8f5b 	dmb	ish
		bt_auth->passkey_entry(smp->chan.chan.conn);
    b5c2:	4b06      	ldr	r3, [pc, #24]	; (b5dc <smp_public_key_slave+0xc0>)
    b5c4:	681b      	ldr	r3, [r3, #0]
    b5c6:	685b      	ldr	r3, [r3, #4]
    b5c8:	6820      	ldr	r0, [r4, #0]
    b5ca:	4798      	blx	r3
	return generate_dhkey(smp);
    b5cc:	4620      	mov	r0, r4
    b5ce:	f7ff ff8b 	bl	b4e8 <generate_dhkey>
    b5d2:	4603      	mov	r3, r0
}
    b5d4:	4618      	mov	r0, r3
    b5d6:	bd10      	pop	{r4, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    b5d8:	2308      	movs	r3, #8
    b5da:	e7fb      	b.n	b5d4 <smp_public_key_slave+0xb8>
    b5dc:	20002940 	.word	0x20002940

0000b5e0 <bt_smp_pkey_ready>:
{
    b5e0:	b538      	push	{r3, r4, r5, lr}
	if (!pkey) {
    b5e2:	b150      	cbz	r0, b5fa <bt_smp_pkey_ready+0x1a>
    b5e4:	4601      	mov	r1, r0
	memcpy(sc_public_key, pkey, 64);
    b5e6:	2240      	movs	r2, #64	; 0x40
    b5e8:	4826      	ldr	r0, [pc, #152]	; (b684 <bt_smp_pkey_ready+0xa4>)
    b5ea:	f7f4 fe69 	bl	2c0 <memcpy>
	sc_local_pkey_valid = true;
    b5ee:	2201      	movs	r2, #1
    b5f0:	4b25      	ldr	r3, [pc, #148]	; (b688 <bt_smp_pkey_ready+0xa8>)
    b5f2:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
    b5f4:	2400      	movs	r4, #0
    b5f6:	b124      	cbz	r4, b602 <bt_smp_pkey_ready+0x22>
    b5f8:	bd38      	pop	{r3, r4, r5, pc}
		sc_local_pkey_valid = false;
    b5fa:	2200      	movs	r2, #0
    b5fc:	4b22      	ldr	r3, [pc, #136]	; (b688 <bt_smp_pkey_ready+0xa8>)
    b5fe:	701a      	strb	r2, [r3, #0]
		return;
    b600:	bd38      	pop	{r3, r4, r5, pc}
		struct bt_smp *smp = &bt_smp_pool[i];
    b602:	4a22      	ldr	r2, [pc, #136]	; (b68c <bt_smp_pkey_ready+0xac>)
    b604:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
    b608:	fb03 f304 	mul.w	r3, r3, r4
    b60c:	18d5      	adds	r5, r2, r3
		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
    b60e:	33a0      	adds	r3, #160	; 0xa0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    b610:	f3bf 8f5b 	dmb	ish
    b614:	58d3      	ldr	r3, [r2, r3]
    b616:	f3bf 8f5b 	dmb	ish
    b61a:	f013 0f40 	tst.w	r3, #64	; 0x40
    b61e:	d020      	beq.n	b662 <bt_smp_pkey_ready+0x82>
		    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    b620:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
    b624:	fb03 f304 	mul.w	r3, r3, r4
    b628:	58d3      	ldr	r3, [r2, r3]
    b62a:	78db      	ldrb	r3, [r3, #3]
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    b62c:	b9fb      	cbnz	r3, b66e <bt_smp_pkey_ready+0x8e>
			err = sc_send_public_key(smp);
    b62e:	4628      	mov	r0, r5
    b630:	f7fe fcd8 	bl	9fe4 <sc_send_public_key>
			if (err) {
    b634:	4601      	mov	r1, r0
    b636:	b9b0      	cbnz	r0, b666 <bt_smp_pkey_ready+0x86>
			atomic_set_bit(&smp->allowed_cmds,
    b638:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
    b63c:	fb03 f304 	mul.w	r3, r3, r4
    b640:	f103 0298 	add.w	r2, r3, #152	; 0x98
    b644:	4b11      	ldr	r3, [pc, #68]	; (b68c <bt_smp_pkey_ready+0xac>)
    b646:	4413      	add	r3, r2
    b648:	3304      	adds	r3, #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b64a:	f3bf 8f5b 	dmb	ish
    b64e:	e853 2f00 	ldrex	r2, [r3]
    b652:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    b656:	e843 2100 	strex	r1, r2, [r3]
    b65a:	2900      	cmp	r1, #0
    b65c:	d1f7      	bne.n	b64e <bt_smp_pkey_ready+0x6e>
    b65e:	f3bf 8f5b 	dmb	ish
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
    b662:	3401      	adds	r4, #1
    b664:	e7c7      	b.n	b5f6 <bt_smp_pkey_ready+0x16>
				smp_error(smp, err);
    b666:	4628      	mov	r0, r5
    b668:	f7ff fa19 	bl	aa9e <smp_error>
    b66c:	e7e4      	b.n	b638 <bt_smp_pkey_ready+0x58>
		err = smp_public_key_slave(smp);
    b66e:	4628      	mov	r0, r5
    b670:	f7ff ff54 	bl	b51c <smp_public_key_slave>
		if (err) {
    b674:	4601      	mov	r1, r0
    b676:	2800      	cmp	r0, #0
    b678:	d0f3      	beq.n	b662 <bt_smp_pkey_ready+0x82>
			smp_error(smp, err);
    b67a:	4628      	mov	r0, r5
    b67c:	f7ff fa0f 	bl	aa9e <smp_error>
    b680:	e7ef      	b.n	b662 <bt_smp_pkey_ready+0x82>
    b682:	bf00      	nop
    b684:	200008f8 	.word	0x200008f8
    b688:	200008f4 	.word	0x200008f4
    b68c:	20000750 	.word	0x20000750

0000b690 <smp_public_key>:
{
    b690:	b570      	push	{r4, r5, r6, lr}
    b692:	4604      	mov	r4, r0
	struct bt_smp_public_key *req = (void *)buf->data;
    b694:	688e      	ldr	r6, [r1, #8]
	memcpy(smp->pkey, req->x, 32);
    b696:	f100 05f3 	add.w	r5, r0, #243	; 0xf3
    b69a:	2220      	movs	r2, #32
    b69c:	4631      	mov	r1, r6
    b69e:	4628      	mov	r0, r5
    b6a0:	f7f4 fe0e 	bl	2c0 <memcpy>
	memcpy(&smp->pkey[32], req->y, 32);
    b6a4:	2220      	movs	r2, #32
    b6a6:	18b1      	adds	r1, r6, r2
    b6a8:	f204 1013 	addw	r0, r4, #275	; 0x113
    b6ac:	f7f4 fe08 	bl	2c0 <memcpy>
	if (memcmp(smp->pkey, sc_debug_public_key, 64) == 0) {
    b6b0:	2240      	movs	r2, #64	; 0x40
    b6b2:	493d      	ldr	r1, [pc, #244]	; (b7a8 <smp_public_key+0x118>)
    b6b4:	4628      	mov	r0, r5
    b6b6:	f01f f951 	bl	2a95c <memcmp>
    b6ba:	b158      	cbz	r0, b6d4 <smp_public_key+0x44>
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    b6bc:	6823      	ldr	r3, [r4, #0]
    b6be:	78db      	ldrb	r3, [r3, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    b6c0:	2b00      	cmp	r3, #0
    b6c2:	d156      	bne.n	b772 <smp_public_key+0xe2>
		switch (smp->method) {
    b6c4:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    b6c8:	2b03      	cmp	r3, #3
    b6ca:	d86a      	bhi.n	b7a2 <smp_public_key+0x112>
    b6cc:	e8df f003 	tbb	[pc, r3]
    b6d0:	11243d11 	.word	0x11243d11
		atomic_set_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY);
    b6d4:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
    b6d8:	f3bf 8f5b 	dmb	ish
    b6dc:	e853 2f00 	ldrex	r2, [r3]
    b6e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    b6e4:	e843 2100 	strex	r1, r2, [r3]
    b6e8:	2900      	cmp	r1, #0
    b6ea:	d1f7      	bne.n	b6dc <smp_public_key+0x4c>
    b6ec:	f3bf 8f5b 	dmb	ish
    b6f0:	e7e4      	b.n	b6bc <smp_public_key+0x2c>
			atomic_set_bit(&smp->allowed_cmds,
    b6f2:	f104 039c 	add.w	r3, r4, #156	; 0x9c
    b6f6:	f3bf 8f5b 	dmb	ish
    b6fa:	e853 2f00 	ldrex	r2, [r3]
    b6fe:	f042 0208 	orr.w	r2, r2, #8
    b702:	e843 2100 	strex	r1, r2, [r3]
    b706:	2900      	cmp	r1, #0
    b708:	d1f7      	bne.n	b6fa <smp_public_key+0x6a>
    b70a:	f3bf 8f5b 	dmb	ish
		return generate_dhkey(smp);
    b70e:	4620      	mov	r0, r4
    b710:	f7ff feea 	bl	b4e8 <generate_dhkey>
    b714:	4603      	mov	r3, r0
    b716:	e033      	b.n	b780 <smp_public_key+0xf0>
			err = display_passkey(smp);
    b718:	4620      	mov	r0, r4
    b71a:	f7fe fc0f 	bl	9f3c <display_passkey>
			if (err) {
    b71e:	4603      	mov	r3, r0
    b720:	bb70      	cbnz	r0, b780 <smp_public_key+0xf0>
			atomic_set_bit(&smp->allowed_cmds,
    b722:	f104 039c 	add.w	r3, r4, #156	; 0x9c
    b726:	f3bf 8f5b 	dmb	ish
    b72a:	e853 2f00 	ldrex	r2, [r3]
    b72e:	f042 0208 	orr.w	r2, r2, #8
    b732:	e843 2100 	strex	r1, r2, [r3]
    b736:	2900      	cmp	r1, #0
    b738:	d1f7      	bne.n	b72a <smp_public_key+0x9a>
    b73a:	f3bf 8f5b 	dmb	ish
			err = smp_send_pairing_confirm(smp);
    b73e:	4620      	mov	r0, r4
    b740:	f7fe ffd6 	bl	a6f0 <smp_send_pairing_confirm>
			if (err) {
    b744:	4603      	mov	r3, r0
    b746:	b9d8      	cbnz	r0, b780 <smp_public_key+0xf0>
    b748:	e7e1      	b.n	b70e <smp_public_key+0x7e>
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
    b74a:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
    b74e:	f3bf 8f5b 	dmb	ish
    b752:	e853 2f00 	ldrex	r2, [r3]
    b756:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    b75a:	e843 2100 	strex	r1, r2, [r3]
    b75e:	2900      	cmp	r1, #0
    b760:	d1f7      	bne.n	b752 <smp_public_key+0xc2>
    b762:	f3bf 8f5b 	dmb	ish
			bt_auth->passkey_entry(smp->chan.chan.conn);
    b766:	4b11      	ldr	r3, [pc, #68]	; (b7ac <smp_public_key+0x11c>)
    b768:	681b      	ldr	r3, [r3, #0]
    b76a:	685b      	ldr	r3, [r3, #4]
    b76c:	6820      	ldr	r0, [r4, #0]
    b76e:	4798      	blx	r3
			break;
    b770:	e7cd      	b.n	b70e <smp_public_key+0x7e>
	if (!sc_local_pkey_valid) {
    b772:	4b0f      	ldr	r3, [pc, #60]	; (b7b0 <smp_public_key+0x120>)
    b774:	781b      	ldrb	r3, [r3, #0]
    b776:	b12b      	cbz	r3, b784 <smp_public_key+0xf4>
	err = smp_public_key_slave(smp);
    b778:	4620      	mov	r0, r4
    b77a:	f7ff fecf 	bl	b51c <smp_public_key_slave>
    b77e:	4603      	mov	r3, r0
}
    b780:	4618      	mov	r0, r3
    b782:	bd70      	pop	{r4, r5, r6, pc}
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
    b784:	34a0      	adds	r4, #160	; 0xa0
    b786:	f3bf 8f5b 	dmb	ish
    b78a:	e854 3f00 	ldrex	r3, [r4]
    b78e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b792:	e844 3200 	strex	r2, r3, [r4]
    b796:	2a00      	cmp	r2, #0
    b798:	d1f7      	bne.n	b78a <smp_public_key+0xfa>
    b79a:	f3bf 8f5b 	dmb	ish
		return 0;
    b79e:	2300      	movs	r3, #0
    b7a0:	e7ee      	b.n	b780 <smp_public_key+0xf0>
			return BT_SMP_ERR_UNSPECIFIED;
    b7a2:	2308      	movs	r3, #8
    b7a4:	e7ec      	b.n	b780 <smp_public_key+0xf0>
    b7a6:	bf00      	nop
    b7a8:	0002f614 	.word	0x0002f614
    b7ac:	20002940 	.word	0x20002940
    b7b0:	200008f4 	.word	0x200008f4

0000b7b4 <smp_signing_info>:
{
    b7b4:	b570      	push	{r4, r5, r6, lr}
    b7b6:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
    b7b8:	6805      	ldr	r5, [r0, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    b7ba:	f3bf 8f5b 	dmb	ish
    b7be:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    b7c2:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    b7c6:	f413 6f80 	tst.w	r3, #1024	; 0x400
    b7ca:	d111      	bne.n	b7f0 <smp_signing_info+0x3c>
	smp->remote_dist &= ~BT_SMP_DIST_SIGN;
    b7cc:	f894 317a 	ldrb.w	r3, [r4, #378]	; 0x17a
    b7d0:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    b7d4:	f884 317a 	strb.w	r3, [r4, #378]	; 0x17a
	    conn->role == BT_HCI_ROLE_MASTER && !smp->remote_dist) {
    b7d8:	78ea      	ldrb	r2, [r5, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    b7da:	b902      	cbnz	r2, b7de <smp_signing_info+0x2a>
	    conn->role == BT_HCI_ROLE_MASTER && !smp->remote_dist) {
    b7dc:	b1ab      	cbz	r3, b80a <smp_signing_info+0x56>
	if (!smp->local_dist && !smp->remote_dist) {
    b7de:	f8d4 3178 	ldr.w	r3, [r4, #376]	; 0x178
    b7e2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    b7e6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    b7ea:	b193      	cbz	r3, b812 <smp_signing_info+0x5e>
	return 0;
    b7ec:	2000      	movs	r0, #0
}
    b7ee:	bd70      	pop	{r4, r5, r6, pc}
		struct bt_smp_signing_info *req = (void *)buf->data;
    b7f0:	688e      	ldr	r6, [r1, #8]
		keys = bt_keys_get_type(BT_KEYS_REMOTE_CSRK, &conn->le.dst);
    b7f2:	f105 0148 	add.w	r1, r5, #72	; 0x48
    b7f6:	2010      	movs	r0, #16
    b7f8:	f000 ff8e 	bl	c718 <bt_keys_get_type>
		if (!keys) {
    b7fc:	b178      	cbz	r0, b81e <smp_signing_info+0x6a>
		memcpy(keys->remote_csrk.val, req->csrk,
    b7fe:	2210      	movs	r2, #16
    b800:	4631      	mov	r1, r6
    b802:	305c      	adds	r0, #92	; 0x5c
    b804:	f7f4 fd5c 	bl	2c0 <memcpy>
    b808:	e7e0      	b.n	b7cc <smp_signing_info+0x18>
		bt_smp_distribute_keys(smp);
    b80a:	4620      	mov	r0, r4
    b80c:	f7ff fac4 	bl	ad98 <bt_smp_distribute_keys>
    b810:	e7e5      	b.n	b7de <smp_signing_info+0x2a>
		smp_pairing_complete(smp, 0);
    b812:	2100      	movs	r1, #0
    b814:	4620      	mov	r0, r4
    b816:	f7ff f93e 	bl	aa96 <smp_pairing_complete>
	return 0;
    b81a:	2000      	movs	r0, #0
    b81c:	bd70      	pop	{r4, r5, r6, pc}
			return BT_SMP_ERR_UNSPECIFIED;
    b81e:	2008      	movs	r0, #8
    b820:	bd70      	pop	{r4, r5, r6, pc}

0000b822 <smp_ident_info>:
{
    b822:	b538      	push	{r3, r4, r5, lr}
    b824:	4604      	mov	r4, r0
    b826:	f3bf 8f5b 	dmb	ish
    b82a:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    b82e:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    b832:	f413 6f80 	tst.w	r3, #1024	; 0x400
    b836:	d00b      	beq.n	b850 <smp_ident_info+0x2e>
		struct bt_smp_ident_info *req = (void *)buf->data;
    b838:	688d      	ldr	r5, [r1, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
    b83a:	6801      	ldr	r1, [r0, #0]
		keys = bt_keys_get_type(BT_KEYS_IRK, &conn->le.dst);
    b83c:	3148      	adds	r1, #72	; 0x48
    b83e:	2002      	movs	r0, #2
    b840:	f000 ff6a 	bl	c718 <bt_keys_get_type>
		if (!keys) {
    b844:	b198      	cbz	r0, b86e <smp_ident_info+0x4c>
		memcpy(keys->irk.val, req->irk, 16);
    b846:	2210      	movs	r2, #16
    b848:	4629      	mov	r1, r5
    b84a:	3030      	adds	r0, #48	; 0x30
    b84c:	f7f4 fd38 	bl	2c0 <memcpy>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_ADDR_INFO);
    b850:	349c      	adds	r4, #156	; 0x9c
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b852:	f3bf 8f5b 	dmb	ish
    b856:	e854 3f00 	ldrex	r3, [r4]
    b85a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    b85e:	e844 3200 	strex	r2, r3, [r4]
    b862:	2a00      	cmp	r2, #0
    b864:	d1f7      	bne.n	b856 <smp_ident_info+0x34>
    b866:	f3bf 8f5b 	dmb	ish
	return 0;
    b86a:	2000      	movs	r0, #0
    b86c:	bd38      	pop	{r3, r4, r5, pc}
			return BT_SMP_ERR_UNSPECIFIED;
    b86e:	2008      	movs	r0, #8
}
    b870:	bd38      	pop	{r3, r4, r5, pc}

0000b872 <smp_master_ident>:
{
    b872:	b570      	push	{r4, r5, r6, lr}
    b874:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
    b876:	6805      	ldr	r5, [r0, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    b878:	f3bf 8f5b 	dmb	ish
    b87c:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    b880:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    b884:	f413 6f80 	tst.w	r3, #1024	; 0x400
    b888:	d116      	bne.n	b8b8 <smp_master_ident+0x46>
	if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
    b88a:	f894 317a 	ldrb.w	r3, [r4, #378]	; 0x17a
    b88e:	f013 0f02 	tst.w	r3, #2
    b892:	d127      	bne.n	b8e4 <smp_master_ident+0x72>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    b894:	f013 0f04 	tst.w	r3, #4
    b898:	d133      	bne.n	b902 <smp_master_ident+0x90>
	    conn->role == BT_HCI_ROLE_MASTER && !smp->remote_dist) {
    b89a:	78eb      	ldrb	r3, [r5, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    b89c:	b91b      	cbnz	r3, b8a6 <smp_master_ident+0x34>
	    conn->role == BT_HCI_ROLE_MASTER && !smp->remote_dist) {
    b89e:	f894 317a 	ldrb.w	r3, [r4, #378]	; 0x17a
    b8a2:	2b00      	cmp	r3, #0
    b8a4:	d03c      	beq.n	b920 <smp_master_ident+0xae>
	if (!smp->local_dist && !smp->remote_dist) {
    b8a6:	f8d4 3178 	ldr.w	r3, [r4, #376]	; 0x178
    b8aa:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    b8ae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    b8b2:	b3cb      	cbz	r3, b928 <smp_master_ident+0xb6>
	return 0;
    b8b4:	2000      	movs	r0, #0
}
    b8b6:	bd70      	pop	{r4, r5, r6, pc}
		struct bt_smp_master_ident *req = (void *)buf->data;
    b8b8:	688e      	ldr	r6, [r1, #8]
		keys = bt_keys_get_type(BT_KEYS_LTK, &conn->le.dst);
    b8ba:	f105 0148 	add.w	r1, r5, #72	; 0x48
    b8be:	2004      	movs	r0, #4
    b8c0:	f000 ff2a 	bl	c718 <bt_keys_get_type>
		if (!keys) {
    b8c4:	b3b0      	cbz	r0, b934 <smp_master_ident+0xc2>
		keys->ltk.ediv = req->ediv;
    b8c6:	8832      	ldrh	r2, [r6, #0]
    b8c8:	8302      	strh	r2, [r0, #24]
		keys->ltk.rand = req->rand;
    b8ca:	f8d6 1002 	ldr.w	r1, [r6, #2]
    b8ce:	f8d6 2006 	ldr.w	r2, [r6, #6]
    b8d2:	6101      	str	r1, [r0, #16]
    b8d4:	6142      	str	r2, [r0, #20]
		smp->remote_dist &= ~BT_SMP_DIST_ENC_KEY;
    b8d6:	f894 317a 	ldrb.w	r3, [r4, #378]	; 0x17a
    b8da:	f023 0301 	bic.w	r3, r3, #1
    b8de:	f884 317a 	strb.w	r3, [r4, #378]	; 0x17a
    b8e2:	e7d2      	b.n	b88a <smp_master_ident+0x18>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
    b8e4:	f104 039c 	add.w	r3, r4, #156	; 0x9c
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b8e8:	f3bf 8f5b 	dmb	ish
    b8ec:	e853 2f00 	ldrex	r2, [r3]
    b8f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    b8f4:	e843 2100 	strex	r1, r2, [r3]
    b8f8:	2900      	cmp	r1, #0
    b8fa:	d1f7      	bne.n	b8ec <smp_master_ident+0x7a>
    b8fc:	f3bf 8f5b 	dmb	ish
    b900:	e7cb      	b.n	b89a <smp_master_ident+0x28>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    b902:	f104 039c 	add.w	r3, r4, #156	; 0x9c
    b906:	f3bf 8f5b 	dmb	ish
    b90a:	e853 2f00 	ldrex	r2, [r3]
    b90e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    b912:	e843 2100 	strex	r1, r2, [r3]
    b916:	2900      	cmp	r1, #0
    b918:	d1f7      	bne.n	b90a <smp_master_ident+0x98>
    b91a:	f3bf 8f5b 	dmb	ish
    b91e:	e7bc      	b.n	b89a <smp_master_ident+0x28>
		bt_smp_distribute_keys(smp);
    b920:	4620      	mov	r0, r4
    b922:	f7ff fa39 	bl	ad98 <bt_smp_distribute_keys>
    b926:	e7be      	b.n	b8a6 <smp_master_ident+0x34>
		smp_pairing_complete(smp, 0);
    b928:	2100      	movs	r1, #0
    b92a:	4620      	mov	r0, r4
    b92c:	f7ff f8b3 	bl	aa96 <smp_pairing_complete>
	return 0;
    b930:	2000      	movs	r0, #0
    b932:	bd70      	pop	{r4, r5, r6, pc}
			return BT_SMP_ERR_UNSPECIFIED;
    b934:	2008      	movs	r0, #8
    b936:	bd70      	pop	{r4, r5, r6, pc}

0000b938 <smp_encrypt_info>:
{
    b938:	b538      	push	{r3, r4, r5, lr}
    b93a:	4604      	mov	r4, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    b93c:	f3bf 8f5b 	dmb	ish
    b940:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    b944:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    b948:	f413 6f80 	tst.w	r3, #1024	; 0x400
    b94c:	d00b      	beq.n	b966 <smp_encrypt_info+0x2e>
		struct bt_smp_encrypt_info *req = (void *)buf->data;
    b94e:	688d      	ldr	r5, [r1, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
    b950:	6801      	ldr	r1, [r0, #0]
		keys = bt_keys_get_type(BT_KEYS_LTK, &conn->le.dst);
    b952:	3148      	adds	r1, #72	; 0x48
    b954:	2004      	movs	r0, #4
    b956:	f000 fedf 	bl	c718 <bt_keys_get_type>
		if (!keys) {
    b95a:	b198      	cbz	r0, b984 <smp_encrypt_info+0x4c>
		memcpy(keys->ltk.val, req->ltk, 16);
    b95c:	2210      	movs	r2, #16
    b95e:	4629      	mov	r1, r5
    b960:	301a      	adds	r0, #26
    b962:	f7f4 fcad 	bl	2c0 <memcpy>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_MASTER_IDENT);
    b966:	349c      	adds	r4, #156	; 0x9c
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b968:	f3bf 8f5b 	dmb	ish
    b96c:	e854 3f00 	ldrex	r3, [r4]
    b970:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b974:	e844 3200 	strex	r2, r3, [r4]
    b978:	2a00      	cmp	r2, #0
    b97a:	d1f7      	bne.n	b96c <smp_encrypt_info+0x34>
    b97c:	f3bf 8f5b 	dmb	ish
	return 0;
    b980:	2000      	movs	r0, #0
    b982:	bd38      	pop	{r3, r4, r5, pc}
			return BT_SMP_ERR_UNSPECIFIED;
    b984:	2008      	movs	r0, #8
}
    b986:	bd38      	pop	{r3, r4, r5, pc}

0000b988 <smp_check_complete>:
	if (conn->type == BT_CONN_TYPE_LE) {
    b988:	7883      	ldrb	r3, [r0, #2]
    b98a:	b103      	cbz	r3, b98e <smp_check_complete+0x6>
    b98c:	4770      	bx	lr
{
    b98e:	b510      	push	{r4, lr}
    b990:	460c      	mov	r4, r1
		chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_SMP);
    b992:	2106      	movs	r1, #6
    b994:	f7fb ffa1 	bl	78da <bt_l2cap_le_lookup_tx_cid>
		smp->local_dist &= ~dist_complete;
    b998:	f890 1179 	ldrb.w	r1, [r0, #377]	; 0x179
    b99c:	ea21 0104 	bic.w	r1, r1, r4
    b9a0:	f880 1179 	strb.w	r1, [r0, #377]	; 0x179
		if (!smp->local_dist && !smp->remote_dist) {
    b9a4:	f8d0 3178 	ldr.w	r3, [r0, #376]	; 0x178
    b9a8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    b9ac:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    b9b0:	b103      	cbz	r3, b9b4 <smp_check_complete+0x2c>
    b9b2:	bd10      	pop	{r4, pc}
			smp_pairing_complete(smp, 0);
    b9b4:	2100      	movs	r1, #0
    b9b6:	f7ff f86e 	bl	aa96 <smp_pairing_complete>
    b9ba:	e7fa      	b.n	b9b2 <smp_check_complete+0x2a>

0000b9bc <sign_info_sent>:
{
    b9bc:	b508      	push	{r3, lr}
	smp_check_complete(conn, BT_SMP_DIST_SIGN);
    b9be:	2104      	movs	r1, #4
    b9c0:	f7ff ffe2 	bl	b988 <smp_check_complete>
    b9c4:	bd08      	pop	{r3, pc}

0000b9c6 <ident_sent>:
{
    b9c6:	b508      	push	{r3, lr}
	smp_check_complete(conn, BT_SMP_DIST_ENC_KEY);
    b9c8:	2101      	movs	r1, #1
    b9ca:	f7ff ffdd 	bl	b988 <smp_check_complete>
    b9ce:	bd08      	pop	{r3, pc}

0000b9d0 <smp_ident_addr_info>:
{
    b9d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
    b9d4:	6806      	ldr	r6, [r0, #0]
	struct bt_smp_ident_addr_info *req = (void *)buf->data;
    b9d6:	688d      	ldr	r5, [r1, #8]
	return BT_ADDR_IS_RPA(&addr->a);
}

static inline bool bt_addr_le_is_identity(const bt_addr_le_t *addr)
{
	if (addr->type == BT_ADDR_LE_PUBLIC) {
    b9d8:	782b      	ldrb	r3, [r5, #0]
    b9da:	b153      	cbz	r3, b9f2 <smp_ident_addr_info+0x22>
		return true;
	}

	return BT_ADDR_IS_STATIC(&addr->a);
    b9dc:	79ab      	ldrb	r3, [r5, #6]
    b9de:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    b9e2:	2bc0      	cmp	r3, #192	; 0xc0
    b9e4:	bf14      	ite	ne
    b9e6:	2300      	movne	r3, #0
    b9e8:	2301      	moveq	r3, #1
	if (!bt_addr_le_is_identity(&req->addr)) {
    b9ea:	b923      	cbnz	r3, b9f6 <smp_ident_addr_info+0x26>
		return BT_SMP_ERR_INVALID_PARAMS;
    b9ec:	200a      	movs	r0, #10
    b9ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return true;
    b9f2:	2301      	movs	r3, #1
    b9f4:	e7f9      	b.n	b9ea <smp_ident_addr_info+0x1a>
    b9f6:	4604      	mov	r4, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    b9f8:	f3bf 8f5b 	dmb	ish
    b9fc:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    ba00:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    ba04:	f413 6f80 	tst.w	r3, #1024	; 0x400
    ba08:	d119      	bne.n	ba3e <smp_ident_addr_info+0x6e>
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
    ba0a:	f894 317a 	ldrb.w	r3, [r4, #378]	; 0x17a
    ba0e:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    ba12:	f884 317a 	strb.w	r3, [r4, #378]	; 0x17a
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    ba16:	f013 0f04 	tst.w	r3, #4
    ba1a:	d14f      	bne.n	babc <smp_ident_addr_info+0xec>
	    conn->role == BT_HCI_ROLE_MASTER && !smp->remote_dist) {
    ba1c:	78f3      	ldrb	r3, [r6, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    ba1e:	b91b      	cbnz	r3, ba28 <smp_ident_addr_info+0x58>
	    conn->role == BT_HCI_ROLE_MASTER && !smp->remote_dist) {
    ba20:	f894 317a 	ldrb.w	r3, [r4, #378]	; 0x17a
    ba24:	2b00      	cmp	r3, #0
    ba26:	d058      	beq.n	bada <smp_ident_addr_info+0x10a>
	if (!smp->local_dist && !smp->remote_dist) {
    ba28:	f8d4 3178 	ldr.w	r3, [r4, #376]	; 0x178
    ba2c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    ba30:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    ba34:	2b00      	cmp	r3, #0
    ba36:	d054      	beq.n	bae2 <smp_ident_addr_info+0x112>
	return 0;
    ba38:	2000      	movs	r0, #0
}
    ba3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		keys = bt_keys_get_type(BT_KEYS_IRK, &conn->le.dst);
    ba3e:	f106 0848 	add.w	r8, r6, #72	; 0x48
    ba42:	4641      	mov	r1, r8
    ba44:	2002      	movs	r0, #2
    ba46:	f000 fe67 	bl	c718 <bt_keys_get_type>
		if (!keys) {
    ba4a:	4681      	mov	r9, r0
    ba4c:	2800      	cmp	r0, #0
    ba4e:	d04f      	beq.n	baf0 <smp_ident_addr_info+0x120>
		if (conn->role == BT_HCI_ROLE_MASTER) {
    ba50:	78f3      	ldrb	r3, [r6, #3]
    ba52:	bb43      	cbnz	r3, baa6 <smp_ident_addr_info+0xd6>
			dst = &conn->le.resp_addr;
    ba54:	f106 0156 	add.w	r1, r6, #86	; 0x56
	if (addr->type != BT_ADDR_LE_RANDOM) {
    ba58:	780b      	ldrb	r3, [r1, #0]
    ba5a:	2b01      	cmp	r3, #1
    ba5c:	d026      	beq.n	baac <smp_ident_addr_info+0xdc>
		return false;
    ba5e:	2700      	movs	r7, #0
		if (bt_addr_le_is_rpa(dst)) {
    ba60:	2f00      	cmp	r7, #0
    ba62:	d0d2      	beq.n	ba0a <smp_ident_addr_info+0x3a>
	memcpy(dst, src, sizeof(*dst));
    ba64:	2206      	movs	r2, #6
    ba66:	3101      	adds	r1, #1
    ba68:	f109 0040 	add.w	r0, r9, #64	; 0x40
    ba6c:	f7f4 fc28 	bl	2c0 <memcpy>
	if (addr->type == BT_ADDR_LE_PUBLIC) {
    ba70:	f896 3048 	ldrb.w	r3, [r6, #72]	; 0x48
    ba74:	b13b      	cbz	r3, ba86 <smp_ident_addr_info+0xb6>
	return BT_ADDR_IS_STATIC(&addr->a);
    ba76:	f896 704e 	ldrb.w	r7, [r6, #78]	; 0x4e
    ba7a:	f007 07c0 	and.w	r7, r7, #192	; 0xc0
    ba7e:	2fc0      	cmp	r7, #192	; 0xc0
    ba80:	bf14      	ite	ne
    ba82:	2700      	movne	r7, #0
    ba84:	2701      	moveq	r7, #1
			if (!bt_addr_le_is_identity(&conn->le.dst)) {
    ba86:	2f00      	cmp	r7, #0
    ba88:	d1bf      	bne.n	ba0a <smp_ident_addr_info+0x3a>
	memcpy(dst, src, sizeof(*dst));
    ba8a:	2207      	movs	r2, #7
    ba8c:	4629      	mov	r1, r5
    ba8e:	4648      	mov	r0, r9
    ba90:	f7f4 fc16 	bl	2c0 <memcpy>
    ba94:	2207      	movs	r2, #7
    ba96:	4629      	mov	r1, r5
    ba98:	4640      	mov	r0, r8
    ba9a:	f7f4 fc11 	bl	2c0 <memcpy>
				bt_conn_identity_resolved(conn);
    ba9e:	4630      	mov	r0, r6
    baa0:	f7fa fba4 	bl	61ec <bt_conn_identity_resolved>
    baa4:	e7b1      	b.n	ba0a <smp_ident_addr_info+0x3a>
			dst = &conn->le.init_addr;
    baa6:	f106 014f 	add.w	r1, r6, #79	; 0x4f
    baaa:	e7d5      	b.n	ba58 <smp_ident_addr_info+0x88>
	return BT_ADDR_IS_RPA(&addr->a);
    baac:	798f      	ldrb	r7, [r1, #6]
    baae:	f007 07c0 	and.w	r7, r7, #192	; 0xc0
    bab2:	2f40      	cmp	r7, #64	; 0x40
    bab4:	bf14      	ite	ne
    bab6:	2700      	movne	r7, #0
    bab8:	2701      	moveq	r7, #1
    baba:	e7d1      	b.n	ba60 <smp_ident_addr_info+0x90>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    babc:	f104 039c 	add.w	r3, r4, #156	; 0x9c
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    bac0:	f3bf 8f5b 	dmb	ish
    bac4:	e853 2f00 	ldrex	r2, [r3]
    bac8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    bacc:	e843 2100 	strex	r1, r2, [r3]
    bad0:	2900      	cmp	r1, #0
    bad2:	d1f7      	bne.n	bac4 <smp_ident_addr_info+0xf4>
    bad4:	f3bf 8f5b 	dmb	ish
    bad8:	e7a0      	b.n	ba1c <smp_ident_addr_info+0x4c>
		bt_smp_distribute_keys(smp);
    bada:	4620      	mov	r0, r4
    badc:	f7ff f95c 	bl	ad98 <bt_smp_distribute_keys>
    bae0:	e7a2      	b.n	ba28 <smp_ident_addr_info+0x58>
		smp_pairing_complete(smp, 0);
    bae2:	2100      	movs	r1, #0
    bae4:	4620      	mov	r0, r4
    bae6:	f7fe ffd6 	bl	aa96 <smp_pairing_complete>
	return 0;
    baea:	2000      	movs	r0, #0
    baec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return BT_SMP_ERR_UNSPECIFIED;
    baf0:	2008      	movs	r0, #8
    baf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

0000baf8 <legacy_request_tk>:
{
    baf8:	b570      	push	{r4, r5, r6, lr}
    bafa:	b082      	sub	sp, #8
    bafc:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
    bafe:	6805      	ldr	r5, [r0, #0]
	keys = bt_keys_find_addr(&conn->le.dst);
    bb00:	f105 0048 	add.w	r0, r5, #72	; 0x48
    bb04:	f000 fdea 	bl	c6dc <bt_keys_find_addr>
	if (keys && atomic_test_bit(keys->flags, BT_KEYS_AUTHENTICATED) &&
    bb08:	b168      	cbz	r0, bb26 <legacy_request_tk+0x2e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    bb0a:	f3bf 8f5b 	dmb	ish
    bb0e:	6883      	ldr	r3, [r0, #8]
    bb10:	f3bf 8f5b 	dmb	ish
    bb14:	f013 0f01 	tst.w	r3, #1
    bb18:	d005      	beq.n	bb26 <legacy_request_tk+0x2e>
	    smp->method == JUST_WORKS) {
    bb1a:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
	if (keys && atomic_test_bit(keys->flags, BT_KEYS_AUTHENTICATED) &&
    bb1e:	b913      	cbnz	r3, bb26 <legacy_request_tk+0x2e>
		return BT_SMP_ERR_UNSPECIFIED;
    bb20:	2008      	movs	r0, #8
}
    bb22:	b002      	add	sp, #8
    bb24:	bd70      	pop	{r4, r5, r6, pc}
	switch (smp->method) {
    bb26:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    bb2a:	2b01      	cmp	r3, #1
    bb2c:	d025      	beq.n	bb7a <legacy_request_tk+0x82>
    bb2e:	2b00      	cmp	r3, #0
    bb30:	d037      	beq.n	bba2 <legacy_request_tk+0xaa>
    bb32:	2b02      	cmp	r3, #2
    bb34:	d001      	beq.n	bb3a <legacy_request_tk+0x42>
		return BT_SMP_ERR_UNSPECIFIED;
    bb36:	2008      	movs	r0, #8
    bb38:	e7f3      	b.n	bb22 <legacy_request_tk+0x2a>
		if (bt_rand(&passkey, sizeof(passkey))) {
    bb3a:	2104      	movs	r1, #4
    bb3c:	eb0d 0001 	add.w	r0, sp, r1
    bb40:	f004 ffb6 	bl	10ab0 <bt_rand>
    bb44:	b108      	cbz	r0, bb4a <legacy_request_tk+0x52>
			return BT_SMP_ERR_UNSPECIFIED;
    bb46:	2008      	movs	r0, #8
    bb48:	e7eb      	b.n	bb22 <legacy_request_tk+0x2a>
		passkey %= 1000000;
    bb4a:	9b01      	ldr	r3, [sp, #4]
    bb4c:	4916      	ldr	r1, [pc, #88]	; (bba8 <legacy_request_tk+0xb0>)
    bb4e:	fba1 2103 	umull	r2, r1, r1, r3
    bb52:	0c89      	lsrs	r1, r1, #18
    bb54:	4a15      	ldr	r2, [pc, #84]	; (bbac <legacy_request_tk+0xb4>)
    bb56:	fb02 3111 	mls	r1, r2, r1, r3
    bb5a:	ae02      	add	r6, sp, #8
    bb5c:	f846 1d04 	str.w	r1, [r6, #-4]!
		bt_auth->passkey_display(conn, passkey);
    bb60:	4b13      	ldr	r3, [pc, #76]	; (bbb0 <legacy_request_tk+0xb8>)
    bb62:	681b      	ldr	r3, [r3, #0]
    bb64:	681b      	ldr	r3, [r3, #0]
    bb66:	4628      	mov	r0, r5
    bb68:	4798      	blx	r3
		memcpy(smp->tk, &passkey, sizeof(passkey));
    bb6a:	2204      	movs	r2, #4
    bb6c:	4631      	mov	r1, r6
    bb6e:	f104 00e3 	add.w	r0, r4, #227	; 0xe3
    bb72:	f7f4 fba5 	bl	2c0 <memcpy>
	return 0;
    bb76:	2000      	movs	r0, #0
		break;
    bb78:	e7d3      	b.n	bb22 <legacy_request_tk+0x2a>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    bb7a:	34a0      	adds	r4, #160	; 0xa0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    bb7c:	f3bf 8f5b 	dmb	ish
    bb80:	e854 3f00 	ldrex	r3, [r4]
    bb84:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    bb88:	e844 3200 	strex	r2, r3, [r4]
    bb8c:	2a00      	cmp	r2, #0
    bb8e:	d1f7      	bne.n	bb80 <legacy_request_tk+0x88>
    bb90:	f3bf 8f5b 	dmb	ish
		bt_auth->passkey_entry(conn);
    bb94:	4b06      	ldr	r3, [pc, #24]	; (bbb0 <legacy_request_tk+0xb8>)
    bb96:	681b      	ldr	r3, [r3, #0]
    bb98:	685b      	ldr	r3, [r3, #4]
    bb9a:	4628      	mov	r0, r5
    bb9c:	4798      	blx	r3
	return 0;
    bb9e:	2000      	movs	r0, #0
		break;
    bba0:	e7bf      	b.n	bb22 <legacy_request_tk+0x2a>
	return 0;
    bba2:	2000      	movs	r0, #0
    bba4:	e7bd      	b.n	bb22 <legacy_request_tk+0x2a>
    bba6:	bf00      	nop
    bba8:	431bde83 	.word	0x431bde83
    bbac:	000f4240 	.word	0x000f4240
    bbb0:	20002940 	.word	0x20002940

0000bbb4 <legacy_pairing_rsp>:
{
    bbb4:	b538      	push	{r3, r4, r5, lr}
    bbb6:	4605      	mov	r5, r0
	smp->method = legacy_get_pair_method(smp, remote_io);
    bbb8:	f7fe f90a 	bl	9dd0 <legacy_get_pair_method>
    bbbc:	f885 00a4 	strb.w	r0, [r5, #164]	; 0xa4
	if (smp->method == JUST_WORKS &&
    bbc0:	bb10      	cbnz	r0, bc08 <legacy_pairing_rsp+0x54>
    bbc2:	4604      	mov	r4, r0
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    bbc4:	f105 02a0 	add.w	r2, r5, #160	; 0xa0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    bbc8:	f3bf 8f5b 	dmb	ish
    bbcc:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
    bbd0:	f3bf 8f5b 	dmb	ish
	if (smp->method == JUST_WORKS &&
    bbd4:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    bbd8:	d016      	beq.n	bc08 <legacy_pairing_rsp+0x54>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    bbda:	4b24      	ldr	r3, [pc, #144]	; (bc6c <legacy_pairing_rsp+0xb8>)
    bbdc:	681b      	ldr	r3, [r3, #0]
    bbde:	b19b      	cbz	r3, bc08 <legacy_pairing_rsp+0x54>
	    bt_auth && bt_auth->pairing_confirm) {
    bbe0:	691b      	ldr	r3, [r3, #16]
    bbe2:	b18b      	cbz	r3, bc08 <legacy_pairing_rsp+0x54>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    bbe4:	f3bf 8f5b 	dmb	ish
    bbe8:	e852 3f00 	ldrex	r3, [r2]
    bbec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    bbf0:	e842 3100 	strex	r1, r3, [r2]
    bbf4:	2900      	cmp	r1, #0
    bbf6:	d1f7      	bne.n	bbe8 <legacy_pairing_rsp+0x34>
    bbf8:	f3bf 8f5b 	dmb	ish
		bt_auth->pairing_confirm(smp->chan.chan.conn);
    bbfc:	4b1b      	ldr	r3, [pc, #108]	; (bc6c <legacy_pairing_rsp+0xb8>)
    bbfe:	681b      	ldr	r3, [r3, #0]
    bc00:	691b      	ldr	r3, [r3, #16]
    bc02:	6828      	ldr	r0, [r5, #0]
    bc04:	4798      	blx	r3
		return 0;
    bc06:	e004      	b.n	bc12 <legacy_pairing_rsp+0x5e>
	ret = legacy_request_tk(smp);
    bc08:	4628      	mov	r0, r5
    bc0a:	f7ff ff75 	bl	baf8 <legacy_request_tk>
	if (ret) {
    bc0e:	4604      	mov	r4, r0
    bc10:	b108      	cbz	r0, bc16 <legacy_pairing_rsp+0x62>
}
    bc12:	4620      	mov	r0, r4
    bc14:	bd38      	pop	{r3, r4, r5, pc}
	if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    bc16:	f105 03a0 	add.w	r3, r5, #160	; 0xa0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    bc1a:	f3bf 8f5b 	dmb	ish
    bc1e:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
    bc22:	f3bf 8f5b 	dmb	ish
    bc26:	f412 7f00 	tst.w	r2, #512	; 0x200
    bc2a:	d00c      	beq.n	bc46 <legacy_pairing_rsp+0x92>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    bc2c:	f3bf 8f5b 	dmb	ish
    bc30:	e853 2f00 	ldrex	r2, [r3]
    bc34:	f042 0201 	orr.w	r2, r2, #1
    bc38:	e843 2100 	strex	r1, r2, [r3]
    bc3c:	2900      	cmp	r1, #0
    bc3e:	d1f7      	bne.n	bc30 <legacy_pairing_rsp+0x7c>
    bc40:	f3bf 8f5b 	dmb	ish
	return 0;
    bc44:	e7e5      	b.n	bc12 <legacy_pairing_rsp+0x5e>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    bc46:	f105 039c 	add.w	r3, r5, #156	; 0x9c
    bc4a:	f3bf 8f5b 	dmb	ish
    bc4e:	e853 2f00 	ldrex	r2, [r3]
    bc52:	f042 0208 	orr.w	r2, r2, #8
    bc56:	e843 2100 	strex	r1, r2, [r3]
    bc5a:	2900      	cmp	r1, #0
    bc5c:	d1f7      	bne.n	bc4e <legacy_pairing_rsp+0x9a>
    bc5e:	f3bf 8f5b 	dmb	ish
		return legacy_send_pairing_confirm(smp);
    bc62:	4628      	mov	r0, r5
    bc64:	f7fe fdd8 	bl	a818 <legacy_send_pairing_confirm>
    bc68:	4604      	mov	r4, r0
    bc6a:	e7d2      	b.n	bc12 <legacy_pairing_rsp+0x5e>
    bc6c:	20002940 	.word	0x20002940

0000bc70 <smp_pairing_rsp>:
{
    bc70:	b570      	push	{r4, r5, r6, lr}
	struct bt_smp_pairing *rsp = (void *)buf->data;
    bc72:	688d      	ldr	r5, [r1, #8]
	if ((rsp->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
    bc74:	78eb      	ldrb	r3, [r5, #3]
    bc76:	3b07      	subs	r3, #7
    bc78:	b2db      	uxtb	r3, r3
    bc7a:	2b09      	cmp	r3, #9
    bc7c:	d902      	bls.n	bc84 <smp_pairing_rsp+0x14>
		return BT_SMP_ERR_ENC_KEY_SIZE;
    bc7e:	2506      	movs	r5, #6
}
    bc80:	4628      	mov	r0, r5
    bc82:	bd70      	pop	{r4, r5, r6, pc}
    bc84:	4604      	mov	r4, r0
	smp->local_dist &= rsp->init_key_dist;
    bc86:	792b      	ldrb	r3, [r5, #4]
    bc88:	f890 2179 	ldrb.w	r2, [r0, #377]	; 0x179
    bc8c:	4013      	ands	r3, r2
    bc8e:	f880 3179 	strb.w	r3, [r0, #377]	; 0x179
	smp->remote_dist &= rsp->resp_key_dist;
    bc92:	796b      	ldrb	r3, [r5, #5]
    bc94:	f890 217a 	ldrb.w	r2, [r0, #378]	; 0x17a
    bc98:	4013      	ands	r3, r2
    bc9a:	f880 317a 	strb.w	r3, [r0, #378]	; 0x17a
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
    bc9e:	2302      	movs	r3, #2
    bca0:	f880 30ac 	strb.w	r3, [r0, #172]	; 0xac
	memcpy(smp->prsp + 1, rsp, sizeof(*rsp));
    bca4:	2206      	movs	r2, #6
    bca6:	4629      	mov	r1, r5
    bca8:	30ad      	adds	r0, #173	; 0xad
    bcaa:	f7f4 fb09 	bl	2c0 <memcpy>
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
    bcae:	78ab      	ldrb	r3, [r5, #2]
    bcb0:	f013 0f08 	tst.w	r3, #8
    bcb4:	d004      	beq.n	bcc0 <smp_pairing_rsp+0x50>
	    (req->auth_req & BT_SMP_AUTH_SC)) {
    bcb6:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
    bcba:	f013 0f08 	tst.w	r3, #8
    bcbe:	d148      	bne.n	bd52 <smp_pairing_rsp+0xe2>
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
    bcc0:	78ab      	ldrb	r3, [r5, #2]
    bcc2:	f013 0f20 	tst.w	r3, #32
    bcc6:	d004      	beq.n	bcd2 <smp_pairing_rsp+0x62>
	    (req->auth_req & BT_SMP_AUTH_CT2)) {
    bcc8:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
    bccc:	f013 0f20 	tst.w	r3, #32
    bcd0:	d14e      	bne.n	bd70 <smp_pairing_rsp+0x100>
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
    bcd2:	78ab      	ldrb	r3, [r5, #2]
    bcd4:	f013 0f01 	tst.w	r3, #1
    bcd8:	d004      	beq.n	bce4 <smp_pairing_rsp+0x74>
	    (req->auth_req & BT_SMP_AUTH_BONDING)) {
    bcda:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
    bcde:	f013 0f01 	tst.w	r3, #1
    bce2:	d154      	bne.n	bd8e <smp_pairing_rsp+0x11e>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    bce4:	f104 06a0 	add.w	r6, r4, #160	; 0xa0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    bce8:	f3bf 8f5b 	dmb	ish
    bcec:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    bcf0:	f3bf 8f5b 	dmb	ish
    bcf4:	f013 0f20 	tst.w	r3, #32
    bcf8:	d058      	beq.n	bdac <smp_pairing_rsp+0x13c>
	smp->method = get_pair_method(smp, rsp->io_capability);
    bcfa:	7829      	ldrb	r1, [r5, #0]
    bcfc:	4620      	mov	r0, r4
    bcfe:	f7fe f835 	bl	9d6c <get_pair_method>
    bd02:	4605      	mov	r5, r0
    bd04:	f884 00a4 	strb.w	r0, [r4, #164]	; 0xa4
	smp->local_dist &= SEND_KEYS_SC;
    bd08:	f894 3179 	ldrb.w	r3, [r4, #377]	; 0x179
    bd0c:	f003 0304 	and.w	r3, r3, #4
    bd10:	f884 3179 	strb.w	r3, [r4, #377]	; 0x179
	smp->remote_dist &= RECV_KEYS_SC;
    bd14:	f894 317a 	ldrb.w	r3, [r4, #378]	; 0x17a
    bd18:	f003 0306 	and.w	r3, r3, #6
    bd1c:	f884 317a 	strb.w	r3, [r4, #378]	; 0x17a
	if (smp->method == JUST_WORKS) {
    bd20:	2800      	cmp	r0, #0
    bd22:	d049      	beq.n	bdb8 <smp_pairing_rsp+0x148>
	if (!sc_local_pkey_valid) {
    bd24:	4b3c      	ldr	r3, [pc, #240]	; (be18 <smp_pairing_rsp+0x1a8>)
    bd26:	781b      	ldrb	r3, [r3, #0]
    bd28:	2b00      	cmp	r3, #0
    bd2a:	d067      	beq.n	bdfc <smp_pairing_rsp+0x18c>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
    bd2c:	f104 039c 	add.w	r3, r4, #156	; 0x9c
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    bd30:	f3bf 8f5b 	dmb	ish
    bd34:	e853 2f00 	ldrex	r2, [r3]
    bd38:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    bd3c:	e843 2100 	strex	r1, r2, [r3]
    bd40:	2900      	cmp	r1, #0
    bd42:	d1f7      	bne.n	bd34 <smp_pairing_rsp+0xc4>
    bd44:	f3bf 8f5b 	dmb	ish
	return sc_send_public_key(smp);
    bd48:	4620      	mov	r0, r4
    bd4a:	f7fe f94b 	bl	9fe4 <sc_send_public_key>
    bd4e:	4605      	mov	r5, r0
    bd50:	e796      	b.n	bc80 <smp_pairing_rsp+0x10>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
    bd52:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
    bd56:	f3bf 8f5b 	dmb	ish
    bd5a:	e853 2f00 	ldrex	r2, [r3]
    bd5e:	f042 0220 	orr.w	r2, r2, #32
    bd62:	e843 2100 	strex	r1, r2, [r3]
    bd66:	2900      	cmp	r1, #0
    bd68:	d1f7      	bne.n	bd5a <smp_pairing_rsp+0xea>
    bd6a:	f3bf 8f5b 	dmb	ish
    bd6e:	e7a7      	b.n	bcc0 <smp_pairing_rsp+0x50>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
    bd70:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
    bd74:	f3bf 8f5b 	dmb	ish
    bd78:	e853 2f00 	ldrex	r2, [r3]
    bd7c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    bd80:	e843 2100 	strex	r1, r2, [r3]
    bd84:	2900      	cmp	r1, #0
    bd86:	d1f7      	bne.n	bd78 <smp_pairing_rsp+0x108>
    bd88:	f3bf 8f5b 	dmb	ish
    bd8c:	e7a1      	b.n	bcd2 <smp_pairing_rsp+0x62>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
    bd8e:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
    bd92:	f3bf 8f5b 	dmb	ish
    bd96:	e853 2f00 	ldrex	r2, [r3]
    bd9a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    bd9e:	e843 2100 	strex	r1, r2, [r3]
    bda2:	2900      	cmp	r1, #0
    bda4:	d1f7      	bne.n	bd96 <smp_pairing_rsp+0x126>
    bda6:	f3bf 8f5b 	dmb	ish
    bdaa:	e79b      	b.n	bce4 <smp_pairing_rsp+0x74>
		return legacy_pairing_rsp(smp, rsp->io_capability);
    bdac:	7829      	ldrb	r1, [r5, #0]
    bdae:	4620      	mov	r0, r4
    bdb0:	f7ff ff00 	bl	bbb4 <legacy_pairing_rsp>
    bdb4:	4605      	mov	r5, r0
    bdb6:	e763      	b.n	bc80 <smp_pairing_rsp+0x10>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    bdb8:	f3bf 8f5b 	dmb	ish
    bdbc:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    bdc0:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    bdc4:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    bdc8:	d0ac      	beq.n	bd24 <smp_pairing_rsp+0xb4>
    bdca:	4b14      	ldr	r3, [pc, #80]	; (be1c <smp_pairing_rsp+0x1ac>)
    bdcc:	681b      	ldr	r3, [r3, #0]
    bdce:	2b00      	cmp	r3, #0
    bdd0:	d0a8      	beq.n	bd24 <smp_pairing_rsp+0xb4>
		    bt_auth && bt_auth->pairing_confirm) {
    bdd2:	691b      	ldr	r3, [r3, #16]
    bdd4:	2b00      	cmp	r3, #0
    bdd6:	d0a5      	beq.n	bd24 <smp_pairing_rsp+0xb4>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    bdd8:	f3bf 8f5b 	dmb	ish
    bddc:	e856 3f00 	ldrex	r3, [r6]
    bde0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    bde4:	e846 3200 	strex	r2, r3, [r6]
    bde8:	2a00      	cmp	r2, #0
    bdea:	d1f7      	bne.n	bddc <smp_pairing_rsp+0x16c>
    bdec:	f3bf 8f5b 	dmb	ish
			bt_auth->pairing_confirm(smp->chan.chan.conn);
    bdf0:	4b0a      	ldr	r3, [pc, #40]	; (be1c <smp_pairing_rsp+0x1ac>)
    bdf2:	681b      	ldr	r3, [r3, #0]
    bdf4:	691b      	ldr	r3, [r3, #16]
    bdf6:	6820      	ldr	r0, [r4, #0]
    bdf8:	4798      	blx	r3
			return 0;
    bdfa:	e741      	b.n	bc80 <smp_pairing_rsp+0x10>
    bdfc:	f3bf 8f5b 	dmb	ish
    be00:	e856 3f00 	ldrex	r3, [r6]
    be04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    be08:	e846 3200 	strex	r2, r3, [r6]
    be0c:	2a00      	cmp	r2, #0
    be0e:	d1f7      	bne.n	be00 <smp_pairing_rsp+0x190>
    be10:	f3bf 8f5b 	dmb	ish
		return 0;
    be14:	2500      	movs	r5, #0
    be16:	e733      	b.n	bc80 <smp_pairing_rsp+0x10>
    be18:	200008f4 	.word	0x200008f4
    be1c:	20002940 	.word	0x20002940

0000be20 <legacy_pairing_req>:
{
    be20:	b538      	push	{r3, r4, r5, lr}
    be22:	4605      	mov	r5, r0
	smp->method = legacy_get_pair_method(smp, remote_io);
    be24:	f7fd ffd4 	bl	9dd0 <legacy_get_pair_method>
    be28:	f885 00a4 	strb.w	r0, [r5, #164]	; 0xa4
	if (smp->method == JUST_WORKS &&
    be2c:	bb10      	cbnz	r0, be74 <legacy_pairing_req+0x54>
    be2e:	4604      	mov	r4, r0
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    be30:	f105 02a0 	add.w	r2, r5, #160	; 0xa0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    be34:	f3bf 8f5b 	dmb	ish
    be38:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
    be3c:	f3bf 8f5b 	dmb	ish
	if (smp->method == JUST_WORKS &&
    be40:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    be44:	d116      	bne.n	be74 <legacy_pairing_req+0x54>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    be46:	4b18      	ldr	r3, [pc, #96]	; (bea8 <legacy_pairing_req+0x88>)
    be48:	681b      	ldr	r3, [r3, #0]
    be4a:	b19b      	cbz	r3, be74 <legacy_pairing_req+0x54>
	    bt_auth && bt_auth->pairing_confirm) {
    be4c:	691b      	ldr	r3, [r3, #16]
    be4e:	b18b      	cbz	r3, be74 <legacy_pairing_req+0x54>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    be50:	f3bf 8f5b 	dmb	ish
    be54:	e852 3f00 	ldrex	r3, [r2]
    be58:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    be5c:	e842 3100 	strex	r1, r3, [r2]
    be60:	2900      	cmp	r1, #0
    be62:	d1f7      	bne.n	be54 <legacy_pairing_req+0x34>
    be64:	f3bf 8f5b 	dmb	ish
		bt_auth->pairing_confirm(smp->chan.chan.conn);
    be68:	4b0f      	ldr	r3, [pc, #60]	; (bea8 <legacy_pairing_req+0x88>)
    be6a:	681b      	ldr	r3, [r3, #0]
    be6c:	691b      	ldr	r3, [r3, #16]
    be6e:	6828      	ldr	r0, [r5, #0]
    be70:	4798      	blx	r3
		return 0;
    be72:	e004      	b.n	be7e <legacy_pairing_req+0x5e>
	ret = send_pairing_rsp(smp);
    be74:	4628      	mov	r0, r5
    be76:	f7fe f8d9 	bl	a02c <send_pairing_rsp>
	if (ret) {
    be7a:	4604      	mov	r4, r0
    be7c:	b108      	cbz	r0, be82 <legacy_pairing_req+0x62>
}
    be7e:	4620      	mov	r0, r4
    be80:	bd38      	pop	{r3, r4, r5, pc}
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    be82:	f105 039c 	add.w	r3, r5, #156	; 0x9c
    be86:	f3bf 8f5b 	dmb	ish
    be8a:	e853 2f00 	ldrex	r2, [r3]
    be8e:	f042 0208 	orr.w	r2, r2, #8
    be92:	e843 2100 	strex	r1, r2, [r3]
    be96:	2900      	cmp	r1, #0
    be98:	d1f7      	bne.n	be8a <legacy_pairing_req+0x6a>
    be9a:	f3bf 8f5b 	dmb	ish
	return legacy_request_tk(smp);
    be9e:	4628      	mov	r0, r5
    bea0:	f7ff fe2a 	bl	baf8 <legacy_request_tk>
    bea4:	4604      	mov	r4, r0
    bea6:	e7ea      	b.n	be7e <legacy_pairing_req+0x5e>
    bea8:	20002940 	.word	0x20002940

0000beac <smp_pairing_req>:
{
    beac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_smp_pairing *req = (void *)buf->data;
    beae:	688e      	ldr	r6, [r1, #8]
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
    beb0:	78f3      	ldrb	r3, [r6, #3]
    beb2:	3b07      	subs	r3, #7
    beb4:	b2db      	uxtb	r3, r3
    beb6:	2b09      	cmp	r3, #9
    beb8:	d902      	bls.n	bec0 <smp_pairing_req+0x14>
		return BT_SMP_ERR_ENC_KEY_SIZE;
    beba:	2506      	movs	r5, #6
}
    bebc:	4628      	mov	r0, r5
    bebe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bec0:	4604      	mov	r4, r0
	ret = smp_init(smp);
    bec2:	f7fe f81c 	bl	9efe <smp_init>
	if (ret) {
    bec6:	b108      	cbz	r0, becc <smp_pairing_req+0x20>
		return ret;
    bec8:	b2c5      	uxtb	r5, r0
    beca:	e7f7      	b.n	bebc <smp_pairing_req+0x10>
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
    becc:	2301      	movs	r3, #1
    bece:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
	memcpy(smp->preq + 1, req, sizeof(*req));
    bed2:	2206      	movs	r2, #6
    bed4:	4631      	mov	r1, r6
    bed6:	f104 00a6 	add.w	r0, r4, #166	; 0xa6
    beda:	f7f4 f9f1 	bl	2c0 <memcpy>
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
    bede:	2302      	movs	r3, #2
    bee0:	f884 30ac 	strb.w	r3, [r4, #172]	; 0xac
	rsp->auth_req = get_auth(req->auth_req);
    bee4:	78b0      	ldrb	r0, [r6, #2]
    bee6:	f7fd ff97 	bl	9e18 <get_auth>
    beea:	4605      	mov	r5, r0
    beec:	f884 00af 	strb.w	r0, [r4, #175]	; 0xaf
	rsp->io_capability = get_io_capa();
    bef0:	f7fd ff14 	bl	9d1c <get_io_capa>
    bef4:	f884 00ad 	strb.w	r0, [r4, #173]	; 0xad
	rsp->oob_flag = BT_SMP_OOB_NOT_PRESENT;
    bef8:	2300      	movs	r3, #0
    befa:	f884 30ae 	strb.w	r3, [r4, #174]	; 0xae
	rsp->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
    befe:	2310      	movs	r3, #16
    bf00:	f884 30b0 	strb.w	r3, [r4, #176]	; 0xb0
	rsp->init_key_dist = (req->init_key_dist & RECV_KEYS);
    bf04:	7933      	ldrb	r3, [r6, #4]
    bf06:	f003 0307 	and.w	r3, r3, #7
    bf0a:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
    bf0e:	7973      	ldrb	r3, [r6, #5]
    bf10:	f003 0305 	and.w	r3, r3, #5
    bf14:	f884 30b2 	strb.w	r3, [r4, #178]	; 0xb2
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
    bf18:	f015 0f08 	tst.w	r5, #8
    bf1c:	d003      	beq.n	bf26 <smp_pairing_req+0x7a>
	    (req->auth_req & BT_SMP_AUTH_SC)) {
    bf1e:	78b3      	ldrb	r3, [r6, #2]
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
    bf20:	f013 0f08 	tst.w	r3, #8
    bf24:	d15b      	bne.n	bfde <smp_pairing_req+0x132>
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
    bf26:	f894 30af 	ldrb.w	r3, [r4, #175]	; 0xaf
    bf2a:	f013 0f20 	tst.w	r3, #32
    bf2e:	d003      	beq.n	bf38 <smp_pairing_req+0x8c>
	    (req->auth_req & BT_SMP_AUTH_CT2)) {
    bf30:	78b3      	ldrb	r3, [r6, #2]
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
    bf32:	f013 0f20 	tst.w	r3, #32
    bf36:	d16d      	bne.n	c014 <smp_pairing_req+0x168>
	smp->local_dist = rsp->resp_key_dist;
    bf38:	f894 30b2 	ldrb.w	r3, [r4, #178]	; 0xb2
    bf3c:	f884 3179 	strb.w	r3, [r4, #377]	; 0x179
	smp->remote_dist = rsp->init_key_dist;
    bf40:	f894 30b1 	ldrb.w	r3, [r4, #177]	; 0xb1
    bf44:	f884 317a 	strb.w	r3, [r4, #378]	; 0x17a
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
    bf48:	f894 30af 	ldrb.w	r3, [r4, #175]	; 0xaf
    bf4c:	f013 0f01 	tst.w	r3, #1
    bf50:	d003      	beq.n	bf5a <smp_pairing_req+0xae>
	    (req->auth_req & BT_SMP_AUTH_BONDING)) {
    bf52:	78b3      	ldrb	r3, [r6, #2]
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
    bf54:	f013 0f01 	tst.w	r3, #1
    bf58:	d16b      	bne.n	c032 <smp_pairing_req+0x186>
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
    bf5a:	f104 07a0 	add.w	r7, r4, #160	; 0xa0
    bf5e:	f3bf 8f5b 	dmb	ish
    bf62:	e857 3f00 	ldrex	r3, [r7]
    bf66:	f043 0308 	orr.w	r3, r3, #8
    bf6a:	e847 3200 	strex	r2, r3, [r7]
    bf6e:	2a00      	cmp	r2, #0
    bf70:	d1f7      	bne.n	bf62 <smp_pairing_req+0xb6>
    bf72:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    bf76:	f3bf 8f5b 	dmb	ish
    bf7a:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    bf7e:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    bf82:	f013 0f20 	tst.w	r3, #32
    bf86:	d063      	beq.n	c050 <smp_pairing_req+0x1a4>
	smp->method = get_pair_method(smp, req->io_capability);
    bf88:	7831      	ldrb	r1, [r6, #0]
    bf8a:	4620      	mov	r0, r4
    bf8c:	f7fd feee 	bl	9d6c <get_pair_method>
    bf90:	4605      	mov	r5, r0
    bf92:	f884 00a4 	strb.w	r0, [r4, #164]	; 0xa4
	if (smp->method == JUST_WORKS) {
    bf96:	2800      	cmp	r0, #0
    bf98:	d160      	bne.n	c05c <smp_pairing_req+0x1b0>
    bf9a:	f3bf 8f5b 	dmb	ish
    bf9e:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    bfa2:	f3bf 8f5b 	dmb	ish
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    bfa6:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    bfaa:	d157      	bne.n	c05c <smp_pairing_req+0x1b0>
    bfac:	4b35      	ldr	r3, [pc, #212]	; (c084 <smp_pairing_req+0x1d8>)
    bfae:	681b      	ldr	r3, [r3, #0]
    bfb0:	2b00      	cmp	r3, #0
    bfb2:	d053      	beq.n	c05c <smp_pairing_req+0x1b0>
		    bt_auth && bt_auth->pairing_confirm) {
    bfb4:	691b      	ldr	r3, [r3, #16]
    bfb6:	2b00      	cmp	r3, #0
    bfb8:	d050      	beq.n	c05c <smp_pairing_req+0x1b0>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    bfba:	f3bf 8f5b 	dmb	ish
    bfbe:	e857 3f00 	ldrex	r3, [r7]
    bfc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    bfc6:	e847 3200 	strex	r2, r3, [r7]
    bfca:	2a00      	cmp	r2, #0
    bfcc:	d1f7      	bne.n	bfbe <smp_pairing_req+0x112>
    bfce:	f3bf 8f5b 	dmb	ish
			bt_auth->pairing_confirm(smp->chan.chan.conn);
    bfd2:	4b2c      	ldr	r3, [pc, #176]	; (c084 <smp_pairing_req+0x1d8>)
    bfd4:	681b      	ldr	r3, [r3, #0]
    bfd6:	691b      	ldr	r3, [r3, #16]
    bfd8:	6820      	ldr	r0, [r4, #0]
    bfda:	4798      	blx	r3
			return 0;
    bfdc:	e76e      	b.n	bebc <smp_pairing_req+0x10>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
    bfde:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
    bfe2:	f3bf 8f5b 	dmb	ish
    bfe6:	e853 2f00 	ldrex	r2, [r3]
    bfea:	f042 0220 	orr.w	r2, r2, #32
    bfee:	e843 2100 	strex	r1, r2, [r3]
    bff2:	2900      	cmp	r1, #0
    bff4:	d1f7      	bne.n	bfe6 <smp_pairing_req+0x13a>
    bff6:	f3bf 8f5b 	dmb	ish
		rsp->init_key_dist &= RECV_KEYS_SC;
    bffa:	f894 30b1 	ldrb.w	r3, [r4, #177]	; 0xb1
    bffe:	f003 0306 	and.w	r3, r3, #6
    c002:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
		rsp->resp_key_dist &= SEND_KEYS_SC;
    c006:	f894 30b2 	ldrb.w	r3, [r4, #178]	; 0xb2
    c00a:	f003 0304 	and.w	r3, r3, #4
    c00e:	f884 30b2 	strb.w	r3, [r4, #178]	; 0xb2
    c012:	e788      	b.n	bf26 <smp_pairing_req+0x7a>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
    c014:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
    c018:	f3bf 8f5b 	dmb	ish
    c01c:	e853 2f00 	ldrex	r2, [r3]
    c020:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    c024:	e843 2100 	strex	r1, r2, [r3]
    c028:	2900      	cmp	r1, #0
    c02a:	d1f7      	bne.n	c01c <smp_pairing_req+0x170>
    c02c:	f3bf 8f5b 	dmb	ish
    c030:	e782      	b.n	bf38 <smp_pairing_req+0x8c>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
    c032:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
    c036:	f3bf 8f5b 	dmb	ish
    c03a:	e853 2f00 	ldrex	r2, [r3]
    c03e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    c042:	e843 2100 	strex	r1, r2, [r3]
    c046:	2900      	cmp	r1, #0
    c048:	d1f7      	bne.n	c03a <smp_pairing_req+0x18e>
    c04a:	f3bf 8f5b 	dmb	ish
    c04e:	e784      	b.n	bf5a <smp_pairing_req+0xae>
		return legacy_pairing_req(smp, req->io_capability);
    c050:	7831      	ldrb	r1, [r6, #0]
    c052:	4620      	mov	r0, r4
    c054:	f7ff fee4 	bl	be20 <legacy_pairing_req>
    c058:	4605      	mov	r5, r0
    c05a:	e72f      	b.n	bebc <smp_pairing_req+0x10>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
    c05c:	f104 039c 	add.w	r3, r4, #156	; 0x9c
    c060:	f3bf 8f5b 	dmb	ish
    c064:	e853 2f00 	ldrex	r2, [r3]
    c068:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    c06c:	e843 2100 	strex	r1, r2, [r3]
    c070:	2900      	cmp	r1, #0
    c072:	d1f7      	bne.n	c064 <smp_pairing_req+0x1b8>
    c074:	f3bf 8f5b 	dmb	ish
	return send_pairing_rsp(smp);
    c078:	4620      	mov	r0, r4
    c07a:	f7fd ffd7 	bl	a02c <send_pairing_rsp>
    c07e:	4605      	mov	r5, r0
    c080:	e71c      	b.n	bebc <smp_pairing_req+0x10>
    c082:	bf00      	nop
    c084:	20002940 	.word	0x20002940

0000c088 <bt_smp_connected>:
{
    c088:	b510      	push	{r4, lr}
    c08a:	4604      	mov	r4, r0
	k_delayed_work_init(&smp->work, smp_timeout);
    c08c:	4904      	ldr	r1, [pc, #16]	; (c0a0 <bt_smp_connected+0x18>)
    c08e:	f500 70be 	add.w	r0, r0, #380	; 0x17c
    c092:	f01d f953 	bl	2933c <k_delayed_work_init>
	smp_reset(smp);
    c096:	4620      	mov	r0, r4
    c098:	f7fe fcbb 	bl	aa12 <smp_reset>
    c09c:	bd10      	pop	{r4, pc}
    c09e:	bf00      	nop
    c0a0:	0000ac63 	.word	0x0000ac63

0000c0a4 <bt_smp_send_security_req>:
{
    c0a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c0a8:	4606      	mov	r6, r0
	smp = smp_chan_get(conn);
    c0aa:	f7fd ff15 	bl	9ed8 <smp_chan_get>
	if (!smp) {
    c0ae:	b3e8      	cbz	r0, c12c <bt_smp_send_security_req+0x88>
    c0b0:	4604      	mov	r4, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c0b2:	f3bf 8f5b 	dmb	ish
    c0b6:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    c0ba:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
    c0be:	f013 0f10 	tst.w	r3, #16
    c0c2:	d136      	bne.n	c132 <bt_smp_send_security_req+0x8e>
    c0c4:	f3bf 8f5b 	dmb	ish
    c0c8:	f8d0 50a0 	ldr.w	r5, [r0, #160]	; 0xa0
    c0cc:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1))));
    c0d0:	f3c5 05c0 	ubfx	r5, r5, #3, #1
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    c0d4:	bb85      	cbnz	r5, c138 <bt_smp_send_security_req+0x94>
	if (!sec_level_reachable(conn)) {
    c0d6:	4630      	mov	r0, r6
    c0d8:	f7fd feb4 	bl	9e44 <sec_level_reachable>
    c0dc:	b378      	cbz	r0, c13e <bt_smp_send_security_req+0x9a>
	req_buf = smp_create_pdu(conn, BT_SMP_CMD_SECURITY_REQUEST,
    c0de:	2201      	movs	r2, #1
    c0e0:	210b      	movs	r1, #11
    c0e2:	4630      	mov	r0, r6
    c0e4:	f7fd fefd 	bl	9ee2 <smp_create_pdu>
	if (!req_buf) {
    c0e8:	4607      	mov	r7, r0
    c0ea:	b358      	cbz	r0, c144 <bt_smp_send_security_req+0xa0>
	req = net_buf_add(req_buf, sizeof(*req));
    c0ec:	2101      	movs	r1, #1
    c0ee:	3008      	adds	r0, #8
    c0f0:	f00e f854 	bl	1a19c <net_buf_simple_add>
    c0f4:	4680      	mov	r8, r0
	req->auth_req = get_auth(BT_SMP_AUTH_DEFAULT);
    c0f6:	2009      	movs	r0, #9
    c0f8:	f7fd fe8e 	bl	9e18 <get_auth>
    c0fc:	f888 0000 	strb.w	r0, [r8]
    c100:	2300      	movs	r3, #0
    c102:	463a      	mov	r2, r7
    c104:	2106      	movs	r1, #6
    c106:	4630      	mov	r0, r6
    c108:	f7fb f9e1 	bl	74ce <bt_l2cap_send_cb>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
    c10c:	349c      	adds	r4, #156	; 0x9c
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c10e:	f3bf 8f5b 	dmb	ish
    c112:	e854 3f00 	ldrex	r3, [r4]
    c116:	f043 0320 	orr.w	r3, r3, #32
    c11a:	e844 3200 	strex	r2, r3, [r4]
    c11e:	2a00      	cmp	r2, #0
    c120:	d1f7      	bne.n	c112 <bt_smp_send_security_req+0x6e>
    c122:	f3bf 8f5b 	dmb	ish
}
    c126:	4628      	mov	r0, r5
    c128:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOTCONN;
    c12c:	f06f 057f 	mvn.w	r5, #127	; 0x7f
    c130:	e7f9      	b.n	c126 <bt_smp_send_security_req+0x82>
		return -EIO;
    c132:	f06f 0504 	mvn.w	r5, #4
    c136:	e7f6      	b.n	c126 <bt_smp_send_security_req+0x82>
		return -EBUSY;
    c138:	f06f 050f 	mvn.w	r5, #15
    c13c:	e7f3      	b.n	c126 <bt_smp_send_security_req+0x82>
		return -EINVAL;
    c13e:	f06f 0515 	mvn.w	r5, #21
    c142:	e7f0      	b.n	c126 <bt_smp_send_security_req+0x82>
		return -ENOBUFS;
    c144:	f06f 0568 	mvn.w	r5, #104	; 0x68
    c148:	e7ed      	b.n	c126 <bt_smp_send_security_req+0x82>

0000c14a <bt_smp_send_pairing_req>:
{
    c14a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    c14e:	4605      	mov	r5, r0
	smp = smp_chan_get(conn);
    c150:	f7fd fec2 	bl	9ed8 <smp_chan_get>
	if (!smp) {
    c154:	2800      	cmp	r0, #0
    c156:	d06b      	beq.n	c230 <bt_smp_send_pairing_req+0xe6>
    c158:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
    c15a:	f100 06a0 	add.w	r6, r0, #160	; 0xa0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c15e:	f3bf 8f5b 	dmb	ish
    c162:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    c166:	f3bf 8f5b 	dmb	ish
    c16a:	f013 0f10 	tst.w	r3, #16
    c16e:	d162      	bne.n	c236 <bt_smp_send_pairing_req+0xec>
    c170:	f3bf 8f5b 	dmb	ish
    c174:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    c178:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    c17c:	f013 0f08 	tst.w	r3, #8
    c180:	d15c      	bne.n	c23c <bt_smp_send_pairing_req+0xf2>
	if (!sec_level_reachable(conn)) {
    c182:	4628      	mov	r0, r5
    c184:	f7fd fe5e 	bl	9e44 <sec_level_reachable>
    c188:	2800      	cmp	r0, #0
    c18a:	d05a      	beq.n	c242 <bt_smp_send_pairing_req+0xf8>
	if (smp_init(smp)) {
    c18c:	4620      	mov	r0, r4
    c18e:	f7fd feb6 	bl	9efe <smp_init>
    c192:	4680      	mov	r8, r0
    c194:	2800      	cmp	r0, #0
    c196:	d157      	bne.n	c248 <bt_smp_send_pairing_req+0xfe>
	req_buf = smp_create_pdu(conn, BT_SMP_CMD_PAIRING_REQ, sizeof(*req));
    c198:	2206      	movs	r2, #6
    c19a:	2101      	movs	r1, #1
    c19c:	4628      	mov	r0, r5
    c19e:	f7fd fea0 	bl	9ee2 <smp_create_pdu>
	if (!req_buf) {
    c1a2:	4607      	mov	r7, r0
    c1a4:	2800      	cmp	r0, #0
    c1a6:	d052      	beq.n	c24e <bt_smp_send_pairing_req+0x104>
	req = net_buf_add(req_buf, sizeof(*req));
    c1a8:	2106      	movs	r1, #6
    c1aa:	3008      	adds	r0, #8
    c1ac:	f00d fff6 	bl	1a19c <net_buf_simple_add>
    c1b0:	4605      	mov	r5, r0
	req->auth_req = get_auth(BT_SMP_AUTH_DEFAULT);
    c1b2:	2009      	movs	r0, #9
    c1b4:	f7fd fe30 	bl	9e18 <get_auth>
    c1b8:	70a8      	strb	r0, [r5, #2]
	req->io_capability = get_io_capa();
    c1ba:	f7fd fdaf 	bl	9d1c <get_io_capa>
    c1be:	7028      	strb	r0, [r5, #0]
	req->oob_flag = BT_SMP_OOB_NOT_PRESENT;
    c1c0:	f04f 0900 	mov.w	r9, #0
    c1c4:	f885 9001 	strb.w	r9, [r5, #1]
	req->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
    c1c8:	2310      	movs	r3, #16
    c1ca:	70eb      	strb	r3, [r5, #3]
	req->init_key_dist = SEND_KEYS;
    c1cc:	2205      	movs	r2, #5
    c1ce:	712a      	strb	r2, [r5, #4]
	req->resp_key_dist = RECV_KEYS;
    c1d0:	2307      	movs	r3, #7
    c1d2:	716b      	strb	r3, [r5, #5]
	smp->local_dist = SEND_KEYS;
    c1d4:	f884 2179 	strb.w	r2, [r4, #377]	; 0x179
	smp->remote_dist = RECV_KEYS;
    c1d8:	f884 317a 	strb.w	r3, [r4, #378]	; 0x17a
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
    c1dc:	2301      	movs	r3, #1
    c1de:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
	memcpy(smp->preq + 1, req, sizeof(*req));
    c1e2:	2206      	movs	r2, #6
    c1e4:	4629      	mov	r1, r5
    c1e6:	f104 00a6 	add.w	r0, r4, #166	; 0xa6
    c1ea:	f7f4 f869 	bl	2c0 <memcpy>
	smp_send(smp, req_buf, NULL);
    c1ee:	464a      	mov	r2, r9
    c1f0:	4639      	mov	r1, r7
    c1f2:	4620      	mov	r0, r4
    c1f4:	f7fd fec8 	bl	9f88 <smp_send>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RSP);
    c1f8:	349c      	adds	r4, #156	; 0x9c
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c1fa:	f3bf 8f5b 	dmb	ish
    c1fe:	e854 3f00 	ldrex	r3, [r4]
    c202:	f043 0304 	orr.w	r3, r3, #4
    c206:	e844 3200 	strex	r2, r3, [r4]
    c20a:	2a00      	cmp	r2, #0
    c20c:	d1f7      	bne.n	c1fe <bt_smp_send_pairing_req+0xb4>
    c20e:	f3bf 8f5b 	dmb	ish
    c212:	f3bf 8f5b 	dmb	ish
    c216:	e856 3f00 	ldrex	r3, [r6]
    c21a:	f043 0308 	orr.w	r3, r3, #8
    c21e:	e846 3200 	strex	r2, r3, [r6]
    c222:	2a00      	cmp	r2, #0
    c224:	d1f7      	bne.n	c216 <bt_smp_send_pairing_req+0xcc>
    c226:	f3bf 8f5b 	dmb	ish
}
    c22a:	4640      	mov	r0, r8
    c22c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -ENOTCONN;
    c230:	f06f 087f 	mvn.w	r8, #127	; 0x7f
    c234:	e7f9      	b.n	c22a <bt_smp_send_pairing_req+0xe0>
		return -EIO;
    c236:	f06f 0804 	mvn.w	r8, #4
    c23a:	e7f6      	b.n	c22a <bt_smp_send_pairing_req+0xe0>
		return -EBUSY;
    c23c:	f06f 080f 	mvn.w	r8, #15
    c240:	e7f3      	b.n	c22a <bt_smp_send_pairing_req+0xe0>
		return -EINVAL;
    c242:	f06f 0815 	mvn.w	r8, #21
    c246:	e7f0      	b.n	c22a <bt_smp_send_pairing_req+0xe0>
		return -ENOBUFS;
    c248:	f06f 0868 	mvn.w	r8, #104	; 0x68
    c24c:	e7ed      	b.n	c22a <bt_smp_send_pairing_req+0xe0>
		return -ENOBUFS;
    c24e:	f06f 0868 	mvn.w	r8, #104	; 0x68
    c252:	e7ea      	b.n	c22a <bt_smp_send_pairing_req+0xe0>

0000c254 <smp_security_request>:
{
    c254:	b5f0      	push	{r4, r5, r6, r7, lr}
    c256:	b085      	sub	sp, #20
    c258:	4606      	mov	r6, r0
	struct bt_conn *conn = smp->chan.chan.conn;
    c25a:	6804      	ldr	r4, [r0, #0]
	struct bt_smp_security_request *req = (void *)buf->data;
    c25c:	688b      	ldr	r3, [r1, #8]
	if (sc_supported) {
    c25e:	4a35      	ldr	r2, [pc, #212]	; (c334 <smp_security_request+0xe0>)
    c260:	7812      	ldrb	r2, [r2, #0]
    c262:	b332      	cbz	r2, c2b2 <smp_security_request+0x5e>
		auth = req->auth_req & BT_SMP_AUTH_MASK_SC;
    c264:	781d      	ldrb	r5, [r3, #0]
    c266:	f005 050f 	and.w	r5, r5, #15
	if (!conn->le.keys) {
    c26a:	6f23      	ldr	r3, [r4, #112]	; 0x70
    c26c:	b32b      	cbz	r3, c2ba <smp_security_request+0x66>
	if (!conn->le.keys) {
    c26e:	6f23      	ldr	r3, [r4, #112]	; 0x70
    c270:	2b00      	cmp	r3, #0
    c272:	d039      	beq.n	c2e8 <smp_security_request+0x94>
	if ((auth & BT_SMP_AUTH_MITM) &&
    c274:	f015 0f04 	tst.w	r5, #4
    c278:	d12e      	bne.n	c2d8 <smp_security_request+0x84>
	if ((auth & BT_SMP_AUTH_SC) &&
    c27a:	f015 0f08 	tst.w	r5, #8
    c27e:	d004      	beq.n	c28a <smp_security_request+0x36>
	    !(conn->le.keys->keys & BT_KEYS_LTK_P256)) {
    c280:	6f23      	ldr	r3, [r4, #112]	; 0x70
    c282:	899b      	ldrh	r3, [r3, #12]
	if ((auth & BT_SMP_AUTH_SC) &&
    c284:	f013 0f20 	tst.w	r3, #32
    c288:	d02e      	beq.n	c2e8 <smp_security_request+0x94>
	if (bt_conn_le_start_encryption(conn, conn->le.keys->ltk.rand,
    c28a:	6f23      	ldr	r3, [r4, #112]	; 0x70
					conn->le.keys->ltk.val,
    c28c:	f103 021a 	add.w	r2, r3, #26
					conn->le.keys->enc_size) < 0) {
    c290:	79dd      	ldrb	r5, [r3, #7]
	if (bt_conn_le_start_encryption(conn, conn->le.keys->ltk.rand,
    c292:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
    c296:	9502      	str	r5, [sp, #8]
    c298:	9201      	str	r2, [sp, #4]
    c29a:	8b1b      	ldrh	r3, [r3, #24]
    c29c:	9300      	str	r3, [sp, #0]
    c29e:	4602      	mov	r2, r0
    c2a0:	460b      	mov	r3, r1
    c2a2:	4620      	mov	r0, r4
    c2a4:	f7f9 ffbc 	bl	6220 <bt_conn_le_start_encryption>
    c2a8:	2800      	cmp	r0, #0
    c2aa:	da24      	bge.n	c2f6 <smp_security_request+0xa2>
		return BT_SMP_ERR_UNSPECIFIED;
    c2ac:	2008      	movs	r0, #8
}
    c2ae:	b005      	add	sp, #20
    c2b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		auth = req->auth_req & BT_SMP_AUTH_MASK;
    c2b2:	781d      	ldrb	r5, [r3, #0]
    c2b4:	f005 0507 	and.w	r5, r5, #7
    c2b8:	e7d7      	b.n	c26a <smp_security_request+0x16>
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, &conn->le.dst);
    c2ba:	f104 0748 	add.w	r7, r4, #72	; 0x48
    c2be:	4639      	mov	r1, r7
    c2c0:	2020      	movs	r0, #32
    c2c2:	f000 f98f 	bl	c5e4 <bt_keys_find>
    c2c6:	6720      	str	r0, [r4, #112]	; 0x70
		if (!conn->le.keys) {
    c2c8:	2800      	cmp	r0, #0
    c2ca:	d1d0      	bne.n	c26e <smp_security_request+0x1a>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK,
    c2cc:	4639      	mov	r1, r7
    c2ce:	2004      	movs	r0, #4
    c2d0:	f000 f988 	bl	c5e4 <bt_keys_find>
    c2d4:	6720      	str	r0, [r4, #112]	; 0x70
    c2d6:	e7ca      	b.n	c26e <smp_security_request+0x1a>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c2d8:	f3bf 8f5b 	dmb	ish
    c2dc:	689b      	ldr	r3, [r3, #8]
    c2de:	f3bf 8f5b 	dmb	ish
	if ((auth & BT_SMP_AUTH_MITM) &&
    c2e2:	f013 0f01 	tst.w	r3, #1
    c2e6:	d1c8      	bne.n	c27a <smp_security_request+0x26>
	if (bt_smp_send_pairing_req(conn) < 0) {
    c2e8:	4620      	mov	r0, r4
    c2ea:	f7ff ff2e 	bl	c14a <bt_smp_send_pairing_req>
    c2ee:	2800      	cmp	r0, #0
    c2f0:	da10      	bge.n	c314 <smp_security_request+0xc0>
		return BT_SMP_ERR_UNSPECIFIED;
    c2f2:	2008      	movs	r0, #8
    c2f4:	e7db      	b.n	c2ae <smp_security_request+0x5a>
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    c2f6:	36a0      	adds	r6, #160	; 0xa0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c2f8:	f3bf 8f5b 	dmb	ish
    c2fc:	e856 3f00 	ldrex	r3, [r6]
    c300:	f043 0302 	orr.w	r3, r3, #2
    c304:	e846 3200 	strex	r2, r3, [r6]
    c308:	2a00      	cmp	r2, #0
    c30a:	d1f7      	bne.n	c2fc <smp_security_request+0xa8>
    c30c:	f3bf 8f5b 	dmb	ish
	return 0;
    c310:	2000      	movs	r0, #0
    c312:	e7cc      	b.n	c2ae <smp_security_request+0x5a>
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
    c314:	36a0      	adds	r6, #160	; 0xa0
    c316:	f3bf 8f5b 	dmb	ish
    c31a:	e856 3f00 	ldrex	r3, [r6]
    c31e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    c322:	e846 3200 	strex	r2, r3, [r6]
    c326:	2a00      	cmp	r2, #0
    c328:	d1f7      	bne.n	c31a <smp_security_request+0xc6>
    c32a:	f3bf 8f5b 	dmb	ish
	return 0;
    c32e:	2000      	movs	r0, #0
    c330:	e7bd      	b.n	c2ae <smp_security_request+0x5a>
    c332:	bf00      	nop
    c334:	20000938 	.word	0x20000938

0000c338 <bt_smp_sign_verify>:
{
    c338:	b530      	push	{r4, r5, lr}
    c33a:	b085      	sub	sp, #20
    c33c:	4605      	mov	r5, r0
    c33e:	460c      	mov	r4, r1
	return buf->data + buf->len;
    c340:	6889      	ldr	r1, [r1, #8]
    c342:	89a3      	ldrh	r3, [r4, #12]
	memcpy(sig, net_buf_tail(buf) - sizeof(sig), sizeof(sig));
    c344:	3b0c      	subs	r3, #12
    c346:	220c      	movs	r2, #12
    c348:	4419      	add	r1, r3
    c34a:	a801      	add	r0, sp, #4
    c34c:	f7f3 ffb8 	bl	2c0 <memcpy>
	keys = bt_keys_find(BT_KEYS_REMOTE_CSRK, &conn->le.dst);
    c350:	f105 0148 	add.w	r1, r5, #72	; 0x48
    c354:	2010      	movs	r0, #16
    c356:	f000 f945 	bl	c5e4 <bt_keys_find>
	if (!keys) {
    c35a:	b320      	cbz	r0, c3a6 <bt_smp_sign_verify+0x6e>
    c35c:	4605      	mov	r5, r0
	cnt = sys_cpu_to_le32(keys->remote_csrk.cnt);
    c35e:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    c360:	a904      	add	r1, sp, #16
    c362:	f841 3d10 	str.w	r3, [r1, #-16]!
    c366:	68a0      	ldr	r0, [r4, #8]
    c368:	89a3      	ldrh	r3, [r4, #12]
	memcpy(net_buf_tail(buf) - sizeof(sig), &cnt, sizeof(cnt));
    c36a:	3b0c      	subs	r3, #12
    c36c:	2204      	movs	r2, #4
    c36e:	4418      	add	r0, r3
    c370:	f7f3 ffa6 	bl	2c0 <memcpy>
			   buf->len - sizeof(sig));
    c374:	89a2      	ldrh	r2, [r4, #12]
	err = smp_sign_buf(keys->remote_csrk.val, buf->data,
    c376:	3a0c      	subs	r2, #12
    c378:	b292      	uxth	r2, r2
    c37a:	68a1      	ldr	r1, [r4, #8]
    c37c:	f105 005c 	add.w	r0, r5, #92	; 0x5c
    c380:	f7fd feac 	bl	a0dc <smp_sign_buf>
	if (err) {
    c384:	b990      	cbnz	r0, c3ac <bt_smp_sign_verify+0x74>
    c386:	68a1      	ldr	r1, [r4, #8]
    c388:	89a3      	ldrh	r3, [r4, #12]
	if (memcmp(sig, net_buf_tail(buf) - sizeof(sig), sizeof(sig))) {
    c38a:	3b0c      	subs	r3, #12
    c38c:	220c      	movs	r2, #12
    c38e:	4419      	add	r1, r3
    c390:	a801      	add	r0, sp, #4
    c392:	f01e fae3 	bl	2a95c <memcmp>
    c396:	4602      	mov	r2, r0
    c398:	b958      	cbnz	r0, c3b2 <bt_smp_sign_verify+0x7a>
	keys->remote_csrk.cnt++;
    c39a:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
    c39c:	3301      	adds	r3, #1
    c39e:	66eb      	str	r3, [r5, #108]	; 0x6c
}
    c3a0:	4610      	mov	r0, r2
    c3a2:	b005      	add	sp, #20
    c3a4:	bd30      	pop	{r4, r5, pc}
		return -ENOENT;
    c3a6:	f06f 0201 	mvn.w	r2, #1
    c3aa:	e7f9      	b.n	c3a0 <bt_smp_sign_verify+0x68>
		return -EIO;
    c3ac:	f06f 0204 	mvn.w	r2, #4
    c3b0:	e7f6      	b.n	c3a0 <bt_smp_sign_verify+0x68>
		return -EBADMSG;
    c3b2:	f06f 024c 	mvn.w	r2, #76	; 0x4c
    c3b6:	e7f3      	b.n	c3a0 <bt_smp_sign_verify+0x68>

0000c3b8 <bt_smp_sign>:
{
    c3b8:	b530      	push	{r4, r5, lr}
    c3ba:	b083      	sub	sp, #12
    c3bc:	460c      	mov	r4, r1
	keys = bt_keys_find(BT_KEYS_LOCAL_CSRK, &conn->le.dst);
    c3be:	f100 0148 	add.w	r1, r0, #72	; 0x48
    c3c2:	2008      	movs	r0, #8
    c3c4:	f000 f90e 	bl	c5e4 <bt_keys_find>
	if (!keys) {
    c3c8:	b300      	cbz	r0, c40c <bt_smp_sign+0x54>
    c3ca:	4605      	mov	r5, r0
	net_buf_add(buf, 12);
    c3cc:	210c      	movs	r1, #12
    c3ce:	f104 0008 	add.w	r0, r4, #8
    c3d2:	f00d fee3 	bl	1a19c <net_buf_simple_add>
	cnt = sys_cpu_to_le32(keys->local_csrk.cnt);
    c3d6:	6dab      	ldr	r3, [r5, #88]	; 0x58
    c3d8:	a902      	add	r1, sp, #8
    c3da:	f841 3d04 	str.w	r3, [r1, #-4]!
    c3de:	68a0      	ldr	r0, [r4, #8]
    c3e0:	89a3      	ldrh	r3, [r4, #12]
	memcpy(net_buf_tail(buf) - 12, &cnt, sizeof(cnt));
    c3e2:	3b0c      	subs	r3, #12
    c3e4:	2204      	movs	r2, #4
    c3e6:	4418      	add	r0, r3
    c3e8:	f7f3 ff6a 	bl	2c0 <memcpy>
	err = smp_sign_buf(keys->local_csrk.val, buf->data, buf->len - 12);
    c3ec:	89a2      	ldrh	r2, [r4, #12]
    c3ee:	3a0c      	subs	r2, #12
    c3f0:	b292      	uxth	r2, r2
    c3f2:	68a1      	ldr	r1, [r4, #8]
    c3f4:	f105 0048 	add.w	r0, r5, #72	; 0x48
    c3f8:	f7fd fe70 	bl	a0dc <smp_sign_buf>
	if (err) {
    c3fc:	4602      	mov	r2, r0
    c3fe:	b940      	cbnz	r0, c412 <bt_smp_sign+0x5a>
	keys->local_csrk.cnt++;
    c400:	6dab      	ldr	r3, [r5, #88]	; 0x58
    c402:	3301      	adds	r3, #1
    c404:	65ab      	str	r3, [r5, #88]	; 0x58
}
    c406:	4610      	mov	r0, r2
    c408:	b003      	add	sp, #12
    c40a:	bd30      	pop	{r4, r5, pc}
		return -ENOENT;
    c40c:	f06f 0201 	mvn.w	r2, #1
    c410:	e7f9      	b.n	c406 <bt_smp_sign+0x4e>
		return -EIO;
    c412:	f06f 0204 	mvn.w	r2, #4
    c416:	e7f6      	b.n	c406 <bt_smp_sign+0x4e>

0000c418 <bt_smp_update_keys>:
{
    c418:	b570      	push	{r4, r5, r6, lr}
    c41a:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
    c41c:	f7fd fd5c 	bl	9ed8 <smp_chan_get>
	if (!smp) {
    c420:	2800      	cmp	r0, #0
    c422:	d03d      	beq.n	c4a0 <bt_smp_update_keys+0x88>
    c424:	4605      	mov	r5, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c426:	f3bf 8f5b 	dmb	ish
    c42a:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    c42e:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    c432:	f013 0f08 	tst.w	r3, #8
    c436:	d033      	beq.n	c4a0 <bt_smp_update_keys+0x88>
	if (conn->le.keys) {
    c438:	6f20      	ldr	r0, [r4, #112]	; 0x70
    c43a:	b108      	cbz	r0, c440 <bt_smp_update_keys+0x28>
		bt_keys_clear(conn->le.keys);
    c43c:	f000 f97f 	bl	c73e <bt_keys_clear>
	conn->le.keys = bt_keys_get_addr(&conn->le.dst);
    c440:	f104 0048 	add.w	r0, r4, #72	; 0x48
    c444:	f000 f8a4 	bl	c590 <bt_keys_get_addr>
    c448:	6720      	str	r0, [r4, #112]	; 0x70
	if (!conn->le.keys) {
    c44a:	b348      	cbz	r0, c4a0 <bt_smp_update_keys+0x88>
    c44c:	f3bf 8f5b 	dmb	ish
    c450:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
    c454:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY)) {
    c458:	f413 6f00 	tst.w	r3, #2048	; 0x800
    c45c:	d121      	bne.n	c4a2 <bt_smp_update_keys+0x8a>
	switch (smp->method) {
    c45e:	f895 30a4 	ldrb.w	r3, [r5, #164]	; 0xa4
    c462:	3b01      	subs	r3, #1
    c464:	2b02      	cmp	r3, #2
    c466:	d82b      	bhi.n	c4c0 <bt_smp_update_keys+0xa8>
		atomic_set_bit(conn->le.keys->flags, BT_KEYS_AUTHENTICATED);
    c468:	6f23      	ldr	r3, [r4, #112]	; 0x70
    c46a:	3308      	adds	r3, #8
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c46c:	f3bf 8f5b 	dmb	ish
    c470:	e853 2f00 	ldrex	r2, [r3]
    c474:	f042 0201 	orr.w	r2, r2, #1
    c478:	e843 2100 	strex	r1, r2, [r3]
    c47c:	2900      	cmp	r1, #0
    c47e:	d1f7      	bne.n	c470 <bt_smp_update_keys+0x58>
    c480:	f3bf 8f5b 	dmb	ish
	conn->le.keys->enc_size = get_encryption_key_size(smp);
    c484:	6f26      	ldr	r6, [r4, #112]	; 0x70
    c486:	4628      	mov	r0, r5
    c488:	f7fd fc8a 	bl	9da0 <get_encryption_key_size>
    c48c:	71f0      	strb	r0, [r6, #7]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c48e:	f3bf 8f5b 	dmb	ish
    c492:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
    c496:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC) &&
    c49a:	f013 0f20 	tst.w	r3, #32
    c49e:	d11e      	bne.n	c4de <bt_smp_update_keys+0xc6>
    c4a0:	bd70      	pop	{r4, r5, r6, pc}
		atomic_set_bit(conn->le.keys->flags, BT_KEYS_DEBUG);
    c4a2:	6f23      	ldr	r3, [r4, #112]	; 0x70
    c4a4:	3308      	adds	r3, #8
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c4a6:	f3bf 8f5b 	dmb	ish
    c4aa:	e853 2f00 	ldrex	r2, [r3]
    c4ae:	f042 0202 	orr.w	r2, r2, #2
    c4b2:	e843 2100 	strex	r1, r2, [r3]
    c4b6:	2900      	cmp	r1, #0
    c4b8:	d1f7      	bne.n	c4aa <bt_smp_update_keys+0x92>
    c4ba:	f3bf 8f5b 	dmb	ish
    c4be:	e7ce      	b.n	c45e <bt_smp_update_keys+0x46>
		atomic_clear_bit(conn->le.keys->flags, BT_KEYS_AUTHENTICATED);
    c4c0:	6f23      	ldr	r3, [r4, #112]	; 0x70
    c4c2:	3308      	adds	r3, #8
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    c4c4:	f3bf 8f5b 	dmb	ish
    c4c8:	e853 2f00 	ldrex	r2, [r3]
    c4cc:	f022 0201 	bic.w	r2, r2, #1
    c4d0:	e843 2100 	strex	r1, r2, [r3]
    c4d4:	2900      	cmp	r1, #0
    c4d6:	d1f7      	bne.n	c4c8 <bt_smp_update_keys+0xb0>
    c4d8:	f3bf 8f5b 	dmb	ish
    c4dc:	e7d2      	b.n	c484 <bt_smp_update_keys+0x6c>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c4de:	f3bf 8f5b 	dmb	ish
    c4e2:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
    c4e6:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC) &&
    c4ea:	f413 6f80 	tst.w	r3, #1024	; 0x400
    c4ee:	d0d7      	beq.n	c4a0 <bt_smp_update_keys+0x88>
		bt_keys_add_type(conn->le.keys, BT_KEYS_LTK_P256);
    c4f0:	2120      	movs	r1, #32
    c4f2:	6f20      	ldr	r0, [r4, #112]	; 0x70
    c4f4:	f000 f90c 	bl	c710 <bt_keys_add_type>
		memcpy(conn->le.keys->ltk.val, smp->tk,
    c4f8:	6f20      	ldr	r0, [r4, #112]	; 0x70
    c4fa:	2210      	movs	r2, #16
    c4fc:	f105 01e3 	add.w	r1, r5, #227	; 0xe3
    c500:	301a      	adds	r0, #26
    c502:	f7f3 fedd 	bl	2c0 <memcpy>
		conn->le.keys->ltk.rand = 0;
    c506:	6f23      	ldr	r3, [r4, #112]	; 0x70
    c508:	2000      	movs	r0, #0
    c50a:	2100      	movs	r1, #0
    c50c:	e9c3 0104 	strd	r0, r1, [r3, #16]
		conn->le.keys->ltk.ediv = 0;
    c510:	6f23      	ldr	r3, [r4, #112]	; 0x70
    c512:	2200      	movs	r2, #0
    c514:	831a      	strh	r2, [r3, #24]
    c516:	e7c3      	b.n	c4a0 <bt_smp_update_keys+0x88>

0000c518 <bt_smp_get_tk>:
{
    c518:	b570      	push	{r4, r5, r6, lr}
    c51a:	460d      	mov	r5, r1
	smp = smp_chan_get(conn);
    c51c:	f7fd fcdc 	bl	9ed8 <smp_chan_get>
	if (!smp) {
    c520:	b300      	cbz	r0, c564 <bt_smp_get_tk+0x4c>
    c522:	4604      	mov	r4, r0
    c524:	f3bf 8f5b 	dmb	ish
    c528:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    c52c:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    c530:	f013 0f08 	tst.w	r3, #8
    c534:	d101      	bne.n	c53a <bt_smp_get_tk+0x22>
		return false;
    c536:	2000      	movs	r0, #0
    c538:	bd70      	pop	{r4, r5, r6, pc}
	enc_size = get_encryption_key_size(smp);
    c53a:	f7fd fc31 	bl	9da0 <get_encryption_key_size>
    c53e:	4606      	mov	r6, r0
	memcpy(tk, smp->tk, enc_size);
    c540:	4602      	mov	r2, r0
    c542:	f104 01e3 	add.w	r1, r4, #227	; 0xe3
    c546:	4628      	mov	r0, r5
    c548:	f7f3 feba 	bl	2c0 <memcpy>
	if (enc_size < sizeof(smp->tk)) {
    c54c:	2e0f      	cmp	r6, #15
    c54e:	d901      	bls.n	c554 <bt_smp_get_tk+0x3c>
	return true;
    c550:	2001      	movs	r0, #1
}
    c552:	bd70      	pop	{r4, r5, r6, pc}
		memset(tk + enc_size, 0, sizeof(smp->tk) - enc_size);
    c554:	f1c6 0210 	rsb	r2, r6, #16
    c558:	2100      	movs	r1, #0
    c55a:	19a8      	adds	r0, r5, r6
    c55c:	f01e fa92 	bl	2aa84 <memset>
	return true;
    c560:	2001      	movs	r0, #1
    c562:	bd70      	pop	{r4, r5, r6, pc}
		return false;
    c564:	2000      	movs	r0, #0
    c566:	bd70      	pop	{r4, r5, r6, pc}

0000c568 <bt_smp_init>:

int bt_smp_init(void)
{
    c568:	b508      	push	{r3, lr}
	};
	static struct bt_pub_key_cb pub_key_cb = {
		.func           = bt_smp_pkey_ready,
	};

	sc_supported = le_sc_supported();
    c56a:	f7fd fca9 	bl	9ec0 <le_sc_supported>
    c56e:	4b05      	ldr	r3, [pc, #20]	; (c584 <bt_smp_init+0x1c>)
    c570:	7018      	strb	r0, [r3, #0]
	if (IS_ENABLED(CONFIG_BT_SMP_SC_ONLY) && !sc_supported) {
		BT_ERR("SC Only Mode selected but LE SC not supported");
		return -ENOENT;
	}

	bt_l2cap_le_fixed_chan_register(&chan);
    c572:	4805      	ldr	r0, [pc, #20]	; (c588 <bt_smp_init+0x20>)
    c574:	f7fa fe04 	bl	7180 <bt_l2cap_le_fixed_chan_register>
	}
#endif

	BT_DBG("LE SC %s", sc_supported ? "enabled" : "disabled");

	bt_pub_key_gen(&pub_key_cb);
    c578:	4804      	ldr	r0, [pc, #16]	; (c58c <bt_smp_init+0x24>)
    c57a:	f7f9 fc7f 	bl	5e7c <bt_pub_key_gen>

	return smp_self_test();
}
    c57e:	2000      	movs	r0, #0
    c580:	bd08      	pop	{r3, pc}
    c582:	bf00      	nop
    c584:	20000938 	.word	0x20000938
    c588:	2000bacc 	.word	0x2000bacc
    c58c:	2000baec 	.word	0x2000baec

0000c590 <bt_keys_get_addr>:
#include "keys.h"

static struct bt_keys key_pool[CONFIG_BT_MAX_PAIRED];

struct bt_keys *bt_keys_get_addr(const bt_addr_le_t *addr)
{
    c590:	b5f0      	push	{r4, r5, r6, r7, lr}
    c592:	b083      	sub	sp, #12
    c594:	4606      	mov	r6, r0
	struct bt_keys *keys;
	int i;

	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
    c596:	2500      	movs	r5, #0
    c598:	b11d      	cbz	r5, c5a2 <bt_keys_get_addr+0x12>
		}
	}

	BT_DBG("unable to create keys for %s", bt_addr_le_str(addr));

	return NULL;
    c59a:	2400      	movs	r4, #0
}
    c59c:	4620      	mov	r0, r4
    c59e:	b003      	add	sp, #12
    c5a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		keys = &key_pool[i];
    c5a2:	00eb      	lsls	r3, r5, #3
    c5a4:	442b      	add	r3, r5
    c5a6:	011a      	lsls	r2, r3, #4
    c5a8:	4c0d      	ldr	r4, [pc, #52]	; (c5e0 <bt_keys_get_addr+0x50>)
    c5aa:	4414      	add	r4, r2
	return memcmp(a, b, sizeof(*a));
    c5ac:	2207      	movs	r2, #7
    c5ae:	4631      	mov	r1, r6
    c5b0:	4620      	mov	r0, r4
    c5b2:	f01e f9d3 	bl	2a95c <memcmp>
		if (!bt_addr_le_cmp(&keys->addr, addr)) {
    c5b6:	2800      	cmp	r0, #0
    c5b8:	d0f0      	beq.n	c59c <bt_keys_get_addr+0xc>
		if (!bt_addr_le_cmp(&keys->addr, BT_ADDR_LE_ANY)) {
    c5ba:	2300      	movs	r3, #0
    c5bc:	9300      	str	r3, [sp, #0]
    c5be:	f8cd 3003 	str.w	r3, [sp, #3]
    c5c2:	2207      	movs	r2, #7
    c5c4:	4669      	mov	r1, sp
    c5c6:	4620      	mov	r0, r4
    c5c8:	f01e f9c8 	bl	2a95c <memcmp>
    c5cc:	b108      	cbz	r0, c5d2 <bt_keys_get_addr+0x42>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
    c5ce:	3501      	adds	r5, #1
    c5d0:	e7e2      	b.n	c598 <bt_keys_get_addr+0x8>
	memcpy(dst, src, sizeof(*dst));
    c5d2:	2207      	movs	r2, #7
    c5d4:	4631      	mov	r1, r6
    c5d6:	4620      	mov	r0, r4
    c5d8:	f7f3 fe72 	bl	2c0 <memcpy>
			return keys;
    c5dc:	e7de      	b.n	c59c <bt_keys_get_addr+0xc>
    c5de:	bf00      	nop
    c5e0:	20000940 	.word	0x20000940

0000c5e4 <bt_keys_find>:
		}
	}
}

struct bt_keys *bt_keys_find(int type, const bt_addr_le_t *addr)
{
    c5e4:	b570      	push	{r4, r5, r6, lr}
    c5e6:	4605      	mov	r5, r0
    c5e8:	460e      	mov	r6, r1
	int i;

	BT_DBG("type %d %s", type, bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
    c5ea:	2400      	movs	r4, #0
    c5ec:	b10c      	cbz	r4, c5f2 <bt_keys_find+0xe>
		    !bt_addr_le_cmp(&key_pool[i].addr, addr)) {
			return &key_pool[i];
		}
	}

	return NULL;
    c5ee:	2000      	movs	r0, #0
}
    c5f0:	bd70      	pop	{r4, r5, r6, pc}
		if ((key_pool[i].keys & type) &&
    c5f2:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
    c5f6:	011a      	lsls	r2, r3, #4
    c5f8:	4b0b      	ldr	r3, [pc, #44]	; (c628 <bt_keys_find+0x44>)
    c5fa:	4413      	add	r3, r2
    c5fc:	899b      	ldrh	r3, [r3, #12]
    c5fe:	422b      	tst	r3, r5
    c600:	d101      	bne.n	c606 <bt_keys_find+0x22>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
    c602:	3401      	adds	r4, #1
    c604:	e7f2      	b.n	c5ec <bt_keys_find+0x8>
		    !bt_addr_le_cmp(&key_pool[i].addr, addr)) {
    c606:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
    c60a:	0113      	lsls	r3, r2, #4
	return memcmp(a, b, sizeof(*a));
    c60c:	2207      	movs	r2, #7
    c60e:	4631      	mov	r1, r6
    c610:	4805      	ldr	r0, [pc, #20]	; (c628 <bt_keys_find+0x44>)
    c612:	4418      	add	r0, r3
    c614:	f01e f9a2 	bl	2a95c <memcmp>
		if ((key_pool[i].keys & type) &&
    c618:	2800      	cmp	r0, #0
    c61a:	d1f2      	bne.n	c602 <bt_keys_find+0x1e>
			return &key_pool[i];
    c61c:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
    c620:	0123      	lsls	r3, r4, #4
    c622:	4801      	ldr	r0, [pc, #4]	; (c628 <bt_keys_find+0x44>)
    c624:	4418      	add	r0, r3
    c626:	bd70      	pop	{r4, r5, r6, pc}
    c628:	20000940 	.word	0x20000940

0000c62c <bt_keys_find_irk>:

	return keys;
}

struct bt_keys *bt_keys_find_irk(const bt_addr_le_t *addr)
{
    c62c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (addr->type != BT_ADDR_LE_RANDOM) {
    c62e:	7803      	ldrb	r3, [r0, #0]
    c630:	2b01      	cmp	r3, #1
    c632:	d004      	beq.n	c63e <bt_keys_find_irk+0x12>
		return false;
    c634:	2300      	movs	r3, #0
	int i;

	BT_DBG("%s", bt_addr_le_str(addr));

	if (!bt_addr_le_is_rpa(addr)) {
    c636:	b153      	cbz	r3, c64e <bt_keys_find_irk+0x22>
    c638:	4605      	mov	r5, r0
    c63a:	2400      	movs	r4, #0
    c63c:	e00a      	b.n	c654 <bt_keys_find_irk+0x28>
	return BT_ADDR_IS_RPA(&addr->a);
    c63e:	7983      	ldrb	r3, [r0, #6]
    c640:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    c644:	2b40      	cmp	r3, #64	; 0x40
    c646:	bf14      	ite	ne
    c648:	2300      	movne	r3, #0
    c64a:	2301      	moveq	r3, #1
    c64c:	e7f3      	b.n	c636 <bt_keys_find_irk+0xa>
		return NULL;
    c64e:	2000      	movs	r0, #0
    c650:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
    c652:	3401      	adds	r4, #1
    c654:	b9c4      	cbnz	r4, c688 <bt_keys_find_irk+0x5c>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
    c656:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
    c65a:	011a      	lsls	r2, r3, #4
    c65c:	4b1e      	ldr	r3, [pc, #120]	; (c6d8 <bt_keys_find_irk+0xac>)
    c65e:	4413      	add	r3, r2
    c660:	899b      	ldrh	r3, [r3, #12]
    c662:	f013 0f02 	tst.w	r3, #2
    c666:	d0f4      	beq.n	c652 <bt_keys_find_irk+0x26>
			continue;
		}

		if (!bt_addr_cmp(&addr->a, &key_pool[i].irk.rpa)) {
    c668:	4611      	mov	r1, r2
    c66a:	3140      	adds	r1, #64	; 0x40
	return memcmp(a, b, sizeof(*a));
    c66c:	2206      	movs	r2, #6
    c66e:	4b1a      	ldr	r3, [pc, #104]	; (c6d8 <bt_keys_find_irk+0xac>)
    c670:	4419      	add	r1, r3
    c672:	1c68      	adds	r0, r5, #1
    c674:	f01e f972 	bl	2a95c <memcmp>
    c678:	2800      	cmp	r0, #0
    c67a:	d1ea      	bne.n	c652 <bt_keys_find_irk+0x26>
			BT_DBG("cached RPA %s for %s",
			       bt_addr_str(&key_pool[i].irk.rpa),
			       bt_addr_le_str(&key_pool[i].addr));
			return &key_pool[i];
    c67c:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
    c680:	0123      	lsls	r3, r4, #4
    c682:	4815      	ldr	r0, [pc, #84]	; (c6d8 <bt_keys_find_irk+0xac>)
    c684:	4418      	add	r0, r3
    c686:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c688:	2400      	movs	r4, #0
    c68a:	e000      	b.n	c68e <bt_keys_find_irk+0x62>
		}
	}

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
    c68c:	3401      	adds	r4, #1
    c68e:	bb04      	cbnz	r4, c6d2 <bt_keys_find_irk+0xa6>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
    c690:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
    c694:	011a      	lsls	r2, r3, #4
    c696:	4b10      	ldr	r3, [pc, #64]	; (c6d8 <bt_keys_find_irk+0xac>)
    c698:	4413      	add	r3, r2
    c69a:	899b      	ldrh	r3, [r3, #12]
    c69c:	f013 0f02 	tst.w	r3, #2
    c6a0:	d0f4      	beq.n	c68c <bt_keys_find_irk+0x60>
			continue;
		}

		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
    c6a2:	4610      	mov	r0, r2
    c6a4:	3030      	adds	r0, #48	; 0x30
    c6a6:	1c6e      	adds	r6, r5, #1
    c6a8:	4631      	mov	r1, r6
    c6aa:	4b0b      	ldr	r3, [pc, #44]	; (c6d8 <bt_keys_find_irk+0xac>)
    c6ac:	4418      	add	r0, r3
    c6ae:	f7f7 f987 	bl	39c0 <bt_rpa_irk_matches>
    c6b2:	2800      	cmp	r0, #0
    c6b4:	d0ea      	beq.n	c68c <bt_keys_find_irk+0x60>
			BT_DBG("RPA %s matches %s",
			       bt_addr_str(&key_pool[i].irk.rpa),
			       bt_addr_le_str(&key_pool[i].addr));

			bt_addr_copy(&key_pool[i].irk.rpa, &addr->a);
    c6b6:	4d08      	ldr	r5, [pc, #32]	; (c6d8 <bt_keys_find_irk+0xac>)
    c6b8:	00e7      	lsls	r7, r4, #3
    c6ba:	193a      	adds	r2, r7, r4
    c6bc:	0113      	lsls	r3, r2, #4
    c6be:	3340      	adds	r3, #64	; 0x40
	memcpy(dst, src, sizeof(*dst));
    c6c0:	2206      	movs	r2, #6
    c6c2:	4631      	mov	r1, r6
    c6c4:	18e8      	adds	r0, r5, r3
    c6c6:	f7f3 fdfb 	bl	2c0 <memcpy>

			return &key_pool[i];
    c6ca:	443c      	add	r4, r7
    c6cc:	0120      	lsls	r0, r4, #4
    c6ce:	4428      	add	r0, r5
    c6d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
	}

	BT_DBG("No IRK for %s", bt_addr_le_str(addr));

	return NULL;
    c6d2:	2000      	movs	r0, #0
}
    c6d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c6d6:	bf00      	nop
    c6d8:	20000940 	.word	0x20000940

0000c6dc <bt_keys_find_addr>:

struct bt_keys *bt_keys_find_addr(const bt_addr_le_t *addr)
{
    c6dc:	b538      	push	{r3, r4, r5, lr}
    c6de:	4605      	mov	r5, r0
	int i;

	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
    c6e0:	2400      	movs	r4, #0
    c6e2:	b10c      	cbz	r4, c6e8 <bt_keys_find_addr+0xc>
		if (!bt_addr_le_cmp(&key_pool[i].addr, addr)) {
			return &key_pool[i];
		}
	}

	return NULL;
    c6e4:	2000      	movs	r0, #0
}
    c6e6:	bd38      	pop	{r3, r4, r5, pc}
		if (!bt_addr_le_cmp(&key_pool[i].addr, addr)) {
    c6e8:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
    c6ec:	0113      	lsls	r3, r2, #4
	return memcmp(a, b, sizeof(*a));
    c6ee:	2207      	movs	r2, #7
    c6f0:	4629      	mov	r1, r5
    c6f2:	4806      	ldr	r0, [pc, #24]	; (c70c <bt_keys_find_addr+0x30>)
    c6f4:	4418      	add	r0, r3
    c6f6:	f01e f931 	bl	2a95c <memcmp>
    c6fa:	b108      	cbz	r0, c700 <bt_keys_find_addr+0x24>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
    c6fc:	3401      	adds	r4, #1
    c6fe:	e7f0      	b.n	c6e2 <bt_keys_find_addr+0x6>
			return &key_pool[i];
    c700:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
    c704:	0123      	lsls	r3, r4, #4
    c706:	4801      	ldr	r0, [pc, #4]	; (c70c <bt_keys_find_addr+0x30>)
    c708:	4418      	add	r0, r3
    c70a:	bd38      	pop	{r3, r4, r5, pc}
    c70c:	20000940 	.word	0x20000940

0000c710 <bt_keys_add_type>:

void bt_keys_add_type(struct bt_keys *keys, int type)
{
	keys->keys |= type;
    c710:	8983      	ldrh	r3, [r0, #12]
    c712:	4319      	orrs	r1, r3
    c714:	8181      	strh	r1, [r0, #12]
    c716:	4770      	bx	lr

0000c718 <bt_keys_get_type>:
{
    c718:	b570      	push	{r4, r5, r6, lr}
    c71a:	4606      	mov	r6, r0
    c71c:	460d      	mov	r5, r1
	keys = bt_keys_find(type, addr);
    c71e:	f7ff ff61 	bl	c5e4 <bt_keys_find>
	if (keys) {
    c722:	4604      	mov	r4, r0
    c724:	b108      	cbz	r0, c72a <bt_keys_get_type+0x12>
}
    c726:	4620      	mov	r0, r4
    c728:	bd70      	pop	{r4, r5, r6, pc}
	keys = bt_keys_get_addr(addr);
    c72a:	4628      	mov	r0, r5
    c72c:	f7ff ff30 	bl	c590 <bt_keys_get_addr>
	if (!keys) {
    c730:	4604      	mov	r4, r0
    c732:	2800      	cmp	r0, #0
    c734:	d0f7      	beq.n	c726 <bt_keys_get_type+0xe>
	bt_keys_add_type(keys, type);
    c736:	4631      	mov	r1, r6
    c738:	f7ff ffea 	bl	c710 <bt_keys_add_type>
	return keys;
    c73c:	e7f3      	b.n	c726 <bt_keys_get_type+0xe>

0000c73e <bt_keys_clear>:
}

void bt_keys_clear(struct bt_keys *keys)
{
    c73e:	b508      	push	{r3, lr}
	BT_DBG("keys for %s", bt_addr_le_str(&keys->addr));

	memset(keys, 0, sizeof(*keys));
    c740:	2290      	movs	r2, #144	; 0x90
    c742:	2100      	movs	r1, #0
    c744:	f01e f99e 	bl	2aa84 <memset>
    c748:	bd08      	pop	{r3, pc}

0000c74a <status_cmd_handle>:
}
    c74a:	f06f 0015 	mvn.w	r0, #21
    c74e:	4770      	bx	lr

0000c750 <evt_create>:
{
    c750:	b538      	push	{r3, r4, r5, lr}
    c752:	460d      	mov	r5, r1
    c754:	4614      	mov	r4, r2
	hdr = net_buf_add(buf, sizeof(*hdr));
    c756:	2102      	movs	r1, #2
    c758:	3008      	adds	r0, #8
    c75a:	f00d fd1f 	bl	1a19c <net_buf_simple_add>
	hdr->evt = evt;
    c75e:	7005      	strb	r5, [r0, #0]
	hdr->len = len;
    c760:	7044      	strb	r4, [r0, #1]
    c762:	bd38      	pop	{r3, r4, r5, pc}

0000c764 <cmd_status>:
{
    c764:	b538      	push	{r3, r4, r5, lr}
    c766:	4605      	mov	r5, r0
	buf = bt_buf_get_cmd_complete(K_FOREVER);
    c768:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    c76c:	f7f9 fb5e 	bl	5e2c <bt_buf_get_cmd_complete>
    c770:	4604      	mov	r4, r0
	evt_create(buf, BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
    c772:	2204      	movs	r2, #4
    c774:	210f      	movs	r1, #15
    c776:	f7ff ffeb 	bl	c750 <evt_create>
	cs = net_buf_add(buf, sizeof(*cs));
    c77a:	2104      	movs	r1, #4
    c77c:	f104 0008 	add.w	r0, r4, #8
    c780:	f00d fd0c 	bl	1a19c <net_buf_simple_add>
	cs->status = status;
    c784:	7005      	strb	r5, [r0, #0]
	cs->ncmd = 1;
    c786:	2301      	movs	r3, #1
    c788:	7043      	strb	r3, [r0, #1]
	cs->opcode = sys_cpu_to_le16(_opcode);
    c78a:	4b02      	ldr	r3, [pc, #8]	; (c794 <cmd_status+0x30>)
    c78c:	881b      	ldrh	r3, [r3, #0]
    c78e:	8043      	strh	r3, [r0, #2]
}
    c790:	4620      	mov	r0, r4
    c792:	bd38      	pop	{r3, r4, r5, pc}
    c794:	200009d0 	.word	0x200009d0

0000c798 <disconnect>:
{
    c798:	b510      	push	{r4, lr}
    c79a:	460c      	mov	r4, r1
	struct bt_hci_cp_disconnect *cmd = (void *)buf->data;
    c79c:	6883      	ldr	r3, [r0, #8]
	status = ll_terminate_ind_send(handle, cmd->reason);
    c79e:	7899      	ldrb	r1, [r3, #2]
    c7a0:	8818      	ldrh	r0, [r3, #0]
    c7a2:	f00b f964 	bl	17a6e <ll_terminate_ind_send>
	*evt = cmd_status((!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED);
    c7a6:	b100      	cbz	r0, c7aa <disconnect+0x12>
    c7a8:	200c      	movs	r0, #12
    c7aa:	f7ff ffdb 	bl	c764 <cmd_status>
    c7ae:	6020      	str	r0, [r4, #0]
    c7b0:	bd10      	pop	{r4, pc}
	...

0000c7b4 <cmd_complete>:
{
    c7b4:	b538      	push	{r3, r4, r5, lr}
    c7b6:	4604      	mov	r4, r0
    c7b8:	460d      	mov	r5, r1
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    c7ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    c7be:	f7f9 fb35 	bl	5e2c <bt_buf_get_cmd_complete>
    c7c2:	6020      	str	r0, [r4, #0]
	evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
    c7c4:	1cea      	adds	r2, r5, #3
    c7c6:	b2d2      	uxtb	r2, r2
    c7c8:	210e      	movs	r1, #14
    c7ca:	f7ff ffc1 	bl	c750 <evt_create>
	cc = net_buf_add(*buf, sizeof(*cc));
    c7ce:	6820      	ldr	r0, [r4, #0]
    c7d0:	2103      	movs	r1, #3
    c7d2:	3008      	adds	r0, #8
    c7d4:	f00d fce2 	bl	1a19c <net_buf_simple_add>
	cc->ncmd = 1;
    c7d8:	2301      	movs	r3, #1
    c7da:	7003      	strb	r3, [r0, #0]
	cc->opcode = sys_cpu_to_le16(_opcode);
    c7dc:	4b04      	ldr	r3, [pc, #16]	; (c7f0 <cmd_complete+0x3c>)
    c7de:	881b      	ldrh	r3, [r3, #0]
    c7e0:	f8a0 3001 	strh.w	r3, [r0, #1]
	return net_buf_add(*buf, plen);
    c7e4:	6820      	ldr	r0, [r4, #0]
    c7e6:	4629      	mov	r1, r5
    c7e8:	3008      	adds	r0, #8
    c7ea:	f00d fcd7 	bl	1a19c <net_buf_simple_add>
}
    c7ee:	bd38      	pop	{r3, r4, r5, pc}
    c7f0:	200009d0 	.word	0x200009d0

0000c7f4 <set_event_mask_page_2>:
{
    c7f4:	b570      	push	{r4, r5, r6, lr}
    c7f6:	460e      	mov	r6, r1
	struct bt_hci_cp_set_event_mask_page_2 *cmd = (void *)buf->data;
    c7f8:	6883      	ldr	r3, [r0, #8]
	return ((u16_t)src[1] << 8) | src[0];
    c7fa:	79da      	ldrb	r2, [r3, #7]
    c7fc:	7999      	ldrb	r1, [r3, #6]
    c7fe:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
    c802:	7958      	ldrb	r0, [r3, #5]
    c804:	791a      	ldrb	r2, [r3, #4]
    c806:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    c80a:	2400      	movs	r4, #0
    c80c:	ea42 4501 	orr.w	r5, r2, r1, lsl #16
	return ((u16_t)src[1] << 8) | src[0];
    c810:	78d9      	ldrb	r1, [r3, #3]
    c812:	789a      	ldrb	r2, [r3, #2]
    c814:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    c818:	7859      	ldrb	r1, [r3, #1]
    c81a:	781b      	ldrb	r3, [r3, #0]
    c81c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	return ((u32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
    c820:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    c824:	ea44 0003 	orr.w	r0, r4, r3
    c828:	4629      	mov	r1, r5
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
    c82a:	4b04      	ldr	r3, [pc, #16]	; (c83c <set_event_mask_page_2+0x48>)
    c82c:	e9c3 0100 	strd	r0, r1, [r3]
	ccst = cmd_complete(evt, sizeof(*ccst));
    c830:	2101      	movs	r1, #1
    c832:	4630      	mov	r0, r6
    c834:	f7ff ffbe 	bl	c7b4 <cmd_complete>
	ccst->status = 0x00;
    c838:	7004      	strb	r4, [r0, #0]
    c83a:	bd70      	pop	{r4, r5, r6, pc}
    c83c:	20000a60 	.word	0x20000a60

0000c840 <read_local_version_info>:
{
    c840:	b508      	push	{r3, lr}
    c842:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    c844:	2109      	movs	r1, #9
    c846:	f7ff ffb5 	bl	c7b4 <cmd_complete>
	rp->status = 0x00;
    c84a:	2300      	movs	r3, #0
    c84c:	7003      	strb	r3, [r0, #0]
	rp->hci_version = BT_HCI_VERSION_5_0;
    c84e:	2209      	movs	r2, #9
    c850:	7042      	strb	r2, [r0, #1]
	rp->hci_revision = sys_cpu_to_le16(0);
    c852:	7083      	strb	r3, [r0, #2]
    c854:	70c3      	strb	r3, [r0, #3]
	rp->lmp_version = RADIO_BLE_VERSION_NUMBER;
    c856:	7102      	strb	r2, [r0, #4]
	rp->manufacturer = sys_cpu_to_le16(RADIO_BLE_COMPANY_ID);
    c858:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    c85c:	7143      	strb	r3, [r0, #5]
    c85e:	7183      	strb	r3, [r0, #6]
	rp->lmp_subversion = sys_cpu_to_le16(RADIO_BLE_SUB_VERSION_NUMBER);
    c860:	71c3      	strb	r3, [r0, #7]
    c862:	7203      	strb	r3, [r0, #8]
    c864:	bd08      	pop	{r3, pc}

0000c866 <le_read_buffer_size>:
{
    c866:	b508      	push	{r3, lr}
    c868:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    c86a:	2104      	movs	r1, #4
    c86c:	f7ff ffa2 	bl	c7b4 <cmd_complete>
	rp->status = 0x00;
    c870:	2300      	movs	r3, #0
    c872:	7003      	strb	r3, [r0, #0]
	rp->le_max_len = sys_cpu_to_le16(RADIO_PACKET_TX_DATA_SIZE);
    c874:	221b      	movs	r2, #27
    c876:	7042      	strb	r2, [r0, #1]
    c878:	7083      	strb	r3, [r0, #2]
	rp->le_max_num = RADIO_PACKET_COUNT_TX_MAX;
    c87a:	2302      	movs	r3, #2
    c87c:	70c3      	strb	r3, [r0, #3]
    c87e:	bd08      	pop	{r3, pc}

0000c880 <le_read_supp_states>:
{
    c880:	b508      	push	{r3, lr}
    c882:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    c884:	2109      	movs	r1, #9
    c886:	f7ff ff95 	bl	c7b4 <cmd_complete>
	rp->status = 0x00;
    c88a:	2200      	movs	r2, #0
    c88c:	7002      	strb	r2, [r0, #0]
	dst[0] = val;
    c88e:	23ff      	movs	r3, #255	; 0xff
    c890:	7043      	strb	r3, [r0, #1]
	dst[1] = val >> 8;
    c892:	7083      	strb	r3, [r0, #2]
	dst[0] = val;
    c894:	213f      	movs	r1, #63	; 0x3f
    c896:	70c1      	strb	r1, [r0, #3]
	dst[1] = val >> 8;
    c898:	7103      	strb	r3, [r0, #4]
	dst[0] = val;
    c89a:	7143      	strb	r3, [r0, #5]
	dst[1] = val >> 8;
    c89c:	2303      	movs	r3, #3
    c89e:	7183      	strb	r3, [r0, #6]
	dst[0] = val;
    c8a0:	71c2      	strb	r2, [r0, #7]
	dst[1] = val >> 8;
    c8a2:	7202      	strb	r2, [r0, #8]
    c8a4:	bd08      	pop	{r3, pc}

0000c8a6 <le_read_adv_chan_tx_power>:
{
    c8a6:	b508      	push	{r3, lr}
    c8a8:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    c8aa:	2102      	movs	r1, #2
    c8ac:	f7ff ff82 	bl	c7b4 <cmd_complete>
	rp->status = 0x00;
    c8b0:	2300      	movs	r3, #0
    c8b2:	7003      	strb	r3, [r0, #0]
	rp->tx_power_level = 0;
    c8b4:	7043      	strb	r3, [r0, #1]
    c8b6:	bd08      	pop	{r3, pc}

0000c8b8 <vs_read_version_info>:
{
    c8b8:	b508      	push	{r3, lr}
    c8ba:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    c8bc:	210d      	movs	r1, #13
    c8be:	f7ff ff79 	bl	c7b4 <cmd_complete>
	rp->status = 0x00;
    c8c2:	2300      	movs	r3, #0
    c8c4:	7003      	strb	r3, [r0, #0]
	rp->hw_platform = BT_HCI_VS_HW_PLAT;
    c8c6:	2202      	movs	r2, #2
    c8c8:	7042      	strb	r2, [r0, #1]
    c8ca:	7083      	strb	r3, [r0, #2]
	rp->hw_variant = BT_HCI_VS_HW_VAR;
    c8cc:	70c2      	strb	r2, [r0, #3]
    c8ce:	7103      	strb	r3, [r0, #4]
	rp->fw_variant = 0;
    c8d0:	7143      	strb	r3, [r0, #5]
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
    c8d2:	2201      	movs	r2, #1
    c8d4:	7182      	strb	r2, [r0, #6]
	rp->fw_revision = KERNEL_VERSION_MINOR;
    c8d6:	2209      	movs	r2, #9
    c8d8:	71c2      	strb	r2, [r0, #7]
    c8da:	7203      	strb	r3, [r0, #8]
	rp->fw_build = (KERNEL_PATCHLEVEL & 0xffff);
    c8dc:	2263      	movs	r2, #99	; 0x63
    c8de:	7242      	strb	r2, [r0, #9]
    c8e0:	7283      	strb	r3, [r0, #10]
    c8e2:	72c3      	strb	r3, [r0, #11]
    c8e4:	7303      	strb	r3, [r0, #12]
    c8e6:	bd08      	pop	{r3, pc}

0000c8e8 <meta_evt>:
{
    c8e8:	b570      	push	{r4, r5, r6, lr}
    c8ea:	4604      	mov	r4, r0
    c8ec:	460e      	mov	r6, r1
    c8ee:	4615      	mov	r5, r2
	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    c8f0:	3201      	adds	r2, #1
    c8f2:	b2d2      	uxtb	r2, r2
    c8f4:	213e      	movs	r1, #62	; 0x3e
    c8f6:	f7ff ff2b 	bl	c750 <evt_create>
	me = net_buf_add(buf, sizeof(*me));
    c8fa:	3408      	adds	r4, #8
    c8fc:	2101      	movs	r1, #1
    c8fe:	4620      	mov	r0, r4
    c900:	f00d fc4c 	bl	1a19c <net_buf_simple_add>
	me->subevent = subevt;
    c904:	7006      	strb	r6, [r0, #0]
	return net_buf_add(buf, melen);
    c906:	4629      	mov	r1, r5
    c908:	4620      	mov	r0, r4
    c90a:	f00d fc47 	bl	1a19c <net_buf_simple_add>
}
    c90e:	bd70      	pop	{r4, r5, r6, pc}

0000c910 <le_chan_sel_algo>:
{
    c910:	b538      	push	{r3, r4, r5, lr}
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    c912:	4b0f      	ldr	r3, [pc, #60]	; (c950 <le_chan_sel_algo+0x40>)
    c914:	e9d3 4500 	ldrd	r4, r5, [r3]
    c918:	2400      	movs	r4, #0
    c91a:	f005 5500 	and.w	r5, r5, #536870912	; 0x20000000
    c91e:	ea54 0305 	orrs.w	r3, r4, r5
    c922:	d008      	beq.n	c936 <le_chan_sel_algo+0x26>
	    !(le_event_mask & BT_EVT_MASK_LE_CHAN_SEL_ALGO)) {
    c924:	4b0b      	ldr	r3, [pc, #44]	; (c954 <le_chan_sel_algo+0x44>)
    c926:	e9d3 4500 	ldrd	r4, r5, [r3]
    c92a:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
    c92e:	2500      	movs	r5, #0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    c930:	ea54 0305 	orrs.w	r3, r4, r5
    c934:	d100      	bne.n	c938 <le_chan_sel_algo+0x28>
    c936:	bd38      	pop	{r3, r4, r5, pc}
    c938:	4613      	mov	r3, r2
    c93a:	460d      	mov	r5, r1
    c93c:	4604      	mov	r4, r0
	sep = meta_evt(buf, BT_HCI_EVT_LE_CHAN_SEL_ALGO, sizeof(*sep));
    c93e:	2203      	movs	r2, #3
    c940:	2114      	movs	r1, #20
    c942:	4618      	mov	r0, r3
    c944:	f7ff ffd0 	bl	c8e8 <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    c948:	8005      	strh	r5, [r0, #0]
	sep->chan_sel_algo = radio_le_chan_sel_algo->chan_sel_algo;
    c94a:	78e3      	ldrb	r3, [r4, #3]
    c94c:	7083      	strb	r3, [r0, #2]
    c94e:	e7f2      	b.n	c936 <le_chan_sel_algo+0x26>
    c950:	2000baf8 	.word	0x2000baf8
    c954:	2000bb00 	.word	0x2000bb00

0000c958 <disconn_complete>:
{
    c958:	b570      	push	{r4, r5, r6, lr}
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
    c95a:	4b11      	ldr	r3, [pc, #68]	; (c9a0 <disconn_complete+0x48>)
    c95c:	e9d3 4500 	ldrd	r4, r5, [r3]
    c960:	f004 0410 	and.w	r4, r4, #16
    c964:	2500      	movs	r5, #0
    c966:	ea54 0305 	orrs.w	r3, r4, r5
    c96a:	d100      	bne.n	c96e <disconn_complete+0x16>
    c96c:	bd70      	pop	{r4, r5, r6, pc}
    c96e:	4614      	mov	r4, r2
    c970:	460e      	mov	r6, r1
    c972:	4605      	mov	r5, r0
	evt_create(buf, BT_HCI_EVT_DISCONN_COMPLETE, sizeof(*ep));
    c974:	2204      	movs	r2, #4
    c976:	2105      	movs	r1, #5
    c978:	4620      	mov	r0, r4
    c97a:	f7ff fee9 	bl	c750 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    c97e:	2104      	movs	r1, #4
    c980:	f104 0008 	add.w	r0, r4, #8
    c984:	f00d fc0a 	bl	1a19c <net_buf_simple_add>
	ep->status = 0x00;
    c988:	2300      	movs	r3, #0
    c98a:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    c98c:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->reason = *((u8_t *)pdu_data);
    c990:	782b      	ldrb	r3, [r5, #0]
    c992:	70c3      	strb	r3, [r0, #3]
	conn_count--;
    c994:	4a03      	ldr	r2, [pc, #12]	; (c9a4 <disconn_complete+0x4c>)
    c996:	6813      	ldr	r3, [r2, #0]
    c998:	3b01      	subs	r3, #1
    c99a:	6013      	str	r3, [r2, #0]
    c99c:	e7e6      	b.n	c96c <disconn_complete+0x14>
    c99e:	bf00      	nop
    c9a0:	2000baf8 	.word	0x2000baf8
    c9a4:	200009d4 	.word	0x200009d4

0000c9a8 <enc_refresh_complete>:
{
    c9a8:	b538      	push	{r3, r4, r5, lr}
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE)) {
    c9aa:	4b0d      	ldr	r3, [pc, #52]	; (c9e0 <enc_refresh_complete+0x38>)
    c9ac:	e9d3 4500 	ldrd	r4, r5, [r3]
    c9b0:	2400      	movs	r4, #0
    c9b2:	f405 4500 	and.w	r5, r5, #32768	; 0x8000
    c9b6:	ea54 0305 	orrs.w	r3, r4, r5
    c9ba:	d100      	bne.n	c9be <enc_refresh_complete+0x16>
    c9bc:	bd38      	pop	{r3, r4, r5, pc}
    c9be:	4614      	mov	r4, r2
    c9c0:	460d      	mov	r5, r1
	evt_create(buf, BT_HCI_EVT_ENCRYPT_KEY_REFRESH_COMPLETE, sizeof(*ep));
    c9c2:	2203      	movs	r2, #3
    c9c4:	2130      	movs	r1, #48	; 0x30
    c9c6:	4620      	mov	r0, r4
    c9c8:	f7ff fec2 	bl	c750 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    c9cc:	2103      	movs	r1, #3
    c9ce:	f104 0008 	add.w	r0, r4, #8
    c9d2:	f00d fbe3 	bl	1a19c <net_buf_simple_add>
	ep->status = 0x00;
    c9d6:	2300      	movs	r3, #0
    c9d8:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    c9da:	f8a0 5001 	strh.w	r5, [r0, #1]
    c9de:	e7ed      	b.n	c9bc <enc_refresh_complete+0x14>
    c9e0:	2000baf8 	.word	0x2000baf8

0000c9e4 <auth_payload_timeout_exp>:
{
    c9e4:	b538      	push	{r3, r4, r5, lr}
	if (!(event_mask_page_2 & BT_EVT_MASK_AUTH_PAYLOAD_TIMEOUT_EXP)) {
    c9e6:	4b0c      	ldr	r3, [pc, #48]	; (ca18 <auth_payload_timeout_exp+0x34>)
    c9e8:	e9d3 4500 	ldrd	r4, r5, [r3]
    c9ec:	f404 0400 	and.w	r4, r4, #8388608	; 0x800000
    c9f0:	2500      	movs	r5, #0
    c9f2:	ea54 0305 	orrs.w	r3, r4, r5
    c9f6:	d100      	bne.n	c9fa <auth_payload_timeout_exp+0x16>
    c9f8:	bd38      	pop	{r3, r4, r5, pc}
    c9fa:	4614      	mov	r4, r2
    c9fc:	460d      	mov	r5, r1
	evt_create(buf, BT_HCI_EVT_AUTH_PAYLOAD_TIMEOUT_EXP, sizeof(*ep));
    c9fe:	2202      	movs	r2, #2
    ca00:	2157      	movs	r1, #87	; 0x57
    ca02:	4620      	mov	r0, r4
    ca04:	f7ff fea4 	bl	c750 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    ca08:	2102      	movs	r1, #2
    ca0a:	f104 0008 	add.w	r0, r4, #8
    ca0e:	f00d fbc5 	bl	1a19c <net_buf_simple_add>
	ep->handle = sys_cpu_to_le16(handle);
    ca12:	8005      	strh	r5, [r0, #0]
    ca14:	e7f0      	b.n	c9f8 <auth_payload_timeout_exp+0x14>
    ca16:	bf00      	nop
    ca18:	20000a60 	.word	0x20000a60

0000ca1c <remote_version_info>:
{
    ca1c:	b570      	push	{r4, r5, r6, lr}
	if (!(event_mask & BT_EVT_MASK_REMOTE_VERSION_INFO)) {
    ca1e:	4b11      	ldr	r3, [pc, #68]	; (ca64 <remote_version_info+0x48>)
    ca20:	e9d3 4500 	ldrd	r4, r5, [r3]
    ca24:	f404 6400 	and.w	r4, r4, #2048	; 0x800
    ca28:	2500      	movs	r5, #0
    ca2a:	ea54 0305 	orrs.w	r3, r4, r5
    ca2e:	d100      	bne.n	ca32 <remote_version_info+0x16>
    ca30:	bd70      	pop	{r4, r5, r6, pc}
    ca32:	4615      	mov	r5, r2
    ca34:	460e      	mov	r6, r1
    ca36:	4604      	mov	r4, r0
	evt_create(buf, BT_HCI_EVT_REMOTE_VERSION_INFO, sizeof(*ep));
    ca38:	2208      	movs	r2, #8
    ca3a:	210c      	movs	r1, #12
    ca3c:	4628      	mov	r0, r5
    ca3e:	f7ff fe87 	bl	c750 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    ca42:	2108      	movs	r1, #8
    ca44:	1868      	adds	r0, r5, r1
    ca46:	f00d fba9 	bl	1a19c <net_buf_simple_add>
	ep->status = 0x00;
    ca4a:	2300      	movs	r3, #0
    ca4c:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    ca4e:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->version = ver_ind->version_number;
    ca52:	7923      	ldrb	r3, [r4, #4]
    ca54:	70c3      	strb	r3, [r0, #3]
	ep->manufacturer = sys_cpu_to_le16(ver_ind->company_id);
    ca56:	f8b4 3005 	ldrh.w	r3, [r4, #5]
    ca5a:	8083      	strh	r3, [r0, #4]
	ep->subversion = sys_cpu_to_le16(ver_ind->sub_version_number);
    ca5c:	f8b4 3007 	ldrh.w	r3, [r4, #7]
    ca60:	80c3      	strh	r3, [r0, #6]
    ca62:	e7e5      	b.n	ca30 <remote_version_info+0x14>
    ca64:	2000baf8 	.word	0x2000baf8

0000ca68 <encrypt_change>:
{
    ca68:	b570      	push	{r4, r5, r6, lr}
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    ca6a:	4b0f      	ldr	r3, [pc, #60]	; (caa8 <encrypt_change+0x40>)
    ca6c:	e9d3 4500 	ldrd	r4, r5, [r3]
    ca70:	f004 0480 	and.w	r4, r4, #128	; 0x80
    ca74:	2500      	movs	r5, #0
    ca76:	ea54 0305 	orrs.w	r3, r4, r5
    ca7a:	d100      	bne.n	ca7e <encrypt_change+0x16>
    ca7c:	bd70      	pop	{r4, r5, r6, pc}
    ca7e:	4615      	mov	r5, r2
    ca80:	460e      	mov	r6, r1
    ca82:	4604      	mov	r4, r0
	evt_create(buf, BT_HCI_EVT_ENCRYPT_CHANGE, sizeof(*ep));
    ca84:	2204      	movs	r2, #4
    ca86:	2108      	movs	r1, #8
    ca88:	4628      	mov	r0, r5
    ca8a:	f7ff fe61 	bl	c750 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    ca8e:	2104      	movs	r1, #4
    ca90:	f105 0008 	add.w	r0, r5, #8
    ca94:	f00d fb82 	bl	1a19c <net_buf_simple_add>
	ep->status = err;
    ca98:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    ca9a:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->encrypt = !err ? 1 : 0;
    ca9e:	fab4 f384 	clz	r3, r4
    caa2:	095b      	lsrs	r3, r3, #5
    caa4:	70c3      	strb	r3, [r0, #3]
    caa6:	e7e9      	b.n	ca7c <encrypt_change+0x14>
    caa8:	2000baf8 	.word	0x2000baf8

0000caac <read_remote_ver_info>:
{
    caac:	b510      	push	{r4, lr}
    caae:	460c      	mov	r4, r1
	struct bt_hci_cp_read_remote_version_info *cmd = (void *)buf->data;
    cab0:	6883      	ldr	r3, [r0, #8]
	status = ll_version_ind_send(handle);
    cab2:	8818      	ldrh	r0, [r3, #0]
    cab4:	f00a ffc5 	bl	17a42 <ll_version_ind_send>
	*evt = cmd_status((!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED);
    cab8:	b100      	cbz	r0, cabc <read_remote_ver_info+0x10>
    caba:	200c      	movs	r0, #12
    cabc:	f7ff fe52 	bl	c764 <cmd_status>
    cac0:	6020      	str	r0, [r4, #0]
    cac2:	bd10      	pop	{r4, pc}

0000cac4 <link_control_cmd_handle>:
{
    cac4:	b508      	push	{r3, lr}
    cac6:	460b      	mov	r3, r1
	switch (ocf) {
    cac8:	2806      	cmp	r0, #6
    caca:	d004      	beq.n	cad6 <link_control_cmd_handle+0x12>
    cacc:	281d      	cmp	r0, #29
    cace:	d008      	beq.n	cae2 <link_control_cmd_handle+0x1e>
		return -EINVAL;
    cad0:	f06f 0015 	mvn.w	r0, #21
}
    cad4:	bd08      	pop	{r3, pc}
		disconnect(cmd, evt);
    cad6:	4611      	mov	r1, r2
    cad8:	4618      	mov	r0, r3
    cada:	f7ff fe5d 	bl	c798 <disconnect>
	return 0;
    cade:	2000      	movs	r0, #0
		break;
    cae0:	bd08      	pop	{r3, pc}
		read_remote_ver_info(cmd, evt);
    cae2:	4611      	mov	r1, r2
    cae4:	4618      	mov	r0, r3
    cae6:	f7ff ffe1 	bl	caac <read_remote_ver_info>
	return 0;
    caea:	2000      	movs	r0, #0
		break;
    caec:	bd08      	pop	{r3, pc}
	...

0000caf0 <reset>:
{
    caf0:	b538      	push	{r3, r4, r5, lr}
	dup_count = -1;
    caf2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    caf6:	4b0f      	ldr	r3, [pc, #60]	; (cb34 <reset+0x44>)
    caf8:	601a      	str	r2, [r3, #0]
	event_mask = DEFAULT_EVENT_MASK;
    cafa:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    cafe:	f641 75ff 	movw	r5, #8191	; 0x1fff
    cb02:	4b0d      	ldr	r3, [pc, #52]	; (cb38 <reset+0x48>)
    cb04:	e9c3 4500 	strd	r4, r5, [r3]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    cb08:	2400      	movs	r4, #0
    cb0a:	2500      	movs	r5, #0
    cb0c:	4b0b      	ldr	r3, [pc, #44]	; (cb3c <reset+0x4c>)
    cb0e:	e9c3 4500 	strd	r4, r5, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    cb12:	241f      	movs	r4, #31
    cb14:	2500      	movs	r5, #0
    cb16:	4b0a      	ldr	r3, [pc, #40]	; (cb40 <reset+0x50>)
    cb18:	e9c3 4500 	strd	r4, r5, [r3]
	if (buf) {
    cb1c:	b140      	cbz	r0, cb30 <reset+0x40>
    cb1e:	460c      	mov	r4, r1
		ll_reset();
    cb20:	f00a fc8a 	bl	17438 <ll_reset>
		ccst = cmd_complete(evt, sizeof(*ccst));
    cb24:	2101      	movs	r1, #1
    cb26:	4620      	mov	r0, r4
    cb28:	f7ff fe44 	bl	c7b4 <cmd_complete>
		ccst->status = 0x00;
    cb2c:	2300      	movs	r3, #0
    cb2e:	7003      	strb	r3, [r0, #0]
    cb30:	bd38      	pop	{r3, r4, r5, pc}
    cb32:	bf00      	nop
    cb34:	200009d8 	.word	0x200009d8
    cb38:	2000baf8 	.word	0x2000baf8
    cb3c:	20000a60 	.word	0x20000a60
    cb40:	2000bb00 	.word	0x2000bb00

0000cb44 <read_tx_power_level>:
{
    cb44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cb46:	460a      	mov	r2, r1
	struct bt_hci_cp_read_tx_power_level *cmd = (void *)buf->data;
    cb48:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    cb4a:	881d      	ldrh	r5, [r3, #0]
    cb4c:	b2ae      	uxth	r6, r5
	type = cmd->type;
    cb4e:	789f      	ldrb	r7, [r3, #2]
	rp = cmd_complete(evt, sizeof(*rp));
    cb50:	2104      	movs	r1, #4
    cb52:	4610      	mov	r0, r2
    cb54:	f7ff fe2e 	bl	c7b4 <cmd_complete>
    cb58:	4604      	mov	r4, r0
	status = ll_tx_power_level_get(handle, type, &rp->tx_power_level);
    cb5a:	1cc2      	adds	r2, r0, #3
    cb5c:	4639      	mov	r1, r7
    cb5e:	4630      	mov	r0, r6
    cb60:	f00a ff9b 	bl	17a9a <ll_tx_power_level_get>
	rp->status = (!status) ? 0x00 : BT_HCI_ERR_UNKNOWN_CONN_ID;
    cb64:	b120      	cbz	r0, cb70 <read_tx_power_level+0x2c>
    cb66:	2302      	movs	r3, #2
    cb68:	7023      	strb	r3, [r4, #0]
	rp->handle = sys_cpu_to_le16(handle);
    cb6a:	f8a4 5001 	strh.w	r5, [r4, #1]
    cb6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	rp->status = (!status) ? 0x00 : BT_HCI_ERR_UNKNOWN_CONN_ID;
    cb70:	2300      	movs	r3, #0
    cb72:	e7f9      	b.n	cb68 <read_tx_power_level+0x24>

0000cb74 <read_auth_payload_timeout>:
{
    cb74:	b570      	push	{r4, r5, r6, lr}
    cb76:	b082      	sub	sp, #8
    cb78:	460e      	mov	r6, r1
	struct bt_hci_cp_read_auth_payload_timeout *cmd = (void *)buf->data;
    cb7a:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    cb7c:	881c      	ldrh	r4, [r3, #0]
	status = ll_apto_get(handle, &auth_payload_timeout);
    cb7e:	f10d 0106 	add.w	r1, sp, #6
    cb82:	b2a0      	uxth	r0, r4
    cb84:	f00a ff98 	bl	17ab8 <ll_apto_get>
    cb88:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    cb8a:	2105      	movs	r1, #5
    cb8c:	4630      	mov	r0, r6
    cb8e:	f7ff fe11 	bl	c7b4 <cmd_complete>
	rp->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    cb92:	b14d      	cbz	r5, cba8 <read_auth_payload_timeout+0x34>
    cb94:	230c      	movs	r3, #12
    cb96:	7003      	strb	r3, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    cb98:	f8a0 4001 	strh.w	r4, [r0, #1]
	rp->auth_payload_timeout = sys_cpu_to_le16(auth_payload_timeout);
    cb9c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    cba0:	f8a0 3003 	strh.w	r3, [r0, #3]
}
    cba4:	b002      	add	sp, #8
    cba6:	bd70      	pop	{r4, r5, r6, pc}
	rp->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    cba8:	2300      	movs	r3, #0
    cbaa:	e7f4      	b.n	cb96 <read_auth_payload_timeout+0x22>

0000cbac <write_auth_payload_timeout>:
{
    cbac:	b570      	push	{r4, r5, r6, lr}
    cbae:	460e      	mov	r6, r1
	struct bt_hci_cp_write_auth_payload_timeout *cmd = (void *)buf->data;
    cbb0:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    cbb2:	881c      	ldrh	r4, [r3, #0]
	status = ll_apto_set(handle, auth_payload_timeout);
    cbb4:	8859      	ldrh	r1, [r3, #2]
    cbb6:	b2a0      	uxth	r0, r4
    cbb8:	f00a ff9a 	bl	17af0 <ll_apto_set>
    cbbc:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    cbbe:	2103      	movs	r1, #3
    cbc0:	4630      	mov	r0, r6
    cbc2:	f7ff fdf7 	bl	c7b4 <cmd_complete>
	rp->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    cbc6:	b125      	cbz	r5, cbd2 <write_auth_payload_timeout+0x26>
    cbc8:	230c      	movs	r3, #12
    cbca:	7003      	strb	r3, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    cbcc:	f8a0 4001 	strh.w	r4, [r0, #1]
    cbd0:	bd70      	pop	{r4, r5, r6, pc}
	rp->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    cbd2:	2300      	movs	r3, #0
    cbd4:	e7f9      	b.n	cbca <write_auth_payload_timeout+0x1e>

0000cbd6 <ctrl_bb_cmd_handle>:
{
    cbd6:	b508      	push	{r3, lr}
    cbd8:	460b      	mov	r3, r1
	switch (ocf) {
    cbda:	282d      	cmp	r0, #45	; 0x2d
    cbdc:	d01f      	beq.n	cc1e <ctrl_bb_cmd_handle+0x48>
    cbde:	d908      	bls.n	cbf2 <ctrl_bb_cmd_handle+0x1c>
    cbe0:	287b      	cmp	r0, #123	; 0x7b
    cbe2:	d022      	beq.n	cc2a <ctrl_bb_cmd_handle+0x54>
    cbe4:	287c      	cmp	r0, #124	; 0x7c
    cbe6:	d026      	beq.n	cc36 <ctrl_bb_cmd_handle+0x60>
    cbe8:	2863      	cmp	r0, #99	; 0x63
    cbea:	d012      	beq.n	cc12 <ctrl_bb_cmd_handle+0x3c>
		return -EINVAL;
    cbec:	f06f 0015 	mvn.w	r0, #21
}
    cbf0:	bd08      	pop	{r3, pc}
	switch (ocf) {
    cbf2:	2801      	cmp	r0, #1
    cbf4:	d007      	beq.n	cc06 <ctrl_bb_cmd_handle+0x30>
    cbf6:	2803      	cmp	r0, #3
    cbf8:	d1f8      	bne.n	cbec <ctrl_bb_cmd_handle+0x16>
		reset(cmd, evt);
    cbfa:	4611      	mov	r1, r2
    cbfc:	4618      	mov	r0, r3
    cbfe:	f7ff ff77 	bl	caf0 <reset>
	return 0;
    cc02:	2000      	movs	r0, #0
		break;
    cc04:	bd08      	pop	{r3, pc}
		set_event_mask(cmd, evt);
    cc06:	4611      	mov	r1, r2
    cc08:	4618      	mov	r0, r3
    cc0a:	f7f7 fd13 	bl	4634 <set_event_mask>
	return 0;
    cc0e:	2000      	movs	r0, #0
		break;
    cc10:	bd08      	pop	{r3, pc}
		set_event_mask_page_2(cmd, evt);
    cc12:	4611      	mov	r1, r2
    cc14:	4618      	mov	r0, r3
    cc16:	f7ff fded 	bl	c7f4 <set_event_mask_page_2>
	return 0;
    cc1a:	2000      	movs	r0, #0
		break;
    cc1c:	bd08      	pop	{r3, pc}
		read_tx_power_level(cmd, evt);
    cc1e:	4611      	mov	r1, r2
    cc20:	4618      	mov	r0, r3
    cc22:	f7ff ff8f 	bl	cb44 <read_tx_power_level>
	return 0;
    cc26:	2000      	movs	r0, #0
		break;
    cc28:	bd08      	pop	{r3, pc}
		read_auth_payload_timeout(cmd, evt);
    cc2a:	4611      	mov	r1, r2
    cc2c:	4618      	mov	r0, r3
    cc2e:	f7ff ffa1 	bl	cb74 <read_auth_payload_timeout>
	return 0;
    cc32:	2000      	movs	r0, #0
		break;
    cc34:	bd08      	pop	{r3, pc}
		write_auth_payload_timeout(cmd, evt);
    cc36:	4611      	mov	r1, r2
    cc38:	4618      	mov	r0, r3
    cc3a:	f7ff ffb7 	bl	cbac <write_auth_payload_timeout>
	return 0;
    cc3e:	2000      	movs	r0, #0
		break;
    cc40:	bd08      	pop	{r3, pc}

0000cc42 <read_supported_commands>:
{
    cc42:	b510      	push	{r4, lr}
    cc44:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    cc46:	2141      	movs	r1, #65	; 0x41
    cc48:	f7ff fdb4 	bl	c7b4 <cmd_complete>
    cc4c:	4604      	mov	r4, r0
	rp->status = 0x00;
    cc4e:	2100      	movs	r1, #0
    cc50:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    cc54:	2240      	movs	r2, #64	; 0x40
    cc56:	f01d ff15 	bl	2aa84 <memset>
	rp->commands[2] |= BIT(7);
    cc5a:	78e3      	ldrb	r3, [r4, #3]
    cc5c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    cc60:	70e3      	strb	r3, [r4, #3]
	rp->commands[5] |= BIT(6) | BIT(7);
    cc62:	79a3      	ldrb	r3, [r4, #6]
    cc64:	f063 033f 	orn	r3, r3, #63	; 0x3f
    cc68:	71a3      	strb	r3, [r4, #6]
	rp->commands[10] |= BIT(2);
    cc6a:	7ae3      	ldrb	r3, [r4, #11]
    cc6c:	f043 0304 	orr.w	r3, r3, #4
    cc70:	72e3      	strb	r3, [r4, #11]
	rp->commands[14] |= BIT(3) | BIT(5);
    cc72:	7be3      	ldrb	r3, [r4, #15]
    cc74:	f043 0328 	orr.w	r3, r3, #40	; 0x28
    cc78:	73e3      	strb	r3, [r4, #15]
	rp->commands[15] |= BIT(1);
    cc7a:	7c23      	ldrb	r3, [r4, #16]
    cc7c:	f043 0302 	orr.w	r3, r3, #2
    cc80:	7423      	strb	r3, [r4, #16]
	rp->commands[22] |= BIT(2);
    cc82:	7de3      	ldrb	r3, [r4, #23]
    cc84:	f043 0304 	orr.w	r3, r3, #4
    cc88:	75e3      	strb	r3, [r4, #23]
	rp->commands[25] |= BIT(0) | BIT(1) | BIT(2) | BIT(4);
    cc8a:	7ea2      	ldrb	r2, [r4, #26]
	rp->commands[28] |= BIT(3);
    cc8c:	7f63      	ldrb	r3, [r4, #29]
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
    cc8e:	f062 0208 	orn	r2, r2, #8
    cc92:	76a2      	strb	r2, [r4, #26]
	rp->commands[26] |= BIT(4) | BIT(5);
    cc94:	22ff      	movs	r2, #255	; 0xff
    cc96:	76e2      	strb	r2, [r4, #27]
	rp->commands[28] |= BIT(1) | BIT(2);
    cc98:	f043 030f 	orr.w	r3, r3, #15
    cc9c:	7763      	strb	r3, [r4, #29]
	rp->commands[0] |= BIT(5);
    cc9e:	7863      	ldrb	r3, [r4, #1]
    cca0:	f043 0320 	orr.w	r3, r3, #32
    cca4:	7063      	strb	r3, [r4, #1]
	rp->commands[27] |= BIT(2) | BIT(4) | BIT(5);
    cca6:	7722      	strb	r2, [r4, #28]
	rp->commands[33] |= BIT(4) | BIT(5);
    cca8:	f894 1022 	ldrb.w	r1, [r4, #34]	; 0x22
	rp->commands[32] |= BIT(4) | BIT(5);
    ccac:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
    ccb0:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    ccb4:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    ccb8:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
    ccbc:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
	rp->commands[39] |= BIT(2);
    ccc0:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
    ccc4:	f040 0004 	orr.w	r0, r0, #4
    ccc8:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
	rp->commands[33] |= BIT(6) | BIT(7);
    cccc:	f061 010f 	orn	r1, r1, #15
    ccd0:	f884 1022 	strb.w	r1, [r4, #34]	; 0x22
	rp->commands[34] |= BIT(0);
    ccd4:	f042 02f9 	orr.w	r2, r2, #249	; 0xf9
    ccd8:	f884 2023 	strb.w	r2, [r4, #35]	; 0x23
	rp->commands[35] |= BIT(3);
    ccdc:	f043 030f 	orr.w	r3, r3, #15
    cce0:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	rp->commands[38] |= BIT(7);
    cce4:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
    cce8:	f063 037f 	orn	r3, r3, #127	; 0x7f
    ccec:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
    ccf0:	bd10      	pop	{r4, pc}

0000ccf2 <read_local_features>:
{
    ccf2:	b510      	push	{r4, lr}
    ccf4:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    ccf6:	2109      	movs	r1, #9
    ccf8:	f7ff fd5c 	bl	c7b4 <cmd_complete>
    ccfc:	4604      	mov	r4, r0
	rp->status = 0x00;
    ccfe:	2100      	movs	r1, #0
    cd00:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    cd04:	2208      	movs	r2, #8
    cd06:	f01d febd 	bl	2aa84 <memset>
	rp->features[4] = (1 << 5) | (1 << 6);
    cd0a:	2360      	movs	r3, #96	; 0x60
    cd0c:	7163      	strb	r3, [r4, #5]
    cd0e:	bd10      	pop	{r4, pc}

0000cd10 <le_read_local_features>:
{
    cd10:	b510      	push	{r4, lr}
    cd12:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    cd14:	2109      	movs	r1, #9
    cd16:	f7ff fd4d 	bl	c7b4 <cmd_complete>
    cd1a:	4604      	mov	r4, r0
	rp->status = 0x00;
    cd1c:	2100      	movs	r1, #0
    cd1e:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    cd22:	2208      	movs	r2, #8
    cd24:	f01d feae 	bl	2aa84 <memset>
	rp->features[0] = RADIO_BLE_FEAT & 0xFF;
    cd28:	23ff      	movs	r3, #255	; 0xff
    cd2a:	7063      	strb	r3, [r4, #1]
	rp->features[1] = (RADIO_BLE_FEAT >> 8)  & 0xFF;
    cd2c:	2341      	movs	r3, #65	; 0x41
    cd2e:	70a3      	strb	r3, [r4, #2]
	rp->features[2] = (RADIO_BLE_FEAT >> 16)  & 0xFF;
    cd30:	2301      	movs	r3, #1
    cd32:	70e3      	strb	r3, [r4, #3]
    cd34:	bd10      	pop	{r4, pc}

0000cd36 <vs_read_supported_commands>:
{
    cd36:	b510      	push	{r4, lr}
    cd38:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    cd3a:	2141      	movs	r1, #65	; 0x41
    cd3c:	f7ff fd3a 	bl	c7b4 <cmd_complete>
    cd40:	4604      	mov	r4, r0
	rp->status = 0x00;
    cd42:	2100      	movs	r1, #0
    cd44:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    cd48:	2240      	movs	r2, #64	; 0x40
    cd4a:	f01d fe9b 	bl	2aa84 <memset>
	rp->commands[0] |= BIT(0) | BIT(1) | BIT(2);
    cd4e:	7863      	ldrb	r3, [r4, #1]
	rp->commands[0] |= BIT(5) | BIT(7);
    cd50:	f063 0358 	orn	r3, r3, #88	; 0x58
    cd54:	7063      	strb	r3, [r4, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
    cd56:	78a3      	ldrb	r3, [r4, #2]
    cd58:	f043 0303 	orr.w	r3, r3, #3
    cd5c:	70a3      	strb	r3, [r4, #2]
    cd5e:	bd10      	pop	{r4, pc}

0000cd60 <vs_read_supported_features>:
{
    cd60:	b508      	push	{r3, lr}
    cd62:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    cd64:	2109      	movs	r1, #9
    cd66:	f7ff fd25 	bl	c7b4 <cmd_complete>
	rp->status = 0x00;
    cd6a:	2100      	movs	r1, #0
    cd6c:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    cd70:	2208      	movs	r2, #8
    cd72:	f01d fe87 	bl	2aa84 <memset>
    cd76:	bd08      	pop	{r3, pc}

0000cd78 <vs_read_static_addrs>:
{
    cd78:	b510      	push	{r4, lr}
    cd7a:	4608      	mov	r0, r1
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    cd7c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    cd80:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    cd84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    cd88:	d00d      	beq.n	cda6 <vs_read_static_addrs+0x2e>
	      (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
    cd8a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    cd8e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    cd92:	f013 0f01 	tst.w	r3, #1
    cd96:	d110      	bne.n	cdba <vs_read_static_addrs+0x42>
	rp = cmd_complete(evt, sizeof(*rp));
    cd98:	2102      	movs	r1, #2
    cd9a:	f7ff fd0b 	bl	c7b4 <cmd_complete>
	rp->status = 0x00;
    cd9e:	2300      	movs	r3, #0
    cda0:	7003      	strb	r3, [r0, #0]
	rp->num_addrs = 0;
    cda2:	7043      	strb	r3, [r0, #1]
    cda4:	bd10      	pop	{r4, pc}
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    cda6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    cdaa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
    cdae:	b29b      	uxth	r3, r3
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    cdb0:	f64f 72ff 	movw	r2, #65535	; 0xffff
    cdb4:	4293      	cmp	r3, r2
    cdb6:	d1e8      	bne.n	cd8a <vs_read_static_addrs+0x12>
    cdb8:	e7ee      	b.n	cd98 <vs_read_static_addrs+0x20>
		rp = cmd_complete(evt, sizeof(*rp) + sizeof(*addr));
    cdba:	2118      	movs	r1, #24
    cdbc:	f7ff fcfa 	bl	c7b4 <cmd_complete>
		rp->status = 0x00;
    cdc0:	2100      	movs	r1, #0
    cdc2:	7001      	strb	r1, [r0, #0]
		rp->num_addrs = 1;
    cdc4:	2301      	movs	r3, #1
    cdc6:	7043      	strb	r3, [r0, #1]
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &addr->bdaddr.val[0]);
    cdc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    cdcc:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
	dst[0] = val;
    cdd0:	7083      	strb	r3, [r0, #2]
	dst[1] = val >> 8;
    cdd2:	f3c3 2407 	ubfx	r4, r3, #8, #8
    cdd6:	70c4      	strb	r4, [r0, #3]
	sys_put_le16(val >> 16, &dst[2]);
    cdd8:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    cdda:	7103      	strb	r3, [r0, #4]
	dst[1] = val >> 8;
    cddc:	0a1b      	lsrs	r3, r3, #8
    cdde:	7143      	strb	r3, [r0, #5]
		sys_put_le16(NRF_FICR->DEVICEADDR[1] | 0x0200, &addr->bdaddr.val[4]);
    cde0:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
    cde4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    cde8:	b29b      	uxth	r3, r3
	dst[0] = val;
    cdea:	7183      	strb	r3, [r0, #6]
	dst[1] = val >> 8;
    cdec:	0a1b      	lsrs	r3, r3, #8
		BT_ADDR_SET_STATIC(&addr->bdaddr);
    cdee:	f063 033f 	orn	r3, r3, #63	; 0x3f
    cdf2:	71c3      	strb	r3, [r0, #7]
		memset(addr->ir, 0x00, sizeof(addr->ir));
    cdf4:	2210      	movs	r2, #16
    cdf6:	3008      	adds	r0, #8
    cdf8:	f01d fe44 	bl	2aa84 <memset>
		return;
    cdfc:	bd10      	pop	{r4, pc}

0000cdfe <vs_read_key_hierarchy_roots>:
{
    cdfe:	b510      	push	{r4, lr}
    ce00:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    ce02:	2121      	movs	r1, #33	; 0x21
    ce04:	f7ff fcd6 	bl	c7b4 <cmd_complete>
    ce08:	4604      	mov	r4, r0
	rp->status = 0x00;
    ce0a:	2300      	movs	r3, #0
    ce0c:	7003      	strb	r3, [r0, #0]
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    ce0e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    ce12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    ce16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    ce1a:	d03f      	beq.n	ce9c <vs_read_key_hierarchy_roots+0x9e>
	    (NRF_FICR->IR[1] != UINT32_MAX) &&
    ce1c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    ce20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    ce24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    ce28:	d038      	beq.n	ce9c <vs_read_key_hierarchy_roots+0x9e>
	    (NRF_FICR->IR[2] != UINT32_MAX) &&
    ce2a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    ce2e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
	    (NRF_FICR->IR[1] != UINT32_MAX) &&
    ce32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    ce36:	d031      	beq.n	ce9c <vs_read_key_hierarchy_roots+0x9e>
	    (NRF_FICR->IR[3] != UINT32_MAX)) {
    ce38:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    ce3c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
	    (NRF_FICR->IR[2] != UINT32_MAX) &&
    ce40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    ce44:	d02a      	beq.n	ce9c <vs_read_key_hierarchy_roots+0x9e>
		sys_put_le32(NRF_FICR->IR[0], &rp->ir[0]);
    ce46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    ce4a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
	dst[0] = val;
    ce4e:	7043      	strb	r3, [r0, #1]
	dst[1] = val >> 8;
    ce50:	f3c3 2107 	ubfx	r1, r3, #8, #8
    ce54:	7081      	strb	r1, [r0, #2]
	sys_put_le16(val >> 16, &dst[2]);
    ce56:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    ce58:	70c3      	strb	r3, [r0, #3]
	dst[1] = val >> 8;
    ce5a:	0a1b      	lsrs	r3, r3, #8
    ce5c:	7103      	strb	r3, [r0, #4]
		sys_put_le32(NRF_FICR->IR[1], &rp->ir[4]);
    ce5e:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
	dst[0] = val;
    ce62:	7143      	strb	r3, [r0, #5]
	dst[1] = val >> 8;
    ce64:	f3c3 2107 	ubfx	r1, r3, #8, #8
    ce68:	7181      	strb	r1, [r0, #6]
	sys_put_le16(val >> 16, &dst[2]);
    ce6a:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    ce6c:	71c3      	strb	r3, [r0, #7]
	dst[1] = val >> 8;
    ce6e:	0a1b      	lsrs	r3, r3, #8
    ce70:	7203      	strb	r3, [r0, #8]
		sys_put_le32(NRF_FICR->IR[2], &rp->ir[8]);
    ce72:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
	dst[0] = val;
    ce76:	7243      	strb	r3, [r0, #9]
	dst[1] = val >> 8;
    ce78:	f3c3 2107 	ubfx	r1, r3, #8, #8
    ce7c:	7281      	strb	r1, [r0, #10]
	sys_put_le16(val >> 16, &dst[2]);
    ce7e:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    ce80:	72c3      	strb	r3, [r0, #11]
	dst[1] = val >> 8;
    ce82:	0a1b      	lsrs	r3, r3, #8
    ce84:	7303      	strb	r3, [r0, #12]
		sys_put_le32(NRF_FICR->IR[3], &rp->ir[12]);
    ce86:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
	dst[0] = val;
    ce8a:	7343      	strb	r3, [r0, #13]
	dst[1] = val >> 8;
    ce8c:	f3c3 2207 	ubfx	r2, r3, #8, #8
    ce90:	7382      	strb	r2, [r0, #14]
	sys_put_le16(val >> 16, &dst[2]);
    ce92:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    ce94:	73c3      	strb	r3, [r0, #15]
	dst[1] = val >> 8;
    ce96:	0a1b      	lsrs	r3, r3, #8
    ce98:	7403      	strb	r3, [r0, #16]
    ce9a:	e004      	b.n	cea6 <vs_read_key_hierarchy_roots+0xa8>
		memset(rp->ir, 0x00, sizeof(rp->ir));
    ce9c:	2210      	movs	r2, #16
    ce9e:	2100      	movs	r1, #0
    cea0:	1c60      	adds	r0, r4, #1
    cea2:	f01d fdef 	bl	2aa84 <memset>
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
    cea6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    ceaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    ceae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    ceb2:	d040      	beq.n	cf36 <vs_read_key_hierarchy_roots+0x138>
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
    ceb4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    ceb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
    cebc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    cec0:	d039      	beq.n	cf36 <vs_read_key_hierarchy_roots+0x138>
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
    cec2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    cec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
    ceca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    cece:	d032      	beq.n	cf36 <vs_read_key_hierarchy_roots+0x138>
	    (NRF_FICR->ER[3] != UINT32_MAX)) {
    ced0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    ced4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
    ced8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    cedc:	d02b      	beq.n	cf36 <vs_read_key_hierarchy_roots+0x138>
		sys_put_le32(NRF_FICR->ER[0], &rp->er[0]);
    cede:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    cee2:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
	dst[0] = val;
    cee6:	7463      	strb	r3, [r4, #17]
	dst[1] = val >> 8;
    cee8:	f3c3 2107 	ubfx	r1, r3, #8, #8
    ceec:	74a1      	strb	r1, [r4, #18]
	sys_put_le16(val >> 16, &dst[2]);
    ceee:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    cef0:	74e3      	strb	r3, [r4, #19]
	dst[1] = val >> 8;
    cef2:	0a1b      	lsrs	r3, r3, #8
    cef4:	7523      	strb	r3, [r4, #20]
		sys_put_le32(NRF_FICR->ER[1], &rp->er[4]);
    cef6:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
	dst[0] = val;
    cefa:	7563      	strb	r3, [r4, #21]
	dst[1] = val >> 8;
    cefc:	f3c3 2107 	ubfx	r1, r3, #8, #8
    cf00:	75a1      	strb	r1, [r4, #22]
	sys_put_le16(val >> 16, &dst[2]);
    cf02:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    cf04:	75e3      	strb	r3, [r4, #23]
	dst[1] = val >> 8;
    cf06:	0a1b      	lsrs	r3, r3, #8
    cf08:	7623      	strb	r3, [r4, #24]
		sys_put_le32(NRF_FICR->ER[2], &rp->er[8]);
    cf0a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
	dst[0] = val;
    cf0e:	7663      	strb	r3, [r4, #25]
	dst[1] = val >> 8;
    cf10:	f3c3 2107 	ubfx	r1, r3, #8, #8
    cf14:	76a1      	strb	r1, [r4, #26]
	sys_put_le16(val >> 16, &dst[2]);
    cf16:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    cf18:	76e3      	strb	r3, [r4, #27]
	dst[1] = val >> 8;
    cf1a:	0a1b      	lsrs	r3, r3, #8
    cf1c:	7723      	strb	r3, [r4, #28]
		sys_put_le32(NRF_FICR->ER[3], &rp->er[12]);
    cf1e:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
	dst[0] = val;
    cf22:	7763      	strb	r3, [r4, #29]
	dst[1] = val >> 8;
    cf24:	f3c3 2207 	ubfx	r2, r3, #8, #8
    cf28:	77a2      	strb	r2, [r4, #30]
	sys_put_le16(val >> 16, &dst[2]);
    cf2a:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    cf2c:	77e3      	strb	r3, [r4, #31]
	dst[1] = val >> 8;
    cf2e:	0a1b      	lsrs	r3, r3, #8
    cf30:	f884 3020 	strb.w	r3, [r4, #32]
    cf34:	bd10      	pop	{r4, pc}
		memset(rp->er, 0x00, sizeof(rp->er));
    cf36:	2210      	movs	r2, #16
    cf38:	2100      	movs	r1, #0
    cf3a:	f104 0011 	add.w	r0, r4, #17
    cf3e:	f01d fda1 	bl	2aa84 <memset>
    cf42:	bd10      	pop	{r4, pc}

0000cf44 <read_bd_addr>:
{
    cf44:	b508      	push	{r3, lr}
    cf46:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    cf48:	2107      	movs	r1, #7
    cf4a:	f7ff fc33 	bl	c7b4 <cmd_complete>
	rp->status = 0x00;
    cf4e:	2300      	movs	r3, #0
    cf50:	4601      	mov	r1, r0
    cf52:	f801 3b01 	strb.w	r3, [r1], #1
	ll_addr_get(0, &rp->bdaddr.val[0]);
    cf56:	4618      	mov	r0, r3
    cf58:	f00b fd62 	bl	18a20 <ll_addr_get>
    cf5c:	bd08      	pop	{r3, pc}

0000cf5e <info_cmd_handle>:
{
    cf5e:	b508      	push	{r3, lr}
    cf60:	460b      	mov	r3, r1
	switch (ocf) {
    cf62:	3801      	subs	r0, #1
    cf64:	2808      	cmp	r0, #8
    cf66:	d81e      	bhi.n	cfa6 <info_cmd_handle+0x48>
    cf68:	e8df f000 	tbb	[pc, r0]
    cf6c:	1d110b05 	.word	0x1d110b05
    cf70:	1d1d1d1d 	.word	0x1d1d1d1d
    cf74:	17          	.byte	0x17
    cf75:	00          	.byte	0x00
		read_local_version_info(cmd, evt);
    cf76:	4611      	mov	r1, r2
    cf78:	4618      	mov	r0, r3
    cf7a:	f7ff fc61 	bl	c840 <read_local_version_info>
	return 0;
    cf7e:	2000      	movs	r0, #0
		break;
    cf80:	bd08      	pop	{r3, pc}
		read_supported_commands(cmd, evt);
    cf82:	4611      	mov	r1, r2
    cf84:	4618      	mov	r0, r3
    cf86:	f7ff fe5c 	bl	cc42 <read_supported_commands>
	return 0;
    cf8a:	2000      	movs	r0, #0
		break;
    cf8c:	bd08      	pop	{r3, pc}
		read_local_features(cmd, evt);
    cf8e:	4611      	mov	r1, r2
    cf90:	4618      	mov	r0, r3
    cf92:	f7ff feae 	bl	ccf2 <read_local_features>
	return 0;
    cf96:	2000      	movs	r0, #0
		break;
    cf98:	bd08      	pop	{r3, pc}
		read_bd_addr(cmd, evt);
    cf9a:	4611      	mov	r1, r2
    cf9c:	4618      	mov	r0, r3
    cf9e:	f7ff ffd1 	bl	cf44 <read_bd_addr>
	return 0;
    cfa2:	2000      	movs	r0, #0
		break;
    cfa4:	bd08      	pop	{r3, pc}
		return -EINVAL;
    cfa6:	f06f 0015 	mvn.w	r0, #21
}
    cfaa:	bd08      	pop	{r3, pc}

0000cfac <le_set_random_address>:
{
    cfac:	b510      	push	{r4, lr}
    cfae:	460c      	mov	r4, r1
	ll_addr_set(1, &cmd->bdaddr.val[0]);
    cfb0:	6881      	ldr	r1, [r0, #8]
    cfb2:	2001      	movs	r0, #1
    cfb4:	f00b fd56 	bl	18a64 <ll_addr_set>
	ccst = cmd_complete(evt, sizeof(*ccst));
    cfb8:	2101      	movs	r1, #1
    cfba:	4620      	mov	r0, r4
    cfbc:	f7ff fbfa 	bl	c7b4 <cmd_complete>
	ccst->status = 0x00;
    cfc0:	2300      	movs	r3, #0
    cfc2:	7003      	strb	r3, [r0, #0]
    cfc4:	bd10      	pop	{r4, pc}

0000cfc6 <vs_write_bd_addr>:
{
    cfc6:	b510      	push	{r4, lr}
    cfc8:	460c      	mov	r4, r1
	ll_addr_set(0, &cmd->bdaddr.val[0]);
    cfca:	6881      	ldr	r1, [r0, #8]
    cfcc:	2000      	movs	r0, #0
    cfce:	f00b fd49 	bl	18a64 <ll_addr_set>
	ccst = cmd_complete(evt, sizeof(*ccst));
    cfd2:	2101      	movs	r1, #1
    cfd4:	4620      	mov	r0, r4
    cfd6:	f7ff fbed 	bl	c7b4 <cmd_complete>
	ccst->status = 0x00;
    cfda:	2300      	movs	r3, #0
    cfdc:	7003      	strb	r3, [r0, #0]
    cfde:	bd10      	pop	{r4, pc}

0000cfe0 <le_read_wl_size>:
{
    cfe0:	b510      	push	{r4, lr}
    cfe2:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    cfe4:	2102      	movs	r1, #2
    cfe6:	f7ff fbe5 	bl	c7b4 <cmd_complete>
    cfea:	4604      	mov	r4, r0
	rp->status = 0x00;
    cfec:	2300      	movs	r3, #0
    cfee:	7003      	strb	r3, [r0, #0]
	rp->wl_size = ll_wl_size_get();
    cff0:	f00b ff38 	bl	18e64 <ll_wl_size_get>
    cff4:	7060      	strb	r0, [r4, #1]
    cff6:	bd10      	pop	{r4, pc}

0000cff8 <le_clear_wl>:
{
    cff8:	b510      	push	{r4, lr}
    cffa:	4608      	mov	r0, r1
	ccst = cmd_complete(evt, sizeof(*ccst));
    cffc:	2101      	movs	r1, #1
    cffe:	f7ff fbd9 	bl	c7b4 <cmd_complete>
    d002:	4604      	mov	r4, r0
	ccst->status = ll_wl_clear();
    d004:	f00b ff30 	bl	18e68 <ll_wl_clear>
    d008:	7020      	strb	r0, [r4, #0]
    d00a:	bd10      	pop	{r4, pc}

0000d00c <le_add_dev_to_wl>:
{
    d00c:	b538      	push	{r3, r4, r5, lr}
    d00e:	460d      	mov	r5, r1
	status = ll_wl_add(&cmd->addr);
    d010:	6880      	ldr	r0, [r0, #8]
    d012:	f00c f81b 	bl	1904c <ll_wl_add>
    d016:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    d018:	2101      	movs	r1, #1
    d01a:	4628      	mov	r0, r5
    d01c:	f7ff fbca 	bl	c7b4 <cmd_complete>
	ccst->status = status;
    d020:	7004      	strb	r4, [r0, #0]
    d022:	bd38      	pop	{r3, r4, r5, pc}

0000d024 <le_rem_dev_from_wl>:
{
    d024:	b538      	push	{r3, r4, r5, lr}
    d026:	460d      	mov	r5, r1
	status = ll_wl_remove(&cmd->addr);
    d028:	6880      	ldr	r0, [r0, #8]
    d02a:	f00b ff33 	bl	18e94 <ll_wl_remove>
    d02e:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    d030:	2101      	movs	r1, #1
    d032:	4628      	mov	r0, r5
    d034:	f7ff fbbe 	bl	c7b4 <cmd_complete>
	ccst->status = status;
    d038:	7004      	strb	r4, [r0, #0]
    d03a:	bd38      	pop	{r3, r4, r5, pc}

0000d03c <le_encrypt>:
{
    d03c:	b510      	push	{r4, lr}
    d03e:	b084      	sub	sp, #16
    d040:	460c      	mov	r4, r1
	struct bt_hci_cp_le_encrypt *cmd = (void *)buf->data;
    d042:	6880      	ldr	r0, [r0, #8]
	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
    d044:	2300      	movs	r3, #0
    d046:	466a      	mov	r2, sp
    d048:	f100 0110 	add.w	r1, r0, #16
    d04c:	f001 fc9e 	bl	e98c <ecb_encrypt>
	rp = cmd_complete(evt, sizeof(*rp));
    d050:	2111      	movs	r1, #17
    d052:	4620      	mov	r0, r4
    d054:	f7ff fbae 	bl	c7b4 <cmd_complete>
	rp->status = 0x00;
    d058:	2300      	movs	r3, #0
    d05a:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->enc_data, enc_data, 16);
    d05e:	2210      	movs	r2, #16
    d060:	4669      	mov	r1, sp
    d062:	f7f3 f92d 	bl	2c0 <memcpy>
}
    d066:	b004      	add	sp, #16
    d068:	bd10      	pop	{r4, pc}
	...

0000d06c <vs_read_build_info>:
{
    d06c:	b570      	push	{r4, r5, r6, lr}
    d06e:	b08a      	sub	sp, #40	; 0x28
    d070:	460e      	mov	r6, r1
	const char build_info[] = HCI_VS_BUILD_INFO;
    d072:	466c      	mov	r4, sp
    d074:	4d0c      	ldr	r5, [pc, #48]	; (d0a8 <vs_read_build_info+0x3c>)
    d076:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    d078:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    d07a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    d07c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    d07e:	e895 0003 	ldmia.w	r5, {r0, r1}
    d082:	f844 0b04 	str.w	r0, [r4], #4
    d086:	f824 1b02 	strh.w	r1, [r4], #2
    d08a:	0c09      	lsrs	r1, r1, #16
    d08c:	7021      	strb	r1, [r4, #0]
	rp = cmd_complete(evt, sizeof(*rp) + sizeof(build_info));
    d08e:	2128      	movs	r1, #40	; 0x28
    d090:	4630      	mov	r0, r6
    d092:	f7ff fb8f 	bl	c7b4 <cmd_complete>
	rp->status = 0x00;
    d096:	2300      	movs	r3, #0
    d098:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->info, build_info, sizeof(build_info));
    d09c:	2227      	movs	r2, #39	; 0x27
    d09e:	4669      	mov	r1, sp
    d0a0:	f7f3 f90e 	bl	2c0 <memcpy>
}
    d0a4:	b00a      	add	sp, #40	; 0x28
    d0a6:	bd70      	pop	{r4, r5, r6, pc}
    d0a8:	0002f6a8 	.word	0x0002f6a8

0000d0ac <vendor_cmd_handle>:
{
    d0ac:	b508      	push	{r3, lr}
    d0ae:	460b      	mov	r3, r1
	switch (ocf) {
    d0b0:	3801      	subs	r0, #1
    d0b2:	2809      	cmp	r0, #9
    d0b4:	d830      	bhi.n	d118 <vendor_cmd_handle+0x6c>
    d0b6:	e8df f000 	tbb	[pc, r0]
    d0ba:	0b05      	.short	0x0b05
    d0bc:	1d2f2f11 	.word	0x1d2f2f11
    d0c0:	2923172f 	.word	0x2923172f
		vs_read_version_info(cmd, evt);
    d0c4:	4611      	mov	r1, r2
    d0c6:	4618      	mov	r0, r3
    d0c8:	f7ff fbf6 	bl	c8b8 <vs_read_version_info>
	return 0;
    d0cc:	2000      	movs	r0, #0
		break;
    d0ce:	bd08      	pop	{r3, pc}
		vs_read_supported_commands(cmd, evt);
    d0d0:	4611      	mov	r1, r2
    d0d2:	4618      	mov	r0, r3
    d0d4:	f7ff fe2f 	bl	cd36 <vs_read_supported_commands>
	return 0;
    d0d8:	2000      	movs	r0, #0
		break;
    d0da:	bd08      	pop	{r3, pc}
		vs_read_supported_features(cmd, evt);
    d0dc:	4611      	mov	r1, r2
    d0de:	4618      	mov	r0, r3
    d0e0:	f7ff fe3e 	bl	cd60 <vs_read_supported_features>
	return 0;
    d0e4:	2000      	movs	r0, #0
		break;
    d0e6:	bd08      	pop	{r3, pc}
		vs_read_build_info(cmd, evt);
    d0e8:	4611      	mov	r1, r2
    d0ea:	4618      	mov	r0, r3
    d0ec:	f7ff ffbe 	bl	d06c <vs_read_build_info>
	return 0;
    d0f0:	2000      	movs	r0, #0
		break;
    d0f2:	bd08      	pop	{r3, pc}
		vs_write_bd_addr(cmd, evt);
    d0f4:	4611      	mov	r1, r2
    d0f6:	4618      	mov	r0, r3
    d0f8:	f7ff ff65 	bl	cfc6 <vs_write_bd_addr>
	return 0;
    d0fc:	2000      	movs	r0, #0
		break;
    d0fe:	bd08      	pop	{r3, pc}
		vs_read_static_addrs(cmd, evt);
    d100:	4611      	mov	r1, r2
    d102:	4618      	mov	r0, r3
    d104:	f7ff fe38 	bl	cd78 <vs_read_static_addrs>
	return 0;
    d108:	2000      	movs	r0, #0
		break;
    d10a:	bd08      	pop	{r3, pc}
		vs_read_key_hierarchy_roots(cmd, evt);
    d10c:	4611      	mov	r1, r2
    d10e:	4618      	mov	r0, r3
    d110:	f7ff fe75 	bl	cdfe <vs_read_key_hierarchy_roots>
	return 0;
    d114:	2000      	movs	r0, #0
		break;
    d116:	bd08      	pop	{r3, pc}
		return -EINVAL;
    d118:	f06f 0015 	mvn.w	r0, #21
}
    d11c:	bd08      	pop	{r3, pc}

0000d11e <le_unknown_rsp>:
{
    d11e:	b508      	push	{r3, lr}
	switch (pdu_data->payload.llctrl.ctrldata.unknown_rsp.type) {
    d120:	7903      	ldrb	r3, [r0, #4]
    d122:	2b0e      	cmp	r3, #14
    d124:	d000      	beq.n	d128 <le_unknown_rsp+0xa>
    d126:	bd08      	pop	{r3, pc}
    d128:	4613      	mov	r3, r2
    d12a:	460a      	mov	r2, r1
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    d12c:	2100      	movs	r1, #0
    d12e:	201a      	movs	r0, #26
    d130:	f7f8 f966 	bl	5400 <le_remote_feat_complete>
}
    d134:	e7f7      	b.n	d126 <le_unknown_rsp+0x8>

0000d136 <le_rand>:
{
    d136:	b508      	push	{r3, lr}
    d138:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    d13a:	2109      	movs	r1, #9
    d13c:	f7ff fb3a 	bl	c7b4 <cmd_complete>
	rp->status = 0x00;
    d140:	2300      	movs	r3, #0
    d142:	f800 3b01 	strb.w	r3, [r0], #1
	bt_rand(rp->rand, count);
    d146:	2108      	movs	r1, #8
    d148:	f003 fcb2 	bl	10ab0 <bt_rand>
    d14c:	bd08      	pop	{r3, pc}

0000d14e <le_set_adv_param>:
{
    d14e:	b570      	push	{r4, r5, r6, lr}
    d150:	b08c      	sub	sp, #48	; 0x30
    d152:	460d      	mov	r5, r1
	struct bt_hci_cp_le_set_adv_param *cmd = (void *)buf->data;
    d154:	6881      	ldr	r1, [r0, #8]
	min_interval = sys_le16_to_cpu(cmd->min_interval);
    d156:	460c      	mov	r4, r1
    d158:	f834 2b07 	ldrh.w	r2, [r4], #7
	status = ll_adv_params_set(0, 0, min_interval, cmd->type,
    d15c:	790b      	ldrb	r3, [r1, #4]
    d15e:	2000      	movs	r0, #0
    d160:	900a      	str	r0, [sp, #40]	; 0x28
    d162:	9009      	str	r0, [sp, #36]	; 0x24
    d164:	9008      	str	r0, [sp, #32]
    d166:	9007      	str	r0, [sp, #28]
    d168:	9006      	str	r0, [sp, #24]
    d16a:	9005      	str	r0, [sp, #20]
    d16c:	7b8e      	ldrb	r6, [r1, #14]
    d16e:	9604      	str	r6, [sp, #16]
    d170:	7b4e      	ldrb	r6, [r1, #13]
    d172:	9603      	str	r6, [sp, #12]
    d174:	9402      	str	r4, [sp, #8]
    d176:	798c      	ldrb	r4, [r1, #6]
    d178:	9401      	str	r4, [sp, #4]
    d17a:	7949      	ldrb	r1, [r1, #5]
    d17c:	9100      	str	r1, [sp, #0]
    d17e:	4601      	mov	r1, r0
    d180:	f00c fc40 	bl	19a04 <ll_adv_params_set>
    d184:	b2c4      	uxtb	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    d186:	2101      	movs	r1, #1
    d188:	4628      	mov	r0, r5
    d18a:	f7ff fb13 	bl	c7b4 <cmd_complete>
	ccst->status = status;
    d18e:	7004      	strb	r4, [r0, #0]
}
    d190:	b00c      	add	sp, #48	; 0x30
    d192:	bd70      	pop	{r4, r5, r6, pc}

0000d194 <le_set_adv_data>:
{
    d194:	b510      	push	{r4, lr}
    d196:	460c      	mov	r4, r1
	struct bt_hci_cp_le_set_adv_data *cmd = (void *)buf->data;
    d198:	6883      	ldr	r3, [r0, #8]
	ll_adv_data_set(cmd->len, &cmd->data[0]);
    d19a:	1c59      	adds	r1, r3, #1
    d19c:	7818      	ldrb	r0, [r3, #0]
    d19e:	f00c fd55 	bl	19c4c <ll_adv_data_set>
	ccst = cmd_complete(evt, sizeof(*ccst));
    d1a2:	2101      	movs	r1, #1
    d1a4:	4620      	mov	r0, r4
    d1a6:	f7ff fb05 	bl	c7b4 <cmd_complete>
	ccst->status = 0x00;
    d1aa:	2300      	movs	r3, #0
    d1ac:	7003      	strb	r3, [r0, #0]
    d1ae:	bd10      	pop	{r4, pc}

0000d1b0 <le_set_scan_rsp_data>:
{
    d1b0:	b510      	push	{r4, lr}
    d1b2:	460c      	mov	r4, r1
	struct bt_hci_cp_le_set_scan_rsp_data *cmd = (void *)buf->data;
    d1b4:	6883      	ldr	r3, [r0, #8]
	ll_scan_data_set(cmd->len, &cmd->data[0]);
    d1b6:	1c59      	adds	r1, r3, #1
    d1b8:	7818      	ldrb	r0, [r3, #0]
    d1ba:	f00c fda0 	bl	19cfe <ll_scan_data_set>
	ccst = cmd_complete(evt, sizeof(*ccst));
    d1be:	2101      	movs	r1, #1
    d1c0:	4620      	mov	r0, r4
    d1c2:	f7ff faf7 	bl	c7b4 <cmd_complete>
	ccst->status = 0x00;
    d1c6:	2300      	movs	r3, #0
    d1c8:	7003      	strb	r3, [r0, #0]
    d1ca:	bd10      	pop	{r4, pc}

0000d1cc <le_set_adv_enable>:
{
    d1cc:	b538      	push	{r3, r4, r5, lr}
    d1ce:	460d      	mov	r5, r1
	struct bt_hci_cp_le_set_adv_enable *cmd = (void *)buf->data;
    d1d0:	6883      	ldr	r3, [r0, #8]
	status = ll_adv_enable(cmd->enable);
    d1d2:	7818      	ldrb	r0, [r3, #0]
    d1d4:	f00c fdd8 	bl	19d88 <ll_adv_enable>
    d1d8:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    d1da:	2101      	movs	r1, #1
    d1dc:	4628      	mov	r0, r5
    d1de:	f7ff fae9 	bl	c7b4 <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    d1e2:	b114      	cbz	r4, d1ea <le_set_adv_enable+0x1e>
    d1e4:	230c      	movs	r3, #12
    d1e6:	7003      	strb	r3, [r0, #0]
    d1e8:	bd38      	pop	{r3, r4, r5, pc}
    d1ea:	2300      	movs	r3, #0
    d1ec:	e7fb      	b.n	d1e6 <le_set_adv_enable+0x1a>

0000d1ee <le_set_scan_param>:
{
    d1ee:	b530      	push	{r4, r5, lr}
    d1f0:	b083      	sub	sp, #12
    d1f2:	460d      	mov	r5, r1
	struct bt_hci_cp_le_set_scan_param *cmd = (void *)buf->data;
    d1f4:	6884      	ldr	r4, [r0, #8]
	interval = sys_le16_to_cpu(cmd->interval);
    d1f6:	f8b4 1001 	ldrh.w	r1, [r4, #1]
	window = sys_le16_to_cpu(cmd->window);
    d1fa:	f8b4 2003 	ldrh.w	r2, [r4, #3]
	status = ll_scan_params_set(cmd->scan_type, interval, window,
    d1fe:	7820      	ldrb	r0, [r4, #0]
    d200:	7963      	ldrb	r3, [r4, #5]
    d202:	79a4      	ldrb	r4, [r4, #6]
    d204:	9400      	str	r4, [sp, #0]
    d206:	f00c fe51 	bl	19eac <ll_scan_params_set>
    d20a:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    d20c:	2101      	movs	r1, #1
    d20e:	4628      	mov	r0, r5
    d210:	f7ff fad0 	bl	c7b4 <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    d214:	b11c      	cbz	r4, d21e <le_set_scan_param+0x30>
    d216:	230c      	movs	r3, #12
    d218:	7003      	strb	r3, [r0, #0]
}
    d21a:	b003      	add	sp, #12
    d21c:	bd30      	pop	{r4, r5, pc}
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    d21e:	2300      	movs	r3, #0
    d220:	e7fa      	b.n	d218 <le_set_scan_param+0x2a>
	...

0000d224 <le_set_scan_enable>:
{
    d224:	b538      	push	{r3, r4, r5, lr}
    d226:	460d      	mov	r5, r1
	struct bt_hci_cp_le_set_scan_enable *cmd = (void *)buf->data;
    d228:	6883      	ldr	r3, [r0, #8]
	if (cmd->enable && cmd->filter_dup) {
    d22a:	781a      	ldrb	r2, [r3, #0]
    d22c:	b13a      	cbz	r2, d23e <le_set_scan_enable+0x1a>
    d22e:	785a      	ldrb	r2, [r3, #1]
    d230:	b12a      	cbz	r2, d23e <le_set_scan_enable+0x1a>
		dup_count = 0;
    d232:	2200      	movs	r2, #0
    d234:	490b      	ldr	r1, [pc, #44]	; (d264 <le_set_scan_enable+0x40>)
    d236:	600a      	str	r2, [r1, #0]
		dup_curr = 0;
    d238:	490b      	ldr	r1, [pc, #44]	; (d268 <le_set_scan_enable+0x44>)
    d23a:	600a      	str	r2, [r1, #0]
    d23c:	e003      	b.n	d246 <le_set_scan_enable+0x22>
		dup_count = -1;
    d23e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    d242:	4a08      	ldr	r2, [pc, #32]	; (d264 <le_set_scan_enable+0x40>)
    d244:	6011      	str	r1, [r2, #0]
	status = ll_scan_enable(cmd->enable);
    d246:	7818      	ldrb	r0, [r3, #0]
    d248:	f00c fe4c 	bl	19ee4 <ll_scan_enable>
    d24c:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    d24e:	2101      	movs	r1, #1
    d250:	4628      	mov	r0, r5
    d252:	f7ff faaf 	bl	c7b4 <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    d256:	b114      	cbz	r4, d25e <le_set_scan_enable+0x3a>
    d258:	230c      	movs	r3, #12
    d25a:	7003      	strb	r3, [r0, #0]
    d25c:	bd38      	pop	{r3, r4, r5, pc}
    d25e:	2300      	movs	r3, #0
    d260:	e7fb      	b.n	d25a <le_set_scan_enable+0x36>
    d262:	bf00      	nop
    d264:	200009d8 	.word	0x200009d8
    d268:	200009dc 	.word	0x200009dc

0000d26c <le_create_connection>:
{
    d26c:	b5f0      	push	{r4, r5, r6, r7, lr}
    d26e:	b087      	sub	sp, #28
    d270:	460d      	mov	r5, r1
	struct bt_hci_cp_le_create_conn *cmd = (void *)buf->data;
    d272:	6884      	ldr	r4, [r0, #8]
	scan_interval = sys_le16_to_cpu(cmd->scan_interval);
    d274:	8820      	ldrh	r0, [r4, #0]
	scan_window = sys_le16_to_cpu(cmd->scan_window);
    d276:	8861      	ldrh	r1, [r4, #2]
	conn_interval_max = sys_le16_to_cpu(cmd->conn_interval_max);
    d278:	f8b4 700f 	ldrh.w	r7, [r4, #15]
	conn_latency = sys_le16_to_cpu(cmd->conn_latency);
    d27c:	f8b4 e011 	ldrh.w	lr, [r4, #17]
	supervision_timeout = sys_le16_to_cpu(cmd->supervision_timeout);
    d280:	f8b4 c013 	ldrh.w	ip, [r4, #19]
	status = ll_create_connection(scan_interval, scan_window,
    d284:	7922      	ldrb	r2, [r4, #4]
    d286:	7963      	ldrb	r3, [r4, #5]
    d288:	1da6      	adds	r6, r4, #6
    d28a:	7b24      	ldrb	r4, [r4, #12]
    d28c:	f8cd c010 	str.w	ip, [sp, #16]
    d290:	f8cd e00c 	str.w	lr, [sp, #12]
    d294:	9702      	str	r7, [sp, #8]
    d296:	9401      	str	r4, [sp, #4]
    d298:	9600      	str	r6, [sp, #0]
    d29a:	f00c fe63 	bl	19f64 <ll_create_connection>
	*evt = cmd_status((!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED);
    d29e:	b100      	cbz	r0, d2a2 <le_create_connection+0x36>
    d2a0:	200c      	movs	r0, #12
    d2a2:	f7ff fa5f 	bl	c764 <cmd_status>
    d2a6:	6028      	str	r0, [r5, #0]
}
    d2a8:	b007      	add	sp, #28
    d2aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000d2ac <le_create_conn_cancel>:
{
    d2ac:	b538      	push	{r3, r4, r5, lr}
    d2ae:	460d      	mov	r5, r1
	status = ll_connect_disable();
    d2b0:	f00b f9fe 	bl	186b0 <ll_connect_disable>
    d2b4:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    d2b6:	2101      	movs	r1, #1
    d2b8:	4628      	mov	r0, r5
    d2ba:	f7ff fa7b 	bl	c7b4 <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    d2be:	b114      	cbz	r4, d2c6 <le_create_conn_cancel+0x1a>
    d2c0:	230c      	movs	r3, #12
    d2c2:	7003      	strb	r3, [r0, #0]
    d2c4:	bd38      	pop	{r3, r4, r5, pc}
    d2c6:	2300      	movs	r3, #0
    d2c8:	e7fb      	b.n	d2c2 <le_create_conn_cancel+0x16>

0000d2ca <le_set_host_chan_classif>:
{
    d2ca:	b538      	push	{r3, r4, r5, lr}
    d2cc:	460d      	mov	r5, r1
	status = ll_chm_update(&cmd->ch_map[0]);
    d2ce:	6880      	ldr	r0, [r0, #8]
    d2d0:	f00a fb06 	bl	178e0 <ll_chm_update>
    d2d4:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    d2d6:	2101      	movs	r1, #1
    d2d8:	4628      	mov	r0, r5
    d2da:	f7ff fa6b 	bl	c7b4 <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    d2de:	b114      	cbz	r4, d2e6 <le_set_host_chan_classif+0x1c>
    d2e0:	230c      	movs	r3, #12
    d2e2:	7003      	strb	r3, [r0, #0]
    d2e4:	bd38      	pop	{r3, r4, r5, pc}
    d2e6:	2300      	movs	r3, #0
    d2e8:	e7fb      	b.n	d2e2 <le_set_host_chan_classif+0x18>

0000d2ea <le_start_encryption>:
{
    d2ea:	b510      	push	{r4, lr}
    d2ec:	460c      	mov	r4, r1
	struct bt_hci_cp_le_start_encryption *cmd = (void *)buf->data;
    d2ee:	6882      	ldr	r2, [r0, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    d2f0:	4611      	mov	r1, r2
    d2f2:	f831 0b02 	ldrh.w	r0, [r1], #2
	status = ll_enc_req_send(handle,
    d2f6:	f102 030c 	add.w	r3, r2, #12
    d2fa:	320a      	adds	r2, #10
    d2fc:	f00a fe2a 	bl	17f54 <ll_enc_req_send>
	*evt = cmd_status((!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED);
    d300:	b100      	cbz	r0, d304 <le_start_encryption+0x1a>
    d302:	200c      	movs	r0, #12
    d304:	f7ff fa2e 	bl	c764 <cmd_status>
    d308:	6020      	str	r0, [r4, #0]
    d30a:	bd10      	pop	{r4, pc}

0000d30c <le_ltk_req_reply>:
{
    d30c:	b570      	push	{r4, r5, r6, lr}
    d30e:	460e      	mov	r6, r1
	handle = sys_le16_to_cpu(cmd->handle);
    d310:	6882      	ldr	r2, [r0, #8]
    d312:	f832 4b02 	ldrh.w	r4, [r2], #2
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
    d316:	2100      	movs	r1, #0
    d318:	b2a0      	uxth	r0, r4
    d31a:	f00a fb34 	bl	17986 <ll_start_enc_req_send>
    d31e:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    d320:	2103      	movs	r1, #3
    d322:	4630      	mov	r0, r6
    d324:	f7ff fa46 	bl	c7b4 <cmd_complete>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    d328:	b125      	cbz	r5, d334 <le_ltk_req_reply+0x28>
    d32a:	230c      	movs	r3, #12
    d32c:	7003      	strb	r3, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    d32e:	f8a0 4001 	strh.w	r4, [r0, #1]
    d332:	bd70      	pop	{r4, r5, r6, pc}
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    d334:	2300      	movs	r3, #0
    d336:	e7f9      	b.n	d32c <le_ltk_req_reply+0x20>

0000d338 <le_ltk_req_neg_reply>:
{
    d338:	b570      	push	{r4, r5, r6, lr}
    d33a:	460e      	mov	r6, r1
	struct bt_hci_cp_le_ltk_req_neg_reply *cmd = (void *)buf->data;
    d33c:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    d33e:	881c      	ldrh	r4, [r3, #0]
	status = ll_start_enc_req_send(handle, BT_HCI_ERR_PIN_OR_KEY_MISSING,
    d340:	2200      	movs	r2, #0
    d342:	2106      	movs	r1, #6
    d344:	b2a0      	uxth	r0, r4
    d346:	f00a fb1e 	bl	17986 <ll_start_enc_req_send>
    d34a:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    d34c:	2103      	movs	r1, #3
    d34e:	4630      	mov	r0, r6
    d350:	f7ff fa30 	bl	c7b4 <cmd_complete>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    d354:	b125      	cbz	r5, d360 <le_ltk_req_neg_reply+0x28>
    d356:	230c      	movs	r3, #12
    d358:	7003      	strb	r3, [r0, #0]
	rp->handle = sys_le16_to_cpu(handle);
    d35a:	f8a0 4001 	strh.w	r4, [r0, #1]
    d35e:	bd70      	pop	{r4, r5, r6, pc}
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    d360:	2300      	movs	r3, #0
    d362:	e7f9      	b.n	d358 <le_ltk_req_neg_reply+0x20>

0000d364 <le_read_chan_map>:
{
    d364:	b570      	push	{r4, r5, r6, lr}
    d366:	460b      	mov	r3, r1
	struct bt_hci_cp_le_read_chan_map *cmd = (void *)buf->data;
    d368:	6882      	ldr	r2, [r0, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    d36a:	8815      	ldrh	r5, [r2, #0]
    d36c:	b2ae      	uxth	r6, r5
	rp = cmd_complete(evt, sizeof(*rp));
    d36e:	2108      	movs	r1, #8
    d370:	4618      	mov	r0, r3
    d372:	f7ff fa1f 	bl	c7b4 <cmd_complete>
    d376:	4604      	mov	r4, r0
	status = ll_chm_get(handle, rp->ch_map);
    d378:	1cc1      	adds	r1, r0, #3
    d37a:	4630      	mov	r0, r6
    d37c:	f00a faee 	bl	1795c <ll_chm_get>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_UNKNOWN_CONN_ID;
    d380:	b120      	cbz	r0, d38c <le_read_chan_map+0x28>
    d382:	2302      	movs	r3, #2
    d384:	7023      	strb	r3, [r4, #0]
	rp->handle = sys_le16_to_cpu(handle);
    d386:	f8a4 5001 	strh.w	r5, [r4, #1]
    d38a:	bd70      	pop	{r4, r5, r6, pc}
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_UNKNOWN_CONN_ID;
    d38c:	2300      	movs	r3, #0
    d38e:	e7f9      	b.n	d384 <le_read_chan_map+0x20>

0000d390 <le_read_remote_features>:
{
    d390:	b510      	push	{r4, lr}
    d392:	460c      	mov	r4, r1
	struct bt_hci_cp_le_read_remote_features *cmd = (void *)buf->data;
    d394:	6883      	ldr	r3, [r0, #8]
	status = ll_feature_req_send(handle);
    d396:	8818      	ldrh	r0, [r3, #0]
    d398:	f00a fb3d 	bl	17a16 <ll_feature_req_send>
	*evt = cmd_status((!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED);
    d39c:	b100      	cbz	r0, d3a0 <le_read_remote_features+0x10>
    d39e:	200c      	movs	r0, #12
    d3a0:	f7ff f9e0 	bl	c764 <cmd_status>
    d3a4:	6020      	str	r0, [r4, #0]
    d3a6:	bd10      	pop	{r4, pc}

0000d3a8 <le_conn_param_req_neg_reply>:
{
    d3a8:	b570      	push	{r4, r5, r6, lr}
    d3aa:	b082      	sub	sp, #8
    d3ac:	460e      	mov	r6, r1
	struct bt_hci_cp_le_conn_param_req_neg_reply *cmd = (void *)buf->data;
    d3ae:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    d3b0:	881c      	ldrh	r4, [r3, #0]
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0);
    d3b2:	789a      	ldrb	r2, [r3, #2]
    d3b4:	2300      	movs	r3, #0
    d3b6:	9301      	str	r3, [sp, #4]
    d3b8:	9300      	str	r3, [sp, #0]
    d3ba:	2102      	movs	r1, #2
    d3bc:	b2a0      	uxth	r0, r4
    d3be:	f00a f9ff 	bl	177c0 <ll_conn_update>
    d3c2:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    d3c4:	2103      	movs	r1, #3
    d3c6:	4630      	mov	r0, r6
    d3c8:	f7ff f9f4 	bl	c7b4 <cmd_complete>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    d3cc:	b12d      	cbz	r5, d3da <le_conn_param_req_neg_reply+0x32>
    d3ce:	230c      	movs	r3, #12
    d3d0:	7003      	strb	r3, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    d3d2:	f8a0 4001 	strh.w	r4, [r0, #1]
}
    d3d6:	b002      	add	sp, #8
    d3d8:	bd70      	pop	{r4, r5, r6, pc}
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    d3da:	2300      	movs	r3, #0
    d3dc:	e7f8      	b.n	d3d0 <le_conn_param_req_neg_reply+0x28>

0000d3de <le_set_data_len>:
{
    d3de:	b570      	push	{r4, r5, r6, lr}
    d3e0:	460e      	mov	r6, r1
	struct bt_hci_cp_le_set_data_len *cmd = (void *)buf->data;
    d3e2:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    d3e4:	881c      	ldrh	r4, [r3, #0]
	status = ll_length_req_send(handle, tx_octets, tx_time);
    d3e6:	889a      	ldrh	r2, [r3, #4]
    d3e8:	8859      	ldrh	r1, [r3, #2]
    d3ea:	b2a0      	uxth	r0, r4
    d3ec:	f00a fb97 	bl	17b1e <ll_length_req_send>
    d3f0:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    d3f2:	2103      	movs	r1, #3
    d3f4:	4630      	mov	r0, r6
    d3f6:	f7ff f9dd 	bl	c7b4 <cmd_complete>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    d3fa:	b125      	cbz	r5, d406 <le_set_data_len+0x28>
    d3fc:	230c      	movs	r3, #12
    d3fe:	7003      	strb	r3, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    d400:	f8a0 4001 	strh.w	r4, [r0, #1]
    d404:	bd70      	pop	{r4, r5, r6, pc}
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    d406:	2300      	movs	r3, #0
    d408:	e7f9      	b.n	d3fe <le_set_data_len+0x20>

0000d40a <le_read_default_data_len>:
{
    d40a:	b510      	push	{r4, lr}
    d40c:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    d40e:	2105      	movs	r1, #5
    d410:	f7ff f9d0 	bl	c7b4 <cmd_complete>
    d414:	4604      	mov	r4, r0
	ll_length_default_get(&rp->max_tx_octets, &rp->max_tx_time);
    d416:	1cc1      	adds	r1, r0, #3
    d418:	3001      	adds	r0, #1
    d41a:	f00a fba7 	bl	17b6c <ll_length_default_get>
	rp->status = 0x00;
    d41e:	2300      	movs	r3, #0
    d420:	7023      	strb	r3, [r4, #0]
    d422:	bd10      	pop	{r4, pc}

0000d424 <le_write_default_data_len>:
{
    d424:	b538      	push	{r3, r4, r5, lr}
    d426:	460d      	mov	r5, r1
	struct bt_hci_cp_le_write_default_data_len *cmd = (void *)buf->data;
    d428:	6883      	ldr	r3, [r0, #8]
	status = ll_length_default_set(cmd->max_tx_octets, cmd->max_tx_time);
    d42a:	8859      	ldrh	r1, [r3, #2]
    d42c:	8818      	ldrh	r0, [r3, #0]
    d42e:	f00a fba7 	bl	17b80 <ll_length_default_set>
    d432:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    d434:	2101      	movs	r1, #1
    d436:	4628      	mov	r0, r5
    d438:	f7ff f9bc 	bl	c7b4 <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_INVALID_LL_PARAM;
    d43c:	b114      	cbz	r4, d444 <le_write_default_data_len+0x20>
    d43e:	231e      	movs	r3, #30
    d440:	7003      	strb	r3, [r0, #0]
    d442:	bd38      	pop	{r3, r4, r5, pc}
    d444:	2300      	movs	r3, #0
    d446:	e7fb      	b.n	d440 <le_write_default_data_len+0x1c>

0000d448 <le_read_max_data_len>:
{
    d448:	b510      	push	{r4, lr}
    d44a:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    d44c:	2109      	movs	r1, #9
    d44e:	f7ff f9b1 	bl	c7b4 <cmd_complete>
    d452:	4604      	mov	r4, r0
	ll_length_max_get(&rp->max_tx_octets, &rp->max_tx_time,
    d454:	1dc3      	adds	r3, r0, #7
    d456:	1d42      	adds	r2, r0, #5
    d458:	1cc1      	adds	r1, r0, #3
    d45a:	3001      	adds	r0, #1
    d45c:	f00a fb9a 	bl	17b94 <ll_length_max_get>
	rp->status = 0x00;
    d460:	2300      	movs	r3, #0
    d462:	7023      	strb	r3, [r4, #0]
    d464:	bd10      	pop	{r4, pc}
	...

0000d468 <le_phy_upd_complete>:
{
    d468:	b538      	push	{r3, r4, r5, lr}
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    d46a:	4b1a      	ldr	r3, [pc, #104]	; (d4d4 <le_phy_upd_complete+0x6c>)
    d46c:	e9d3 4500 	ldrd	r4, r5, [r3]
    d470:	2400      	movs	r4, #0
    d472:	f005 5500 	and.w	r5, r5, #536870912	; 0x20000000
    d476:	ea54 0305 	orrs.w	r3, r4, r5
    d47a:	d008      	beq.n	d48e <le_phy_upd_complete+0x26>
	    !(le_event_mask & BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE)) {
    d47c:	4b16      	ldr	r3, [pc, #88]	; (d4d8 <le_phy_upd_complete+0x70>)
    d47e:	e9d3 4500 	ldrd	r4, r5, [r3]
    d482:	f404 6400 	and.w	r4, r4, #2048	; 0x800
    d486:	2500      	movs	r5, #0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    d488:	ea54 0305 	orrs.w	r3, r4, r5
    d48c:	d100      	bne.n	d490 <le_phy_upd_complete+0x28>
    d48e:	bd38      	pop	{r3, r4, r5, pc}
    d490:	4613      	mov	r3, r2
    d492:	460c      	mov	r4, r1
    d494:	4605      	mov	r5, r0
	sep = meta_evt(buf, BT_HCI_EVT_LE_PHY_UPDATE_COMPLETE, sizeof(*sep));
    d496:	2205      	movs	r2, #5
    d498:	210c      	movs	r1, #12
    d49a:	4618      	mov	r0, r3
    d49c:	f7ff fa24 	bl	c8e8 <meta_evt>
	sep->status = radio_le_phy_upd_cmplt->status;
    d4a0:	78eb      	ldrb	r3, [r5, #3]
    d4a2:	7003      	strb	r3, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    d4a4:	f8a0 4001 	strh.w	r4, [r0, #1]
	sep->tx_phy = find_lsb_set(radio_le_phy_upd_cmplt->tx);
    d4a8:	792a      	ldrb	r2, [r5, #4]
	return __builtin_ffs(op);
    d4aa:	fa92 f3a2 	rbit	r3, r2
    d4ae:	fab3 f383 	clz	r3, r3
    d4b2:	b90a      	cbnz	r2, d4b8 <le_phy_upd_complete+0x50>
    d4b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    d4b8:	3301      	adds	r3, #1
    d4ba:	70c3      	strb	r3, [r0, #3]
	sep->rx_phy = find_lsb_set(radio_le_phy_upd_cmplt->rx);
    d4bc:	796a      	ldrb	r2, [r5, #5]
    d4be:	fa92 f3a2 	rbit	r3, r2
    d4c2:	fab3 f383 	clz	r3, r3
    d4c6:	b90a      	cbnz	r2, d4cc <le_phy_upd_complete+0x64>
    d4c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    d4cc:	3301      	adds	r3, #1
    d4ce:	7103      	strb	r3, [r0, #4]
    d4d0:	e7dd      	b.n	d48e <le_phy_upd_complete+0x26>
    d4d2:	bf00      	nop
    d4d4:	2000baf8 	.word	0x2000baf8
    d4d8:	2000bb00 	.word	0x2000bb00

0000d4dc <le_read_phy>:
{
    d4dc:	b570      	push	{r4, r5, r6, lr}
    d4de:	460b      	mov	r3, r1
	struct bt_hci_cp_le_read_phy *cmd = (void *) buf->data;
    d4e0:	6882      	ldr	r2, [r0, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    d4e2:	8815      	ldrh	r5, [r2, #0]
    d4e4:	b2ae      	uxth	r6, r5
	rp = cmd_complete(evt, sizeof(*rp));
    d4e6:	2105      	movs	r1, #5
    d4e8:	4618      	mov	r0, r3
    d4ea:	f7ff f963 	bl	c7b4 <cmd_complete>
    d4ee:	4604      	mov	r4, r0
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
    d4f0:	1d02      	adds	r2, r0, #4
    d4f2:	1cc1      	adds	r1, r0, #3
    d4f4:	4630      	mov	r0, r6
    d4f6:	f00a fb57 	bl	17ba8 <ll_phy_get>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    d4fa:	b1c0      	cbz	r0, d52e <le_read_phy+0x52>
    d4fc:	230c      	movs	r3, #12
    d4fe:	7023      	strb	r3, [r4, #0]
	rp->handle = sys_cpu_to_le16(handle);
    d500:	f8a4 5001 	strh.w	r5, [r4, #1]
	rp->tx_phy = find_lsb_set(rp->tx_phy);
    d504:	78e2      	ldrb	r2, [r4, #3]
    d506:	fa92 f3a2 	rbit	r3, r2
    d50a:	fab3 f383 	clz	r3, r3
    d50e:	b90a      	cbnz	r2, d514 <le_read_phy+0x38>
    d510:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    d514:	3301      	adds	r3, #1
    d516:	70e3      	strb	r3, [r4, #3]
	rp->rx_phy = find_lsb_set(rp->rx_phy);
    d518:	7922      	ldrb	r2, [r4, #4]
    d51a:	fa92 f3a2 	rbit	r3, r2
    d51e:	fab3 f383 	clz	r3, r3
    d522:	b90a      	cbnz	r2, d528 <le_read_phy+0x4c>
    d524:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    d528:	3301      	adds	r3, #1
    d52a:	7123      	strb	r3, [r4, #4]
    d52c:	bd70      	pop	{r4, r5, r6, pc}
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    d52e:	2300      	movs	r3, #0
    d530:	e7e5      	b.n	d4fe <le_read_phy+0x22>

0000d532 <le_set_default_phy>:
{
    d532:	b538      	push	{r3, r4, r5, lr}
    d534:	460d      	mov	r5, r1
	struct bt_hci_cp_le_set_default_phy *cmd = (void *)buf->data;
    d536:	6883      	ldr	r3, [r0, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    d538:	781a      	ldrb	r2, [r3, #0]
    d53a:	f012 0f01 	tst.w	r2, #1
    d53e:	d001      	beq.n	d544 <le_set_default_phy+0x12>
		cmd->tx_phys = 0x07;
    d540:	2107      	movs	r1, #7
    d542:	7059      	strb	r1, [r3, #1]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
    d544:	f012 0f02 	tst.w	r2, #2
    d548:	d001      	beq.n	d54e <le_set_default_phy+0x1c>
		cmd->rx_phys = 0x07;
    d54a:	2207      	movs	r2, #7
    d54c:	709a      	strb	r2, [r3, #2]
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
    d54e:	7899      	ldrb	r1, [r3, #2]
    d550:	7858      	ldrb	r0, [r3, #1]
    d552:	f00a fb3d 	bl	17bd0 <ll_phy_default_set>
    d556:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    d558:	2101      	movs	r1, #1
    d55a:	4628      	mov	r0, r5
    d55c:	f7ff f92a 	bl	c7b4 <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_INVALID_LL_PARAM;
    d560:	b114      	cbz	r4, d568 <le_set_default_phy+0x36>
    d562:	231e      	movs	r3, #30
    d564:	7003      	strb	r3, [r0, #0]
    d566:	bd38      	pop	{r3, r4, r5, pc}
    d568:	2300      	movs	r3, #0
    d56a:	e7fb      	b.n	d564 <le_set_default_phy+0x32>

0000d56c <le_set_phy>:
{
    d56c:	b538      	push	{r3, r4, r5, lr}
    d56e:	460c      	mov	r4, r1
	struct bt_hci_cp_le_set_phy *cmd = (void *)buf->data;
    d570:	6881      	ldr	r1, [r0, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    d572:	8808      	ldrh	r0, [r1, #0]
	phy_opts = sys_le16_to_cpu(cmd->phy_opts);
    d574:	f8b1 2005 	ldrh.w	r2, [r1, #5]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    d578:	788b      	ldrb	r3, [r1, #2]
    d57a:	f013 0f01 	tst.w	r3, #1
    d57e:	d001      	beq.n	d584 <le_set_phy+0x18>
		cmd->tx_phys = 0x07;
    d580:	2507      	movs	r5, #7
    d582:	70cd      	strb	r5, [r1, #3]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
    d584:	f013 0f02 	tst.w	r3, #2
    d588:	d001      	beq.n	d58e <le_set_phy+0x22>
		cmd->rx_phys = 0x07;
    d58a:	2307      	movs	r3, #7
    d58c:	710b      	strb	r3, [r1, #4]
	if (phy_opts & 0x03) {
    d58e:	f012 0f03 	tst.w	r2, #3
    d592:	d00c      	beq.n	d5ae <le_set_phy+0x42>
		phy_opts -= 1;
    d594:	3a01      	subs	r2, #1
		phy_opts &= 1;
    d596:	f002 0201 	and.w	r2, r2, #1
	status = ll_phy_req_send(handle, cmd->tx_phys, phy_opts,
    d59a:	790b      	ldrb	r3, [r1, #4]
    d59c:	78c9      	ldrb	r1, [r1, #3]
    d59e:	f00a fb21 	bl	17be4 <ll_phy_req_send>
	*evt = cmd_status((!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED);
    d5a2:	b100      	cbz	r0, d5a6 <le_set_phy+0x3a>
    d5a4:	200c      	movs	r0, #12
    d5a6:	f7ff f8dd 	bl	c764 <cmd_status>
    d5aa:	6020      	str	r0, [r4, #0]
    d5ac:	bd38      	pop	{r3, r4, r5, pc}
		phy_opts = 0;
    d5ae:	2200      	movs	r2, #0
    d5b0:	e7f3      	b.n	d59a <le_set_phy+0x2e>

0000d5b2 <le_add_dev_to_rl>:
{
    d5b2:	b538      	push	{r3, r4, r5, lr}
    d5b4:	460d      	mov	r5, r1
	struct bt_hci_cp_le_add_dev_to_rl *cmd = (void *)buf->data;
    d5b6:	6880      	ldr	r0, [r0, #8]
	status = ll_rl_add(&cmd->peer_id_addr, cmd->peer_irk, cmd->local_irk);
    d5b8:	f100 0217 	add.w	r2, r0, #23
    d5bc:	1dc1      	adds	r1, r0, #7
    d5be:	f00b fffb 	bl	195b8 <ll_rl_add>
    d5c2:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    d5c4:	2101      	movs	r1, #1
    d5c6:	4628      	mov	r0, r5
    d5c8:	f7ff f8f4 	bl	c7b4 <cmd_complete>
	ccst->status = status;
    d5cc:	7004      	strb	r4, [r0, #0]
    d5ce:	bd38      	pop	{r3, r4, r5, pc}

0000d5d0 <le_rem_dev_from_rl>:
{
    d5d0:	b538      	push	{r3, r4, r5, lr}
    d5d2:	460d      	mov	r5, r1
	status = ll_rl_remove(&cmd->peer_id_addr);
    d5d4:	6880      	ldr	r0, [r0, #8]
    d5d6:	f00c f8ad 	bl	19734 <ll_rl_remove>
    d5da:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    d5dc:	2101      	movs	r1, #1
    d5de:	4628      	mov	r0, r5
    d5e0:	f7ff f8e8 	bl	c7b4 <cmd_complete>
	ccst->status = status;
    d5e4:	7004      	strb	r4, [r0, #0]
    d5e6:	bd38      	pop	{r3, r4, r5, pc}

0000d5e8 <le_clear_rl>:
{
    d5e8:	b510      	push	{r4, lr}
    d5ea:	4608      	mov	r0, r1
	ccst = cmd_complete(evt, sizeof(*ccst));
    d5ec:	2101      	movs	r1, #1
    d5ee:	f7ff f8e1 	bl	c7b4 <cmd_complete>
    d5f2:	4604      	mov	r4, r0
	ccst->status = ll_rl_clear();
    d5f4:	f00b ffd4 	bl	195a0 <ll_rl_clear>
    d5f8:	7020      	strb	r0, [r4, #0]
    d5fa:	bd10      	pop	{r4, pc}

0000d5fc <le_read_rl_size>:
{
    d5fc:	b510      	push	{r4, lr}
    d5fe:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    d600:	2102      	movs	r1, #2
    d602:	f7ff f8d7 	bl	c7b4 <cmd_complete>
    d606:	4604      	mov	r4, r0
	rp->rl_size = ll_rl_size_get();
    d608:	f00b ffc8 	bl	1959c <ll_rl_size_get>
    d60c:	7060      	strb	r0, [r4, #1]
	rp->status = 0x00;
    d60e:	2300      	movs	r3, #0
    d610:	7023      	strb	r3, [r4, #0]
    d612:	bd10      	pop	{r4, pc}

0000d614 <le_read_peer_rpa>:
{
    d614:	b510      	push	{r4, lr}
    d616:	b082      	sub	sp, #8
    d618:	460c      	mov	r4, r1
	memcpy(dst, src, sizeof(*dst));
    d61a:	2207      	movs	r2, #7
    d61c:	6881      	ldr	r1, [r0, #8]
    d61e:	4668      	mov	r0, sp
    d620:	f7f2 fe4e 	bl	2c0 <memcpy>
	rp = cmd_complete(evt, sizeof(*rp));
    d624:	2107      	movs	r1, #7
    d626:	4620      	mov	r0, r4
    d628:	f7ff f8c4 	bl	c7b4 <cmd_complete>
    d62c:	4604      	mov	r4, r0
	rp->status = ll_rl_crpa_get(&peer_id_addr, &rp->peer_rpa);
    d62e:	1c41      	adds	r1, r0, #1
    d630:	4668      	mov	r0, sp
    d632:	f00c f923 	bl	1987c <ll_rl_crpa_get>
    d636:	7020      	strb	r0, [r4, #0]
}
    d638:	b002      	add	sp, #8
    d63a:	bd10      	pop	{r4, pc}

0000d63c <le_read_local_rpa>:
{
    d63c:	b510      	push	{r4, lr}
    d63e:	b082      	sub	sp, #8
    d640:	460c      	mov	r4, r1
    d642:	2207      	movs	r2, #7
    d644:	6881      	ldr	r1, [r0, #8]
    d646:	4668      	mov	r0, sp
    d648:	f7f2 fe3a 	bl	2c0 <memcpy>
	rp = cmd_complete(evt, sizeof(*rp));
    d64c:	2107      	movs	r1, #7
    d64e:	4620      	mov	r0, r4
    d650:	f7ff f8b0 	bl	c7b4 <cmd_complete>
    d654:	4604      	mov	r4, r0
	rp->status = ll_rl_lrpa_get(&peer_id_addr, &rp->local_rpa);
    d656:	1c41      	adds	r1, r0, #1
    d658:	4668      	mov	r0, sp
    d65a:	f00c f937 	bl	198cc <ll_rl_lrpa_get>
    d65e:	7020      	strb	r0, [r4, #0]
}
    d660:	b002      	add	sp, #8
    d662:	bd10      	pop	{r4, pc}

0000d664 <le_set_addr_res_enable>:
{
    d664:	b538      	push	{r3, r4, r5, lr}
    d666:	460b      	mov	r3, r1
	struct bt_hci_cp_le_set_addr_res_enable *cmd = (void *)buf->data;
    d668:	6882      	ldr	r2, [r0, #8]
	u8_t enable = cmd->enable;
    d66a:	7815      	ldrb	r5, [r2, #0]
	ccst = cmd_complete(evt, sizeof(*ccst));
    d66c:	2101      	movs	r1, #1
    d66e:	4618      	mov	r0, r3
    d670:	f7ff f8a0 	bl	c7b4 <cmd_complete>
    d674:	4604      	mov	r4, r0
	ccst->status = ll_rl_enable(enable);
    d676:	4628      	mov	r0, r5
    d678:	f00c f942 	bl	19900 <ll_rl_enable>
    d67c:	7020      	strb	r0, [r4, #0]
    d67e:	bd38      	pop	{r3, r4, r5, pc}

0000d680 <le_set_rpa_timeout>:
{
    d680:	b510      	push	{r4, lr}
    d682:	460c      	mov	r4, r1
	struct bt_hci_cp_le_set_rpa_timeout *cmd = (void *)buf->data;
    d684:	6883      	ldr	r3, [r0, #8]
	ll_rl_timeout_set(timeout);
    d686:	8818      	ldrh	r0, [r3, #0]
    d688:	f00c f952 	bl	19930 <ll_rl_timeout_set>
	ccst = cmd_complete(evt, sizeof(*ccst));
    d68c:	2101      	movs	r1, #1
    d68e:	4620      	mov	r0, r4
    d690:	f7ff f890 	bl	c7b4 <cmd_complete>
	ccst->status = 0x00;
    d694:	2300      	movs	r3, #0
    d696:	7003      	strb	r3, [r0, #0]
    d698:	bd10      	pop	{r4, pc}

0000d69a <le_set_privacy_mode>:
{
    d69a:	b538      	push	{r3, r4, r5, lr}
    d69c:	460d      	mov	r5, r1
	struct bt_hci_cp_le_set_privacy_mode *cmd = (void *)buf->data;
    d69e:	6880      	ldr	r0, [r0, #8]
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
    d6a0:	79c1      	ldrb	r1, [r0, #7]
    d6a2:	f00c f94f 	bl	19944 <ll_priv_mode_set>
    d6a6:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    d6a8:	2101      	movs	r1, #1
    d6aa:	4628      	mov	r0, r5
    d6ac:	f7ff f882 	bl	c7b4 <cmd_complete>
	ccst->status = status;
    d6b0:	7004      	strb	r4, [r0, #0]
    d6b2:	bd38      	pop	{r3, r4, r5, pc}

0000d6b4 <le_read_tx_power>:
{
    d6b4:	b508      	push	{r3, lr}
    d6b6:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    d6b8:	2103      	movs	r1, #3
    d6ba:	f7ff f87b 	bl	c7b4 <cmd_complete>
	rp->status = 0x00;
    d6be:	4601      	mov	r1, r0
    d6c0:	2300      	movs	r3, #0
    d6c2:	f801 3b02 	strb.w	r3, [r1], #2
	ll_tx_power_get(&rp->min_tx_power, &rp->max_tx_power);
    d6c6:	3001      	adds	r0, #1
    d6c8:	f00a f9f1 	bl	17aae <ll_tx_power_get>
    d6cc:	bd08      	pop	{r3, pc}

0000d6ce <controller_cmd_handle>:
{
    d6ce:	b508      	push	{r3, lr}
    d6d0:	460b      	mov	r3, r1
	switch (ocf) {
    d6d2:	3801      	subs	r0, #1
    d6d4:	284d      	cmp	r0, #77	; 0x4d
    d6d6:	f200 8164 	bhi.w	d9a2 <controller_cmd_handle+0x2d4>
    d6da:	e8df f010 	tbh	[pc, r0, lsl #1]
    d6de:	004e      	.short	0x004e
    d6e0:	005a0054 	.word	0x005a0054
    d6e4:	00600162 	.word	0x00600162
    d6e8:	00960090 	.word	0x00960090
    d6ec:	00a2009c 	.word	0x00a2009c
    d6f0:	00ae00a8 	.word	0x00ae00a8
    d6f4:	00ba00b4 	.word	0x00ba00b4
    d6f8:	006600c0 	.word	0x006600c0
    d6fc:	0072006c 	.word	0x0072006c
    d700:	00ea0078 	.word	0x00ea0078
    d704:	00de00c6 	.word	0x00de00c6
    d708:	007e00e4 	.word	0x007e00e4
    d70c:	00cc0084 	.word	0x00cc0084
    d710:	00d800d2 	.word	0x00d800d2
    d714:	0162008a 	.word	0x0162008a
    d718:	01620162 	.word	0x01620162
    d71c:	00f600f0 	.word	0x00f600f0
    d720:	010200fc 	.word	0x010200fc
    d724:	01620108 	.word	0x01620108
    d728:	01260162 	.word	0x01260162
    d72c:	0132012c 	.word	0x0132012c
    d730:	013e0138 	.word	0x013e0138
    d734:	014a0144 	.word	0x014a0144
    d738:	010e0150 	.word	0x010e0150
    d73c:	011a0114 	.word	0x011a0114
    d740:	01620120 	.word	0x01620120
    d744:	01620162 	.word	0x01620162
    d748:	01620162 	.word	0x01620162
    d74c:	01620162 	.word	0x01620162
    d750:	01620162 	.word	0x01620162
    d754:	01620162 	.word	0x01620162
    d758:	01620162 	.word	0x01620162
    d75c:	01620162 	.word	0x01620162
    d760:	01620162 	.word	0x01620162
    d764:	01620162 	.word	0x01620162
    d768:	01620162 	.word	0x01620162
    d76c:	01620162 	.word	0x01620162
    d770:	015c0162 	.word	0x015c0162
    d774:	01620162 	.word	0x01620162
    d778:	0156      	.short	0x0156
		le_set_event_mask(cmd, evt);
    d77a:	4611      	mov	r1, r2
    d77c:	4618      	mov	r0, r3
    d77e:	f7f6 fe3f 	bl	4400 <le_set_event_mask>
	return 0;
    d782:	2000      	movs	r0, #0
		break;
    d784:	bd08      	pop	{r3, pc}
		le_read_buffer_size(cmd, evt);
    d786:	4611      	mov	r1, r2
    d788:	4618      	mov	r0, r3
    d78a:	f7ff f86c 	bl	c866 <le_read_buffer_size>
	return 0;
    d78e:	2000      	movs	r0, #0
		break;
    d790:	bd08      	pop	{r3, pc}
		le_read_local_features(cmd, evt);
    d792:	4611      	mov	r1, r2
    d794:	4618      	mov	r0, r3
    d796:	f7ff fabb 	bl	cd10 <le_read_local_features>
	return 0;
    d79a:	2000      	movs	r0, #0
		break;
    d79c:	bd08      	pop	{r3, pc}
		le_set_random_address(cmd, evt);
    d79e:	4611      	mov	r1, r2
    d7a0:	4618      	mov	r0, r3
    d7a2:	f7ff fc03 	bl	cfac <le_set_random_address>
	return 0;
    d7a6:	2000      	movs	r0, #0
		break;
    d7a8:	bd08      	pop	{r3, pc}
		le_read_wl_size(cmd, evt);
    d7aa:	4611      	mov	r1, r2
    d7ac:	4618      	mov	r0, r3
    d7ae:	f7ff fc17 	bl	cfe0 <le_read_wl_size>
	return 0;
    d7b2:	2000      	movs	r0, #0
		break;
    d7b4:	bd08      	pop	{r3, pc}
		le_clear_wl(cmd, evt);
    d7b6:	4611      	mov	r1, r2
    d7b8:	4618      	mov	r0, r3
    d7ba:	f7ff fc1d 	bl	cff8 <le_clear_wl>
	return 0;
    d7be:	2000      	movs	r0, #0
		break;
    d7c0:	bd08      	pop	{r3, pc}
		le_add_dev_to_wl(cmd, evt);
    d7c2:	4611      	mov	r1, r2
    d7c4:	4618      	mov	r0, r3
    d7c6:	f7ff fc21 	bl	d00c <le_add_dev_to_wl>
	return 0;
    d7ca:	2000      	movs	r0, #0
		break;
    d7cc:	bd08      	pop	{r3, pc}
		le_rem_dev_from_wl(cmd, evt);
    d7ce:	4611      	mov	r1, r2
    d7d0:	4618      	mov	r0, r3
    d7d2:	f7ff fc27 	bl	d024 <le_rem_dev_from_wl>
	return 0;
    d7d6:	2000      	movs	r0, #0
		break;
    d7d8:	bd08      	pop	{r3, pc}
		le_encrypt(cmd, evt);
    d7da:	4611      	mov	r1, r2
    d7dc:	4618      	mov	r0, r3
    d7de:	f7ff fc2d 	bl	d03c <le_encrypt>
	return 0;
    d7e2:	2000      	movs	r0, #0
		break;
    d7e4:	bd08      	pop	{r3, pc}
		le_rand(cmd, evt);
    d7e6:	4611      	mov	r1, r2
    d7e8:	4618      	mov	r0, r3
    d7ea:	f7ff fca4 	bl	d136 <le_rand>
	return 0;
    d7ee:	2000      	movs	r0, #0
		break;
    d7f0:	bd08      	pop	{r3, pc}
		le_read_supp_states(cmd, evt);
    d7f2:	4611      	mov	r1, r2
    d7f4:	4618      	mov	r0, r3
    d7f6:	f7ff f843 	bl	c880 <le_read_supp_states>
	return 0;
    d7fa:	2000      	movs	r0, #0
		break;
    d7fc:	bd08      	pop	{r3, pc}
		le_set_adv_param(cmd, evt);
    d7fe:	4611      	mov	r1, r2
    d800:	4618      	mov	r0, r3
    d802:	f7ff fca4 	bl	d14e <le_set_adv_param>
	return 0;
    d806:	2000      	movs	r0, #0
		break;
    d808:	bd08      	pop	{r3, pc}
		le_read_adv_chan_tx_power(cmd, evt);
    d80a:	4611      	mov	r1, r2
    d80c:	4618      	mov	r0, r3
    d80e:	f7ff f84a 	bl	c8a6 <le_read_adv_chan_tx_power>
	return 0;
    d812:	2000      	movs	r0, #0
		break;
    d814:	bd08      	pop	{r3, pc}
		le_set_adv_data(cmd, evt);
    d816:	4611      	mov	r1, r2
    d818:	4618      	mov	r0, r3
    d81a:	f7ff fcbb 	bl	d194 <le_set_adv_data>
	return 0;
    d81e:	2000      	movs	r0, #0
		break;
    d820:	bd08      	pop	{r3, pc}
		le_set_scan_rsp_data(cmd, evt);
    d822:	4611      	mov	r1, r2
    d824:	4618      	mov	r0, r3
    d826:	f7ff fcc3 	bl	d1b0 <le_set_scan_rsp_data>
	return 0;
    d82a:	2000      	movs	r0, #0
		break;
    d82c:	bd08      	pop	{r3, pc}
		le_set_adv_enable(cmd, evt);
    d82e:	4611      	mov	r1, r2
    d830:	4618      	mov	r0, r3
    d832:	f7ff fccb 	bl	d1cc <le_set_adv_enable>
	return 0;
    d836:	2000      	movs	r0, #0
		break;
    d838:	bd08      	pop	{r3, pc}
		le_set_scan_param(cmd, evt);
    d83a:	4611      	mov	r1, r2
    d83c:	4618      	mov	r0, r3
    d83e:	f7ff fcd6 	bl	d1ee <le_set_scan_param>
	return 0;
    d842:	2000      	movs	r0, #0
		break;
    d844:	bd08      	pop	{r3, pc}
		le_set_scan_enable(cmd, evt);
    d846:	4611      	mov	r1, r2
    d848:	4618      	mov	r0, r3
    d84a:	f7ff fceb 	bl	d224 <le_set_scan_enable>
	return 0;
    d84e:	2000      	movs	r0, #0
		break;
    d850:	bd08      	pop	{r3, pc}
		le_create_connection(cmd, evt);
    d852:	4611      	mov	r1, r2
    d854:	4618      	mov	r0, r3
    d856:	f7ff fd09 	bl	d26c <le_create_connection>
	return 0;
    d85a:	2000      	movs	r0, #0
		break;
    d85c:	bd08      	pop	{r3, pc}
		le_create_conn_cancel(cmd, evt);
    d85e:	4611      	mov	r1, r2
    d860:	4618      	mov	r0, r3
    d862:	f7ff fd23 	bl	d2ac <le_create_conn_cancel>
	return 0;
    d866:	2000      	movs	r0, #0
		break;
    d868:	bd08      	pop	{r3, pc}
		le_set_host_chan_classif(cmd, evt);
    d86a:	4611      	mov	r1, r2
    d86c:	4618      	mov	r0, r3
    d86e:	f7ff fd2c 	bl	d2ca <le_set_host_chan_classif>
	return 0;
    d872:	2000      	movs	r0, #0
		break;
    d874:	bd08      	pop	{r3, pc}
		le_start_encryption(cmd, evt);
    d876:	4611      	mov	r1, r2
    d878:	4618      	mov	r0, r3
    d87a:	f7ff fd36 	bl	d2ea <le_start_encryption>
	return 0;
    d87e:	2000      	movs	r0, #0
		break;
    d880:	bd08      	pop	{r3, pc}
		le_ltk_req_reply(cmd, evt);
    d882:	4611      	mov	r1, r2
    d884:	4618      	mov	r0, r3
    d886:	f7ff fd41 	bl	d30c <le_ltk_req_reply>
	return 0;
    d88a:	2000      	movs	r0, #0
		break;
    d88c:	bd08      	pop	{r3, pc}
		le_ltk_req_neg_reply(cmd, evt);
    d88e:	4611      	mov	r1, r2
    d890:	4618      	mov	r0, r3
    d892:	f7ff fd51 	bl	d338 <le_ltk_req_neg_reply>
	return 0;
    d896:	2000      	movs	r0, #0
		break;
    d898:	bd08      	pop	{r3, pc}
		le_read_chan_map(cmd, evt);
    d89a:	4611      	mov	r1, r2
    d89c:	4618      	mov	r0, r3
    d89e:	f7ff fd61 	bl	d364 <le_read_chan_map>
	return 0;
    d8a2:	2000      	movs	r0, #0
		break;
    d8a4:	bd08      	pop	{r3, pc}
		le_read_remote_features(cmd, evt);
    d8a6:	4611      	mov	r1, r2
    d8a8:	4618      	mov	r0, r3
    d8aa:	f7ff fd71 	bl	d390 <le_read_remote_features>
	return 0;
    d8ae:	2000      	movs	r0, #0
		break;
    d8b0:	bd08      	pop	{r3, pc}
		le_conn_update(cmd, evt);
    d8b2:	4611      	mov	r1, r2
    d8b4:	4618      	mov	r0, r3
    d8b6:	f7f9 f9c1 	bl	6c3c <le_conn_update>
	return 0;
    d8ba:	2000      	movs	r0, #0
		break;
    d8bc:	bd08      	pop	{r3, pc}
		le_conn_param_req_reply(cmd, evt);
    d8be:	4611      	mov	r1, r2
    d8c0:	4618      	mov	r0, r3
    d8c2:	f7f7 fe47 	bl	5554 <le_conn_param_req_reply>
	return 0;
    d8c6:	2000      	movs	r0, #0
		break;
    d8c8:	bd08      	pop	{r3, pc}
		le_conn_param_req_neg_reply(cmd, evt);
    d8ca:	4611      	mov	r1, r2
    d8cc:	4618      	mov	r0, r3
    d8ce:	f7ff fd6b 	bl	d3a8 <le_conn_param_req_neg_reply>
	return 0;
    d8d2:	2000      	movs	r0, #0
		break;
    d8d4:	bd08      	pop	{r3, pc}
		le_set_data_len(cmd, evt);
    d8d6:	4611      	mov	r1, r2
    d8d8:	4618      	mov	r0, r3
    d8da:	f7ff fd80 	bl	d3de <le_set_data_len>
	return 0;
    d8de:	2000      	movs	r0, #0
		break;
    d8e0:	bd08      	pop	{r3, pc}
		le_read_default_data_len(cmd, evt);
    d8e2:	4611      	mov	r1, r2
    d8e4:	4618      	mov	r0, r3
    d8e6:	f7ff fd90 	bl	d40a <le_read_default_data_len>
	return 0;
    d8ea:	2000      	movs	r0, #0
		break;
    d8ec:	bd08      	pop	{r3, pc}
		le_write_default_data_len(cmd, evt);
    d8ee:	4611      	mov	r1, r2
    d8f0:	4618      	mov	r0, r3
    d8f2:	f7ff fd97 	bl	d424 <le_write_default_data_len>
	return 0;
    d8f6:	2000      	movs	r0, #0
		break;
    d8f8:	bd08      	pop	{r3, pc}
		le_read_max_data_len(cmd, evt);
    d8fa:	4611      	mov	r1, r2
    d8fc:	4618      	mov	r0, r3
    d8fe:	f7ff fda3 	bl	d448 <le_read_max_data_len>
	return 0;
    d902:	2000      	movs	r0, #0
		break;
    d904:	bd08      	pop	{r3, pc}
		le_read_phy(cmd, evt);
    d906:	4611      	mov	r1, r2
    d908:	4618      	mov	r0, r3
    d90a:	f7ff fde7 	bl	d4dc <le_read_phy>
	return 0;
    d90e:	2000      	movs	r0, #0
		break;
    d910:	bd08      	pop	{r3, pc}
		le_set_default_phy(cmd, evt);
    d912:	4611      	mov	r1, r2
    d914:	4618      	mov	r0, r3
    d916:	f7ff fe0c 	bl	d532 <le_set_default_phy>
	return 0;
    d91a:	2000      	movs	r0, #0
		break;
    d91c:	bd08      	pop	{r3, pc}
		le_set_phy(cmd, evt);
    d91e:	4611      	mov	r1, r2
    d920:	4618      	mov	r0, r3
    d922:	f7ff fe23 	bl	d56c <le_set_phy>
	return 0;
    d926:	2000      	movs	r0, #0
		break;
    d928:	bd08      	pop	{r3, pc}
		le_add_dev_to_rl(cmd, evt);
    d92a:	4611      	mov	r1, r2
    d92c:	4618      	mov	r0, r3
    d92e:	f7ff fe40 	bl	d5b2 <le_add_dev_to_rl>
	return 0;
    d932:	2000      	movs	r0, #0
		break;
    d934:	bd08      	pop	{r3, pc}
		le_rem_dev_from_rl(cmd, evt);
    d936:	4611      	mov	r1, r2
    d938:	4618      	mov	r0, r3
    d93a:	f7ff fe49 	bl	d5d0 <le_rem_dev_from_rl>
	return 0;
    d93e:	2000      	movs	r0, #0
		break;
    d940:	bd08      	pop	{r3, pc}
		le_clear_rl(cmd, evt);
    d942:	4611      	mov	r1, r2
    d944:	4618      	mov	r0, r3
    d946:	f7ff fe4f 	bl	d5e8 <le_clear_rl>
	return 0;
    d94a:	2000      	movs	r0, #0
		break;
    d94c:	bd08      	pop	{r3, pc}
		le_read_rl_size(cmd, evt);
    d94e:	4611      	mov	r1, r2
    d950:	4618      	mov	r0, r3
    d952:	f7ff fe53 	bl	d5fc <le_read_rl_size>
	return 0;
    d956:	2000      	movs	r0, #0
		break;
    d958:	bd08      	pop	{r3, pc}
		le_read_peer_rpa(cmd, evt);
    d95a:	4611      	mov	r1, r2
    d95c:	4618      	mov	r0, r3
    d95e:	f7ff fe59 	bl	d614 <le_read_peer_rpa>
	return 0;
    d962:	2000      	movs	r0, #0
		break;
    d964:	bd08      	pop	{r3, pc}
		le_read_local_rpa(cmd, evt);
    d966:	4611      	mov	r1, r2
    d968:	4618      	mov	r0, r3
    d96a:	f7ff fe67 	bl	d63c <le_read_local_rpa>
	return 0;
    d96e:	2000      	movs	r0, #0
		break;
    d970:	bd08      	pop	{r3, pc}
		le_set_addr_res_enable(cmd, evt);
    d972:	4611      	mov	r1, r2
    d974:	4618      	mov	r0, r3
    d976:	f7ff fe75 	bl	d664 <le_set_addr_res_enable>
	return 0;
    d97a:	2000      	movs	r0, #0
		break;
    d97c:	bd08      	pop	{r3, pc}
		le_set_rpa_timeout(cmd, evt);
    d97e:	4611      	mov	r1, r2
    d980:	4618      	mov	r0, r3
    d982:	f7ff fe7d 	bl	d680 <le_set_rpa_timeout>
	return 0;
    d986:	2000      	movs	r0, #0
		break;
    d988:	bd08      	pop	{r3, pc}
		le_set_privacy_mode(cmd, evt);
    d98a:	4611      	mov	r1, r2
    d98c:	4618      	mov	r0, r3
    d98e:	f7ff fe84 	bl	d69a <le_set_privacy_mode>
	return 0;
    d992:	2000      	movs	r0, #0
		break;
    d994:	bd08      	pop	{r3, pc}
		le_read_tx_power(cmd, evt);
    d996:	4611      	mov	r1, r2
    d998:	4618      	mov	r0, r3
    d99a:	f7ff fe8b 	bl	d6b4 <le_read_tx_power>
	return 0;
    d99e:	2000      	movs	r0, #0
		break;
    d9a0:	bd08      	pop	{r3, pc}
		return -EINVAL;
    d9a2:	f06f 0015 	mvn.w	r0, #21
}
    d9a6:	bd08      	pop	{r3, pc}

0000d9a8 <data_buf_overflow>:
	if (!(event_mask & BT_EVT_MASK_DATA_BUFFER_OVERFLOW)) {
    d9a8:	4b0e      	ldr	r3, [pc, #56]	; (d9e4 <data_buf_overflow+0x3c>)
    d9aa:	e9d3 2300 	ldrd	r2, r3, [r3]
    d9ae:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
    d9b2:	2300      	movs	r3, #0
    d9b4:	4313      	orrs	r3, r2
    d9b6:	d100      	bne.n	d9ba <data_buf_overflow+0x12>
    d9b8:	4770      	bx	lr
{
    d9ba:	b510      	push	{r4, lr}
    d9bc:	4604      	mov	r4, r0
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    d9be:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    d9c2:	2001      	movs	r0, #1
    d9c4:	f7f8 fa1c 	bl	5e00 <bt_buf_get_rx>
    d9c8:	6020      	str	r0, [r4, #0]
	evt_create(*buf, BT_HCI_EVT_DATA_BUF_OVERFLOW, sizeof(*ep));
    d9ca:	2201      	movs	r2, #1
    d9cc:	211a      	movs	r1, #26
    d9ce:	f7fe febf 	bl	c750 <evt_create>
	ep = net_buf_add(*buf, sizeof(*ep));
    d9d2:	6820      	ldr	r0, [r4, #0]
    d9d4:	2101      	movs	r1, #1
    d9d6:	3008      	adds	r0, #8
    d9d8:	f00c fbe0 	bl	1a19c <net_buf_simple_add>
	ep->link_type = BT_OVERFLOW_LINK_ACL;
    d9dc:	2301      	movs	r3, #1
    d9de:	7003      	strb	r3, [r0, #0]
    d9e0:	bd10      	pop	{r4, pc}
    d9e2:	bf00      	nop
    d9e4:	2000baf8 	.word	0x2000baf8

0000d9e8 <encode_data_ctrl>:
{
    d9e8:	b510      	push	{r4, lr}
    d9ea:	460c      	mov	r4, r1
	u16_t handle = node_rx->hdr.handle;
    d9ec:	88c1      	ldrh	r1, [r0, #6]
	switch (pdu_data->payload.llctrl.opcode) {
    d9ee:	78e0      	ldrb	r0, [r4, #3]
    d9f0:	3803      	subs	r0, #3
    d9f2:	2812      	cmp	r0, #18
    d9f4:	d82e      	bhi.n	da54 <encode_data_ctrl+0x6c>
    d9f6:	e8df f000 	tbb	[pc, r0]
    d9fa:	2d0a      	.short	0x2d0a
    d9fc:	2d290e2d 	.word	0x2d290e2d
    da00:	192d2d12 	.word	0x192d2d12
    da04:	2d212d1d 	.word	0x2d212d1d
    da08:	252d2d2d 	.word	0x252d2d2d
    da0c:	25          	.byte	0x25
    da0d:	00          	.byte	0x00
		le_ltk_request(pdu_data, handle, buf);
    da0e:	4620      	mov	r0, r4
    da10:	f7f7 feec 	bl	57ec <le_ltk_request>
		break;
    da14:	bd10      	pop	{r4, pc}
		encrypt_change(0x00, handle, buf);
    da16:	2000      	movs	r0, #0
    da18:	f7ff f826 	bl	ca68 <encrypt_change>
		break;
    da1c:	bd10      	pop	{r4, pc}
		le_remote_feat_complete(0x00, pdu_data, handle, buf);
    da1e:	4613      	mov	r3, r2
    da20:	460a      	mov	r2, r1
    da22:	4621      	mov	r1, r4
    da24:	2000      	movs	r0, #0
    da26:	f7f7 fceb 	bl	5400 <le_remote_feat_complete>
		break;
    da2a:	bd10      	pop	{r4, pc}
		remote_version_info(pdu_data, handle, buf);
    da2c:	4620      	mov	r0, r4
    da2e:	f7fe fff5 	bl	ca1c <remote_version_info>
		break;
    da32:	bd10      	pop	{r4, pc}
		encrypt_change(pdu_data->payload.llctrl.ctrldata.reject_ind.
    da34:	7920      	ldrb	r0, [r4, #4]
    da36:	f7ff f817 	bl	ca68 <encrypt_change>
		break;
    da3a:	bd10      	pop	{r4, pc}
		le_conn_param_req(pdu_data, handle, buf);
    da3c:	4620      	mov	r0, r4
    da3e:	f7f7 fdd7 	bl	55f0 <le_conn_param_req>
		break;
    da42:	bd10      	pop	{r4, pc}
		le_data_len_change(pdu_data, handle, buf);
    da44:	4620      	mov	r0, r4
    da46:	f7f6 fa43 	bl	3ed0 <le_data_len_change>
		break;
    da4a:	bd10      	pop	{r4, pc}
		le_unknown_rsp(pdu_data, handle, buf);
    da4c:	4620      	mov	r0, r4
    da4e:	f7ff fb66 	bl	d11e <le_unknown_rsp>
		break;
    da52:	bd10      	pop	{r4, pc}
		LL_ASSERT(0);
    da54:	4040      	eors	r0, r0
    da56:	f380 8811 	msr	BASEPRI, r0
    da5a:	f04f 0004 	mov.w	r0, #4
    da5e:	df02      	svc	2

0000da60 <le_advertising_report>:
{
    da60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    da64:	b082      	sub	sp, #8
    da66:	4605      	mov	r5, r0
    da68:	460e      	mov	r6, r1
    da6a:	4691      	mov	r9, r2
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    da6c:	4b90      	ldr	r3, [pc, #576]	; (dcb0 <le_advertising_report+0x250>)
    da6e:	e893 0003 	ldmia.w	r3, {r0, r1}
    da72:	9000      	str	r0, [sp, #0]
    da74:	f8ad 1004 	strh.w	r1, [sp, #4]
    da78:	0c09      	lsrs	r1, r1, #16
    da7a:	f88d 1006 	strb.w	r1, [sp, #6]
		   offsetof(struct pdu_adv, payload) + adv->len + 1];
    da7e:	786b      	ldrb	r3, [r5, #1]
	rl_idx = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    da80:	330b      	adds	r3, #11
    da82:	f816 8003 	ldrb.w	r8, [r6, r3]
	if (adv->tx_addr) {
    da86:	782b      	ldrb	r3, [r5, #0]
    da88:	f013 0f40 	tst.w	r3, #64	; 0x40
    da8c:	d125      	bne.n	dada <le_advertising_report+0x7a>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT)) {
    da8e:	4b89      	ldr	r3, [pc, #548]	; (dcb4 <le_advertising_report+0x254>)
    da90:	e9d3 2300 	ldrd	r2, r3, [r3]
    da94:	2200      	movs	r2, #0
    da96:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    da9a:	4313      	orrs	r3, r2
    da9c:	f000 80b0 	beq.w	dc00 <le_advertising_report+0x1a0>
		   offsetof(struct pdu_adv, payload) + adv->len + 2];
    daa0:	786b      	ldrb	r3, [r5, #1]
	direct = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    daa2:	330c      	adds	r3, #12
    daa4:	5cf7      	ldrb	r7, [r6, r3]
	if ((!direct && !(le_event_mask & BT_EVT_MASK_LE_ADVERTISING_REPORT)) ||
    daa6:	b947      	cbnz	r7, daba <le_advertising_report+0x5a>
    daa8:	4b83      	ldr	r3, [pc, #524]	; (dcb8 <le_advertising_report+0x258>)
    daaa:	e9d3 2300 	ldrd	r2, r3, [r3]
    daae:	f002 0202 	and.w	r2, r2, #2
    dab2:	2300      	movs	r3, #0
    dab4:	4313      	orrs	r3, r2
    dab6:	f000 80a3 	beq.w	dc00 <le_advertising_report+0x1a0>
    daba:	b147      	cbz	r7, dace <le_advertising_report+0x6e>
	    (direct && !(le_event_mask & BT_HCI_EVT_LE_DIRECT_ADV_REPORT))) {
    dabc:	4b7e      	ldr	r3, [pc, #504]	; (dcb8 <le_advertising_report+0x258>)
    dabe:	e9d3 2300 	ldrd	r2, r3, [r3]
    dac2:	f002 020b 	and.w	r2, r2, #11
    dac6:	2300      	movs	r3, #0
    dac8:	4313      	orrs	r3, r2
    daca:	f000 8099 	beq.w	dc00 <le_advertising_report+0x1a0>
	if (dup_count >= 0) {
    dace:	4b7b      	ldr	r3, [pc, #492]	; (dcbc <le_advertising_report+0x25c>)
    dad0:	681b      	ldr	r3, [r3, #0]
    dad2:	2b00      	cmp	r3, #0
    dad4:	db08      	blt.n	dae8 <le_advertising_report+0x88>
    dad6:	2400      	movs	r4, #0
    dad8:	e009      	b.n	daee <le_advertising_report+0x8e>
		ll_rl_crpa_set(0x00, NULL, rl_idx,
    dada:	1cab      	adds	r3, r5, #2
    dadc:	4642      	mov	r2, r8
    dade:	2100      	movs	r1, #0
    dae0:	4608      	mov	r0, r1
    dae2:	f00b fea7 	bl	19834 <ll_rl_crpa_set>
    dae6:	e7d2      	b.n	da8e <le_advertising_report+0x2e>
	return false;
    dae8:	2300      	movs	r3, #0
    daea:	e054      	b.n	db96 <le_advertising_report+0x136>
		for (i = 0; i < dup_count; i++) {
    daec:	3401      	adds	r4, #1
    daee:	4b73      	ldr	r3, [pc, #460]	; (dcbc <le_advertising_report+0x25c>)
    daf0:	681b      	ldr	r3, [r3, #0]
    daf2:	429c      	cmp	r4, r3
    daf4:	da26      	bge.n	db44 <le_advertising_report+0xe4>
				    &dup_filter[i].addr.a.val[0],
    daf6:	4972      	ldr	r1, [pc, #456]	; (dcc0 <le_advertising_report+0x260>)
    daf8:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
			if (!memcmp(&adv->payload.adv_ind.addr[0],
    dafc:	2206      	movs	r2, #6
    dafe:	3102      	adds	r1, #2
    db00:	1ca8      	adds	r0, r5, #2
    db02:	f01c ff2b 	bl	2a95c <memcmp>
    db06:	2800      	cmp	r0, #0
    db08:	d1f0      	bne.n	daec <le_advertising_report+0x8c>
			    adv->tx_addr == dup_filter[i].addr.type) {
    db0a:	782b      	ldrb	r3, [r5, #0]
    db0c:	f3c3 1380 	ubfx	r3, r3, #6, #1
    db10:	4a6b      	ldr	r2, [pc, #428]	; (dcc0 <le_advertising_report+0x260>)
    db12:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
    db16:	7852      	ldrb	r2, [r2, #1]
				    sizeof(bt_addr_t)) &&
    db18:	4293      	cmp	r3, r2
    db1a:	d1e7      	bne.n	daec <le_advertising_report+0x8c>
				if (dup_filter[i].mask & BIT(adv->type)) {
    db1c:	4b68      	ldr	r3, [pc, #416]	; (dcc0 <le_advertising_report+0x260>)
    db1e:	f813 2034 	ldrb.w	r2, [r3, r4, lsl #3]
    db22:	782b      	ldrb	r3, [r5, #0]
    db24:	f003 030f 	and.w	r3, r3, #15
    db28:	fa22 f103 	lsr.w	r1, r2, r3
    db2c:	f011 0f01 	tst.w	r1, #1
    db30:	d171      	bne.n	dc16 <le_advertising_report+0x1b6>
				dup_filter[i].mask |= BIT(adv->type);
    db32:	2101      	movs	r1, #1
    db34:	fa01 f303 	lsl.w	r3, r1, r3
    db38:	431a      	orrs	r2, r3
    db3a:	4b61      	ldr	r3, [pc, #388]	; (dcc0 <le_advertising_report+0x260>)
    db3c:	f803 2034 	strb.w	r2, [r3, r4, lsl #3]
				return false;
    db40:	2300      	movs	r3, #0
    db42:	e028      	b.n	db96 <le_advertising_report+0x136>
		memcpy(&dup_filter[dup_curr].addr.a.val[0],
    db44:	f8df a17c 	ldr.w	sl, [pc, #380]	; dcc4 <le_advertising_report+0x264>
    db48:	f8da 0000 	ldr.w	r0, [sl]
    db4c:	4c5c      	ldr	r4, [pc, #368]	; (dcc0 <le_advertising_report+0x260>)
    db4e:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    db52:	2206      	movs	r2, #6
    db54:	1ca9      	adds	r1, r5, #2
    db56:	3002      	adds	r0, #2
    db58:	f7f2 fbb2 	bl	2c0 <memcpy>
		dup_filter[dup_curr].addr.type = adv->tx_addr;
    db5c:	f8da 3000 	ldr.w	r3, [sl]
    db60:	782a      	ldrb	r2, [r5, #0]
    db62:	f3c2 1280 	ubfx	r2, r2, #6, #1
    db66:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
    db6a:	704a      	strb	r2, [r1, #1]
		dup_filter[dup_curr].mask = BIT(adv->type);
    db6c:	782a      	ldrb	r2, [r5, #0]
    db6e:	f002 010f 	and.w	r1, r2, #15
    db72:	2201      	movs	r2, #1
    db74:	408a      	lsls	r2, r1
    db76:	f804 2033 	strb.w	r2, [r4, r3, lsl #3]
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    db7a:	4a50      	ldr	r2, [pc, #320]	; (dcbc <le_advertising_report+0x25c>)
    db7c:	6812      	ldr	r2, [r2, #0]
    db7e:	2a0f      	cmp	r2, #15
    db80:	dc41      	bgt.n	dc06 <le_advertising_report+0x1a6>
			dup_count++;
    db82:	3201      	adds	r2, #1
    db84:	4b4d      	ldr	r3, [pc, #308]	; (dcbc <le_advertising_report+0x25c>)
    db86:	601a      	str	r2, [r3, #0]
			dup_curr = dup_count;
    db88:	f8ca 2000 	str.w	r2, [sl]
		if (dup_curr == CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    db8c:	4b4d      	ldr	r3, [pc, #308]	; (dcc4 <le_advertising_report+0x264>)
    db8e:	681b      	ldr	r3, [r3, #0]
    db90:	2b10      	cmp	r3, #16
    db92:	d03c      	beq.n	dc0e <le_advertising_report+0x1ae>
	return false;
    db94:	2300      	movs	r3, #0
	if (dup_found(adv)) {
    db96:	bb9b      	cbnz	r3, dc00 <le_advertising_report+0x1a0>
	if (adv->type != PDU_ADV_TYPE_DIRECT_IND) {
    db98:	782b      	ldrb	r3, [r5, #0]
    db9a:	f003 030f 	and.w	r3, r3, #15
    db9e:	2b01      	cmp	r3, #1
    dba0:	d03b      	beq.n	dc1a <le_advertising_report+0x1ba>
		data_len = (adv->len - BDADDR_SIZE);
    dba2:	786c      	ldrb	r4, [r5, #1]
    dba4:	3c06      	subs	r4, #6
    dba6:	b2e4      	uxtb	r4, r4
		  offsetof(struct pdu_adv, payload) + adv->len];
    dba8:	786a      	ldrb	r2, [r5, #1]
    dbaa:	320a      	adds	r2, #10
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    dbac:	f816 a002 	ldrb.w	sl, [r6, r2]
    dbb0:	f1ca 0a00 	rsb	sl, sl, #0
    dbb4:	fa4f fa8a 	sxtb.w	sl, sl
	if (direct) {
    dbb8:	2f00      	cmp	r7, #0
    dbba:	d041      	beq.n	dc40 <le_advertising_report+0x1e0>
		LL_ASSERT(adv->type == PDU_ADV_TYPE_DIRECT_IND);
    dbbc:	2b01      	cmp	r3, #1
    dbbe:	d12e      	bne.n	dc1e <le_advertising_report+0x1be>
		drp = meta_evt(buf, BT_HCI_EVT_LE_DIRECT_ADV_REPORT,
    dbc0:	2211      	movs	r2, #17
    dbc2:	210b      	movs	r1, #11
    dbc4:	4648      	mov	r0, r9
    dbc6:	f7fe fe8f 	bl	c8e8 <meta_evt>
    dbca:	4604      	mov	r4, r0
		drp->num_reports = 1;
    dbcc:	2301      	movs	r3, #1
    dbce:	7003      	strb	r3, [r0, #0]
		dir_info->evt_type = c_adv_type[PDU_ADV_TYPE_DIRECT_IND];
    dbd0:	7043      	strb	r3, [r0, #1]
		if (rl_idx < ll_rl_size_get()) {
    dbd2:	f00b fce3 	bl	1959c <ll_rl_size_get>
    dbd6:	4580      	cmp	r8, r0
    dbd8:	d227      	bcs.n	dc2a <le_advertising_report+0x1ca>
			ll_rl_id_addr_get(rl_idx, &dir_info->addr.type,
    dbda:	1ce2      	adds	r2, r4, #3
    dbdc:	1ca1      	adds	r1, r4, #2
    dbde:	4640      	mov	r0, r8
    dbe0:	f00b fa84 	bl	190ec <ll_rl_id_addr_get>
			dir_info->addr.type += 2;
    dbe4:	78a3      	ldrb	r3, [r4, #2]
    dbe6:	3302      	adds	r3, #2
    dbe8:	70a3      	strb	r3, [r4, #2]
		dir_info->dir_addr.type = 0x1;
    dbea:	2301      	movs	r3, #1
    dbec:	7263      	strb	r3, [r4, #9]
		memcpy(&dir_info->dir_addr.a.val[0],
    dbee:	2206      	movs	r2, #6
    dbf0:	f105 0108 	add.w	r1, r5, #8
    dbf4:	f104 000a 	add.w	r0, r4, #10
    dbf8:	f7f2 fb62 	bl	2c0 <memcpy>
		dir_info->rssi = rssi;
    dbfc:	f884 a010 	strb.w	sl, [r4, #16]
}
    dc00:	b002      	add	sp, #8
    dc02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			dup_curr++;
    dc06:	3301      	adds	r3, #1
    dc08:	4a2e      	ldr	r2, [pc, #184]	; (dcc4 <le_advertising_report+0x264>)
    dc0a:	6013      	str	r3, [r2, #0]
    dc0c:	e7be      	b.n	db8c <le_advertising_report+0x12c>
			dup_curr = 0;
    dc0e:	2300      	movs	r3, #0
    dc10:	4a2c      	ldr	r2, [pc, #176]	; (dcc4 <le_advertising_report+0x264>)
    dc12:	6013      	str	r3, [r2, #0]
    dc14:	e7bf      	b.n	db96 <le_advertising_report+0x136>
					return true;
    dc16:	2301      	movs	r3, #1
    dc18:	e7bd      	b.n	db96 <le_advertising_report+0x136>
		data_len = 0;
    dc1a:	2400      	movs	r4, #0
    dc1c:	e7c4      	b.n	dba8 <le_advertising_report+0x148>
		LL_ASSERT(adv->type == PDU_ADV_TYPE_DIRECT_IND);
    dc1e:	4040      	eors	r0, r0
    dc20:	f380 8811 	msr	BASEPRI, r0
    dc24:	f04f 0004 	mov.w	r0, #4
    dc28:	df02      	svc	2
			dir_info->addr.type = adv->tx_addr;
    dc2a:	4629      	mov	r1, r5
    dc2c:	f811 3b02 	ldrb.w	r3, [r1], #2
    dc30:	f3c3 1380 	ubfx	r3, r3, #6, #1
    dc34:	70a3      	strb	r3, [r4, #2]
			memcpy(&dir_info->addr.a.val[0],
    dc36:	2206      	movs	r2, #6
    dc38:	1ce0      	adds	r0, r4, #3
    dc3a:	f7f2 fb41 	bl	2c0 <memcpy>
    dc3e:	e7d4      	b.n	dbea <le_advertising_report+0x18a>
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    dc40:	f104 020b 	add.w	r2, r4, #11
    dc44:	b2d2      	uxtb	r2, r2
    dc46:	2102      	movs	r1, #2
    dc48:	4648      	mov	r0, r9
    dc4a:	f7fe fe4d 	bl	c8e8 <meta_evt>
    dc4e:	4607      	mov	r7, r0
	sep->num_reports = 1;
    dc50:	2301      	movs	r3, #1
    dc52:	7003      	strb	r3, [r0, #0]
	adv_info->evt_type = c_adv_type[adv->type];
    dc54:	782b      	ldrb	r3, [r5, #0]
    dc56:	f003 030f 	and.w	r3, r3, #15
    dc5a:	aa02      	add	r2, sp, #8
    dc5c:	4413      	add	r3, r2
    dc5e:	f813 3c08 	ldrb.w	r3, [r3, #-8]
    dc62:	7043      	strb	r3, [r0, #1]
		   offsetof(struct pdu_adv, payload) + adv->len + 1];
    dc64:	786b      	ldrb	r3, [r5, #1]
	rl_idx = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    dc66:	330b      	adds	r3, #11
    dc68:	5cf6      	ldrb	r6, [r6, r3]
	if (rl_idx < ll_rl_size_get()) {
    dc6a:	f00b fc97 	bl	1959c <ll_rl_size_get>
    dc6e:	4286      	cmp	r6, r0
    dc70:	d212      	bcs.n	dc98 <le_advertising_report+0x238>
		ll_rl_id_addr_get(rl_idx, &adv_info->addr.type,
    dc72:	1cfa      	adds	r2, r7, #3
    dc74:	1cb9      	adds	r1, r7, #2
    dc76:	4630      	mov	r0, r6
    dc78:	f00b fa38 	bl	190ec <ll_rl_id_addr_get>
		adv_info->addr.type += 2;
    dc7c:	78bb      	ldrb	r3, [r7, #2]
    dc7e:	3302      	adds	r3, #2
    dc80:	70bb      	strb	r3, [r7, #2]
	adv_info->length = data_len;
    dc82:	727c      	strb	r4, [r7, #9]
	memcpy(&adv_info->data[0], &adv->payload.adv_ind.data[0], data_len);
    dc84:	370a      	adds	r7, #10
    dc86:	4622      	mov	r2, r4
    dc88:	f105 0108 	add.w	r1, r5, #8
    dc8c:	4638      	mov	r0, r7
    dc8e:	f7f2 fb17 	bl	2c0 <memcpy>
	*prssi = rssi;
    dc92:	f807 a004 	strb.w	sl, [r7, r4]
    dc96:	e7b3      	b.n	dc00 <le_advertising_report+0x1a0>
		adv_info->addr.type = adv->tx_addr;
    dc98:	4629      	mov	r1, r5
    dc9a:	f811 3b02 	ldrb.w	r3, [r1], #2
    dc9e:	f3c3 1380 	ubfx	r3, r3, #6, #1
    dca2:	70bb      	strb	r3, [r7, #2]
		memcpy(&adv_info->addr.a.val[0], &adv->payload.adv_ind.addr[0],
    dca4:	2206      	movs	r2, #6
    dca6:	1cf8      	adds	r0, r7, #3
    dca8:	f7f2 fb0a 	bl	2c0 <memcpy>
    dcac:	e7e9      	b.n	dc82 <le_advertising_report+0x222>
    dcae:	bf00      	nop
    dcb0:	0002ee28 	.word	0x0002ee28
    dcb4:	2000baf8 	.word	0x2000baf8
    dcb8:	2000bb00 	.word	0x2000bb00
    dcbc:	200009d8 	.word	0x200009d8
    dcc0:	200009e0 	.word	0x200009e0
    dcc4:	200009dc 	.word	0x200009dc

0000dcc8 <le_adv_ext_report>:
		  offsetof(struct pdu_adv, payload) + adv->len];
    dcc8:	7842      	ldrb	r2, [r0, #1]
	if ((adv->type == PDU_ADV_TYPE_EXT_IND) && adv->len) {
    dcca:	7803      	ldrb	r3, [r0, #0]
    dccc:	f003 030f 	and.w	r3, r3, #15
    dcd0:	2b07      	cmp	r3, #7
    dcd2:	d000      	beq.n	dcd6 <le_adv_ext_report+0xe>
    dcd4:	4770      	bx	lr
    dcd6:	2a00      	cmp	r2, #0
    dcd8:	d0fc      	beq.n	dcd4 <le_adv_ext_report+0xc>
		ptr = (u8_t *)h + sizeof(*h);
    dcda:	1d01      	adds	r1, r0, #4
		if (!p->ext_hdr_len) {
    dcdc:	7883      	ldrb	r3, [r0, #2]
    dcde:	f013 0f3f 	tst.w	r3, #63	; 0x3f
    dce2:	d0f7      	beq.n	dcd4 <le_adv_ext_report+0xc>
		if (h->adv_addr) {
    dce4:	78c3      	ldrb	r3, [r0, #3]
    dce6:	f013 0f01 	tst.w	r3, #1
    dcea:	d0f3      	beq.n	dcd4 <le_adv_ext_report+0xc>
{
    dcec:	b570      	push	{r4, r5, r6, lr}
    dcee:	b092      	sub	sp, #72	; 0x48
			addr.type = adv->tx_addr;
    dcf0:	7803      	ldrb	r3, [r0, #0]
    dcf2:	f3c3 1380 	ubfx	r3, r3, #6, #1
    dcf6:	f88d 3018 	strb.w	r3, [sp, #24]
			memcpy(&addr.a.val[0], ptr, sizeof(bt_addr_t));
    dcfa:	2206      	movs	r2, #6
    dcfc:	f10d 0019 	add.w	r0, sp, #25
    dd00:	f7f2 fade 	bl	2c0 <memcpy>
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    dd04:	f89d 3018 	ldrb.w	r3, [sp, #24]
    dd08:	2b03      	cmp	r3, #3
    dd0a:	d830      	bhi.n	dd6e <le_adv_ext_report+0xa6>
    dd0c:	e8df f003 	tbb	[pc, r3]
    dd10:	2a252002 	.word	0x2a252002
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    dd14:	4919      	ldr	r1, [pc, #100]	; (dd7c <le_adv_ext_report+0xb4>)
    dd16:	a808      	add	r0, sp, #32
    dd18:	f01c ffe2 	bl	2ace0 <strcpy>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
    dd1c:	f89d 301e 	ldrb.w	r3, [sp, #30]
    dd20:	f89d 201d 	ldrb.w	r2, [sp, #29]
    dd24:	f89d 101c 	ldrb.w	r1, [sp, #28]
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
    dd28:	f89d 001b 	ldrb.w	r0, [sp, #27]
    dd2c:	f89d 401a 	ldrb.w	r4, [sp, #26]
    dd30:	f89d 5019 	ldrb.w	r5, [sp, #25]
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    dd34:	ae08      	add	r6, sp, #32
    dd36:	9605      	str	r6, [sp, #20]
    dd38:	9504      	str	r5, [sp, #16]
    dd3a:	9403      	str	r4, [sp, #12]
    dd3c:	9002      	str	r0, [sp, #8]
    dd3e:	9101      	str	r1, [sp, #4]
    dd40:	9200      	str	r2, [sp, #0]
    dd42:	4a0f      	ldr	r2, [pc, #60]	; (dd80 <le_adv_ext_report+0xb8>)
    dd44:	211b      	movs	r1, #27
    dd46:	a80b      	add	r0, sp, #44	; 0x2c
    dd48:	f7f5 f90c 	bl	2f64 <snprintk>
}
    dd4c:	b012      	add	sp, #72	; 0x48
    dd4e:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    dd50:	490c      	ldr	r1, [pc, #48]	; (dd84 <le_adv_ext_report+0xbc>)
    dd52:	a808      	add	r0, sp, #32
    dd54:	f01c ffc4 	bl	2ace0 <strcpy>
    dd58:	e7e0      	b.n	dd1c <le_adv_ext_report+0x54>
		strcpy(type, "public id");
    dd5a:	490b      	ldr	r1, [pc, #44]	; (dd88 <le_adv_ext_report+0xc0>)
    dd5c:	a808      	add	r0, sp, #32
    dd5e:	f01c ffbf 	bl	2ace0 <strcpy>
    dd62:	e7db      	b.n	dd1c <le_adv_ext_report+0x54>
		strcpy(type, "random id");
    dd64:	4909      	ldr	r1, [pc, #36]	; (dd8c <le_adv_ext_report+0xc4>)
    dd66:	a808      	add	r0, sp, #32
    dd68:	f01c ffba 	bl	2ace0 <strcpy>
    dd6c:	e7d6      	b.n	dd1c <le_adv_ext_report+0x54>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    dd6e:	4a08      	ldr	r2, [pc, #32]	; (dd90 <le_adv_ext_report+0xc8>)
    dd70:	210a      	movs	r1, #10
    dd72:	a808      	add	r0, sp, #32
    dd74:	f7f5 f8f6 	bl	2f64 <snprintk>
    dd78:	e7d0      	b.n	dd1c <le_adv_ext_report+0x54>
    dd7a:	bf00      	nop
    dd7c:	0002f654 	.word	0x0002f654
    dd80:	0002f684 	.word	0x0002f684
    dd84:	0002f65c 	.word	0x0002f65c
    dd88:	0002f664 	.word	0x0002f664
    dd8c:	0002f670 	.word	0x0002f670
    dd90:	0002f67c 	.word	0x0002f67c

0000dd94 <le_adv_ext_1M_report>:
{
    dd94:	b508      	push	{r3, lr}
	le_adv_ext_report(pdu_data, b, buf, BIT(0));
    dd96:	2301      	movs	r3, #1
    dd98:	f7ff ff96 	bl	dcc8 <le_adv_ext_report>
    dd9c:	bd08      	pop	{r3, pc}

0000dd9e <le_adv_ext_coded_report>:
{
    dd9e:	b508      	push	{r3, lr}
	le_adv_ext_report(pdu_data, b, buf, BIT(2));
    dda0:	2304      	movs	r3, #4
    dda2:	f7ff ff91 	bl	dcc8 <le_adv_ext_report>
    dda6:	bd08      	pop	{r3, pc}

0000dda8 <le_scan_req_received>:
{
    dda8:	b570      	push	{r4, r5, r6, lr}
    ddaa:	b092      	sub	sp, #72	; 0x48
    ddac:	4604      	mov	r4, r0
    ddae:	4610      	mov	r0, r2
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    ddb0:	4b33      	ldr	r3, [pc, #204]	; (de80 <le_scan_req_received+0xd8>)
    ddb2:	e9d3 2300 	ldrd	r2, r3, [r3]
    ddb6:	2200      	movs	r2, #0
    ddb8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    ddbc:	4313      	orrs	r3, r2
    ddbe:	d007      	beq.n	ddd0 <le_scan_req_received+0x28>
	    !(le_event_mask & BT_EVT_MASK_LE_SCAN_REQ_RECEIVED)) {
    ddc0:	4b30      	ldr	r3, [pc, #192]	; (de84 <le_scan_req_received+0xdc>)
    ddc2:	e9d3 2300 	ldrd	r2, r3, [r3]
    ddc6:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
    ddca:	2300      	movs	r3, #0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    ddcc:	4313      	orrs	r3, r2
    ddce:	d146      	bne.n	de5e <le_scan_req_received+0xb6>
		addr.type = adv->tx_addr;
    ddd0:	4621      	mov	r1, r4
    ddd2:	f811 3b02 	ldrb.w	r3, [r1], #2
    ddd6:	f3c3 1380 	ubfx	r3, r3, #6, #1
    ddda:	f88d 3018 	strb.w	r3, [sp, #24]
		memcpy(&addr.a.val[0], &adv->payload.scan_req.scan_addr[0],
    ddde:	2206      	movs	r2, #6
    dde0:	f10d 0019 	add.w	r0, sp, #25
    dde4:	f7f2 fa6c 	bl	2c0 <memcpy>
	switch (addr->type) {
    dde8:	f89d 3018 	ldrb.w	r3, [sp, #24]
    ddec:	2b03      	cmp	r3, #3
    ddee:	d830      	bhi.n	de52 <le_scan_req_received+0xaa>
    ddf0:	e8df f003 	tbb	[pc, r3]
    ddf4:	2a252002 	.word	0x2a252002
		strcpy(type, "public");
    ddf8:	4923      	ldr	r1, [pc, #140]	; (de88 <le_scan_req_received+0xe0>)
    ddfa:	a808      	add	r0, sp, #32
    ddfc:	f01c ff70 	bl	2ace0 <strcpy>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
    de00:	f89d 301e 	ldrb.w	r3, [sp, #30]
    de04:	f89d 201d 	ldrb.w	r2, [sp, #29]
    de08:	f89d 101c 	ldrb.w	r1, [sp, #28]
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
    de0c:	f89d 001b 	ldrb.w	r0, [sp, #27]
    de10:	f89d 401a 	ldrb.w	r4, [sp, #26]
    de14:	f89d 5019 	ldrb.w	r5, [sp, #25]
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    de18:	ae08      	add	r6, sp, #32
    de1a:	9605      	str	r6, [sp, #20]
    de1c:	9504      	str	r5, [sp, #16]
    de1e:	9403      	str	r4, [sp, #12]
    de20:	9002      	str	r0, [sp, #8]
    de22:	9101      	str	r1, [sp, #4]
    de24:	9200      	str	r2, [sp, #0]
    de26:	4a19      	ldr	r2, [pc, #100]	; (de8c <le_scan_req_received+0xe4>)
    de28:	211b      	movs	r1, #27
    de2a:	a80b      	add	r0, sp, #44	; 0x2c
    de2c:	f7f5 f89a 	bl	2f64 <snprintk>
}
    de30:	b012      	add	sp, #72	; 0x48
    de32:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    de34:	4916      	ldr	r1, [pc, #88]	; (de90 <le_scan_req_received+0xe8>)
    de36:	a808      	add	r0, sp, #32
    de38:	f01c ff52 	bl	2ace0 <strcpy>
    de3c:	e7e0      	b.n	de00 <le_scan_req_received+0x58>
		strcpy(type, "public id");
    de3e:	4915      	ldr	r1, [pc, #84]	; (de94 <le_scan_req_received+0xec>)
    de40:	a808      	add	r0, sp, #32
    de42:	f01c ff4d 	bl	2ace0 <strcpy>
    de46:	e7db      	b.n	de00 <le_scan_req_received+0x58>
		strcpy(type, "random id");
    de48:	4913      	ldr	r1, [pc, #76]	; (de98 <le_scan_req_received+0xf0>)
    de4a:	a808      	add	r0, sp, #32
    de4c:	f01c ff48 	bl	2ace0 <strcpy>
    de50:	e7d6      	b.n	de00 <le_scan_req_received+0x58>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    de52:	4a12      	ldr	r2, [pc, #72]	; (de9c <le_scan_req_received+0xf4>)
    de54:	210a      	movs	r1, #10
    de56:	a808      	add	r0, sp, #32
    de58:	f7f5 f884 	bl	2f64 <snprintk>
    de5c:	e7d0      	b.n	de00 <le_scan_req_received+0x58>
	sep = meta_evt(buf, BT_HCI_EVT_LE_SCAN_REQ_RECEIVED, sizeof(*sep));
    de5e:	2208      	movs	r2, #8
    de60:	2113      	movs	r1, #19
    de62:	f7fe fd41 	bl	c8e8 <meta_evt>
	sep->handle = 0;
    de66:	2300      	movs	r3, #0
    de68:	7003      	strb	r3, [r0, #0]
	sep->addr.type = adv->tx_addr;
    de6a:	4621      	mov	r1, r4
    de6c:	f811 3b02 	ldrb.w	r3, [r1], #2
    de70:	f3c3 1380 	ubfx	r3, r3, #6, #1
    de74:	7043      	strb	r3, [r0, #1]
	memcpy(&sep->addr.a.val[0], &adv->payload.scan_req.scan_addr[0],
    de76:	2206      	movs	r2, #6
    de78:	3002      	adds	r0, #2
    de7a:	f7f2 fa21 	bl	2c0 <memcpy>
    de7e:	e7d7      	b.n	de30 <le_scan_req_received+0x88>
    de80:	2000baf8 	.word	0x2000baf8
    de84:	2000bb00 	.word	0x2000bb00
    de88:	0002f654 	.word	0x0002f654
    de8c:	0002f684 	.word	0x0002f684
    de90:	0002f65c 	.word	0x0002f65c
    de94:	0002f664 	.word	0x0002f664
    de98:	0002f670 	.word	0x0002f670
    de9c:	0002f67c 	.word	0x0002f67c

0000dea0 <encode_control>:
{
    dea0:	b510      	push	{r4, lr}
    dea2:	460c      	mov	r4, r1
	handle = node_rx->hdr.handle;
    dea4:	88c1      	ldrh	r1, [r0, #6]
	switch (node_rx->hdr.type) {
    dea6:	7903      	ldrb	r3, [r0, #4]
    dea8:	3b02      	subs	r3, #2
    deaa:	2b0a      	cmp	r3, #10
    deac:	d837      	bhi.n	df1e <encode_control+0x7e>
    deae:	e8df f003 	tbb	[pc, r3]
    deb2:	0b06      	.short	0x0b06
    deb4:	1e1a1510 	.word	0x1e1a1510
    deb8:	2e2a2622 	.word	0x2e2a2622
    debc:	32          	.byte	0x32
    debd:	00          	.byte	0x00
		le_advertising_report(pdu_data, b, buf);
    debe:	4601      	mov	r1, r0
    dec0:	4620      	mov	r0, r4
    dec2:	f7ff fdcd 	bl	da60 <le_advertising_report>
		break;
    dec6:	bd10      	pop	{r4, pc}
		le_adv_ext_1M_report(pdu_data, b, buf);
    dec8:	4601      	mov	r1, r0
    deca:	4620      	mov	r0, r4
    decc:	f7ff ff62 	bl	dd94 <le_adv_ext_1M_report>
		break;
    ded0:	bd10      	pop	{r4, pc}
		le_adv_ext_coded_report(pdu_data, b, buf);
    ded2:	4601      	mov	r1, r0
    ded4:	4620      	mov	r0, r4
    ded6:	f7ff ff62 	bl	dd9e <le_adv_ext_coded_report>
		break;
    deda:	bd10      	pop	{r4, pc}
		le_scan_req_received(pdu_data, b, buf);
    dedc:	4601      	mov	r1, r0
    dede:	4620      	mov	r0, r4
    dee0:	f7ff ff62 	bl	dda8 <le_scan_req_received>
		break;
    dee4:	bd10      	pop	{r4, pc}
		le_conn_complete(pdu_data, handle, buf);
    dee6:	4620      	mov	r0, r4
    dee8:	f7f7 f99e 	bl	5228 <le_conn_complete>
		break;
    deec:	bd10      	pop	{r4, pc}
		disconn_complete(pdu_data, handle, buf);
    deee:	4620      	mov	r0, r4
    def0:	f7fe fd32 	bl	c958 <disconn_complete>
		break;
    def4:	bd10      	pop	{r4, pc}
		le_conn_update_complete(pdu_data, handle, buf);
    def6:	4620      	mov	r0, r4
    def8:	f7f6 f832 	bl	3f60 <le_conn_update_complete>
		break;
    defc:	bd10      	pop	{r4, pc}
		enc_refresh_complete(pdu_data, handle, buf);
    defe:	4620      	mov	r0, r4
    df00:	f7fe fd52 	bl	c9a8 <enc_refresh_complete>
		break;
    df04:	bd10      	pop	{r4, pc}
		auth_payload_timeout_exp(pdu_data, handle, buf);
    df06:	4620      	mov	r0, r4
    df08:	f7fe fd6c 	bl	c9e4 <auth_payload_timeout_exp>
		break;
    df0c:	bd10      	pop	{r4, pc}
		le_chan_sel_algo(pdu_data, handle, buf);
    df0e:	4620      	mov	r0, r4
    df10:	f7fe fcfe 	bl	c910 <le_chan_sel_algo>
		break;
    df14:	bd10      	pop	{r4, pc}
		le_phy_upd_complete(pdu_data, handle, buf);
    df16:	4620      	mov	r0, r4
    df18:	f7ff faa6 	bl	d468 <le_phy_upd_complete>
		return;
    df1c:	bd10      	pop	{r4, pc}
		LL_ASSERT(0);
    df1e:	4040      	eors	r0, r0
    df20:	f380 8811 	msr	BASEPRI, r0
    df24:	f04f 0004 	mov.w	r0, #4
    df28:	df02      	svc	2
	...

0000df2c <hci_cmd_handle>:
{
    df2c:	b510      	push	{r4, lr}
    df2e:	b082      	sub	sp, #8
	struct net_buf *evt = NULL;
    df30:	2300      	movs	r3, #0
    df32:	9301      	str	r3, [sp, #4]
	if (cmd->len < sizeof(*chdr)) {
    df34:	8983      	ldrh	r3, [r0, #12]
    df36:	2b02      	cmp	r3, #2
    df38:	d94a      	bls.n	dfd0 <hci_cmd_handle+0xa4>
	chdr = (void *)cmd->data;
    df3a:	6882      	ldr	r2, [r0, #8]
	_opcode = sys_le16_to_cpu(chdr->opcode);
    df3c:	8814      	ldrh	r4, [r2, #0]
    df3e:	4926      	ldr	r1, [pc, #152]	; (dfd8 <hci_cmd_handle+0xac>)
    df40:	800c      	strh	r4, [r1, #0]
	if (cmd->len < chdr->param_len) {
    df42:	7892      	ldrb	r2, [r2, #2]
    df44:	4293      	cmp	r3, r2
    df46:	d345      	bcc.n	dfd4 <hci_cmd_handle+0xa8>
    df48:	4604      	mov	r4, r0
	net_buf_pull(cmd, sizeof(*chdr));
    df4a:	2103      	movs	r1, #3
    df4c:	3008      	adds	r0, #8
    df4e:	f00c f972 	bl	1a236 <net_buf_simple_pull>
	ocf = BT_OCF(_opcode);
    df52:	4b21      	ldr	r3, [pc, #132]	; (dfd8 <hci_cmd_handle+0xac>)
    df54:	881b      	ldrh	r3, [r3, #0]
    df56:	f3c3 0009 	ubfx	r0, r3, #0, #10
	switch (BT_OGF(_opcode)) {
    df5a:	0a9b      	lsrs	r3, r3, #10
    df5c:	2b04      	cmp	r3, #4
    df5e:	d01c      	beq.n	df9a <hci_cmd_handle+0x6e>
    df60:	d908      	bls.n	df74 <hci_cmd_handle+0x48>
    df62:	2b08      	cmp	r3, #8
    df64:	d023      	beq.n	dfae <hci_cmd_handle+0x82>
    df66:	2b3f      	cmp	r3, #63	; 0x3f
    df68:	d026      	beq.n	dfb8 <hci_cmd_handle+0x8c>
    df6a:	2b05      	cmp	r3, #5
    df6c:	d01a      	beq.n	dfa4 <hci_cmd_handle+0x78>
		err = -EINVAL;
    df6e:	f06f 0015 	mvn.w	r0, #21
    df72:	e00c      	b.n	df8e <hci_cmd_handle+0x62>
	switch (BT_OGF(_opcode)) {
    df74:	2b01      	cmp	r3, #1
    df76:	d006      	beq.n	df86 <hci_cmd_handle+0x5a>
    df78:	2b03      	cmp	r3, #3
    df7a:	d1f8      	bne.n	df6e <hci_cmd_handle+0x42>
		err = ctrl_bb_cmd_handle(ocf, cmd, &evt);
    df7c:	aa01      	add	r2, sp, #4
    df7e:	4621      	mov	r1, r4
    df80:	f7fe fe29 	bl	cbd6 <ctrl_bb_cmd_handle>
		break;
    df84:	e003      	b.n	df8e <hci_cmd_handle+0x62>
		err = link_control_cmd_handle(ocf, cmd, &evt);
    df86:	aa01      	add	r2, sp, #4
    df88:	4621      	mov	r1, r4
    df8a:	f7fe fd9b 	bl	cac4 <link_control_cmd_handle>
	if (err == -EINVAL) {
    df8e:	f110 0f16 	cmn.w	r0, #22
    df92:	d016      	beq.n	dfc2 <hci_cmd_handle+0x96>
	return evt;
    df94:	9801      	ldr	r0, [sp, #4]
}
    df96:	b002      	add	sp, #8
    df98:	bd10      	pop	{r4, pc}
		err = info_cmd_handle(ocf, cmd, &evt);
    df9a:	aa01      	add	r2, sp, #4
    df9c:	4621      	mov	r1, r4
    df9e:	f7fe ffde 	bl	cf5e <info_cmd_handle>
		break;
    dfa2:	e7f4      	b.n	df8e <hci_cmd_handle+0x62>
		err = status_cmd_handle(ocf, cmd, &evt);
    dfa4:	aa01      	add	r2, sp, #4
    dfa6:	4621      	mov	r1, r4
    dfa8:	f7fe fbcf 	bl	c74a <status_cmd_handle>
		break;
    dfac:	e7ef      	b.n	df8e <hci_cmd_handle+0x62>
		err = controller_cmd_handle(ocf, cmd, &evt);
    dfae:	aa01      	add	r2, sp, #4
    dfb0:	4621      	mov	r1, r4
    dfb2:	f7ff fb8c 	bl	d6ce <controller_cmd_handle>
		break;
    dfb6:	e7ea      	b.n	df8e <hci_cmd_handle+0x62>
		err = vendor_cmd_handle(ocf, cmd, &evt);
    dfb8:	aa01      	add	r2, sp, #4
    dfba:	4621      	mov	r1, r4
    dfbc:	f7ff f876 	bl	d0ac <vendor_cmd_handle>
		break;
    dfc0:	e7e5      	b.n	df8e <hci_cmd_handle+0x62>
		ccst = cmd_complete(&evt, sizeof(*ccst));
    dfc2:	2101      	movs	r1, #1
    dfc4:	a801      	add	r0, sp, #4
    dfc6:	f7fe fbf5 	bl	c7b4 <cmd_complete>
		ccst->status = BT_HCI_ERR_UNKNOWN_CMD;
    dfca:	2301      	movs	r3, #1
    dfcc:	7003      	strb	r3, [r0, #0]
    dfce:	e7e1      	b.n	df94 <hci_cmd_handle+0x68>
		return NULL;
    dfd0:	2000      	movs	r0, #0
    dfd2:	e7e0      	b.n	df96 <hci_cmd_handle+0x6a>
		return NULL;
    dfd4:	2000      	movs	r0, #0
    dfd6:	e7de      	b.n	df96 <hci_cmd_handle+0x6a>
    dfd8:	200009d0 	.word	0x200009d0

0000dfdc <hci_acl_handle>:
{
    dfdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	*evt = NULL;
    dfe0:	2300      	movs	r3, #0
    dfe2:	600b      	str	r3, [r1, #0]
	if (buf->len < sizeof(*acl)) {
    dfe4:	8983      	ldrh	r3, [r0, #12]
    dfe6:	2b03      	cmp	r3, #3
    dfe8:	d93e      	bls.n	e068 <hci_acl_handle+0x8c>
    dfea:	4689      	mov	r9, r1
    dfec:	4604      	mov	r4, r0
	acl = (void *)buf->data;
    dfee:	f850 3f08 	ldr.w	r3, [r0, #8]!
	len = sys_le16_to_cpu(acl->len);
    dff2:	f8b3 8002 	ldrh.w	r8, [r3, #2]
	handle = sys_le16_to_cpu(acl->handle);
    dff6:	881e      	ldrh	r6, [r3, #0]
	net_buf_pull(buf, sizeof(*acl));
    dff8:	2104      	movs	r1, #4
    dffa:	f00c f91c 	bl	1a236 <net_buf_simple_pull>
	if (buf->len < len) {
    dffe:	89a3      	ldrh	r3, [r4, #12]
    e000:	4598      	cmp	r8, r3
    e002:	d835      	bhi.n	e070 <hci_acl_handle+0x94>
	flags = bt_acl_flags(handle);
    e004:	0b37      	lsrs	r7, r6, #12
	handle = bt_acl_handle(handle);
    e006:	f3c6 060b 	ubfx	r6, r6, #0, #12
	radio_pdu_node_tx = radio_tx_mem_acquire();
    e00a:	f009 ff1d 	bl	17e48 <radio_tx_mem_acquire>
	if (!radio_pdu_node_tx) {
    e00e:	4605      	mov	r5, r0
    e010:	b140      	cbz	r0, e024 <hci_acl_handle+0x48>
	if (flags == BT_ACL_START_NO_FLUSH || flags == BT_ACL_START) {
    e012:	b177      	cbz	r7, e032 <hci_acl_handle+0x56>
    e014:	2f02      	cmp	r7, #2
    e016:	d00c      	beq.n	e032 <hci_acl_handle+0x56>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    e018:	7903      	ldrb	r3, [r0, #4]
    e01a:	2201      	movs	r2, #1
    e01c:	f362 0301 	bfi	r3, r2, #0, #2
    e020:	7103      	strb	r3, [r0, #4]
    e022:	e00b      	b.n	e03c <hci_acl_handle+0x60>
		data_buf_overflow(evt);
    e024:	4648      	mov	r0, r9
    e026:	f7ff fcbf 	bl	d9a8 <data_buf_overflow>
		return -ENOBUFS;
    e02a:	f06f 0068 	mvn.w	r0, #104	; 0x68
    e02e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
    e032:	792b      	ldrb	r3, [r5, #4]
    e034:	2202      	movs	r2, #2
    e036:	f362 0301 	bfi	r3, r2, #0, #2
    e03a:	712b      	strb	r3, [r5, #4]
	pdu_data->len = len;
    e03c:	f885 8005 	strb.w	r8, [r5, #5]
	memcpy(&pdu_data->payload.lldata[0], buf->data, len);
    e040:	4642      	mov	r2, r8
    e042:	68a1      	ldr	r1, [r4, #8]
    e044:	1de8      	adds	r0, r5, #7
    e046:	f7f2 f93b 	bl	2c0 <memcpy>
	if (radio_tx_mem_enqueue(handle, radio_pdu_node_tx)) {
    e04a:	4629      	mov	r1, r5
    e04c:	4630      	mov	r0, r6
    e04e:	f009 ff0b 	bl	17e68 <radio_tx_mem_enqueue>
    e052:	b910      	cbnz	r0, e05a <hci_acl_handle+0x7e>
	return 0;
    e054:	2000      	movs	r0, #0
}
    e056:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		radio_tx_mem_release(radio_pdu_node_tx);
    e05a:	4628      	mov	r0, r5
    e05c:	f009 fefc 	bl	17e58 <radio_tx_mem_release>
		return -EINVAL;
    e060:	f06f 0015 	mvn.w	r0, #21
    e064:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EINVAL;
    e068:	f06f 0015 	mvn.w	r0, #21
    e06c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EINVAL;
    e070:	f06f 0015 	mvn.w	r0, #21
    e074:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000e078 <hci_acl_encode>:
{
    e078:	b570      	push	{r4, r5, r6, lr}
	handle = node_rx->hdr.handle;
    e07a:	88c6      	ldrh	r6, [r0, #6]
	switch (pdu_data->ll_id) {
    e07c:	7a03      	ldrb	r3, [r0, #8]
    e07e:	f003 0303 	and.w	r3, r3, #3
    e082:	3b01      	subs	r3, #1
    e084:	2b01      	cmp	r3, #1
    e086:	d81d      	bhi.n	e0c4 <hci_acl_encode+0x4c>
    e088:	4604      	mov	r4, r0
		acl = (void *)net_buf_add(buf, sizeof(*acl));
    e08a:	f101 0508 	add.w	r5, r1, #8
    e08e:	2104      	movs	r1, #4
    e090:	4628      	mov	r0, r5
    e092:	f00c f883 	bl	1a19c <net_buf_simple_add>
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
    e096:	7a23      	ldrb	r3, [r4, #8]
    e098:	f003 0303 	and.w	r3, r3, #3
    e09c:	2b02      	cmp	r3, #2
    e09e:	d00e      	beq.n	e0be <hci_acl_encode+0x46>
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
    e0a0:	f446 5680 	orr.w	r6, r6, #4096	; 0x1000
		acl->handle = sys_cpu_to_le16(handle_flags);
    e0a4:	8006      	strh	r6, [r0, #0]
		acl->len = sys_cpu_to_le16(pdu_data->len);
    e0a6:	7a63      	ldrb	r3, [r4, #9]
    e0a8:	8043      	strh	r3, [r0, #2]
		data = (void *)net_buf_add(buf, pdu_data->len);
    e0aa:	7a61      	ldrb	r1, [r4, #9]
    e0ac:	4628      	mov	r0, r5
    e0ae:	f00c f875 	bl	1a19c <net_buf_simple_add>
		memcpy(data, &pdu_data->payload.lldata[0], pdu_data->len);
    e0b2:	7a62      	ldrb	r2, [r4, #9]
    e0b4:	f104 010b 	add.w	r1, r4, #11
    e0b8:	f7f2 f902 	bl	2c0 <memcpy>
}
    e0bc:	bd70      	pop	{r4, r5, r6, pc}
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
    e0be:	f446 5600 	orr.w	r6, r6, #8192	; 0x2000
    e0c2:	e7ef      	b.n	e0a4 <hci_acl_encode+0x2c>
		LL_ASSERT(0);
    e0c4:	4040      	eors	r0, r0
    e0c6:	f380 8811 	msr	BASEPRI, r0
    e0ca:	f04f 0004 	mov.w	r0, #4
    e0ce:	df02      	svc	2

0000e0d0 <hci_evt_encode>:
{
    e0d0:	b510      	push	{r4, lr}
	pdu_data = (struct pdu_data *)node_rx->pdu_data;
    e0d2:	f100 0408 	add.w	r4, r0, #8
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    e0d6:	7903      	ldrb	r3, [r0, #4]
    e0d8:	2b01      	cmp	r3, #1
    e0da:	d004      	beq.n	e0e6 <hci_evt_encode+0x16>
		encode_control(node_rx, pdu_data, buf);
    e0dc:	460a      	mov	r2, r1
    e0de:	4621      	mov	r1, r4
    e0e0:	f7ff fede 	bl	dea0 <encode_control>
    e0e4:	bd10      	pop	{r4, pc}
		encode_data_ctrl(node_rx, pdu_data, buf);
    e0e6:	460a      	mov	r2, r1
    e0e8:	4621      	mov	r1, r4
    e0ea:	f7ff fc7d 	bl	d9e8 <encode_data_ctrl>
    e0ee:	bd10      	pop	{r4, pc}

0000e0f0 <hci_num_cmplt_encode>:
{
    e0f0:	b570      	push	{r4, r5, r6, lr}
    e0f2:	4606      	mov	r6, r0
    e0f4:	460d      	mov	r5, r1
    e0f6:	4614      	mov	r4, r2
	evt_create(buf, BT_HCI_EVT_NUM_COMPLETED_PACKETS, len);
    e0f8:	2205      	movs	r2, #5
    e0fa:	2113      	movs	r1, #19
    e0fc:	f7fe fb28 	bl	c750 <evt_create>
	ep = net_buf_add(buf, len);
    e100:	2105      	movs	r1, #5
    e102:	f106 0008 	add.w	r0, r6, #8
    e106:	f00c f849 	bl	1a19c <net_buf_simple_add>
	ep->num_handles = num_handles;
    e10a:	2301      	movs	r3, #1
    e10c:	7003      	strb	r3, [r0, #0]
	hc->handle = sys_cpu_to_le16(handle);
    e10e:	f8a0 5001 	strh.w	r5, [r0, #1]
	hc->count = sys_cpu_to_le16(num);
    e112:	f8a0 4003 	strh.w	r4, [r0, #3]
    e116:	bd70      	pop	{r4, r5, r6, pc}

0000e118 <hci_get_class>:
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    e118:	7903      	ldrb	r3, [r0, #4]
    e11a:	2b01      	cmp	r3, #1
    e11c:	d011      	beq.n	e142 <hci_get_class+0x2a>
		switch (node_rx->hdr.type) {
    e11e:	3b02      	subs	r3, #2
    e120:	2b0a      	cmp	r3, #10
    e122:	d80b      	bhi.n	e13c <hci_get_class+0x24>
    e124:	e8df f003 	tbb	[pc, r3]
    e128:	06060606 	.word	0x06060606
    e12c:	08080816 	.word	0x08080816
    e130:	0808      	.short	0x0808
    e132:	08          	.byte	0x08
    e133:	00          	.byte	0x00
			return HCI_CLASS_EVT_DISCARDABLE;
    e134:	2001      	movs	r0, #1
    e136:	4770      	bx	lr
			return HCI_CLASS_EVT_CONNECTION;
    e138:	2002      	movs	r0, #2
    e13a:	4770      	bx	lr
			return -1;
    e13c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    e140:	4770      	bx	lr
	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
    e142:	7a03      	ldrb	r3, [r0, #8]
    e144:	f003 0303 	and.w	r3, r3, #3
    e148:	2b03      	cmp	r3, #3
    e14a:	d001      	beq.n	e150 <hci_get_class+0x38>
		return HCI_CLASS_ACL_DATA;
    e14c:	2003      	movs	r0, #3
}
    e14e:	4770      	bx	lr
		return HCI_CLASS_EVT_CONNECTION;
    e150:	2002      	movs	r0, #2
    e152:	4770      	bx	lr
			return HCI_CLASS_EVT_REQUIRED;
    e154:	2000      	movs	r0, #0
    e156:	4770      	bx	lr

0000e158 <_hci_driver_init>:
	.open	= hci_driver_open,
	.send	= hci_driver_send,
};

static int _hci_driver_init(struct device *unused)
{
    e158:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
    e15a:	4802      	ldr	r0, [pc, #8]	; (e164 <_hci_driver_init+0xc>)
    e15c:	f7f7 fcec 	bl	5b38 <bt_hci_driver_register>

	return 0;
}
    e160:	2000      	movs	r0, #0
    e162:	bd08      	pop	{r3, pc}
    e164:	0002f6d0 	.word	0x0002f6d0

0000e168 <acl_handle>:
{
    e168:	b510      	push	{r4, lr}
    e16a:	b082      	sub	sp, #8
	err = hci_acl_handle(buf, &evt);
    e16c:	a901      	add	r1, sp, #4
    e16e:	f7ff ff35 	bl	dfdc <hci_acl_handle>
    e172:	4604      	mov	r4, r0
	if (evt) {
    e174:	9801      	ldr	r0, [sp, #4]
    e176:	b108      	cbz	r0, e17c <acl_handle+0x14>
		bt_recv_prio(evt);
    e178:	f7f7 fc8c 	bl	5a94 <bt_recv_prio>
}
    e17c:	4620      	mov	r0, r4
    e17e:	b002      	add	sp, #8
    e180:	bd10      	pop	{r4, pc}

0000e182 <cmd_handle>:
{
    e182:	b508      	push	{r3, lr}
	evt = hci_cmd_handle(buf);
    e184:	f7ff fed2 	bl	df2c <hci_cmd_handle>
	if (evt) {
    e188:	b108      	cbz	r0, e18e <cmd_handle+0xc>
		bt_recv_prio(evt);
    e18a:	f7f7 fc83 	bl	5a94 <bt_recv_prio>
}
    e18e:	2000      	movs	r0, #0
    e190:	bd08      	pop	{r3, pc}

0000e192 <hci_driver_send>:
{
    e192:	b538      	push	{r3, r4, r5, lr}
	if (!buf->len) {
    e194:	8983      	ldrh	r3, [r0, #12]
    e196:	b1cb      	cbz	r3, e1cc <hci_driver_send+0x3a>
    e198:	4604      	mov	r4, r0
	return (void *)ROUND_UP((buf->__buf + buf->size), sizeof(int));
    e19a:	f100 0310 	add.w	r3, r0, #16
    e19e:	89c2      	ldrh	r2, [r0, #14]
    e1a0:	4413      	add	r3, r2
    e1a2:	3303      	adds	r3, #3
    e1a4:	f023 0303 	bic.w	r3, r3, #3
	return *(u8_t *)net_buf_user_data(buf);
    e1a8:	781b      	ldrb	r3, [r3, #0]
	switch (type) {
    e1aa:	b13b      	cbz	r3, e1bc <hci_driver_send+0x2a>
    e1ac:	2b02      	cmp	r3, #2
    e1ae:	d110      	bne.n	e1d2 <hci_driver_send+0x40>
		err = acl_handle(buf);
    e1b0:	f7ff ffda 	bl	e168 <acl_handle>
    e1b4:	4605      	mov	r5, r0
	if (!err) {
    e1b6:	b12d      	cbz	r5, e1c4 <hci_driver_send+0x32>
}
    e1b8:	4628      	mov	r0, r5
    e1ba:	bd38      	pop	{r3, r4, r5, pc}
		err = cmd_handle(buf);
    e1bc:	f7ff ffe1 	bl	e182 <cmd_handle>
    e1c0:	4605      	mov	r5, r0
		break;
    e1c2:	e7f8      	b.n	e1b6 <hci_driver_send+0x24>
		net_buf_unref(buf);
    e1c4:	4620      	mov	r0, r4
    e1c6:	f00b ff9d 	bl	1a104 <net_buf_unref>
    e1ca:	e7f5      	b.n	e1b8 <hci_driver_send+0x26>
		return -EINVAL;
    e1cc:	f06f 0515 	mvn.w	r5, #21
    e1d0:	e7f2      	b.n	e1b8 <hci_driver_send+0x26>
		return -EINVAL;
    e1d2:	f06f 0515 	mvn.w	r5, #21
    e1d6:	e7ef      	b.n	e1b8 <hci_driver_send+0x26>

0000e1d8 <prio_recv_thread>:
{
    e1d8:	b530      	push	{r4, r5, lr}
    e1da:	b087      	sub	sp, #28
    e1dc:	e00f      	b.n	e1fe <prio_recv_thread+0x26>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    e1de:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    e1e2:	2001      	movs	r0, #1
    e1e4:	f7f7 fe0c 	bl	5e00 <bt_buf_get_rx>
    e1e8:	4605      	mov	r5, r0
			hci_num_cmplt_encode(buf, handle, num_cmplt);
    e1ea:	4622      	mov	r2, r4
    e1ec:	f8bd 1012 	ldrh.w	r1, [sp, #18]
    e1f0:	f7ff ff7e 	bl	e0f0 <hci_num_cmplt_encode>
			bt_recv_prio(buf);
    e1f4:	4628      	mov	r0, r5
    e1f6:	f7f7 fc4d 	bl	5a94 <bt_recv_prio>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    e1fa:	f01a f975 	bl	284e8 <_impl_k_yield>
		while ((num_cmplt = radio_rx_get(&node_rx, &handle))) {
    e1fe:	f10d 0112 	add.w	r1, sp, #18
    e202:	a805      	add	r0, sp, #20
    e204:	f009 fd20 	bl	17c48 <radio_rx_get>
    e208:	4604      	mov	r4, r0
    e20a:	2800      	cmp	r0, #0
    e20c:	d1e7      	bne.n	e1de <prio_recv_thread+0x6>
		if (node_rx) {
    e20e:	9b05      	ldr	r3, [sp, #20]
    e210:	b133      	cbz	r3, e220 <prio_recv_thread+0x48>
			radio_rx_dequeue();
    e212:	f00a fa59 	bl	186c8 <radio_rx_dequeue>
			k_fifo_put(&recv_fifo, node_rx);
    e216:	9905      	ldr	r1, [sp, #20]
    e218:	481a      	ldr	r0, [pc, #104]	; (e284 <prio_recv_thread+0xac>)
    e21a:	f019 ff27 	bl	2806c <k_queue_append>
    e21e:	e7ee      	b.n	e1fe <prio_recv_thread+0x26>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    e220:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    e224:	4818      	ldr	r0, [pc, #96]	; (e288 <prio_recv_thread+0xb0>)
    e226:	f01a facb 	bl	287c0 <_impl_k_sem_take>
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
    e22a:	f01a fb15 	bl	28858 <_impl_k_uptime_get_32>
		if (k_uptime_get_32() - prio_ts > K_SECONDS(5)) {
    e22e:	4b17      	ldr	r3, [pc, #92]	; (e28c <prio_recv_thread+0xb4>)
    e230:	681b      	ldr	r3, [r3, #0]
    e232:	1ac3      	subs	r3, r0, r3
    e234:	f241 3288 	movw	r2, #5000	; 0x1388
    e238:	4293      	cmp	r3, r2
    e23a:	d9e0      	bls.n	e1fe <prio_recv_thread+0x26>
	for (i = 0; i < size; i++) {
    e23c:	2200      	movs	r2, #0
	size_t unused = 0;
    e23e:	4613      	mov	r3, r2
    e240:	e001      	b.n	e246 <prio_recv_thread+0x6e>
			unused++;
    e242:	3301      	adds	r3, #1
	for (i = 0; i < size; i++) {
    e244:	3201      	adds	r2, #1
    e246:	f5b2 7fe0 	cmp.w	r2, #448	; 0x1c0
    e24a:	d203      	bcs.n	e254 <prio_recv_thread+0x7c>
		if ((unsigned char)stack[i] == 0xaa) {
    e24c:	4910      	ldr	r1, [pc, #64]	; (e290 <prio_recv_thread+0xb8>)
    e24e:	5c89      	ldrb	r1, [r1, r2]
    e250:	29aa      	cmp	r1, #170	; 0xaa
    e252:	d0f6      	beq.n	e242 <prio_recv_thread+0x6a>
	pcnt = ((size - unused) * 100) / size;
    e254:	f5c3 71e0 	rsb	r1, r3, #448	; 0x1c0
    e258:	2264      	movs	r2, #100	; 0x64
    e25a:	fb02 f201 	mul.w	r2, r2, r1
    e25e:	0992      	lsrs	r2, r2, #6
    e260:	480c      	ldr	r0, [pc, #48]	; (e294 <prio_recv_thread+0xbc>)
    e262:	fba0 0202 	umull	r0, r2, r0, r2
	printk("%s (real size %u):\tunused %u\tusage %u / %u (%u %%)\n", name,
    e266:	9202      	str	r2, [sp, #8]
    e268:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    e26c:	9201      	str	r2, [sp, #4]
    e26e:	9100      	str	r1, [sp, #0]
    e270:	4909      	ldr	r1, [pc, #36]	; (e298 <prio_recv_thread+0xc0>)
    e272:	480a      	ldr	r0, [pc, #40]	; (e29c <prio_recv_thread+0xc4>)
    e274:	f7f4 fe68 	bl	2f48 <printk>
    e278:	f01a faee 	bl	28858 <_impl_k_uptime_get_32>
			prio_ts = k_uptime_get_32();
    e27c:	4b03      	ldr	r3, [pc, #12]	; (e28c <prio_recv_thread+0xb4>)
    e27e:	6018      	str	r0, [r3, #0]
		while ((num_cmplt = radio_rx_get(&node_rx, &handle))) {
    e280:	e7bd      	b.n	e1fe <prio_recv_thread+0x26>
    e282:	bf00      	nop
    e284:	2000d074 	.word	0x2000d074
    e288:	2000d004 	.word	0x2000d004
    e28c:	20000a68 	.word	0x20000a68
    e290:	20004130 	.word	0x20004130
    e294:	2492492d 	.word	0x2492492d
    e298:	0002f6e0 	.word	0x0002f6e0
    e29c:	0002f448 	.word	0x0002f448

0000e2a0 <hci_driver_open>:
{
    e2a0:	b530      	push	{r4, r5, lr}
    e2a2:	b087      	sub	sp, #28
	err = ll_init(&sem_prio_recv);
    e2a4:	4814      	ldr	r0, [pc, #80]	; (e2f8 <hci_driver_open+0x58>)
    e2a6:	f00a fb37 	bl	18918 <ll_init>
	if (err) {
    e2aa:	4605      	mov	r5, r0
    e2ac:	b110      	cbz	r0, e2b4 <hci_driver_open+0x14>
}
    e2ae:	4628      	mov	r0, r5
    e2b0:	b007      	add	sp, #28
    e2b2:	bd30      	pop	{r4, r5, pc}
	hci_init(NULL);
    e2b4:	f7f6 fc66 	bl	4b84 <hci_init>
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay);
    e2b8:	2400      	movs	r4, #0
    e2ba:	9405      	str	r4, [sp, #20]
    e2bc:	9404      	str	r4, [sp, #16]
    e2be:	f06f 0309 	mvn.w	r3, #9
    e2c2:	9303      	str	r3, [sp, #12]
    e2c4:	9402      	str	r4, [sp, #8]
    e2c6:	9401      	str	r4, [sp, #4]
    e2c8:	9400      	str	r4, [sp, #0]
    e2ca:	4b0c      	ldr	r3, [pc, #48]	; (e2fc <hci_driver_open+0x5c>)
    e2cc:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    e2d0:	490b      	ldr	r1, [pc, #44]	; (e300 <hci_driver_open+0x60>)
    e2d2:	480c      	ldr	r0, [pc, #48]	; (e304 <hci_driver_open+0x64>)
    e2d4:	f01a fce0 	bl	28c98 <_impl_k_thread_create>
    e2d8:	9405      	str	r4, [sp, #20]
    e2da:	9404      	str	r4, [sp, #16]
    e2dc:	f06f 0307 	mvn.w	r3, #7
    e2e0:	9303      	str	r3, [sp, #12]
    e2e2:	9402      	str	r4, [sp, #8]
    e2e4:	9401      	str	r4, [sp, #4]
    e2e6:	9400      	str	r4, [sp, #0]
    e2e8:	4b07      	ldr	r3, [pc, #28]	; (e308 <hci_driver_open+0x68>)
    e2ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
    e2ee:	4907      	ldr	r1, [pc, #28]	; (e30c <hci_driver_open+0x6c>)
    e2f0:	4807      	ldr	r0, [pc, #28]	; (e310 <hci_driver_open+0x70>)
    e2f2:	f01a fcd1 	bl	28c98 <_impl_k_thread_create>
	return 0;
    e2f6:	e7da      	b.n	e2ae <hci_driver_open+0xe>
    e2f8:	2000d004 	.word	0x2000d004
    e2fc:	0000e1d9 	.word	0x0000e1d9
    e300:	20004130 	.word	0x20004130
    e304:	20002a8c 	.word	0x20002a8c
    e308:	0000e315 	.word	0x0000e315
    e30c:	200042f0 	.word	0x200042f0
    e310:	20002958 	.word	0x20002958

0000e314 <recv_thread>:
{
    e314:	b510      	push	{r4, lr}
    e316:	b086      	sub	sp, #24
    e318:	e029      	b.n	e36e <recv_thread+0x5a>
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
    e31a:	2801      	cmp	r0, #1
    e31c:	d042      	beq.n	e3a4 <recv_thread+0x90>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    e31e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    e322:	2001      	movs	r0, #1
    e324:	f7f7 fd6c 	bl	5e00 <bt_buf_get_rx>
    e328:	4604      	mov	r4, r0
		if (buf) {
    e32a:	b11c      	cbz	r4, e334 <recv_thread+0x20>
			hci_evt_encode(node_rx, buf);
    e32c:	4621      	mov	r1, r4
    e32e:	9805      	ldr	r0, [sp, #20]
    e330:	f7ff fece 	bl	e0d0 <hci_evt_encode>
	radio_rx_fc_set(node_rx->hdr.handle, 0);
    e334:	2100      	movs	r1, #0
    e336:	9b05      	ldr	r3, [sp, #20]
    e338:	88d8      	ldrh	r0, [r3, #6]
    e33a:	f009 fd49 	bl	17dd0 <radio_rx_fc_set>
	node_rx->hdr.onion.next = 0;
    e33e:	a806      	add	r0, sp, #24
    e340:	f850 3d04 	ldr.w	r3, [r0, #-4]!
    e344:	2200      	movs	r2, #0
    e346:	601a      	str	r2, [r3, #0]
	radio_rx_mem_release(&node_rx);
    e348:	f009 fcbe 	bl	17cc8 <radio_rx_mem_release>
		if (buf) {
    e34c:	b124      	cbz	r4, e358 <recv_thread+0x44>
			if (buf->len) {
    e34e:	89a3      	ldrh	r3, [r4, #12]
    e350:	b3ab      	cbz	r3, e3be <recv_thread+0xaa>
				bt_recv(buf);
    e352:	4620      	mov	r0, r4
    e354:	f7f7 fb74 	bl	5a40 <bt_recv>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    e358:	f01a f8c6 	bl	284e8 <_impl_k_yield>
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
    e35c:	f01a fa7c 	bl	28858 <_impl_k_uptime_get_32>
		if (k_uptime_get_32() - rx_ts > K_SECONDS(5)) {
    e360:	4b29      	ldr	r3, [pc, #164]	; (e408 <recv_thread+0xf4>)
    e362:	681b      	ldr	r3, [r3, #0]
    e364:	1ac0      	subs	r0, r0, r3
    e366:	f241 3388 	movw	r3, #5000	; 0x1388
    e36a:	4298      	cmp	r0, r3
    e36c:	d82b      	bhi.n	e3c6 <recv_thread+0xb2>
		node_rx = k_fifo_get(&recv_fifo, K_FOREVER);
    e36e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    e372:	4826      	ldr	r0, [pc, #152]	; (e40c <recv_thread+0xf8>)
    e374:	f019 fea2 	bl	280bc <k_queue_get>
		if (node_rx && !buf) {
    e378:	b1f8      	cbz	r0, e3ba <recv_thread+0xa6>
    e37a:	4604      	mov	r4, r0
	s8_t class = hci_get_class(node_rx);
    e37c:	f7ff fecc 	bl	e118 <hci_get_class>
    e380:	9405      	str	r4, [sp, #20]
	switch (class) {
    e382:	2800      	cmp	r0, #0
    e384:	db13      	blt.n	e3ae <recv_thread+0x9a>
    e386:	2802      	cmp	r0, #2
    e388:	ddc7      	ble.n	e31a <recv_thread+0x6>
    e38a:	2803      	cmp	r0, #3
    e38c:	d10f      	bne.n	e3ae <recv_thread+0x9a>
		buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
    e38e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    e392:	2003      	movs	r0, #3
    e394:	f7f7 fd34 	bl	5e00 <bt_buf_get_rx>
    e398:	4604      	mov	r4, r0
		hci_acl_encode(node_rx, buf);
    e39a:	4601      	mov	r1, r0
    e39c:	9805      	ldr	r0, [sp, #20]
    e39e:	f7ff fe6b 	bl	e078 <hci_acl_encode>
    e3a2:	e7c7      	b.n	e334 <recv_thread+0x20>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_NO_WAIT);
    e3a4:	2100      	movs	r1, #0
    e3a6:	f7f7 fd2b 	bl	5e00 <bt_buf_get_rx>
    e3aa:	4604      	mov	r4, r0
    e3ac:	e7bd      	b.n	e32a <recv_thread+0x16>
		LL_ASSERT(0);
    e3ae:	4040      	eors	r0, r0
    e3b0:	f380 8811 	msr	BASEPRI, r0
    e3b4:	f04f 0004 	mov.w	r0, #4
    e3b8:	df02      	svc	2
		struct net_buf *buf = NULL;
    e3ba:	2400      	movs	r4, #0
    e3bc:	e7c6      	b.n	e34c <recv_thread+0x38>
				net_buf_unref(buf);
    e3be:	4620      	mov	r0, r4
    e3c0:	f00b fea0 	bl	1a104 <net_buf_unref>
    e3c4:	e7c8      	b.n	e358 <recv_thread+0x44>
	for (i = 0; i < size; i++) {
    e3c6:	2200      	movs	r2, #0
	size_t unused = 0;
    e3c8:	4613      	mov	r3, r2
	for (i = 0; i < size; i++) {
    e3ca:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    e3ce:	d206      	bcs.n	e3de <recv_thread+0xca>
		if ((unsigned char)stack[i] == 0xaa) {
    e3d0:	490f      	ldr	r1, [pc, #60]	; (e410 <recv_thread+0xfc>)
    e3d2:	5c89      	ldrb	r1, [r1, r2]
    e3d4:	29aa      	cmp	r1, #170	; 0xaa
    e3d6:	d102      	bne.n	e3de <recv_thread+0xca>
			unused++;
    e3d8:	3301      	adds	r3, #1
	for (i = 0; i < size; i++) {
    e3da:	3201      	adds	r2, #1
    e3dc:	e7f5      	b.n	e3ca <recv_thread+0xb6>
	pcnt = ((size - unused) * 100) / size;
    e3de:	f5c3 6180 	rsb	r1, r3, #1024	; 0x400
    e3e2:	2264      	movs	r2, #100	; 0x64
    e3e4:	fb02 f201 	mul.w	r2, r2, r1
    e3e8:	0a92      	lsrs	r2, r2, #10
	printk("%s (real size %u):\tunused %u\tusage %u / %u (%u %%)\n", name,
    e3ea:	9202      	str	r2, [sp, #8]
    e3ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
    e3f0:	9201      	str	r2, [sp, #4]
    e3f2:	9100      	str	r1, [sp, #0]
    e3f4:	4907      	ldr	r1, [pc, #28]	; (e414 <recv_thread+0x100>)
    e3f6:	4808      	ldr	r0, [pc, #32]	; (e418 <recv_thread+0x104>)
    e3f8:	f7f4 fda6 	bl	2f48 <printk>
    e3fc:	f01a fa2c 	bl	28858 <_impl_k_uptime_get_32>
			rx_ts = k_uptime_get_32();
    e400:	4b01      	ldr	r3, [pc, #4]	; (e408 <recv_thread+0xf4>)
    e402:	6018      	str	r0, [r3, #0]
    e404:	e7b3      	b.n	e36e <recv_thread+0x5a>
    e406:	bf00      	nop
    e408:	20000a6c 	.word	0x20000a6c
    e40c:	2000d074 	.word	0x2000d074
    e410:	200042f0 	.word	0x200042f0
    e414:	0002f6f8 	.word	0x0002f6f8
    e418:	0002f448 	.word	0x0002f448

0000e41c <mayfly_init>:
} mft[MAYFLY_CALLEE_COUNT][MAYFLY_CALLER_COUNT];

static void *mfl[MAYFLY_CALLEE_COUNT][MAYFLY_CALLER_COUNT][2];

void mayfly_init(void)
{
    e41c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	u8_t callee_id;

	callee_id = MAYFLY_CALLEE_COUNT;
    e41e:	2304      	movs	r3, #4
	while (callee_id--) {
    e420:	e01d      	b.n	e45e <mayfly_init+0x42>
		u8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
			memq_init(mfl[callee_id][caller_id],
    e422:	eb04 0086 	add.w	r0, r4, r6, lsl #2
    e426:	4911      	ldr	r1, [pc, #68]	; (e46c <mayfly_init+0x50>)
    e428:	0065      	lsls	r5, r4, #1
    e42a:	192b      	adds	r3, r5, r4
    e42c:	009a      	lsls	r2, r3, #2
    e42e:	0073      	lsls	r3, r6, #1
    e430:	eb03 0e06 	add.w	lr, r3, r6
    e434:	ea4f 170e 	mov.w	r7, lr, lsl #4
    e438:	46be      	mov	lr, r7
    e43a:	443a      	add	r2, r7
    e43c:	440a      	add	r2, r1
    e43e:	4425      	add	r5, r4
    e440:	00af      	lsls	r7, r5, #2
    e442:	4477      	add	r7, lr
    e444:	3204      	adds	r2, #4
    e446:	4439      	add	r1, r7
    e448:	4b09      	ldr	r3, [pc, #36]	; (e470 <mayfly_init+0x54>)
    e44a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    e44e:	f000 f9f5 	bl	e83c <memq_init>
		while (caller_id--) {
    e452:	4623      	mov	r3, r4
    e454:	1e5c      	subs	r4, r3, #1
    e456:	b2e4      	uxtb	r4, r4
    e458:	2b00      	cmp	r3, #0
    e45a:	d1e2      	bne.n	e422 <mayfly_init+0x6>
	while (callee_id--) {
    e45c:	4633      	mov	r3, r6
    e45e:	1e5e      	subs	r6, r3, #1
    e460:	b2f6      	uxtb	r6, r6
    e462:	b10b      	cbz	r3, e468 <mayfly_init+0x4c>
    e464:	2304      	movs	r3, #4
    e466:	e7f5      	b.n	e454 <mayfly_init+0x38>
				  &mft[callee_id][caller_id].head,
				  &mft[callee_id][caller_id].tail);
		}
	}
}
    e468:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e46a:	bf00      	nop
    e46c:	20000af0 	.word	0x20000af0
    e470:	20000a70 	.word	0x20000a70

0000e474 <mayfly_enable>:

void mayfly_enable(u8_t caller_id, u8_t callee_id, u8_t enable)
{
    e474:	b570      	push	{r4, r5, r6, lr}
	if (enable) {
    e476:	b1ea      	cbz	r2, e4b4 <mayfly_enable+0x40>
    e478:	4615      	mov	r5, r2
		if (mft[callee_id][caller_id].enable_req ==
    e47a:	0042      	lsls	r2, r0, #1
    e47c:	4402      	add	r2, r0
    e47e:	0093      	lsls	r3, r2, #2
    e480:	004c      	lsls	r4, r1, #1
    e482:	440c      	add	r4, r1
    e484:	0122      	lsls	r2, r4, #4
    e486:	441a      	add	r2, r3
    e488:	4b18      	ldr	r3, [pc, #96]	; (e4ec <mayfly_enable+0x78>)
    e48a:	4413      	add	r3, r2
    e48c:	7a1a      	ldrb	r2, [r3, #8]
		    mft[callee_id][caller_id].enable_ack) {
    e48e:	7a5b      	ldrb	r3, [r3, #9]
		if (mft[callee_id][caller_id].enable_req ==
    e490:	429a      	cmp	r2, r3
    e492:	d003      	beq.n	e49c <mayfly_enable+0x28>
			mft[callee_id][caller_id].enable_req++;
		}

		mayfly_enable_cb(caller_id, callee_id, enable);
    e494:	462a      	mov	r2, r5
    e496:	f00a f9e6 	bl	18866 <mayfly_enable_cb>
    e49a:	bd70      	pop	{r4, r5, r6, pc}
			mft[callee_id][caller_id].enable_req++;
    e49c:	eb00 0440 	add.w	r4, r0, r0, lsl #1
    e4a0:	00a3      	lsls	r3, r4, #2
    e4a2:	eb01 0641 	add.w	r6, r1, r1, lsl #1
    e4a6:	0134      	lsls	r4, r6, #4
    e4a8:	4423      	add	r3, r4
    e4aa:	4c10      	ldr	r4, [pc, #64]	; (e4ec <mayfly_enable+0x78>)
    e4ac:	4423      	add	r3, r4
    e4ae:	3201      	adds	r2, #1
    e4b0:	721a      	strb	r2, [r3, #8]
    e4b2:	e7ef      	b.n	e494 <mayfly_enable+0x20>
	} else {
		if (mft[callee_id][caller_id].disable_req ==
    e4b4:	0042      	lsls	r2, r0, #1
    e4b6:	4402      	add	r2, r0
    e4b8:	0093      	lsls	r3, r2, #2
    e4ba:	004c      	lsls	r4, r1, #1
    e4bc:	440c      	add	r4, r1
    e4be:	0122      	lsls	r2, r4, #4
    e4c0:	441a      	add	r2, r3
    e4c2:	4b0a      	ldr	r3, [pc, #40]	; (e4ec <mayfly_enable+0x78>)
    e4c4:	4413      	add	r3, r2
    e4c6:	7a9a      	ldrb	r2, [r3, #10]
		    mft[callee_id][caller_id].disable_ack) {
    e4c8:	7adb      	ldrb	r3, [r3, #11]
		if (mft[callee_id][caller_id].disable_req ==
    e4ca:	429a      	cmp	r2, r3
    e4cc:	d000      	beq.n	e4d0 <mayfly_enable+0x5c>
    e4ce:	bd70      	pop	{r4, r5, r6, pc}
			mft[callee_id][caller_id].disable_req++;
    e4d0:	eb00 0440 	add.w	r4, r0, r0, lsl #1
    e4d4:	00a3      	lsls	r3, r4, #2
    e4d6:	eb01 0541 	add.w	r5, r1, r1, lsl #1
    e4da:	012c      	lsls	r4, r5, #4
    e4dc:	4423      	add	r3, r4
    e4de:	4c03      	ldr	r4, [pc, #12]	; (e4ec <mayfly_enable+0x78>)
    e4e0:	4423      	add	r3, r4
    e4e2:	3201      	adds	r2, #1
    e4e4:	729a      	strb	r2, [r3, #10]

			mayfly_pend(caller_id, callee_id);
    e4e6:	f00a f9f5 	bl	188d4 <mayfly_pend>
		}
	}
}
    e4ea:	e7f0      	b.n	e4ce <mayfly_enable+0x5a>
    e4ec:	20000af0 	.word	0x20000af0

0000e4f0 <mayfly_enqueue>:

u32_t mayfly_enqueue(u8_t caller_id, u8_t callee_id, u8_t chain,
			struct mayfly *m)
{
    e4f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e4f2:	4605      	mov	r5, r0
    e4f4:	460e      	mov	r6, r1
    e4f6:	461c      	mov	r4, r3
	u8_t state;
	u8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
    e4f8:	b19a      	cbz	r2, e522 <mayfly_enqueue+0x32>
    e4fa:	2101      	movs	r1, #1
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    e4fc:	b2c9      	uxtb	r1, r1
		(mft[callee_id][caller_id].disable_req !=
		 mft[callee_id][caller_id].disable_ack);

	/* shadow the ack */
	ack = m->_ack;
    e4fe:	7862      	ldrb	r2, [r4, #1]

	/* already in queue */
	state = (m->_req - ack) & 0x03;
    e500:	7823      	ldrb	r3, [r4, #0]
    e502:	1a9b      	subs	r3, r3, r2
	if (state != 0) {
    e504:	f013 0303 	ands.w	r3, r3, #3
    e508:	d032      	beq.n	e570 <mayfly_enqueue+0x80>
		if (chain) {
    e50a:	b371      	cbz	r1, e56a <mayfly_enqueue+0x7a>
			if (state != 1) {
    e50c:	2b01      	cmp	r3, #1
    e50e:	d04c      	beq.n	e5aa <mayfly_enqueue+0xba>
				/* mark as ready in queue */
				m->_req = ack + 1;
    e510:	3201      	adds	r2, #1
    e512:	b2d2      	uxtb	r2, r2
    e514:	7022      	strb	r2, [r4, #0]

				/* pend the callee for execution */
				mayfly_pend(caller_id, callee_id);
    e516:	4631      	mov	r1, r6
    e518:	4628      	mov	r0, r5
    e51a:	f00a f9db 	bl	188d4 <mayfly_pend>

				return 0;
    e51e:	2000      	movs	r0, #0
    e520:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    e522:	f00a f9c4 	bl	188ae <mayfly_prio_is_equal>
    e526:	b908      	cbnz	r0, e52c <mayfly_enqueue+0x3c>
		!mayfly_is_enabled(caller_id, callee_id) ||
    e528:	2101      	movs	r1, #1
    e52a:	e7e7      	b.n	e4fc <mayfly_enqueue+0xc>
    e52c:	4631      	mov	r1, r6
    e52e:	4628      	mov	r0, r5
    e530:	f00a f9ab 	bl	1888a <mayfly_is_enabled>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    e534:	b1b8      	cbz	r0, e566 <mayfly_enqueue+0x76>
		(mft[callee_id][caller_id].disable_req !=
    e536:	481e      	ldr	r0, [pc, #120]	; (e5b0 <mayfly_enqueue+0xc0>)
    e538:	0069      	lsls	r1, r5, #1
    e53a:	194a      	adds	r2, r1, r5
    e53c:	0093      	lsls	r3, r2, #2
    e53e:	0072      	lsls	r2, r6, #1
    e540:	eb02 0e06 	add.w	lr, r2, r6
    e544:	ea4f 170e 	mov.w	r7, lr, lsl #4
    e548:	46be      	mov	lr, r7
    e54a:	443b      	add	r3, r7
    e54c:	4403      	add	r3, r0
    e54e:	7a9f      	ldrb	r7, [r3, #10]
		 mft[callee_id][caller_id].disable_ack);
    e550:	194b      	adds	r3, r1, r5
    e552:	0099      	lsls	r1, r3, #2
    e554:	4471      	add	r1, lr
    e556:	4408      	add	r0, r1
    e558:	7ac3      	ldrb	r3, [r0, #11]
		!mayfly_is_enabled(caller_id, callee_id) ||
    e55a:	429f      	cmp	r7, r3
    e55c:	d001      	beq.n	e562 <mayfly_enqueue+0x72>
    e55e:	2101      	movs	r1, #1
    e560:	e7cc      	b.n	e4fc <mayfly_enqueue+0xc>
    e562:	2100      	movs	r1, #0
    e564:	e7ca      	b.n	e4fc <mayfly_enqueue+0xc>
    e566:	2101      	movs	r1, #1
    e568:	e7c8      	b.n	e4fc <mayfly_enqueue+0xc>
			/* already ready */
			return 1;
		}

		/* mark as done in queue, and fall thru */
		m->_req = ack + 2;
    e56a:	1c93      	adds	r3, r2, #2
    e56c:	b2db      	uxtb	r3, r3
    e56e:	7023      	strb	r3, [r4, #0]
	}

	/* handle mayfly(s) that can be inline */
	if (!chain) {
    e570:	b1b1      	cbz	r1, e5a0 <mayfly_enqueue+0xb0>

		return 0;
	}

	/* new, add as ready in the queue */
	m->_req = ack + 1;
    e572:	3201      	adds	r2, #1
    e574:	b2d2      	uxtb	r2, r2
    e576:	7022      	strb	r2, [r4, #0]
	memq_enqueue(m, m->_link, &mft[callee_id][caller_id].tail);
    e578:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    e57c:	009a      	lsls	r2, r3, #2
    e57e:	eb06 0146 	add.w	r1, r6, r6, lsl #1
    e582:	010b      	lsls	r3, r1, #4
    e584:	441a      	add	r2, r3
    e586:	4b0a      	ldr	r3, [pc, #40]	; (e5b0 <mayfly_enqueue+0xc0>)
    e588:	441a      	add	r2, r3
    e58a:	3204      	adds	r2, #4
    e58c:	6861      	ldr	r1, [r4, #4]
    e58e:	4620      	mov	r0, r4
    e590:	f000 f957 	bl	e842 <memq_enqueue>

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);
    e594:	4631      	mov	r1, r6
    e596:	4628      	mov	r0, r5
    e598:	f00a f99c 	bl	188d4 <mayfly_pend>

	return 0;
    e59c:	2000      	movs	r0, #0
    e59e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		m->fp(m->param);
    e5a0:	68e3      	ldr	r3, [r4, #12]
    e5a2:	68a0      	ldr	r0, [r4, #8]
    e5a4:	4798      	blx	r3
		return 0;
    e5a6:	2000      	movs	r0, #0
    e5a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return 1;
    e5aa:	2001      	movs	r0, #1
}
    e5ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e5ae:	bf00      	nop
    e5b0:	20000af0 	.word	0x20000af0

0000e5b4 <mayfly_run>:

void mayfly_run(u8_t callee_id)
{
    e5b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e5b8:	b085      	sub	sp, #20
    e5ba:	4682      	mov	sl, r0
	u8_t disable = 0;
	u8_t enable = 0;
	u8_t caller_id;

	/* iterate through each caller queue to this callee_id */
	caller_id = MAYFLY_CALLER_COUNT;
    e5bc:	2304      	movs	r3, #4
	u8_t enable = 0;
    e5be:	f04f 0b00 	mov.w	fp, #0
	u8_t disable = 0;
    e5c2:	f8cd b004 	str.w	fp, [sp, #4]
	while (caller_id--) {
    e5c6:	f103 39ff 	add.w	r9, r3, #4294967295	; 0xffffffff
    e5ca:	fa5f f989 	uxtb.w	r9, r9
    e5ce:	2b00      	cmp	r3, #0
    e5d0:	f000 809b 	beq.w	e70a <mayfly_run+0x156>
		void *link;
		struct mayfly *m = 0;
    e5d4:	aa04      	add	r2, sp, #16
    e5d6:	2300      	movs	r3, #0
    e5d8:	f842 3d04 	str.w	r3, [r2, #-4]!

		/* fetch mayfly in callee queue, if any */
		link = memq_peek(mft[callee_id][caller_id].tail,
    e5dc:	4657      	mov	r7, sl
    e5de:	464e      	mov	r6, r9
    e5e0:	4850      	ldr	r0, [pc, #320]	; (e724 <mayfly_run+0x170>)
    e5e2:	ea4f 0149 	mov.w	r1, r9, lsl #1
    e5e6:	4449      	add	r1, r9
    e5e8:	008b      	lsls	r3, r1, #2
    e5ea:	ea4f 014a 	mov.w	r1, sl, lsl #1
    e5ee:	4451      	add	r1, sl
    e5f0:	010c      	lsls	r4, r1, #4
    e5f2:	4423      	add	r3, r4
    e5f4:	18c4      	adds	r4, r0, r3
    e5f6:	58c1      	ldr	r1, [r0, r3]
    e5f8:	6860      	ldr	r0, [r4, #4]
    e5fa:	f000 f929 	bl	e850 <memq_peek>
    e5fe:	4680      	mov	r8, r0
				 mft[callee_id][caller_id].head,
				 (void **)&m);
		while (link) {
    e600:	e017      	b.n	e632 <mayfly_run+0x7e>
			/* execute work if ready */
			req = m->_req;
			state = (req - m->_ack) & 0x03;
			if (state == 1) {
				/* mark mayfly as ran */
				m->_ack--;
    e602:	3a01      	subs	r2, #1
    e604:	705a      	strb	r2, [r3, #1]

				/* call the mayfly function */
				m->fp(m->param);
    e606:	9b03      	ldr	r3, [sp, #12]
    e608:	68da      	ldr	r2, [r3, #12]
    e60a:	6898      	ldr	r0, [r3, #8]
    e60c:	4790      	blx	r2
    e60e:	e01b      	b.n	e648 <mayfly_run+0x94>
				/* reset mayfly state to idle */
				m->_ack = req;
			}

			/* fetch next mayfly in callee queue, if any */
			link = memq_peek(mft[callee_id][caller_id].tail,
    e610:	4944      	ldr	r1, [pc, #272]	; (e724 <mayfly_run+0x170>)
    e612:	0072      	lsls	r2, r6, #1
    e614:	4432      	add	r2, r6
    e616:	0093      	lsls	r3, r2, #2
    e618:	007a      	lsls	r2, r7, #1
    e61a:	443a      	add	r2, r7
    e61c:	0110      	lsls	r0, r2, #4
    e61e:	4403      	add	r3, r0
    e620:	18c8      	adds	r0, r1, r3
    e622:	aa03      	add	r2, sp, #12
    e624:	58c9      	ldr	r1, [r1, r3]
    e626:	6840      	ldr	r0, [r0, #4]
    e628:	f000 f912 	bl	e850 <memq_peek>
    e62c:	4680      	mov	r8, r0
					 (void **)&m);

			/* yield out of mayfly_run if a mayfly function was
			 * called.
			 */
			if (state == 1) {
    e62e:	2c01      	cmp	r4, #1
    e630:	d026      	beq.n	e680 <mayfly_run+0xcc>
		while (link) {
    e632:	f1b8 0f00 	cmp.w	r8, #0
    e636:	d030      	beq.n	e69a <mayfly_run+0xe6>
			req = m->_req;
    e638:	9b03      	ldr	r3, [sp, #12]
    e63a:	781c      	ldrb	r4, [r3, #0]
			state = (req - m->_ack) & 0x03;
    e63c:	785a      	ldrb	r2, [r3, #1]
    e63e:	1aa4      	subs	r4, r4, r2
    e640:	f004 0403 	and.w	r4, r4, #3
			if (state == 1) {
    e644:	2c01      	cmp	r4, #1
    e646:	d0dc      	beq.n	e602 <mayfly_run+0x4e>
			req = m->_req;
    e648:	9b03      	ldr	r3, [sp, #12]
    e64a:	781d      	ldrb	r5, [r3, #0]
    e64c:	b2ed      	uxtb	r5, r5
			if (((req - m->_ack) & 0x03) != 1) {
    e64e:	785b      	ldrb	r3, [r3, #1]
    e650:	1aeb      	subs	r3, r5, r3
    e652:	f003 0303 	and.w	r3, r3, #3
    e656:	2b01      	cmp	r3, #1
    e658:	d0da      	beq.n	e610 <mayfly_run+0x5c>
				memq_dequeue(mft[callee_id][caller_id].tail,
    e65a:	0072      	lsls	r2, r6, #1
    e65c:	4432      	add	r2, r6
    e65e:	0093      	lsls	r3, r2, #2
    e660:	0079      	lsls	r1, r7, #1
    e662:	4439      	add	r1, r7
    e664:	010a      	lsls	r2, r1, #4
    e666:	441a      	add	r2, r3
    e668:	4b2e      	ldr	r3, [pc, #184]	; (e724 <mayfly_run+0x170>)
    e66a:	4413      	add	r3, r2
    e66c:	2200      	movs	r2, #0
    e66e:	4619      	mov	r1, r3
    e670:	6858      	ldr	r0, [r3, #4]
    e672:	f000 f8f6 	bl	e862 <memq_dequeue>
				m->_link = link;
    e676:	9b03      	ldr	r3, [sp, #12]
    e678:	f8c3 8004 	str.w	r8, [r3, #4]
				m->_ack = req;
    e67c:	705d      	strb	r5, [r3, #1]
    e67e:	e7c7      	b.n	e610 <mayfly_run+0x5c>
				/* pend callee (tailchain) if mayfly queue is
				 * not empty or all caller queues are not
				 * processed.
				 */
				if (caller_id || link) {
    e680:	f1b9 0f00 	cmp.w	r9, #0
    e684:	d006      	beq.n	e694 <mayfly_run+0xe0>
					mayfly_pend(callee_id, callee_id);
    e686:	4651      	mov	r1, sl
    e688:	4650      	mov	r0, sl
    e68a:	f00a f923 	bl	188d4 <mayfly_pend>
	}

	if (disable && !enable) {
		mayfly_enable_cb(callee_id, callee_id, 0);
	}
}
    e68e:	b005      	add	sp, #20
    e690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (caller_id || link) {
    e694:	2800      	cmp	r0, #0
    e696:	d0cc      	beq.n	e632 <mayfly_run+0x7e>
    e698:	e7f5      	b.n	e686 <mayfly_run+0xd2>
		if (mft[callee_id][caller_id].disable_req !=
    e69a:	ea4f 0249 	mov.w	r2, r9, lsl #1
    e69e:	444a      	add	r2, r9
    e6a0:	0093      	lsls	r3, r2, #2
    e6a2:	ea4f 014a 	mov.w	r1, sl, lsl #1
    e6a6:	4451      	add	r1, sl
    e6a8:	010a      	lsls	r2, r1, #4
    e6aa:	441a      	add	r2, r3
    e6ac:	4b1d      	ldr	r3, [pc, #116]	; (e724 <mayfly_run+0x170>)
    e6ae:	4413      	add	r3, r2
    e6b0:	7a99      	ldrb	r1, [r3, #10]
		    mft[callee_id][caller_id].disable_ack) {
    e6b2:	7adb      	ldrb	r3, [r3, #11]
		if (mft[callee_id][caller_id].disable_req !=
    e6b4:	4299      	cmp	r1, r3
    e6b6:	d00b      	beq.n	e6d0 <mayfly_run+0x11c>
			mft[callee_id][caller_id].disable_ack =
    e6b8:	eb09 0249 	add.w	r2, r9, r9, lsl #1
    e6bc:	0093      	lsls	r3, r2, #2
    e6be:	eb0a 004a 	add.w	r0, sl, sl, lsl #1
    e6c2:	0102      	lsls	r2, r0, #4
    e6c4:	4413      	add	r3, r2
    e6c6:	4a17      	ldr	r2, [pc, #92]	; (e724 <mayfly_run+0x170>)
    e6c8:	4413      	add	r3, r2
    e6ca:	72d9      	strb	r1, [r3, #11]
			disable = 1;
    e6cc:	2301      	movs	r3, #1
    e6ce:	9301      	str	r3, [sp, #4]
		if (mft[callee_id][caller_id].enable_req !=
    e6d0:	ea4f 0249 	mov.w	r2, r9, lsl #1
    e6d4:	444a      	add	r2, r9
    e6d6:	0093      	lsls	r3, r2, #2
    e6d8:	ea4f 014a 	mov.w	r1, sl, lsl #1
    e6dc:	4451      	add	r1, sl
    e6de:	010a      	lsls	r2, r1, #4
    e6e0:	441a      	add	r2, r3
    e6e2:	4b10      	ldr	r3, [pc, #64]	; (e724 <mayfly_run+0x170>)
    e6e4:	4413      	add	r3, r2
    e6e6:	7a19      	ldrb	r1, [r3, #8]
		    mft[callee_id][caller_id].enable_ack) {
    e6e8:	7a5b      	ldrb	r3, [r3, #9]
		if (mft[callee_id][caller_id].enable_req !=
    e6ea:	4299      	cmp	r1, r3
    e6ec:	d00b      	beq.n	e706 <mayfly_run+0x152>
			mft[callee_id][caller_id].enable_ack =
    e6ee:	eb09 0249 	add.w	r2, r9, r9, lsl #1
    e6f2:	0093      	lsls	r3, r2, #2
    e6f4:	eb0a 004a 	add.w	r0, sl, sl, lsl #1
    e6f8:	0102      	lsls	r2, r0, #4
    e6fa:	4413      	add	r3, r2
    e6fc:	4a09      	ldr	r2, [pc, #36]	; (e724 <mayfly_run+0x170>)
    e6fe:	4413      	add	r3, r2
    e700:	7259      	strb	r1, [r3, #9]
			enable = 1;
    e702:	f04f 0b01 	mov.w	fp, #1
	while (caller_id--) {
    e706:	464b      	mov	r3, r9
    e708:	e75d      	b.n	e5c6 <mayfly_run+0x12>
	if (disable && !enable) {
    e70a:	9b01      	ldr	r3, [sp, #4]
    e70c:	2b00      	cmp	r3, #0
    e70e:	d0be      	beq.n	e68e <mayfly_run+0xda>
    e710:	f1bb 0f00 	cmp.w	fp, #0
    e714:	d1bb      	bne.n	e68e <mayfly_run+0xda>
		mayfly_enable_cb(callee_id, callee_id, 0);
    e716:	2200      	movs	r2, #0
    e718:	4651      	mov	r1, sl
    e71a:	4650      	mov	r0, sl
    e71c:	f00a f8a3 	bl	18866 <mayfly_enable_cb>
    e720:	e7b5      	b.n	e68e <mayfly_run+0xda>
    e722:	bf00      	nop
    e724:	20000af0 	.word	0x20000af0

0000e728 <mem_init>:

#include "mem.h"

void mem_init(void *mem_pool, u16_t mem_size, u16_t mem_count,
	      void **mem_head)
{
    e728:	b5f0      	push	{r4, r5, r6, r7, lr}
    e72a:	b083      	sub	sp, #12
    e72c:	4607      	mov	r7, r0
    e72e:	4608      	mov	r0, r1
	*mem_head = mem_pool;
    e730:	601f      	str	r7, [r3, #0]

	/* Store free mem_count after the list's next pointer at an aligned
	 * memory location to ensure atomic read/write (in ARM for now).
	 */
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    e732:	1dfb      	adds	r3, r7, #7
    e734:	f023 0303 	bic.w	r3, r3, #3
    e738:	801a      	strh	r2, [r3, #0]

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    e73a:	460e      	mov	r6, r1
    e73c:	3a01      	subs	r2, #1
    e73e:	b295      	uxth	r5, r2
    e740:	2204      	movs	r2, #4
    e742:	2100      	movs	r1, #0
    e744:	fb05 7000 	mla	r0, r5, r0, r7
    e748:	f01c f99c 	bl	2aa84 <memset>
	       sizeof(mem_pool));
	while (mem_count--) {
    e74c:	e00b      	b.n	e766 <mem_init+0x3e>
		u32_t next;

		next = (u32_t)((u8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
    e74e:	fb04 6306 	mla	r3, r4, r6, r6
		next = (u32_t)((u8_t *) mem_pool +
    e752:	443b      	add	r3, r7
    e754:	a902      	add	r1, sp, #8
    e756:	f841 3d04 	str.w	r3, [r1, #-4]!
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
    e75a:	2204      	movs	r2, #4
    e75c:	fb04 7006 	mla	r0, r4, r6, r7
    e760:	f7f1 fdae 	bl	2c0 <memcpy>
	while (mem_count--) {
    e764:	4625      	mov	r5, r4
    e766:	1e6c      	subs	r4, r5, #1
    e768:	b2a4      	uxth	r4, r4
    e76a:	2d00      	cmp	r5, #0
    e76c:	d1ef      	bne.n	e74e <mem_init+0x26>
		       (void *)&next, sizeof(next));
	}
}
    e76e:	b003      	add	sp, #12
    e770:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000e772 <mem_acquire>:

void *mem_acquire(void **mem_head)
{
    e772:	b570      	push	{r4, r5, r6, lr}
    e774:	b082      	sub	sp, #8
	if (*mem_head) {
    e776:	6805      	ldr	r5, [r0, #0]
    e778:	b1a5      	cbz	r5, e7a4 <mem_acquire+0x32>
    e77a:	4606      	mov	r6, r0
		u16_t free_count;
		void *head;
		void *mem;

		/* Get the free count from the list and decrement it */
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    e77c:	1deb      	adds	r3, r5, #7
    e77e:	f023 0303 	bic.w	r3, r3, #3
    e782:	881b      	ldrh	r3, [r3, #0]
					       sizeof(mem_head)));
		free_count--;
    e784:	3b01      	subs	r3, #1
    e786:	b29c      	uxth	r4, r3

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
    e788:	2204      	movs	r2, #4
    e78a:	4629      	mov	r1, r5
    e78c:	eb0d 0002 	add.w	r0, sp, r2
    e790:	f7f1 fd96 	bl	2c0 <memcpy>

		/* Store free mem_count after the list's next pointer */
		if (head) {
    e794:	9b01      	ldr	r3, [sp, #4]
    e796:	b11b      	cbz	r3, e7a0 <mem_acquire+0x2e>
			*((u16_t *)MROUND((u8_t *)head + sizeof(head))) =
    e798:	3307      	adds	r3, #7
    e79a:	f023 0303 	bic.w	r3, r3, #3
    e79e:	801c      	strh	r4, [r3, #0]
				free_count;
		}

		*mem_head = head;
    e7a0:	9b01      	ldr	r3, [sp, #4]
    e7a2:	6033      	str	r3, [r6, #0]
		return mem;
	}

	return NULL;
}
    e7a4:	4628      	mov	r0, r5
    e7a6:	b002      	add	sp, #8
    e7a8:	bd70      	pop	{r4, r5, r6, pc}

0000e7aa <mem_release>:

void mem_release(void *mem, void **mem_head)
{
    e7aa:	b570      	push	{r4, r5, r6, lr}
    e7ac:	4606      	mov	r6, r0
    e7ae:	460d      	mov	r5, r1
	u16_t free_count = 0;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
    e7b0:	680b      	ldr	r3, [r1, #0]
    e7b2:	b183      	cbz	r3, e7d6 <mem_release+0x2c>
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    e7b4:	3307      	adds	r3, #7
    e7b6:	f023 0303 	bic.w	r3, r3, #3
    e7ba:	881c      	ldrh	r4, [r3, #0]
					       sizeof(mem_head)));
	}
	free_count++;
    e7bc:	3401      	adds	r4, #1
    e7be:	b2a4      	uxth	r4, r4

	memcpy(mem, mem_head, sizeof(mem));
    e7c0:	2204      	movs	r2, #4
    e7c2:	4629      	mov	r1, r5
    e7c4:	4630      	mov	r0, r6
    e7c6:	f7f1 fd7b 	bl	2c0 <memcpy>

	/* Store free mem_count after the list's next pointer */
	*((u16_t *)MROUND((u8_t *)mem + sizeof(mem))) = free_count;
    e7ca:	1df3      	adds	r3, r6, #7
    e7cc:	f023 0303 	bic.w	r3, r3, #3
    e7d0:	801c      	strh	r4, [r3, #0]

	*mem_head = mem;
    e7d2:	602e      	str	r6, [r5, #0]
    e7d4:	bd70      	pop	{r4, r5, r6, pc}
	u16_t free_count = 0;
    e7d6:	2400      	movs	r4, #0
    e7d8:	e7f0      	b.n	e7bc <mem_release+0x12>

0000e7da <mem_free_count_get>:
u16_t mem_free_count_get(void *mem_head)
{
	u16_t free_count = 0;

	/* Get the free count from the list */
	if (mem_head) {
    e7da:	4603      	mov	r3, r0
    e7dc:	b120      	cbz	r0, e7e8 <mem_free_count_get+0xe>
		free_count = *((u16_t *)MROUND((u8_t *)mem_head +
    e7de:	3307      	adds	r3, #7
    e7e0:	f023 0303 	bic.w	r3, r3, #3
    e7e4:	8818      	ldrh	r0, [r3, #0]
    e7e6:	4770      	bx	lr
	u16_t free_count = 0;
    e7e8:	2000      	movs	r0, #0
					       sizeof(mem_head)));
	}

	return free_count;
}
    e7ea:	4770      	bx	lr

0000e7ec <mem_get>:

void *mem_get(void *mem_pool, u16_t mem_size, u16_t index)
{
	return ((void *)((u8_t *)mem_pool + (mem_size * index)));
}
    e7ec:	fb02 0001 	mla	r0, r2, r1, r0
    e7f0:	4770      	bx	lr

0000e7f2 <mem_index_get>:

u16_t mem_index_get(void *mem, void *mem_pool, u16_t mem_size)
{
	return ((u16_t)((u8_t *)mem - (u8_t *)mem_pool) / mem_size);
    e7f2:	1a40      	subs	r0, r0, r1
    e7f4:	b280      	uxth	r0, r0
}
    e7f6:	fbb0 f0f2 	udiv	r0, r0, r2
    e7fa:	4770      	bx	lr

0000e7fc <mem_rcopy>:

void mem_rcopy(u8_t *dst, u8_t const *src, u16_t len)
{
	src += len;
    e7fc:	4411      	add	r1, r2
	while (len--) {
    e7fe:	e004      	b.n	e80a <mem_rcopy+0xe>
		*dst++ = *--src;
    e800:	f811 2d01 	ldrb.w	r2, [r1, #-1]!
    e804:	7002      	strb	r2, [r0, #0]
	while (len--) {
    e806:	461a      	mov	r2, r3
		*dst++ = *--src;
    e808:	3001      	adds	r0, #1
	while (len--) {
    e80a:	1e53      	subs	r3, r2, #1
    e80c:	b29b      	uxth	r3, r3
    e80e:	2a00      	cmp	r2, #0
    e810:	d1f6      	bne.n	e800 <mem_rcopy+0x4>
	}
}
    e812:	4770      	bx	lr

0000e814 <mem_nz>:

u8_t mem_nz(u8_t *src, u16_t len)
{
	while (len--) {
    e814:	1e4b      	subs	r3, r1, #1
    e816:	b29b      	uxth	r3, r3
    e818:	b171      	cbz	r1, e838 <mem_nz+0x24>
{
    e81a:	b410      	push	{r4}
		if (*src++) {
    e81c:	1c44      	adds	r4, r0, #1
    e81e:	7802      	ldrb	r2, [r0, #0]
	while (len--) {
    e820:	4619      	mov	r1, r3
		if (*src++) {
    e822:	b93a      	cbnz	r2, e834 <mem_nz+0x20>
    e824:	4620      	mov	r0, r4
	while (len--) {
    e826:	3b01      	subs	r3, #1
    e828:	b29b      	uxth	r3, r3
    e82a:	2900      	cmp	r1, #0
    e82c:	d1f6      	bne.n	e81c <mem_nz+0x8>
			return 1;
		}
	}

	return 0;
    e82e:	2000      	movs	r0, #0
}
    e830:	bc10      	pop	{r4}
    e832:	4770      	bx	lr
			return 1;
    e834:	2001      	movs	r0, #1
    e836:	e7fb      	b.n	e830 <mem_nz+0x1c>
	return 0;
    e838:	2000      	movs	r0, #0
}
    e83a:	4770      	bx	lr

0000e83c <memq_init>:
inline void *memq_peek(void *tail, void *head, void **mem);

void *memq_init(void *link, void **head, void **tail)
{
	/* head and tail pointer to the initial link node */
	*head = *tail = link;
    e83c:	6010      	str	r0, [r2, #0]
    e83e:	6008      	str	r0, [r1, #0]

	return link;
}
    e840:	4770      	bx	lr

0000e842 <memq_enqueue>:

void *memq_enqueue(void *mem, void *link, void **tail)
{
	/* make the current tail link node point to new link node */
	*((void **)*tail) = link;
    e842:	6813      	ldr	r3, [r2, #0]
    e844:	6019      	str	r1, [r3, #0]

	/* assign mem to current tail link node */
	*((void **)*tail + 1) = mem;
    e846:	6813      	ldr	r3, [r2, #0]
    e848:	6058      	str	r0, [r3, #4]

	/* increment the tail! */
	*tail = link;
    e84a:	6011      	str	r1, [r2, #0]

	return link;
}
    e84c:	4608      	mov	r0, r1
    e84e:	4770      	bx	lr

0000e850 <memq_peek>:
void *memq_peek(void *tail, void *head, void **mem)
{
	void *link;

	/* if head and tail are equal, then queue empty */
	if (head == tail) {
    e850:	4281      	cmp	r1, r0
    e852:	d004      	beq.n	e85e <memq_peek+0xe>

	/* pick the head link node */
	link = head;

	/* extract the element node */
	if (mem) {
    e854:	b10a      	cbz	r2, e85a <memq_peek+0xa>
		*mem = *((void **)link + 1);
    e856:	684b      	ldr	r3, [r1, #4]
    e858:	6013      	str	r3, [r2, #0]
	}

	return link;
}
    e85a:	4608      	mov	r0, r1
    e85c:	4770      	bx	lr
		return 0;
    e85e:	2100      	movs	r1, #0
    e860:	e7fb      	b.n	e85a <memq_peek+0xa>

0000e862 <memq_dequeue>:
void *memq_dequeue(void *tail, void **head, void **mem)
{
	void *link;

	/* use memq peek to get the link and mem */
	link = memq_peek(tail, *head, mem);
    e862:	680b      	ldr	r3, [r1, #0]
	if (head == tail) {
    e864:	4283      	cmp	r3, r0
    e866:	d006      	beq.n	e876 <memq_dequeue+0x14>
	if (mem) {
    e868:	b10a      	cbz	r2, e86e <memq_dequeue+0xc>
		*mem = *((void **)link + 1);
    e86a:	6858      	ldr	r0, [r3, #4]
    e86c:	6010      	str	r0, [r2, #0]

	/* increment the head to next link node */
	*head = *((void **)link);
    e86e:	681a      	ldr	r2, [r3, #0]
    e870:	600a      	str	r2, [r1, #0]

	return link;
}
    e872:	4618      	mov	r0, r3
    e874:	4770      	bx	lr
		return 0;
    e876:	2300      	movs	r3, #0
    e878:	e7f9      	b.n	e86e <memq_dequeue+0xc>

0000e87a <util_ones_count_get>:

#include <zephyr/types.h>
#include "util.h"

u8_t util_ones_count_get(u8_t *octets, u8_t octets_len)
{
    e87a:	b410      	push	{r4}
	u8_t one_count = 0;
    e87c:	2200      	movs	r2, #0

	while (octets_len--) {
    e87e:	e008      	b.n	e892 <util_ones_count_get+0x18>
		u8_t bite;

		bite = *octets;
		while (bite) {
			bite &= (bite - 1);
    e880:	1e59      	subs	r1, r3, #1
    e882:	b249      	sxtb	r1, r1
    e884:	400b      	ands	r3, r1
			one_count++;
    e886:	3201      	adds	r2, #1
    e888:	b2d2      	uxtb	r2, r2
		while (bite) {
    e88a:	2b00      	cmp	r3, #0
    e88c:	d1f8      	bne.n	e880 <util_ones_count_get+0x6>
		}
		octets++;
    e88e:	3001      	adds	r0, #1
	while (octets_len--) {
    e890:	4621      	mov	r1, r4
    e892:	1e4b      	subs	r3, r1, #1
    e894:	b2dc      	uxtb	r4, r3
    e896:	b109      	cbz	r1, e89c <util_ones_count_get+0x22>
		bite = *octets;
    e898:	7803      	ldrb	r3, [r0, #0]
		while (bite) {
    e89a:	e7f6      	b.n	e88a <util_ones_count_get+0x10>
	}

	return one_count;
}
    e89c:	4610      	mov	r0, r2
    e89e:	bc10      	pop	{r4}
    e8a0:	4770      	bx	lr
	...

0000e8a4 <cntr_init>:

static u8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
    e8a4:	4b05      	ldr	r3, [pc, #20]	; (e8bc <cntr_init+0x18>)
    e8a6:	2200      	movs	r2, #0
    e8a8:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	NRF_RTC->EVTENSET = (RTC_EVTENSET_COMPARE0_Msk |
    e8ac:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    e8b0:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
			     RTC_EVTENSET_COMPARE1_Msk);
	NRF_RTC->INTENSET = (RTC_INTENSET_COMPARE0_Msk |
    e8b4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    e8b8:	4770      	bx	lr
    e8ba:	bf00      	nop
    e8bc:	4000b000 	.word	0x4000b000

0000e8c0 <cntr_start>:
			     RTC_INTENSET_COMPARE1_Msk);
}

u32_t cntr_start(void)
{
	if (_refcount++) {
    e8c0:	4a05      	ldr	r2, [pc, #20]	; (e8d8 <cntr_start+0x18>)
    e8c2:	7813      	ldrb	r3, [r2, #0]
    e8c4:	1c59      	adds	r1, r3, #1
    e8c6:	7011      	strb	r1, [r2, #0]
    e8c8:	b923      	cbnz	r3, e8d4 <cntr_start+0x14>
		return 1;
	}

	NRF_RTC->TASKS_START = 1;
    e8ca:	2201      	movs	r2, #1
    e8cc:	4b03      	ldr	r3, [pc, #12]	; (e8dc <cntr_start+0x1c>)
    e8ce:	601a      	str	r2, [r3, #0]

	return 0;
    e8d0:	2000      	movs	r0, #0
    e8d2:	4770      	bx	lr
		return 1;
    e8d4:	2001      	movs	r0, #1
}
    e8d6:	4770      	bx	lr
    e8d8:	20000bb0 	.word	0x20000bb0
    e8dc:	4000b000 	.word	0x4000b000

0000e8e0 <cntr_stop>:

u32_t cntr_stop(void)
{
	LL_ASSERT(_refcount);
    e8e0:	4b0a      	ldr	r3, [pc, #40]	; (e90c <cntr_stop+0x2c>)
    e8e2:	781b      	ldrb	r3, [r3, #0]
    e8e4:	b14b      	cbz	r3, e8fa <cntr_stop+0x1a>

	if (--_refcount) {
    e8e6:	3b01      	subs	r3, #1
    e8e8:	b2db      	uxtb	r3, r3
    e8ea:	4a08      	ldr	r2, [pc, #32]	; (e90c <cntr_stop+0x2c>)
    e8ec:	7013      	strb	r3, [r2, #0]
    e8ee:	b953      	cbnz	r3, e906 <cntr_stop+0x26>
		return 1;
	}

	NRF_RTC->TASKS_STOP = 1;
    e8f0:	2201      	movs	r2, #1
    e8f2:	4b07      	ldr	r3, [pc, #28]	; (e910 <cntr_stop+0x30>)
    e8f4:	605a      	str	r2, [r3, #4]

	return 0;
    e8f6:	2000      	movs	r0, #0
    e8f8:	4770      	bx	lr
	LL_ASSERT(_refcount);
    e8fa:	4040      	eors	r0, r0
    e8fc:	f380 8811 	msr	BASEPRI, r0
    e900:	f04f 0004 	mov.w	r0, #4
    e904:	df02      	svc	2
		return 1;
    e906:	2001      	movs	r0, #1
}
    e908:	4770      	bx	lr
    e90a:	bf00      	nop
    e90c:	20000bb0 	.word	0x20000bb0
    e910:	4000b000 	.word	0x4000b000

0000e914 <cntr_cnt_get>:

u32_t cntr_cnt_get(void)
{
	return NRF_RTC->COUNTER;
    e914:	4b01      	ldr	r3, [pc, #4]	; (e91c <cntr_cnt_get+0x8>)
    e916:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
}
    e91a:	4770      	bx	lr
    e91c:	4000b000 	.word	0x4000b000

0000e920 <cntr_cmp_set>:

void cntr_cmp_set(u8_t cmp, u32_t value)
{
	NRF_RTC->CC[cmp] = value;
    e920:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    e924:	4b01      	ldr	r3, [pc, #4]	; (e92c <cntr_cmp_set+0xc>)
    e926:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
    e92a:	4770      	bx	lr
    e92c:	4000b000 	.word	0x4000b000

0000e930 <do_ecb>:
	u8_t clear_text[16];
	u8_t cipher_text[16];
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
    e930:	e009      	b.n	e946 <do_ecb+0x16>
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
		       (NRF_ECB->ECBDATAPTR != 0)) {
			/*__WFE();*/
		}
		NRF_ECB->TASKS_STOPECB = 1;
    e932:	4b15      	ldr	r3, [pc, #84]	; (e988 <do_ecb+0x58>)
    e934:	2201      	movs	r2, #1
    e936:	605a      	str	r2, [r3, #4]
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
    e938:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    e93c:	b91b      	cbnz	r3, e946 <do_ecb+0x16>
    e93e:	4b12      	ldr	r3, [pc, #72]	; (e988 <do_ecb+0x58>)
    e940:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
    e944:	b9d3      	cbnz	r3, e97c <do_ecb+0x4c>
		NRF_ECB->TASKS_STOPECB = 1;
    e946:	4b10      	ldr	r3, [pc, #64]	; (e988 <do_ecb+0x58>)
    e948:	2201      	movs	r2, #1
    e94a:	605a      	str	r2, [r3, #4]
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
    e94c:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
		NRF_ECB->EVENTS_ENDECB = 0;
    e950:	2100      	movs	r1, #0
    e952:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
		NRF_ECB->EVENTS_ERRORECB = 0;
    e956:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
		NRF_ECB->TASKS_STARTECB = 1;
    e95a:	601a      	str	r2, [r3, #0]
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
    e95c:	4b0a      	ldr	r3, [pc, #40]	; (e988 <do_ecb+0x58>)
    e95e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    e962:	2b00      	cmp	r3, #0
    e964:	d1e5      	bne.n	e932 <do_ecb+0x2>
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
    e966:	4b08      	ldr	r3, [pc, #32]	; (e988 <do_ecb+0x58>)
    e968:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
    e96c:	2b00      	cmp	r3, #0
    e96e:	d1e0      	bne.n	e932 <do_ecb+0x2>
		       (NRF_ECB->ECBDATAPTR != 0)) {
    e970:	4b05      	ldr	r3, [pc, #20]	; (e988 <do_ecb+0x58>)
    e972:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
    e976:	2b00      	cmp	r3, #0
    e978:	d1f0      	bne.n	e95c <do_ecb+0x2c>
    e97a:	e7da      	b.n	e932 <do_ecb+0x2>

	NRF_ECB->ECBDATAPTR = 0;
    e97c:	2200      	movs	r2, #0
    e97e:	4b02      	ldr	r3, [pc, #8]	; (e988 <do_ecb+0x58>)
    e980:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    e984:	4770      	bx	lr
    e986:	bf00      	nop
    e988:	4000e000 	.word	0x4000e000

0000e98c <ecb_encrypt>:
	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
}

void ecb_encrypt(u8_t const *const key_le, u8_t const *const clear_text_le,
		 u8_t * const cipher_text_le, u8_t * const cipher_text_be)
{
    e98c:	b570      	push	{r4, r5, r6, lr}
    e98e:	b08c      	sub	sp, #48	; 0x30
    e990:	460e      	mov	r6, r1
    e992:	4615      	mov	r5, r2
    e994:	461c      	mov	r4, r3
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
    e996:	2210      	movs	r2, #16
    e998:	4601      	mov	r1, r0
    e99a:	4668      	mov	r0, sp
    e99c:	f7ff ff2e 	bl	e7fc <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
    e9a0:	2210      	movs	r2, #16
    e9a2:	4631      	mov	r1, r6
    e9a4:	eb0d 0002 	add.w	r0, sp, r2
    e9a8:	f7ff ff28 	bl	e7fc <mem_rcopy>

	do_ecb(&ecb);
    e9ac:	4668      	mov	r0, sp
    e9ae:	f7ff ffbf 	bl	e930 <do_ecb>

	if (cipher_text_le) {
    e9b2:	b125      	cbz	r5, e9be <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
    e9b4:	2210      	movs	r2, #16
    e9b6:	a908      	add	r1, sp, #32
    e9b8:	4628      	mov	r0, r5
    e9ba:	f7ff ff1f 	bl	e7fc <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
    e9be:	b124      	cbz	r4, e9ca <ecb_encrypt+0x3e>
		memcpy(cipher_text_be, &ecb.cipher_text[0],
    e9c0:	2210      	movs	r2, #16
    e9c2:	a908      	add	r1, sp, #32
    e9c4:	4620      	mov	r0, r4
    e9c6:	f7f1 fc7b 	bl	2c0 <memcpy>
			 sizeof(ecb.cipher_text));
	}
}
    e9ca:	b00c      	add	sp, #48	; 0x30
    e9cc:	bd70      	pop	{r4, r5, r6, pc}
	...

0000e9d0 <isr_radio>:
#endif

static radio_isr_fp sfp_radio_isr;

void isr_radio(void)
{
    e9d0:	b508      	push	{r3, lr}
	if (sfp_radio_isr) {
    e9d2:	4b02      	ldr	r3, [pc, #8]	; (e9dc <isr_radio+0xc>)
    e9d4:	681b      	ldr	r3, [r3, #0]
    e9d6:	b103      	cbz	r3, e9da <isr_radio+0xa>
		sfp_radio_isr();
    e9d8:	4798      	blx	r3
    e9da:	bd08      	pop	{r3, pc}
    e9dc:	20000dd0 	.word	0x20000dd0

0000e9e0 <radio_isr_set>:
	}
}

void radio_isr_set(radio_isr_fp fp_radio_isr)
{
    e9e0:	b508      	push	{r3, lr}
	sfp_radio_isr = fp_radio_isr;	/* atomic assignment of 32-bit word */
    e9e2:	4b07      	ldr	r3, [pc, #28]	; (ea00 <radio_isr_set+0x20>)
    e9e4:	6018      	str	r0, [r3, #0]

	NRF_RADIO->INTENSET = (0 |
    e9e6:	2210      	movs	r2, #16
    e9e8:	4b06      	ldr	r3, [pc, #24]	; (ea04 <radio_isr_set+0x24>)
    e9ea:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    e9ee:	2202      	movs	r2, #2
    e9f0:	4b05      	ldr	r3, [pc, #20]	; (ea08 <radio_isr_set+0x28>)
    e9f2:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
				/* | RADIO_INTENSET_RSSIEND_Msk |
				 */
	    );

	NVIC_ClearPendingIRQ(RADIO_IRQn);
	irq_enable(RADIO_IRQn);
    e9f6:	2001      	movs	r0, #1
    e9f8:	f018 fa3a 	bl	26e70 <_arch_irq_enable>
    e9fc:	bd08      	pop	{r3, pc}
    e9fe:	bf00      	nop
    ea00:	20000dd0 	.word	0x20000dd0
    ea04:	40001000 	.word	0x40001000
    ea08:	e000e100 	.word	0xe000e100

0000ea0c <radio_setup>:
			u32_t volatile PDM;
			u32_t volatile PWM;
		} RAMPRI;
	} volatile *NRF_AMLI = (void volatile *)0x40000000UL;

	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
    ea0c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    ea10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    ea14:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
    ea18:	f8c3 2e04 	str.w	r2, [r3, #3588]	; 0xe04
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
    ea1c:	2100      	movs	r1, #0
    ea1e:	f8c3 1e08 	str.w	r1, [r3, #3592]	; 0xe08
	NRF_AMLI->RAMPRI.ECB     = 0xFFFFFFFFUL;
    ea22:	f8c3 2e0c 	str.w	r2, [r3, #3596]	; 0xe0c
	NRF_AMLI->RAMPRI.CCM     = 0x00000000UL;
    ea26:	f8c3 1e10 	str.w	r1, [r3, #3600]	; 0xe10
	NRF_AMLI->RAMPRI.AAR     = 0xFFFFFFFFUL;
    ea2a:	f8c3 2e14 	str.w	r2, [r3, #3604]	; 0xe14
	NRF_AMLI->RAMPRI.SAADC   = 0xFFFFFFFFUL;
    ea2e:	f8c3 2e18 	str.w	r2, [r3, #3608]	; 0xe18
	NRF_AMLI->RAMPRI.UARTE   = 0xFFFFFFFFUL;
    ea32:	f8c3 2e1c 	str.w	r2, [r3, #3612]	; 0xe1c
	NRF_AMLI->RAMPRI.SERIAL0 = 0xFFFFFFFFUL;
    ea36:	f8c3 2e20 	str.w	r2, [r3, #3616]	; 0xe20
	NRF_AMLI->RAMPRI.SERIAL2 = 0xFFFFFFFFUL;
    ea3a:	f8c3 2e24 	str.w	r2, [r3, #3620]	; 0xe24
	NRF_AMLI->RAMPRI.NFCT    = 0xFFFFFFFFUL;
    ea3e:	f8c3 2e28 	str.w	r2, [r3, #3624]	; 0xe28
	NRF_AMLI->RAMPRI.I2S     = 0xFFFFFFFFUL;
    ea42:	f8c3 2e2c 	str.w	r2, [r3, #3628]	; 0xe2c
	NRF_AMLI->RAMPRI.PDM     = 0xFFFFFFFFUL;
    ea46:	f8c3 2e30 	str.w	r2, [r3, #3632]	; 0xe30
	NRF_AMLI->RAMPRI.PWM     = 0xFFFFFFFFUL;
    ea4a:	f8c3 2e34 	str.w	r2, [r3, #3636]	; 0xe34
    ea4e:	4770      	bx	lr

0000ea50 <radio_reset>:
#endif /* CONFIG_SOC_SERIES_NRF52X */
}

void radio_reset(void)
{
    ea50:	b508      	push	{r3, lr}
	irq_disable(RADIO_IRQn);
    ea52:	2001      	movs	r0, #1
    ea54:	f018 fa1a 	bl	26e8c <_arch_irq_disable>

	NRF_RADIO->POWER =
    ea58:	4b03      	ldr	r3, [pc, #12]	; (ea68 <radio_reset+0x18>)
    ea5a:	2200      	movs	r2, #0
    ea5c:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
	    ((RADIO_POWER_POWER_Disabled << RADIO_POWER_POWER_Pos) &
	     RADIO_POWER_POWER_Msk);
	NRF_RADIO->POWER =
    ea60:	2201      	movs	r2, #1
    ea62:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
    ea66:	bd08      	pop	{r3, pc}
    ea68:	40001000 	.word	0x40001000

0000ea6c <radio_phy_set>:

void radio_phy_set(u8_t phy, u8_t flags)
{
	u32_t mode;

	switch (phy) {
    ea6c:	2802      	cmp	r0, #2
    ea6e:	d106      	bne.n	ea7e <radio_phy_set+0x12>
		mode = RADIO_MODE_MODE_Nrf_2Mbit;
		break;

#elif defined(CONFIG_SOC_SERIES_NRF52X)
	case BIT(1):
		mode = RADIO_MODE_MODE_Ble_2Mbit;
    ea70:	2304      	movs	r3, #4
		break;
#endif /* CONFIG_SOC_NRF52840 */
#endif /* CONFIG_SOC_SERIES_NRF52X */
	}

	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
    ea72:	f003 030f 	and.w	r3, r3, #15
    ea76:	4a03      	ldr	r2, [pc, #12]	; (ea84 <radio_phy_set+0x18>)
    ea78:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
    ea7c:	4770      	bx	lr
		mode = RADIO_MODE_MODE_Ble_1Mbit;
    ea7e:	2303      	movs	r3, #3
    ea80:	e7f7      	b.n	ea72 <radio_phy_set+0x6>
    ea82:	bf00      	nop
    ea84:	40001000 	.word	0x40001000

0000ea88 <radio_tx_power_set>:
}

void radio_tx_power_set(u32_t power)
{
	/* TODO map power to h/w values. */
	NRF_RADIO->TXPOWER = power;
    ea88:	4b01      	ldr	r3, [pc, #4]	; (ea90 <radio_tx_power_set+0x8>)
    ea8a:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    ea8e:	4770      	bx	lr
    ea90:	40001000 	.word	0x40001000

0000ea94 <radio_freq_chan_set>:
}

void radio_freq_chan_set(u32_t chan)
{
	NRF_RADIO->FREQUENCY = chan;
    ea94:	4b01      	ldr	r3, [pc, #4]	; (ea9c <radio_freq_chan_set+0x8>)
    ea96:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    ea9a:	4770      	bx	lr
    ea9c:	40001000 	.word	0x40001000

0000eaa0 <radio_whiten_iv_set>:
}

void radio_whiten_iv_set(u32_t iv)
{
	NRF_RADIO->DATAWHITEIV = iv;
    eaa0:	4b07      	ldr	r3, [pc, #28]	; (eac0 <radio_whiten_iv_set+0x20>)
    eaa2:	f8c3 0554 	str.w	r0, [r3, #1364]	; 0x554

	NRF_RADIO->PCNF1 &= ~RADIO_PCNF1_WHITEEN_Msk;
    eaa6:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
    eaaa:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
    eaae:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((1UL) << RADIO_PCNF1_WHITEEN_Pos) &
    eab2:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
    eab6:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
    eaba:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    eabe:	4770      	bx	lr
    eac0:	40001000 	.word	0x40001000

0000eac4 <radio_aa_set>:
			    RADIO_PCNF1_WHITEEN_Msk;
}

void radio_aa_set(u8_t *aa)
{
	NRF_RADIO->TXADDRESS =
    eac4:	4a0a      	ldr	r2, [pc, #40]	; (eaf0 <radio_aa_set+0x2c>)
    eac6:	2300      	movs	r3, #0
    eac8:	f8c2 352c 	str.w	r3, [r2, #1324]	; 0x52c
	    (((0UL) << RADIO_TXADDRESS_TXADDRESS_Pos) &
	     RADIO_TXADDRESS_TXADDRESS_Msk);
	NRF_RADIO->RXADDRESSES =
    eacc:	2301      	movs	r3, #1
    eace:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
	    ((RADIO_RXADDRESSES_ADDR0_Enabled) << RADIO_RXADDRESSES_ADDR0_Pos);
	NRF_RADIO->PREFIX0 = aa[3];
    ead2:	78c3      	ldrb	r3, [r0, #3]
    ead4:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
    ead8:	7881      	ldrb	r1, [r0, #2]
    eada:	7843      	ldrb	r3, [r0, #1]
    eadc:	041b      	lsls	r3, r3, #16
    eade:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    eae2:	7801      	ldrb	r1, [r0, #0]
    eae4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    eae8:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
    eaec:	4770      	bx	lr
    eaee:	bf00      	nop
    eaf0:	40001000 	.word	0x40001000

0000eaf4 <radio_pkt_configure>:
}

void radio_pkt_configure(u8_t bits_len, u8_t max_len, u8_t flags)
{
    eaf4:	b410      	push	{r4}
	u8_t dc = flags & 0x01; /* Adv or Data channel */
    eaf6:	f002 0401 	and.w	r4, r2, #1
		bits_len = 5;
	}
#elif defined(CONFIG_SOC_SERIES_NRF52X)
	extra = 0;

	phy = (flags >> 1) & 0x07; /* phy */
    eafa:	f3c2 0242 	ubfx	r2, r2, #1, #3
	switch (phy) {
    eafe:	2a02      	cmp	r2, #2
    eb00:	d020      	beq.n	eb44 <radio_pkt_configure+0x50>
	case BIT(0):
	default:
		extra |= (RADIO_PCNF0_PLEN_8bit << RADIO_PCNF0_PLEN_Pos) &
    eb02:	2300      	movs	r3, #0
	}

	/* To use same Data Channel PDU structure with nRF5 specific overhead
	 * byte, include the S1 field in radio packet configuration.
	 */
	if (dc) {
    eb04:	b10c      	cbz	r4, eb0a <radio_pkt_configure+0x16>
		extra |= (RADIO_PCNF0_S1INCL_Include <<
    eb06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
	}
#endif /* CONFIG_SOC_SERIES_NRF52X */

	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
			    RADIO_PCNF0_S0LEN_Msk) |
			   ((((u32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) &
    eb0a:	f000 020f 	and.w	r2, r0, #15
			    RADIO_PCNF0_LFLEN_Msk) |
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
    eb0e:	f1c0 0008 	rsb	r0, r0, #8
    eb12:	0400      	lsls	r0, r0, #16
    eb14:	f400 2070 	and.w	r0, r0, #983040	; 0xf0000
			    RADIO_PCNF0_LFLEN_Msk) |
    eb18:	4310      	orrs	r0, r2
			    RADIO_PCNF0_S1LEN_Msk) |
    eb1a:	4303      	orrs	r3, r0
    eb1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
    eb20:	4a0a      	ldr	r2, [pc, #40]	; (eb4c <radio_pkt_configure+0x58>)
    eb22:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
			   extra;

	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
    eb26:	f8d2 0518 	ldr.w	r0, [r2, #1304]	; 0x518
    eb2a:	4b09      	ldr	r3, [pc, #36]	; (eb50 <radio_pkt_configure+0x5c>)
    eb2c:	4003      	ands	r3, r0
    eb2e:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
			      RADIO_PCNF1_BALEN_Msk | RADIO_PCNF1_ENDIAN_Msk);
	NRF_RADIO->PCNF1 |= ((((u32_t)max_len) << RADIO_PCNF1_MAXLEN_Pos) &
    eb32:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
    eb36:	4319      	orrs	r1, r3
    eb38:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
    eb3c:	f8c2 1518 	str.w	r1, [r2, #1304]	; 0x518
			    (((3UL) << RADIO_PCNF1_BALEN_Pos) &
			     RADIO_PCNF1_BALEN_Msk) |
			    (((RADIO_PCNF1_ENDIAN_Little) <<
			      RADIO_PCNF1_ENDIAN_Pos) &
			     RADIO_PCNF1_ENDIAN_Msk);
}
    eb40:	bc10      	pop	{r4}
    eb42:	4770      	bx	lr
		extra |= (RADIO_PCNF0_PLEN_16bit << RADIO_PCNF0_PLEN_Pos) &
    eb44:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    eb48:	e7dc      	b.n	eb04 <radio_pkt_configure+0x10>
    eb4a:	bf00      	nop
    eb4c:	40001000 	.word	0x40001000
    eb50:	fef80000 	.word	0xfef80000

0000eb54 <radio_pkt_rx_set>:

void radio_pkt_rx_set(void *rx_packet)
{
	NRF_RADIO->PACKETPTR = (u32_t)rx_packet;
    eb54:	4b01      	ldr	r3, [pc, #4]	; (eb5c <radio_pkt_rx_set+0x8>)
    eb56:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    eb5a:	4770      	bx	lr
    eb5c:	40001000 	.word	0x40001000

0000eb60 <radio_pkt_tx_set>:
}

void radio_pkt_tx_set(void *tx_packet)
{
	NRF_RADIO->PACKETPTR = (u32_t)tx_packet;
    eb60:	4b01      	ldr	r3, [pc, #4]	; (eb68 <radio_pkt_tx_set+0x8>)
    eb62:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    eb66:	4770      	bx	lr
    eb68:	40001000 	.word	0x40001000

0000eb6c <radio_tx_ready_delay_get>:
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	return 131; /* floor(129.5 + 1.6) */
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
#endif /* !CONFIG_SOC_NRF52840 */
#endif /* CONFIG_SOC_SERIES_NRF52X */
}
    eb6c:	208c      	movs	r0, #140	; 0x8c
    eb6e:	4770      	bx	lr

0000eb70 <radio_tx_chain_delay_get>:
	}
#else /* !CONFIG_SOC_NRF52840 */
	return 1; /* ceil(0.6) */
#endif /* !CONFIG_SOC_NRF52840 */
#endif /* CONFIG_SOC_SERIES_NRF52X */
}
    eb70:	2001      	movs	r0, #1
    eb72:	4770      	bx	lr

0000eb74 <radio_rx_ready_delay_get>:
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	return 130; /* ceil(129.5 + 0.2) */
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
#endif /* !CONFIG_SOC_NRF52840 */
#endif /* CONFIG_SOC_SERIES_NRF52X */
}
    eb74:	208c      	movs	r0, #140	; 0x8c
    eb76:	4770      	bx	lr

0000eb78 <radio_rx_chain_delay_get>:
		} else {
			return 20; /* ciel(19.6) */
		}
	}
#else /* !CONFIG_SOC_NRF52840 */
	switch (phy) {
    eb78:	2802      	cmp	r0, #2
    eb7a:	d101      	bne.n	eb80 <radio_rx_chain_delay_get+0x8>
	default:
	case BIT(0):
		return 10; /* ceil(9.4) */
	case BIT(1):
		return 5; /* ceil(5) */
    eb7c:	2005      	movs	r0, #5
	}
#endif /* !CONFIG_SOC_NRF52840 */
#endif /* CONFIG_SOC_SERIES_NRF52X */
}
    eb7e:	4770      	bx	lr
		return 10; /* ceil(9.4) */
    eb80:	200a      	movs	r0, #10
    eb82:	4770      	bx	lr

0000eb84 <radio_rx_enable>:

void radio_rx_enable(void)
{
	NRF_RADIO->TASKS_RXEN = 1;
    eb84:	2201      	movs	r2, #1
    eb86:	4b01      	ldr	r3, [pc, #4]	; (eb8c <radio_rx_enable+0x8>)
    eb88:	605a      	str	r2, [r3, #4]
    eb8a:	4770      	bx	lr
    eb8c:	40001000 	.word	0x40001000

0000eb90 <radio_tx_enable>:
}

void radio_tx_enable(void)
{
	NRF_RADIO->TASKS_TXEN = 1;
    eb90:	2201      	movs	r2, #1
    eb92:	4b01      	ldr	r3, [pc, #4]	; (eb98 <radio_tx_enable+0x8>)
    eb94:	601a      	str	r2, [r3, #0]
    eb96:	4770      	bx	lr
    eb98:	40001000 	.word	0x40001000

0000eb9c <radio_disable>:
	NRF_PPI->CHENCLR = PPI_CHEN_CH9_Msk | PPI_CHEN_CH12_Msk;
	NRF_PPI->TASKS_CHG[0].DIS = 1;
	NRF_PPI->TASKS_CHG[1].DIS = 1;
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	NRF_RADIO->SHORTS = 0;
    eb9c:	4b03      	ldr	r3, [pc, #12]	; (ebac <radio_disable+0x10>)
    eb9e:	2200      	movs	r2, #0
    eba0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	NRF_RADIO->TASKS_DISABLE = 1;
    eba4:	2201      	movs	r2, #1
    eba6:	611a      	str	r2, [r3, #16]
    eba8:	4770      	bx	lr
    ebaa:	bf00      	nop
    ebac:	40001000 	.word	0x40001000

0000ebb0 <radio_status_reset>:
}

void radio_status_reset(void)
{
	NRF_RADIO->EVENTS_READY = 0;
    ebb0:	4b06      	ldr	r3, [pc, #24]	; (ebcc <radio_status_reset+0x1c>)
    ebb2:	2200      	movs	r2, #0
    ebb4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_RADIO->EVENTS_ADDRESS = 0;
    ebb8:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_RADIO->EVENTS_PAYLOAD = 0;
    ebbc:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	NRF_RADIO->EVENTS_END = 0;
    ebc0:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_RADIO->EVENTS_DISABLED = 0;
    ebc4:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    ebc8:	4770      	bx	lr
    ebca:	bf00      	nop
    ebcc:	40001000 	.word	0x40001000

0000ebd0 <radio_is_ready>:
}

u32_t radio_is_ready(void)
{
	return (NRF_RADIO->EVENTS_READY != 0);
    ebd0:	4b03      	ldr	r3, [pc, #12]	; (ebe0 <radio_is_ready+0x10>)
    ebd2:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
}
    ebd6:	3000      	adds	r0, #0
    ebd8:	bf18      	it	ne
    ebda:	2001      	movne	r0, #1
    ebdc:	4770      	bx	lr
    ebde:	bf00      	nop
    ebe0:	40001000 	.word	0x40001000

0000ebe4 <radio_is_done>:

u32_t radio_is_done(void)
{
	return (NRF_RADIO->EVENTS_END != 0);
    ebe4:	4b03      	ldr	r3, [pc, #12]	; (ebf4 <radio_is_done+0x10>)
    ebe6:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
}
    ebea:	3000      	adds	r0, #0
    ebec:	bf18      	it	ne
    ebee:	2001      	movne	r0, #1
    ebf0:	4770      	bx	lr
    ebf2:	bf00      	nop
    ebf4:	40001000 	.word	0x40001000

0000ebf8 <radio_is_idle>:
	return (NRF_RADIO->EVENTS_DISABLED != 0);
}

u32_t radio_is_idle(void)
{
	return (NRF_RADIO->STATE == 0);
    ebf8:	4b03      	ldr	r3, [pc, #12]	; (ec08 <radio_is_idle+0x10>)
    ebfa:	f8d3 0550 	ldr.w	r0, [r3, #1360]	; 0x550
}
    ebfe:	fab0 f080 	clz	r0, r0
    ec02:	0940      	lsrs	r0, r0, #5
    ec04:	4770      	bx	lr
    ec06:	bf00      	nop
    ec08:	40001000 	.word	0x40001000

0000ec0c <radio_crc_configure>:

void radio_crc_configure(u32_t polynomial, u32_t iv)
{
	NRF_RADIO->CRCCNF =
    ec0c:	4b04      	ldr	r3, [pc, #16]	; (ec20 <radio_crc_configure+0x14>)
    ec0e:	f240 1203 	movw	r2, #259	; 0x103
    ec12:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	    (((RADIO_CRCCNF_SKIPADDR_Skip) << RADIO_CRCCNF_SKIPADDR_Pos) &
	     RADIO_CRCCNF_SKIPADDR_Msk) |
	    (((RADIO_CRCCNF_LEN_Three) << RADIO_CRCCNF_LEN_Pos) &
	       RADIO_CRCCNF_LEN_Msk);
	NRF_RADIO->CRCPOLY = polynomial;
    ec16:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
	NRF_RADIO->CRCINIT = iv;
    ec1a:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
    ec1e:	4770      	bx	lr
    ec20:	40001000 	.word	0x40001000

0000ec24 <radio_crc_is_valid>:
}

u32_t radio_crc_is_valid(void)
{
	return (NRF_RADIO->CRCSTATUS != 0);
    ec24:	4b03      	ldr	r3, [pc, #12]	; (ec34 <radio_crc_is_valid+0x10>)
    ec26:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
    ec2a:	3000      	adds	r0, #0
    ec2c:	bf18      	it	ne
    ec2e:	2001      	movne	r0, #1
    ec30:	4770      	bx	lr
    ec32:	bf00      	nop
    ec34:	40001000 	.word	0x40001000

0000ec38 <radio_pkt_empty_get>:
			(RADIO_PDU_LEN_MAX + 3) : PDU_AC_SIZE_MAX];

void *radio_pkt_empty_get(void)
{
	return _pkt_empty;
}
    ec38:	4800      	ldr	r0, [pc, #0]	; (ec3c <radio_pkt_empty_get+0x4>)
    ec3a:	4770      	bx	lr
    ec3c:	20000cc4 	.word	0x20000cc4

0000ec40 <radio_pkt_scratch_get>:

void *radio_pkt_scratch_get(void)
{
	return _pkt_scratch;
}
    ec40:	4800      	ldr	r0, [pc, #0]	; (ec44 <radio_pkt_scratch_get+0x4>)
    ec42:	4770      	bx	lr
    ec44:	20000cc8 	.word	0x20000cc8

0000ec48 <radio_switch_complete_and_rx>:
#endif /* CONFIG_BT_CTLR_TIFS_HW */

void radio_switch_complete_and_rx(u8_t phy_rx)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
    ec48:	220b      	movs	r2, #11
    ec4a:	4b02      	ldr	r3, [pc, #8]	; (ec54 <radio_switch_complete_and_rx+0xc>)
    ec4c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    ec50:	4770      	bx	lr
    ec52:	bf00      	nop
    ec54:	40001000 	.word	0x40001000

0000ec58 <radio_switch_complete_and_tx>:

void radio_switch_complete_and_tx(u8_t phy_rx, u8_t flags_rx, u8_t phy_tx,
				  u8_t flags_tx)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
    ec58:	2207      	movs	r2, #7
    ec5a:	4b02      	ldr	r3, [pc, #8]	; (ec64 <radio_switch_complete_and_tx+0xc>)
    ec5c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    ec60:	4770      	bx	lr
    ec62:	bf00      	nop
    ec64:	40001000 	.word	0x40001000

0000ec68 <radio_switch_complete_and_disable>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_switch_complete_and_disable(void)
{
	NRF_RADIO->SHORTS =
    ec68:	2203      	movs	r2, #3
    ec6a:	4b02      	ldr	r3, [pc, #8]	; (ec74 <radio_switch_complete_and_disable+0xc>)
    ec6c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    ec70:	4770      	bx	lr
    ec72:	bf00      	nop
    ec74:	40001000 	.word	0x40001000

0000ec78 <radio_rssi_measure>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_rssi_measure(void)
{
	NRF_RADIO->SHORTS |=
    ec78:	4a03      	ldr	r2, [pc, #12]	; (ec88 <radio_rssi_measure+0x10>)
    ec7a:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
    ec7e:	f443 7388 	orr.w	r3, r3, #272	; 0x110
    ec82:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    ec86:	4770      	bx	lr
    ec88:	40001000 	.word	0x40001000

0000ec8c <radio_rssi_get>:
	     RADIO_SHORTS_DISABLED_RSSISTOP_Msk);
}

u32_t radio_rssi_get(void)
{
	return NRF_RADIO->RSSISAMPLE;
    ec8c:	4b01      	ldr	r3, [pc, #4]	; (ec94 <radio_rssi_get+0x8>)
    ec8e:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}
    ec92:	4770      	bx	lr
    ec94:	40001000 	.word	0x40001000

0000ec98 <radio_rssi_status_reset>:

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
    ec98:	2200      	movs	r2, #0
    ec9a:	4b02      	ldr	r3, [pc, #8]	; (eca4 <radio_rssi_status_reset+0xc>)
    ec9c:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    eca0:	4770      	bx	lr
    eca2:	bf00      	nop
    eca4:	40001000 	.word	0x40001000

0000eca8 <radio_rssi_is_ready>:
}

u32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
    eca8:	4b03      	ldr	r3, [pc, #12]	; (ecb8 <radio_rssi_is_ready+0x10>)
    ecaa:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
    ecae:	3000      	adds	r0, #0
    ecb0:	bf18      	it	ne
    ecb2:	2001      	movne	r0, #1
    ecb4:	4770      	bx	lr
    ecb6:	bf00      	nop
    ecb8:	40001000 	.word	0x40001000

0000ecbc <radio_filter_configure>:

void radio_filter_configure(u8_t bitmask_enable, u8_t bitmask_addr_type,
			    u8_t *bdaddr)
{
    ecbc:	b470      	push	{r4, r5, r6}
	u8_t index;

	for (index = 0; index < 8; index++) {
    ecbe:	2400      	movs	r4, #0
    ecc0:	e019      	b.n	ecf6 <radio_filter_configure+0x3a>
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
    ecc2:	78d5      	ldrb	r5, [r2, #3]
			((u32_t)bdaddr[2] << 16) |
    ecc4:	7893      	ldrb	r3, [r2, #2]
    ecc6:	041b      	lsls	r3, r3, #16
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
    ecc8:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
			((u32_t)bdaddr[1] << 8) |
    eccc:	7855      	ldrb	r5, [r2, #1]
			((u32_t)bdaddr[2] << 16) |
    ecce:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
			bdaddr[0];
    ecd2:	7815      	ldrb	r5, [r2, #0]
			((u32_t)bdaddr[1] << 8) |
    ecd4:	432b      	orrs	r3, r5
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
    ecd6:	4d0c      	ldr	r5, [pc, #48]	; (ed08 <radio_filter_configure+0x4c>)
    ecd8:	f504 76c0 	add.w	r6, r4, #384	; 0x180
    ecdc:	f845 3026 	str.w	r3, [r5, r6, lsl #2]
		NRF_RADIO->DAP[index] = ((u32_t)bdaddr[5] << 8) | bdaddr[4];
    ece0:	7956      	ldrb	r6, [r2, #5]
    ece2:	7913      	ldrb	r3, [r2, #4]
    ece4:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    ece8:	f504 76c4 	add.w	r6, r4, #392	; 0x188
    ecec:	f845 3026 	str.w	r3, [r5, r6, lsl #2]
		bdaddr += 6;
    ecf0:	3206      	adds	r2, #6
	for (index = 0; index < 8; index++) {
    ecf2:	3401      	adds	r4, #1
    ecf4:	b2e4      	uxtb	r4, r4
    ecf6:	2c07      	cmp	r4, #7
    ecf8:	d9e3      	bls.n	ecc2 <radio_filter_configure+0x6>
	}

	NRF_RADIO->DACNF = ((u32_t)bitmask_addr_type << 8) | bitmask_enable;
    ecfa:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
    ecfe:	4b02      	ldr	r3, [pc, #8]	; (ed08 <radio_filter_configure+0x4c>)
    ed00:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
}
    ed04:	bc70      	pop	{r4, r5, r6}
    ed06:	4770      	bx	lr
    ed08:	40001000 	.word	0x40001000

0000ed0c <radio_filter_disable>:

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
    ed0c:	4a03      	ldr	r2, [pc, #12]	; (ed1c <radio_filter_disable+0x10>)
    ed0e:	f8d2 3640 	ldr.w	r3, [r2, #1600]	; 0x640
    ed12:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    ed16:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
    ed1a:	4770      	bx	lr
    ed1c:	40001000 	.word	0x40001000

0000ed20 <radio_filter_status_reset>:
}

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
    ed20:	4b03      	ldr	r3, [pc, #12]	; (ed30 <radio_filter_status_reset+0x10>)
    ed22:	2200      	movs	r2, #0
    ed24:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	NRF_RADIO->EVENTS_DEVMISS = 0;
    ed28:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    ed2c:	4770      	bx	lr
    ed2e:	bf00      	nop
    ed30:	40001000 	.word	0x40001000

0000ed34 <radio_filter_has_match>:
}

u32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
    ed34:	4b03      	ldr	r3, [pc, #12]	; (ed44 <radio_filter_has_match+0x10>)
    ed36:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
    ed3a:	3000      	adds	r0, #0
    ed3c:	bf18      	it	ne
    ed3e:	2001      	movne	r0, #1
    ed40:	4770      	bx	lr
    ed42:	bf00      	nop
    ed44:	40001000 	.word	0x40001000

0000ed48 <radio_filter_match_get>:

u32_t radio_filter_match_get(void)
{
	return NRF_RADIO->DAI;
    ed48:	4b01      	ldr	r3, [pc, #4]	; (ed50 <radio_filter_match_get+0x8>)
    ed4a:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
}
    ed4e:	4770      	bx	lr
    ed50:	40001000 	.word	0x40001000

0000ed54 <radio_bc_configure>:

void radio_bc_configure(u32_t n)
{
	NRF_RADIO->BCC = n;
    ed54:	4b04      	ldr	r3, [pc, #16]	; (ed68 <radio_bc_configure+0x14>)
    ed56:	f8c3 0560 	str.w	r0, [r3, #1376]	; 0x560
	NRF_RADIO->SHORTS |= RADIO_SHORTS_ADDRESS_BCSTART_Msk;
    ed5a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    ed5e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    ed62:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    ed66:	4770      	bx	lr
    ed68:	40001000 	.word	0x40001000

0000ed6c <radio_bc_status_reset>:
}

void radio_bc_status_reset(void)
{
	NRF_RADIO->EVENTS_BCMATCH = 0;
    ed6c:	2200      	movs	r2, #0
    ed6e:	4b02      	ldr	r3, [pc, #8]	; (ed78 <radio_bc_status_reset+0xc>)
    ed70:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    ed74:	4770      	bx	lr
    ed76:	bf00      	nop
    ed78:	40001000 	.word	0x40001000

0000ed7c <radio_bc_has_match>:
}

u32_t radio_bc_has_match(void)
{
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
    ed7c:	4b03      	ldr	r3, [pc, #12]	; (ed8c <radio_bc_has_match+0x10>)
    ed7e:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
}
    ed82:	3000      	adds	r0, #0
    ed84:	bf18      	it	ne
    ed86:	2001      	movne	r0, #1
    ed88:	4770      	bx	lr
    ed8a:	bf00      	nop
    ed8c:	40001000 	.word	0x40001000

0000ed90 <radio_tmr_status_reset>:

void radio_tmr_status_reset(void)
{
	NRF_RTC0->EVTENCLR = RTC_EVTENCLR_COMPARE2_Msk;
    ed90:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    ed94:	4b04      	ldr	r3, [pc, #16]	; (eda8 <radio_tmr_status_reset+0x18>)
    ed96:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
	NRF_PPI->CHENCLR =
    ed9a:	f248 027f 	movw	r2, #32895	; 0x807f
    ed9e:	f503 33a0 	add.w	r3, r3, #81920	; 0x14000
    eda2:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    eda6:	4770      	bx	lr
    eda8:	4000b000 	.word	0x4000b000

0000edac <radio_tmr_tifs_set>:
}

void radio_tmr_tifs_set(u32_t tifs)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
    edac:	4b01      	ldr	r3, [pc, #4]	; (edb4 <radio_tmr_tifs_set+0x8>)
    edae:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
    edb2:	4770      	bx	lr
    edb4:	40001000 	.word	0x40001000

0000edb8 <radio_tmr_start>:
	NRF_TIMER1->CC[sw_tifs_toggle] = tifs;
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

u32_t radio_tmr_start(u8_t trx, u32_t ticks_start, u32_t remainder)
{
    edb8:	b470      	push	{r4, r5, r6}
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
    edba:	f5a2 2374 	sub.w	r3, r2, #999424	; 0xf4000
    edbe:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
    edc2:	4c21      	ldr	r4, [pc, #132]	; (ee48 <radio_tmr_start+0x90>)
    edc4:	42a3      	cmp	r3, r4
    edc6:	d906      	bls.n	edd6 <radio_tmr_start+0x1e>
		ticks_start--;
    edc8:	3901      	subs	r1, #1
		remainder += 30517578UL;
    edca:	f102 72e8 	add.w	r2, r2, #30408704	; 0x1d00000
    edce:	f502 32d4 	add.w	r2, r2, #108544	; 0x1a800
    edd2:	f502 72a5 	add.w	r2, r2, #330	; 0x14a
	}
	remainder /= 1000000UL;
    edd6:	4b1d      	ldr	r3, [pc, #116]	; (ee4c <radio_tmr_start+0x94>)
    edd8:	fba3 3202 	umull	r3, r2, r3, r2
    eddc:	0c92      	lsrs	r2, r2, #18

	NRF_TIMER0->TASKS_CLEAR = 1;
    edde:	4b1c      	ldr	r3, [pc, #112]	; (ee50 <radio_tmr_start+0x98>)
    ede0:	2401      	movs	r4, #1
    ede2:	60dc      	str	r4, [r3, #12]
	NRF_TIMER0->MODE = 0;
    ede4:	2500      	movs	r5, #0
    ede6:	f8c3 5504 	str.w	r5, [r3, #1284]	; 0x504
	NRF_TIMER0->PRESCALER = 4;
    edea:	2404      	movs	r4, #4
    edec:	f8c3 4510 	str.w	r4, [r3, #1296]	; 0x510
	NRF_TIMER0->BITMODE = 2;	/* 24 - bit */
    edf0:	2602      	movs	r6, #2
    edf2:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508

	NRF_TIMER0->CC[0] = remainder;
    edf6:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
	NRF_TIMER0->EVENTS_COMPARE[0] = 0;
    edfa:	f8c3 5140 	str.w	r5, [r3, #320]	; 0x140

	NRF_RTC0->CC[2] = ticks_start;
    edfe:	4c15      	ldr	r4, [pc, #84]	; (ee54 <radio_tmr_start+0x9c>)
    ee00:	f8c4 1548 	str.w	r1, [r4, #1352]	; 0x548
	NRF_RTC0->EVTENSET = RTC_EVTENSET_COMPARE2_Msk;
    ee04:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    ee08:	f8c4 1344 	str.w	r1, [r4, #836]	; 0x344
	NRF_RTC0->EVENTS_COMPARE[2] = 0;
    ee0c:	f8c4 5148 	str.w	r5, [r4, #328]	; 0x148

	NRF_PPI->CH[1].EEP = (u32_t)&(NRF_RTC0->EVENTS_COMPARE[2]);
    ee10:	4911      	ldr	r1, [pc, #68]	; (ee58 <radio_tmr_start+0xa0>)
    ee12:	f504 74a4 	add.w	r4, r4, #328	; 0x148
    ee16:	f8c1 4518 	str.w	r4, [r1, #1304]	; 0x518
	NRF_PPI->CH[1].TEP = (u32_t)&(NRF_TIMER0->TASKS_START);
    ee1a:	f8c1 351c 	str.w	r3, [r1, #1308]	; 0x51c
	NRF_PPI->CHENSET = PPI_CHEN_CH1_Msk;
    ee1e:	f8c1 6504 	str.w	r6, [r1, #1284]	; 0x504

	NRF_PPI->CH[0].EEP = (u32_t)&(NRF_TIMER0->EVENTS_COMPARE[0]);
    ee22:	f503 73a0 	add.w	r3, r3, #320	; 0x140
    ee26:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
	NRF_PPI->CH[0].TEP = (trx) ? (u32_t)&(NRF_RADIO->TASKS_TXEN) :
    ee2a:	b948      	cbnz	r0, ee40 <radio_tmr_start+0x88>
    ee2c:	490b      	ldr	r1, [pc, #44]	; (ee5c <radio_tmr_start+0xa4>)
    ee2e:	4b0a      	ldr	r3, [pc, #40]	; (ee58 <radio_tmr_start+0xa0>)
    ee30:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
				     (u32_t)&(NRF_RADIO->TASKS_RXEN);
	NRF_PPI->CHENSET = PPI_CHEN_CH0_Msk;
    ee34:	2101      	movs	r1, #1
    ee36:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
	NRF_PPI->CHG[0] = PPI_CHG_CH10_Msk | PPI_CHG_CH13_Msk;
	NRF_PPI->CHG[1] = PPI_CHG_CH11_Msk | PPI_CHG_CH14_Msk;
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	return remainder;
}
    ee3a:	4610      	mov	r0, r2
    ee3c:	bc70      	pop	{r4, r5, r6}
    ee3e:	4770      	bx	lr
	NRF_PPI->CH[0].TEP = (trx) ? (u32_t)&(NRF_RADIO->TASKS_TXEN) :
    ee40:	f5a1 31f0 	sub.w	r1, r1, #122880	; 0x1e000
    ee44:	e7f3      	b.n	ee2e <radio_tmr_start+0x76>
    ee46:	bf00      	nop
    ee48:	7ff0bdbf 	.word	0x7ff0bdbf
    ee4c:	431bde83 	.word	0x431bde83
    ee50:	40008000 	.word	0x40008000
    ee54:	4000b000 	.word	0x4000b000
    ee58:	4001f000 	.word	0x4001f000
    ee5c:	40001004 	.word	0x40001004

0000ee60 <radio_tmr_stop>:
	return start;
}

void radio_tmr_stop(void)
{
	NRF_TIMER0->TASKS_STOP = 1;
    ee60:	4b02      	ldr	r3, [pc, #8]	; (ee6c <radio_tmr_stop+0xc>)
    ee62:	2201      	movs	r2, #1
    ee64:	605a      	str	r2, [r3, #4]
	NRF_TIMER0->TASKS_SHUTDOWN = 1;
    ee66:	611a      	str	r2, [r3, #16]
    ee68:	4770      	bx	lr
    ee6a:	bf00      	nop
    ee6c:	40008000 	.word	0x40008000

0000ee70 <radio_tmr_hcto_configure>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_tmr_hcto_configure(u32_t hcto)
{
	NRF_TIMER0->CC[1] = hcto;
    ee70:	4b0e      	ldr	r3, [pc, #56]	; (eeac <radio_tmr_hcto_configure+0x3c>)
    ee72:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
	NRF_TIMER0->EVENTS_COMPARE[1] = 0;
    ee76:	2200      	movs	r2, #0
    ee78:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

	NRF_PPI->CH[3].EEP = (u32_t)&(NRF_RADIO->EVENTS_ADDRESS);
    ee7c:	f503 33b8 	add.w	r3, r3, #94208	; 0x17000
    ee80:	4a0b      	ldr	r2, [pc, #44]	; (eeb0 <radio_tmr_hcto_configure+0x40>)
    ee82:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
	NRF_PPI->CH[3].TEP = (u32_t)&(NRF_TIMER0->TASKS_CAPTURE[1]);
    ee86:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
    ee8a:	3240      	adds	r2, #64	; 0x40
    ee8c:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
	NRF_PPI->CH[4].EEP = (u32_t)&(NRF_TIMER0->EVENTS_COMPARE[1]);
    ee90:	f502 7280 	add.w	r2, r2, #256	; 0x100
    ee94:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
	NRF_PPI->CH[4].TEP = (u32_t)&(NRF_RADIO->TASKS_DISABLE);
    ee98:	f5a2 42e2 	sub.w	r2, r2, #28928	; 0x7100
    ee9c:	3a34      	subs	r2, #52	; 0x34
    ee9e:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	NRF_PPI->CHENSET = (PPI_CHEN_CH3_Msk | PPI_CHEN_CH4_Msk);
    eea2:	2218      	movs	r2, #24
    eea4:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    eea8:	4770      	bx	lr
    eeaa:	bf00      	nop
    eeac:	40008000 	.word	0x40008000
    eeb0:	40001104 	.word	0x40001104

0000eeb4 <radio_tmr_aa_capture>:
}

void radio_tmr_aa_capture(void)
{
	NRF_PPI->CH[2].EEP = (u32_t)&(NRF_RADIO->EVENTS_READY);
    eeb4:	4b0b      	ldr	r3, [pc, #44]	; (eee4 <radio_tmr_aa_capture+0x30>)
    eeb6:	4a0c      	ldr	r2, [pc, #48]	; (eee8 <radio_tmr_aa_capture+0x34>)
    eeb8:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
	NRF_PPI->CH[2].TEP = (u32_t)&(NRF_TIMER0->TASKS_CAPTURE[0]);
    eebc:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
    eec0:	3240      	adds	r2, #64	; 0x40
    eec2:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	NRF_PPI->CH[3].EEP = (u32_t)&(NRF_RADIO->EVENTS_ADDRESS);
    eec6:	f5a2 42de 	sub.w	r2, r2, #28416	; 0x6f00
    eeca:	3a3c      	subs	r2, #60	; 0x3c
    eecc:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
	NRF_PPI->CH[3].TEP = (u32_t)&(NRF_TIMER0->TASKS_CAPTURE[1]);
    eed0:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
    eed4:	3240      	adds	r2, #64	; 0x40
    eed6:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
	NRF_PPI->CHENSET = (PPI_CHEN_CH2_Msk | PPI_CHEN_CH3_Msk);
    eeda:	220c      	movs	r2, #12
    eedc:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    eee0:	4770      	bx	lr
    eee2:	bf00      	nop
    eee4:	4001f000 	.word	0x4001f000
    eee8:	40001100 	.word	0x40001100

0000eeec <radio_tmr_aa_get>:
}

u32_t radio_tmr_aa_get(void)
{
	return NRF_TIMER0->CC[1];
    eeec:	4b01      	ldr	r3, [pc, #4]	; (eef4 <radio_tmr_aa_get+0x8>)
    eeee:	f8d3 0544 	ldr.w	r0, [r3, #1348]	; 0x544
}
    eef2:	4770      	bx	lr
    eef4:	40008000 	.word	0x40008000

0000eef8 <radio_tmr_aa_save>:

static u32_t radio_tmr_aa;

void radio_tmr_aa_save(u32_t aa)
{
	radio_tmr_aa = aa;
    eef8:	4b01      	ldr	r3, [pc, #4]	; (ef00 <radio_tmr_aa_save+0x8>)
    eefa:	6018      	str	r0, [r3, #0]
    eefc:	4770      	bx	lr
    eefe:	bf00      	nop
    ef00:	20000dcc 	.word	0x20000dcc

0000ef04 <radio_tmr_aa_restore>:

u32_t radio_tmr_aa_restore(void)
{
	/* NOTE: we dont need to restore for now, but return the saved value. */
	return radio_tmr_aa;
}
    ef04:	4b01      	ldr	r3, [pc, #4]	; (ef0c <radio_tmr_aa_restore+0x8>)
    ef06:	6818      	ldr	r0, [r3, #0]
    ef08:	4770      	bx	lr
    ef0a:	bf00      	nop
    ef0c:	20000dcc 	.word	0x20000dcc

0000ef10 <radio_tmr_ready_get>:

u32_t radio_tmr_ready_get(void)
{
	return NRF_TIMER0->CC[0];
    ef10:	4b01      	ldr	r3, [pc, #4]	; (ef18 <radio_tmr_ready_get+0x8>)
    ef12:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
}
    ef16:	4770      	bx	lr
    ef18:	40008000 	.word	0x40008000

0000ef1c <radio_tmr_end_capture>:

void radio_tmr_end_capture(void)
{
	NRF_PPI->CH[5].EEP = (u32_t)&(NRF_RADIO->EVENTS_END);
    ef1c:	4b06      	ldr	r3, [pc, #24]	; (ef38 <radio_tmr_end_capture+0x1c>)
    ef1e:	4a07      	ldr	r2, [pc, #28]	; (ef3c <radio_tmr_end_capture+0x20>)
    ef20:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
	NRF_PPI->CH[5].TEP = (u32_t)&(NRF_TIMER0->TASKS_CAPTURE[2]);
    ef24:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
    ef28:	323c      	adds	r2, #60	; 0x3c
    ef2a:	f8c3 253c 	str.w	r2, [r3, #1340]	; 0x53c
	NRF_PPI->CHENSET = PPI_CHEN_CH5_Msk;
    ef2e:	2220      	movs	r2, #32
    ef30:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    ef34:	4770      	bx	lr
    ef36:	bf00      	nop
    ef38:	4001f000 	.word	0x4001f000
    ef3c:	4000110c 	.word	0x4000110c

0000ef40 <radio_tmr_end_get>:
}

u32_t radio_tmr_end_get(void)
{
	return NRF_TIMER0->CC[2];
    ef40:	4b01      	ldr	r3, [pc, #4]	; (ef48 <radio_tmr_end_get+0x8>)
    ef42:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}
    ef46:	4770      	bx	lr
    ef48:	40008000 	.word	0x40008000

0000ef4c <radio_ccm_rx_pkt_set>:
#endif /* CONFIG_BT_CTLR_GPIO_PA_PIN || CONFIG_BT_CTLR_GPIO_LNA_PIN */

static u8_t MALIGN(4) _ccm_scratch[(RADIO_PDU_LEN_MAX - 4) + 16];

void *radio_ccm_rx_pkt_set(struct ccm *ccm, u8_t phy, void *pkt)
{
    ef4c:	b410      	push	{r4}
	u32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    ef4e:	4b18      	ldr	r3, [pc, #96]	; (efb0 <radio_ccm_rx_pkt_set+0x64>)
    ef50:	2400      	movs	r4, #0
    ef52:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
    ef56:	2402      	movs	r4, #2
    ef58:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	/* Enable CCM support for 8-bit length field PDUs. */
	mode |= (CCM_MODE_LENGTH_Extended << CCM_MODE_LENGTH_Pos) &
		CCM_MODE_LENGTH_Msk;

	/* Select CCM data rate based on current PHY in use. */
	switch (phy) {
    ef5c:	42a1      	cmp	r1, r4
    ef5e:	d125      	bne.n	efac <radio_ccm_rx_pkt_set+0x60>
			 CCM_MODE_DATARATE_Pos) &
			CCM_MODE_DATARATE_Msk;
		break;

	case BIT(1):
		mode |= (CCM_MODE_DATARATE_2Mbit <<
    ef60:	4914      	ldr	r1, [pc, #80]	; (efb4 <radio_ccm_rx_pkt_set+0x68>)
		NRF_PPI->CHENSET = PPI_CHEN_CH15_Msk;
		break;
#endif /* CONFIG_SOC_NRF52840 */
	}
#endif
	NRF_CCM->MODE = mode;
    ef62:	4b13      	ldr	r3, [pc, #76]	; (efb0 <radio_ccm_rx_pkt_set+0x64>)
    ef64:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (u32_t)ccm;
    ef68:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (u32_t)_pkt_scratch;
    ef6c:	4812      	ldr	r0, [pc, #72]	; (efb8 <radio_ccm_rx_pkt_set+0x6c>)
    ef6e:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (u32_t)pkt;
    ef72:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
    ef76:	4a11      	ldr	r2, [pc, #68]	; (efbc <radio_ccm_rx_pkt_set+0x70>)
    ef78:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = 0;
    ef7c:	2200      	movs	r2, #0
    ef7e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDKSGEN = 0;
    ef82:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_CCM->EVENTS_ENDCRYPT = 0;
    ef86:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
    ef8a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

	NRF_PPI->CH[6].EEP = (u32_t)&(NRF_RADIO->EVENTS_ADDRESS);
    ef8e:	4a0c      	ldr	r2, [pc, #48]	; (efc0 <radio_ccm_rx_pkt_set+0x74>)
    ef90:	490c      	ldr	r1, [pc, #48]	; (efc4 <radio_ccm_rx_pkt_set+0x78>)
    ef92:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	NRF_PPI->CH[6].TEP = (u32_t)&(NRF_CCM->TASKS_CRYPT);
    ef96:	f501 415f 	add.w	r1, r1, #57088	; 0xdf00
    ef9a:	f8c2 1544 	str.w	r1, [r2, #1348]	; 0x544
	NRF_PPI->CHENSET = PPI_CHEN_CH6_Msk;
    ef9e:	2140      	movs	r1, #64	; 0x40
    efa0:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504

	NRF_CCM->TASKS_KSGEN = 1;
    efa4:	2201      	movs	r2, #1
    efa6:	601a      	str	r2, [r3, #0]

	return _pkt_scratch;
}
    efa8:	bc10      	pop	{r4}
    efaa:	4770      	bx	lr
		mode |= (CCM_MODE_DATARATE_1Mbit <<
    efac:	4906      	ldr	r1, [pc, #24]	; (efc8 <radio_ccm_rx_pkt_set+0x7c>)
    efae:	e7d8      	b.n	ef62 <radio_ccm_rx_pkt_set+0x16>
    efb0:	4000f000 	.word	0x4000f000
    efb4:	01010001 	.word	0x01010001
    efb8:	20000cc8 	.word	0x20000cc8
    efbc:	20000bb8 	.word	0x20000bb8
    efc0:	4001f000 	.word	0x4001f000
    efc4:	40001104 	.word	0x40001104
    efc8:	01000001 	.word	0x01000001

0000efcc <radio_ccm_tx_pkt_set>:

void *radio_ccm_tx_pkt_set(struct ccm *ccm, void *pkt)
{
    efcc:	b410      	push	{r4}
	u32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    efce:	4b10      	ldr	r3, [pc, #64]	; (f010 <radio_ccm_tx_pkt_set+0x44>)
    efd0:	2200      	movs	r2, #0
    efd2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
    efd6:	2402      	movs	r4, #2
    efd8:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	 * radio Tx on any PHY.
	 */
	mode |= (CCM_MODE_DATARATE_2Mbit << CCM_MODE_DATARATE_Pos) &
		CCM_MODE_DATARATE_Msk;
#endif
	NRF_CCM->MODE = mode;
    efdc:	4c0d      	ldr	r4, [pc, #52]	; (f014 <radio_ccm_tx_pkt_set+0x48>)
    efde:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (u32_t)ccm;
    efe2:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (u32_t)pkt;
    efe6:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (u32_t)_pkt_scratch;
    efea:	480b      	ldr	r0, [pc, #44]	; (f018 <radio_ccm_tx_pkt_set+0x4c>)
    efec:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
    eff0:	490a      	ldr	r1, [pc, #40]	; (f01c <radio_ccm_tx_pkt_set+0x50>)
    eff2:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
    eff6:	2101      	movs	r1, #1
    eff8:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDKSGEN = 0;
    effc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_CCM->EVENTS_ENDCRYPT = 0;
    f000:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
    f004:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

	NRF_CCM->TASKS_KSGEN = 1;
    f008:	6019      	str	r1, [r3, #0]

	return _pkt_scratch;
}
    f00a:	bc10      	pop	{r4}
    f00c:	4770      	bx	lr
    f00e:	bf00      	nop
    f010:	4000f000 	.word	0x4000f000
    f014:	01010000 	.word	0x01010000
    f018:	20000cc8 	.word	0x20000cc8
    f01c:	20000bb8 	.word	0x20000bb8

0000f020 <radio_ccm_is_done>:

u32_t radio_ccm_is_done(void)
{
	NRF_CCM->INTENSET = CCM_INTENSET_ENDCRYPT_Msk;
    f020:	2202      	movs	r2, #2
    f022:	4b0d      	ldr	r3, [pc, #52]	; (f058 <radio_ccm_is_done+0x38>)
    f024:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
    f028:	e002      	b.n	f030 <radio_ccm_is_done+0x10>
    f02a:	bf20      	wfe
  __ASM volatile ("sev");
    f02c:	bf40      	sev
  __ASM volatile ("wfe");
    f02e:	bf20      	wfe
    f030:	4b09      	ldr	r3, [pc, #36]	; (f058 <radio_ccm_is_done+0x38>)
    f032:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    f036:	2b00      	cmp	r3, #0
    f038:	d0f7      	beq.n	f02a <radio_ccm_is_done+0xa>
		__WFE();
		__SEV();
		__WFE();
	}
	NRF_CCM->INTENCLR = CCM_INTENCLR_ENDCRYPT_Msk;
    f03a:	4b07      	ldr	r3, [pc, #28]	; (f058 <radio_ccm_is_done+0x38>)
    f03c:	2202      	movs	r2, #2
    f03e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    f042:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    f046:	4a05      	ldr	r2, [pc, #20]	; (f05c <radio_ccm_is_done+0x3c>)
    f048:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
	NVIC_ClearPendingIRQ(CCM_AAR_IRQn);

	return (NRF_CCM->EVENTS_ERROR == 0);
    f04c:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
}
    f050:	fab0 f080 	clz	r0, r0
    f054:	0940      	lsrs	r0, r0, #5
    f056:	4770      	bx	lr
    f058:	4000f000 	.word	0x4000f000
    f05c:	e000e100 	.word	0xe000e100

0000f060 <radio_ccm_mic_is_valid>:

u32_t radio_ccm_mic_is_valid(void)
{
	return (NRF_CCM->MICSTATUS != 0);
    f060:	4b03      	ldr	r3, [pc, #12]	; (f070 <radio_ccm_mic_is_valid+0x10>)
    f062:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
    f066:	3000      	adds	r0, #0
    f068:	bf18      	it	ne
    f06a:	2001      	movne	r0, #1
    f06c:	4770      	bx	lr
    f06e:	bf00      	nop
    f070:	4000f000 	.word	0x4000f000

0000f074 <radio_ar_configure>:

static u8_t MALIGN(4) _aar_scratch[3];

void radio_ar_configure(u32_t nirk, void *irk)
{
    f074:	b510      	push	{r4, lr}
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
    f076:	4c13      	ldr	r4, [pc, #76]	; (f0c4 <radio_ar_configure+0x50>)
    f078:	2303      	movs	r3, #3
    f07a:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
			  AAR_ENABLE_ENABLE_Msk;
	NRF_AAR->NIRK = nirk;
    f07e:	f8c4 0504 	str.w	r0, [r4, #1284]	; 0x504
	NRF_AAR->IRKPTR = (u32_t)irk;
    f082:	f8c4 1508 	str.w	r1, [r4, #1288]	; 0x508
	NRF_AAR->ADDRPTR = (u32_t)NRF_RADIO->PACKETPTR - 1;
    f086:	4b10      	ldr	r3, [pc, #64]	; (f0c8 <radio_ar_configure+0x54>)
    f088:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
    f08c:	3b01      	subs	r3, #1
    f08e:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
	NRF_AAR->SCRATCHPTR = (u32_t)&_aar_scratch[0];
    f092:	4b0e      	ldr	r3, [pc, #56]	; (f0cc <radio_ar_configure+0x58>)
    f094:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514

	NRF_AAR->EVENTS_END = 0;
    f098:	2300      	movs	r3, #0
    f09a:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
	NRF_AAR->EVENTS_RESOLVED = 0;
    f09e:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
	NRF_AAR->EVENTS_NOTRESOLVED = 0;
    f0a2:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108

	radio_bc_configure(64);
    f0a6:	2040      	movs	r0, #64	; 0x40
    f0a8:	f7ff fe54 	bl	ed54 <radio_bc_configure>
	radio_bc_status_reset();
    f0ac:	f7ff fe5e 	bl	ed6c <radio_bc_status_reset>

	NRF_PPI->CH[6].EEP = (u32_t)&(NRF_RADIO->EVENTS_BCMATCH);
    f0b0:	4b07      	ldr	r3, [pc, #28]	; (f0d0 <radio_ar_configure+0x5c>)
    f0b2:	4a08      	ldr	r2, [pc, #32]	; (f0d4 <radio_ar_configure+0x60>)
    f0b4:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
	NRF_PPI->CH[6].TEP = (u32_t)&(NRF_AAR->TASKS_START);
    f0b8:	f8c3 4544 	str.w	r4, [r3, #1348]	; 0x544
	NRF_PPI->CHENSET = PPI_CHEN_CH6_Msk;
    f0bc:	2240      	movs	r2, #64	; 0x40
    f0be:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    f0c2:	bd10      	pop	{r4, pc}
    f0c4:	4000f000 	.word	0x4000f000
    f0c8:	40001000 	.word	0x40001000
    f0cc:	20000bb4 	.word	0x20000bb4
    f0d0:	4001f000 	.word	0x4001f000
    f0d4:	40001128 	.word	0x40001128

0000f0d8 <radio_ar_match_get>:
}

u32_t radio_ar_match_get(void)
{
	return NRF_AAR->STATUS;
    f0d8:	4b01      	ldr	r3, [pc, #4]	; (f0e0 <radio_ar_match_get+0x8>)
    f0da:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
    f0de:	4770      	bx	lr
    f0e0:	4000f000 	.word	0x4000f000

0000f0e4 <radio_ar_status_reset>:

void radio_ar_status_reset(void)
{
    f0e4:	b508      	push	{r3, lr}
	radio_bc_status_reset();
    f0e6:	f7ff fe41 	bl	ed6c <radio_bc_status_reset>

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
    f0ea:	2200      	movs	r2, #0
    f0ec:	4b01      	ldr	r3, [pc, #4]	; (f0f4 <radio_ar_status_reset+0x10>)
    f0ee:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    f0f2:	bd08      	pop	{r3, pc}
    f0f4:	4000f000 	.word	0x4000f000

0000f0f8 <radio_ar_has_match>:
			  AAR_ENABLE_ENABLE_Msk;
}

u32_t radio_ar_has_match(void)
{
    f0f8:	b508      	push	{r3, lr}
	return (radio_bc_has_match() &&
    f0fa:	f7ff fe3f 	bl	ed7c <radio_bc_has_match>
		NRF_AAR->EVENTS_END &&
		NRF_AAR->EVENTS_RESOLVED &&
    f0fe:	b168      	cbz	r0, f11c <radio_ar_has_match+0x24>
		NRF_AAR->EVENTS_END &&
    f100:	4b0a      	ldr	r3, [pc, #40]	; (f12c <radio_ar_has_match+0x34>)
    f102:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
	return (radio_bc_has_match() &&
    f106:	b15b      	cbz	r3, f120 <radio_ar_has_match+0x28>
		NRF_AAR->EVENTS_RESOLVED &&
    f108:	4b08      	ldr	r3, [pc, #32]	; (f12c <radio_ar_has_match+0x34>)
    f10a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		NRF_AAR->EVENTS_END &&
    f10e:	b14b      	cbz	r3, f124 <radio_ar_has_match+0x2c>
		!NRF_AAR->EVENTS_NOTRESOLVED);
    f110:	4b06      	ldr	r3, [pc, #24]	; (f12c <radio_ar_has_match+0x34>)
    f112:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
		NRF_AAR->EVENTS_RESOLVED &&
    f116:	b13b      	cbz	r3, f128 <radio_ar_has_match+0x30>
    f118:	2000      	movs	r0, #0
    f11a:	bd08      	pop	{r3, pc}
    f11c:	2000      	movs	r0, #0
    f11e:	bd08      	pop	{r3, pc}
    f120:	2000      	movs	r0, #0
    f122:	bd08      	pop	{r3, pc}
    f124:	2000      	movs	r0, #0
    f126:	bd08      	pop	{r3, pc}
    f128:	2001      	movs	r0, #1
}
    f12a:	bd08      	pop	{r3, pc}
    f12c:	4000f000 	.word	0x4000f000

0000f130 <isr>:

static int isr(struct rand *rng, bool store)
{
	u8_t last;

	if (!rng) {
    f130:	b1f0      	cbz	r0, f170 <isr+0x40>
{
    f132:	b430      	push	{r4, r5}
    f134:	4602      	mov	r2, r0
		return -ENOBUFS;
	}

	last = rng->last + 1;
    f136:	78c0      	ldrb	r0, [r0, #3]
    f138:	1c43      	adds	r3, r0, #1
    f13a:	b2db      	uxtb	r3, r3
	if (last == rng->count) {
    f13c:	7815      	ldrb	r5, [r2, #0]
    f13e:	42ab      	cmp	r3, r5
    f140:	d012      	beq.n	f168 <isr+0x38>
		last = 0;
	}

	if (last == rng->first) {
    f142:	7894      	ldrb	r4, [r2, #2]
    f144:	42a3      	cmp	r3, r4
    f146:	d016      	beq.n	f176 <isr+0x46>
		 * new value could be generated before NRF_RNG task is stopped.
		 */
		return -ENOBUFS;
	}

	if (!store) {
    f148:	b1c1      	cbz	r1, f17c <isr+0x4c>
		return -EBUSY;
	}

	rng->rand[rng->last] = NRF_RNG->VALUE;
    f14a:	490f      	ldr	r1, [pc, #60]	; (f188 <isr+0x58>)
    f14c:	f8d1 1508 	ldr.w	r1, [r1, #1288]	; 0x508
    f150:	4410      	add	r0, r2
    f152:	7101      	strb	r1, [r0, #4]
	rng->last = last;
    f154:	70d3      	strb	r3, [r2, #3]

	last = rng->last + 1;
    f156:	3301      	adds	r3, #1
    f158:	b2db      	uxtb	r3, r3
	if (last == rng->count) {
    f15a:	429d      	cmp	r5, r3
    f15c:	d006      	beq.n	f16c <isr+0x3c>
		last = 0;
	}

	if (last == rng->first) {
    f15e:	42a3      	cmp	r3, r4
    f160:	d10f      	bne.n	f182 <isr+0x52>
		return 0;
    f162:	2000      	movs	r0, #0
	}

	return -EBUSY;
}
    f164:	bc30      	pop	{r4, r5}
    f166:	4770      	bx	lr
		last = 0;
    f168:	2300      	movs	r3, #0
    f16a:	e7ea      	b.n	f142 <isr+0x12>
		last = 0;
    f16c:	2300      	movs	r3, #0
    f16e:	e7f6      	b.n	f15e <isr+0x2e>
		return -ENOBUFS;
    f170:	f06f 0068 	mvn.w	r0, #104	; 0x68
    f174:	4770      	bx	lr
		return -ENOBUFS;
    f176:	f06f 0068 	mvn.w	r0, #104	; 0x68
    f17a:	e7f3      	b.n	f164 <isr+0x34>
		return -EBUSY;
    f17c:	f06f 000f 	mvn.w	r0, #15
    f180:	e7f0      	b.n	f164 <isr+0x34>
	return -EBUSY;
    f182:	f06f 000f 	mvn.w	r0, #15
    f186:	e7ed      	b.n	f164 <isr+0x34>
    f188:	4000d000 	.word	0x4000d000
    f18c:	00000000 	.word	0x00000000

0000f190 <isr>:

	DEBUG_RADIO_CLOSE(0);
}

static void isr(void)
{
    f190:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f194:	b08a      	sub	sp, #40	; 0x28
	u8_t rssi_ready;

	DEBUG_RADIO_ISR(1);

	/* Read radio status and events */
	trx_done = radio_is_done();
    f196:	f7ff fd25 	bl	ebe4 <radio_is_done>
    f19a:	b2c4      	uxtb	r4, r0
	if (trx_done) {
    f19c:	b9e4      	cbnz	r4, f1d8 <isr+0x48>
		devmatch_id = radio_filter_match_get();
		irkmatch_ok = radio_ar_has_match();
		irkmatch_id = radio_ar_match_get();
		rssi_ready = radio_rssi_is_ready();
	} else {
		crc_ok = devmatch_ok = irkmatch_ok = rssi_ready = 0;
    f19e:	46a0      	mov	r8, r4
    f1a0:	46a1      	mov	r9, r4
    f1a2:	4627      	mov	r7, r4
    f1a4:	4626      	mov	r6, r4
		devmatch_id = irkmatch_id = 0xFF;
    f1a6:	25ff      	movs	r5, #255	; 0xff
    f1a8:	46aa      	mov	sl, r5
	}

	/* Clear radio status and events */
	radio_status_reset();
    f1aa:	f7ff fd01 	bl	ebb0 <radio_status_reset>
	radio_tmr_status_reset();
    f1ae:	f7ff fdef 	bl	ed90 <radio_tmr_status_reset>
	radio_filter_status_reset();
    f1b2:	f7ff fdb5 	bl	ed20 <radio_filter_status_reset>
	radio_ar_status_reset();
    f1b6:	f7ff ff95 	bl	f0e4 <radio_ar_status_reset>
	radio_rssi_status_reset();
    f1ba:	f7ff fd6d 	bl	ec98 <radio_rssi_status_reset>
#if defined(CONFIG_BT_CTLR_GPIO_PA_PIN) || \
    defined(CONFIG_BT_CTLR_GPIO_LNA_PIN)
	radio_gpio_pa_lna_disable();
#endif /* CONFIG_BT_CTLR_GPIO_PA_PIN || CONFIG_BT_CTLR_GPIO_LNA_PIN */

	switch (_radio.state) {
    f1be:	4bb6      	ldr	r3, [pc, #728]	; (f498 <isr+0x308>)
    f1c0:	7c1b      	ldrb	r3, [r3, #16]
    f1c2:	2b05      	cmp	r3, #5
    f1c4:	f200 8456 	bhi.w	fa74 <isr+0x8e4>
    f1c8:	e8df f013 	tbh	[pc, r3, lsl #1]
    f1cc:	00e801f3 	.word	0x00e801f3
    f1d0:	016e001c 	.word	0x016e001c
    f1d4:	016e016e 	.word	0x016e016e
		crc_ok = radio_crc_is_valid();
    f1d8:	f7ff fd24 	bl	ec24 <radio_crc_is_valid>
    f1dc:	b2c6      	uxtb	r6, r0
		devmatch_ok = radio_filter_has_match();
    f1de:	f7ff fda9 	bl	ed34 <radio_filter_has_match>
    f1e2:	b2c7      	uxtb	r7, r0
		devmatch_id = radio_filter_match_get();
    f1e4:	f7ff fdb0 	bl	ed48 <radio_filter_match_get>
    f1e8:	fa5f fa80 	uxtb.w	sl, r0
		irkmatch_ok = radio_ar_has_match();
    f1ec:	f7ff ff84 	bl	f0f8 <radio_ar_has_match>
    f1f0:	fa5f f980 	uxtb.w	r9, r0
		irkmatch_id = radio_ar_match_get();
    f1f4:	f7ff ff70 	bl	f0d8 <radio_ar_match_get>
    f1f8:	b2c5      	uxtb	r5, r0
		rssi_ready = radio_rssi_is_ready();
    f1fa:	f7ff fd55 	bl	eca8 <radio_rssi_is_ready>
    f1fe:	fa5f f880 	uxtb.w	r8, r0
    f202:	e7d2      	b.n	f1aa <isr+0x1a>
	_radio.state = STATE_RX;
    f204:	4da4      	ldr	r5, [pc, #656]	; (f498 <isr+0x308>)
    f206:	2301      	movs	r3, #1
    f208:	742b      	strb	r3, [r5, #16]
	hcto = radio_tmr_end_get() + RADIO_TIFS + 4 + 1; /* 1us, end jitter */
    f20a:	f7ff fe99 	bl	ef40 <radio_tmr_end_get>
    f20e:	f100 049b 	add.w	r4, r0, #155	; 0x9b
	radio_tmr_tifs_set(RADIO_TIFS);
    f212:	2096      	movs	r0, #150	; 0x96
    f214:	f7ff fdca 	bl	edac <radio_tmr_tifs_set>
	switch (_radio.role) {
    f218:	7beb      	ldrb	r3, [r5, #15]
    f21a:	3b01      	subs	r3, #1
    f21c:	2b03      	cmp	r3, #3
    f21e:	f200 80b7 	bhi.w	f390 <isr+0x200>
    f222:	e8df f003 	tbb	[pc, r3]
    f226:	3202      	.short	0x3202
    f228:	6868      	.short	0x6868
		radio_switch_complete_and_tx(0, 0, 0, 0);
    f22a:	2300      	movs	r3, #0
    f22c:	461a      	mov	r2, r3
    f22e:	4619      	mov	r1, r3
    f230:	4618      	mov	r0, r3
    f232:	f7ff fd11 	bl	ec58 <radio_switch_complete_and_tx>
		radio_pkt_rx_set(radio_pkt_scratch_get());
    f236:	f7ff fd03 	bl	ec40 <radio_pkt_scratch_get>
    f23a:	f7ff fc8b 	bl	eb54 <radio_pkt_rx_set>
		LL_ASSERT(!radio_is_ready());
    f23e:	f7ff fcc7 	bl	ebd0 <radio_is_ready>
    f242:	b990      	cbnz	r0, f26a <isr+0xda>
		if (ctrl_rl_enabled()) {
    f244:	f00a f802 	bl	1924c <ctrl_rl_enabled>
    f248:	b9a8      	cbnz	r0, f276 <isr+0xe6>
		hcto += radio_rx_chain_delay_get(0, 0);
    f24a:	2100      	movs	r1, #0
    f24c:	4608      	mov	r0, r1
    f24e:	f7ff fc93 	bl	eb78 <radio_rx_chain_delay_get>
    f252:	4404      	add	r4, r0
		hcto += addr_us_get(0);
    f254:	3428      	adds	r4, #40	; 0x28
		hcto -= radio_tx_chain_delay_get(0, 0);
    f256:	2100      	movs	r1, #0
    f258:	4608      	mov	r0, r1
    f25a:	f7ff fc89 	bl	eb70 <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    f25e:	1a20      	subs	r0, r4, r0
    f260:	f7ff fe06 	bl	ee70 <radio_tmr_hcto_configure>
		radio_tmr_end_capture();
    f264:	f7ff fe5a 	bl	ef1c <radio_tmr_end_capture>
    f268:	e1a3      	b.n	f5b2 <isr+0x422>
		LL_ASSERT(!radio_is_ready());
    f26a:	4040      	eors	r0, r0
    f26c:	f380 8811 	msr	BASEPRI, r0
    f270:	f04f 0004 	mov.w	r0, #4
    f274:	df02      	svc	2
			u8_t count, *irks = ctrl_irks_get(&count);
    f276:	f10d 0027 	add.w	r0, sp, #39	; 0x27
    f27a:	f009 fd63 	bl	18d44 <ctrl_irks_get>
			radio_ar_configure(count, irks);
    f27e:	4601      	mov	r1, r0
    f280:	f89d 0027 	ldrb.w	r0, [sp, #39]	; 0x27
    f284:	f7ff fef6 	bl	f074 <radio_ar_configure>
    f288:	e7df      	b.n	f24a <isr+0xba>
		radio_switch_complete_and_tx(0, 0, 0, 0);
    f28a:	2300      	movs	r3, #0
    f28c:	461a      	mov	r2, r3
    f28e:	4619      	mov	r1, r3
    f290:	4618      	mov	r0, r3
    f292:	f7ff fce1 	bl	ec58 <radio_switch_complete_and_tx>
		radio_pkt_rx_set(_radio.packet_rx[_radio.packet_rx_last]->
    f296:	4b80      	ldr	r3, [pc, #512]	; (f498 <isr+0x308>)
    f298:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
    f29c:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
    f2a0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    f2a4:	3008      	adds	r0, #8
    f2a6:	f7ff fc55 	bl	eb54 <radio_pkt_rx_set>
		LL_ASSERT(!radio_is_ready());
    f2aa:	f7ff fc91 	bl	ebd0 <radio_is_ready>
    f2ae:	b990      	cbnz	r0, f2d6 <isr+0x146>
		if (ctrl_rl_enabled()) {
    f2b0:	f009 ffcc 	bl	1924c <ctrl_rl_enabled>
    f2b4:	b9a8      	cbnz	r0, f2e2 <isr+0x152>
		hcto += radio_rx_chain_delay_get(0, 0);
    f2b6:	2100      	movs	r1, #0
    f2b8:	4608      	mov	r0, r1
    f2ba:	f7ff fc5d 	bl	eb78 <radio_rx_chain_delay_get>
    f2be:	4404      	add	r4, r0
		hcto += addr_us_get(0);
    f2c0:	3428      	adds	r4, #40	; 0x28
		hcto -= radio_tx_chain_delay_get(0, 0);
    f2c2:	2100      	movs	r1, #0
    f2c4:	4608      	mov	r0, r1
    f2c6:	f7ff fc53 	bl	eb70 <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    f2ca:	1a20      	subs	r0, r4, r0
    f2cc:	f7ff fdd0 	bl	ee70 <radio_tmr_hcto_configure>
		radio_rssi_measure();
    f2d0:	f7ff fcd2 	bl	ec78 <radio_rssi_measure>
    f2d4:	e16d      	b.n	f5b2 <isr+0x422>
		LL_ASSERT(!radio_is_ready());
    f2d6:	4040      	eors	r0, r0
    f2d8:	f380 8811 	msr	BASEPRI, r0
    f2dc:	f04f 0004 	mov.w	r0, #4
    f2e0:	df02      	svc	2
			u8_t count, *irks = ctrl_irks_get(&count);
    f2e2:	f10d 0027 	add.w	r0, sp, #39	; 0x27
    f2e6:	f009 fd2d 	bl	18d44 <ctrl_irks_get>
			radio_ar_configure(count, irks);
    f2ea:	4601      	mov	r1, r0
    f2ec:	f89d 0027 	ldrb.w	r0, [sp, #39]	; 0x27
    f2f0:	f7ff fec0 	bl	f074 <radio_ar_configure>
    f2f4:	e7df      	b.n	f2b6 <isr+0x126>
		radio_switch_complete_and_tx(_radio.conn_curr->phy_rx, 0,
    f2f6:	4d68      	ldr	r5, [pc, #416]	; (f498 <isr+0x308>)
    f2f8:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
    f2fc:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
					     _radio.conn_curr->phy_tx,
    f300:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
		radio_switch_complete_and_tx(_radio.conn_curr->phy_rx, 0,
    f304:	09d3      	lsrs	r3, r2, #7
    f306:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    f30a:	2100      	movs	r1, #0
    f30c:	f000 0007 	and.w	r0, r0, #7
    f310:	f7ff fca2 	bl	ec58 <radio_switch_complete_and_tx>
		rx_packet_set(_radio.conn_curr, (struct pdu_data *)_radio.
    f314:	f8d5 3138 	ldr.w	r3, [r5, #312]	; 0x138
			      packet_rx[_radio.packet_rx_last]->pdu_data);
    f318:	f895 213d 	ldrb.w	r2, [r5, #317]	; 0x13d
    f31c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
		rx_packet_set(_radio.conn_curr, (struct pdu_data *)_radio.
    f320:	3108      	adds	r1, #8
    f322:	f8d5 0110 	ldr.w	r0, [r5, #272]	; 0x110
    f326:	f002 fad3 	bl	118d0 <rx_packet_set>
		LL_ASSERT(!radio_is_ready());
    f32a:	f7ff fc51 	bl	ebd0 <radio_is_ready>
    f32e:	bb20      	cbnz	r0, f37a <isr+0x1ea>
		hcto += radio_rx_chain_delay_get(_radio.conn_curr->phy_rx, 1);
    f330:	4d59      	ldr	r5, [pc, #356]	; (f498 <isr+0x308>)
    f332:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
    f336:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
    f33a:	2101      	movs	r1, #1
    f33c:	f000 0007 	and.w	r0, r0, #7
    f340:	f7ff fc1a 	bl	eb78 <radio_rx_chain_delay_get>
    f344:	4420      	add	r0, r4
		hcto += addr_us_get(_radio.conn_curr->phy_rx);
    f346:	f8d5 2110 	ldr.w	r2, [r5, #272]	; 0x110
    f34a:	f892 303a 	ldrb.w	r3, [r2, #58]	; 0x3a
    f34e:	f003 0307 	and.w	r3, r3, #7
	switch (phy) {
    f352:	2b02      	cmp	r3, #2
    f354:	d01a      	beq.n	f38c <isr+0x1fc>
    f356:	2b04      	cmp	r3, #4
    f358:	d015      	beq.n	f386 <isr+0x1f6>
		return 40;
    f35a:	2428      	movs	r4, #40	; 0x28
		hcto += addr_us_get(_radio.conn_curr->phy_rx);
    f35c:	4404      	add	r4, r0
		hcto -= radio_tx_chain_delay_get(_radio.conn_curr->phy_tx,
    f35e:	f892 0038 	ldrb.w	r0, [r2, #56]	; 0x38
    f362:	09c1      	lsrs	r1, r0, #7
    f364:	f3c0 00c2 	ubfx	r0, r0, #3, #3
    f368:	f7ff fc02 	bl	eb70 <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    f36c:	1a20      	subs	r0, r4, r0
    f36e:	f7ff fd7f 	bl	ee70 <radio_tmr_hcto_configure>
		packet_tx_enqueue(1);
    f372:	2001      	movs	r0, #1
    f374:	f002 fb0a 	bl	1198c <packet_tx_enqueue>
    f378:	e11b      	b.n	f5b2 <isr+0x422>
		LL_ASSERT(!radio_is_ready());
    f37a:	4040      	eors	r0, r0
    f37c:	f380 8811 	msr	BASEPRI, r0
    f380:	f04f 0004 	mov.w	r0, #4
    f384:	df02      	svc	2
		return 376;
    f386:	f44f 74bc 	mov.w	r4, #376	; 0x178
    f38a:	e7e7      	b.n	f35c <isr+0x1cc>
		return 24;
    f38c:	2418      	movs	r4, #24
    f38e:	e7e5      	b.n	f35c <isr+0x1cc>
		LL_ASSERT(0);
    f390:	4040      	eors	r0, r0
    f392:	f380 8811 	msr	BASEPRI, r0
    f396:	f04f 0004 	mov.w	r0, #4
    f39a:	df02      	svc	2
	if (!((trx_done) || ((SILENT_CONNECTION) &&
    f39c:	b144      	cbz	r4, f3b0 <isr+0x220>
	switch (_radio.role) {
    f39e:	4b3e      	ldr	r3, [pc, #248]	; (f498 <isr+0x308>)
    f3a0:	7bdb      	ldrb	r3, [r3, #15]
    f3a2:	3b01      	subs	r3, #1
    f3a4:	2b03      	cmp	r3, #3
    f3a6:	d879      	bhi.n	f49c <isr+0x30c>
    f3a8:	e8df f003 	tbb	[pc, r3]
    f3ac:	70701c08 	.word	0x70701c08
		_radio.state = STATE_CLOSE;
    f3b0:	2203      	movs	r2, #3
    f3b2:	4b39      	ldr	r3, [pc, #228]	; (f498 <isr+0x308>)
    f3b4:	741a      	strb	r2, [r3, #16]
		radio_disable();
    f3b6:	f7ff fbf1 	bl	eb9c <radio_disable>
    f3ba:	e0fa      	b.n	f5b2 <isr+0x422>
		if (crc_ok) {
    f3bc:	b94e      	cbnz	r6, f3d2 <isr+0x242>
			err = 1;
    f3be:	2001      	movs	r0, #1
		if (err) {
    f3c0:	2800      	cmp	r0, #0
    f3c2:	f000 80f6 	beq.w	f5b2 <isr+0x422>
			_radio.state = STATE_CLOSE;
    f3c6:	2203      	movs	r2, #3
    f3c8:	4b33      	ldr	r3, [pc, #204]	; (f498 <isr+0x308>)
    f3ca:	741a      	strb	r2, [r3, #16]
			radio_disable();
    f3cc:	f7ff fbe6 	bl	eb9c <radio_disable>
    f3d0:	e0ef      	b.n	f5b2 <isr+0x422>
			err = isr_rx_adv(devmatch_ok, devmatch_id, irkmatch_ok,
    f3d2:	f8cd 8000 	str.w	r8, [sp]
    f3d6:	462b      	mov	r3, r5
    f3d8:	464a      	mov	r2, r9
    f3da:	4651      	mov	r1, sl
    f3dc:	4638      	mov	r0, r7
    f3de:	f007 fc37 	bl	16c50 <isr_rx_adv>
    f3e2:	e7ed      	b.n	f3c0 <isr+0x230>
		rl_idx = devmatch_ok ?
    f3e4:	b9a7      	cbnz	r7, f410 <isr+0x280>
    f3e6:	f1b9 0f00 	cmp.w	r9, #0
    f3ea:	d11b      	bne.n	f424 <isr+0x294>
    f3ec:	24ff      	movs	r4, #255	; 0xff
		if (crc_ok &&
    f3ee:	b9f6      	cbnz	r6, f42e <isr+0x29e>
			err = 1;
    f3f0:	2001      	movs	r0, #1
		if (err) {
    f3f2:	2800      	cmp	r0, #0
    f3f4:	f000 80dd 	beq.w	f5b2 <isr+0x422>
			_radio.state = STATE_CLOSE;
    f3f8:	4c27      	ldr	r4, [pc, #156]	; (f498 <isr+0x308>)
    f3fa:	2303      	movs	r3, #3
    f3fc:	7423      	strb	r3, [r4, #16]
			radio_disable();
    f3fe:	f7ff fbcd 	bl	eb9c <radio_disable>
			_radio.scanner.state = 0;
    f402:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
    f406:	f36f 0341 	bfc	r3, #1, #1
    f40a:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
    f40e:	e0d0      	b.n	f5b2 <isr+0x422>
			 ctrl_rl_idx(!!(_radio.scanner.filter_policy & 0x01),
    f410:	4b21      	ldr	r3, [pc, #132]	; (f498 <isr+0x308>)
    f412:	f893 00dd 	ldrb.w	r0, [r3, #221]	; 0xdd
		rl_idx = devmatch_ok ?
    f416:	4651      	mov	r1, sl
    f418:	f3c0 1000 	ubfx	r0, r0, #4, #1
    f41c:	f009 fc9c 	bl	18d58 <ctrl_rl_idx>
    f420:	4604      	mov	r4, r0
    f422:	e7e4      	b.n	f3ee <isr+0x25e>
    f424:	4628      	mov	r0, r5
    f426:	f009 fccd 	bl	18dc4 <ctrl_rl_irk_idx>
    f42a:	4604      	mov	r4, r0
    f42c:	e7df      	b.n	f3ee <isr+0x25e>
	return (((_radio.scanner.filter_policy & 0x01) == 0) &&
    f42e:	4b1a      	ldr	r3, [pc, #104]	; (f498 <isr+0x308>)
    f430:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
    f434:	f013 0f10 	tst.w	r3, #16
    f438:	d109      	bne.n	f44e <isr+0x2be>
	return (((_radio.scanner.filter_policy & 0x01) == 0) &&
    f43a:	b91f      	cbnz	r7, f444 <isr+0x2b4>
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
    f43c:	2301      	movs	r3, #1
		if (crc_ok &&
    f43e:	b9db      	cbnz	r3, f478 <isr+0x2e8>
			err = 1;
    f440:	2001      	movs	r0, #1
    f442:	e7d6      	b.n	f3f2 <isr+0x262>
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
    f444:	4621      	mov	r1, r4
    f446:	4648      	mov	r0, r9
    f448:	f009 fe1c 	bl	19084 <ctrl_rl_idx_allowed>
    f44c:	b980      	cbnz	r0, f470 <isr+0x2e0>
		(((_radio.scanner.filter_policy & 0x01) != 0) &&
    f44e:	4b12      	ldr	r3, [pc, #72]	; (f498 <isr+0x308>)
    f450:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
    f454:	f013 0f10 	tst.w	r3, #16
    f458:	d00c      	beq.n	f474 <isr+0x2e4>
		(((_radio.scanner.filter_policy & 0x01) != 0) &&
    f45a:	b10f      	cbz	r7, f460 <isr+0x2d0>
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
    f45c:	2301      	movs	r3, #1
    f45e:	e7ee      	b.n	f43e <isr+0x2ae>
		 (devmatch_ok || ctrl_irk_whitelisted(rl_idx)));
    f460:	4620      	mov	r0, r4
    f462:	f009 fcd9 	bl	18e18 <ctrl_irk_whitelisted>
    f466:	b108      	cbz	r0, f46c <isr+0x2dc>
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
    f468:	2301      	movs	r3, #1
    f46a:	e7e8      	b.n	f43e <isr+0x2ae>
    f46c:	2300      	movs	r3, #0
    f46e:	e7e6      	b.n	f43e <isr+0x2ae>
    f470:	2301      	movs	r3, #1
    f472:	e7e4      	b.n	f43e <isr+0x2ae>
    f474:	2300      	movs	r3, #0
    f476:	e7e2      	b.n	f43e <isr+0x2ae>
			err = isr_rx_scan(devmatch_ok, devmatch_id, irkmatch_ok,
    f478:	f8cd 8004 	str.w	r8, [sp, #4]
    f47c:	9400      	str	r4, [sp, #0]
    f47e:	462b      	mov	r3, r5
    f480:	464a      	mov	r2, r9
    f482:	4651      	mov	r1, sl
    f484:	4638      	mov	r0, r7
    f486:	f006 ffb7 	bl	163f8 <isr_rx_scan>
    f48a:	e7b2      	b.n	f3f2 <isr+0x262>
		isr_rx_conn(crc_ok, trx_done, rssi_ready);
    f48c:	4642      	mov	r2, r8
    f48e:	4621      	mov	r1, r4
    f490:	4630      	mov	r0, r6
    f492:	f004 fabb 	bl	13a0c <isr_rx_conn>
    f496:	e08c      	b.n	f5b2 <isr+0x422>
    f498:	20000e84 	.word	0x20000e84
		LL_ASSERT(0);
    f49c:	4040      	eors	r0, r0
    f49e:	f380 8811 	msr	BASEPRI, r0
    f4a2:	f04f 0004 	mov.w	r0, #4
    f4a6:	df02      	svc	2
	switch (_radio.role) {
    f4a8:	4bb3      	ldr	r3, [pc, #716]	; (f778 <isr+0x5e8>)
    f4aa:	7bdb      	ldrb	r3, [r3, #15]
    f4ac:	b2db      	uxtb	r3, r3
    f4ae:	2b04      	cmp	r3, #4
    f4b0:	f200 82b2 	bhi.w	fa18 <isr+0x888>
    f4b4:	e8df f013 	tbh	[pc, r3, lsl #1]
    f4b8:	000502a0 	.word	0x000502a0
    f4bc:	00b5006f 	.word	0x00b5006f
    f4c0:	00b5      	.short	0x00b5
	if ((_radio.state == STATE_CLOSE) &&
    f4c2:	4bad      	ldr	r3, [pc, #692]	; (f778 <isr+0x5e8>)
    f4c4:	7c1b      	ldrb	r3, [r3, #16]
    f4c6:	2b03      	cmp	r3, #3
    f4c8:	d00f      	beq.n	f4ea <isr+0x35a>
		radio_filter_disable();
    f4ca:	f7ff fc1f 	bl	ed0c <radio_filter_disable>
			&_radio.advertiser.adv_data.data[_radio.advertiser.adv_data.first][0];
    f4ce:	4aaa      	ldr	r2, [pc, #680]	; (f778 <isr+0x5e8>)
    f4d0:	f892 3075 	ldrb.w	r3, [r2, #117]	; 0x75
		pdu_adv = (struct pdu_adv *)
    f4d4:	eb03 0183 	add.w	r1, r3, r3, lsl #2
    f4d8:	ebc3 03c1 	rsb	r3, r3, r1, lsl #3
    f4dc:	3320      	adds	r3, #32
    f4de:	4413      	add	r3, r2
		if ((_radio.state == STATE_CLOSE) &&
    f4e0:	7c12      	ldrb	r2, [r2, #16]
    f4e2:	2a03      	cmp	r2, #3
    f4e4:	d00f      	beq.n	f506 <isr+0x376>
	u32_t dont_close = 0;
    f4e6:	2300      	movs	r3, #0
    f4e8:	e060      	b.n	f5ac <isr+0x41c>
	    (_radio.advertiser.chan_map_current != 0)) {
    f4ea:	4ba3      	ldr	r3, [pc, #652]	; (f778 <isr+0x5e8>)
    f4ec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if ((_radio.state == STATE_CLOSE) &&
    f4f0:	f013 0f0e 	tst.w	r3, #14
    f4f4:	d0e9      	beq.n	f4ca <isr+0x33a>
		adv_setup();
    f4f6:	f002 fca5 	bl	11e44 <adv_setup>
		radio_tx_enable();
    f4fa:	f7ff fb49 	bl	eb90 <radio_tx_enable>
		radio_tmr_end_capture();
    f4fe:	f7ff fd0d 	bl	ef1c <radio_tmr_end_capture>
		dont_close = 1;
    f502:	2301      	movs	r3, #1
    f504:	e052      	b.n	f5ac <isr+0x41c>
		    (pdu_adv->type != PDU_ADV_TYPE_DIRECT_IND)) {
    f506:	79db      	ldrb	r3, [r3, #7]
    f508:	f003 030f 	and.w	r3, r3, #15
		if ((_radio.state == STATE_CLOSE) &&
    f50c:	2b01      	cmp	r3, #1
    f50e:	d040      	beq.n	f592 <isr+0x402>
			rand_isr_get(sizeof(random_delay), &random_delay);
    f510:	f10d 0127 	add.w	r1, sp, #39	; 0x27
    f514:	2001      	movs	r0, #1
    f516:	f000 fb7d 	bl	fc14 <rand_isr_get>
			random_delay %= 10;
    f51a:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    f51e:	4a97      	ldr	r2, [pc, #604]	; (f77c <isr+0x5ec>)
    f520:	fba2 1203 	umull	r1, r2, r2, r3
    f524:	08d2      	lsrs	r2, r2, #3
    f526:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    f52a:	0051      	lsls	r1, r2, #1
    f52c:	1a5a      	subs	r2, r3, r1
    f52e:	b2d2      	uxtb	r2, r2
			random_delay += 1;
    f530:	3201      	adds	r2, #1
    f532:	b2d2      	uxtb	r2, r2
    f534:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
					      TICKER_US_TO_TICKS(random_delay *
    f538:	b2d2      	uxtb	r2, r2
    f53a:	4891      	ldr	r0, [pc, #580]	; (f780 <isr+0x5f0>)
    f53c:	fba2 0100 	umull	r0, r1, r2, r0
    f540:	23e8      	movs	r3, #232	; 0xe8
    f542:	fb03 1102 	mla	r1, r3, r2, r1
    f546:	a38a      	add	r3, pc, #552	; (adr r3, f770 <isr+0x5e0>)
    f548:	e9d3 2300 	ldrd	r2, r3, [r3]
    f54c:	f7f1 fdd6 	bl	10fc <__aeabi_uldivmod>
			ticker_status =
    f550:	f640 63a2 	movw	r3, #3746	; 0xea2
    f554:	9306      	str	r3, [sp, #24]
    f556:	4b8b      	ldr	r3, [pc, #556]	; (f784 <isr+0x5f4>)
    f558:	9305      	str	r3, [sp, #20]
    f55a:	2400      	movs	r4, #0
    f55c:	9404      	str	r4, [sp, #16]
    f55e:	9403      	str	r4, [sp, #12]
    f560:	9402      	str	r4, [sp, #8]
    f562:	9401      	str	r4, [sp, #4]
    f564:	9400      	str	r4, [sp, #0]
    f566:	b283      	uxth	r3, r0
    f568:	2205      	movs	r2, #5
    f56a:	4621      	mov	r1, r4
    f56c:	4620      	mov	r0, r4
    f56e:	f000 fe1d 	bl	101ac <ticker_update>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    f572:	b130      	cbz	r0, f582 <isr+0x3f2>
    f574:	2802      	cmp	r0, #2
    f576:	d004      	beq.n	f582 <isr+0x3f2>
    f578:	4b7f      	ldr	r3, [pc, #508]	; (f778 <isr+0x5e8>)
    f57a:	7b9b      	ldrb	r3, [r3, #14]
    f57c:	b2db      	uxtb	r3, r3
    f57e:	2b05      	cmp	r3, #5
    f580:	d101      	bne.n	f586 <isr+0x3f6>
	u32_t dont_close = 0;
    f582:	2300      	movs	r3, #0
    f584:	e012      	b.n	f5ac <isr+0x41c>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    f586:	4040      	eors	r0, r0
    f588:	f380 8811 	msr	BASEPRI, r0
    f58c:	f04f 0004 	mov.w	r0, #4
    f590:	df02      	svc	2
	u32_t dont_close = 0;
    f592:	2300      	movs	r3, #0
    f594:	e00a      	b.n	f5ac <isr+0x41c>
	if (_radio.state == STATE_CLOSE) {
    f596:	4b78      	ldr	r3, [pc, #480]	; (f778 <isr+0x5e8>)
    f598:	7c1b      	ldrb	r3, [r3, #16]
    f59a:	2b03      	cmp	r3, #3
    f59c:	d00c      	beq.n	f5b8 <isr+0x428>
		radio_filter_disable();
    f59e:	f7ff fbb5 	bl	ed0c <radio_filter_disable>
		if (_radio.state == STATE_ABORT) {
    f5a2:	4b75      	ldr	r3, [pc, #468]	; (f778 <isr+0x5e8>)
    f5a4:	7c1b      	ldrb	r3, [r3, #16]
    f5a6:	2b05      	cmp	r3, #5
    f5a8:	d031      	beq.n	f60e <isr+0x47e>
	u32_t dont_close = 0;
    f5aa:	2300      	movs	r3, #0
	if (dont_close) {
    f5ac:	2b00      	cmp	r3, #0
    f5ae:	f000 8249 	beq.w	fa44 <isr+0x8b4>
		LL_ASSERT(0);
		break;
	}

	DEBUG_RADIO_ISR(0);
}
    f5b2:	b00a      	add	sp, #40	; 0x28
    f5b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		radio_tmr_tifs_set(RADIO_TIFS);
    f5b8:	2096      	movs	r0, #150	; 0x96
    f5ba:	f7ff fbf7 	bl	edac <radio_tmr_tifs_set>
		radio_switch_complete_and_tx(0, 0, 0, 0);
    f5be:	2300      	movs	r3, #0
    f5c0:	461a      	mov	r2, r3
    f5c2:	4619      	mov	r1, r3
    f5c4:	4618      	mov	r0, r3
    f5c6:	f7ff fb47 	bl	ec58 <radio_switch_complete_and_tx>
		radio_pkt_rx_set(_radio.packet_rx[_radio.packet_rx_last]->
    f5ca:	4b6b      	ldr	r3, [pc, #428]	; (f778 <isr+0x5e8>)
    f5cc:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
    f5d0:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
    f5d4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    f5d8:	3008      	adds	r0, #8
    f5da:	f7ff fabb 	bl	eb54 <radio_pkt_rx_set>
		radio_rssi_measure();
    f5de:	f7ff fb4b 	bl	ec78 <radio_rssi_measure>
		if (ctrl_rl_enabled()) {
    f5e2:	f009 fe33 	bl	1924c <ctrl_rl_enabled>
    f5e6:	b940      	cbnz	r0, f5fa <isr+0x46a>
		_radio.state = STATE_RX;
    f5e8:	2401      	movs	r4, #1
    f5ea:	4b63      	ldr	r3, [pc, #396]	; (f778 <isr+0x5e8>)
    f5ec:	741c      	strb	r4, [r3, #16]
		radio_rx_enable();
    f5ee:	f7ff fac9 	bl	eb84 <radio_rx_enable>
		radio_tmr_end_capture();
    f5f2:	f7ff fc93 	bl	ef1c <radio_tmr_end_capture>
		dont_close = 1;
    f5f6:	4623      	mov	r3, r4
    f5f8:	e7d8      	b.n	f5ac <isr+0x41c>
			u8_t count, *irks = ctrl_irks_get(&count);
    f5fa:	f10d 0027 	add.w	r0, sp, #39	; 0x27
    f5fe:	f009 fba1 	bl	18d44 <ctrl_irks_get>
			radio_ar_configure(count, irks);
    f602:	4601      	mov	r1, r0
    f604:	f89d 0027 	ldrb.w	r0, [sp, #39]	; 0x27
    f608:	f7ff fd34 	bl	f074 <radio_ar_configure>
    f60c:	e7ec      	b.n	f5e8 <isr+0x458>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    f60e:	2400      	movs	r4, #0
    f610:	9400      	str	r4, [sp, #0]
    f612:	4623      	mov	r3, r4
    f614:	2204      	movs	r2, #4
    f616:	4621      	mov	r1, r4
    f618:	4620      	mov	r0, r4
    f61a:	f000 fe15 	bl	10248 <ticker_stop>
	u32_t dont_close = 0;
    f61e:	4623      	mov	r3, r4
    f620:	e7c4      	b.n	f5ac <isr+0x41c>
	if (_radio.conn_curr == 0) {
    f622:	4b55      	ldr	r3, [pc, #340]	; (f778 <isr+0x5e8>)
    f624:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
    f628:	2800      	cmp	r0, #0
    f62a:	f000 81fb 	beq.w	fa24 <isr+0x894>
	reason_peer = _radio.conn_curr->llcp_terminate.reason_peer;
    f62e:	f890 10b3 	ldrb.w	r1, [r0, #179]	; 0xb3
	if (reason_peer && ((_radio.role == ROLE_SLAVE) ||
    f632:	b141      	cbz	r1, f646 <isr+0x4b6>
    f634:	7bdb      	ldrb	r3, [r3, #15]
    f636:	b2db      	uxtb	r3, r3
    f638:	2b03      	cmp	r3, #3
    f63a:	d046      	beq.n	f6ca <isr+0x53a>
    f63c:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
    f640:	f013 0f01 	tst.w	r3, #1
    f644:	d141      	bne.n	f6ca <isr+0x53a>
	latency_event = _radio.conn_curr->latency_event;
    f646:	f8b0 802a 	ldrh.w	r8, [r0, #42]	; 0x2a
	elapsed_event = latency_event + 1;
    f64a:	f108 0401 	add.w	r4, r8, #1
    f64e:	b2a4      	uxth	r4, r4
	if (_radio.packet_counter &&
    f650:	4b49      	ldr	r3, [pc, #292]	; (f778 <isr+0x5e8>)
    f652:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
    f656:	2b00      	cmp	r3, #0
    f658:	f000 80b8 	beq.w	f7cc <isr+0x63c>
		if (_radio.role == ROLE_SLAVE) {
    f65c:	4b46      	ldr	r3, [pc, #280]	; (f778 <isr+0x5e8>)
    f65e:	7bdb      	ldrb	r3, [r3, #15]
    f660:	b2db      	uxtb	r3, r3
    f662:	2b03      	cmp	r3, #3
    f664:	d03c      	beq.n	f6e0 <isr+0x550>
		} else if (reason_peer) {
    f666:	2900      	cmp	r1, #0
    f668:	f000 80ad 	beq.w	f7c6 <isr+0x636>
			_radio.conn_curr->master.terminate_ack = 1;
    f66c:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
    f670:	f043 0301 	orr.w	r3, r3, #1
    f674:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
	ticks_drift_minus = 0;
    f678:	2600      	movs	r6, #0
	ticks_drift_plus = 0;
    f67a:	4635      	mov	r5, r6
		_radio.conn_curr->connect_expire = 0;
    f67c:	4b3e      	ldr	r3, [pc, #248]	; (f778 <isr+0x5e8>)
    f67e:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
    f682:	2200      	movs	r2, #0
    f684:	879a      	strh	r2, [r3, #60]	; 0x3c
	if (_radio.conn_curr->supervision_expire) {
    f686:	4b3c      	ldr	r3, [pc, #240]	; (f778 <isr+0x5e8>)
    f688:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
    f68c:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
    f690:	2b00      	cmp	r3, #0
    f692:	f000 80d8 	beq.w	f846 <isr+0x6b6>
		if (_radio.conn_curr->supervision_expire > elapsed_event) {
    f696:	429c      	cmp	r4, r3
    f698:	f080 80c9 	bcs.w	f82e <isr+0x69e>
			_radio.conn_curr->supervision_expire -= elapsed_event;
    f69c:	1b1b      	subs	r3, r3, r4
    f69e:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
			_radio.conn_curr->latency_event = 0;
    f6a2:	4b35      	ldr	r3, [pc, #212]	; (f778 <isr+0x5e8>)
    f6a4:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    f6a8:	2100      	movs	r1, #0
    f6aa:	8551      	strh	r1, [r2, #42]	; 0x2a
			if (_radio.conn_curr->supervision_expire <= 6) {
    f6ac:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
    f6b0:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
    f6b4:	2a06      	cmp	r2, #6
    f6b6:	f240 8130 	bls.w	f91a <isr+0x78a>
			else if (_radio.role == ROLE_SLAVE) {
    f6ba:	4a2f      	ldr	r2, [pc, #188]	; (f778 <isr+0x5e8>)
    f6bc:	7bd2      	ldrb	r2, [r2, #15]
    f6be:	b2d2      	uxtb	r2, r2
    f6c0:	2a03      	cmp	r2, #3
    f6c2:	f000 80a2 	beq.w	f80a <isr+0x67a>
	force = 0;
    f6c6:	2700      	movs	r7, #0
    f6c8:	e0be      	b.n	f848 <isr+0x6b8>
		terminate_ind_rx_enqueue(_radio.conn_curr, reason_peer);
    f6ca:	f004 f90b 	bl	138e4 <terminate_ind_rx_enqueue>
		connection_release(_radio.conn_curr);
    f6ce:	4c2a      	ldr	r4, [pc, #168]	; (f778 <isr+0x5e8>)
    f6d0:	f8d4 0110 	ldr.w	r0, [r4, #272]	; 0x110
    f6d4:	f002 f9b2 	bl	11a3c <connection_release>
		_radio.conn_curr = NULL;
    f6d8:	2300      	movs	r3, #0
    f6da:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    f6de:	e765      	b.n	f5ac <isr+0x41c>
			start_to_address_actual_us = radio_tmr_aa_restore() -
    f6e0:	f7ff fc10 	bl	ef04 <radio_tmr_aa_restore>
    f6e4:	4682      	mov	sl, r0
						     radio_tmr_ready_get();
    f6e6:	f7ff fc13 	bl	ef10 <radio_tmr_ready_get>
			start_to_address_actual_us = radio_tmr_aa_restore() -
    f6ea:	ebaa 0a00 	sub.w	sl, sl, r0
				_radio.conn_curr->slave.window_widening_event_us;
    f6ee:	4b22      	ldr	r3, [pc, #136]	; (f778 <isr+0x5e8>)
    f6f0:	f8d3 9110 	ldr.w	r9, [r3, #272]	; 0x110
			window_widening_event_us =
    f6f4:	f8d9 0060 	ldr.w	r0, [r9, #96]	; 0x60
				addr_us_get(_radio.conn_curr->phy_rx);
    f6f8:	f899 303a 	ldrb.w	r3, [r9, #58]	; 0x3a
    f6fc:	f003 0307 	and.w	r3, r3, #7
	switch (phy) {
    f700:	2b02      	cmp	r3, #2
    f702:	d031      	beq.n	f768 <isr+0x5d8>
    f704:	2b04      	cmp	r3, #4
    f706:	d02c      	beq.n	f762 <isr+0x5d2>
		return 40;
    f708:	2628      	movs	r6, #40	; 0x28
				preamble_to_addr_us +
    f70a:	1987      	adds	r7, r0, r6
			start_to_address_expected_us = RADIO_TICKER_JITTER_US +
    f70c:	3730      	adds	r7, #48	; 0x30
			if (start_to_address_actual_us <=
    f70e:	45ba      	cmp	sl, r7
    f710:	d83c      	bhi.n	f78c <isr+0x5fc>
					TICKER_US_TO_TICKS(window_widening_event_us);
    f712:	4e1d      	ldr	r6, [pc, #116]	; (f788 <isr+0x5f8>)
    f714:	a316      	add	r3, pc, #88	; (adr r3, f770 <isr+0x5e0>)
    f716:	e9d3 2300 	ldrd	r2, r3, [r3]
    f71a:	fba0 0106 	umull	r0, r1, r0, r6
    f71e:	f7f1 fced 	bl	10fc <__aeabi_uldivmod>
				ticks_drift_plus =
    f722:	b285      	uxth	r5, r0
					TICKER_US_TO_TICKS((u64_t)(start_to_address_expected_us -
    f724:	eba7 000a 	sub.w	r0, r7, sl
    f728:	a311      	add	r3, pc, #68	; (adr r3, f770 <isr+0x5e0>)
    f72a:	e9d3 2300 	ldrd	r2, r3, [r3]
    f72e:	fba0 0106 	umull	r0, r1, r0, r6
    f732:	f7f1 fce3 	bl	10fc <__aeabi_uldivmod>
				ticks_drift_minus =
    f736:	b286      	uxth	r6, r0
			_radio.conn_curr->slave.window_widening_event_us = 0;
    f738:	2200      	movs	r2, #0
    f73a:	f8c9 2060 	str.w	r2, [r9, #96]	; 0x60
			_radio.conn_curr->slave.window_size_event_us = 0;
    f73e:	4b0e      	ldr	r3, [pc, #56]	; (f778 <isr+0x5e8>)
    f740:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
    f744:	668a      	str	r2, [r1, #104]	; 0x68
			if (_radio.conn_curr->pkt_tx_head) {
    f746:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
    f74a:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
    f74e:	b38a      	cbz	r2, f7b4 <isr+0x624>
				if (pdu_data_tx->len ||
    f750:	7952      	ldrb	r2, [r2, #5]
    f752:	b91a      	cbnz	r2, f75c <isr+0x5cc>
				    _radio.conn_curr->packet_tx_head_offset) {
    f754:	f893 2151 	ldrb.w	r2, [r3, #337]	; 0x151
				if (pdu_data_tx->len ||
    f758:	2a00      	cmp	r2, #0
    f75a:	d08f      	beq.n	f67c <isr+0x4ec>
					_radio.conn_curr->latency_event = 0;
    f75c:	2200      	movs	r2, #0
    f75e:	855a      	strh	r2, [r3, #42]	; 0x2a
    f760:	e78c      	b.n	f67c <isr+0x4ec>
		return 376;
    f762:	f44f 76bc 	mov.w	r6, #376	; 0x178
    f766:	e7d0      	b.n	f70a <isr+0x57a>
		return 24;
    f768:	2618      	movs	r6, #24
    f76a:	e7ce      	b.n	f70a <isr+0x57a>
    f76c:	f3af 8000 	nop.w
    f770:	1afd498d 	.word	0x1afd498d
    f774:	00000007 	.word	0x00000007
    f778:	20000e84 	.word	0x20000e84
    f77c:	cccccccd 	.word	0xcccccccd
    f780:	d4a51000 	.word	0xd4a51000
    f784:	0001118d 	.word	0x0001118d
    f788:	3b9aca00 	.word	0x3b9aca00
					TICKER_US_TO_TICKS(start_to_address_actual_us);
    f78c:	4faa      	ldr	r7, [pc, #680]	; (fa38 <isr+0x8a8>)
    f78e:	a3a8      	add	r3, pc, #672	; (adr r3, fa30 <isr+0x8a0>)
    f790:	e9d3 2300 	ldrd	r2, r3, [r3]
    f794:	fbaa 0107 	umull	r0, r1, sl, r7
    f798:	f7f1 fcb0 	bl	10fc <__aeabi_uldivmod>
				ticks_drift_plus =
    f79c:	b285      	uxth	r5, r0
					TICKER_US_TO_TICKS(RADIO_TICKER_JITTER_US +
    f79e:	f106 0030 	add.w	r0, r6, #48	; 0x30
    f7a2:	a3a3      	add	r3, pc, #652	; (adr r3, fa30 <isr+0x8a0>)
    f7a4:	e9d3 2300 	ldrd	r2, r3, [r3]
    f7a8:	fba0 0107 	umull	r0, r1, r0, r7
    f7ac:	f7f1 fca6 	bl	10fc <__aeabi_uldivmod>
				ticks_drift_minus =
    f7b0:	b286      	uxth	r6, r0
    f7b2:	e7c1      	b.n	f738 <isr+0x5a8>
			} else if (_radio.conn_curr->slave.latency_enabled) {
    f7b4:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
    f7b8:	f012 0f01 	tst.w	r2, #1
    f7bc:	f43f af5e 	beq.w	f67c <isr+0x4ec>
					_radio.conn_curr->latency;
    f7c0:	8cda      	ldrh	r2, [r3, #38]	; 0x26
				_radio.conn_curr->latency_event =
    f7c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    f7c4:	e75a      	b.n	f67c <isr+0x4ec>
	ticks_drift_minus = 0;
    f7c6:	2600      	movs	r6, #0
	ticks_drift_plus = 0;
    f7c8:	4635      	mov	r5, r6
    f7ca:	e757      	b.n	f67c <isr+0x4ec>
	else if (_radio.conn_curr->connect_expire) {
    f7cc:	8f85      	ldrh	r5, [r0, #60]	; 0x3c
    f7ce:	b195      	cbz	r5, f7f6 <isr+0x666>
		if (_radio.conn_curr->connect_expire > elapsed_event) {
    f7d0:	42ac      	cmp	r4, r5
    f7d2:	d204      	bcs.n	f7de <isr+0x64e>
			_radio.conn_curr->connect_expire -= elapsed_event;
    f7d4:	1b2d      	subs	r5, r5, r4
    f7d6:	8785      	strh	r5, [r0, #60]	; 0x3c
	ticks_drift_minus = 0;
    f7d8:	2500      	movs	r5, #0
	ticks_drift_plus = 0;
    f7da:	462e      	mov	r6, r5
    f7dc:	e753      	b.n	f686 <isr+0x4f6>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x3e);
    f7de:	213e      	movs	r1, #62	; 0x3e
    f7e0:	f004 f880 	bl	138e4 <terminate_ind_rx_enqueue>
			connection_release(_radio.conn_curr);
    f7e4:	4c95      	ldr	r4, [pc, #596]	; (fa3c <isr+0x8ac>)
    f7e6:	f8d4 0110 	ldr.w	r0, [r4, #272]	; 0x110
    f7ea:	f002 f927 	bl	11a3c <connection_release>
			_radio.conn_curr = NULL;
    f7ee:	2300      	movs	r3, #0
    f7f0:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    f7f4:	e6da      	b.n	f5ac <isr+0x41c>
		if (!_radio.conn_curr->supervision_expire) {
    f7f6:	f8b0 6040 	ldrh.w	r6, [r0, #64]	; 0x40
    f7fa:	b926      	cbnz	r6, f806 <isr+0x676>
				_radio.conn_curr->supervision_reload;
    f7fc:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
			_radio.conn_curr->supervision_expire =
    f7fe:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
	ticks_drift_plus = 0;
    f802:	4635      	mov	r5, r6
    f804:	e73f      	b.n	f686 <isr+0x4f6>
	ticks_drift_minus = 0;
    f806:	462e      	mov	r6, r5
    f808:	e73d      	b.n	f686 <isr+0x4f6>
				if (latency_event != 0) {
    f80a:	f1b8 0f00 	cmp.w	r8, #0
    f80e:	f040 8086 	bne.w	f91e <isr+0x78e>
					force = _radio.conn_curr->slave.force & 0x01;
    f812:	6edf      	ldr	r7, [r3, #108]	; 0x6c
					_radio.conn_curr->slave.force >>= 1;
    f814:	087a      	lsrs	r2, r7, #1
    f816:	66da      	str	r2, [r3, #108]	; 0x6c
					if (force) {
    f818:	f017 0701 	ands.w	r7, r7, #1
    f81c:	d014      	beq.n	f848 <isr+0x6b8>
						_radio.conn_curr->slave.force |=
    f81e:	4b87      	ldr	r3, [pc, #540]	; (fa3c <isr+0x8ac>)
    f820:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    f824:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
    f826:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    f82a:	66d3      	str	r3, [r2, #108]	; 0x6c
    f82c:	e00c      	b.n	f848 <isr+0x6b8>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x08);
    f82e:	2108      	movs	r1, #8
    f830:	f004 f858 	bl	138e4 <terminate_ind_rx_enqueue>
			connection_release(_radio.conn_curr);
    f834:	4c81      	ldr	r4, [pc, #516]	; (fa3c <isr+0x8ac>)
    f836:	f8d4 0110 	ldr.w	r0, [r4, #272]	; 0x110
    f83a:	f002 f8ff 	bl	11a3c <connection_release>
			_radio.conn_curr = NULL;
    f83e:	2300      	movs	r3, #0
    f840:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    f844:	e6b2      	b.n	f5ac <isr+0x41c>
	force = 0;
    f846:	2700      	movs	r7, #0
	if (_radio.conn_curr->procedure_expire != 0) {
    f848:	4b7c      	ldr	r3, [pc, #496]	; (fa3c <isr+0x8ac>)
    f84a:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
    f84e:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
    f852:	b123      	cbz	r3, f85e <isr+0x6ce>
		if (_radio.conn_curr->procedure_expire > elapsed_event) {
    f854:	429c      	cmp	r4, r3
    f856:	d264      	bcs.n	f922 <isr+0x792>
			_radio.conn_curr->procedure_expire -= elapsed_event;
    f858:	1b1b      	subs	r3, r3, r4
    f85a:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
	if (_radio.conn_curr->apto_expire != 0) {
    f85e:	4b77      	ldr	r3, [pc, #476]	; (fa3c <isr+0x8ac>)
    f860:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    f864:	f8b2 304c 	ldrh.w	r3, [r2, #76]	; 0x4c
    f868:	b123      	cbz	r3, f874 <isr+0x6e4>
		if (_radio.conn_curr->apto_expire > elapsed_event) {
    f86a:	429c      	cmp	r4, r3
    f86c:	d265      	bcs.n	f93a <isr+0x7aa>
			_radio.conn_curr->apto_expire -= elapsed_event;
    f86e:	1b1b      	subs	r3, r3, r4
    f870:	f8a2 304c 	strh.w	r3, [r2, #76]	; 0x4c
	if (_radio.conn_curr->appto_expire != 0) {
    f874:	4b71      	ldr	r3, [pc, #452]	; (fa3c <isr+0x8ac>)
    f876:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    f87a:	f8b2 3048 	ldrh.w	r3, [r2, #72]	; 0x48
    f87e:	b12b      	cbz	r3, f88c <isr+0x6fc>
		if (_radio.conn_curr->appto_expire > elapsed_event) {
    f880:	429c      	cmp	r4, r3
    f882:	f080 8090 	bcs.w	f9a6 <isr+0x816>
			_radio.conn_curr->appto_expire -= elapsed_event;
    f886:	1b1b      	subs	r3, r3, r4
    f888:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
	if ((_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) &&
    f88c:	4b6b      	ldr	r3, [pc, #428]	; (fa3c <isr+0x8ac>)
    f88e:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    f892:	f892 1075 	ldrb.w	r1, [r2, #117]	; 0x75
    f896:	f892 3074 	ldrb.w	r3, [r2, #116]	; 0x74
    f89a:	4299      	cmp	r1, r3
    f89c:	d006      	beq.n	f8ac <isr+0x71c>
	    ((_radio.conn_curr->llcp_type == LLCP_CONN_UPD) ||
    f89e:	f892 3076 	ldrb.w	r3, [r2, #118]	; 0x76
    f8a2:	3b01      	subs	r3, #1
    f8a4:	b2db      	uxtb	r3, r3
	if ((_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) &&
    f8a6:	2b01      	cmp	r3, #1
    f8a8:	f240 809b 	bls.w	f9e2 <isr+0x852>
	if ((force) || (latency_event != _radio.conn_curr->latency_event)) {
    f8ac:	b937      	cbnz	r7, f8bc <isr+0x72c>
    f8ae:	4b63      	ldr	r3, [pc, #396]	; (fa3c <isr+0x8ac>)
    f8b0:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
    f8b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    f8b6:	4598      	cmp	r8, r3
    f8b8:	f000 8096 	beq.w	f9e8 <isr+0x858>
		lazy = _radio.conn_curr->latency_event + 1;
    f8bc:	4b5f      	ldr	r3, [pc, #380]	; (fa3c <isr+0x8ac>)
    f8be:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
    f8c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    f8c4:	3301      	adds	r3, #1
    f8c6:	b29b      	uxth	r3, r3
	if ((ticks_drift_plus != 0) || (ticks_drift_minus != 0) ||
    f8c8:	b925      	cbnz	r5, f8d4 <isr+0x744>
    f8ca:	b91e      	cbnz	r6, f8d4 <isr+0x744>
    f8cc:	b913      	cbnz	r3, f8d4 <isr+0x744>
	    (lazy != 0) || (force != 0)) {
    f8ce:	2f00      	cmp	r7, #0
    f8d0:	f000 80aa 	beq.w	fa28 <isr+0x898>
				    _radio.conn_curr->handle;
    f8d4:	4a59      	ldr	r2, [pc, #356]	; (fa3c <isr+0x8ac>)
    f8d6:	f8d2 2110 	ldr.w	r2, [r2, #272]	; 0x110
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
    f8da:	f892 4020 	ldrb.w	r4, [r2, #32]
    f8de:	3407      	adds	r4, #7
    f8e0:	b2e4      	uxtb	r4, r4
		ticker_status =
    f8e2:	9406      	str	r4, [sp, #24]
    f8e4:	4a56      	ldr	r2, [pc, #344]	; (fa40 <isr+0x8b0>)
    f8e6:	9205      	str	r2, [sp, #20]
    f8e8:	9704      	str	r7, [sp, #16]
    f8ea:	9303      	str	r3, [sp, #12]
    f8ec:	2000      	movs	r0, #0
    f8ee:	9002      	str	r0, [sp, #8]
    f8f0:	9001      	str	r0, [sp, #4]
    f8f2:	9600      	str	r6, [sp, #0]
    f8f4:	462b      	mov	r3, r5
    f8f6:	4622      	mov	r2, r4
    f8f8:	4601      	mov	r1, r0
    f8fa:	f000 fc57 	bl	101ac <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    f8fe:	4603      	mov	r3, r0
    f900:	2800      	cmp	r0, #0
    f902:	f43f ae53 	beq.w	f5ac <isr+0x41c>
    f906:	2802      	cmp	r0, #2
    f908:	f000 8090 	beq.w	fa2c <isr+0x89c>
    f90c:	4b4b      	ldr	r3, [pc, #300]	; (fa3c <isr+0x8ac>)
    f90e:	7b9b      	ldrb	r3, [r3, #14]
    f910:	b2db      	uxtb	r3, r3
    f912:	429c      	cmp	r4, r3
    f914:	d16a      	bne.n	f9ec <isr+0x85c>
	u32_t dont_close = 0;
    f916:	2300      	movs	r3, #0
    f918:	e648      	b.n	f5ac <isr+0x41c>
				force = 1;
    f91a:	2701      	movs	r7, #1
    f91c:	e794      	b.n	f848 <isr+0x6b8>
					force = 1;
    f91e:	2701      	movs	r7, #1
    f920:	e792      	b.n	f848 <isr+0x6b8>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x22);
    f922:	2122      	movs	r1, #34	; 0x22
    f924:	f003 ffde 	bl	138e4 <terminate_ind_rx_enqueue>
			connection_release(_radio.conn_curr);
    f928:	4c44      	ldr	r4, [pc, #272]	; (fa3c <isr+0x8ac>)
    f92a:	f8d4 0110 	ldr.w	r0, [r4, #272]	; 0x110
    f92e:	f002 f885 	bl	11a3c <connection_release>
			_radio.conn_curr = NULL;
    f932:	2300      	movs	r3, #0
    f934:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    f938:	e638      	b.n	f5ac <isr+0x41c>
			_radio.conn_curr->apto_expire = 0;
    f93a:	2300      	movs	r3, #0
    f93c:	f8a2 304c 	strh.w	r3, [r2, #76]	; 0x4c
	}
}

static inline u8_t packet_rx_acquired_count_get(void)
{
	if (_radio.packet_rx_acquire >=
    f940:	4b3e      	ldr	r3, [pc, #248]	; (fa3c <isr+0x8ac>)
    f942:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
    f946:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
    f94a:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
    f94c:	429a      	cmp	r2, r3
    f94e:	d318      	bcc.n	f982 <isr+0x7f2>
		return (_radio.packet_rx_acquire -
			_radio.packet_rx_last);
    f950:	4b3a      	ldr	r3, [pc, #232]	; (fa3c <isr+0x8ac>)
    f952:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
    f956:	1ad3      	subs	r3, r2, r3
    f958:	b2db      	uxtb	r3, r3
	}
}

static inline struct radio_pdu_node_rx *packet_rx_reserve_get(u8_t count)
{
	if (count > packet_rx_acquired_count_get()) {
    f95a:	2b01      	cmp	r3, #1
    f95c:	d91b      	bls.n	f996 <isr+0x806>
		return 0;
	}

	return _radio.packet_rx[_radio.packet_rx_last];
    f95e:	4b37      	ldr	r3, [pc, #220]	; (fa3c <isr+0x8ac>)
    f960:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
    f964:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
    f968:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
			LL_ASSERT(radio_pdu_node_rx);
    f96c:	b1ab      	cbz	r3, f99a <isr+0x80a>
			radio_pdu_node_rx->hdr.handle = _radio.conn_curr->handle;
    f96e:	4a33      	ldr	r2, [pc, #204]	; (fa3c <isr+0x8ac>)
    f970:	f8d2 2110 	ldr.w	r2, [r2, #272]	; 0x110
    f974:	8c12      	ldrh	r2, [r2, #32]
    f976:	80da      	strh	r2, [r3, #6]
			radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_APTO;
    f978:	220a      	movs	r2, #10
    f97a:	711a      	strb	r2, [r3, #4]
			packet_rx_enqueue();
    f97c:	f003 ff3e 	bl	137fc <packet_rx_enqueue>
    f980:	e778      	b.n	f874 <isr+0x6e4>
		return (_radio.packet_rx_count -
    f982:	492e      	ldr	r1, [pc, #184]	; (fa3c <isr+0x8ac>)
    f984:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
			_radio.packet_rx_last +
    f988:	f891 113d 	ldrb.w	r1, [r1, #317]	; 0x13d
		return (_radio.packet_rx_count -
    f98c:	1a5b      	subs	r3, r3, r1
			_radio.packet_rx_last +
    f98e:	fa52 f383 	uxtab	r3, r2, r3
    f992:	b2db      	uxtb	r3, r3
    f994:	e7e1      	b.n	f95a <isr+0x7ca>
		return 0;
    f996:	2300      	movs	r3, #0
    f998:	e7e8      	b.n	f96c <isr+0x7dc>
			LL_ASSERT(radio_pdu_node_rx);
    f99a:	4040      	eors	r0, r0
    f99c:	f380 8811 	msr	BASEPRI, r0
    f9a0:	f04f 0004 	mov.w	r0, #4
    f9a4:	df02      	svc	2
			_radio.conn_curr->appto_expire = 0;
    f9a6:	2300      	movs	r3, #0
    f9a8:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
			if ((_radio.conn_curr->procedure_expire == 0) &&
    f9ac:	4b23      	ldr	r3, [pc, #140]	; (fa3c <isr+0x8ac>)
    f9ae:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
    f9b2:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
    f9b6:	2a00      	cmp	r2, #0
    f9b8:	f47f af68 	bne.w	f88c <isr+0x6fc>
			    (_radio.conn_curr->llcp_req ==
    f9bc:	f893 1074 	ldrb.w	r1, [r3, #116]	; 0x74
			     _radio.conn_curr->llcp_ack)) {
    f9c0:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
			if ((_radio.conn_curr->procedure_expire == 0) &&
    f9c4:	4291      	cmp	r1, r2
    f9c6:	f47f af61 	bne.w	f88c <isr+0x6fc>
				_radio.conn_curr->llcp_type = LLCP_PING;
    f9ca:	2207      	movs	r2, #7
    f9cc:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
				_radio.conn_curr->llcp_ack--;
    f9d0:	4b1a      	ldr	r3, [pc, #104]	; (fa3c <isr+0x8ac>)
    f9d2:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    f9d6:	f892 3075 	ldrb.w	r3, [r2, #117]	; 0x75
    f9da:	3b01      	subs	r3, #1
    f9dc:	f882 3075 	strb.w	r3, [r2, #117]	; 0x75
    f9e0:	e754      	b.n	f88c <isr+0x6fc>
		_radio.conn_curr->latency_event = 0;
    f9e2:	2300      	movs	r3, #0
    f9e4:	8553      	strh	r3, [r2, #42]	; 0x2a
    f9e6:	e761      	b.n	f8ac <isr+0x71c>
	lazy = 0;
    f9e8:	2300      	movs	r3, #0
    f9ea:	e76d      	b.n	f8c8 <isr+0x738>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    f9ec:	4040      	eors	r0, r0
    f9ee:	f380 8811 	msr	BASEPRI, r0
    f9f2:	f04f 0004 	mov.w	r0, #4
    f9f6:	df02      	svc	2
		LL_ASSERT((_radio.state == STATE_STOP) ||
    f9f8:	4b10      	ldr	r3, [pc, #64]	; (fa3c <isr+0x8ac>)
    f9fa:	7c1b      	ldrb	r3, [r3, #16]
    f9fc:	3b04      	subs	r3, #4
    f9fe:	b2db      	uxtb	r3, r3
    fa00:	2b01      	cmp	r3, #1
    fa02:	d803      	bhi.n	fa0c <isr+0x87c>
		_radio.state = STATE_NONE;
    fa04:	2200      	movs	r2, #0
    fa06:	4b0d      	ldr	r3, [pc, #52]	; (fa3c <isr+0x8ac>)
    fa08:	741a      	strb	r2, [r3, #16]
    fa0a:	e5d2      	b.n	f5b2 <isr+0x422>
		LL_ASSERT((_radio.state == STATE_STOP) ||
    fa0c:	4040      	eors	r0, r0
    fa0e:	f380 8811 	msr	BASEPRI, r0
    fa12:	f04f 0004 	mov.w	r0, #4
    fa16:	df02      	svc	2
		LL_ASSERT(0);
    fa18:	4040      	eors	r0, r0
    fa1a:	f380 8811 	msr	BASEPRI, r0
    fa1e:	f04f 0004 	mov.w	r0, #4
    fa22:	df02      	svc	2
	u32_t dont_close = 0;
    fa24:	2300      	movs	r3, #0
    fa26:	e5c1      	b.n	f5ac <isr+0x41c>
    fa28:	2300      	movs	r3, #0
    fa2a:	e5bf      	b.n	f5ac <isr+0x41c>
    fa2c:	2300      	movs	r3, #0
    fa2e:	e5bd      	b.n	f5ac <isr+0x41c>
    fa30:	1afd498d 	.word	0x1afd498d
    fa34:	00000007 	.word	0x00000007
    fa38:	3b9aca00 	.word	0x3b9aca00
    fa3c:	20000e84 	.word	0x20000e84
    fa40:	000111ad 	.word	0x000111ad
	_radio.role = ROLE_NONE;
    fa44:	4d0e      	ldr	r5, [pc, #56]	; (fa80 <isr+0x8f0>)
    fa46:	2400      	movs	r4, #0
    fa48:	73ec      	strb	r4, [r5, #15]
	_radio.state = STATE_NONE;
    fa4a:	742c      	strb	r4, [r5, #16]
	_radio.ticker_id_event = 0;
    fa4c:	736c      	strb	r4, [r5, #13]
	radio_tmr_stop();
    fa4e:	f7ff fa07 	bl	ee60 <radio_tmr_stop>
	event_inactive(0, 0, 0, NULL);
    fa52:	4623      	mov	r3, r4
    fa54:	4622      	mov	r2, r4
    fa56:	4621      	mov	r1, r4
    fa58:	4620      	mov	r0, r4
    fa5a:	f001 fe29 	bl	116b0 <event_inactive>
	clock_control_off(_radio.hf_clock, NULL);
    fa5e:	6828      	ldr	r0, [r5, #0]
 * @param sys A pointer to an opaque data representing the sub-system
 */
static inline int clock_control_off(struct device *dev,
				    clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;
    fa60:	6843      	ldr	r3, [r0, #4]

	return api->off(dev, sys);
    fa62:	685b      	ldr	r3, [r3, #4]
    fa64:	4621      	mov	r1, r4
    fa66:	4798      	blx	r3
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    fa68:	2201      	movs	r2, #1
    fa6a:	4611      	mov	r1, r2
    fa6c:	4620      	mov	r0, r4
    fa6e:	f7fe fd01 	bl	e474 <mayfly_enable>
    fa72:	e59e      	b.n	f5b2 <isr+0x422>
		LL_ASSERT(0);
    fa74:	4040      	eors	r0, r0
    fa76:	f380 8811 	msr	BASEPRI, r0
    fa7a:	f04f 0004 	mov.w	r0, #4
    fa7e:	df02      	svc	2
    fa80:	20000e84 	.word	0x20000e84

0000fa84 <init>:
{
    fa84:	b410      	push	{r4}
	LL_ASSERT(len > (offsetof(struct rand, rand) + threshold));
    fa86:	1d1c      	adds	r4, r3, #4
    fa88:	42a2      	cmp	r2, r4
    fa8a:	d90e      	bls.n	faaa <init+0x26>
	*rng = (struct rand *)context;
    fa8c:	6001      	str	r1, [r0, #0]
	p->count = len - offsetof(struct rand, rand);
    fa8e:	3a04      	subs	r2, #4
    fa90:	700a      	strb	r2, [r1, #0]
	p->threshold = threshold;
    fa92:	704b      	strb	r3, [r1, #1]
	p->first = p->last = 0;
    fa94:	2300      	movs	r3, #0
    fa96:	70cb      	strb	r3, [r1, #3]
    fa98:	708b      	strb	r3, [r1, #2]
	if (!rng_isr || !rng_thr) {
    fa9a:	4b0c      	ldr	r3, [pc, #48]	; (facc <init+0x48>)
    fa9c:	681b      	ldr	r3, [r3, #0]
    fa9e:	b153      	cbz	r3, fab6 <init+0x32>
    faa0:	4b0b      	ldr	r3, [pc, #44]	; (fad0 <init+0x4c>)
    faa2:	681b      	ldr	r3, [r3, #0]
    faa4:	b13b      	cbz	r3, fab6 <init+0x32>
}
    faa6:	bc10      	pop	{r4}
    faa8:	4770      	bx	lr
	LL_ASSERT(len > (offsetof(struct rand, rand) + threshold));
    faaa:	4040      	eors	r0, r0
    faac:	f380 8811 	msr	BASEPRI, r0
    fab0:	f04f 0004 	mov.w	r0, #4
    fab4:	df02      	svc	2
		NRF_RNG->CONFIG = RNG_CONFIG_DERCEN_Msk;
    fab6:	4b07      	ldr	r3, [pc, #28]	; (fad4 <init+0x50>)
    fab8:	2201      	movs	r2, #1
    faba:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		NRF_RNG->EVENTS_VALRDY = 0;
    fabe:	2100      	movs	r1, #0
    fac0:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
		NRF_RNG->INTENSET = RNG_INTENSET_VALRDY_Msk;
    fac4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		NRF_RNG->TASKS_START = 1;
    fac8:	601a      	str	r2, [r3, #0]
}
    faca:	e7ec      	b.n	faa6 <init+0x22>
    facc:	20000dd4 	.word	0x20000dd4
    fad0:	20000dd8 	.word	0x20000dd8
    fad4:	4000d000 	.word	0x4000d000

0000fad8 <get>:
	LL_ASSERT(rng);
    fad8:	b1d0      	cbz	r0, fb10 <get+0x38>
{
    fada:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fade:	4607      	mov	r7, r0
	first = rng->first;
    fae0:	f890 e002 	ldrb.w	lr, [r0, #2]
	last = rng->last;
    fae4:	78c5      	ldrb	r5, [r0, #3]
	if (first <= last) {
    fae6:	45ae      	cmp	lr, r5
    fae8:	d82e      	bhi.n	fb48 <get+0x70>
		d = &rand[octets];
    faea:	440a      	add	r2, r1
		s = &rng->rand[first];
    faec:	eb00 060e 	add.w	r6, r0, lr
    faf0:	3604      	adds	r6, #4
		avail = last - first;
    faf2:	eba5 040e 	sub.w	r4, r5, lr
    faf6:	b2e4      	uxtb	r4, r4
		if (octets < avail) {
    faf8:	42a1      	cmp	r1, r4
    fafa:	d20f      	bcs.n	fb1c <get+0x44>
			remaining = avail - octets;
    fafc:	b2cb      	uxtb	r3, r1
    fafe:	1ae4      	subs	r4, r4, r3
    fb00:	fa5f fc84 	uxtb.w	ip, r4
			avail = octets;
    fb04:	461c      	mov	r4, r3
		first += avail;
    fb06:	44a6      	add	lr, r4
    fb08:	fa5f fe8e 	uxtb.w	lr, lr
		octets -= avail;
    fb0c:	1b08      	subs	r0, r1, r4
		while (avail--) {
    fb0e:	e00d      	b.n	fb2c <get+0x54>
	LL_ASSERT(rng);
    fb10:	4040      	eors	r0, r0
    fb12:	f380 8811 	msr	BASEPRI, r0
    fb16:	f04f 0004 	mov.w	r0, #4
    fb1a:	df02      	svc	2
			remaining = 0;
    fb1c:	f04f 0c00 	mov.w	ip, #0
    fb20:	e7f1      	b.n	fb06 <get+0x2e>
			*(--d) = *s++;
    fb22:	7835      	ldrb	r5, [r6, #0]
    fb24:	f802 5d01 	strb.w	r5, [r2, #-1]!
		while (avail--) {
    fb28:	461c      	mov	r4, r3
			*(--d) = *s++;
    fb2a:	3601      	adds	r6, #1
		while (avail--) {
    fb2c:	1e63      	subs	r3, r4, #1
    fb2e:	b2db      	uxtb	r3, r3
    fb30:	2c00      	cmp	r4, #0
    fb32:	d1f6      	bne.n	fb22 <get+0x4a>
		rng->first = first;
    fb34:	f887 e002 	strb.w	lr, [r7, #2]
	if (remaining < rng->threshold) {
    fb38:	787b      	ldrb	r3, [r7, #1]
    fb3a:	459c      	cmp	ip, r3
    fb3c:	d202      	bcs.n	fb44 <get+0x6c>
		NRF_RNG->TASKS_START = 1;
    fb3e:	2201      	movs	r2, #1
    fb40:	4b24      	ldr	r3, [pc, #144]	; (fbd4 <get+0xfc>)
    fb42:	601a      	str	r2, [r3, #0]
}
    fb44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		d = &rand[octets];
    fb48:	440a      	add	r2, r1
		s = &rng->rand[first];
    fb4a:	eb00 080e 	add.w	r8, r0, lr
    fb4e:	f108 0804 	add.w	r8, r8, #4
		avail = rng->count - first;
    fb52:	7804      	ldrb	r4, [r0, #0]
    fb54:	eba4 040e 	sub.w	r4, r4, lr
    fb58:	b2e4      	uxtb	r4, r4
		if (octets < avail) {
    fb5a:	42a1      	cmp	r1, r4
    fb5c:	d20d      	bcs.n	fb7a <get+0xa2>
			remaining = avail + last - octets;
    fb5e:	eb05 0c04 	add.w	ip, r5, r4
    fb62:	fa5f fc8c 	uxtb.w	ip, ip
    fb66:	b2cc      	uxtb	r4, r1
    fb68:	ebac 0c04 	sub.w	ip, ip, r4
    fb6c:	fa5f fc8c 	uxtb.w	ip, ip
			first += avail;
    fb70:	44a6      	add	lr, r4
    fb72:	fa5f fe8e 	uxtb.w	lr, lr
		octets -= avail;
    fb76:	1b08      	subs	r0, r1, r4
		while (avail--) {
    fb78:	e00a      	b.n	fb90 <get+0xb8>
			remaining = last;
    fb7a:	46ac      	mov	ip, r5
			first = 0;
    fb7c:	f04f 0e00 	mov.w	lr, #0
    fb80:	e7f9      	b.n	fb76 <get+0x9e>
			*(--d) = *s++;
    fb82:	f898 6000 	ldrb.w	r6, [r8]
    fb86:	f802 6d01 	strb.w	r6, [r2, #-1]!
		while (avail--) {
    fb8a:	461c      	mov	r4, r3
			*(--d) = *s++;
    fb8c:	f108 0801 	add.w	r8, r8, #1
		while (avail--) {
    fb90:	1e63      	subs	r3, r4, #1
    fb92:	b2db      	uxtb	r3, r3
    fb94:	2c00      	cmp	r4, #0
    fb96:	d1f4      	bne.n	fb82 <get+0xaa>
		if (octets && last) {
    fb98:	b1c8      	cbz	r0, fbce <get+0xf6>
    fb9a:	b1c5      	cbz	r5, fbce <get+0xf6>
			s = &rng->rand[0];
    fb9c:	1d3e      	adds	r6, r7, #4
			if (octets < last) {
    fb9e:	42a8      	cmp	r0, r5
    fba0:	d206      	bcs.n	fbb0 <get+0xd8>
				remaining = last - octets;
    fba2:	fa5f fe80 	uxtb.w	lr, r0
    fba6:	eba5 040e 	sub.w	r4, r5, lr
    fbaa:	fa5f fc84 	uxtb.w	ip, r4
    fbae:	e001      	b.n	fbb4 <get+0xdc>
				remaining = 0;
    fbb0:	46a4      	mov	ip, r4
	last = rng->last;
    fbb2:	46ae      	mov	lr, r5
			octets -= last;
    fbb4:	eba0 000e 	sub.w	r0, r0, lr
			while (last--) {
    fbb8:	4671      	mov	r1, lr
    fbba:	e004      	b.n	fbc6 <get+0xee>
				*(--d) = *s++;
    fbbc:	7831      	ldrb	r1, [r6, #0]
    fbbe:	f802 1d01 	strb.w	r1, [r2, #-1]!
    fbc2:	3601      	adds	r6, #1
			while (last--) {
    fbc4:	4619      	mov	r1, r3
    fbc6:	1e4b      	subs	r3, r1, #1
    fbc8:	b2db      	uxtb	r3, r3
    fbca:	2900      	cmp	r1, #0
    fbcc:	d1f6      	bne.n	fbbc <get+0xe4>
		rng->first = first;
    fbce:	f887 e002 	strb.w	lr, [r7, #2]
    fbd2:	e7b1      	b.n	fb38 <get+0x60>
    fbd4:	4000d000 	.word	0x4000d000

0000fbd8 <rand_init>:
{
    fbd8:	b508      	push	{r3, lr}
	init(&rng_thr, context, context_len, threshold);
    fbda:	4613      	mov	r3, r2
    fbdc:	460a      	mov	r2, r1
    fbde:	4601      	mov	r1, r0
    fbe0:	4801      	ldr	r0, [pc, #4]	; (fbe8 <rand_init+0x10>)
    fbe2:	f7ff ff4f 	bl	fa84 <init>
    fbe6:	bd08      	pop	{r3, pc}
    fbe8:	20000dd8 	.word	0x20000dd8

0000fbec <rand_isr_init>:
{
    fbec:	b508      	push	{r3, lr}
	init(&rng_isr, context, context_len, threshold);
    fbee:	4613      	mov	r3, r2
    fbf0:	460a      	mov	r2, r1
    fbf2:	4601      	mov	r1, r0
    fbf4:	4801      	ldr	r0, [pc, #4]	; (fbfc <rand_isr_init+0x10>)
    fbf6:	f7ff ff45 	bl	fa84 <init>
    fbfa:	bd08      	pop	{r3, pc}
    fbfc:	20000dd4 	.word	0x20000dd4

0000fc00 <rand_get>:
{
    fc00:	b508      	push	{r3, lr}
	return get(rng_thr, octets, rand);
    fc02:	460a      	mov	r2, r1
    fc04:	4601      	mov	r1, r0
    fc06:	4b02      	ldr	r3, [pc, #8]	; (fc10 <rand_get+0x10>)
    fc08:	6818      	ldr	r0, [r3, #0]
    fc0a:	f7ff ff65 	bl	fad8 <get>
}
    fc0e:	bd08      	pop	{r3, pc}
    fc10:	20000dd8 	.word	0x20000dd8

0000fc14 <rand_isr_get>:
{
    fc14:	b508      	push	{r3, lr}
	return get(rng_isr, octets, rand);
    fc16:	460a      	mov	r2, r1
    fc18:	4601      	mov	r1, r0
    fc1a:	4b02      	ldr	r3, [pc, #8]	; (fc24 <rand_isr_get+0x10>)
    fc1c:	6818      	ldr	r0, [r3, #0]
    fc1e:	f7ff ff5b 	bl	fad8 <get>
}
    fc22:	bd08      	pop	{r3, pc}
    fc24:	20000dd4 	.word	0x20000dd4

0000fc28 <isr_rand>:

void isr_rand(void *param)
{
    fc28:	b508      	push	{r3, lr}
	ARG_UNUSED(param);

	if (NRF_RNG->EVENTS_VALRDY) {
    fc2a:	4b10      	ldr	r3, [pc, #64]	; (fc6c <isr_rand+0x44>)
    fc2c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    fc30:	b903      	cbnz	r3, fc34 <isr_rand+0xc>
    fc32:	bd08      	pop	{r3, pc}
		int ret;

		ret = isr(rng_isr, true);
    fc34:	2101      	movs	r1, #1
    fc36:	4b0e      	ldr	r3, [pc, #56]	; (fc70 <isr_rand+0x48>)
    fc38:	6818      	ldr	r0, [r3, #0]
    fc3a:	f7ff fa79 	bl	f130 <isr>
		if (ret != -EBUSY) {
    fc3e:	f110 0f10 	cmn.w	r0, #16
    fc42:	d008      	beq.n	fc56 <isr_rand+0x2e>
			ret = isr(rng_thr, (ret == -ENOBUFS));
    fc44:	f110 0f69 	cmn.w	r0, #105	; 0x69
    fc48:	bf14      	ite	ne
    fc4a:	2100      	movne	r1, #0
    fc4c:	2101      	moveq	r1, #1
    fc4e:	4b09      	ldr	r3, [pc, #36]	; (fc74 <isr_rand+0x4c>)
    fc50:	6818      	ldr	r0, [r3, #0]
    fc52:	f7ff fa6d 	bl	f130 <isr>
		}

		NRF_RNG->EVENTS_VALRDY = 0;
    fc56:	2200      	movs	r2, #0
    fc58:	4b04      	ldr	r3, [pc, #16]	; (fc6c <isr_rand+0x44>)
    fc5a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

		if (ret != -EBUSY) {
    fc5e:	f110 0f10 	cmn.w	r0, #16
    fc62:	d0e6      	beq.n	fc32 <isr_rand+0xa>
			NRF_RNG->TASKS_STOP = 1;
    fc64:	2201      	movs	r2, #1
    fc66:	605a      	str	r2, [r3, #4]
		}
	}
}
    fc68:	e7e3      	b.n	fc32 <isr_rand+0xa>
    fc6a:	bf00      	nop
    fc6c:	4000d000 	.word	0x4000d000
    fc70:	20000dd4 	.word	0x20000dd4
    fc74:	20000dd8 	.word	0x20000dd8

0000fc78 <ticker_by_slot_get>:
 * Static Functions
 ****************************************************************************/
static u8_t ticker_by_slot_get(struct ticker_node *node, u8_t ticker_id_head,
			       u32_t ticks_slot)
{
	while (ticker_id_head != TICKER_NULL) {
    fc78:	29ff      	cmp	r1, #255	; 0xff
    fc7a:	d012      	beq.n	fca2 <ticker_by_slot_get+0x2a>
{
    fc7c:	b430      	push	{r4, r5}
		struct ticker_node *ticker;
		u32_t ticks_to_expire;

		ticker = &node[ticker_id_head];
    fc7e:	eb01 04c1 	add.w	r4, r1, r1, lsl #3
    fc82:	00a3      	lsls	r3, r4, #2
    fc84:	18c4      	adds	r4, r0, r3
		ticks_to_expire = ticker->ticks_to_expire;
    fc86:	68a5      	ldr	r5, [r4, #8]

		if (ticks_slot <= ticks_to_expire) {
    fc88:	42aa      	cmp	r2, r5
    fc8a:	d906      	bls.n	fc9a <ticker_by_slot_get+0x22>
			return TICKER_NULL;
		}

		if (ticker->ticks_slot) {
    fc8c:	8ae4      	ldrh	r4, [r4, #22]
    fc8e:	b92c      	cbnz	r4, fc9c <ticker_by_slot_get+0x24>
			break;
		}

		ticks_slot -= ticks_to_expire;
    fc90:	1b52      	subs	r2, r2, r5
		ticker_id_head = ticker->next;
    fc92:	5cc1      	ldrb	r1, [r0, r3]
	while (ticker_id_head != TICKER_NULL) {
    fc94:	29ff      	cmp	r1, #255	; 0xff
    fc96:	d1f2      	bne.n	fc7e <ticker_by_slot_get+0x6>
    fc98:	e000      	b.n	fc9c <ticker_by_slot_get+0x24>
			return TICKER_NULL;
    fc9a:	21ff      	movs	r1, #255	; 0xff
	}

	return ticker_id_head;
}
    fc9c:	4608      	mov	r0, r1
    fc9e:	bc30      	pop	{r4, r5}
    fca0:	4770      	bx	lr
    fca2:	4608      	mov	r0, r1
    fca4:	4770      	bx	lr

0000fca6 <ticker_by_next_slot_get>:

static void ticker_by_next_slot_get(struct ticker_instance *instance,
				    u8_t *ticker_id_head, u32_t *ticks_current,
				    u32_t *ticks_to_expire)
{
    fca6:	b5f0      	push	{r4, r5, r6, r7, lr}
    fca8:	4694      	mov	ip, r2
	struct ticker_node *ticker;
	struct ticker_node *node;
	u32_t _ticks_to_expire;
	u8_t _ticker_id_head;

	node = instance->node;
    fcaa:	6807      	ldr	r7, [r0, #0]

	_ticker_id_head = *ticker_id_head;
    fcac:	f891 e000 	ldrb.w	lr, [r1]
	_ticks_to_expire = *ticks_to_expire;
    fcb0:	681e      	ldr	r6, [r3, #0]
	if ((_ticker_id_head == TICKER_NULL) ||
    fcb2:	f1be 0fff 	cmp.w	lr, #255	; 0xff
    fcb6:	d004      	beq.n	fcc2 <ticker_by_next_slot_get+0x1c>
	    (*ticks_current != instance->ticks_current)) {
    fcb8:	6942      	ldr	r2, [r0, #20]
	if ((_ticker_id_head == TICKER_NULL) ||
    fcba:	f8dc 4000 	ldr.w	r4, [ip]
    fcbe:	4294      	cmp	r4, r2
    fcc0:	d005      	beq.n	fcce <ticker_by_next_slot_get+0x28>
		_ticker_id_head = instance->ticker_id_head;
    fcc2:	7e04      	ldrb	r4, [r0, #24]
		*ticks_current = instance->ticks_current;
    fcc4:	6940      	ldr	r0, [r0, #20]
    fcc6:	f8cc 0000 	str.w	r0, [ip]
		_ticks_to_expire = 0;
    fcca:	2600      	movs	r6, #0
    fccc:	e00a      	b.n	fce4 <ticker_by_next_slot_get+0x3e>
	} else {
		ticker = &node[_ticker_id_head];
    fcce:	eb0e 0ece 	add.w	lr, lr, lr, lsl #3
    fcd2:	ea4f 028e 	mov.w	r2, lr, lsl #2
    fcd6:	4696      	mov	lr, r2
    fcd8:	18bd      	adds	r5, r7, r2
		_ticker_id_head = ticker->next;
    fcda:	5cbc      	ldrb	r4, [r7, r2]
    fcdc:	e002      	b.n	fce4 <ticker_by_next_slot_get+0x3e>
	}

	while ((_ticker_id_head != TICKER_NULL) &&
	       ((ticker = &node[_ticker_id_head])->ticks_slot == 0)) {
		_ticks_to_expire += ticker->ticks_to_expire;
    fcde:	68a8      	ldr	r0, [r5, #8]
    fce0:	4406      	add	r6, r0
		_ticker_id_head = ticker->next;
    fce2:	5cbc      	ldrb	r4, [r7, r2]
	while ((_ticker_id_head != TICKER_NULL) &&
    fce4:	2cff      	cmp	r4, #255	; 0xff
    fce6:	d006      	beq.n	fcf6 <ticker_by_next_slot_get+0x50>
	       ((ticker = &node[_ticker_id_head])->ticks_slot == 0)) {
    fce8:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
    fcec:	0082      	lsls	r2, r0, #2
    fcee:	18bd      	adds	r5, r7, r2
    fcf0:	8ae8      	ldrh	r0, [r5, #22]
	while ((_ticker_id_head != TICKER_NULL) &&
    fcf2:	2800      	cmp	r0, #0
    fcf4:	d0f3      	beq.n	fcde <ticker_by_next_slot_get+0x38>
	}

	if (_ticker_id_head != TICKER_NULL) {
    fcf6:	2cff      	cmp	r4, #255	; 0xff
    fcf8:	d001      	beq.n	fcfe <ticker_by_next_slot_get+0x58>
		_ticks_to_expire += ticker->ticks_to_expire;
    fcfa:	68aa      	ldr	r2, [r5, #8]
    fcfc:	4416      	add	r6, r2
	}

	*ticker_id_head = _ticker_id_head;
    fcfe:	700c      	strb	r4, [r1, #0]
	*ticks_to_expire = _ticks_to_expire;
    fd00:	601e      	str	r6, [r3, #0]
    fd02:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000fd04 <ticker_enqueue>:
}

static u8_t ticker_enqueue(struct ticker_instance *instance, u8_t id)
{
    fd04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fd08:	b085      	sub	sp, #20
    fd0a:	4681      	mov	r9, r0
    fd0c:	9102      	str	r1, [sp, #8]
	u32_t ticks_to_expire;
	u8_t previous;
	u8_t current;
	u8_t collide;

	node = &instance->node[0];
    fd0e:	6806      	ldr	r6, [r0, #0]
	ticker_new = &node[id];
    fd10:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
    fd14:	009b      	lsls	r3, r3, #2
    fd16:	9303      	str	r3, [sp, #12]
    fd18:	eb06 0a03 	add.w	sl, r6, r3
	ticks_to_expire = ticker_new->ticks_to_expire;
    fd1c:	f8da 5008 	ldr.w	r5, [sl, #8]

	collide = ticker_id_slot_previous = TICKER_NULL;
	current = instance->ticker_id_head;
    fd20:	f890 8018 	ldrb.w	r8, [r0, #24]
	previous = current;
	ticks_slot_previous = instance->ticks_slot_previous;
    fd24:	8b47      	ldrh	r7, [r0, #26]
	current = instance->ticker_id_head;
    fd26:	4644      	mov	r4, r8
	collide = ticker_id_slot_previous = TICKER_NULL;
    fd28:	23ff      	movs	r3, #255	; 0xff
    fd2a:	9301      	str	r3, [sp, #4]
	while ((current != TICKER_NULL) &&
    fd2c:	e004      	b.n	fd38 <ticker_enqueue+0x34>

		if (ticker_current->ticks_slot != 0) {
			ticks_slot_previous = ticker_current->ticks_slot;
			ticker_id_slot_previous = current;
		} else {
			if (ticks_slot_previous > ticks_to_expire_current) {
    fd2e:	4297      	cmp	r7, r2
    fd30:	d912      	bls.n	fd58 <ticker_enqueue+0x54>
				ticks_slot_previous -= ticks_to_expire_current;
    fd32:	1abf      	subs	r7, r7, r2
			} else {
				ticks_slot_previous = 0;
			}
		}
		previous = current;
    fd34:	46a0      	mov	r8, r4
		current = ticker_current->next;
    fd36:	5cf4      	ldrb	r4, [r6, r3]
	while ((current != TICKER_NULL) &&
    fd38:	2cff      	cmp	r4, #255	; 0xff
    fd3a:	d00f      	beq.n	fd5c <ticker_enqueue+0x58>
		 (ticker_current = &node[current])->ticks_to_expire))) {
    fd3c:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
    fd40:	0093      	lsls	r3, r2, #2
    fd42:	18f1      	adds	r1, r6, r3
		(ticks_to_expire_current =
    fd44:	688a      	ldr	r2, [r1, #8]
	while ((current != TICKER_NULL) &&
    fd46:	4295      	cmp	r5, r2
    fd48:	d908      	bls.n	fd5c <ticker_enqueue+0x58>
		ticks_to_expire -= ticks_to_expire_current;
    fd4a:	1aad      	subs	r5, r5, r2
		if (ticker_current->ticks_slot != 0) {
    fd4c:	8ac9      	ldrh	r1, [r1, #22]
    fd4e:	2900      	cmp	r1, #0
    fd50:	d0ed      	beq.n	fd2e <ticker_enqueue+0x2a>
			ticks_slot_previous = ticker_current->ticks_slot;
    fd52:	460f      	mov	r7, r1
			ticker_id_slot_previous = current;
    fd54:	9401      	str	r4, [sp, #4]
    fd56:	e7ed      	b.n	fd34 <ticker_enqueue+0x30>
				ticks_slot_previous = 0;
    fd58:	2700      	movs	r7, #0
    fd5a:	e7eb      	b.n	fd34 <ticker_enqueue+0x30>
	}

	collide = ticker_by_slot_get(&node[0], current,
				     ticks_to_expire + ticker_new->ticks_slot);
    fd5c:	f8ba b016 	ldrh.w	fp, [sl, #22]
	collide = ticker_by_slot_get(&node[0], current,
    fd60:	eb05 020b 	add.w	r2, r5, fp
    fd64:	4621      	mov	r1, r4
    fd66:	4630      	mov	r0, r6
    fd68:	f7ff ff86 	bl	fc78 <ticker_by_slot_get>

	if ((ticker_new->ticks_slot == 0) ||
    fd6c:	f1bb 0f00 	cmp.w	fp, #0
    fd70:	d007      	beq.n	fd82 <ticker_enqueue+0x7e>
    fd72:	42af      	cmp	r7, r5
    fd74:	d801      	bhi.n	fd7a <ticker_enqueue+0x76>
	    ((ticks_slot_previous <= ticks_to_expire) &&
    fd76:	28ff      	cmp	r0, #255	; 0xff
    fd78:	d003      	beq.n	fd82 <ticker_enqueue+0x7e>

		if (current != TICKER_NULL) {
			node[current].ticks_to_expire -= ticks_to_expire;
		}
	} else {
		if (ticks_slot_previous > ticks_to_expire) {
    fd7a:	42af      	cmp	r7, r5
    fd7c:	d918      	bls.n	fdb0 <ticker_enqueue+0xac>
			id = ticker_id_slot_previous;
    fd7e:	9801      	ldr	r0, [sp, #4]
    fd80:	e016      	b.n	fdb0 <ticker_enqueue+0xac>
		ticker_new->ticks_to_expire = ticks_to_expire;
    fd82:	f8ca 5008 	str.w	r5, [sl, #8]
		ticker_new->next = current;
    fd86:	9b03      	ldr	r3, [sp, #12]
    fd88:	54f4      	strb	r4, [r6, r3]
		if (previous == current) {
    fd8a:	45a0      	cmp	r8, r4
    fd8c:	d013      	beq.n	fdb6 <ticker_enqueue+0xb2>
			node[previous].next = id;
    fd8e:	eb08 08c8 	add.w	r8, r8, r8, lsl #3
    fd92:	ea4f 0388 	mov.w	r3, r8, lsl #2
    fd96:	f89d 2008 	ldrb.w	r2, [sp, #8]
    fd9a:	54f2      	strb	r2, [r6, r3]
		if (current != TICKER_NULL) {
    fd9c:	2cff      	cmp	r4, #255	; 0xff
    fd9e:	d00f      	beq.n	fdc0 <ticker_enqueue+0xbc>
			node[current].ticks_to_expire -= ticks_to_expire;
    fda0:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
    fda4:	00a3      	lsls	r3, r4, #2
    fda6:	441e      	add	r6, r3
    fda8:	68b3      	ldr	r3, [r6, #8]
    fdaa:	1b5d      	subs	r5, r3, r5
    fdac:	60b5      	str	r5, [r6, #8]
    fdae:	9802      	ldr	r0, [sp, #8]
			id = collide;
		}
	}

	return id;
}
    fdb0:	b005      	add	sp, #20
    fdb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			instance->ticker_id_head = id;
    fdb6:	f89d 3008 	ldrb.w	r3, [sp, #8]
    fdba:	f889 3018 	strb.w	r3, [r9, #24]
    fdbe:	e7ed      	b.n	fd9c <ticker_enqueue+0x98>
    fdc0:	9802      	ldr	r0, [sp, #8]
    fdc2:	e7f5      	b.n	fdb0 <ticker_enqueue+0xac>

0000fdc4 <ticker_dequeue>:

static u32_t ticker_dequeue(struct ticker_instance *instance, u8_t id)
{
    fdc4:	b4f0      	push	{r4, r5, r6, r7}
	u32_t timeout;
	u8_t current;
	u32_t total;

	/* find the ticker's position in ticker list */
	node = &instance->node[0];
    fdc6:	6806      	ldr	r6, [r0, #0]
	previous = instance->ticker_id_head;
    fdc8:	7e07      	ldrb	r7, [r0, #24]
	current = previous;
    fdca:	463b      	mov	r3, r7
	total = 0;
    fdcc:	2500      	movs	r5, #0
	ticker_current = 0;
    fdce:	462c      	mov	r4, r5
	while (current != TICKER_NULL) {
    fdd0:	2bff      	cmp	r3, #255	; 0xff
    fdd2:	d00a      	beq.n	fdea <ticker_dequeue+0x26>

		ticker_current = &node[current];
    fdd4:	eb03 04c3 	add.w	r4, r3, r3, lsl #3
    fdd8:	00a2      	lsls	r2, r4, #2
    fdda:	18b4      	adds	r4, r6, r2

		if (current == id) {
    fddc:	428b      	cmp	r3, r1
    fdde:	d004      	beq.n	fdea <ticker_dequeue+0x26>
			break;
		}

		total += ticker_current->ticks_to_expire;
    fde0:	68a7      	ldr	r7, [r4, #8]
    fde2:	443d      	add	r5, r7
		previous = current;
    fde4:	461f      	mov	r7, r3
		current = ticker_current->next;
    fde6:	5cb3      	ldrb	r3, [r6, r2]
    fde8:	e7f2      	b.n	fdd0 <ticker_dequeue+0xc>
	}

	/* ticker not in active list */
	if (current == TICKER_NULL) {
    fdea:	2bff      	cmp	r3, #255	; 0xff
    fdec:	d017      	beq.n	fe1e <ticker_dequeue+0x5a>
		return 0;
	}

	/* ticker is the first in the list */
	if (previous == current) {
    fdee:	429f      	cmp	r7, r3
    fdf0:	d012      	beq.n	fe18 <ticker_dequeue+0x54>
		instance->ticker_id_head = ticker_current->next;
	}

	/* remaining timeout between next timeout */
	timeout = ticker_current->ticks_to_expire;
    fdf2:	68a0      	ldr	r0, [r4, #8]

	/* link previous ticker with next of this ticker
	 * i.e. removing the ticker from list
	 */
	node[previous].next = ticker_current->next;
    fdf4:	eb07 07c7 	add.w	r7, r7, r7, lsl #3
    fdf8:	00bb      	lsls	r3, r7, #2
    fdfa:	7822      	ldrb	r2, [r4, #0]
    fdfc:	54f2      	strb	r2, [r6, r3]

	/* if this is not the last ticker, increment the
	 * next ticker by this ticker timeout
	 */
	if (ticker_current->next != TICKER_NULL) {
    fdfe:	7823      	ldrb	r3, [r4, #0]
    fe00:	2bff      	cmp	r3, #255	; 0xff
    fe02:	d006      	beq.n	fe12 <ticker_dequeue+0x4e>
		node[ticker_current->next].ticks_to_expire += timeout;
    fe04:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
    fe08:	009a      	lsls	r2, r3, #2
    fe0a:	4416      	add	r6, r2
    fe0c:	68b3      	ldr	r3, [r6, #8]
    fe0e:	4403      	add	r3, r0
    fe10:	60b3      	str	r3, [r6, #8]
	}

	return (total + timeout);
    fe12:	4428      	add	r0, r5
}
    fe14:	bcf0      	pop	{r4, r5, r6, r7}
    fe16:	4770      	bx	lr
		instance->ticker_id_head = ticker_current->next;
    fe18:	7823      	ldrb	r3, [r4, #0]
    fe1a:	7603      	strb	r3, [r0, #24]
    fe1c:	e7e9      	b.n	fdf2 <ticker_dequeue+0x2e>
		return 0;
    fe1e:	2000      	movs	r0, #0
    fe20:	e7f8      	b.n	fe14 <ticker_dequeue+0x50>
	...

0000fe24 <ticker_remainder_inc>:
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
}

static u8_t ticker_remainder_inc(struct ticker_node *ticker)
{
	ticker->remainder_current += ticker->remainder_periodic;
    fe24:	69c3      	ldr	r3, [r0, #28]
    fe26:	6a02      	ldr	r2, [r0, #32]
    fe28:	4413      	add	r3, r2
    fe2a:	6203      	str	r3, [r0, #32]
	if ((ticker->remainder_current < BIT(31)) &&
    fe2c:	4a05      	ldr	r2, [pc, #20]	; (fe44 <ticker_remainder_inc+0x20>)
    fe2e:	441a      	add	r2, r3
    fe30:	4905      	ldr	r1, [pc, #20]	; (fe48 <ticker_remainder_inc+0x24>)
    fe32:	428a      	cmp	r2, r1
    fe34:	d804      	bhi.n	fe40 <ticker_remainder_inc+0x1c>
	    (ticker->remainder_current > (30517578UL / 2))) {
		ticker->remainder_current -= 30517578UL;
    fe36:	4a05      	ldr	r2, [pc, #20]	; (fe4c <ticker_remainder_inc+0x28>)
    fe38:	441a      	add	r2, r3
    fe3a:	6202      	str	r2, [r0, #32]
		return 1;
    fe3c:	2001      	movs	r0, #1
    fe3e:	4770      	bx	lr
	}
	return 0;
    fe40:	2000      	movs	r0, #0
}
    fe42:	4770      	bx	lr
    fe44:	ff172b5a 	.word	0xff172b5a
    fe48:	7f172b59 	.word	0x7f172b59
    fe4c:	fe2e56b6 	.word	0xfe2e56b6

0000fe50 <ticker_remainder_dec>:

static u8_t ticker_remainder_dec(struct ticker_node *ticker)
{
    fe50:	4603      	mov	r3, r0
	u8_t decrement = 0;

	if ((ticker->remainder_current >= BIT(31)) ||
    fe52:	6a01      	ldr	r1, [r0, #32]
    fe54:	4a07      	ldr	r2, [pc, #28]	; (fe74 <ticker_remainder_dec+0x24>)
    fe56:	440a      	add	r2, r1
    fe58:	4807      	ldr	r0, [pc, #28]	; (fe78 <ticker_remainder_dec+0x28>)
    fe5a:	4282      	cmp	r2, r0
    fe5c:	d908      	bls.n	fe70 <ticker_remainder_dec+0x20>
	    (ticker->remainder_current <= (30517578UL / 2))) {
		decrement++;
		ticker->remainder_current += 30517578UL;
    fe5e:	4a07      	ldr	r2, [pc, #28]	; (fe7c <ticker_remainder_dec+0x2c>)
    fe60:	440a      	add	r2, r1
    fe62:	621a      	str	r2, [r3, #32]
		decrement++;
    fe64:	2001      	movs	r0, #1
	}
	ticker->remainder_current -= ticker->remainder_periodic;
    fe66:	69d9      	ldr	r1, [r3, #28]
    fe68:	6a1a      	ldr	r2, [r3, #32]
    fe6a:	1a52      	subs	r2, r2, r1
    fe6c:	621a      	str	r2, [r3, #32]

	return decrement;
}
    fe6e:	4770      	bx	lr
	u8_t decrement = 0;
    fe70:	2000      	movs	r0, #0
    fe72:	e7f8      	b.n	fe66 <ticker_remainder_dec+0x16>
    fe74:	ff172b5a 	.word	0xff172b5a
    fe78:	7f172b59 	.word	0x7f172b59
    fe7c:	01d1a94a 	.word	0x01d1a94a

0000fe80 <ticker_job_op_cb>:

static void ticker_job_op_cb(struct ticker_user_op *user_op, u32_t status)
{
    fe80:	b510      	push	{r4, lr}
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    fe82:	2300      	movs	r3, #0
    fe84:	7003      	strb	r3, [r0, #0]
	user_op->status = status;
    fe86:	6201      	str	r1, [r0, #32]
	if (user_op->fp_op_func) {
    fe88:	6a44      	ldr	r4, [r0, #36]	; 0x24
    fe8a:	b11c      	cbz	r4, fe94 <ticker_job_op_cb+0x14>
    fe8c:	460a      	mov	r2, r1
		user_op->fp_op_func(user_op->status, user_op->op_context);
    fe8e:	6a81      	ldr	r1, [r0, #40]	; 0x28
    fe90:	4610      	mov	r0, r2
    fe92:	47a0      	blx	r4
    fe94:	bd10      	pop	{r4, pc}

0000fe96 <ticker_instance1_cmp_set>:
{
	cntr_cmp_set(0, value);
}

static void ticker_instance1_cmp_set(u32_t value)
{
    fe96:	b508      	push	{r3, lr}
	cntr_cmp_set(1, value);
    fe98:	4601      	mov	r1, r0
    fe9a:	2001      	movs	r0, #1
    fe9c:	f7fe fd40 	bl	e920 <cntr_cmp_set>
    fea0:	bd08      	pop	{r3, pc}

0000fea2 <ticker_instance0_cmp_set>:
{
    fea2:	b508      	push	{r3, lr}
	cntr_cmp_set(0, value);
    fea4:	4601      	mov	r1, r0
    fea6:	2000      	movs	r0, #0
    fea8:	f7fe fd3a 	bl	e920 <cntr_cmp_set>
    feac:	bd08      	pop	{r3, pc}
	...

0000feb0 <ticker_instance1_sched>:
{
    feb0:	b508      	push	{r3, lr}
	switch (caller_id) {
    feb2:	2803      	cmp	r0, #3
    feb4:	d841      	bhi.n	ff3a <ticker_instance1_sched+0x8a>
    feb6:	e8df f000 	tbb	[pc, r0]
    feba:	1002      	.short	0x1002
    febc:	331d      	.short	0x331d
		switch (callee_id) {
    febe:	2901      	cmp	r1, #1
    fec0:	d105      	bne.n	fece <ticker_instance1_sched+0x1e>
			mayfly_enqueue(MAYFLY_CALL_ID_0,
    fec2:	4b21      	ldr	r3, [pc, #132]	; (ff48 <ticker_instance1_sched+0x98>)
    fec4:	2102      	movs	r1, #2
    fec6:	2000      	movs	r0, #0
    fec8:	f7fe fb12 	bl	e4f0 <mayfly_enqueue>
		break;
    fecc:	bd08      	pop	{r3, pc}
			LL_ASSERT(0);
    fece:	4040      	eors	r0, r0
    fed0:	f380 8811 	msr	BASEPRI, r0
    fed4:	f04f 0004 	mov.w	r0, #4
    fed8:	df02      	svc	2
		switch (callee_id) {
    feda:	2902      	cmp	r1, #2
    fedc:	d104      	bne.n	fee8 <ticker_instance1_sched+0x38>
			mayfly_enqueue(MAYFLY_CALL_ID_2,
    fede:	4b1b      	ldr	r3, [pc, #108]	; (ff4c <ticker_instance1_sched+0x9c>)
    fee0:	4608      	mov	r0, r1
    fee2:	f7fe fb05 	bl	e4f0 <mayfly_enqueue>
		break;
    fee6:	bd08      	pop	{r3, pc}
			LL_ASSERT(0);
    fee8:	4040      	eors	r0, r0
    feea:	f380 8811 	msr	BASEPRI, r0
    feee:	f04f 0004 	mov.w	r0, #4
    fef2:	df02      	svc	2
		switch (callee_id) {
    fef4:	2901      	cmp	r1, #1
    fef6:	d007      	beq.n	ff08 <ticker_instance1_sched+0x58>
    fef8:	2902      	cmp	r1, #2
    fefa:	d00b      	beq.n	ff14 <ticker_instance1_sched+0x64>
			LL_ASSERT(0);
    fefc:	4040      	eors	r0, r0
    fefe:	f380 8811 	msr	BASEPRI, r0
    ff02:	f04f 0004 	mov.w	r0, #4
    ff06:	df02      	svc	2
			mayfly_enqueue(MAYFLY_CALL_ID_2,
    ff08:	4b11      	ldr	r3, [pc, #68]	; (ff50 <ticker_instance1_sched+0xa0>)
    ff0a:	2102      	movs	r1, #2
    ff0c:	4608      	mov	r0, r1
    ff0e:	f7fe faef 	bl	e4f0 <mayfly_enqueue>
		break;
    ff12:	bd08      	pop	{r3, pc}
			mayfly_enqueue(MAYFLY_CALL_ID_2,
    ff14:	4b0f      	ldr	r3, [pc, #60]	; (ff54 <ticker_instance1_sched+0xa4>)
    ff16:	2102      	movs	r1, #2
    ff18:	4608      	mov	r0, r1
    ff1a:	f7fe fae9 	bl	e4f0 <mayfly_enqueue>
		break;
    ff1e:	bd08      	pop	{r3, pc}
		switch (callee_id) {
    ff20:	2902      	cmp	r1, #2
    ff22:	d104      	bne.n	ff2e <ticker_instance1_sched+0x7e>
			mayfly_enqueue(MAYFLY_CALL_ID_PROGRAM,
    ff24:	4b0c      	ldr	r3, [pc, #48]	; (ff58 <ticker_instance1_sched+0xa8>)
    ff26:	2003      	movs	r0, #3
    ff28:	f7fe fae2 	bl	e4f0 <mayfly_enqueue>
		break;
    ff2c:	bd08      	pop	{r3, pc}
			LL_ASSERT(0);
    ff2e:	4040      	eors	r0, r0
    ff30:	f380 8811 	msr	BASEPRI, r0
    ff34:	f04f 0004 	mov.w	r0, #4
    ff38:	df02      	svc	2
		LL_ASSERT(0);
    ff3a:	4040      	eors	r0, r0
    ff3c:	f380 8811 	msr	BASEPRI, r0
    ff40:	f04f 0004 	mov.w	r0, #4
    ff44:	df02      	svc	2
    ff46:	bf00      	nop
    ff48:	2000bb58 	.word	0x2000bb58
    ff4c:	2000bb68 	.word	0x2000bb68
    ff50:	2000bb78 	.word	0x2000bb78
    ff54:	2000bb88 	.word	0x2000bb88
    ff58:	2000bb98 	.word	0x2000bb98

0000ff5c <ticker_instance1_caller_id_get>:
	switch (user_id) {
    ff5c:	1e83      	subs	r3, r0, #2
    ff5e:	2b01      	cmp	r3, #1
    ff60:	d800      	bhi.n	ff64 <ticker_instance1_caller_id_get+0x8>
}
    ff62:	4770      	bx	lr
		LL_ASSERT(0);
    ff64:	4040      	eors	r0, r0
    ff66:	f380 8811 	msr	BASEPRI, r0
    ff6a:	f04f 0004 	mov.w	r0, #4
    ff6e:	df02      	svc	2

0000ff70 <ticker_instance0_sched>:
{
    ff70:	b508      	push	{r3, lr}
	switch (caller_id) {
    ff72:	2803      	cmp	r0, #3
    ff74:	d843      	bhi.n	fffe <ticker_instance0_sched+0x8e>
    ff76:	e8df f000 	tbb	[pc, r0]
    ff7a:	1002      	.short	0x1002
    ff7c:	341e      	.short	0x341e
		switch (callee_id) {
    ff7e:	2901      	cmp	r1, #1
    ff80:	d105      	bne.n	ff8e <ticker_instance0_sched+0x1e>
			mayfly_enqueue(MAYFLY_CALL_ID_0,
    ff82:	4b22      	ldr	r3, [pc, #136]	; (1000c <__kernel_ram_size+0xc>)
    ff84:	2100      	movs	r1, #0
    ff86:	4608      	mov	r0, r1
    ff88:	f7fe fab2 	bl	e4f0 <mayfly_enqueue>
		break;
    ff8c:	bd08      	pop	{r3, pc}
			LL_ASSERT(0);
    ff8e:	4040      	eors	r0, r0
    ff90:	f380 8811 	msr	BASEPRI, r0
    ff94:	f04f 0004 	mov.w	r0, #4
    ff98:	df02      	svc	2
		switch (callee_id) {
    ff9a:	2902      	cmp	r1, #2
    ff9c:	d105      	bne.n	ffaa <ticker_instance0_sched+0x3a>
			mayfly_enqueue(MAYFLY_CALL_ID_0,
    ff9e:	4b1c      	ldr	r3, [pc, #112]	; (10010 <__kernel_ram_size+0x10>)
    ffa0:	2101      	movs	r1, #1
    ffa2:	2000      	movs	r0, #0
    ffa4:	f7fe faa4 	bl	e4f0 <mayfly_enqueue>
		break;
    ffa8:	bd08      	pop	{r3, pc}
			LL_ASSERT(0);
    ffaa:	4040      	eors	r0, r0
    ffac:	f380 8811 	msr	BASEPRI, r0
    ffb0:	f04f 0004 	mov.w	r0, #4
    ffb4:	df02      	svc	2
		switch (callee_id) {
    ffb6:	2901      	cmp	r1, #1
    ffb8:	d007      	beq.n	ffca <ticker_instance0_sched+0x5a>
    ffba:	2902      	cmp	r1, #2
    ffbc:	d00b      	beq.n	ffd6 <ticker_instance0_sched+0x66>
			LL_ASSERT(0);
    ffbe:	4040      	eors	r0, r0
    ffc0:	f380 8811 	msr	BASEPRI, r0
    ffc4:	f04f 0004 	mov.w	r0, #4
    ffc8:	df02      	svc	2
			mayfly_enqueue(MAYFLY_CALL_ID_1,
    ffca:	4b12      	ldr	r3, [pc, #72]	; (10014 <__kernel_ram_size+0x14>)
    ffcc:	2100      	movs	r1, #0
    ffce:	2001      	movs	r0, #1
    ffd0:	f7fe fa8e 	bl	e4f0 <mayfly_enqueue>
		break;
    ffd4:	bd08      	pop	{r3, pc}
			mayfly_enqueue(MAYFLY_CALL_ID_1,
    ffd6:	4b10      	ldr	r3, [pc, #64]	; (10018 <__kernel_ram_size+0x18>)
    ffd8:	2101      	movs	r1, #1
    ffda:	4608      	mov	r0, r1
    ffdc:	f7fe fa88 	bl	e4f0 <mayfly_enqueue>
		break;
    ffe0:	bd08      	pop	{r3, pc}
		switch (callee_id) {
    ffe2:	2902      	cmp	r1, #2
    ffe4:	d105      	bne.n	fff2 <ticker_instance0_sched+0x82>
			mayfly_enqueue(MAYFLY_CALL_ID_PROGRAM,
    ffe6:	4b0d      	ldr	r3, [pc, #52]	; (1001c <__kernel_ram_size+0x1c>)
    ffe8:	2101      	movs	r1, #1
    ffea:	2003      	movs	r0, #3
    ffec:	f7fe fa80 	bl	e4f0 <mayfly_enqueue>
		break;
    fff0:	bd08      	pop	{r3, pc}
			LL_ASSERT(0);
    fff2:	4040      	eors	r0, r0
    fff4:	f380 8811 	msr	BASEPRI, r0
    fff8:	f04f 0004 	mov.w	r0, #4
    fffc:	df02      	svc	2
		LL_ASSERT(0);
    fffe:	4040      	eors	r0, r0
   10000:	f380 8811 	msr	BASEPRI, r0
   10004:	f04f 0004 	mov.w	r0, #4
   10008:	df02      	svc	2
   1000a:	bf00      	nop
   1000c:	2000bb08 	.word	0x2000bb08
   10010:	2000bb18 	.word	0x2000bb18
   10014:	2000bb28 	.word	0x2000bb28
   10018:	2000bb38 	.word	0x2000bb38
   1001c:	2000bb48 	.word	0x2000bb48

00010020 <ticker_instance0_caller_id_get>:
	switch (user_id) {
   10020:	2801      	cmp	r0, #1
   10022:	d00a      	beq.n	1003a <ticker_instance0_caller_id_get+0x1a>
   10024:	b138      	cbz	r0, 10036 <ticker_instance0_caller_id_get+0x16>
   10026:	2803      	cmp	r0, #3
   10028:	d008      	beq.n	1003c <ticker_instance0_caller_id_get+0x1c>
		LL_ASSERT(0);
   1002a:	4040      	eors	r0, r0
   1002c:	f380 8811 	msr	BASEPRI, r0
   10030:	f04f 0004 	mov.w	r0, #4
   10034:	df02      	svc	2
		return CALL_ID_WORKER;
   10036:	2001      	movs	r0, #1
   10038:	4770      	bx	lr
		return CALL_ID_JOB;
   1003a:	2002      	movs	r0, #2
}
   1003c:	4770      	bx	lr
	...

00010040 <ticker_init>:
/*****************************************************************************
 * Public Interface
 ****************************************************************************/
u32_t ticker_init(u8_t instance_index, u8_t count_node, void *node,
		  u8_t count_user, void *user, u8_t count_op, void *user_op)
{
   10040:	b5f0      	push	{r4, r5, r6, r7, lr}
   10042:	9d05      	ldr	r5, [sp, #20]
   10044:	f89d 4018 	ldrb.w	r4, [sp, #24]
	    (sizeof(struct ticker_user) != TICKER_USER_T_SIZE) ||
	    (sizeof(struct ticker_user_op) != TICKER_USER_OP_T_SIZE)) {
		return TICKER_STATUS_FAILURE;
	}

	switch (instance_index) {
   10048:	4606      	mov	r6, r0
   1004a:	b118      	cbz	r0, 10054 <ticker_init+0x14>
   1004c:	2801      	cmp	r0, #1
   1004e:	d019      	beq.n	10084 <ticker_init+0x44>
		instance->fp_sched = ticker_instance1_sched;
		instance->fp_cmp_set = ticker_instance1_cmp_set;
		break;

	default:
		return TICKER_STATUS_FAILURE;
   10050:	2001      	movs	r0, #1
   10052:	bdf0      	pop	{r4, r5, r6, r7, pc}
		instance->fp_caller_id_get = ticker_instance0_caller_id_get;
   10054:	202c      	movs	r0, #44	; 0x2c
   10056:	4f20      	ldr	r7, [pc, #128]	; (100d8 <ticker_init+0x98>)
   10058:	fb00 7006 	mla	r0, r0, r6, r7
   1005c:	4f1f      	ldr	r7, [pc, #124]	; (100dc <ticker_init+0x9c>)
   1005e:	6207      	str	r7, [r0, #32]
		instance->fp_sched = ticker_instance0_sched;
   10060:	4f1f      	ldr	r7, [pc, #124]	; (100e0 <ticker_init+0xa0>)
   10062:	6247      	str	r7, [r0, #36]	; 0x24
		instance->fp_cmp_set = ticker_instance0_cmp_set;
   10064:	4f1f      	ldr	r7, [pc, #124]	; (100e4 <ticker_init+0xa4>)
   10066:	6287      	str	r7, [r0, #40]	; 0x28
	}

	instance->count_node = count_node;
   10068:	f8df e06c 	ldr.w	lr, [pc, #108]	; 100d8 <ticker_init+0x98>
   1006c:	202c      	movs	r0, #44	; 0x2c
   1006e:	fb00 f006 	mul.w	r0, r0, r6
   10072:	eb0e 0700 	add.w	r7, lr, r0
   10076:	7239      	strb	r1, [r7, #8]
	instance->node = node;
   10078:	f84e 2000 	str.w	r2, [lr, r0]

	instance->count_user = count_user;
   1007c:	727b      	strb	r3, [r7, #9]
	instance->user = user;
   1007e:	607d      	str	r5, [r7, #4]
	struct ticker_user_op *user_op_ = (void *)user_op;
   10080:	9907      	ldr	r1, [sp, #28]

	/** @todo check if enough ticker_user_op supplied */

	users = &instance->user[0];
	while (count_user--) {
   10082:	e015      	b.n	100b0 <ticker_init+0x70>
		instance->fp_caller_id_get = ticker_instance1_caller_id_get;
   10084:	202c      	movs	r0, #44	; 0x2c
   10086:	4f14      	ldr	r7, [pc, #80]	; (100d8 <ticker_init+0x98>)
   10088:	fb00 7006 	mla	r0, r0, r6, r7
   1008c:	4f16      	ldr	r7, [pc, #88]	; (100e8 <ticker_init+0xa8>)
   1008e:	6207      	str	r7, [r0, #32]
		instance->fp_sched = ticker_instance1_sched;
   10090:	4f16      	ldr	r7, [pc, #88]	; (100ec <ticker_init+0xac>)
   10092:	6247      	str	r7, [r0, #36]	; 0x24
		instance->fp_cmp_set = ticker_instance1_cmp_set;
   10094:	4f16      	ldr	r7, [pc, #88]	; (100f0 <ticker_init+0xb0>)
   10096:	6287      	str	r7, [r0, #40]	; 0x28
		break;
   10098:	e7e6      	b.n	10068 <ticker_init+0x28>
		users[count_user].user_op = user_op_;
   1009a:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
   1009e:	6059      	str	r1, [r3, #4]
		user_op_ += users[count_user].count_user_op;
   100a0:	f815 3032 	ldrb.w	r3, [r5, r2, lsl #3]
   100a4:	202c      	movs	r0, #44	; 0x2c
   100a6:	fb00 1103 	mla	r1, r0, r3, r1
		count_op -= users[count_user].count_user_op;
   100aa:	1ae3      	subs	r3, r4, r3
   100ac:	b2dc      	uxtb	r4, r3
	while (count_user--) {
   100ae:	4613      	mov	r3, r2
   100b0:	1e5a      	subs	r2, r3, #1
   100b2:	b2d2      	uxtb	r2, r2
   100b4:	2b00      	cmp	r3, #0
   100b6:	d1f0      	bne.n	1009a <ticker_init+0x5a>
	}

	if (count_op) {
   100b8:	b964      	cbnz	r4, 100d4 <ticker_init+0x94>
		return TICKER_STATUS_FAILURE;
	}

	instance->ticker_id_head = TICKER_NULL;
   100ba:	222c      	movs	r2, #44	; 0x2c
   100bc:	4b06      	ldr	r3, [pc, #24]	; (100d8 <ticker_init+0x98>)
   100be:	fb02 3606 	mla	r6, r2, r6, r3
   100c2:	23ff      	movs	r3, #255	; 0xff
   100c4:	7633      	strb	r3, [r6, #24]
	instance->ticker_id_slot_previous = TICKER_NULL;
   100c6:	7673      	strb	r3, [r6, #25]
	instance->ticks_slot_previous = 0;
   100c8:	2000      	movs	r0, #0
   100ca:	8370      	strh	r0, [r6, #26]
	instance->ticks_current = 0;
   100cc:	6170      	str	r0, [r6, #20]
	instance->ticks_elapsed_first = 0;
   100ce:	72b0      	strb	r0, [r6, #10]
	instance->ticks_elapsed_last = 0;
   100d0:	72f0      	strb	r0, [r6, #11]

	return TICKER_STATUS_SUCCESS;
   100d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TICKER_STATUS_FAILURE;
   100d4:	2001      	movs	r0, #1
}
   100d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   100d8:	20000ddc 	.word	0x20000ddc
   100dc:	00010021 	.word	0x00010021
   100e0:	0000ff71 	.word	0x0000ff71
   100e4:	0000fea3 	.word	0x0000fea3
   100e8:	0000ff5d 	.word	0x0000ff5d
   100ec:	0000feb1 	.word	0x0000feb1
   100f0:	0000fe97 	.word	0x0000fe97

000100f4 <ticker_trigger>:
{
	return !!(_instance[instance_index].count_node);
}

void ticker_trigger(u8_t instance_index)
{
   100f4:	b508      	push	{r3, lr}
	DEBUG_TICKER_ISR(1);

	if (_instance[instance_index].fp_sched) {
   100f6:	232c      	movs	r3, #44	; 0x2c
   100f8:	4a04      	ldr	r2, [pc, #16]	; (1010c <ticker_trigger+0x18>)
   100fa:	fb03 2000 	mla	r0, r3, r0, r2
   100fe:	6a43      	ldr	r3, [r0, #36]	; 0x24
   10100:	b11b      	cbz	r3, 1010a <ticker_trigger+0x16>
		_instance[instance_index].fp_sched(CALL_ID_TRIGGER,
   10102:	2201      	movs	r2, #1
   10104:	4611      	mov	r1, r2
   10106:	2000      	movs	r0, #0
   10108:	4798      	blx	r3
   1010a:	bd08      	pop	{r3, pc}
   1010c:	20000ddc 	.word	0x20000ddc

00010110 <ticker_start>:
u32_t ticker_start(u8_t instance_index, u8_t user_id, u8_t ticker_id,
		   u32_t ticks_anchor, u32_t ticks_first, u32_t ticks_periodic,
		   u32_t remainder_periodic, u16_t lazy, u16_t ticks_slot,
		   ticker_timeout_func ticker_timeout_func, void *context,
		   ticker_op_func fp_op_func, void *op_context)
{
   10110:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
	struct ticker_user_op *user_op;
	struct ticker_user *user;
	u8_t last;

	user = &instance->user[user_id];
   10114:	242c      	movs	r4, #44	; 0x2c
   10116:	4d24      	ldr	r5, [pc, #144]	; (101a8 <ticker_start+0x98>)
   10118:	fb04 5400 	mla	r4, r4, r0, r5
   1011c:	6866      	ldr	r6, [r4, #4]
   1011e:	eb06 0ec1 	add.w	lr, r6, r1, lsl #3

	last = user->last + 1;
   10122:	f89e 4003 	ldrb.w	r4, [lr, #3]
   10126:	1c65      	adds	r5, r4, #1
   10128:	b2ed      	uxtb	r5, r5
	if (last >= user->count_user_op) {
   1012a:	f816 6031 	ldrb.w	r6, [r6, r1, lsl #3]
   1012e:	42b5      	cmp	r5, r6
   10130:	d300      	bcc.n	10134 <ticker_start+0x24>
		last = 0;
   10132:	2500      	movs	r5, #0
	}

	if (last == user->first) {
   10134:	f89e 6001 	ldrb.w	r6, [lr, #1]
   10138:	42b5      	cmp	r5, r6
   1013a:	d032      	beq.n	101a2 <ticker_start+0x92>
   1013c:	469c      	mov	ip, r3
   1013e:	4607      	mov	r7, r0
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
   10140:	f8de 3004 	ldr.w	r3, [lr, #4]
   10144:	f04f 082c 	mov.w	r8, #44	; 0x2c
   10148:	fb08 f604 	mul.w	r6, r8, r4
   1014c:	199c      	adds	r4, r3, r6
	user_op->op = TICKER_USER_OP_TYPE_START;
   1014e:	2003      	movs	r0, #3
   10150:	5598      	strb	r0, [r3, r6]
	user_op->id = ticker_id;
   10152:	7062      	strb	r2, [r4, #1]
	user_op->params.start.ticks_at_start = ticks_anchor;
   10154:	f8c4 c004 	str.w	ip, [r4, #4]
	user_op->params.start.ticks_first = ticks_first;
   10158:	9b06      	ldr	r3, [sp, #24]
   1015a:	60a3      	str	r3, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
   1015c:	9b07      	ldr	r3, [sp, #28]
   1015e:	60e3      	str	r3, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
   10160:	9b08      	ldr	r3, [sp, #32]
   10162:	6123      	str	r3, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
   10164:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   10168:	82e3      	strh	r3, [r4, #22]
	user_op->params.start.lazy = lazy;
   1016a:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   1016e:	82a3      	strh	r3, [r4, #20]
	user_op->params.start.fp_timeout_func = ticker_timeout_func;
   10170:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   10172:	61a3      	str	r3, [r4, #24]
	user_op->params.start.context = context;
   10174:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   10176:	61e3      	str	r3, [r4, #28]
	user_op->status = TICKER_STATUS_BUSY;
   10178:	2602      	movs	r6, #2
   1017a:	6226      	str	r6, [r4, #32]
	user_op->fp_op_func = fp_op_func;
   1017c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1017e:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->op_context = op_context;
   10180:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   10182:	62a3      	str	r3, [r4, #40]	; 0x28

	user->last = last;
   10184:	f88e 5003 	strb.w	r5, [lr, #3]

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
   10188:	4b07      	ldr	r3, [pc, #28]	; (101a8 <ticker_start+0x98>)
   1018a:	fb08 3307 	mla	r3, r8, r7, r3
   1018e:	6a5d      	ldr	r5, [r3, #36]	; 0x24
   10190:	6a1b      	ldr	r3, [r3, #32]
   10192:	4608      	mov	r0, r1
   10194:	4798      	blx	r3
   10196:	2200      	movs	r2, #0
   10198:	4631      	mov	r1, r6
   1019a:	47a8      	blx	r5

	return user_op->status;
   1019c:	6a20      	ldr	r0, [r4, #32]
   1019e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
   101a2:	2001      	movs	r0, #1
}
   101a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   101a8:	20000ddc 	.word	0x20000ddc

000101ac <ticker_update>:

u32_t ticker_update(u8_t instance_index, u8_t user_id, u8_t ticker_id,
		    u16_t ticks_drift_plus, u16_t ticks_drift_minus,
		    u16_t ticks_slot_plus, u16_t ticks_slot_minus, u16_t lazy,
		    u8_t force, ticker_op_func fp_op_func, void *op_context)
{
   101ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
	struct ticker_user_op *user_op;
	struct ticker_user *user;
	u8_t last;

	user = &instance->user[user_id];
   101b0:	242c      	movs	r4, #44	; 0x2c
   101b2:	4d24      	ldr	r5, [pc, #144]	; (10244 <ticker_update+0x98>)
   101b4:	fb04 5400 	mla	r4, r4, r0, r5
   101b8:	6866      	ldr	r6, [r4, #4]
   101ba:	eb06 0ec1 	add.w	lr, r6, r1, lsl #3

	last = user->last + 1;
   101be:	f89e 4003 	ldrb.w	r4, [lr, #3]
   101c2:	1c65      	adds	r5, r4, #1
   101c4:	b2ed      	uxtb	r5, r5
	if (last >= user->count_user_op) {
   101c6:	f816 6031 	ldrb.w	r6, [r6, r1, lsl #3]
   101ca:	42b5      	cmp	r5, r6
   101cc:	d300      	bcc.n	101d0 <ticker_update+0x24>
		last = 0;
   101ce:	2500      	movs	r5, #0
	}

	if (last == user->first) {
   101d0:	f89e 6001 	ldrb.w	r6, [lr, #1]
   101d4:	42b5      	cmp	r5, r6
   101d6:	d031      	beq.n	1023c <ticker_update+0x90>
   101d8:	469c      	mov	ip, r3
   101da:	4607      	mov	r7, r0
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
   101dc:	f8de 3004 	ldr.w	r3, [lr, #4]
   101e0:	f04f 082c 	mov.w	r8, #44	; 0x2c
   101e4:	fb08 f604 	mul.w	r6, r8, r4
   101e8:	199c      	adds	r4, r3, r6
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
   101ea:	2004      	movs	r0, #4
   101ec:	5598      	strb	r0, [r3, r6]
	user_op->id = ticker_id;
   101ee:	7062      	strb	r2, [r4, #1]
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
   101f0:	f8a4 c004 	strh.w	ip, [r4, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
   101f4:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   101f8:	80e3      	strh	r3, [r4, #6]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
   101fa:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   101fe:	8123      	strh	r3, [r4, #8]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
   10200:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   10204:	8163      	strh	r3, [r4, #10]
	user_op->params.update.lazy = lazy;
   10206:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   1020a:	81a3      	strh	r3, [r4, #12]
	user_op->params.update.force = force;
   1020c:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   10210:	73a3      	strb	r3, [r4, #14]
	user_op->status = TICKER_STATUS_BUSY;
   10212:	2602      	movs	r6, #2
   10214:	6226      	str	r6, [r4, #32]
	user_op->fp_op_func = fp_op_func;
   10216:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   10218:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->op_context = op_context;
   1021a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1021c:	62a3      	str	r3, [r4, #40]	; 0x28

	user->last = last;
   1021e:	f88e 5003 	strb.w	r5, [lr, #3]

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
   10222:	4b08      	ldr	r3, [pc, #32]	; (10244 <ticker_update+0x98>)
   10224:	fb08 3307 	mla	r3, r8, r7, r3
   10228:	6a5d      	ldr	r5, [r3, #36]	; 0x24
   1022a:	6a1b      	ldr	r3, [r3, #32]
   1022c:	4608      	mov	r0, r1
   1022e:	4798      	blx	r3
   10230:	2200      	movs	r2, #0
   10232:	4631      	mov	r1, r6
   10234:	47a8      	blx	r5

	return user_op->status;
   10236:	6a20      	ldr	r0, [r4, #32]
   10238:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
   1023c:	2001      	movs	r0, #1
}
   1023e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10242:	bf00      	nop
   10244:	20000ddc 	.word	0x20000ddc

00010248 <ticker_stop>:

u32_t ticker_stop(u8_t instance_index, u8_t user_id, u8_t ticker_id,
		  ticker_op_func fp_op_func, void *op_context)
{
   10248:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
	struct ticker_user_op *user_op;
	struct ticker_user *user;
	u8_t last;

	user = &instance->user[user_id];
   1024c:	242c      	movs	r4, #44	; 0x2c
   1024e:	4d1b      	ldr	r5, [pc, #108]	; (102bc <ticker_stop+0x74>)
   10250:	fb04 5400 	mla	r4, r4, r0, r5
   10254:	6866      	ldr	r6, [r4, #4]
   10256:	eb06 0ec1 	add.w	lr, r6, r1, lsl #3

	last = user->last + 1;
   1025a:	f89e 5003 	ldrb.w	r5, [lr, #3]
   1025e:	1c6c      	adds	r4, r5, #1
   10260:	b2e4      	uxtb	r4, r4
	if (last >= user->count_user_op) {
   10262:	f816 6031 	ldrb.w	r6, [r6, r1, lsl #3]
   10266:	42b4      	cmp	r4, r6
   10268:	d300      	bcc.n	1026c <ticker_stop+0x24>
		last = 0;
   1026a:	2400      	movs	r4, #0
	}

	if (last == user->first) {
   1026c:	f89e 6001 	ldrb.w	r6, [lr, #1]
   10270:	42b4      	cmp	r4, r6
   10272:	d020      	beq.n	102b6 <ticker_stop+0x6e>
   10274:	4698      	mov	r8, r3
   10276:	4607      	mov	r7, r0
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
   10278:	f8de 3004 	ldr.w	r3, [lr, #4]
   1027c:	f04f 0c2c 	mov.w	ip, #44	; 0x2c
   10280:	fb0c f505 	mul.w	r5, ip, r5
   10284:	195e      	adds	r6, r3, r5
	user_op->op = TICKER_USER_OP_TYPE_STOP;
   10286:	2005      	movs	r0, #5
   10288:	5558      	strb	r0, [r3, r5]
	user_op->id = ticker_id;
   1028a:	7072      	strb	r2, [r6, #1]
	user_op->status = TICKER_STATUS_BUSY;
   1028c:	2502      	movs	r5, #2
   1028e:	6235      	str	r5, [r6, #32]
	user_op->fp_op_func = fp_op_func;
   10290:	f8c6 8024 	str.w	r8, [r6, #36]	; 0x24
	user_op->op_context = op_context;
   10294:	9b06      	ldr	r3, [sp, #24]
   10296:	62b3      	str	r3, [r6, #40]	; 0x28

	user->last = last;
   10298:	f88e 4003 	strb.w	r4, [lr, #3]

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
   1029c:	4b07      	ldr	r3, [pc, #28]	; (102bc <ticker_stop+0x74>)
   1029e:	fb0c 3307 	mla	r3, ip, r7, r3
   102a2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
   102a4:	6a1b      	ldr	r3, [r3, #32]
   102a6:	4608      	mov	r0, r1
   102a8:	4798      	blx	r3
   102aa:	2200      	movs	r2, #0
   102ac:	4629      	mov	r1, r5
   102ae:	47a0      	blx	r4

	return user_op->status;
   102b0:	6a30      	ldr	r0, [r6, #32]
   102b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
   102b6:	2001      	movs	r0, #1
}
   102b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   102bc:	20000ddc 	.word	0x20000ddc

000102c0 <ticker_next_slot_get>:

u32_t ticker_next_slot_get(u8_t instance_index, u8_t user_id, u8_t *ticker_id,
			   u32_t *ticks_current, u32_t *ticks_to_expire,
			   ticker_op_func fp_op_func, void *op_context)
{
   102c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct ticker_instance *instance = &_instance[instance_index];
	struct ticker_user_op *user_op;
	struct ticker_user *user;
	u8_t last;

	user = &instance->user[user_id];
   102c4:	242c      	movs	r4, #44	; 0x2c
   102c6:	4d1f      	ldr	r5, [pc, #124]	; (10344 <ticker_next_slot_get+0x84>)
   102c8:	fb04 5400 	mla	r4, r4, r0, r5
   102cc:	6866      	ldr	r6, [r4, #4]
   102ce:	eb06 0ec1 	add.w	lr, r6, r1, lsl #3

	last = user->last + 1;
   102d2:	f89e 5003 	ldrb.w	r5, [lr, #3]
   102d6:	1c6c      	adds	r4, r5, #1
   102d8:	b2e4      	uxtb	r4, r4
	if (last >= user->count_user_op) {
   102da:	f816 6031 	ldrb.w	r6, [r6, r1, lsl #3]
   102de:	42b4      	cmp	r4, r6
   102e0:	d300      	bcc.n	102e4 <ticker_next_slot_get+0x24>
		last = 0;
   102e2:	2400      	movs	r4, #0
	}

	if (last == user->first) {
   102e4:	f89e 6001 	ldrb.w	r6, [lr, #1]
   102e8:	42b4      	cmp	r4, r6
   102ea:	d027      	beq.n	1033c <ticker_next_slot_get+0x7c>
   102ec:	469c      	mov	ip, r3
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
   102ee:	f8de 3004 	ldr.w	r3, [lr, #4]
   102f2:	f04f 092c 	mov.w	r9, #44	; 0x2c
   102f6:	fb09 f605 	mul.w	r6, r9, r5
   102fa:	199d      	adds	r5, r3, r6
	user_op->op = TICKER_USER_OP_TYPE_SLOT_GET;
   102fc:	f04f 0802 	mov.w	r8, #2
   10300:	f803 8006 	strb.w	r8, [r3, r6]
	user_op->id = TICKER_NULL;
   10304:	23ff      	movs	r3, #255	; 0xff
   10306:	706b      	strb	r3, [r5, #1]
	user_op->params.slot_get.ticker_id = ticker_id;
   10308:	606a      	str	r2, [r5, #4]
	user_op->params.slot_get.ticks_current = ticks_current;
   1030a:	f8c5 c008 	str.w	ip, [r5, #8]
	user_op->params.slot_get.ticks_to_expire = ticks_to_expire;
   1030e:	9b08      	ldr	r3, [sp, #32]
   10310:	60eb      	str	r3, [r5, #12]
	user_op->status = TICKER_STATUS_BUSY;
   10312:	f8c5 8020 	str.w	r8, [r5, #32]
	user_op->fp_op_func = fp_op_func;
   10316:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10318:	626b      	str	r3, [r5, #36]	; 0x24
	user_op->op_context = op_context;
   1031a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1031c:	62ab      	str	r3, [r5, #40]	; 0x28

	user->last = last;
   1031e:	f88e 4003 	strb.w	r4, [lr, #3]

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
   10322:	4b08      	ldr	r3, [pc, #32]	; (10344 <ticker_next_slot_get+0x84>)
   10324:	fb09 3300 	mla	r3, r9, r0, r3
   10328:	6a5c      	ldr	r4, [r3, #36]	; 0x24
   1032a:	6a1b      	ldr	r3, [r3, #32]
   1032c:	4608      	mov	r0, r1
   1032e:	4798      	blx	r3
   10330:	2200      	movs	r2, #0
   10332:	4641      	mov	r1, r8
   10334:	47a0      	blx	r4

	return user_op->status;
   10336:	6a28      	ldr	r0, [r5, #32]
   10338:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return TICKER_STATUS_FAILURE;
   1033c:	2001      	movs	r0, #1
}
   1033e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   10342:	bf00      	nop
   10344:	20000ddc 	.word	0x20000ddc

00010348 <ticker_job_idle_get>:

u32_t ticker_job_idle_get(u8_t instance_index, u8_t user_id,
			  ticker_op_func fp_op_func, void *op_context)
{
   10348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
	struct ticker_user_op *user_op;
	struct ticker_user *user;
	u8_t last;

	user = &instance->user[user_id];
   1034c:	242c      	movs	r4, #44	; 0x2c
   1034e:	4d1b      	ldr	r5, [pc, #108]	; (103bc <ticker_job_idle_get+0x74>)
   10350:	fb04 5400 	mla	r4, r4, r0, r5
   10354:	6866      	ldr	r6, [r4, #4]
   10356:	eb06 0ec1 	add.w	lr, r6, r1, lsl #3

	last = user->last + 1;
   1035a:	f89e 5003 	ldrb.w	r5, [lr, #3]
   1035e:	1c6c      	adds	r4, r5, #1
   10360:	b2e4      	uxtb	r4, r4
	if (last >= user->count_user_op) {
   10362:	f816 6031 	ldrb.w	r6, [r6, r1, lsl #3]
   10366:	42b4      	cmp	r4, r6
   10368:	d300      	bcc.n	1036c <ticker_job_idle_get+0x24>
		last = 0;
   1036a:	2400      	movs	r4, #0
	}

	if (last == user->first) {
   1036c:	f89e 6001 	ldrb.w	r6, [lr, #1]
   10370:	42b4      	cmp	r4, r6
   10372:	d020      	beq.n	103b6 <ticker_job_idle_get+0x6e>
   10374:	4698      	mov	r8, r3
   10376:	4607      	mov	r7, r0
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
   10378:	f8de 3004 	ldr.w	r3, [lr, #4]
   1037c:	f04f 0c2c 	mov.w	ip, #44	; 0x2c
   10380:	fb0c f505 	mul.w	r5, ip, r5
   10384:	195e      	adds	r6, r3, r5
	user_op->op = TICKER_USER_OP_TYPE_IDLE_GET;
   10386:	2001      	movs	r0, #1
   10388:	5558      	strb	r0, [r3, r5]
	user_op->id = TICKER_NULL;
   1038a:	23ff      	movs	r3, #255	; 0xff
   1038c:	7073      	strb	r3, [r6, #1]
	user_op->status = TICKER_STATUS_BUSY;
   1038e:	2502      	movs	r5, #2
   10390:	6235      	str	r5, [r6, #32]
	user_op->fp_op_func = fp_op_func;
   10392:	6272      	str	r2, [r6, #36]	; 0x24
	user_op->op_context = op_context;
   10394:	f8c6 8028 	str.w	r8, [r6, #40]	; 0x28

	user->last = last;
   10398:	f88e 4003 	strb.w	r4, [lr, #3]

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
   1039c:	4b07      	ldr	r3, [pc, #28]	; (103bc <ticker_job_idle_get+0x74>)
   1039e:	fb0c 3307 	mla	r3, ip, r7, r3
   103a2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
   103a4:	6a1b      	ldr	r3, [r3, #32]
   103a6:	4608      	mov	r0, r1
   103a8:	4798      	blx	r3
   103aa:	2200      	movs	r2, #0
   103ac:	4629      	mov	r1, r5
   103ae:	47a0      	blx	r4

	return user_op->status;
   103b0:	6a30      	ldr	r0, [r6, #32]
   103b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
   103b6:	2001      	movs	r0, #1
}
   103b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   103bc:	20000ddc 	.word	0x20000ddc

000103c0 <ticker_job_sched>:

void ticker_job_sched(u8_t instance_index, u8_t user_id)
{
   103c0:	b510      	push	{r4, lr}
	struct ticker_instance *instance = &_instance[instance_index];

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
   103c2:	232c      	movs	r3, #44	; 0x2c
   103c4:	4a05      	ldr	r2, [pc, #20]	; (103dc <ticker_job_sched+0x1c>)
   103c6:	fb03 2000 	mla	r0, r3, r0, r2
   103ca:	6a44      	ldr	r4, [r0, #36]	; 0x24
   103cc:	6a03      	ldr	r3, [r0, #32]
   103ce:	4608      	mov	r0, r1
   103d0:	4798      	blx	r3
   103d2:	2200      	movs	r2, #0
   103d4:	2102      	movs	r1, #2
   103d6:	47a0      	blx	r4
   103d8:	bd10      	pop	{r4, pc}
   103da:	bf00      	nop
   103dc:	20000ddc 	.word	0x20000ddc

000103e0 <ticker_ticks_now_get>:
}

u32_t ticker_ticks_now_get(void)
{
   103e0:	b508      	push	{r3, lr}
	return cntr_cnt_get();
   103e2:	f7fe fa97 	bl	e914 <cntr_cnt_get>
}
   103e6:	bd08      	pop	{r3, pc}

000103e8 <ticker_ticks_diff_get>:

u32_t ticker_ticks_diff_get(u32_t ticks_now, u32_t ticks_old)
{
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
   103e8:	1a40      	subs	r0, r0, r1
}
   103ea:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   103ee:	4770      	bx	lr

000103f0 <ticker_worker>:
{
   103f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	instance->worker_trigger = 1;
   103f4:	2301      	movs	r3, #1
   103f6:	7743      	strb	r3, [r0, #29]
	if (instance->job_guard) {
   103f8:	f890 901c 	ldrb.w	r9, [r0, #28]
   103fc:	f1b9 0f00 	cmp.w	r9, #0
   10400:	d147      	bne.n	10492 <ticker_worker+0xa2>
	if (instance->ticker_id_head == TICKER_NULL) {
   10402:	7e03      	ldrb	r3, [r0, #24]
   10404:	2bff      	cmp	r3, #255	; 0xff
   10406:	d030      	beq.n	1046a <ticker_worker+0x7a>
   10408:	4607      	mov	r7, r0
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
   1040a:	f7fe fa83 	bl	e914 <cntr_cnt_get>
   1040e:	6979      	ldr	r1, [r7, #20]
   10410:	f7ff ffea 	bl	103e8 <ticker_ticks_diff_get>
   10414:	4605      	mov	r5, r0
	ticker_id_head = instance->ticker_id_head;
   10416:	7e3c      	ldrb	r4, [r7, #24]
	node = &instance->node[0];
   10418:	f8d7 8000 	ldr.w	r8, [r7]
	ticks_expired = 0;
   1041c:	2600      	movs	r6, #0
	while (ticker_id_head != TICKER_NULL) {
   1041e:	2cff      	cmp	r4, #255	; 0xff
   10420:	d027      	beq.n	10472 <ticker_worker+0x82>
		ticker = &node[ticker_id_head];
   10422:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
   10426:	00a3      	lsls	r3, r4, #2
   10428:	eb08 0103 	add.w	r1, r8, r3
		ticks_to_expire = ticker->ticks_to_expire;
   1042c:	688a      	ldr	r2, [r1, #8]
		if (ticks_elapsed < ticks_to_expire) {
   1042e:	4295      	cmp	r5, r2
   10430:	d31f      	bcc.n	10472 <ticker_worker+0x82>
		ticks_elapsed -= ticks_to_expire;
   10432:	1aad      	subs	r5, r5, r2
		ticks_expired += ticks_to_expire;
   10434:	4416      	add	r6, r2
		ticker_id_head = ticker->next;
   10436:	f818 4003 	ldrb.w	r4, [r8, r3]
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
   1043a:	784b      	ldrb	r3, [r1, #1]
   1043c:	788a      	ldrb	r2, [r1, #2]
   1043e:	1a9b      	subs	r3, r3, r2
   10440:	b2db      	uxtb	r3, r3
   10442:	2b01      	cmp	r3, #1
   10444:	d1eb      	bne.n	1041e <ticker_worker+0x2e>
		ticker->ack--;
   10446:	3a01      	subs	r2, #1
   10448:	708a      	strb	r2, [r1, #2]
		if (ticker->timeout_func) {
   1044a:	f8d1 a00c 	ldr.w	sl, [r1, #12]
   1044e:	f1ba 0f00 	cmp.w	sl, #0
   10452:	d0e4      	beq.n	1041e <ticker_worker+0x2e>
			ticks_at_expire = (instance->ticks_current +
   10454:	6978      	ldr	r0, [r7, #20]
   10456:	4430      	add	r0, r6
					   ticker->ticks_to_expire_minus) &
   10458:	8a8b      	ldrh	r3, [r1, #20]
					   ticks_expired -
   1045a:	1ac0      	subs	r0, r0, r3
			ticker->timeout_func(ticks_at_expire,
   1045c:	690b      	ldr	r3, [r1, #16]
   1045e:	8b4a      	ldrh	r2, [r1, #26]
   10460:	6a09      	ldr	r1, [r1, #32]
   10462:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   10466:	47d0      	blx	sl
   10468:	e7d9      	b.n	1041e <ticker_worker+0x2e>
		instance->worker_trigger = 0;
   1046a:	2300      	movs	r3, #0
   1046c:	7743      	strb	r3, [r0, #29]
		return;
   1046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
   10472:	7aba      	ldrb	r2, [r7, #10]
   10474:	7afb      	ldrb	r3, [r7, #11]
   10476:	429a      	cmp	r2, r3
   10478:	d00d      	beq.n	10496 <ticker_worker+0xa6>
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   1047a:	7afb      	ldrb	r3, [r7, #11]
   1047c:	3302      	adds	r3, #2
   1047e:	eb07 0383 	add.w	r3, r7, r3, lsl #2
   10482:	605e      	str	r6, [r3, #4]
	instance->worker_trigger = 0;
   10484:	2300      	movs	r3, #0
   10486:	777b      	strb	r3, [r7, #29]
	instance->fp_sched(CALL_ID_WORKER, CALL_ID_JOB, 1);
   10488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1048a:	2201      	movs	r2, #1
   1048c:	2102      	movs	r1, #2
   1048e:	4610      	mov	r0, r2
   10490:	4798      	blx	r3
   10492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		last = instance->ticks_elapsed_last + 1;
   10496:	3301      	adds	r3, #1
   10498:	b2db      	uxtb	r3, r3
		if (last == DOUBLE_BUFFER_SIZE) {
   1049a:	2b02      	cmp	r3, #2
   1049c:	d001      	beq.n	104a2 <ticker_worker+0xb2>
		instance->ticks_elapsed_last = last;
   1049e:	72fb      	strb	r3, [r7, #11]
   104a0:	e7eb      	b.n	1047a <ticker_worker+0x8a>
			last = 0;
   104a2:	464b      	mov	r3, r9
   104a4:	e7fb      	b.n	1049e <ticker_worker+0xae>

000104a6 <ticks_to_expire_prep>:
{
   104a6:	b570      	push	{r4, r5, r6, lr}
   104a8:	4606      	mov	r6, r0
   104aa:	4608      	mov	r0, r1
	u32_t ticks_to_expire = ticker->ticks_to_expire;
   104ac:	68b4      	ldr	r4, [r6, #8]
	u16_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
   104ae:	8ab5      	ldrh	r5, [r6, #20]
	if (((ticks_at_start - ticks_current) & BIT(23)) == 0) {
   104b0:	1a51      	subs	r1, r2, r1
   104b2:	f411 0f00 	tst.w	r1, #8388608	; 0x800000
   104b6:	d10c      	bne.n	104d2 <ticks_to_expire_prep+0x2c>
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
   104b8:	4601      	mov	r1, r0
   104ba:	4610      	mov	r0, r2
   104bc:	f7ff ff94 	bl	103e8 <ticker_ticks_diff_get>
   104c0:	4420      	add	r0, r4
	if (ticks_to_expire > ticks_to_expire_minus) {
   104c2:	42a8      	cmp	r0, r5
   104c4:	d812      	bhi.n	104ec <ticks_to_expire_prep+0x46>
		ticks_to_expire_minus -= ticks_to_expire;
   104c6:	1a28      	subs	r0, r5, r0
   104c8:	b285      	uxth	r5, r0
		ticks_to_expire = 0;
   104ca:	2000      	movs	r0, #0
	ticker->ticks_to_expire = ticks_to_expire;
   104cc:	60b0      	str	r0, [r6, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
   104ce:	82b5      	strh	r5, [r6, #20]
   104d0:	bd70      	pop	{r4, r5, r6, pc}
		delta_current_start = ticker_ticks_diff_get(ticks_current,
   104d2:	4611      	mov	r1, r2
   104d4:	f7ff ff88 	bl	103e8 <ticker_ticks_diff_get>
		if (ticks_to_expire > delta_current_start) {
   104d8:	4284      	cmp	r4, r0
   104da:	d901      	bls.n	104e0 <ticks_to_expire_prep+0x3a>
			ticks_to_expire -= delta_current_start;
   104dc:	1a20      	subs	r0, r4, r0
   104de:	e7f0      	b.n	104c2 <ticks_to_expire_prep+0x1c>
			    (delta_current_start - ticks_to_expire);
   104e0:	1b00      	subs	r0, r0, r4
			ticks_to_expire_minus +=
   104e2:	fa15 f080 	uxtah	r0, r5, r0
   104e6:	b285      	uxth	r5, r0
			ticks_to_expire = 0;
   104e8:	2000      	movs	r0, #0
   104ea:	e7ea      	b.n	104c2 <ticks_to_expire_prep+0x1c>
		ticks_to_expire -= ticks_to_expire_minus;
   104ec:	1b40      	subs	r0, r0, r5
		ticks_to_expire_minus = 0;
   104ee:	2500      	movs	r5, #0
   104f0:	e7ec      	b.n	104cc <ticks_to_expire_prep+0x26>

000104f2 <ticker_job>:
{
   104f2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   104f6:	b08d      	sub	sp, #52	; 0x34
	if (instance->worker_trigger) {
   104f8:	7f43      	ldrb	r3, [r0, #29]
   104fa:	9301      	str	r3, [sp, #4]
   104fc:	2b00      	cmp	r3, #0
   104fe:	f040 8254 	bne.w	109aa <ticker_job+0x4b8>
	instance->job_guard = 1;
   10502:	2301      	movs	r3, #1
   10504:	7703      	strb	r3, [r0, #28]
	ticks_previous = instance->ticks_current;
   10506:	6943      	ldr	r3, [r0, #20]
   10508:	930b      	str	r3, [sp, #44]	; 0x2c
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
   1050a:	7a83      	ldrb	r3, [r0, #10]
   1050c:	7ac2      	ldrb	r2, [r0, #11]
   1050e:	4293      	cmp	r3, r2
   10510:	d021      	beq.n	10556 <ticker_job+0x64>
		first = instance->ticks_elapsed_first + 1;
   10512:	3301      	adds	r3, #1
   10514:	b2db      	uxtb	r3, r3
		if (first == DOUBLE_BUFFER_SIZE) {
   10516:	2b02      	cmp	r3, #2
   10518:	d100      	bne.n	1051c <ticker_job+0x2a>
			first = 0;
   1051a:	9b01      	ldr	r3, [sp, #4]
		instance->ticks_elapsed_first = first;
   1051c:	7283      	strb	r3, [r0, #10]
		ticks_elapsed =
   1051e:	3302      	adds	r3, #2
   10520:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   10524:	685b      	ldr	r3, [r3, #4]
   10526:	9303      	str	r3, [sp, #12]
		instance->ticks_current += ticks_elapsed;
   10528:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1052a:	18d3      	adds	r3, r2, r3
		instance->ticks_current &= 0x00FFFFFF;
   1052c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   10530:	6143      	str	r3, [r0, #20]
		flag_elapsed = 1;
   10532:	2301      	movs	r3, #1
   10534:	9304      	str	r3, [sp, #16]
   10536:	9000      	str	r0, [sp, #0]
	ticker_id_old_head = instance->ticker_id_head;
   10538:	7e03      	ldrb	r3, [r0, #24]
   1053a:	9309      	str	r3, [sp, #36]	; 0x24
	node = &instance->node[0];
   1053c:	6803      	ldr	r3, [r0, #0]
   1053e:	4619      	mov	r1, r3
	users = &instance->user[0];
   10540:	6843      	ldr	r3, [r0, #4]
   10542:	9305      	str	r3, [sp, #20]
	count_user = instance->count_user;
   10544:	7a43      	ldrb	r3, [r0, #9]
	pending = 0;
   10546:	9a01      	ldr	r2, [sp, #4]
   10548:	920a      	str	r2, [sp, #40]	; 0x28
	insert_head = TICKER_NULL;
   1054a:	f04f 0bff 	mov.w	fp, #255	; 0xff
   1054e:	f8cd b01c 	str.w	fp, [sp, #28]
   10552:	468b      	mov	fp, r1
   10554:	e0cc      	b.n	106f0 <ticker_job+0x1fe>
		flag_elapsed = 0;
   10556:	9b01      	ldr	r3, [sp, #4]
   10558:	9304      	str	r3, [sp, #16]
		ticks_elapsed = 0;
   1055a:	2300      	movs	r3, #0
   1055c:	9303      	str	r3, [sp, #12]
   1055e:	e7ea      	b.n	10536 <ticker_job+0x44>
				middle = 0;
   10560:	9b01      	ldr	r3, [sp, #4]
   10562:	e01d      	b.n	105a0 <ticker_job+0xae>
			     (user_op->params.update.ticks_drift_plus == 0) &&
   10564:	6872      	ldr	r2, [r6, #4]
   10566:	bb82      	cbnz	r2, 105ca <ticker_job+0xd8>
			     (user_op->params.update.ticks_slot_plus == 0) &&
   10568:	68b2      	ldr	r2, [r6, #8]
   1056a:	bb72      	cbnz	r2, 105ca <ticker_job+0xd8>
			     (user_op->params.update.lazy == 0) &&
   1056c:	68f2      	ldr	r2, [r6, #12]
   1056e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   10572:	d12a      	bne.n	105ca <ticker_job+0xd8>
				ticker_job_op_cb(user_op,
   10574:	2101      	movs	r1, #1
   10576:	4630      	mov	r0, r6
   10578:	f7ff fc82 	bl	fe80 <ticker_job_op_cb>
		while (user->middle != user->last) {
   1057c:	f894 a002 	ldrb.w	sl, [r4, #2]
   10580:	78e3      	ldrb	r3, [r4, #3]
   10582:	459a      	cmp	sl, r3
   10584:	f000 80b3 	beq.w	106ee <ticker_job+0x1fc>
			user_op = &user_ops[user->middle];
   10588:	f04f 092c 	mov.w	r9, #44	; 0x2c
   1058c:	fb09 f90a 	mul.w	r9, r9, sl
   10590:	eb08 0609 	add.w	r6, r8, r9
			middle = user->middle + 1;
   10594:	f10a 0301 	add.w	r3, sl, #1
   10598:	b2db      	uxtb	r3, r3
			if (middle == user->count_user_op) {
   1059a:	7822      	ldrb	r2, [r4, #0]
   1059c:	4293      	cmp	r3, r2
   1059e:	d0df      	beq.n	10560 <ticker_job+0x6e>
			user->middle = middle;
   105a0:	70a3      	strb	r3, [r4, #2]
			ticker = &node[user_op->id];
   105a2:	7873      	ldrb	r3, [r6, #1]
   105a4:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   105a8:	009f      	lsls	r7, r3, #2
   105aa:	eb0b 0507 	add.w	r5, fp, r7
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
   105ae:	f818 2009 	ldrb.w	r2, [r8, r9]
   105b2:	2a03      	cmp	r2, #3
   105b4:	d9e2      	bls.n	1057c <ticker_job+0x8a>
			state = (ticker->req - ticker->ack) & 0xff;
   105b6:	786b      	ldrb	r3, [r5, #1]
   105b8:	78a9      	ldrb	r1, [r5, #2]
   105ba:	1a5b      	subs	r3, r3, r1
   105bc:	b2db      	uxtb	r3, r3
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP) ||
   105be:	2a05      	cmp	r2, #5
   105c0:	d8d8      	bhi.n	10574 <ticker_job+0x82>
   105c2:	2b00      	cmp	r3, #0
   105c4:	d0d6      	beq.n	10574 <ticker_job+0x82>
			    (state == 0) ||
   105c6:	2a04      	cmp	r2, #4
   105c8:	d0cc      	beq.n	10564 <ticker_job+0x72>
			if (state == 1) {
   105ca:	2b01      	cmp	r3, #1
   105cc:	f040 8085 	bne.w	106da <ticker_job+0x1e8>
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
   105d0:	7871      	ldrb	r1, [r6, #1]
   105d2:	9800      	ldr	r0, [sp, #0]
   105d4:	f7ff fbf6 	bl	fdc4 <ticker_dequeue>
   105d8:	60a8      	str	r0, [r5, #8]
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
   105da:	f818 3009 	ldrb.w	r3, [r8, r9]
   105de:	2b04      	cmp	r3, #4
   105e0:	d00b      	beq.n	105fa <ticker_job+0x108>
		ticker->req = ticker->ack;
   105e2:	78ab      	ldrb	r3, [r5, #2]
   105e4:	706b      	strb	r3, [r5, #1]
		if (instance->ticker_id_slot_previous == user_op->id) {
   105e6:	9b00      	ldr	r3, [sp, #0]
   105e8:	7e5a      	ldrb	r2, [r3, #25]
   105ea:	7873      	ldrb	r3, [r6, #1]
   105ec:	429a      	cmp	r2, r3
   105ee:	d06e      	beq.n	106ce <ticker_job+0x1dc>
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
   105f0:	2100      	movs	r1, #0
   105f2:	4630      	mov	r0, r6
   105f4:	f7ff fc44 	bl	fe80 <ticker_job_op_cb>
   105f8:	e7c0      	b.n	1057c <ticker_job+0x8a>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
   105fa:	9b00      	ldr	r3, [sp, #0]
   105fc:	695b      	ldr	r3, [r3, #20]
   105fe:	9306      	str	r3, [sp, #24]
	u32_t ticks_to_expire = ticker->ticks_to_expire;
   10600:	4681      	mov	r9, r0
	ticks_now = cntr_cnt_get();
   10602:	f7fe f987 	bl	e914 <cntr_cnt_get>
   10606:	9008      	str	r0, [sp, #32]
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
   10608:	9906      	ldr	r1, [sp, #24]
   1060a:	f7ff feed 	bl	103e8 <ticker_ticks_diff_get>
   1060e:	9b03      	ldr	r3, [sp, #12]
   10610:	4418      	add	r0, r3
	if (ticks_to_expire > ticks_elapsed) {
   10612:	4581      	cmp	r9, r0
   10614:	d909      	bls.n	1062a <ticker_job+0x138>
		ticks_to_expire -= ticks_elapsed;
   10616:	eba9 0900 	sub.w	r9, r9, r0
	if ((ticker->ticks_periodic != 0) &&
   1061a:	686b      	ldr	r3, [r5, #4]
   1061c:	b37b      	cbz	r3, 1067e <ticker_job+0x18c>
	    (user_op->params.update.lazy != 0)) {
   1061e:	89b3      	ldrh	r3, [r6, #12]
	if ((ticker->ticks_periodic != 0) &&
   10620:	b36b      	cbz	r3, 1067e <ticker_job+0x18c>
		user_op->params.update.lazy--;
   10622:	3b01      	subs	r3, #1
   10624:	81b3      	strh	r3, [r6, #12]
   10626:	46a2      	mov	sl, r4
   10628:	e011      	b.n	1064e <ticker_job+0x15c>
		ticker->ticks_to_expire_minus += ticks_elapsed -
   1062a:	eba0 0909 	sub.w	r9, r0, r9
   1062e:	8aab      	ldrh	r3, [r5, #20]
   10630:	fa13 f389 	uxtah	r3, r3, r9
   10634:	82ab      	strh	r3, [r5, #20]
		ticks_to_expire = 0;
   10636:	f04f 0900 	mov.w	r9, #0
   1063a:	e7ee      	b.n	1061a <ticker_job+0x128>
					   ticker_remainder_dec(ticker);
   1063c:	4628      	mov	r0, r5
   1063e:	f7ff fc07 	bl	fe50 <ticker_remainder_dec>
			ticks_to_expire -= ticker->ticks_periodic +
   10642:	4420      	add	r0, r4
   10644:	eba9 0900 	sub.w	r9, r9, r0
			ticker->lazy_current--;
   10648:	8b6b      	ldrh	r3, [r5, #26]
   1064a:	3b01      	subs	r3, #1
   1064c:	836b      	strh	r3, [r5, #26]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   1064e:	686c      	ldr	r4, [r5, #4]
   10650:	454c      	cmp	r4, r9
   10652:	d237      	bcs.n	106c4 <ticker_job+0x1d2>
		       (ticker->lazy_current > user_op->params.update.lazy)) {
   10654:	8b6a      	ldrh	r2, [r5, #26]
   10656:	89b3      	ldrh	r3, [r6, #12]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   10658:	429a      	cmp	r2, r3
   1065a:	d8ef      	bhi.n	1063c <ticker_job+0x14a>
   1065c:	4654      	mov	r4, sl
   1065e:	e009      	b.n	10674 <ticker_job+0x182>
			ticks_to_expire += ticker->ticks_periodic +
   10660:	f8d5 a004 	ldr.w	sl, [r5, #4]
					   ticker_remainder_inc(ticker);
   10664:	4628      	mov	r0, r5
   10666:	f7ff fbdd 	bl	fe24 <ticker_remainder_inc>
			ticks_to_expire += ticker->ticks_periodic +
   1066a:	4450      	add	r0, sl
   1066c:	4481      	add	r9, r0
			ticker->lazy_current++;
   1066e:	8b6b      	ldrh	r3, [r5, #26]
   10670:	3301      	adds	r3, #1
   10672:	836b      	strh	r3, [r5, #26]
		while (ticker->lazy_current < user_op->params.update.lazy) {
   10674:	8b6a      	ldrh	r2, [r5, #26]
   10676:	89b3      	ldrh	r3, [r6, #12]
   10678:	429a      	cmp	r2, r3
   1067a:	d3f1      	bcc.n	10660 <ticker_job+0x16e>
		ticker->lazy_periodic = user_op->params.update.lazy;
   1067c:	832b      	strh	r3, [r5, #24]
				  user_op->params.update.ticks_drift_plus;
   1067e:	88b3      	ldrh	r3, [r6, #4]
	ticker->ticks_to_expire = ticks_to_expire +
   10680:	444b      	add	r3, r9
   10682:	60ab      	str	r3, [r5, #8]
				user_op->params.update.ticks_drift_minus;
   10684:	88f3      	ldrh	r3, [r6, #6]
	ticker->ticks_to_expire_minus +=
   10686:	8aaa      	ldrh	r2, [r5, #20]
   10688:	4413      	add	r3, r2
   1068a:	82ab      	strh	r3, [r5, #20]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
   1068c:	9a08      	ldr	r2, [sp, #32]
   1068e:	9906      	ldr	r1, [sp, #24]
   10690:	4628      	mov	r0, r5
   10692:	f7ff ff08 	bl	104a6 <ticks_to_expire_prep>
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
   10696:	8933      	ldrh	r3, [r6, #8]
   10698:	8aea      	ldrh	r2, [r5, #22]
   1069a:	4413      	add	r3, r2
   1069c:	b29b      	uxth	r3, r3
   1069e:	82eb      	strh	r3, [r5, #22]
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
   106a0:	8972      	ldrh	r2, [r6, #10]
   106a2:	4293      	cmp	r3, r2
   106a4:	d910      	bls.n	106c8 <ticker_job+0x1d6>
		ticker->ticks_slot -= user_op->params.update.ticks_slot_minus;
   106a6:	1a9b      	subs	r3, r3, r2
   106a8:	82eb      	strh	r3, [r5, #22]
	if (user_op->params.update.force != 0) {
   106aa:	7bb3      	ldrb	r3, [r6, #14]
   106ac:	b103      	cbz	r3, 106b0 <ticker_job+0x1be>
		ticker->force = user_op->params.update.force;
   106ae:	70eb      	strb	r3, [r5, #3]
	ticker->next = *insert_head;
   106b0:	f89d 301c 	ldrb.w	r3, [sp, #28]
   106b4:	f80b 3007 	strb.w	r3, [fp, r7]
	*insert_head = user_op->id;
   106b8:	7873      	ldrb	r3, [r6, #1]
   106ba:	9307      	str	r3, [sp, #28]
		ticker->req++;
   106bc:	786b      	ldrb	r3, [r5, #1]
   106be:	3301      	adds	r3, #1
   106c0:	706b      	strb	r3, [r5, #1]
   106c2:	e795      	b.n	105f0 <ticker_job+0xfe>
   106c4:	4654      	mov	r4, sl
   106c6:	e7d5      	b.n	10674 <ticker_job+0x182>
		ticker->ticks_slot = 0;
   106c8:	2300      	movs	r3, #0
   106ca:	82eb      	strh	r3, [r5, #22]
   106cc:	e7ed      	b.n	106aa <ticker_job+0x1b8>
			instance->ticker_id_slot_previous = TICKER_NULL;
   106ce:	23ff      	movs	r3, #255	; 0xff
   106d0:	9900      	ldr	r1, [sp, #0]
   106d2:	764b      	strb	r3, [r1, #25]
			instance->ticks_slot_previous = 0;
   106d4:	2300      	movs	r3, #0
   106d6:	834b      	strh	r3, [r1, #26]
   106d8:	e78a      	b.n	105f0 <ticker_job+0xfe>
				instance->fp_sched(CALL_ID_JOB, CALL_ID_JOB, 1);
   106da:	9b00      	ldr	r3, [sp, #0]
   106dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   106de:	2201      	movs	r2, #1
   106e0:	2102      	movs	r1, #2
   106e2:	4608      	mov	r0, r1
   106e4:	4798      	blx	r3
				user->middle = prev;
   106e6:	f884 a002 	strb.w	sl, [r4, #2]
				pending = 1;
   106ea:	2301      	movs	r3, #1
   106ec:	930a      	str	r3, [sp, #40]	; 0x28
	insert_head = TICKER_NULL;
   106ee:	9b02      	ldr	r3, [sp, #8]
	while (count_user--) {
   106f0:	1e5a      	subs	r2, r3, #1
   106f2:	b2d2      	uxtb	r2, r2
   106f4:	9202      	str	r2, [sp, #8]
   106f6:	b133      	cbz	r3, 10706 <ticker_job+0x214>
		user = &users[count_user];
   106f8:	9b05      	ldr	r3, [sp, #20]
   106fa:	9a02      	ldr	r2, [sp, #8]
   106fc:	eb03 04c2 	add.w	r4, r3, r2, lsl #3
		user_ops = &user->user_op[0];
   10700:	f8d4 8004 	ldr.w	r8, [r4, #4]
   10704:	e73a      	b.n	1057c <ticker_job+0x8a>
   10706:	9306      	str	r3, [sp, #24]
   10708:	f8dd b01c 	ldr.w	fp, [sp, #28]
	if (instance->ticker_id_head != ticker_id_old_head) {
   1070c:	9b00      	ldr	r3, [sp, #0]
   1070e:	7e1b      	ldrb	r3, [r3, #24]
   10710:	9a09      	ldr	r2, [sp, #36]	; 0x24
   10712:	429a      	cmp	r2, r3
   10714:	d00a      	beq.n	1072c <ticker_job+0x23a>
		flag_compare_update = 1;
   10716:	2301      	movs	r3, #1
   10718:	9308      	str	r3, [sp, #32]
	if (flag_elapsed) {
   1071a:	9b04      	ldr	r3, [sp, #16]
   1071c:	b94b      	cbnz	r3, 10732 <ticker_job+0x240>
	node = &instance->node[0];
   1071e:	9a00      	ldr	r2, [sp, #0]
   10720:	6813      	ldr	r3, [r2, #0]
   10722:	9302      	str	r3, [sp, #8]
	users = &instance->user[0];
   10724:	6853      	ldr	r3, [r2, #4]
   10726:	930b      	str	r3, [sp, #44]	; 0x2c
	count_user = instance->count_user;
   10728:	7a53      	ldrb	r3, [r2, #9]
   1072a:	e117      	b.n	1095c <ticker_job+0x46a>
	flag_compare_update = 0;
   1072c:	9b06      	ldr	r3, [sp, #24]
   1072e:	9308      	str	r3, [sp, #32]
   10730:	e7f3      	b.n	1071a <ticker_job+0x228>
	node = &instance->node[0];
   10732:	9e00      	ldr	r6, [sp, #0]
   10734:	f8d6 9000 	ldr.w	r9, [r6]
	ticks_expired = 0;
   10738:	f04f 0a00 	mov.w	sl, #0
   1073c:	f8cd b004 	str.w	fp, [sp, #4]
   10740:	e02f      	b.n	107a2 <ticker_job+0x2b0>
   10742:	f8dd b004 	ldr.w	fp, [sp, #4]
			ticker->ticks_to_expire -= ticks_elapsed;
   10746:	1a9b      	subs	r3, r3, r2
   10748:	60ab      	str	r3, [r5, #8]
		if (instance->ticker_id_head != ticker_id_old_head) {
   1074a:	9b00      	ldr	r3, [sp, #0]
   1074c:	7e1b      	ldrb	r3, [r3, #24]
   1074e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   10750:	429a      	cmp	r2, r3
   10752:	d0e4      	beq.n	1071e <ticker_job+0x22c>
			flag_compare_update = 1;
   10754:	9b04      	ldr	r3, [sp, #16]
   10756:	9308      	str	r3, [sp, #32]
   10758:	e7e1      	b.n	1071e <ticker_job+0x22c>
			instance->ticker_id_slot_previous = TICKER_NULL;
   1075a:	23ff      	movs	r3, #255	; 0xff
   1075c:	7673      	strb	r3, [r6, #25]
			instance->ticks_slot_previous = 0;
   1075e:	2300      	movs	r3, #0
   10760:	8373      	strh	r3, [r6, #26]
   10762:	e036      	b.n	107d2 <ticker_job+0x2e0>
				ticks_to_expire += ticker->ticks_periodic;
   10764:	686c      	ldr	r4, [r5, #4]
   10766:	4404      	add	r4, r0
				ticks_to_expire += ticker_remainder_inc(ticker);
   10768:	4628      	mov	r0, r5
   1076a:	f7ff fb5b 	bl	fe24 <ticker_remainder_inc>
   1076e:	4420      	add	r0, r4
			while (count--) {
   10770:	463b      	mov	r3, r7
   10772:	1e5f      	subs	r7, r3, #1
   10774:	2b00      	cmp	r3, #0
   10776:	d1f5      	bne.n	10764 <ticker_job+0x272>
			ticker->ticks_to_expire = ticks_to_expire;
   10778:	60a8      	str	r0, [r5, #8]
			ticks_to_expire_prep(ticker, instance->ticks_current,
   1077a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1077c:	eb03 020a 	add.w	r2, r3, sl
   10780:	6971      	ldr	r1, [r6, #20]
   10782:	4628      	mov	r0, r5
   10784:	f7ff fe8f 	bl	104a6 <ticks_to_expire_prep>
			ticker->lazy_current = ticker->lazy_periodic;
   10788:	8b2b      	ldrh	r3, [r5, #24]
   1078a:	836b      	strh	r3, [r5, #26]
			ticker->force = 0;
   1078c:	2300      	movs	r3, #0
   1078e:	70eb      	strb	r3, [r5, #3]
			ticker->next = *insert_head;
   10790:	f89d 3004 	ldrb.w	r3, [sp, #4]
   10794:	f809 300b 	strb.w	r3, [r9, fp]
			ticker->req++;
   10798:	786b      	ldrb	r3, [r5, #1]
   1079a:	3301      	adds	r3, #1
   1079c:	706b      	strb	r3, [r5, #1]
			*insert_head = id_expired;
   1079e:	f8cd 8004 	str.w	r8, [sp, #4]
	while (instance->ticker_id_head != TICKER_NULL) {
   107a2:	f896 8018 	ldrb.w	r8, [r6, #24]
   107a6:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   107aa:	d026      	beq.n	107fa <ticker_job+0x308>
		ticker = &node[id_expired];
   107ac:	eb08 03c8 	add.w	r3, r8, r8, lsl #3
   107b0:	ea4f 0b83 	mov.w	fp, r3, lsl #2
   107b4:	eb09 050b 	add.w	r5, r9, fp
		ticks_to_expire = ticker->ticks_to_expire;
   107b8:	68ab      	ldr	r3, [r5, #8]
		if (ticks_elapsed < ticks_to_expire) {
   107ba:	9a03      	ldr	r2, [sp, #12]
   107bc:	4293      	cmp	r3, r2
   107be:	d8c0      	bhi.n	10742 <ticker_job+0x250>
		ticks_elapsed -= ticks_to_expire;
   107c0:	9a03      	ldr	r2, [sp, #12]
   107c2:	1ad2      	subs	r2, r2, r3
   107c4:	9203      	str	r2, [sp, #12]
		ticks_expired += ticks_to_expire;
   107c6:	449a      	add	sl, r3
		if (instance->ticks_slot_previous > ticks_to_expire) {
   107c8:	8b72      	ldrh	r2, [r6, #26]
   107ca:	4293      	cmp	r3, r2
   107cc:	d2c5      	bcs.n	1075a <ticker_job+0x268>
			instance->ticks_slot_previous -= ticks_to_expire;
   107ce:	1ad3      	subs	r3, r2, r3
   107d0:	8373      	strh	r3, [r6, #26]
		if (ticker->ticks_slot != 0) {
   107d2:	8aeb      	ldrh	r3, [r5, #22]
   107d4:	b11b      	cbz	r3, 107de <ticker_job+0x2ec>
			instance->ticker_id_slot_previous = id_expired;
   107d6:	f886 8019 	strb.w	r8, [r6, #25]
			instance->ticks_slot_previous = ticker->ticks_slot;
   107da:	8aeb      	ldrh	r3, [r5, #22]
   107dc:	8373      	strh	r3, [r6, #26]
		ticker->ticks_to_expire = 0;
   107de:	2300      	movs	r3, #0
   107e0:	60ab      	str	r3, [r5, #8]
		instance->ticker_id_head = ticker->next;
   107e2:	f819 300b 	ldrb.w	r3, [r9, fp]
   107e6:	7633      	strb	r3, [r6, #24]
		if (ticker->ticks_periodic != 0) {
   107e8:	686b      	ldr	r3, [r5, #4]
   107ea:	b11b      	cbz	r3, 107f4 <ticker_job+0x302>
			count = 1 + ticker->lazy_periodic;
   107ec:	8b2b      	ldrh	r3, [r5, #24]
   107ee:	3301      	adds	r3, #1
			ticks_to_expire = 0;
   107f0:	2000      	movs	r0, #0
   107f2:	e7be      	b.n	10772 <ticker_job+0x280>
			ticker->req = ticker->ack;
   107f4:	78ab      	ldrb	r3, [r5, #2]
   107f6:	706b      	strb	r3, [r5, #1]
   107f8:	e7d3      	b.n	107a2 <ticker_job+0x2b0>
   107fa:	f8dd b004 	ldr.w	fp, [sp, #4]
   107fe:	e7a4      	b.n	1074a <ticker_job+0x258>
				user_op = &user_ops[user_ops_first];
   10800:	232c      	movs	r3, #44	; 0x2c
   10802:	9a03      	ldr	r2, [sp, #12]
   10804:	fb03 f302 	mul.w	r3, r3, r2
   10808:	9905      	ldr	r1, [sp, #20]
   1080a:	4419      	add	r1, r3
   1080c:	9101      	str	r1, [sp, #4]
				first = user_ops_first + 1;
   1080e:	3201      	adds	r2, #1
   10810:	b2d2      	uxtb	r2, r2
   10812:	4611      	mov	r1, r2
   10814:	9203      	str	r2, [sp, #12]
				if (first == user->count_user_op) {
   10816:	9a04      	ldr	r2, [sp, #16]
   10818:	7812      	ldrb	r2, [r2, #0]
   1081a:	4291      	cmp	r1, r2
   1081c:	d013      	beq.n	10846 <ticker_job+0x354>
				id_insert = user_op->id;
   1081e:	9a01      	ldr	r2, [sp, #4]
   10820:	7857      	ldrb	r7, [r2, #1]
				ticker = &node[id_insert];
   10822:	eb07 02c7 	add.w	r2, r7, r7, lsl #3
   10826:	0094      	lsls	r4, r2, #2
   10828:	9a02      	ldr	r2, [sp, #8]
   1082a:	4414      	add	r4, r2
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
   1082c:	9a05      	ldr	r2, [sp, #20]
   1082e:	5cd3      	ldrb	r3, [r2, r3]
   10830:	2b03      	cmp	r3, #3
   10832:	d16b      	bne.n	1090c <ticker_job+0x41a>
				if (((ticker->req - ticker->ack) & 0xff) != 0) {
   10834:	7862      	ldrb	r2, [r4, #1]
   10836:	78a3      	ldrb	r3, [r4, #2]
   10838:	429a      	cmp	r2, r3
   1083a:	d007      	beq.n	1084c <ticker_job+0x35a>
					ticker_job_op_cb(user_op,
   1083c:	2101      	movs	r1, #1
   1083e:	9801      	ldr	r0, [sp, #4]
   10840:	f7ff fb1e 	bl	fe80 <ticker_job_op_cb>
   10844:	e062      	b.n	1090c <ticker_job+0x41a>
					first = 0;
   10846:	9a06      	ldr	r2, [sp, #24]
   10848:	9203      	str	r2, [sp, #12]
   1084a:	e7e8      	b.n	1081e <ticker_job+0x32c>
				ticker_job_op_start(ticker, user_op,
   1084c:	9b00      	ldr	r3, [sp, #0]
   1084e:	6959      	ldr	r1, [r3, #20]
	ticker->ticks_periodic = start->ticks_periodic;
   10850:	9801      	ldr	r0, [sp, #4]
   10852:	68c3      	ldr	r3, [r0, #12]
   10854:	6063      	str	r3, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
   10856:	6903      	ldr	r3, [r0, #16]
   10858:	61e3      	str	r3, [r4, #28]
	ticker->lazy_periodic = start->lazy;
   1085a:	8a83      	ldrh	r3, [r0, #20]
   1085c:	8323      	strh	r3, [r4, #24]
	ticker->ticks_slot = start->ticks_slot;
   1085e:	8ac3      	ldrh	r3, [r0, #22]
   10860:	82e3      	strh	r3, [r4, #22]
	ticker->timeout_func = start->fp_timeout_func;
   10862:	6983      	ldr	r3, [r0, #24]
   10864:	60e3      	str	r3, [r4, #12]
	ticker->context = start->context;
   10866:	69c3      	ldr	r3, [r0, #28]
   10868:	6123      	str	r3, [r4, #16]
	ticker->ticks_to_expire = start->ticks_first;
   1086a:	6883      	ldr	r3, [r0, #8]
   1086c:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus = 0;
   1086e:	2500      	movs	r5, #0
   10870:	82a5      	strh	r5, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
   10872:	6842      	ldr	r2, [r0, #4]
   10874:	4620      	mov	r0, r4
   10876:	f7ff fe16 	bl	104a6 <ticks_to_expire_prep>
	ticker->remainder_current = 0;
   1087a:	6225      	str	r5, [r4, #32]
	ticker->lazy_current = 0;
   1087c:	8365      	strh	r5, [r4, #26]
	ticker->force = 1;
   1087e:	2301      	movs	r3, #1
   10880:	70e3      	strb	r3, [r4, #3]
   10882:	e054      	b.n	1092e <ticker_job+0x43c>
		skip = 0;
   10884:	f04f 0a00 	mov.w	sl, #0
   10888:	e00e      	b.n	108a8 <ticker_job+0x3b6>
				skip_collide = 0;
   1088a:	2300      	movs	r3, #0
   1088c:	e021      	b.n	108d2 <ticker_job+0x3e0>
		if (ticker->ticks_periodic != 0) {
   1088e:	6865      	ldr	r5, [r4, #4]
   10890:	2d00      	cmp	r5, #0
   10892:	d05b      	beq.n	1094c <ticker_job+0x45a>
						   ticker_remainder_inc(ticker);
   10894:	4620      	mov	r0, r4
   10896:	f7ff fac5 	bl	fe24 <ticker_remainder_inc>
			ticker->ticks_to_expire += ticker->ticks_periodic +
   1089a:	4428      	add	r0, r5
   1089c:	68a5      	ldr	r5, [r4, #8]
   1089e:	4405      	add	r5, r0
   108a0:	60a5      	str	r5, [r4, #8]
			ticker->lazy_current++;
   108a2:	8b63      	ldrh	r3, [r4, #26]
   108a4:	3301      	adds	r3, #1
   108a6:	8363      	strh	r3, [r4, #26]
	while (id_insert !=
   108a8:	4639      	mov	r1, r7
   108aa:	9800      	ldr	r0, [sp, #0]
   108ac:	f7ff fa2a 	bl	fd04 <ticker_enqueue>
   108b0:	4605      	mov	r5, r0
   108b2:	4287      	cmp	r7, r0
   108b4:	d021      	beq.n	108fa <ticker_job+0x408>
		if (id_collide != TICKER_NULL) {
   108b6:	2dff      	cmp	r5, #255	; 0xff
   108b8:	d0e9      	beq.n	1088e <ticker_job+0x39c>
			struct ticker_node *ticker_collide = &node[id_collide];
   108ba:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
   108be:	ea4f 0883 	mov.w	r8, r3, lsl #2
   108c2:	eb09 0608 	add.w	r6, r9, r8
			if (ticker_collide->lazy_current >
   108c6:	8b73      	ldrh	r3, [r6, #26]
			    ticker_collide->lazy_periodic) {
   108c8:	8b32      	ldrh	r2, [r6, #24]
			if (ticker_collide->lazy_current >
   108ca:	4293      	cmp	r3, r2
   108cc:	d9dd      	bls.n	1088a <ticker_job+0x398>
				skip_collide = ticker_collide->lazy_current -
   108ce:	1a9b      	subs	r3, r3, r2
   108d0:	b29b      	uxth	r3, r3
			if (ticker_collide->ticks_periodic &&
   108d2:	6872      	ldr	r2, [r6, #4]
   108d4:	2a00      	cmp	r2, #0
   108d6:	d0da      	beq.n	1088e <ticker_job+0x39c>
   108d8:	4553      	cmp	r3, sl
   108da:	d8d8      	bhi.n	1088e <ticker_job+0x39c>
			    ticker_collide->force < ticker->force) {
   108dc:	78f2      	ldrb	r2, [r6, #3]
   108de:	78e3      	ldrb	r3, [r4, #3]
			    skip_collide <= skip &&
   108e0:	429a      	cmp	r2, r3
   108e2:	d2d4      	bcs.n	1088e <ticker_job+0x39c>
					ticker_dequeue(instance, id_collide);
   108e4:	4629      	mov	r1, r5
   108e6:	9800      	ldr	r0, [sp, #0]
   108e8:	f7ff fa6c 	bl	fdc4 <ticker_dequeue>
				ticker_collide->ticks_to_expire =
   108ec:	60b0      	str	r0, [r6, #8]
				ticker_collide->req = ticker_collide->ack;
   108ee:	78b3      	ldrb	r3, [r6, #2]
   108f0:	7073      	strb	r3, [r6, #1]
				ticker_collide->next = *insert_head;
   108f2:	f809 b008 	strb.w	fp, [r9, r8]
				*insert_head = id_collide;
   108f6:	46ab      	mov	fp, r5
   108f8:	e7d6      	b.n	108a8 <ticker_job+0x3b6>
	ticker->req = ticker->ack + 1;
   108fa:	78a3      	ldrb	r3, [r4, #2]
   108fc:	3301      	adds	r3, #1
   108fe:	7063      	strb	r3, [r4, #1]
	return TICKER_STATUS_SUCCESS;
   10900:	2100      	movs	r1, #0
			if (user_op) {
   10902:	9b01      	ldr	r3, [sp, #4]
   10904:	b113      	cbz	r3, 1090c <ticker_job+0x41a>
				ticker_job_op_cb(user_op, status);
   10906:	4618      	mov	r0, r3
   10908:	f7ff faba 	bl	fe80 <ticker_job_op_cb>
		while ((insert_head != TICKER_NULL) ||
   1090c:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
   10910:	d01e      	beq.n	10950 <ticker_job+0x45e>
			if (insert_head != TICKER_NULL) {
   10912:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
   10916:	f43f af73 	beq.w	10800 <ticker_job+0x30e>
				ticker = &node[id_insert];
   1091a:	eb0b 02cb 	add.w	r2, fp, fp, lsl #3
   1091e:	0093      	lsls	r3, r2, #2
   10920:	9a02      	ldr	r2, [sp, #8]
   10922:	18d4      	adds	r4, r2, r3
				id_insert = insert_head;
   10924:	465f      	mov	r7, fp
				insert_head = ticker->next;
   10926:	f812 b003 	ldrb.w	fp, [r2, r3]
				user_op = NULL;
   1092a:	2300      	movs	r3, #0
   1092c:	9301      	str	r3, [sp, #4]
	struct ticker_node *node = &instance->node[0];
   1092e:	9b00      	ldr	r3, [sp, #0]
   10930:	f8d3 9000 	ldr.w	r9, [r3]
	ticker->next = TICKER_NULL;
   10934:	23ff      	movs	r3, #255	; 0xff
   10936:	7023      	strb	r3, [r4, #0]
	if (ticker->lazy_current > ticker->lazy_periodic) {
   10938:	f8b4 a01a 	ldrh.w	sl, [r4, #26]
   1093c:	8b23      	ldrh	r3, [r4, #24]
   1093e:	459a      	cmp	sl, r3
   10940:	d9a0      	bls.n	10884 <ticker_job+0x392>
		skip = ticker->lazy_current -
   10942:	ebaa 0a03 	sub.w	sl, sl, r3
   10946:	fa1f fa8a 	uxth.w	sl, sl
   1094a:	e7ad      	b.n	108a8 <ticker_job+0x3b6>
			return TICKER_STATUS_FAILURE;
   1094c:	2101      	movs	r1, #1
   1094e:	e7d8      	b.n	10902 <ticker_job+0x410>
		       (user_ops_first != user->middle)) {
   10950:	9b04      	ldr	r3, [sp, #16]
   10952:	789b      	ldrb	r3, [r3, #2]
		while ((insert_head != TICKER_NULL) ||
   10954:	9a03      	ldr	r2, [sp, #12]
   10956:	429a      	cmp	r2, r3
   10958:	d1db      	bne.n	10912 <ticker_job+0x420>
	while (count_user--) {
   1095a:	9b07      	ldr	r3, [sp, #28]
   1095c:	1e5a      	subs	r2, r3, #1
   1095e:	b2d2      	uxtb	r2, r2
   10960:	9207      	str	r2, [sp, #28]
   10962:	b153      	cbz	r3, 1097a <ticker_job+0x488>
		user = &users[count_user];
   10964:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   10966:	9a07      	ldr	r2, [sp, #28]
   10968:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1096c:	461a      	mov	r2, r3
   1096e:	9304      	str	r3, [sp, #16]
		user_ops = (void *)&user->user_op[0];
   10970:	685b      	ldr	r3, [r3, #4]
   10972:	9305      	str	r3, [sp, #20]
		user_ops_first = user->first;
   10974:	7853      	ldrb	r3, [r2, #1]
   10976:	9303      	str	r3, [sp, #12]
   10978:	e7c8      	b.n	1090c <ticker_job+0x41a>
	if (instance->ticker_id_head != ticker_id_old_head) {
   1097a:	9b00      	ldr	r3, [sp, #0]
   1097c:	7e1b      	ldrb	r3, [r3, #24]
   1097e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   10980:	429a      	cmp	r2, r3
   10982:	d001      	beq.n	10988 <ticker_job+0x496>
		flag_compare_update = 1;
   10984:	2301      	movs	r3, #1
   10986:	9308      	str	r3, [sp, #32]
	if (!pending) {
   10988:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1098a:	b18b      	cbz	r3, 109b0 <ticker_job+0x4be>
	instance->job_guard = 0;
   1098c:	2300      	movs	r3, #0
   1098e:	9a00      	ldr	r2, [sp, #0]
   10990:	7713      	strb	r3, [r2, #28]
	if (flag_compare_update) {
   10992:	9b08      	ldr	r3, [sp, #32]
   10994:	2b00      	cmp	r3, #0
   10996:	d13f      	bne.n	10a18 <ticker_job+0x526>
	if (instance->worker_trigger) {
   10998:	9b00      	ldr	r3, [sp, #0]
   1099a:	7f5b      	ldrb	r3, [r3, #29]
   1099c:	b12b      	cbz	r3, 109aa <ticker_job+0x4b8>
		instance->fp_sched(CALL_ID_JOB, CALL_ID_WORKER, 1);
   1099e:	9b00      	ldr	r3, [sp, #0]
   109a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   109a2:	2201      	movs	r2, #1
   109a4:	4611      	mov	r1, r2
   109a6:	2002      	movs	r0, #2
   109a8:	4798      	blx	r3
}
   109aa:	b00d      	add	sp, #52	; 0x34
   109ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	users = &instance->user[0];
   109b0:	9a00      	ldr	r2, [sp, #0]
   109b2:	f8d2 8004 	ldr.w	r8, [r2, #4]
	count_user = instance->count_user;
   109b6:	7a53      	ldrb	r3, [r2, #9]
   109b8:	e026      	b.n	10a08 <ticker_job+0x516>
		uop->status = TICKER_STATUS_SUCCESS;
   109ba:	2300      	movs	r3, #0
   109bc:	623b      	str	r3, [r7, #32]
		fp_op_func = uop->fp_op_func;
   109be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	if (fp_op_func) {
   109c0:	b113      	cbz	r3, 109c8 <ticker_job+0x4d6>
		fp_op_func(uop->status, uop->op_context);
   109c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   109c4:	6a38      	ldr	r0, [r7, #32]
   109c6:	4798      	blx	r3
			first = user->first + 1;
   109c8:	7863      	ldrb	r3, [r4, #1]
   109ca:	3301      	adds	r3, #1
   109cc:	b2db      	uxtb	r3, r3
			if (first == user->count_user_op) {
   109ce:	7822      	ldrb	r2, [r4, #0]
   109d0:	4293      	cmp	r3, r2
   109d2:	d016      	beq.n	10a02 <ticker_job+0x510>
			user->first = first;
   109d4:	7063      	strb	r3, [r4, #1]
		while (user->first != user->last) {
   109d6:	7862      	ldrb	r2, [r4, #1]
   109d8:	78e3      	ldrb	r3, [r4, #3]
   109da:	429a      	cmp	r2, r3
   109dc:	d013      	beq.n	10a06 <ticker_job+0x514>
			ticker_job_op_inquire(instance, &user_op[user->first]);
   109de:	232c      	movs	r3, #44	; 0x2c
   109e0:	fb03 f302 	mul.w	r3, r3, r2
   109e4:	18ef      	adds	r7, r5, r3
	switch (uop->op) {
   109e6:	5ceb      	ldrb	r3, [r5, r3]
   109e8:	2b01      	cmp	r3, #1
   109ea:	d0e6      	beq.n	109ba <ticker_job+0x4c8>
   109ec:	2b02      	cmp	r3, #2
   109ee:	d106      	bne.n	109fe <ticker_job+0x50c>
		ticker_by_next_slot_get(instance,
   109f0:	68fb      	ldr	r3, [r7, #12]
   109f2:	68ba      	ldr	r2, [r7, #8]
   109f4:	6879      	ldr	r1, [r7, #4]
   109f6:	9800      	ldr	r0, [sp, #0]
   109f8:	f7ff f955 	bl	fca6 <ticker_by_next_slot_get>
   109fc:	e7dd      	b.n	109ba <ticker_job+0x4c8>
	fp_op_func = NULL;
   109fe:	2300      	movs	r3, #0
   10a00:	e7de      	b.n	109c0 <ticker_job+0x4ce>
				first = 0;
   10a02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10a04:	e7e6      	b.n	109d4 <ticker_job+0x4e2>
	while (count_user--) {
   10a06:	4633      	mov	r3, r6
   10a08:	1e5e      	subs	r6, r3, #1
   10a0a:	b2f6      	uxtb	r6, r6
   10a0c:	2b00      	cmp	r3, #0
   10a0e:	d0bd      	beq.n	1098c <ticker_job+0x49a>
		user = &users[count_user];
   10a10:	eb08 04c6 	add.w	r4, r8, r6, lsl #3
		user_op = &user->user_op[0];
   10a14:	6865      	ldr	r5, [r4, #4]
   10a16:	e7de      	b.n	109d6 <ticker_job+0x4e4>
	if (instance->ticker_id_head == TICKER_NULL) {
   10a18:	7e13      	ldrb	r3, [r2, #24]
   10a1a:	2bff      	cmp	r3, #255	; 0xff
   10a1c:	d02f      	beq.n	10a7e <ticker_job+0x58c>
	if (ticker_id_old_head == TICKER_NULL) {
   10a1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10a20:	2bff      	cmp	r3, #255	; 0xff
   10a22:	d034      	beq.n	10a8e <ticker_job+0x59c>
	ticker = &instance->node[instance->ticker_id_head];
   10a24:	9800      	ldr	r0, [sp, #0]
   10a26:	6802      	ldr	r2, [r0, #0]
   10a28:	7e03      	ldrb	r3, [r0, #24]
   10a2a:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   10a2e:	0099      	lsls	r1, r3, #2
   10a30:	440a      	add	r2, r1
	ticks_to_expire = ticker->ticks_to_expire;
   10a32:	6897      	ldr	r7, [r2, #8]
	i = 10;
   10a34:	250a      	movs	r5, #10
   10a36:	4680      	mov	r8, r0
		LL_ASSERT(i);
   10a38:	b39d      	cbz	r5, 10aa2 <ticker_job+0x5b0>
		i--;
   10a3a:	3d01      	subs	r5, #1
		ctr = cntr_cnt_get();
   10a3c:	f7fd ff6a 	bl	e914 <cntr_cnt_get>
   10a40:	4606      	mov	r6, r0
		cc = instance->ticks_current;
   10a42:	f8d8 4014 	ldr.w	r4, [r8, #20]
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
   10a46:	4621      	mov	r1, r4
   10a48:	f7ff fcce 	bl	103e8 <ticker_ticks_diff_get>
   10a4c:	3003      	adds	r0, #3
		cc += ((ticks_elapsed < ticks_to_expire) ?
   10a4e:	4287      	cmp	r7, r0
   10a50:	bf2c      	ite	cs
   10a52:	19e4      	addcs	r4, r4, r7
   10a54:	1824      	addcc	r4, r4, r0
		cc &= 0x00FFFFFF;
   10a56:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		instance->fp_cmp_set(cc);
   10a5a:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
   10a5e:	4620      	mov	r0, r4
   10a60:	4798      	blx	r3
		ctr_post = cntr_cnt_get();
   10a62:	f7fd ff57 	bl	e914 <cntr_cnt_get>
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
   10a66:	4631      	mov	r1, r6
   10a68:	f7ff fcbe 	bl	103e8 <ticker_ticks_diff_get>
   10a6c:	f100 0903 	add.w	r9, r0, #3
		  COUNTER_CMP_OFFSET_MIN) > ticker_ticks_diff_get(cc, ctr));
   10a70:	4631      	mov	r1, r6
   10a72:	4620      	mov	r0, r4
   10a74:	f7ff fcb8 	bl	103e8 <ticker_ticks_diff_get>
   10a78:	4581      	cmp	r9, r0
   10a7a:	d8dd      	bhi.n	10a38 <ticker_job+0x546>
   10a7c:	e78c      	b.n	10998 <ticker_job+0x4a6>
		if (cntr_stop() == 0) {
   10a7e:	f7fd ff2f 	bl	e8e0 <cntr_stop>
   10a82:	2800      	cmp	r0, #0
   10a84:	d188      	bne.n	10998 <ticker_job+0x4a6>
			instance->ticks_slot_previous = 0;
   10a86:	2300      	movs	r3, #0
   10a88:	9a00      	ldr	r2, [sp, #0]
   10a8a:	8353      	strh	r3, [r2, #26]
   10a8c:	e784      	b.n	10998 <ticker_job+0x4a6>
		ticks_current = cntr_cnt_get();
   10a8e:	f7fd ff41 	bl	e914 <cntr_cnt_get>
   10a92:	4604      	mov	r4, r0
		if (cntr_start() == 0) {
   10a94:	f7fd ff14 	bl	e8c0 <cntr_start>
   10a98:	2800      	cmp	r0, #0
   10a9a:	d1c3      	bne.n	10a24 <ticker_job+0x532>
			instance->ticks_current = ticks_current;
   10a9c:	9b00      	ldr	r3, [sp, #0]
   10a9e:	615c      	str	r4, [r3, #20]
   10aa0:	e7c0      	b.n	10a24 <ticker_job+0x532>
		LL_ASSERT(i);
   10aa2:	4040      	eors	r0, r0
   10aa4:	f380 8811 	msr	BASEPRI, r0
   10aa8:	f04f 0004 	mov.w	r0, #4
   10aac:	df02      	svc	2
	...

00010ab0 <bt_rand>:
#include "hal/ecb.h"

K_MUTEX_DEFINE(mutex_rand);

int bt_rand(void *buf, size_t len)
{
   10ab0:	b570      	push	{r4, r5, r6, lr}
   10ab2:	4606      	mov	r6, r0
   10ab4:	460c      	mov	r4, r1
	while (len) {
   10ab6:	b19c      	cbz	r4, 10ae0 <bt_rand+0x30>
K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout);
   10ab8:	4d0a      	ldr	r5, [pc, #40]	; (10ae4 <bt_rand+0x34>)
   10aba:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   10abe:	4628      	mov	r0, r5
   10ac0:	f016 fe48 	bl	27754 <_impl_k_mutex_lock>
		k_mutex_lock(&mutex_rand, K_FOREVER);
		len = rand_get(len, buf);
   10ac4:	4631      	mov	r1, r6
   10ac6:	4620      	mov	r0, r4
   10ac8:	f7ff f89a 	bl	fc00 <rand_get>
   10acc:	4604      	mov	r4, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex);
   10ace:	4628      	mov	r0, r5
   10ad0:	f016 feaa 	bl	27828 <_impl_k_mutex_unlock>
		k_mutex_unlock(&mutex_rand);
		if (len) {
   10ad4:	2c00      	cmp	r4, #0
   10ad6:	d0ee      	beq.n	10ab6 <bt_rand+0x6>
   10ad8:	bf20      	wfe
  __ASM volatile ("sev");
   10ada:	bf40      	sev
  __ASM volatile ("wfe");
   10adc:	bf20      	wfe
   10ade:	e7ea      	b.n	10ab6 <bt_rand+0x6>
			cpu_sleep();
		}
	}

	return 0;
}
   10ae0:	2000      	movs	r0, #0
   10ae2:	bd70      	pop	{r4, r5, r6, pc}
   10ae4:	2000d04c 	.word	0x2000d04c

00010ae8 <bt_encrypt_le>:

int bt_encrypt_le(const u8_t key[16], const u8_t plaintext[16],
		  u8_t enc_data[16])
{
   10ae8:	b508      	push	{r3, lr}
	BT_DBG("key %s plaintext %s", bt_hex(key, 16), bt_hex(plaintext, 16));

	ecb_encrypt(key, plaintext, enc_data, NULL);
   10aea:	2300      	movs	r3, #0
   10aec:	f7fd ff4e 	bl	e98c <ecb_encrypt>

	BT_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
}
   10af0:	2000      	movs	r0, #0
   10af2:	bd08      	pop	{r3, pc}

00010af4 <ticker_if_done>:
	*((u32_t volatile *)ops_context) = status;
   10af4:	6008      	str	r0, [r1, #0]
   10af6:	4770      	bx	lr

00010af8 <mayfly_xtal_start>:
{
   10af8:	b508      	push	{r3, lr}
	clock_control_on(_radio.hf_clock, NULL);
   10afa:	4b03      	ldr	r3, [pc, #12]	; (10b08 <mayfly_xtal_start+0x10>)
   10afc:	6818      	ldr	r0, [r3, #0]
	const struct clock_control_driver_api *api = dev->driver_api;
   10afe:	6843      	ldr	r3, [r0, #4]
	return api->on(dev, sys);
   10b00:	681b      	ldr	r3, [r3, #0]
   10b02:	2100      	movs	r1, #0
   10b04:	4798      	blx	r3
   10b06:	bd08      	pop	{r3, pc}
   10b08:	20000e84 	.word	0x20000e84

00010b0c <mayfly_xtal_stop>:
{
   10b0c:	b508      	push	{r3, lr}
	clock_control_off(_radio.hf_clock, NULL);
   10b0e:	4b03      	ldr	r3, [pc, #12]	; (10b1c <mayfly_xtal_stop+0x10>)
   10b10:	6818      	ldr	r0, [r3, #0]
	const struct clock_control_driver_api *api = dev->driver_api;
   10b12:	6843      	ldr	r3, [r0, #4]
	return api->off(dev, sys);
   10b14:	685b      	ldr	r3, [r3, #4]
   10b16:	2100      	movs	r1, #0
   10b18:	4798      	blx	r3
   10b1a:	bd08      	pop	{r3, pc}
   10b1c:	20000e84 	.word	0x20000e84

00010b20 <prepare_reduced>:
	if (status == 0) {
   10b20:	b918      	cbnz	r0, 10b2a <prepare_reduced+0xa>
		hdr->ticks_xtal_to_start |= ((u32_t)1 << 31);
   10b22:	680b      	ldr	r3, [r1, #0]
   10b24:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   10b28:	600b      	str	r3, [r1, #0]
   10b2a:	4770      	bx	lr

00010b2c <prepare_normal>:
	if (status == 0) {
   10b2c:	b918      	cbnz	r0, 10b36 <prepare_normal+0xa>
		hdr->ticks_xtal_to_start &= ~((u32_t)1 << 31);
   10b2e:	680b      	ldr	r3, [r1, #0]
   10b30:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   10b34:	600b      	str	r3, [r1, #0]
   10b36:	4770      	bx	lr

00010b38 <chan_sel_remap>:
{
   10b38:	b470      	push	{r4, r5, r6}
	byte_count = 5;
   10b3a:	2405      	movs	r4, #5
	chan_next = 0;
   10b3c:	2200      	movs	r2, #0
	while (byte_count--) {
   10b3e:	e011      	b.n	10b64 <chan_sel_remap+0x2c>
			chan_next++;
   10b40:	3201      	adds	r2, #1
   10b42:	b2d2      	uxtb	r2, r2
			bite >>= 1;
   10b44:	086d      	lsrs	r5, r5, #1
		while (bit_count--) {
   10b46:	461c      	mov	r4, r3
   10b48:	1e63      	subs	r3, r4, #1
   10b4a:	b2db      	uxtb	r3, r3
   10b4c:	b134      	cbz	r4, 10b5c <chan_sel_remap+0x24>
			if (bite & 0x01) {
   10b4e:	f015 0f01 	tst.w	r5, #1
   10b52:	d0f5      	beq.n	10b40 <chan_sel_remap+0x8>
				if (chan_index == 0) {
   10b54:	b111      	cbz	r1, 10b5c <chan_sel_remap+0x24>
				chan_index--;
   10b56:	3901      	subs	r1, #1
   10b58:	b2c9      	uxtb	r1, r1
   10b5a:	e7f1      	b.n	10b40 <chan_sel_remap+0x8>
		if (bit_count < 8) {
   10b5c:	2b07      	cmp	r3, #7
   10b5e:	d907      	bls.n	10b70 <chan_sel_remap+0x38>
		chan_map++;
   10b60:	3001      	adds	r0, #1
	while (byte_count--) {
   10b62:	4634      	mov	r4, r6
   10b64:	1e63      	subs	r3, r4, #1
   10b66:	b2de      	uxtb	r6, r3
   10b68:	b114      	cbz	r4, 10b70 <chan_sel_remap+0x38>
		bite = *chan_map;
   10b6a:	7805      	ldrb	r5, [r0, #0]
		bit_count = 8;
   10b6c:	2408      	movs	r4, #8
		while (bit_count--) {
   10b6e:	e7eb      	b.n	10b48 <chan_sel_remap+0x10>
}
   10b70:	4610      	mov	r0, r2
   10b72:	bc70      	pop	{r4, r5, r6}
   10b74:	4770      	bx	lr
	...

00010b78 <chan_sel_1>:
{
   10b78:	b570      	push	{r4, r5, r6, lr}
   10b7a:	4605      	mov	r5, r0
   10b7c:	f89d 6010 	ldrb.w	r6, [sp, #16]
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   10b80:	7804      	ldrb	r4, [r0, #0]
   10b82:	fb02 1101 	mla	r1, r2, r1, r1
   10b86:	4421      	add	r1, r4
   10b88:	4c0f      	ldr	r4, [pc, #60]	; (10bc8 <chan_sel_1+0x50>)
   10b8a:	fb84 2401 	smull	r2, r4, r4, r1
   10b8e:	1862      	adds	r2, r4, r1
   10b90:	17cc      	asrs	r4, r1, #31
   10b92:	ebc4 1462 	rsb	r4, r4, r2, asr #5
   10b96:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   10b9a:	eb04 0482 	add.w	r4, r4, r2, lsl #2
   10b9e:	1b0c      	subs	r4, r1, r4
   10ba0:	b2e0      	uxtb	r0, r4
	*chan_use = chan_next;
   10ba2:	7028      	strb	r0, [r5, #0]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
   10ba4:	08c2      	lsrs	r2, r0, #3
   10ba6:	5c9a      	ldrb	r2, [r3, r2]
   10ba8:	f004 0407 	and.w	r4, r4, #7
   10bac:	fa42 f404 	asr.w	r4, r2, r4
   10bb0:	f014 0f01 	tst.w	r4, #1
   10bb4:	d107      	bne.n	10bc6 <chan_sel_1+0x4e>
		chan_index = chan_next % chan_count;
   10bb6:	fbb0 f1f6 	udiv	r1, r0, r6
   10bba:	fb06 0111 	mls	r1, r6, r1, r0
		chan_next = chan_sel_remap(chan_map, chan_index);
   10bbe:	b2c9      	uxtb	r1, r1
   10bc0:	4618      	mov	r0, r3
   10bc2:	f7ff ffb9 	bl	10b38 <chan_sel_remap>
}
   10bc6:	bd70      	pop	{r4, r5, r6, pc}
   10bc8:	dd67c8a7 	.word	0xdd67c8a7

00010bcc <chan_rev_8>:
	o = 0;
   10bcc:	2300      	movs	r3, #0
	for (iterate = 0; iterate < 8; iterate++) {
   10bce:	461a      	mov	r2, r3
   10bd0:	e007      	b.n	10be2 <chan_rev_8+0x16>
		o <<= 1;
   10bd2:	005b      	lsls	r3, r3, #1
   10bd4:	b2db      	uxtb	r3, r3
		o |= (i & 1);
   10bd6:	f000 0101 	and.w	r1, r0, #1
   10bda:	430b      	orrs	r3, r1
		i >>= 1;
   10bdc:	0840      	lsrs	r0, r0, #1
	for (iterate = 0; iterate < 8; iterate++) {
   10bde:	3201      	adds	r2, #1
   10be0:	b2d2      	uxtb	r2, r2
   10be2:	2a07      	cmp	r2, #7
   10be4:	d9f5      	bls.n	10bd2 <chan_rev_8+0x6>
}
   10be6:	4618      	mov	r0, r3
   10be8:	4770      	bx	lr

00010bea <chan_perm>:
{
   10bea:	b538      	push	{r3, r4, r5, lr}
   10bec:	4604      	mov	r4, r0
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
   10bee:	0a00      	lsrs	r0, r0, #8
   10bf0:	f7ff ffec 	bl	10bcc <chan_rev_8>
   10bf4:	0205      	lsls	r5, r0, #8
   10bf6:	b2e0      	uxtb	r0, r4
   10bf8:	f7ff ffe8 	bl	10bcc <chan_rev_8>
   10bfc:	b200      	sxth	r0, r0
   10bfe:	4328      	orrs	r0, r5
}
   10c00:	b280      	uxth	r0, r0
   10c02:	bd38      	pop	{r3, r4, r5, pc}

00010c04 <chan_mam>:
	return ((u32_t)a * 17 + b) & 0xFFFF;
   10c04:	eb00 1000 	add.w	r0, r0, r0, lsl #4
   10c08:	fa11 f080 	uxtah	r0, r1, r0
}
   10c0c:	b280      	uxth	r0, r0
   10c0e:	4770      	bx	lr

00010c10 <chan_prn>:
{
   10c10:	b538      	push	{r3, r4, r5, lr}
   10c12:	460d      	mov	r5, r1
	prn_e = counter ^ chan_id;
   10c14:	4048      	eors	r0, r1
	for (iterate = 0; iterate < 3; iterate++) {
   10c16:	2400      	movs	r4, #0
   10c18:	e006      	b.n	10c28 <chan_prn+0x18>
		prn_e = chan_perm(prn_e);
   10c1a:	f7ff ffe6 	bl	10bea <chan_perm>
		prn_e = chan_mam(prn_e, chan_id);
   10c1e:	4629      	mov	r1, r5
   10c20:	f7ff fff0 	bl	10c04 <chan_mam>
	for (iterate = 0; iterate < 3; iterate++) {
   10c24:	3401      	adds	r4, #1
   10c26:	b2e4      	uxtb	r4, r4
   10c28:	2c02      	cmp	r4, #2
   10c2a:	d9f6      	bls.n	10c1a <chan_prn+0xa>
	prn_e ^= chan_id;
   10c2c:	4068      	eors	r0, r5
}
   10c2e:	b280      	uxth	r0, r0
   10c30:	bd38      	pop	{r3, r4, r5, pc}
	...

00010c34 <chan_sel_2>:
{
   10c34:	b538      	push	{r3, r4, r5, lr}
   10c36:	4615      	mov	r5, r2
   10c38:	461c      	mov	r4, r3
	prn_e = chan_prn(counter, chan_id);
   10c3a:	f7ff ffe9 	bl	10c10 <chan_prn>
   10c3e:	4601      	mov	r1, r0
	chan_next = prn_e % 37;
   10c40:	4a0e      	ldr	r2, [pc, #56]	; (10c7c <chan_sel_2+0x48>)
   10c42:	fba2 3200 	umull	r3, r2, r2, r0
   10c46:	1a80      	subs	r0, r0, r2
   10c48:	eb02 0250 	add.w	r2, r2, r0, lsr #1
   10c4c:	0952      	lsrs	r2, r2, #5
   10c4e:	eb02 00c2 	add.w	r0, r2, r2, lsl #3
   10c52:	eb02 0280 	add.w	r2, r2, r0, lsl #2
   10c56:	1a8a      	subs	r2, r1, r2
   10c58:	b2d0      	uxtb	r0, r2
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
   10c5a:	08c3      	lsrs	r3, r0, #3
   10c5c:	5ceb      	ldrb	r3, [r5, r3]
   10c5e:	f000 0207 	and.w	r2, r0, #7
   10c62:	4113      	asrs	r3, r2
   10c64:	f013 0f01 	tst.w	r3, #1
   10c68:	d106      	bne.n	10c78 <chan_sel_2+0x44>
		chan_index = ((u32_t)chan_count * prn_e) >> 16;
   10c6a:	fb04 f101 	mul.w	r1, r4, r1
		chan_next = chan_sel_remap(chan_map, chan_index);
   10c6e:	f3c1 4107 	ubfx	r1, r1, #16, #8
   10c72:	4628      	mov	r0, r5
   10c74:	f7ff ff60 	bl	10b38 <chan_sel_remap>
}
   10c78:	bd38      	pop	{r3, r4, r5, pc}
   10c7a:	bf00      	nop
   10c7c:	bacf914d 	.word	0xbacf914d

00010c80 <ctrl_tx_last_enqueue>:
}

static void ctrl_tx_last_enqueue(struct connection *conn,
				 struct radio_pdu_node_tx *node_tx)
{
	node_tx->next = conn->pkt_tx_ctrl_last->next;
   10c80:	f8d0 3144 	ldr.w	r3, [r0, #324]	; 0x144
   10c84:	681b      	ldr	r3, [r3, #0]
   10c86:	600b      	str	r3, [r1, #0]
	conn->pkt_tx_ctrl_last->next = node_tx;
   10c88:	f8d0 3144 	ldr.w	r3, [r0, #324]	; 0x144
   10c8c:	6019      	str	r1, [r3, #0]
	conn->pkt_tx_ctrl_last = node_tx;
   10c8e:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
   10c92:	4770      	bx	lr

00010c94 <ctrl_tx_enqueue>:
}

static void ctrl_tx_enqueue(struct connection *conn,
			    struct radio_pdu_node_tx *node_tx)
{
   10c94:	b538      	push	{r3, r4, r5, lr}
   10c96:	4604      	mov	r4, r0
   10c98:	460d      	mov	r5, r1
	/* check if a packet was tx-ed and not acked by peer */
	if (
	    /* An explicit empty PDU is not enqueued */
	    !conn->empty &&
   10c9a:	f890 30f8 	ldrb.w	r3, [r0, #248]	; 0xf8
	if (
   10c9e:	f013 0f80 	tst.w	r3, #128	; 0x80
   10ca2:	d11f      	bne.n	10ce4 <ctrl_tx_enqueue+0x50>
	    /* and data/ctrl packet is in the head */
	    conn->pkt_tx_head &&
   10ca4:	f8d0 213c 	ldr.w	r2, [r0, #316]	; 0x13c
	    !conn->empty &&
   10ca8:	b1e2      	cbz	r2, 10ce4 <ctrl_tx_enqueue+0x50>
	    conn->pkt_tx_head &&
   10caa:	f013 0f08 	tst.w	r3, #8
   10cae:	d119      	bne.n	10ce4 <ctrl_tx_enqueue+0x50>

		/* if data transmited once, keep it at head of the tx list,
		 * as we will insert a ctrl after it, hence advance the
		 * data pointer
		 */
		if (conn->pkt_tx_head == conn->pkt_tx_data) {
   10cb0:	f8d0 3148 	ldr.w	r3, [r0, #328]	; 0x148
   10cb4:	429a      	cmp	r2, r3
   10cb6:	d007      	beq.n	10cc8 <ctrl_tx_enqueue+0x34>
		}

		/* if no ctrl packet already queued, new ctrl added will be
		 * the ctrl pointer and is inserted after head.
		 */
		if (!conn->pkt_tx_ctrl) {
   10cb8:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   10cbc:	b143      	cbz	r3, 10cd0 <ctrl_tx_enqueue+0x3c>
			node_tx->next = conn->pkt_tx_head->next;
			conn->pkt_tx_head->next = node_tx;
			conn->pkt_tx_ctrl = node_tx;
			conn->pkt_tx_ctrl_last = node_tx;
		} else {
			ctrl_tx_last_enqueue(conn, node_tx);
   10cbe:	4629      	mov	r1, r5
   10cc0:	4620      	mov	r0, r4
   10cc2:	f7ff ffdd 	bl	10c80 <ctrl_tx_last_enqueue>
   10cc6:	e014      	b.n	10cf2 <ctrl_tx_enqueue+0x5e>
			conn->pkt_tx_data = conn->pkt_tx_data->next;
   10cc8:	681b      	ldr	r3, [r3, #0]
   10cca:	f8c0 3148 	str.w	r3, [r0, #328]	; 0x148
   10cce:	e7f3      	b.n	10cb8 <ctrl_tx_enqueue+0x24>
			node_tx->next = conn->pkt_tx_head->next;
   10cd0:	6813      	ldr	r3, [r2, #0]
   10cd2:	602b      	str	r3, [r5, #0]
			conn->pkt_tx_head->next = node_tx;
   10cd4:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
   10cd8:	601d      	str	r5, [r3, #0]
			conn->pkt_tx_ctrl = node_tx;
   10cda:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
			conn->pkt_tx_ctrl_last = node_tx;
   10cde:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
   10ce2:	e006      	b.n	10cf2 <ctrl_tx_enqueue+0x5e>
		/* No packet needing ACK. */

		/* If first ctrl packet then add it as head else add it to the
		 * tail of the ctrl packets.
		 */
		if (!conn->pkt_tx_ctrl) {
   10ce4:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   10ce8:	b133      	cbz	r3, 10cf8 <ctrl_tx_enqueue+0x64>
			node_tx->next = conn->pkt_tx_head;
			conn->pkt_tx_head = node_tx;
			conn->pkt_tx_ctrl = node_tx;
			conn->pkt_tx_ctrl_last = node_tx;
		} else {
			ctrl_tx_last_enqueue(conn, node_tx);
   10cea:	4629      	mov	r1, r5
   10cec:	4620      	mov	r0, r4
   10cee:	f7ff ffc7 	bl	10c80 <ctrl_tx_last_enqueue>
		}
	}

	/* Update last pointer if ctrl added at end of tx list */
	if (node_tx->next == 0) {
   10cf2:	682b      	ldr	r3, [r5, #0]
   10cf4:	b153      	cbz	r3, 10d0c <ctrl_tx_enqueue+0x78>
   10cf6:	bd38      	pop	{r3, r4, r5, pc}
			node_tx->next = conn->pkt_tx_head;
   10cf8:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
   10cfc:	602b      	str	r3, [r5, #0]
			conn->pkt_tx_head = node_tx;
   10cfe:	f8c4 513c 	str.w	r5, [r4, #316]	; 0x13c
			conn->pkt_tx_ctrl = node_tx;
   10d02:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
			conn->pkt_tx_ctrl_last = node_tx;
   10d06:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
   10d0a:	e7f2      	b.n	10cf2 <ctrl_tx_enqueue+0x5e>
		conn->pkt_tx_last = node_tx;
   10d0c:	f8c4 514c 	str.w	r5, [r4, #332]	; 0x14c
	}
}
   10d10:	e7f1      	b.n	10cf6 <ctrl_tx_enqueue+0x62>

00010d12 <ctrl_tx_sec_enqueue>:

static void ctrl_tx_sec_enqueue(struct connection *conn,
				  struct radio_pdu_node_tx *node_tx)
{
   10d12:	b508      	push	{r3, lr}
	if (conn->pause_tx) {
   10d14:	f890 30f8 	ldrb.w	r3, [r0, #248]	; 0xf8
   10d18:	f013 0f08 	tst.w	r3, #8
   10d1c:	d010      	beq.n	10d40 <ctrl_tx_sec_enqueue+0x2e>
		if (!conn->pkt_tx_ctrl) {
   10d1e:	f8d0 3140 	ldr.w	r3, [r0, #320]	; 0x140
   10d22:	b13b      	cbz	r3, 10d34 <ctrl_tx_sec_enqueue+0x22>
			node_tx->next = conn->pkt_tx_head;
			conn->pkt_tx_head = node_tx;
		} else {
			node_tx->next = conn->pkt_tx_ctrl_last->next;
   10d24:	f8d0 3144 	ldr.w	r3, [r0, #324]	; 0x144
   10d28:	681b      	ldr	r3, [r3, #0]
   10d2a:	600b      	str	r3, [r1, #0]
			conn->pkt_tx_ctrl_last->next = node_tx;
   10d2c:	f8d0 3144 	ldr.w	r3, [r0, #324]	; 0x144
   10d30:	6019      	str	r1, [r3, #0]
   10d32:	bd08      	pop	{r3, pc}
			node_tx->next = conn->pkt_tx_head;
   10d34:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
   10d38:	600b      	str	r3, [r1, #0]
			conn->pkt_tx_head = node_tx;
   10d3a:	f8c0 113c 	str.w	r1, [r0, #316]	; 0x13c
   10d3e:	bd08      	pop	{r3, pc}
		}
	} else {
		ctrl_tx_enqueue(conn, node_tx);
   10d40:	f7ff ffa8 	bl	10c94 <ctrl_tx_enqueue>
   10d44:	bd08      	pop	{r3, pc}
	...

00010d48 <conn_update_req>:
}

#if defined(CONFIG_BT_CTLR_SCHED_ADVANCED)
static u32_t conn_update_req(struct connection *conn)
{
	if (conn->llcp_req != conn->llcp_ack) {
   10d48:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
   10d4c:	f890 1075 	ldrb.w	r1, [r0, #117]	; 0x75
   10d50:	428b      	cmp	r3, r1
   10d52:	d001      	beq.n	10d58 <conn_update_req+0x10>
		return 1;
   10d54:	2001      	movs	r0, #1
   10d56:	4770      	bx	lr
{
   10d58:	b530      	push	{r4, r5, lr}
	}

	if (!conn->role) {
   10d5a:	f990 301d 	ldrsb.w	r3, [r0, #29]
   10d5e:	2b00      	cmp	r3, #0
   10d60:	db2a      	blt.n	10db8 <conn_update_req+0x70>
		conn->llcp.conn_upd.win_size = 1;
   10d62:	2401      	movs	r4, #1
   10d64:	f880 4088 	strb.w	r4, [r0, #136]	; 0x88
		conn->llcp.conn_upd.win_offset_us = 0;
   10d68:	2200      	movs	r2, #0
   10d6a:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
		conn->llcp.conn_upd.interval = conn->conn_interval;
   10d6e:	8c85      	ldrh	r5, [r0, #36]	; 0x24
   10d70:	f8a0 507a 	strh.w	r5, [r0, #122]	; 0x7a
		conn->llcp.conn_upd.latency = conn->latency;
   10d74:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
   10d76:	f8a0 307c 	strh.w	r3, [r0, #124]	; 0x7c
		conn->llcp.conn_upd.timeout = conn->conn_interval *
					      conn->supervision_reload *
   10d7a:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
		conn->llcp.conn_upd.timeout = conn->conn_interval *
   10d7c:	fb03 f305 	mul.w	r3, r3, r5
					      conn->supervision_reload *
   10d80:	ebc3 1543 	rsb	r5, r3, r3, lsl #5
   10d84:	eb03 0385 	add.w	r3, r3, r5, lsl #2
					      125 / 1000;
   10d88:	4d26      	ldr	r5, [pc, #152]	; (10e24 <conn_update_req+0xdc>)
   10d8a:	fb85 e503 	smull	lr, r5, r5, r3
   10d8e:	17db      	asrs	r3, r3, #31
   10d90:	ebc3 13a5 	rsb	r3, r3, r5, asr #6
		conn->llcp.conn_upd.timeout = conn->conn_interval *
   10d94:	f8a0 307e 	strh.w	r3, [r0, #126]	; 0x7e
		/* conn->llcp.conn_upd.instant     = 0; */
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
   10d98:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
   10d9c:	f364 0301 	bfi	r3, r4, #0, #2
		conn->llcp.conn_upd.is_internal = 1;
   10da0:	b2db      	uxtb	r3, r3
   10da2:	f043 0304 	orr.w	r3, r3, #4
   10da6:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78

		conn->llcp_type = LLCP_CONN_UPD;
   10daa:	f880 4076 	strb.w	r4, [r0, #118]	; 0x76
		conn->llcp_ack--;
   10dae:	3901      	subs	r1, #1
   10db0:	f880 1075 	strb.w	r1, [r0, #117]	; 0x75

		return 0;
   10db4:	4610      	mov	r0, r2
   10db6:	bd30      	pop	{r4, r5, pc}

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ)
	} else if (conn->common.fex_valid &&
   10db8:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
   10dbc:	f013 0f20 	tst.w	r3, #32
   10dc0:	d101      	bne.n	10dc6 <conn_update_req+0x7e>
		return 0;
#endif /* !CONFIG_BT_CTLR_CONN_PARAM_REQ */

	}

	return 2;
   10dc2:	2002      	movs	r0, #2
   10dc4:	bd30      	pop	{r4, r5, pc}
		   (conn->llcp_features &
   10dc6:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
	} else if (conn->common.fex_valid &&
   10dca:	f013 0f02 	tst.w	r3, #2
   10dce:	d101      	bne.n	10dd4 <conn_update_req+0x8c>
	return 2;
   10dd0:	2002      	movs	r0, #2
}
   10dd2:	bd30      	pop	{r4, r5, pc}
		conn->llcp_conn_param.status = 0;
   10dd4:	2300      	movs	r3, #0
   10dd6:	f880 30c3 	strb.w	r3, [r0, #195]	; 0xc3
		conn->llcp_conn_param.interval = conn->conn_interval;
   10dda:	8c81      	ldrh	r1, [r0, #36]	; 0x24
   10ddc:	f8a0 10c4 	strh.w	r1, [r0, #196]	; 0xc4
		conn->llcp_conn_param.latency = conn->latency;
   10de0:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
   10de2:	f8a0 20c6 	strh.w	r2, [r0, #198]	; 0xc6
						conn->supervision_reload *
   10de6:	8fc2      	ldrh	r2, [r0, #62]	; 0x3e
		conn->llcp_conn_param.timeout = conn->conn_interval *
   10de8:	fb02 f201 	mul.w	r2, r2, r1
						conn->supervision_reload *
   10dec:	ebc2 1142 	rsb	r1, r2, r2, lsl #5
   10df0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
						125 / 1000;
   10df4:	490b      	ldr	r1, [pc, #44]	; (10e24 <conn_update_req+0xdc>)
   10df6:	fb81 4102 	smull	r4, r1, r1, r2
   10dfa:	17d2      	asrs	r2, r2, #31
   10dfc:	ebc2 12a1 	rsb	r2, r2, r1, asr #6
		conn->llcp_conn_param.timeout = conn->conn_interval *
   10e00:	f8a0 20c8 	strh.w	r2, [r0, #200]	; 0xc8
		conn->llcp_conn_param.state = LLCP_CPR_STATE_REQ;
   10e04:	f890 20c2 	ldrb.w	r2, [r0, #194]	; 0xc2
		conn->llcp_conn_param.cmd = 0;
   10e08:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
   10e0c:	f363 02c3 	bfi	r2, r3, #3, #1
   10e10:	f880 20c2 	strb.w	r2, [r0, #194]	; 0xc2
		conn->llcp_conn_param.ack--;
   10e14:	f890 20c1 	ldrb.w	r2, [r0, #193]	; 0xc1
   10e18:	3a01      	subs	r2, #1
   10e1a:	f880 20c1 	strb.w	r2, [r0, #193]	; 0xc1
		return 0;
   10e1e:	4618      	mov	r0, r3
   10e20:	bd30      	pop	{r4, r5, pc}
   10e22:	bf00      	nop
   10e24:	10624dd3 	.word	0x10624dd3

00010e28 <rx_fc_lock>:
	packet_rx_allocate(0xff);
}

static void rx_fc_lock(u16_t handle)
{
	if (_radio.fc_req == _radio.fc_ack) {
   10e28:	4a0d      	ldr	r2, [pc, #52]	; (10e60 <rx_fc_lock+0x38>)
   10e2a:	f892 317c 	ldrb.w	r3, [r2, #380]	; 0x17c
   10e2e:	b2db      	uxtb	r3, r3
   10e30:	f892 217d 	ldrb.w	r2, [r2, #381]	; 0x17d
   10e34:	4293      	cmp	r3, r2
   10e36:	d000      	beq.n	10e3a <rx_fc_lock+0x12>
   10e38:	4770      	bx	lr
		u8_t req;

		_radio.fc_handle[_radio.fc_req] = handle;
   10e3a:	4a09      	ldr	r2, [pc, #36]	; (10e60 <rx_fc_lock+0x38>)
   10e3c:	f892 317c 	ldrb.w	r3, [r2, #380]	; 0x17c
   10e40:	33b8      	adds	r3, #184	; 0xb8
   10e42:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   10e46:	80d8      	strh	r0, [r3, #6]
		req = _radio.fc_req + 1;
   10e48:	f892 317c 	ldrb.w	r3, [r2, #380]	; 0x17c
   10e4c:	3301      	adds	r3, #1
   10e4e:	b2db      	uxtb	r3, r3
		if (req == TRIPLE_BUFFER_SIZE) {
   10e50:	2b03      	cmp	r3, #3
   10e52:	d003      	beq.n	10e5c <rx_fc_lock+0x34>
			req = 0;
		}
		_radio.fc_req = req;
   10e54:	4a02      	ldr	r2, [pc, #8]	; (10e60 <rx_fc_lock+0x38>)
   10e56:	f882 317c 	strb.w	r3, [r2, #380]	; 0x17c
	}
}
   10e5a:	e7ed      	b.n	10e38 <rx_fc_lock+0x10>
			req = 0;
   10e5c:	2300      	movs	r3, #0
   10e5e:	e7f9      	b.n	10e54 <rx_fc_lock+0x2c>
   10e60:	20000e84 	.word	0x20000e84

00010e64 <ticker_success_assert>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   10e64:	b900      	cbnz	r0, 10e68 <ticker_success_assert+0x4>
   10e66:	4770      	bx	lr
   10e68:	4040      	eors	r0, r0
   10e6a:	f380 8811 	msr	BASEPRI, r0
   10e6e:	f04f 0004 	mov.w	r0, #4
   10e72:	df02      	svc	2

00010e74 <start_enc_rsp_send>:
{
   10e74:	b510      	push	{r4, lr}
   10e76:	4604      	mov	r4, r0
	if (!pdu_ctrl_tx) {
   10e78:	b171      	cbz	r1, 10e98 <start_enc_rsp_send+0x24>
   10e7a:	460b      	mov	r3, r1
	struct radio_pdu_node_tx *node_tx = NULL;
   10e7c:	2100      	movs	r1, #0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   10e7e:	781a      	ldrb	r2, [r3, #0]
   10e80:	f042 0203 	orr.w	r2, r2, #3
   10e84:	701a      	strb	r2, [r3, #0]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata);
   10e86:	2201      	movs	r2, #1
   10e88:	705a      	strb	r2, [r3, #1]
	pdu_ctrl_tx->payload.llctrl.opcode =
   10e8a:	2206      	movs	r2, #6
   10e8c:	70da      	strb	r2, [r3, #3]
	if (node_tx) {
   10e8e:	b111      	cbz	r1, 10e96 <start_enc_rsp_send+0x22>
		ctrl_tx_enqueue(conn, node_tx);
   10e90:	4620      	mov	r0, r4
   10e92:	f7ff feff 	bl	10c94 <ctrl_tx_enqueue>
   10e96:	bd10      	pop	{r4, pc}
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   10e98:	4806      	ldr	r0, [pc, #24]	; (10eb4 <start_enc_rsp_send+0x40>)
   10e9a:	f7fd fc6a 	bl	e772 <mem_acquire>
		LL_ASSERT(node_tx);
   10e9e:	4601      	mov	r1, r0
   10ea0:	b108      	cbz	r0, 10ea6 <start_enc_rsp_send+0x32>
		pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
   10ea2:	1d03      	adds	r3, r0, #4
   10ea4:	e7eb      	b.n	10e7e <start_enc_rsp_send+0xa>
		LL_ASSERT(node_tx);
   10ea6:	4040      	eors	r0, r0
   10ea8:	f380 8811 	msr	BASEPRI, r0
   10eac:	f04f 0004 	mov.w	r0, #4
   10eb0:	df02      	svc	2
   10eb2:	bf00      	nop
   10eb4:	20000fdc 	.word	0x20000fdc

00010eb8 <ticker_stop_adv_assert>:
	if (status == TICKER_STATUS_FAILURE) {
   10eb8:	2801      	cmp	r0, #1
   10eba:	d005      	beq.n	10ec8 <ticker_stop_adv_assert+0x10>
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_ADV);
   10ebc:	4b0d      	ldr	r3, [pc, #52]	; (10ef4 <ticker_stop_adv_assert+0x3c>)
   10ebe:	7b1b      	ldrb	r3, [r3, #12]
   10ec0:	b2db      	uxtb	r3, r3
   10ec2:	2b05      	cmp	r3, #5
   10ec4:	d00f      	beq.n	10ee6 <ticker_stop_adv_assert+0x2e>
   10ec6:	4770      	bx	lr
		if (_radio.ticker_id_stop == RADIO_TICKER_ID_ADV) {
   10ec8:	4b0a      	ldr	r3, [pc, #40]	; (10ef4 <ticker_stop_adv_assert+0x3c>)
   10eca:	7b9b      	ldrb	r3, [r3, #14]
   10ecc:	b2db      	uxtb	r3, r3
   10ece:	2b05      	cmp	r3, #5
   10ed0:	d103      	bne.n	10eda <ticker_stop_adv_assert+0x22>
			_radio.ticker_id_stop = 0;
   10ed2:	2200      	movs	r2, #0
   10ed4:	4b07      	ldr	r3, [pc, #28]	; (10ef4 <ticker_stop_adv_assert+0x3c>)
   10ed6:	739a      	strb	r2, [r3, #14]
   10ed8:	4770      	bx	lr
			LL_ASSERT(0);
   10eda:	4040      	eors	r0, r0
   10edc:	f380 8811 	msr	BASEPRI, r0
   10ee0:	f04f 0004 	mov.w	r0, #4
   10ee4:	df02      	svc	2
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_ADV);
   10ee6:	4040      	eors	r0, r0
   10ee8:	f380 8811 	msr	BASEPRI, r0
   10eec:	f04f 0004 	mov.w	r0, #4
   10ef0:	df02      	svc	2
   10ef2:	bf00      	nop
   10ef4:	20000e84 	.word	0x20000e84

00010ef8 <ticker_stop_scan_assert>:
	if (status == TICKER_STATUS_FAILURE) {
   10ef8:	2801      	cmp	r0, #1
   10efa:	d005      	beq.n	10f08 <ticker_stop_scan_assert+0x10>
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_SCAN);
   10efc:	4b0d      	ldr	r3, [pc, #52]	; (10f34 <ticker_stop_scan_assert+0x3c>)
   10efe:	7b1b      	ldrb	r3, [r3, #12]
   10f00:	b2db      	uxtb	r3, r3
   10f02:	2b06      	cmp	r3, #6
   10f04:	d00f      	beq.n	10f26 <ticker_stop_scan_assert+0x2e>
   10f06:	4770      	bx	lr
		if (_radio.ticker_id_stop == RADIO_TICKER_ID_SCAN) {
   10f08:	4b0a      	ldr	r3, [pc, #40]	; (10f34 <ticker_stop_scan_assert+0x3c>)
   10f0a:	7b9b      	ldrb	r3, [r3, #14]
   10f0c:	b2db      	uxtb	r3, r3
   10f0e:	2b06      	cmp	r3, #6
   10f10:	d103      	bne.n	10f1a <ticker_stop_scan_assert+0x22>
			_radio.ticker_id_stop = 0;
   10f12:	2200      	movs	r2, #0
   10f14:	4b07      	ldr	r3, [pc, #28]	; (10f34 <ticker_stop_scan_assert+0x3c>)
   10f16:	739a      	strb	r2, [r3, #14]
   10f18:	4770      	bx	lr
			LL_ASSERT(0);
   10f1a:	4040      	eors	r0, r0
   10f1c:	f380 8811 	msr	BASEPRI, r0
   10f20:	f04f 0004 	mov.w	r0, #4
   10f24:	df02      	svc	2
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_SCAN);
   10f26:	4040      	eors	r0, r0
   10f28:	f380 8811 	msr	BASEPRI, r0
   10f2c:	f04f 0004 	mov.w	r0, #4
   10f30:	df02      	svc	2
   10f32:	bf00      	nop
   10f34:	20000e84 	.word	0x20000e84

00010f38 <conn_update>:
	if (((pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.instant -
   10f38:	f8b1 300d 	ldrh.w	r3, [r1, #13]
	      conn->event_counter) & 0xFFFF) > 0x7FFF) {
   10f3c:	8c42      	ldrh	r2, [r0, #34]	; 0x22
   10f3e:	1a9b      	subs	r3, r3, r2
   10f40:	b29b      	uxth	r3, r3
	if (((pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.instant -
   10f42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   10f46:	da5b      	bge.n	11000 <conn_update+0xc8>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   10f48:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   10f4c:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   10f50:	429a      	cmp	r2, r3
   10f52:	d13d      	bne.n	10fd0 <conn_update+0x98>
	if (_radio.conn_upd == 0) {
   10f54:	4b2c      	ldr	r3, [pc, #176]	; (11008 <conn_update+0xd0>)
   10f56:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
   10f5a:	2b00      	cmp	r3, #0
   10f5c:	d03e      	beq.n	10fdc <conn_update+0xa4>
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.win_size;
   10f5e:	790b      	ldrb	r3, [r1, #4]
	conn->llcp.conn_upd.win_size =
   10f60:	f880 3088 	strb.w	r3, [r0, #136]	; 0x88
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.win_offset *
   10f64:	f8b1 2005 	ldrh.w	r2, [r1, #5]
   10f68:	f240 43e2 	movw	r3, #1250	; 0x4e2
   10f6c:	fb03 f302 	mul.w	r3, r3, r2
	conn->llcp.conn_upd.win_offset_us =
   10f70:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.interval;
   10f74:	f8b1 3007 	ldrh.w	r3, [r1, #7]
	conn->llcp.conn_upd.interval =
   10f78:	f8a0 307a 	strh.w	r3, [r0, #122]	; 0x7a
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.latency;
   10f7c:	f8b1 3009 	ldrh.w	r3, [r1, #9]
	conn->llcp.conn_upd.latency =
   10f80:	f8a0 307c 	strh.w	r3, [r0, #124]	; 0x7c
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.timeout;
   10f84:	f8b1 300b 	ldrh.w	r3, [r1, #11]
	conn->llcp.conn_upd.timeout =
   10f88:	f8a0 307e 	strh.w	r3, [r0, #126]	; 0x7e
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.instant;
   10f8c:	f8b1 300d 	ldrh.w	r3, [r1, #13]
	conn->llcp.conn_upd.instant =
   10f90:	f8a0 3080 	strh.w	r3, [r0, #128]	; 0x80
	conn->llcp.conn_upd.state = LLCP_CUI_STATE_INPROG;
   10f94:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
	conn->llcp.conn_upd.is_internal = 0;
   10f98:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
   10f9c:	f36f 0382 	bfc	r3, #2, #1
   10fa0:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
	conn->llcp_type = LLCP_CONN_UPD;
   10fa4:	2301      	movs	r3, #1
   10fa6:	f880 3076 	strb.w	r3, [r0, #118]	; 0x76
	conn->llcp_ack--;
   10faa:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   10fae:	3b01      	subs	r3, #1
   10fb0:	f880 3075 	strb.w	r3, [r0, #117]	; 0x75
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   10fb4:	f890 20c0 	ldrb.w	r2, [r0, #192]	; 0xc0
   10fb8:	f890 30c1 	ldrb.w	r3, [r0, #193]	; 0xc1
   10fbc:	429a      	cmp	r2, r3
   10fbe:	d021      	beq.n	11004 <conn_update+0xcc>
	    (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT)) {
   10fc0:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
   10fc4:	f003 0307 	and.w	r3, r3, #7
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   10fc8:	2b04      	cmp	r3, #4
   10fca:	d015      	beq.n	10ff8 <conn_update+0xc0>
	return 0;
   10fcc:	2000      	movs	r0, #0
}
   10fce:	4770      	bx	lr
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   10fd0:	4040      	eors	r0, r0
   10fd2:	f380 8811 	msr	BASEPRI, r0
   10fd6:	f04f 0004 	mov.w	r0, #4
   10fda:	df02      	svc	2
		LL_ASSERT(conn->role);
   10fdc:	f990 301d 	ldrsb.w	r3, [r0, #29]
   10fe0:	2b00      	cmp	r3, #0
   10fe2:	da03      	bge.n	10fec <conn_update+0xb4>
		_radio.conn_upd = conn;
   10fe4:	4b08      	ldr	r3, [pc, #32]	; (11008 <conn_update+0xd0>)
   10fe6:	f8c3 0184 	str.w	r0, [r3, #388]	; 0x184
   10fea:	e7b8      	b.n	10f5e <conn_update+0x26>
		LL_ASSERT(conn->role);
   10fec:	4040      	eors	r0, r0
   10fee:	f380 8811 	msr	BASEPRI, r0
   10ff2:	f04f 0004 	mov.w	r0, #4
   10ff6:	df02      	svc	2
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   10ff8:	f880 20c1 	strb.w	r2, [r0, #193]	; 0xc1
	return 0;
   10ffc:	2000      	movs	r0, #0
   10ffe:	4770      	bx	lr
		return 1;
   11000:	2001      	movs	r0, #1
   11002:	4770      	bx	lr
	return 0;
   11004:	2000      	movs	r0, #0
   11006:	4770      	bx	lr
   11008:	20000e84 	.word	0x20000e84

0001100c <pause_enc_rsp_send>:
{
   1100c:	b510      	push	{r4, lr}
   1100e:	4604      	mov	r4, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   11010:	480b      	ldr	r0, [pc, #44]	; (11040 <pause_enc_rsp_send+0x34>)
   11012:	f7fd fbae 	bl	e772 <mem_acquire>
	LL_ASSERT(node_tx);
   11016:	b160      	cbz	r0, 11032 <pause_enc_rsp_send+0x26>
   11018:	4601      	mov	r1, r0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1101a:	7903      	ldrb	r3, [r0, #4]
   1101c:	f043 0303 	orr.w	r3, r3, #3
   11020:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata);
   11022:	2301      	movs	r3, #1
   11024:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->payload.llctrl.opcode =
   11026:	230b      	movs	r3, #11
   11028:	71c3      	strb	r3, [r0, #7]
	ctrl_tx_enqueue(conn, node_tx);
   1102a:	4620      	mov	r0, r4
   1102c:	f7ff fe32 	bl	10c94 <ctrl_tx_enqueue>
   11030:	bd10      	pop	{r4, pc}
	LL_ASSERT(node_tx);
   11032:	4040      	eors	r0, r0
   11034:	f380 8811 	msr	BASEPRI, r0
   11038:	f04f 0004 	mov.w	r0, #4
   1103c:	df02      	svc	2
   1103e:	bf00      	nop
   11040:	20000fdc 	.word	0x20000fdc

00011044 <ping_resp_send>:
{
   11044:	b510      	push	{r4, lr}
   11046:	4604      	mov	r4, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   11048:	480b      	ldr	r0, [pc, #44]	; (11078 <ping_resp_send+0x34>)
   1104a:	f7fd fb92 	bl	e772 <mem_acquire>
	LL_ASSERT(node_tx);
   1104e:	b160      	cbz	r0, 1106a <ping_resp_send+0x26>
   11050:	4601      	mov	r1, r0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   11052:	7903      	ldrb	r3, [r0, #4]
   11054:	f043 0303 	orr.w	r3, r3, #3
   11058:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata);
   1105a:	2301      	movs	r3, #1
   1105c:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
   1105e:	2313      	movs	r3, #19
   11060:	71c3      	strb	r3, [r0, #7]
	ctrl_tx_enqueue(conn, node_tx);
   11062:	4620      	mov	r0, r4
   11064:	f7ff fe16 	bl	10c94 <ctrl_tx_enqueue>
   11068:	bd10      	pop	{r4, pc}
	LL_ASSERT(node_tx);
   1106a:	4040      	eors	r0, r0
   1106c:	f380 8811 	msr	BASEPRI, r0
   11070:	f04f 0004 	mov.w	r0, #4
   11074:	df02      	svc	2
   11076:	bf00      	nop
   11078:	20000fdc 	.word	0x20000fdc

0001107c <length_resp_send>:
{
   1107c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1107e:	4604      	mov	r4, r0
   11080:	460f      	mov	r7, r1
   11082:	4615      	mov	r5, r2
   11084:	461e      	mov	r6, r3
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   11086:	480e      	ldr	r0, [pc, #56]	; (110c0 <length_resp_send+0x44>)
   11088:	f7fd fb73 	bl	e772 <mem_acquire>
	LL_ASSERT(node_tx);
   1108c:	b190      	cbz	r0, 110b4 <length_resp_send+0x38>
   1108e:	4601      	mov	r1, r0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   11090:	7903      	ldrb	r3, [r0, #4]
   11092:	f043 0303 	orr.w	r3, r3, #3
   11096:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   11098:	2309      	movs	r3, #9
   1109a:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->payload.llctrl.opcode =
   1109c:	2315      	movs	r3, #21
   1109e:	71c3      	strb	r3, [r0, #7]
	pdu_ctrl_tx->payload.llctrl.ctrldata.length_rsp.max_rx_octets =
   110a0:	8107      	strh	r7, [r0, #8]
	pdu_ctrl_tx->payload.llctrl.ctrldata.length_rsp.max_tx_octets =
   110a2:	8186      	strh	r6, [r0, #12]
	pdu_ctrl_tx->payload.llctrl.ctrldata.length_rsp.max_rx_time =
   110a4:	8145      	strh	r5, [r0, #10]
	pdu_ctrl_tx->payload.llctrl.ctrldata.length_rsp.max_tx_time =
   110a6:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   110aa:	81c3      	strh	r3, [r0, #14]
	ctrl_tx_enqueue(conn, node_tx);
   110ac:	4620      	mov	r0, r4
   110ae:	f7ff fdf1 	bl	10c94 <ctrl_tx_enqueue>
   110b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	LL_ASSERT(node_tx);
   110b4:	4040      	eors	r0, r0
   110b6:	f380 8811 	msr	BASEPRI, r0
   110ba:	f04f 0004 	mov.w	r0, #4
   110be:	df02      	svc	2
   110c0:	20000fdc 	.word	0x20000fdc

000110c4 <reject_ext_ind_send>:
{
   110c4:	b570      	push	{r4, r5, r6, lr}
   110c6:	4604      	mov	r4, r0
   110c8:	460e      	mov	r6, r1
   110ca:	4615      	mov	r5, r2
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   110cc:	480c      	ldr	r0, [pc, #48]	; (11100 <reject_ext_ind_send+0x3c>)
   110ce:	f7fd fb50 	bl	e772 <mem_acquire>
	LL_ASSERT(node_tx);
   110d2:	b170      	cbz	r0, 110f2 <reject_ext_ind_send+0x2e>
   110d4:	4601      	mov	r1, r0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   110d6:	7903      	ldrb	r3, [r0, #4]
   110d8:	f043 0303 	orr.w	r3, r3, #3
   110dc:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   110de:	2303      	movs	r3, #3
   110e0:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->payload.llctrl.opcode =
   110e2:	2311      	movs	r3, #17
   110e4:	71c3      	strb	r3, [r0, #7]
	pdu_ctrl_tx->payload.llctrl.ctrldata.reject_ext_ind.reject_opcode =
   110e6:	7206      	strb	r6, [r0, #8]
	pdu_ctrl_tx->payload.llctrl.ctrldata.reject_ext_ind.error_code =
   110e8:	7245      	strb	r5, [r0, #9]
	ctrl_tx_enqueue(conn, node_tx);
   110ea:	4620      	mov	r0, r4
   110ec:	f7ff fdd2 	bl	10c94 <ctrl_tx_enqueue>
   110f0:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(node_tx);
   110f2:	4040      	eors	r0, r0
   110f4:	f380 8811 	msr	BASEPRI, r0
   110f8:	f04f 0004 	mov.w	r0, #4
   110fc:	df02      	svc	2
   110fe:	bf00      	nop
   11100:	20000fdc 	.word	0x20000fdc

00011104 <phy_rsp_send>:
{
   11104:	b510      	push	{r4, lr}
   11106:	4604      	mov	r4, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   11108:	4810      	ldr	r0, [pc, #64]	; (1114c <phy_rsp_send+0x48>)
   1110a:	f7fd fb32 	bl	e772 <mem_acquire>
	LL_ASSERT(node_tx);
   1110e:	b1b0      	cbz	r0, 1113e <phy_rsp_send+0x3a>
   11110:	4601      	mov	r1, r0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   11112:	7903      	ldrb	r3, [r0, #4]
   11114:	f043 0303 	orr.w	r3, r3, #3
   11118:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   1111a:	2303      	movs	r3, #3
   1111c:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
   1111e:	2317      	movs	r3, #23
   11120:	71c3      	strb	r3, [r0, #7]
		conn->phy_pref_tx;
   11122:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   11126:	f3c3 0302 	ubfx	r3, r3, #0, #3
	pdu_ctrl_tx->payload.llctrl.ctrldata.phy_rsp.tx_phys =
   1112a:	7203      	strb	r3, [r0, #8]
		conn->phy_pref_rx;
   1112c:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
   11130:	f3c3 03c2 	ubfx	r3, r3, #3, #3
	pdu_ctrl_tx->payload.llctrl.ctrldata.phy_rsp.rx_phys =
   11134:	7243      	strb	r3, [r0, #9]
	ctrl_tx_enqueue(conn, node_tx);
   11136:	4620      	mov	r0, r4
   11138:	f7ff fdac 	bl	10c94 <ctrl_tx_enqueue>
   1113c:	bd10      	pop	{r4, pc}
	LL_ASSERT(node_tx);
   1113e:	4040      	eors	r0, r0
   11140:	f380 8811 	msr	BASEPRI, r0
   11144:	f04f 0004 	mov.w	r0, #4
   11148:	df02      	svc	2
   1114a:	bf00      	nop
   1114c:	20000fdc 	.word	0x20000fdc

00011150 <unknown_rsp_send>:
{
   11150:	b538      	push	{r3, r4, r5, lr}
   11152:	4604      	mov	r4, r0
   11154:	460d      	mov	r5, r1
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   11156:	480c      	ldr	r0, [pc, #48]	; (11188 <unknown_rsp_send+0x38>)
   11158:	f7fd fb0b 	bl	e772 <mem_acquire>
	LL_ASSERT(node_tx);
   1115c:	b168      	cbz	r0, 1117a <unknown_rsp_send+0x2a>
   1115e:	4601      	mov	r1, r0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   11160:	7903      	ldrb	r3, [r0, #4]
   11162:	f043 0303 	orr.w	r3, r3, #3
   11166:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata)
   11168:	2302      	movs	r3, #2
   1116a:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
   1116c:	2307      	movs	r3, #7
   1116e:	71c3      	strb	r3, [r0, #7]
	pdu_ctrl_tx->payload.llctrl.ctrldata.unknown_rsp.type = type;
   11170:	7205      	strb	r5, [r0, #8]
	ctrl_tx_enqueue(conn, node_tx);
   11172:	4620      	mov	r0, r4
   11174:	f7ff fd8e 	bl	10c94 <ctrl_tx_enqueue>
   11178:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(node_tx);
   1117a:	4040      	eors	r0, r0
   1117c:	f380 8811 	msr	BASEPRI, r0
   11180:	f04f 0004 	mov.w	r0, #4
   11184:	df02      	svc	2
   11186:	bf00      	nop
   11188:	20000fdc 	.word	0x20000fdc

0001118c <ticker_update_adv_assert>:
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   1118c:	b120      	cbz	r0, 11198 <ticker_update_adv_assert+0xc>
   1118e:	4b06      	ldr	r3, [pc, #24]	; (111a8 <ticker_update_adv_assert+0x1c>)
   11190:	7b9b      	ldrb	r3, [r3, #14]
   11192:	b2db      	uxtb	r3, r3
   11194:	2b05      	cmp	r3, #5
   11196:	d100      	bne.n	1119a <ticker_update_adv_assert+0xe>
   11198:	4770      	bx	lr
   1119a:	4040      	eors	r0, r0
   1119c:	f380 8811 	msr	BASEPRI, r0
   111a0:	f04f 0004 	mov.w	r0, #4
   111a4:	df02      	svc	2
   111a6:	bf00      	nop
   111a8:	20000e84 	.word	0x20000e84

000111ac <ticker_update_slave_assert>:
	u8_t ticker_id = (u32_t)params & 0xFF;
   111ac:	b2c9      	uxtb	r1, r1
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   111ae:	b120      	cbz	r0, 111ba <ticker_update_slave_assert+0xe>
   111b0:	4b05      	ldr	r3, [pc, #20]	; (111c8 <ticker_update_slave_assert+0x1c>)
   111b2:	7b9b      	ldrb	r3, [r3, #14]
   111b4:	b2db      	uxtb	r3, r3
   111b6:	4299      	cmp	r1, r3
   111b8:	d100      	bne.n	111bc <ticker_update_slave_assert+0x10>
   111ba:	4770      	bx	lr
   111bc:	4040      	eors	r0, r0
   111be:	f380 8811 	msr	BASEPRI, r0
   111c2:	f04f 0004 	mov.w	r0, #4
   111c6:	df02      	svc	2
   111c8:	20000e84 	.word	0x20000e84

000111cc <ticker_op_latency_cancelled>:

static void ticker_op_latency_cancelled(u32_t ticker_status, void *params)
{
	struct connection *conn;

	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
   111cc:	b930      	cbnz	r0, 111dc <ticker_op_latency_cancelled+0x10>

	conn = (struct connection *)params;
	conn->slave.latency_cancel = 0;
   111ce:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
   111d2:	f36f 0341 	bfc	r3, #1, #1
   111d6:	f881 3050 	strb.w	r3, [r1, #80]	; 0x50
   111da:	4770      	bx	lr
	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
   111dc:	4040      	eors	r0, r0
   111de:	f380 8811 	msr	BASEPRI, r0
   111e2:	f04f 0004 	mov.w	r0, #4
   111e6:	df02      	svc	2

000111e8 <packet_rx_allocate>:
{
   111e8:	b570      	push	{r4, r5, r6, lr}
	if (max > _radio.link_rx_data_quota) {
   111ea:	4b22      	ldr	r3, [pc, #136]	; (11274 <packet_rx_allocate+0x8c>)
   111ec:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
   111f0:	4283      	cmp	r3, r0
   111f2:	d300      	bcc.n	111f6 <packet_rx_allocate+0xe>
   111f4:	4603      	mov	r3, r0
	acquire = _radio.packet_rx_acquire + 1;
   111f6:	4a1f      	ldr	r2, [pc, #124]	; (11274 <packet_rx_allocate+0x8c>)
   111f8:	f892 413e 	ldrb.w	r4, [r2, #318]	; 0x13e
   111fc:	3401      	adds	r4, #1
   111fe:	b2e4      	uxtb	r4, r4
	if (acquire == _radio.packet_rx_count) {
   11200:	f892 213c 	ldrb.w	r2, [r2, #316]	; 0x13c
   11204:	4294      	cmp	r4, r2
   11206:	d10d      	bne.n	11224 <packet_rx_allocate+0x3c>
		acquire = 0;
   11208:	2400      	movs	r4, #0
   1120a:	e00b      	b.n	11224 <packet_rx_allocate+0x3c>
			mem_release(link, &_radio.link_rx_free);
   1120c:	491a      	ldr	r1, [pc, #104]	; (11278 <packet_rx_allocate+0x90>)
   1120e:	4630      	mov	r0, r6
   11210:	f7fd facb 	bl	e7aa <mem_release>
			break;
   11214:	bd70      	pop	{r4, r5, r6, pc}
		_radio.link_rx_data_quota--;
   11216:	4a17      	ldr	r2, [pc, #92]	; (11274 <packet_rx_allocate+0x8c>)
   11218:	f892 3150 	ldrb.w	r3, [r2, #336]	; 0x150
   1121c:	3b01      	subs	r3, #1
   1121e:	f882 3150 	strb.w	r3, [r2, #336]	; 0x150
	while ((max--) && (acquire != _radio.packet_rx_last)) {
   11222:	462b      	mov	r3, r5
   11224:	1e5d      	subs	r5, r3, #1
   11226:	b2ed      	uxtb	r5, r5
   11228:	b313      	cbz	r3, 11270 <packet_rx_allocate+0x88>
   1122a:	4b12      	ldr	r3, [pc, #72]	; (11274 <packet_rx_allocate+0x8c>)
   1122c:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   11230:	b2db      	uxtb	r3, r3
   11232:	429c      	cmp	r4, r3
   11234:	d01c      	beq.n	11270 <packet_rx_allocate+0x88>
		link = mem_acquire(&_radio.link_rx_free);
   11236:	4810      	ldr	r0, [pc, #64]	; (11278 <packet_rx_allocate+0x90>)
   11238:	f7fd fa9b 	bl	e772 <mem_acquire>
		if (!link) {
   1123c:	4606      	mov	r6, r0
   1123e:	b1b8      	cbz	r0, 11270 <packet_rx_allocate+0x88>
		radio_pdu_node_rx = mem_acquire(&_radio.pkt_rx_data_free);
   11240:	480e      	ldr	r0, [pc, #56]	; (1127c <packet_rx_allocate+0x94>)
   11242:	f7fd fa96 	bl	e772 <mem_acquire>
		if (!radio_pdu_node_rx) {
   11246:	4602      	mov	r2, r0
   11248:	2800      	cmp	r0, #0
   1124a:	d0df      	beq.n	1120c <packet_rx_allocate+0x24>
		radio_pdu_node_rx->hdr.onion.link = link;
   1124c:	6006      	str	r6, [r0, #0]
		_radio.packet_rx[_radio.packet_rx_acquire] = radio_pdu_node_rx;
   1124e:	4b09      	ldr	r3, [pc, #36]	; (11274 <packet_rx_allocate+0x8c>)
   11250:	f8d3 1138 	ldr.w	r1, [r3, #312]	; 0x138
   11254:	f893 013e 	ldrb.w	r0, [r3, #318]	; 0x13e
   11258:	f841 2020 	str.w	r2, [r1, r0, lsl #2]
		_radio.packet_rx_acquire = acquire;
   1125c:	f883 413e 	strb.w	r4, [r3, #318]	; 0x13e
		acquire = _radio.packet_rx_acquire + 1;
   11260:	3401      	adds	r4, #1
   11262:	b2e4      	uxtb	r4, r4
		if (acquire == _radio.packet_rx_count) {
   11264:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
   11268:	429c      	cmp	r4, r3
   1126a:	d1d4      	bne.n	11216 <packet_rx_allocate+0x2e>
			acquire = 0;
   1126c:	2400      	movs	r4, #0
   1126e:	e7d2      	b.n	11216 <packet_rx_allocate+0x2e>
   11270:	bd70      	pop	{r4, r5, r6, pc}
   11272:	bf00      	nop
   11274:	20000e84 	.word	0x20000e84
   11278:	20000fc8 	.word	0x20000fc8
   1127c:	20000fb0 	.word	0x20000fb0

00011280 <tx_cmplt_get>:
{
   11280:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	_first = *first;
   11284:	780c      	ldrb	r4, [r1, #0]
	if (_first == last) {
   11286:	4294      	cmp	r4, r2
   11288:	d043      	beq.n	11312 <tx_cmplt_get+0x92>
   1128a:	4690      	mov	r8, r2
   1128c:	4689      	mov	r9, r1
   1128e:	4607      	mov	r7, r0
	*handle = _radio.pkt_release[_first].handle;
   11290:	4b21      	ldr	r3, [pc, #132]	; (11318 <tx_cmplt_get+0x98>)
   11292:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
   11296:	f833 3034 	ldrh.w	r3, [r3, r4, lsl #3]
   1129a:	8003      	strh	r3, [r0, #0]
	cmplt = 0;
   1129c:	2600      	movs	r6, #0
   1129e:	e00f      	b.n	112c0 <tx_cmplt_get+0x40>
			_radio.pkt_release[_first].node_tx =
   112a0:	2301      	movs	r3, #1
   112a2:	606b      	str	r3, [r5, #4]
			cmplt++;
   112a4:	441e      	add	r6, r3
   112a6:	b2f6      	uxtb	r6, r6
		if (((u32_t)node_tx & ~(0x00000003)) != 0) {
   112a8:	f030 0303 	bics.w	r3, r0, #3
   112ac:	d126      	bne.n	112fc <tx_cmplt_get+0x7c>
		_first = _first + 1;
   112ae:	3401      	adds	r4, #1
   112b0:	b2e4      	uxtb	r4, r4
		if (_first == _radio.packet_tx_count) {
   112b2:	4b19      	ldr	r3, [pc, #100]	; (11318 <tx_cmplt_get+0x98>)
   112b4:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
   112b8:	429c      	cmp	r4, r3
   112ba:	d023      	beq.n	11304 <tx_cmplt_get+0x84>
	} while (_first != last);
   112bc:	4544      	cmp	r4, r8
   112be:	d023      	beq.n	11308 <tx_cmplt_get+0x88>
		if (*handle != _radio.pkt_release[_first].handle) {
   112c0:	883a      	ldrh	r2, [r7, #0]
   112c2:	4b15      	ldr	r3, [pc, #84]	; (11318 <tx_cmplt_get+0x98>)
   112c4:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
   112c8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
   112cc:	f833 3034 	ldrh.w	r3, [r3, r4, lsl #3]
   112d0:	429a      	cmp	r2, r3
   112d2:	d119      	bne.n	11308 <tx_cmplt_get+0x88>
		node_tx = _radio.pkt_release[_first].node_tx;
   112d4:	6868      	ldr	r0, [r5, #4]
		pdu_data_tx = (struct pdu_data *)node_tx->pdu_data;
   112d6:	1d03      	adds	r3, r0, #4
		if ((!node_tx) || (node_tx == (struct radio_pdu_node_tx *)1) ||
   112d8:	2801      	cmp	r0, #1
   112da:	d9e1      	bls.n	112a0 <tx_cmplt_get+0x20>
   112dc:	f030 0203 	bics.w	r2, r0, #3
   112e0:	d009      	beq.n	112f6 <tx_cmplt_get+0x76>
		    ((((u32_t)node_tx & ~(0x00000003)) != 0) &&
   112e2:	b143      	cbz	r3, 112f6 <tx_cmplt_get+0x76>
		     (pdu_data_tx) && (pdu_data_tx->len != 0) &&
   112e4:	7943      	ldrb	r3, [r0, #5]
   112e6:	b133      	cbz	r3, 112f6 <tx_cmplt_get+0x76>
		     ((pdu_data_tx->ll_id == PDU_DATA_LLID_DATA_START) ||
   112e8:	7903      	ldrb	r3, [r0, #4]
   112ea:	f003 0303 	and.w	r3, r3, #3
   112ee:	3b01      	subs	r3, #1
   112f0:	b2db      	uxtb	r3, r3
		     (pdu_data_tx) && (pdu_data_tx->len != 0) &&
   112f2:	2b01      	cmp	r3, #1
   112f4:	d9d4      	bls.n	112a0 <tx_cmplt_get+0x20>
			_radio.pkt_release[_first].node_tx =
   112f6:	2302      	movs	r3, #2
   112f8:	606b      	str	r3, [r5, #4]
   112fa:	e7d5      	b.n	112a8 <tx_cmplt_get+0x28>
			mem_release(node_tx, &_radio.pkt_tx_data_free);
   112fc:	4907      	ldr	r1, [pc, #28]	; (1131c <tx_cmplt_get+0x9c>)
   112fe:	f7fd fa54 	bl	e7aa <mem_release>
   11302:	e7d4      	b.n	112ae <tx_cmplt_get+0x2e>
			_first = 0;
   11304:	2400      	movs	r4, #0
   11306:	e7d9      	b.n	112bc <tx_cmplt_get+0x3c>
	*first = _first;
   11308:	f889 4000 	strb.w	r4, [r9]
}
   1130c:	4630      	mov	r0, r6
   1130e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return 0;
   11312:	2600      	movs	r6, #0
   11314:	e7fa      	b.n	1130c <tx_cmplt_get+0x8c>
   11316:	bf00      	nop
   11318:	20000e84 	.word	0x20000e84
   1131c:	20000fe4 	.word	0x20000fe4

00011320 <ticker_job_disable>:
{
   11320:	b508      	push	{r3, lr}
	if (_radio.state != STATE_NONE) {
   11322:	4b05      	ldr	r3, [pc, #20]	; (11338 <ticker_job_disable+0x18>)
   11324:	7c1b      	ldrb	r3, [r3, #16]
   11326:	b903      	cbnz	r3, 1132a <ticker_job_disable+0xa>
   11328:	bd08      	pop	{r3, pc}
		mayfly_enable(RADIO_TICKER_USER_ID_JOB,
   1132a:	2200      	movs	r2, #0
   1132c:	2101      	movs	r1, #1
   1132e:	4608      	mov	r0, r1
   11330:	f7fd f8a0 	bl	e474 <mayfly_enable>
}
   11334:	e7f8      	b.n	11328 <ticker_job_disable+0x8>
   11336:	bf00      	nop
   11338:	20000e84 	.word	0x20000e84

0001133c <connection_get>:
	if (handle < _radio.connection_count) {
   1133c:	4b0d      	ldr	r3, [pc, #52]	; (11374 <connection_get+0x38>)
   1133e:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
   11342:	4283      	cmp	r3, r0
   11344:	d910      	bls.n	11368 <connection_get+0x2c>
{
   11346:	b510      	push	{r4, lr}
   11348:	4604      	mov	r4, r0
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE, handle);
   1134a:	4602      	mov	r2, r0
   1134c:	f44f 71aa 	mov.w	r1, #340	; 0x154
   11350:	4b08      	ldr	r3, [pc, #32]	; (11374 <connection_get+0x38>)
   11352:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
   11356:	f7fd fa49 	bl	e7ec <mem_get>
		if ((conn) && (conn->handle == handle)) {
   1135a:	4603      	mov	r3, r0
   1135c:	b110      	cbz	r0, 11364 <connection_get+0x28>
   1135e:	8c02      	ldrh	r2, [r0, #32]
   11360:	4294      	cmp	r4, r2
   11362:	d104      	bne.n	1136e <connection_get+0x32>
}
   11364:	4618      	mov	r0, r3
   11366:	bd10      	pop	{r4, pc}
	return 0;
   11368:	2300      	movs	r3, #0
}
   1136a:	4618      	mov	r0, r3
   1136c:	4770      	bx	lr
	return 0;
   1136e:	2300      	movs	r3, #0
   11370:	e7f8      	b.n	11364 <connection_get+0x28>
   11372:	bf00      	nop
   11374:	20000e84 	.word	0x20000e84

00011378 <role_disable>:
{
   11378:	b5f0      	push	{r4, r5, r6, r7, lr}
   1137a:	b087      	sub	sp, #28
   1137c:	4604      	mov	r4, r0
   1137e:	460d      	mov	r5, r1
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   11380:	2302      	movs	r3, #2
   11382:	9305      	str	r3, [sp, #20]
	switch (ticker_id_primary) {
   11384:	2805      	cmp	r0, #5
   11386:	d00d      	beq.n	113a4 <role_disable+0x2c>
   11388:	2806      	cmp	r0, #6
   1138a:	d02a      	beq.n	113e2 <role_disable+0x6a>
		if (ticker_id_primary >= RADIO_TICKER_ID_FIRST_CONNECTION) {
   1138c:	2806      	cmp	r0, #6
   1138e:	d957      	bls.n	11440 <role_disable+0xc8>
			conn_handle = ticker_id_primary -
   11390:	3807      	subs	r0, #7
			conn = connection_get(conn_handle);
   11392:	b280      	uxth	r0, r0
   11394:	f7ff ffd2 	bl	1133c <connection_get>
			if (!conn) {
   11398:	2800      	cmp	r0, #0
   1139a:	f000 8153 	beq.w	11644 <role_disable+0x2cc>
			ticks_xtal_to_start =
   1139e:	6806      	ldr	r6, [r0, #0]
			ticks_active_to_start =
   113a0:	6847      	ldr	r7, [r0, #4]
		break;
   113a2:	e023      	b.n	113ec <role_disable+0x74>
		ticks_xtal_to_start =
   113a4:	4b9f      	ldr	r3, [pc, #636]	; (11624 <role_disable+0x2ac>)
   113a6:	695e      	ldr	r6, [r3, #20]
		ticks_active_to_start =
   113a8:	699f      	ldr	r7, [r3, #24]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   113aa:	ab05      	add	r3, sp, #20
   113ac:	9300      	str	r3, [sp, #0]
   113ae:	4b9e      	ldr	r3, [pc, #632]	; (11628 <role_disable+0x2b0>)
   113b0:	460a      	mov	r2, r1
   113b2:	2103      	movs	r1, #3
   113b4:	2000      	movs	r0, #0
   113b6:	f7fe ff47 	bl	10248 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
   113ba:	2802      	cmp	r0, #2
   113bc:	d00d      	beq.n	113da <role_disable+0x62>
		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
   113be:	9b05      	ldr	r3, [sp, #20]
   113c0:	b1a3      	cbz	r3, 113ec <role_disable+0x74>
   113c2:	9b05      	ldr	r3, [sp, #20]
   113c4:	2b01      	cmp	r3, #1
   113c6:	d011      	beq.n	113ec <role_disable+0x74>
   113c8:	4040      	eors	r0, r0
   113ca:	f380 8811 	msr	BASEPRI, r0
   113ce:	f04f 0004 	mov.w	r0, #4
   113d2:	df02      	svc	2
   113d4:	bf20      	wfe
  __ASM volatile ("sev");
   113d6:	bf40      	sev
  __ASM volatile ("wfe");
   113d8:	bf20      	wfe
			while (ret_cb == TICKER_STATUS_BUSY) {
   113da:	9b05      	ldr	r3, [sp, #20]
   113dc:	2b02      	cmp	r3, #2
   113de:	d0f9      	beq.n	113d4 <role_disable+0x5c>
   113e0:	e7ed      	b.n	113be <role_disable+0x46>
		ticks_xtal_to_start =
   113e2:	4b90      	ldr	r3, [pc, #576]	; (11624 <role_disable+0x2ac>)
   113e4:	f8d3 60cc 	ldr.w	r6, [r3, #204]	; 0xcc
		ticks_active_to_start =
   113e8:	f8d3 70d0 	ldr.w	r7, [r3, #208]	; 0xd0
	LL_ASSERT(!_radio.ticker_id_stop);
   113ec:	4b8d      	ldr	r3, [pc, #564]	; (11624 <role_disable+0x2ac>)
   113ee:	7b9b      	ldrb	r3, [r3, #14]
   113f0:	2b00      	cmp	r3, #0
   113f2:	d12b      	bne.n	1144c <role_disable+0xd4>
	_radio.ticker_id_stop = ticker_id_primary;
   113f4:	4b8b      	ldr	r3, [pc, #556]	; (11624 <role_disable+0x2ac>)
   113f6:	739c      	strb	r4, [r3, #14]
	ret_cb = TICKER_STATUS_BUSY;
   113f8:	ab06      	add	r3, sp, #24
   113fa:	2202      	movs	r2, #2
   113fc:	f843 2d04 	str.w	r2, [r3, #-4]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   11400:	9300      	str	r3, [sp, #0]
   11402:	4b89      	ldr	r3, [pc, #548]	; (11628 <role_disable+0x2b0>)
   11404:	4622      	mov	r2, r4
   11406:	2103      	movs	r1, #3
   11408:	2000      	movs	r0, #0
   1140a:	f7fe ff1d 	bl	10248 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
   1140e:	2802      	cmp	r0, #2
   11410:	d022      	beq.n	11458 <role_disable+0xe0>
	if (ret_cb != TICKER_STATUS_SUCCESS) {
   11412:	9b05      	ldr	r3, [sp, #20]
   11414:	b973      	cbnz	r3, 11434 <role_disable+0xbc>
	if ((_radio.ticker_id_prepare == ticker_id_primary)
   11416:	4b83      	ldr	r3, [pc, #524]	; (11624 <role_disable+0x2ac>)
   11418:	7b1b      	ldrb	r3, [r3, #12]
   1141a:	b2db      	uxtb	r3, r3
   1141c:	429c      	cmp	r4, r3
   1141e:	d02d      	beq.n	1147c <role_disable+0x104>
	    || (_radio.ticker_id_event == ticker_id_primary)) {
   11420:	4b80      	ldr	r3, [pc, #512]	; (11624 <role_disable+0x2ac>)
   11422:	7b5b      	ldrb	r3, [r3, #13]
   11424:	b2db      	uxtb	r3, r3
   11426:	429c      	cmp	r4, r3
   11428:	d028      	beq.n	1147c <role_disable+0x104>
	if (!_radio.ticker_id_stop) {
   1142a:	4b7e      	ldr	r3, [pc, #504]	; (11624 <role_disable+0x2ac>)
   1142c:	7b9b      	ldrb	r3, [r3, #14]
   1142e:	b90b      	cbnz	r3, 11434 <role_disable+0xbc>
		ret_cb = TICKER_STATUS_FAILURE;
   11430:	2301      	movs	r3, #1
   11432:	9305      	str	r3, [sp, #20]
	_radio.ticker_id_stop = 0;
   11434:	2200      	movs	r2, #0
   11436:	4b7b      	ldr	r3, [pc, #492]	; (11624 <role_disable+0x2ac>)
   11438:	739a      	strb	r2, [r3, #14]
	return ret_cb;
   1143a:	9805      	ldr	r0, [sp, #20]
}
   1143c:	b007      	add	sp, #28
   1143e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			LL_ASSERT(0);
   11440:	4040      	eors	r0, r0
   11442:	f380 8811 	msr	BASEPRI, r0
   11446:	f04f 0004 	mov.w	r0, #4
   1144a:	df02      	svc	2
	LL_ASSERT(!_radio.ticker_id_stop);
   1144c:	4040      	eors	r0, r0
   1144e:	f380 8811 	msr	BASEPRI, r0
   11452:	f04f 0004 	mov.w	r0, #4
   11456:	df02      	svc	2
		if (_radio.ticker_id_event == ticker_id_primary) {
   11458:	4b72      	ldr	r3, [pc, #456]	; (11624 <role_disable+0x2ac>)
   1145a:	7b5b      	ldrb	r3, [r3, #13]
   1145c:	b2db      	uxtb	r3, r3
   1145e:	429c      	cmp	r4, r3
   11460:	d108      	bne.n	11474 <role_disable+0xfc>
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
   11462:	2201      	movs	r2, #1
   11464:	4611      	mov	r1, r2
   11466:	2003      	movs	r0, #3
   11468:	f7fd f804 	bl	e474 <mayfly_enable>
   1146c:	e002      	b.n	11474 <role_disable+0xfc>
   1146e:	bf20      	wfe
  __ASM volatile ("sev");
   11470:	bf40      	sev
  __ASM volatile ("wfe");
   11472:	bf20      	wfe
		while (ret_cb == TICKER_STATUS_BUSY) {
   11474:	9b05      	ldr	r3, [sp, #20]
   11476:	2b02      	cmp	r3, #2
   11478:	d0f9      	beq.n	1146e <role_disable+0xf6>
   1147a:	e7ca      	b.n	11412 <role_disable+0x9a>
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   1147c:	ab06      	add	r3, sp, #24
   1147e:	2202      	movs	r2, #2
   11480:	f843 2d10 	str.w	r2, [r3, #-16]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   11484:	9300      	str	r3, [sp, #0]
   11486:	4b68      	ldr	r3, [pc, #416]	; (11628 <role_disable+0x2b0>)
   11488:	2200      	movs	r2, #0
   1148a:	2103      	movs	r1, #3
   1148c:	4610      	mov	r0, r2
   1148e:	f7fe fedb 	bl	10248 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
   11492:	2802      	cmp	r0, #2
   11494:	d029      	beq.n	114ea <role_disable+0x172>
	if (ret_cb == TICKER_STATUS_SUCCESS) {
   11496:	9b02      	ldr	r3, [sp, #8]
   11498:	2b00      	cmp	r3, #0
   1149a:	d17c      	bne.n	11596 <role_disable+0x21e>
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   1149c:	2302      	movs	r3, #2
   1149e:	9303      	str	r3, [sp, #12]
		LL_ASSERT(_radio.ticker_id_prepare);
   114a0:	4b60      	ldr	r3, [pc, #384]	; (11624 <role_disable+0x2ac>)
   114a2:	7b1b      	ldrb	r3, [r3, #12]
   114a4:	2b00      	cmp	r3, #0
   114a6:	d02e      	beq.n	11506 <role_disable+0x18e>
		_radio.ticker_id_prepare = 0;
   114a8:	2000      	movs	r0, #0
   114aa:	4b5e      	ldr	r3, [pc, #376]	; (11624 <role_disable+0x2ac>)
   114ac:	7318      	strb	r0, [r3, #12]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   114ae:	ab03      	add	r3, sp, #12
   114b0:	9300      	str	r3, [sp, #0]
   114b2:	4b5d      	ldr	r3, [pc, #372]	; (11628 <role_disable+0x2b0>)
   114b4:	2201      	movs	r2, #1
   114b6:	2103      	movs	r1, #3
   114b8:	f7fe fec6 	bl	10248 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
   114bc:	2802      	cmp	r0, #2
   114be:	d028      	beq.n	11512 <role_disable+0x19a>
		if (ret_cb == TICKER_STATUS_SUCCESS) {
   114c0:	9b03      	ldr	r3, [sp, #12]
   114c2:	2b00      	cmp	r3, #0
   114c4:	d142      	bne.n	1154c <role_disable+0x1d4>
			ticks_xtal_to_start &= ~BIT(31);
   114c6:	f026 4600 	bic.w	r6, r6, #2147483648	; 0x80000000
			if (ticks_active_to_start > ticks_xtal_to_start) {
   114ca:	42b7      	cmp	r7, r6
   114cc:	d92f      	bls.n	1152e <role_disable+0x1b6>
				retval = mayfly_enqueue(
   114ce:	4b57      	ldr	r3, [pc, #348]	; (1162c <role_disable+0x2b4>)
   114d0:	2200      	movs	r2, #0
   114d2:	4611      	mov	r1, r2
   114d4:	2003      	movs	r0, #3
   114d6:	f7fd f80b 	bl	e4f0 <mayfly_enqueue>
				LL_ASSERT(!retval);
   114da:	2800      	cmp	r0, #0
   114dc:	d0a5      	beq.n	1142a <role_disable+0xb2>
   114de:	4040      	eors	r0, r0
   114e0:	f380 8811 	msr	BASEPRI, r0
   114e4:	f04f 0004 	mov.w	r0, #4
   114e8:	df02      	svc	2
		mayfly_enable(RADIO_TICKER_USER_ID_APP,
   114ea:	2201      	movs	r2, #1
   114ec:	4611      	mov	r1, r2
   114ee:	2003      	movs	r0, #3
   114f0:	f7fc ffc0 	bl	e474 <mayfly_enable>
		LL_ASSERT(ret_cb != TICKER_STATUS_BUSY);
   114f4:	9b02      	ldr	r3, [sp, #8]
   114f6:	2b02      	cmp	r3, #2
   114f8:	d1cd      	bne.n	11496 <role_disable+0x11e>
   114fa:	4040      	eors	r0, r0
   114fc:	f380 8811 	msr	BASEPRI, r0
   11500:	f04f 0004 	mov.w	r0, #4
   11504:	df02      	svc	2
		LL_ASSERT(_radio.ticker_id_prepare);
   11506:	4040      	eors	r0, r0
   11508:	f380 8811 	msr	BASEPRI, r0
   1150c:	f04f 0004 	mov.w	r0, #4
   11510:	df02      	svc	2
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
   11512:	2201      	movs	r2, #1
   11514:	4611      	mov	r1, r2
   11516:	2003      	movs	r0, #3
   11518:	f7fc ffac 	bl	e474 <mayfly_enable>
			LL_ASSERT(ret_cb != TICKER_STATUS_BUSY);
   1151c:	9b03      	ldr	r3, [sp, #12]
   1151e:	2b02      	cmp	r3, #2
   11520:	d1ce      	bne.n	114c0 <role_disable+0x148>
   11522:	4040      	eors	r0, r0
   11524:	f380 8811 	msr	BASEPRI, r0
   11528:	f04f 0004 	mov.w	r0, #4
   1152c:	df02      	svc	2
				retval = mayfly_enqueue(
   1152e:	4b40      	ldr	r3, [pc, #256]	; (11630 <role_disable+0x2b8>)
   11530:	2200      	movs	r2, #0
   11532:	4611      	mov	r1, r2
   11534:	2003      	movs	r0, #3
   11536:	f7fc ffdb 	bl	e4f0 <mayfly_enqueue>
				LL_ASSERT(!retval);
   1153a:	2800      	cmp	r0, #0
   1153c:	f43f af75 	beq.w	1142a <role_disable+0xb2>
   11540:	4040      	eors	r0, r0
   11542:	f380 8811 	msr	BASEPRI, r0
   11546:	f04f 0004 	mov.w	r0, #4
   1154a:	df02      	svc	2
		} else if (ret_cb == TICKER_STATUS_FAILURE) {
   1154c:	9b03      	ldr	r3, [sp, #12]
   1154e:	2b01      	cmp	r3, #1
   11550:	d11b      	bne.n	1158a <role_disable+0x212>
			retval = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
   11552:	4b36      	ldr	r3, [pc, #216]	; (1162c <role_disable+0x2b4>)
   11554:	2200      	movs	r2, #0
   11556:	4611      	mov	r1, r2
   11558:	2003      	movs	r0, #3
   1155a:	f7fc ffc9 	bl	e4f0 <mayfly_enqueue>
			LL_ASSERT(!retval);
   1155e:	b970      	cbnz	r0, 1157e <role_disable+0x206>
			retval = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
   11560:	4b33      	ldr	r3, [pc, #204]	; (11630 <role_disable+0x2b8>)
   11562:	2200      	movs	r2, #0
   11564:	4611      	mov	r1, r2
   11566:	2003      	movs	r0, #3
   11568:	f7fc ffc2 	bl	e4f0 <mayfly_enqueue>
			LL_ASSERT(!retval);
   1156c:	2800      	cmp	r0, #0
   1156e:	f43f af5c 	beq.w	1142a <role_disable+0xb2>
   11572:	4040      	eors	r0, r0
   11574:	f380 8811 	msr	BASEPRI, r0
   11578:	f04f 0004 	mov.w	r0, #4
   1157c:	df02      	svc	2
			LL_ASSERT(!retval);
   1157e:	4040      	eors	r0, r0
   11580:	f380 8811 	msr	BASEPRI, r0
   11584:	f04f 0004 	mov.w	r0, #4
   11588:	df02      	svc	2
			LL_ASSERT(0);
   1158a:	4040      	eors	r0, r0
   1158c:	f380 8811 	msr	BASEPRI, r0
   11590:	f04f 0004 	mov.w	r0, #4
   11594:	df02      	svc	2
	} else if (ret_cb == TICKER_STATUS_FAILURE) {
   11596:	9b02      	ldr	r3, [sp, #8]
   11598:	2b01      	cmp	r3, #1
   1159a:	d14d      	bne.n	11638 <role_disable+0x2c0>
		if (ticker_id_stop != TICKER_NULL) {
   1159c:	2dff      	cmp	r5, #255	; 0xff
   1159e:	d011      	beq.n	115c4 <role_disable+0x24c>
			u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   115a0:	ab06      	add	r3, sp, #24
   115a2:	2202      	movs	r2, #2
   115a4:	f843 2d08 	str.w	r2, [r3, #-8]!
			ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   115a8:	9300      	str	r3, [sp, #0]
   115aa:	4b1f      	ldr	r3, [pc, #124]	; (11628 <role_disable+0x2b0>)
   115ac:	462a      	mov	r2, r5
   115ae:	2103      	movs	r1, #3
   115b0:	2000      	movs	r0, #0
   115b2:	f7fe fe49 	bl	10248 <ticker_stop>
			if (ret == TICKER_STATUS_BUSY) {
   115b6:	2802      	cmp	r0, #2
   115b8:	d018      	beq.n	115ec <role_disable+0x274>
			LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
   115ba:	9b04      	ldr	r3, [sp, #16]
   115bc:	b113      	cbz	r3, 115c4 <role_disable+0x24c>
   115be:	9b04      	ldr	r3, [sp, #16]
   115c0:	2b01      	cmp	r3, #1
   115c2:	d121      	bne.n	11608 <role_disable+0x290>
		if (_radio.role != ROLE_NONE) {
   115c4:	4b17      	ldr	r3, [pc, #92]	; (11624 <role_disable+0x2ac>)
   115c6:	7bdb      	ldrb	r3, [r3, #15]
   115c8:	2b00      	cmp	r3, #0
   115ca:	f43f af2e 	beq.w	1142a <role_disable+0xb2>
			s_mfy_radio_stop.param = (void *)STATE_STOP;
   115ce:	4b19      	ldr	r3, [pc, #100]	; (11634 <role_disable+0x2bc>)
   115d0:	2204      	movs	r2, #4
   115d2:	609a      	str	r2, [r3, #8]
			retval = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
   115d4:	2200      	movs	r2, #0
   115d6:	4611      	mov	r1, r2
   115d8:	2003      	movs	r0, #3
   115da:	f7fc ff89 	bl	e4f0 <mayfly_enqueue>
			LL_ASSERT(!retval);
   115de:	b1e0      	cbz	r0, 1161a <role_disable+0x2a2>
   115e0:	4040      	eors	r0, r0
   115e2:	f380 8811 	msr	BASEPRI, r0
   115e6:	f04f 0004 	mov.w	r0, #4
   115ea:	df02      	svc	2
				mayfly_enable(RADIO_TICKER_USER_ID_APP,
   115ec:	2201      	movs	r2, #1
   115ee:	4611      	mov	r1, r2
   115f0:	2003      	movs	r0, #3
   115f2:	f7fc ff3f 	bl	e474 <mayfly_enable>
				LL_ASSERT(ret_cb != TICKER_STATUS_BUSY);
   115f6:	9b04      	ldr	r3, [sp, #16]
   115f8:	2b02      	cmp	r3, #2
   115fa:	d1de      	bne.n	115ba <role_disable+0x242>
   115fc:	4040      	eors	r0, r0
   115fe:	f380 8811 	msr	BASEPRI, r0
   11602:	f04f 0004 	mov.w	r0, #4
   11606:	df02      	svc	2
			LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
   11608:	4040      	eors	r0, r0
   1160a:	f380 8811 	msr	BASEPRI, r0
   1160e:	f04f 0004 	mov.w	r0, #4
   11612:	df02      	svc	2
   11614:	bf20      	wfe
  __ASM volatile ("sev");
   11616:	bf40      	sev
  __ASM volatile ("wfe");
   11618:	bf20      	wfe
			while (_radio.role != ROLE_NONE) {
   1161a:	4b02      	ldr	r3, [pc, #8]	; (11624 <role_disable+0x2ac>)
   1161c:	7bdb      	ldrb	r3, [r3, #15]
   1161e:	2b00      	cmp	r3, #0
   11620:	d1f8      	bne.n	11614 <role_disable+0x29c>
   11622:	e702      	b.n	1142a <role_disable+0xb2>
   11624:	20000e84 	.word	0x20000e84
   11628:	00010af5 	.word	0x00010af5
   1162c:	2000bbe8 	.word	0x2000bbe8
   11630:	2000bca8 	.word	0x2000bca8
   11634:	2000bc18 	.word	0x2000bc18
		LL_ASSERT(0);
   11638:	4040      	eors	r0, r0
   1163a:	f380 8811 	msr	BASEPRI, r0
   1163e:	f04f 0004 	mov.w	r0, #4
   11642:	df02      	svc	2
				return 1;
   11644:	2001      	movs	r0, #1
   11646:	e6f9      	b.n	1143c <role_disable+0xc4>

00011648 <event_stop>:
{
   11648:	b508      	push	{r3, lr}
	s_mfy_radio_stop.param = context;
   1164a:	4a08      	ldr	r2, [pc, #32]	; (1166c <event_stop+0x24>)
   1164c:	6093      	str	r3, [r2, #8]
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   1164e:	4613      	mov	r3, r2
   11650:	2200      	movs	r2, #0
   11652:	4611      	mov	r1, r2
   11654:	4610      	mov	r0, r2
   11656:	f7fc ff4b 	bl	e4f0 <mayfly_enqueue>
	LL_ASSERT(!retval);
   1165a:	b900      	cbnz	r0, 1165e <event_stop+0x16>
   1165c:	bd08      	pop	{r3, pc}
   1165e:	4040      	eors	r0, r0
   11660:	f380 8811 	msr	BASEPRI, r0
   11664:	f04f 0004 	mov.w	r0, #4
   11668:	df02      	svc	2
   1166a:	bf00      	nop
   1166c:	2000bbf8 	.word	0x2000bbf8

00011670 <event_adv_stop>:
{
   11670:	b500      	push	{lr}
   11672:	b083      	sub	sp, #12
	event_stop(0, 0, 0, (void *)STATE_ABORT);
   11674:	2305      	movs	r3, #5
   11676:	2200      	movs	r2, #0
   11678:	4611      	mov	r1, r2
   1167a:	4610      	mov	r0, r2
   1167c:	f7ff ffe4 	bl	11648 <event_stop>
	ticker_status =
   11680:	f241 73e4 	movw	r3, #6116	; 0x17e4
   11684:	9300      	str	r3, [sp, #0]
   11686:	4b09      	ldr	r3, [pc, #36]	; (116ac <event_adv_stop+0x3c>)
   11688:	2205      	movs	r2, #5
   1168a:	2100      	movs	r1, #0
   1168c:	4608      	mov	r0, r1
   1168e:	f7fe fddb 	bl	10248 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   11692:	b108      	cbz	r0, 11698 <event_adv_stop+0x28>
   11694:	2802      	cmp	r0, #2
   11696:	d102      	bne.n	1169e <event_adv_stop+0x2e>
}
   11698:	b003      	add	sp, #12
   1169a:	f85d fb04 	ldr.w	pc, [sp], #4
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1169e:	4040      	eors	r0, r0
   116a0:	f380 8811 	msr	BASEPRI, r0
   116a4:	f04f 0004 	mov.w	r0, #4
   116a8:	df02      	svc	2
   116aa:	bf00      	nop
   116ac:	00011f31 	.word	0x00011f31

000116b0 <event_inactive>:
{
   116b0:	b508      	push	{r3, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   116b2:	4b07      	ldr	r3, [pc, #28]	; (116d0 <event_inactive+0x20>)
   116b4:	2200      	movs	r2, #0
   116b6:	4611      	mov	r1, r2
   116b8:	4610      	mov	r0, r2
   116ba:	f7fc ff19 	bl	e4f0 <mayfly_enqueue>
	LL_ASSERT(!retval);
   116be:	b900      	cbnz	r0, 116c2 <event_inactive+0x12>
   116c0:	bd08      	pop	{r3, pc}
   116c2:	4040      	eors	r0, r0
   116c4:	f380 8811 	msr	BASEPRI, r0
   116c8:	f04f 0004 	mov.w	r0, #4
   116cc:	df02      	svc	2
   116ce:	bf00      	nop
   116d0:	2000bbc8 	.word	0x2000bbc8

000116d4 <mayfly_xtal_retain>:
{
   116d4:	b508      	push	{r3, lr}
	if (retain) {
   116d6:	b1d1      	cbz	r1, 1170e <mayfly_xtal_retain+0x3a>
		if (!s_xtal_retained) {
   116d8:	4b1c      	ldr	r3, [pc, #112]	; (1174c <mayfly_xtal_retain+0x78>)
   116da:	781b      	ldrb	r3, [r3, #0]
   116dc:	b953      	cbnz	r3, 116f4 <mayfly_xtal_retain+0x20>
			LL_ASSERT(caller_id == RADIO_TICKER_USER_ID_JOB);
   116de:	2801      	cmp	r0, #1
   116e0:	d109      	bne.n	116f6 <mayfly_xtal_retain+0x22>
			s_xtal_retained = 1;
   116e2:	2201      	movs	r2, #1
   116e4:	4b19      	ldr	r3, [pc, #100]	; (1174c <mayfly_xtal_retain+0x78>)
   116e6:	701a      	strb	r2, [r3, #0]
			retval = mayfly_enqueue(caller_id,
   116e8:	4b19      	ldr	r3, [pc, #100]	; (11750 <mayfly_xtal_retain+0x7c>)
   116ea:	2200      	movs	r2, #0
   116ec:	4611      	mov	r1, r2
   116ee:	f7fc feff 	bl	e4f0 <mayfly_enqueue>
			LL_ASSERT(!retval);
   116f2:	b930      	cbnz	r0, 11702 <mayfly_xtal_retain+0x2e>
   116f4:	bd08      	pop	{r3, pc}
			LL_ASSERT(caller_id == RADIO_TICKER_USER_ID_JOB);
   116f6:	4040      	eors	r0, r0
   116f8:	f380 8811 	msr	BASEPRI, r0
   116fc:	f04f 0004 	mov.w	r0, #4
   11700:	df02      	svc	2
			LL_ASSERT(!retval);
   11702:	4040      	eors	r0, r0
   11704:	f380 8811 	msr	BASEPRI, r0
   11708:	f04f 0004 	mov.w	r0, #4
   1170c:	df02      	svc	2
		if (s_xtal_retained) {
   1170e:	4b0f      	ldr	r3, [pc, #60]	; (1174c <mayfly_xtal_retain+0x78>)
   11710:	781b      	ldrb	r3, [r3, #0]
   11712:	2b00      	cmp	r3, #0
   11714:	d0ee      	beq.n	116f4 <mayfly_xtal_retain+0x20>
			s_xtal_retained = 0;
   11716:	2200      	movs	r2, #0
   11718:	4b0c      	ldr	r3, [pc, #48]	; (1174c <mayfly_xtal_retain+0x78>)
   1171a:	701a      	strb	r2, [r3, #0]
			switch (caller_id) {
   1171c:	b138      	cbz	r0, 1172e <mayfly_xtal_retain+0x5a>
   1171e:	2801      	cmp	r0, #1
   11720:	d012      	beq.n	11748 <mayfly_xtal_retain+0x74>
				LL_ASSERT(0);
   11722:	4040      	eors	r0, r0
   11724:	f380 8811 	msr	BASEPRI, r0
   11728:	f04f 0004 	mov.w	r0, #4
   1172c:	df02      	svc	2
				p_mfy_xtal_stop = &s_mfy_xtal_stop[0];
   1172e:	4b09      	ldr	r3, [pc, #36]	; (11754 <mayfly_xtal_retain+0x80>)
			retval = mayfly_enqueue(caller_id,
   11730:	2200      	movs	r2, #0
   11732:	4611      	mov	r1, r2
   11734:	f7fc fedc 	bl	e4f0 <mayfly_enqueue>
			LL_ASSERT(!retval);
   11738:	2800      	cmp	r0, #0
   1173a:	d0db      	beq.n	116f4 <mayfly_xtal_retain+0x20>
   1173c:	4040      	eors	r0, r0
   1173e:	f380 8811 	msr	BASEPRI, r0
   11742:	f04f 0004 	mov.w	r0, #4
   11746:	df02      	svc	2
				p_mfy_xtal_stop = &s_mfy_xtal_stop[1];
   11748:	4b03      	ldr	r3, [pc, #12]	; (11758 <mayfly_xtal_retain+0x84>)
   1174a:	e7f1      	b.n	11730 <mayfly_xtal_retain+0x5c>
   1174c:	200013fc 	.word	0x200013fc
   11750:	2000bc68 	.word	0x2000bc68
   11754:	2000bc78 	.word	0x2000bc78
   11758:	2000bc88 	.word	0x2000bc88

0001175c <event_active>:
{
   1175c:	b508      	push	{r3, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   1175e:	4b07      	ldr	r3, [pc, #28]	; (1177c <event_active+0x20>)
   11760:	2200      	movs	r2, #0
   11762:	4611      	mov	r1, r2
   11764:	4610      	mov	r0, r2
   11766:	f7fc fec3 	bl	e4f0 <mayfly_enqueue>
	LL_ASSERT(!retval);
   1176a:	b900      	cbnz	r0, 1176e <event_active+0x12>
   1176c:	bd08      	pop	{r3, pc}
   1176e:	4040      	eors	r0, r0
   11770:	f380 8811 	msr	BASEPRI, r0
   11774:	f04f 0004 	mov.w	r0, #4
   11778:	df02      	svc	2
   1177a:	bf00      	nop
   1177c:	2000bbb8 	.word	0x2000bbb8

00011780 <event_xtal>:
{
   11780:	b508      	push	{r3, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   11782:	4b07      	ldr	r3, [pc, #28]	; (117a0 <event_xtal+0x20>)
   11784:	2200      	movs	r2, #0
   11786:	4611      	mov	r1, r2
   11788:	4610      	mov	r0, r2
   1178a:	f7fc feb1 	bl	e4f0 <mayfly_enqueue>
	LL_ASSERT(!retval);
   1178e:	b900      	cbnz	r0, 11792 <event_xtal+0x12>
   11790:	bd08      	pop	{r3, pc}
   11792:	4040      	eors	r0, r0
   11794:	f380 8811 	msr	BASEPRI, r0
   11798:	f04f 0004 	mov.w	r0, #4
   1179c:	df02      	svc	2
   1179e:	bf00      	nop
   117a0:	2000bc58 	.word	0x2000bc58

000117a4 <mayfly_radio_active>:
{
   117a4:	b508      	push	{r3, lr}
	if ((u32_t)params) {
   117a6:	b148      	cbz	r0, 117bc <mayfly_radio_active+0x18>
		if (s_active++) {
   117a8:	4a0e      	ldr	r2, [pc, #56]	; (117e4 <mayfly_radio_active+0x40>)
   117aa:	7813      	ldrb	r3, [r2, #0]
   117ac:	1c59      	adds	r1, r3, #1
   117ae:	7011      	strb	r1, [r2, #0]
   117b0:	b103      	cbz	r3, 117b4 <mayfly_radio_active+0x10>
   117b2:	bd08      	pop	{r3, pc}
		radio_active_callback(1);
   117b4:	2001      	movs	r0, #1
   117b6:	f007 f8a5 	bl	18904 <radio_active_callback>
   117ba:	bd08      	pop	{r3, pc}
		LL_ASSERT(s_active);
   117bc:	4b09      	ldr	r3, [pc, #36]	; (117e4 <mayfly_radio_active+0x40>)
   117be:	781b      	ldrb	r3, [r3, #0]
   117c0:	b14b      	cbz	r3, 117d6 <mayfly_radio_active+0x32>
		if (--s_active) {
   117c2:	3b01      	subs	r3, #1
   117c4:	b2db      	uxtb	r3, r3
   117c6:	4a07      	ldr	r2, [pc, #28]	; (117e4 <mayfly_radio_active+0x40>)
   117c8:	7013      	strb	r3, [r2, #0]
   117ca:	2b00      	cmp	r3, #0
   117cc:	d1f1      	bne.n	117b2 <mayfly_radio_active+0xe>
		radio_active_callback(0);
   117ce:	2000      	movs	r0, #0
   117d0:	f007 f898 	bl	18904 <radio_active_callback>
   117d4:	e7ed      	b.n	117b2 <mayfly_radio_active+0xe>
		LL_ASSERT(s_active);
   117d6:	4040      	eors	r0, r0
   117d8:	f380 8811 	msr	BASEPRI, r0
   117dc:	f04f 0004 	mov.w	r0, #4
   117e0:	df02      	svc	2
   117e2:	bf00      	nop
   117e4:	20001368 	.word	0x20001368

000117e8 <mayfly_radio_inactive>:
{
   117e8:	b508      	push	{r3, lr}
	mayfly_radio_active(0);
   117ea:	2000      	movs	r0, #0
   117ec:	f7ff ffda 	bl	117a4 <mayfly_radio_active>
   117f0:	bd08      	pop	{r3, pc}
	...

000117f4 <mayfly_radio_stop>:
{
   117f4:	b538      	push	{r3, r4, r5, lr}
	enum state state = (enum state)((u32_t)params & 0xff);
   117f6:	b2c4      	uxtb	r4, r0
	LL_ASSERT((state == STATE_STOP) || (state == STATE_ABORT));
   117f8:	1f23      	subs	r3, r4, #4
   117fa:	b2db      	uxtb	r3, r3
   117fc:	2b01      	cmp	r3, #1
   117fe:	d808      	bhi.n	11812 <mayfly_radio_stop+0x1e>
	radio_used = ((_radio.state != STATE_NONE) &&
   11800:	4b10      	ldr	r3, [pc, #64]	; (11844 <mayfly_radio_stop+0x50>)
   11802:	7c1b      	ldrb	r3, [r3, #16]
		      (_radio.state != STATE_STOP) &&
   11804:	b16b      	cbz	r3, 11822 <mayfly_radio_stop+0x2e>
	radio_used = ((_radio.state != STATE_NONE) &&
   11806:	2b04      	cmp	r3, #4
   11808:	d014      	beq.n	11834 <mayfly_radio_stop+0x40>
		      (_radio.state != STATE_STOP) &&
   1180a:	2b05      	cmp	r3, #5
   1180c:	d007      	beq.n	1181e <mayfly_radio_stop+0x2a>
   1180e:	2301      	movs	r3, #1
   11810:	e008      	b.n	11824 <mayfly_radio_stop+0x30>
	LL_ASSERT((state == STATE_STOP) || (state == STATE_ABORT));
   11812:	4040      	eors	r0, r0
   11814:	f380 8811 	msr	BASEPRI, r0
   11818:	f04f 0004 	mov.w	r0, #4
   1181c:	df02      	svc	2
		      (_radio.state != STATE_STOP) &&
   1181e:	2300      	movs	r3, #0
   11820:	e000      	b.n	11824 <mayfly_radio_stop+0x30>
   11822:	2300      	movs	r3, #0
	radio_used = ((_radio.state != STATE_NONE) &&
   11824:	461d      	mov	r5, r3
	if (radio_used || !radio_is_idle()) {
   11826:	b13b      	cbz	r3, 11838 <mayfly_radio_stop+0x44>
		if (radio_used) {
   11828:	b10d      	cbz	r5, 1182e <mayfly_radio_stop+0x3a>
			_radio.state = state;
   1182a:	4b06      	ldr	r3, [pc, #24]	; (11844 <mayfly_radio_stop+0x50>)
   1182c:	741c      	strb	r4, [r3, #16]
		radio_disable();
   1182e:	f7fd f9b5 	bl	eb9c <radio_disable>
   11832:	bd38      	pop	{r3, r4, r5, pc}
		      (_radio.state != STATE_STOP) &&
   11834:	2300      	movs	r3, #0
   11836:	e7f5      	b.n	11824 <mayfly_radio_stop+0x30>
	if (radio_used || !radio_is_idle()) {
   11838:	f7fd f9de 	bl	ebf8 <radio_is_idle>
   1183c:	2800      	cmp	r0, #0
   1183e:	d0f3      	beq.n	11828 <mayfly_radio_stop+0x34>
   11840:	e7f7      	b.n	11832 <mayfly_radio_stop+0x3e>
   11842:	bf00      	nop
   11844:	20000e84 	.word	0x20000e84

00011848 <adv_scan_conn_configure>:
{
   11848:	b508      	push	{r3, lr}
	radio_reset();
   1184a:	f7fd f901 	bl	ea50 <radio_reset>
	radio_tx_power_set(0);
   1184e:	2000      	movs	r0, #0
   11850:	f7fd f91a 	bl	ea88 <radio_tx_power_set>
	radio_isr_set(isr);
   11854:	4801      	ldr	r0, [pc, #4]	; (1185c <adv_scan_conn_configure+0x14>)
   11856:	f7fd f8c3 	bl	e9e0 <radio_isr_set>
   1185a:	bd08      	pop	{r3, pc}
   1185c:	0000f191 	.word	0x0000f191

00011860 <adv_scan_configure>:
{
   11860:	b570      	push	{r4, r5, r6, lr}
   11862:	b082      	sub	sp, #8
   11864:	4604      	mov	r4, r0
   11866:	460e      	mov	r6, r1
	u32_t aa = 0x8e89bed6;
   11868:	ad02      	add	r5, sp, #8
   1186a:	4b0d      	ldr	r3, [pc, #52]	; (118a0 <adv_scan_configure+0x40>)
   1186c:	f845 3d04 	str.w	r3, [r5, #-4]!
	adv_scan_conn_configure();
   11870:	f7ff ffea 	bl	11848 <adv_scan_conn_configure>
	radio_phy_set(phy, flags);
   11874:	4631      	mov	r1, r6
   11876:	4620      	mov	r0, r4
   11878:	f7fd f8f8 	bl	ea6c <radio_phy_set>
	radio_aa_set((u8_t *)&aa);
   1187c:	4628      	mov	r0, r5
   1187e:	f7fd f921 	bl	eac4 <radio_aa_set>
	radio_pkt_configure(8, PDU_AC_PAYLOAD_SIZE_MAX, (phy << 1));
   11882:	0062      	lsls	r2, r4, #1
   11884:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
   11888:	2125      	movs	r1, #37	; 0x25
   1188a:	2008      	movs	r0, #8
   1188c:	f7fd f932 	bl	eaf4 <radio_pkt_configure>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   11890:	4904      	ldr	r1, [pc, #16]	; (118a4 <adv_scan_configure+0x44>)
   11892:	f240 605b 	movw	r0, #1627	; 0x65b
   11896:	f7fd f9b9 	bl	ec0c <radio_crc_configure>
}
   1189a:	b002      	add	sp, #8
   1189c:	bd70      	pop	{r4, r5, r6, pc}
   1189e:	bf00      	nop
   118a0:	8e89bed6 	.word	0x8e89bed6
   118a4:	00555555 	.word	0x00555555

000118a8 <connection_configure>:
{
   118a8:	b510      	push	{r4, lr}
   118aa:	4604      	mov	r4, r0
	adv_scan_conn_configure();
   118ac:	f7ff ffcc 	bl	11848 <adv_scan_conn_configure>
	radio_aa_set(conn->access_addr);
   118b0:	f104 0010 	add.w	r0, r4, #16
   118b4:	f7fd f906 	bl	eac4 <radio_aa_set>
			    (((u32_t)conn->crc_init[2] << 16) |
   118b8:	7da1      	ldrb	r1, [r4, #22]
			     ((u32_t)conn->crc_init[1] << 8) |
   118ba:	7d63      	ldrb	r3, [r4, #21]
   118bc:	021b      	lsls	r3, r3, #8
			    (((u32_t)conn->crc_init[2] << 16) |
   118be:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
			     ((u32_t)conn->crc_init[0])));
   118c2:	7d21      	ldrb	r1, [r4, #20]
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   118c4:	4319      	orrs	r1, r3
   118c6:	f240 605b 	movw	r0, #1627	; 0x65b
   118ca:	f7fd f99f 	bl	ec0c <radio_crc_configure>
   118ce:	bd10      	pop	{r4, pc}

000118d0 <rx_packet_set>:
{
   118d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   118d2:	4605      	mov	r5, r0
   118d4:	460f      	mov	r7, r1
	max_rx_octets = conn->max_rx_octets;
   118d6:	8e06      	ldrh	r6, [r0, #48]	; 0x30
	phy = conn->phy_rx;
   118d8:	f890 403a 	ldrb.w	r4, [r0, #58]	; 0x3a
   118dc:	f004 0407 	and.w	r4, r4, #7
	radio_phy_set(phy, 0);
   118e0:	2100      	movs	r1, #0
   118e2:	4620      	mov	r0, r4
   118e4:	f7fd f8c2 	bl	ea6c <radio_phy_set>
	if (conn->enc_rx) {
   118e8:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
   118ec:	f013 0f10 	tst.w	r3, #16
   118f0:	d10a      	bne.n	11908 <rx_packet_set+0x38>
		radio_pkt_configure(8, max_rx_octets, (phy << 1) | 0x01);
   118f2:	0062      	lsls	r2, r4, #1
   118f4:	f042 0201 	orr.w	r2, r2, #1
   118f8:	b2f1      	uxtb	r1, r6
   118fa:	2008      	movs	r0, #8
   118fc:	f7fd f8fa 	bl	eaf4 <radio_pkt_configure>
		radio_pkt_rx_set(pdu_data_rx);
   11900:	4638      	mov	r0, r7
   11902:	f7fd f927 	bl	eb54 <radio_pkt_rx_set>
   11906:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		radio_pkt_configure(8, (max_rx_octets + 4), (phy << 1) | 0x01);
   11908:	0062      	lsls	r2, r4, #1
   1190a:	1d31      	adds	r1, r6, #4
   1190c:	f042 0201 	orr.w	r2, r2, #1
   11910:	b2c9      	uxtb	r1, r1
   11912:	2008      	movs	r0, #8
   11914:	f7fd f8ee 	bl	eaf4 <radio_pkt_configure>
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&conn->ccm_rx, phy,
   11918:	463a      	mov	r2, r7
   1191a:	4621      	mov	r1, r4
   1191c:	f105 00f9 	add.w	r0, r5, #249	; 0xf9
   11920:	f7fd fb14 	bl	ef4c <radio_ccm_rx_pkt_set>
   11924:	f7fd f916 	bl	eb54 <radio_pkt_rx_set>
   11928:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001192a <packet_rx_callback>:
{
   1192a:	b508      	push	{r3, lr}
	radio_event_callback();
   1192c:	f006 ffec 	bl	18908 <radio_event_callback>
   11930:	bd08      	pop	{r3, pc}
	...

00011934 <pdu_node_tx_release>:
{
   11934:	b538      	push	{r3, r4, r5, lr}
	last = _radio.packet_release_last + 1;
   11936:	4a14      	ldr	r2, [pc, #80]	; (11988 <pdu_node_tx_release+0x54>)
   11938:	f892 3174 	ldrb.w	r3, [r2, #372]	; 0x174
   1193c:	3301      	adds	r3, #1
   1193e:	b2db      	uxtb	r3, r3
	if (last == _radio.packet_tx_count) {
   11940:	f892 2170 	ldrb.w	r2, [r2, #368]	; 0x170
   11944:	4293      	cmp	r3, r2
   11946:	d017      	beq.n	11978 <pdu_node_tx_release+0x44>
	LL_ASSERT(last != _radio.packet_release_first);
   11948:	4a0f      	ldr	r2, [pc, #60]	; (11988 <pdu_node_tx_release+0x54>)
   1194a:	f892 2173 	ldrb.w	r2, [r2, #371]	; 0x173
   1194e:	4293      	cmp	r3, r2
   11950:	d014      	beq.n	1197c <pdu_node_tx_release+0x48>
	_radio.pkt_release[_radio.packet_release_last].handle = handle;
   11952:	4a0d      	ldr	r2, [pc, #52]	; (11988 <pdu_node_tx_release+0x54>)
   11954:	f8d2 416c 	ldr.w	r4, [r2, #364]	; 0x16c
   11958:	f892 5174 	ldrb.w	r5, [r2, #372]	; 0x174
   1195c:	f824 0035 	strh.w	r0, [r4, r5, lsl #3]
	_radio.pkt_release[_radio.packet_release_last].node_tx = node_tx;
   11960:	f8d2 016c 	ldr.w	r0, [r2, #364]	; 0x16c
   11964:	f892 4174 	ldrb.w	r4, [r2, #372]	; 0x174
   11968:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   1196c:	6041      	str	r1, [r0, #4]
	_radio.packet_release_last = last;
   1196e:	f882 3174 	strb.w	r3, [r2, #372]	; 0x174
	packet_rx_callback();
   11972:	f7ff ffda 	bl	1192a <packet_rx_callback>
   11976:	bd38      	pop	{r3, r4, r5, pc}
		last = 0;
   11978:	2300      	movs	r3, #0
   1197a:	e7e5      	b.n	11948 <pdu_node_tx_release+0x14>
	LL_ASSERT(last != _radio.packet_release_first);
   1197c:	4040      	eors	r0, r0
   1197e:	f380 8811 	msr	BASEPRI, r0
   11982:	f04f 0004 	mov.w	r0, #4
   11986:	df02      	svc	2
   11988:	20000e84 	.word	0x20000e84

0001198c <packet_tx_enqueue>:
{
   1198c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
   1198e:	e016      	b.n	119be <packet_tx_enqueue+0x32>
			if (conn->pkt_tx_data == 0) {
   11990:	f8d0 3148 	ldr.w	r3, [r0, #328]	; 0x148
   11994:	2b00      	cmp	r3, #0
   11996:	d040      	beq.n	11a1a <packet_tx_enqueue+0x8e>
			if (conn->pkt_tx_last) {
   11998:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
   1199c:	b103      	cbz	r3, 119a0 <packet_tx_enqueue+0x14>
				conn->pkt_tx_last->next = node_tx_new;
   1199e:	601d      	str	r5, [r3, #0]
			conn->pkt_tx_last = node_tx_new;
   119a0:	f8c0 514c 	str.w	r5, [r0, #332]	; 0x14c
		first = _radio.packet_tx_first + 1;
   119a4:	4a24      	ldr	r2, [pc, #144]	; (11a38 <packet_tx_enqueue+0xac>)
   119a6:	f892 3171 	ldrb.w	r3, [r2, #369]	; 0x171
   119aa:	3301      	adds	r3, #1
   119ac:	b2db      	uxtb	r3, r3
		if (first == _radio.packet_tx_count) {
   119ae:	f892 2170 	ldrb.w	r2, [r2, #368]	; 0x170
   119b2:	4293      	cmp	r3, r2
   119b4:	d03c      	beq.n	11a30 <packet_tx_enqueue+0xa4>
		_radio.packet_tx_first = first;
   119b6:	4a20      	ldr	r2, [pc, #128]	; (11a38 <packet_tx_enqueue+0xac>)
   119b8:	f882 3171 	strb.w	r3, [r2, #369]	; 0x171
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
   119bc:	4638      	mov	r0, r7
   119be:	1e47      	subs	r7, r0, #1
   119c0:	b2ff      	uxtb	r7, r7
   119c2:	2800      	cmp	r0, #0
   119c4:	d036      	beq.n	11a34 <packet_tx_enqueue+0xa8>
   119c6:	4a1c      	ldr	r2, [pc, #112]	; (11a38 <packet_tx_enqueue+0xac>)
   119c8:	f892 3171 	ldrb.w	r3, [r2, #369]	; 0x171
   119cc:	b2db      	uxtb	r3, r3
   119ce:	f892 2172 	ldrb.w	r2, [r2, #370]	; 0x172
   119d2:	4293      	cmp	r3, r2
   119d4:	d02e      	beq.n	11a34 <packet_tx_enqueue+0xa8>
		pdu_data_q_tx = &_radio.pkt_tx[_radio.packet_tx_first];
   119d6:	4b18      	ldr	r3, [pc, #96]	; (11a38 <packet_tx_enqueue+0xac>)
   119d8:	f8d3 6168 	ldr.w	r6, [r3, #360]	; 0x168
   119dc:	f893 4171 	ldrb.w	r4, [r3, #369]	; 0x171
   119e0:	b2e4      	uxtb	r4, r4
   119e2:	eb06 02c4 	add.w	r2, r6, r4, lsl #3
		node_tx_new = pdu_data_q_tx->node_tx;
   119e6:	6855      	ldr	r5, [r2, #4]
		node_tx_new->next = NULL;
   119e8:	2200      	movs	r2, #0
   119ea:	602a      	str	r2, [r5, #0]
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
   119ec:	f836 2034 	ldrh.w	r2, [r6, r4, lsl #3]
   119f0:	f44f 71aa 	mov.w	r1, #340	; 0x154
   119f4:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
   119f8:	f7fc fef8 	bl	e7ec <mem_get>
		if (conn->handle == pdu_data_q_tx->handle) {
   119fc:	8c02      	ldrh	r2, [r0, #32]
   119fe:	f836 3034 	ldrh.w	r3, [r6, r4, lsl #3]
   11a02:	429a      	cmp	r2, r3
   11a04:	d0c4      	beq.n	11990 <packet_tx_enqueue+0x4>
			pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
   11a06:	792b      	ldrb	r3, [r5, #4]
   11a08:	f36f 0301 	bfc	r3, #0, #2
   11a0c:	712b      	strb	r3, [r5, #4]
			pdu_node_tx_release(pdu_data_q_tx->handle, node_tx_new);
   11a0e:	4629      	mov	r1, r5
   11a10:	f836 0034 	ldrh.w	r0, [r6, r4, lsl #3]
   11a14:	f7ff ff8e 	bl	11934 <pdu_node_tx_release>
   11a18:	e7c4      	b.n	119a4 <packet_tx_enqueue+0x18>
				conn->pkt_tx_data = node_tx_new;
   11a1a:	f8c0 5148 	str.w	r5, [r0, #328]	; 0x148
				if (conn->pkt_tx_head == 0) {
   11a1e:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
   11a22:	2b00      	cmp	r3, #0
   11a24:	d1b8      	bne.n	11998 <packet_tx_enqueue+0xc>
					conn->pkt_tx_head = node_tx_new;
   11a26:	f8c0 513c 	str.w	r5, [r0, #316]	; 0x13c
					conn->pkt_tx_last = NULL;
   11a2a:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
   11a2e:	e7b3      	b.n	11998 <packet_tx_enqueue+0xc>
			first = 0;
   11a30:	2300      	movs	r3, #0
   11a32:	e7c0      	b.n	119b6 <packet_tx_enqueue+0x2a>
   11a34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11a36:	bf00      	nop
   11a38:	20000e84 	.word	0x20000e84

00011a3c <connection_release>:
{
   11a3c:	b510      	push	{r4, lr}
   11a3e:	b082      	sub	sp, #8
   11a40:	4604      	mov	r4, r0
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
   11a42:	2201      	movs	r2, #1
   11a44:	4611      	mov	r1, r2
   11a46:	2000      	movs	r0, #0
   11a48:	f7fc fd14 	bl	e474 <mayfly_enable>
			    (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle),
   11a4c:	8c22      	ldrh	r2, [r4, #32]
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   11a4e:	3207      	adds	r2, #7
	ticker_status =
   11a50:	f242 2345 	movw	r3, #8773	; 0x2245
   11a54:	9300      	str	r3, [sp, #0]
   11a56:	4b46      	ldr	r3, [pc, #280]	; (11b70 <connection_release+0x134>)
   11a58:	b2d2      	uxtb	r2, r2
   11a5a:	2100      	movs	r1, #0
   11a5c:	4608      	mov	r0, r1
   11a5e:	f7fe fbf3 	bl	10248 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   11a62:	b108      	cbz	r0, 11a68 <connection_release+0x2c>
   11a64:	2802      	cmp	r0, #2
   11a66:	d12a      	bne.n	11abe <connection_release+0x82>
	if ((_radio.state == STATE_ABORT) &&
   11a68:	4b42      	ldr	r3, [pc, #264]	; (11b74 <connection_release+0x138>)
   11a6a:	7c1b      	ldrb	r3, [r3, #16]
   11a6c:	2b05      	cmp	r3, #5
   11a6e:	d13e      	bne.n	11aee <connection_release+0xb2>
	    (_radio.ticker_id_prepare == (RADIO_TICKER_ID_FIRST_CONNECTION +
   11a70:	4b40      	ldr	r3, [pc, #256]	; (11b74 <connection_release+0x138>)
   11a72:	7b1a      	ldrb	r2, [r3, #12]
   11a74:	b2d2      	uxtb	r2, r2
					  conn->handle))) {
   11a76:	8c23      	ldrh	r3, [r4, #32]
	    (_radio.ticker_id_prepare == (RADIO_TICKER_ID_FIRST_CONNECTION +
   11a78:	3307      	adds	r3, #7
	if ((_radio.state == STATE_ABORT) &&
   11a7a:	429a      	cmp	r2, r3
   11a7c:	d137      	bne.n	11aee <connection_release+0xb2>
		_radio.ticker_id_prepare = 0;
   11a7e:	2000      	movs	r0, #0
   11a80:	4b3c      	ldr	r3, [pc, #240]	; (11b74 <connection_release+0x138>)
   11a82:	7318      	strb	r0, [r3, #12]
		ticker_status =
   11a84:	f242 2356 	movw	r3, #8790	; 0x2256
   11a88:	9300      	str	r3, [sp, #0]
   11a8a:	4b39      	ldr	r3, [pc, #228]	; (11b70 <connection_release+0x134>)
   11a8c:	2201      	movs	r2, #1
   11a8e:	4601      	mov	r1, r0
   11a90:	f7fe fbda 	bl	10248 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   11a94:	b108      	cbz	r0, 11a9a <connection_release+0x5e>
   11a96:	2802      	cmp	r0, #2
   11a98:	d117      	bne.n	11aca <connection_release+0x8e>
		ticker_status =
   11a9a:	f242 235d 	movw	r3, #8797	; 0x225d
   11a9e:	9300      	str	r3, [sp, #0]
   11aa0:	4b33      	ldr	r3, [pc, #204]	; (11b70 <connection_release+0x134>)
   11aa2:	2200      	movs	r2, #0
   11aa4:	4611      	mov	r1, r2
   11aa6:	4610      	mov	r0, r2
   11aa8:	f7fe fbce 	bl	10248 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   11aac:	b1f8      	cbz	r0, 11aee <connection_release+0xb2>
   11aae:	2802      	cmp	r0, #2
   11ab0:	d01d      	beq.n	11aee <connection_release+0xb2>
   11ab2:	4040      	eors	r0, r0
   11ab4:	f380 8811 	msr	BASEPRI, r0
   11ab8:	f04f 0004 	mov.w	r0, #4
   11abc:	df02      	svc	2
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   11abe:	4040      	eors	r0, r0
   11ac0:	f380 8811 	msr	BASEPRI, r0
   11ac4:	f04f 0004 	mov.w	r0, #4
   11ac8:	df02      	svc	2
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   11aca:	4040      	eors	r0, r0
   11acc:	f380 8811 	msr	BASEPRI, r0
   11ad0:	f04f 0004 	mov.w	r0, #4
   11ad4:	df02      	svc	2
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
   11ad6:	790b      	ldrb	r3, [r1, #4]
   11ad8:	f36f 0301 	bfc	r3, #0, #2
   11adc:	710b      	strb	r3, [r1, #4]
		conn->pkt_tx_head = conn->pkt_tx_head->next;
   11ade:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
   11ae2:	681b      	ldr	r3, [r3, #0]
   11ae4:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
		pdu_node_tx_release(conn->handle, node_tx);
   11ae8:	8c20      	ldrh	r0, [r4, #32]
   11aea:	f7ff ff23 	bl	11934 <pdu_node_tx_release>
	while ((conn->pkt_tx_head != conn->pkt_tx_ctrl) &&
   11aee:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
   11af2:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   11af6:	4299      	cmp	r1, r3
   11af8:	d00c      	beq.n	11b14 <connection_release+0xd8>
	       (conn->pkt_tx_head != conn->pkt_tx_data)) {
   11afa:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
	while ((conn->pkt_tx_head != conn->pkt_tx_ctrl) &&
   11afe:	4299      	cmp	r1, r3
   11b00:	d1e9      	bne.n	11ad6 <connection_release+0x9a>
   11b02:	e007      	b.n	11b14 <connection_release+0xd8>
		conn->pkt_tx_head = conn->pkt_tx_head->next;
   11b04:	6803      	ldr	r3, [r0, #0]
   11b06:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
		conn->pkt_tx_ctrl = conn->pkt_tx_head;
   11b0a:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
		mem_release(release, &_radio.pkt_tx_ctrl_free);
   11b0e:	491a      	ldr	r1, [pc, #104]	; (11b78 <connection_release+0x13c>)
   11b10:	f7fc fe4b 	bl	e7aa <mem_release>
	while ((conn->pkt_tx_head) &&
   11b14:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
   11b18:	b118      	cbz	r0, 11b22 <connection_release+0xe6>
	       (conn->pkt_tx_head != conn->pkt_tx_data)) {
   11b1a:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
	while ((conn->pkt_tx_head) &&
   11b1e:	4298      	cmp	r0, r3
   11b20:	d1f0      	bne.n	11b04 <connection_release+0xc8>
	conn->pkt_tx_ctrl = NULL;
   11b22:	2300      	movs	r3, #0
   11b24:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
	conn->pkt_tx_ctrl_last = NULL;
   11b28:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
	while (conn->pkt_tx_head) {
   11b2c:	e00d      	b.n	11b4a <connection_release+0x10e>
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
   11b2e:	790b      	ldrb	r3, [r1, #4]
   11b30:	f36f 0301 	bfc	r3, #0, #2
   11b34:	710b      	strb	r3, [r1, #4]
		conn->pkt_tx_head = conn->pkt_tx_head->next;
   11b36:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
   11b3a:	681b      	ldr	r3, [r3, #0]
   11b3c:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
		conn->pkt_tx_data = conn->pkt_tx_head;
   11b40:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
		pdu_node_tx_release(conn->handle, node_tx);
   11b44:	8c20      	ldrh	r0, [r4, #32]
   11b46:	f7ff fef5 	bl	11934 <pdu_node_tx_release>
	while (conn->pkt_tx_head) {
   11b4a:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
   11b4e:	2900      	cmp	r1, #0
   11b50:	d1ed      	bne.n	11b2e <connection_release+0xf2>
	conn->handle = 0xffff;
   11b52:	f64f 73ff 	movw	r3, #65535	; 0xffff
   11b56:	8423      	strh	r3, [r4, #32]
	if (_radio.conn_upd == conn) {
   11b58:	4b06      	ldr	r3, [pc, #24]	; (11b74 <connection_release+0x138>)
   11b5a:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
   11b5e:	429c      	cmp	r4, r3
   11b60:	d001      	beq.n	11b66 <connection_release+0x12a>
}
   11b62:	b002      	add	sp, #8
   11b64:	bd10      	pop	{r4, pc}
		_radio.conn_upd = NULL;
   11b66:	2200      	movs	r2, #0
   11b68:	4b02      	ldr	r3, [pc, #8]	; (11b74 <connection_release+0x138>)
   11b6a:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
}
   11b6e:	e7f8      	b.n	11b62 <connection_release+0x126>
   11b70:	00010e65 	.word	0x00010e65
   11b74:	20000e84 	.word	0x20000e84
   11b78:	20000fdc 	.word	0x20000fdc

00011b7c <chan_map_update>:
{
   11b7c:	b538      	push	{r3, r4, r5, lr}
	if (((pdu_data_rx->payload.llctrl.ctrldata.chan_map_ind.instant -
   11b7e:	f8b1 3009 	ldrh.w	r3, [r1, #9]
	      conn->event_counter) & 0xffff) > 0x7fff) {
   11b82:	8c42      	ldrh	r2, [r0, #34]	; 0x22
   11b84:	1a9b      	subs	r3, r3, r2
   11b86:	b29b      	uxth	r3, r3
	if (((pdu_data_rx->payload.llctrl.ctrldata.chan_map_ind.instant -
   11b88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   11b8c:	da22      	bge.n	11bd4 <chan_map_update+0x58>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   11b8e:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   11b92:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   11b96:	429a      	cmp	r2, r3
   11b98:	d116      	bne.n	11bc8 <chan_map_update+0x4c>
   11b9a:	460d      	mov	r5, r1
   11b9c:	4604      	mov	r4, r0
	memcpy(&conn->llcp.chan_map.chm[0],
   11b9e:	2205      	movs	r2, #5
   11ba0:	3104      	adds	r1, #4
   11ba2:	3079      	adds	r0, #121	; 0x79
   11ba4:	f7ee fb8c 	bl	2c0 <memcpy>
		pdu_data_rx->payload.llctrl.ctrldata.chan_map_ind.instant;
   11ba8:	f8b5 3009 	ldrh.w	r3, [r5, #9]
	conn->llcp.chan_map.instant =
   11bac:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
	conn->llcp.chan_map.initiate = 0;
   11bb0:	2000      	movs	r0, #0
   11bb2:	f884 0078 	strb.w	r0, [r4, #120]	; 0x78
	conn->llcp_type = LLCP_CHAN_MAP;
   11bb6:	2302      	movs	r3, #2
   11bb8:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
	conn->llcp_ack--;
   11bbc:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
   11bc0:	3b01      	subs	r3, #1
   11bc2:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
	return 0;
   11bc6:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   11bc8:	4040      	eors	r0, r0
   11bca:	f380 8811 	msr	BASEPRI, r0
   11bce:	f04f 0004 	mov.w	r0, #4
   11bd2:	df02      	svc	2
		return 1;
   11bd4:	2001      	movs	r0, #1
}
   11bd6:	bd38      	pop	{r3, r4, r5, pc}

00011bd8 <feature_rsp_send>:
{
   11bd8:	b538      	push	{r3, r4, r5, lr}
   11bda:	4605      	mov	r5, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   11bdc:	4812      	ldr	r0, [pc, #72]	; (11c28 <feature_rsp_send+0x50>)
   11bde:	f7fc fdc8 	bl	e772 <mem_acquire>
	LL_ASSERT(node_tx);
   11be2:	b1d8      	cbz	r0, 11c1c <feature_rsp_send+0x44>
   11be4:	4604      	mov	r4, r0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   11be6:	7903      	ldrb	r3, [r0, #4]
   11be8:	f043 0303 	orr.w	r3, r3, #3
   11bec:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   11bee:	2309      	movs	r3, #9
   11bf0:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
   11bf2:	71c3      	strb	r3, [r0, #7]
	memset(&pdu_ctrl_tx->payload.llctrl.ctrldata.feature_rsp.features[0],
   11bf4:	2208      	movs	r2, #8
   11bf6:	2100      	movs	r1, #0
   11bf8:	4410      	add	r0, r2
   11bfa:	f018 ff43 	bl	2aa84 <memset>
		conn->llcp_features & 0xFF;
   11bfe:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
	pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[0] =
   11c02:	7223      	strb	r3, [r4, #8]
		(conn->llcp_features >> 8) & 0xFF;
   11c04:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
   11c08:	0a1b      	lsrs	r3, r3, #8
	pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[1] =
   11c0a:	7263      	strb	r3, [r4, #9]
		(conn->llcp_features >> 16) & 0xFF;
   11c0c:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
	pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[2] =
   11c10:	72a3      	strb	r3, [r4, #10]
	ctrl_tx_sec_enqueue(conn, node_tx);
   11c12:	4621      	mov	r1, r4
   11c14:	4628      	mov	r0, r5
   11c16:	f7ff f87c 	bl	10d12 <ctrl_tx_sec_enqueue>
   11c1a:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(node_tx);
   11c1c:	4040      	eors	r0, r0
   11c1e:	f380 8811 	msr	BASEPRI, r0
   11c22:	f04f 0004 	mov.w	r0, #4
   11c26:	df02      	svc	2
   11c28:	20000fdc 	.word	0x20000fdc

00011c2c <empty_tx_enqueue>:
{
   11c2c:	b510      	push	{r4, lr}
   11c2e:	4604      	mov	r4, r0
	conn->empty = 1;
   11c30:	f890 30f8 	ldrb.w	r3, [r0, #248]	; 0xf8
   11c34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   11c38:	f880 30f8 	strb.w	r3, [r0, #248]	; 0xf8
	pdu_data_tx = (struct pdu_data *)radio_pkt_empty_get();
   11c3c:	f7fc fffc 	bl	ec38 <radio_pkt_empty_get>
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   11c40:	7803      	ldrb	r3, [r0, #0]
   11c42:	2201      	movs	r2, #1
   11c44:	f362 0301 	bfi	r3, r2, #0, #2
   11c48:	7003      	strb	r3, [r0, #0]
	pdu_data_tx->len = 0;
   11c4a:	2300      	movs	r3, #0
   11c4c:	7043      	strb	r3, [r0, #1]
	if (conn->pkt_tx_head) {
   11c4e:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
   11c52:	b123      	cbz	r3, 11c5e <empty_tx_enqueue+0x32>
		pdu_data_tx->md = 1;
   11c54:	7803      	ldrb	r3, [r0, #0]
   11c56:	f043 0310 	orr.w	r3, r3, #16
   11c5a:	7003      	strb	r3, [r0, #0]
   11c5c:	bd10      	pop	{r4, pc}
		pdu_data_tx->md = 0;
   11c5e:	7803      	ldrb	r3, [r0, #0]
   11c60:	f36f 1304 	bfc	r3, #4, #1
   11c64:	7003      	strb	r3, [r0, #0]
}
   11c66:	bd10      	pop	{r4, pc}

00011c68 <prepare_pdu_data_tx>:
{
   11c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11c6a:	460c      	mov	r4, r1
	    conn->empty ||
   11c6c:	f890 20f8 	ldrb.w	r2, [r0, #248]	; 0xf8
	if (/* empty packet */
   11c70:	f012 0f80 	tst.w	r2, #128	; 0x80
   11c74:	d109      	bne.n	11c8a <prepare_pdu_data_tx+0x22>
	    !conn->pkt_tx_head ||
   11c76:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
	    conn->empty ||
   11c7a:	b133      	cbz	r3, 11c8a <prepare_pdu_data_tx+0x22>
	    !conn->pkt_tx_head ||
   11c7c:	f012 0f08 	tst.w	r2, #8
   11c80:	d00e      	beq.n	11ca0 <prepare_pdu_data_tx+0x38>
	    (conn->pause_tx && (conn->pkt_tx_head != conn->pkt_tx_ctrl))) {
   11c82:	f8d0 2140 	ldr.w	r2, [r0, #320]	; 0x140
   11c86:	4293      	cmp	r3, r2
   11c88:	d00a      	beq.n	11ca0 <prepare_pdu_data_tx+0x38>
			_pdu_data_tx = empty_tx_enqueue(conn);
   11c8a:	f7ff ffcf 	bl	11c2c <empty_tx_enqueue>
   11c8e:	4602      	mov	r2, r0
	_pdu_data_tx->rfu = 0;
   11c90:	7813      	ldrb	r3, [r2, #0]
   11c92:	f36f 1347 	bfc	r3, #5, #3
   11c96:	7013      	strb	r3, [r2, #0]
	_pdu_data_tx->resv = 0;
   11c98:	2300      	movs	r3, #0
   11c9a:	7093      	strb	r3, [r2, #2]
	*pdu_data_tx = _pdu_data_tx;
   11c9c:	6022      	str	r2, [r4, #0]
   11c9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		_pdu_data_tx = (void *)(conn->pkt_tx_head->pdu_data +
   11ca0:	3304      	adds	r3, #4
					conn->packet_tx_head_offset);
   11ca2:	f890 6151 	ldrb.w	r6, [r0, #337]	; 0x151
		_pdu_data_tx = (void *)(conn->pkt_tx_head->pdu_data +
   11ca6:	199a      	adds	r2, r3, r6
		if (!conn->packet_tx_head_len) {
   11ca8:	f890 1150 	ldrb.w	r1, [r0, #336]	; 0x150
   11cac:	b911      	cbnz	r1, 11cb4 <prepare_pdu_data_tx+0x4c>
			conn->packet_tx_head_len = _pdu_data_tx->len;
   11cae:	7851      	ldrb	r1, [r2, #1]
   11cb0:	f880 1150 	strb.w	r1, [r0, #336]	; 0x150
		if (conn->packet_tx_head_offset) {
   11cb4:	b126      	cbz	r6, 11cc0 <prepare_pdu_data_tx+0x58>
			_pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   11cb6:	5d99      	ldrb	r1, [r3, r6]
   11cb8:	2501      	movs	r5, #1
   11cba:	f365 0101 	bfi	r1, r5, #0, #2
   11cbe:	5599      	strb	r1, [r3, r6]
		_pdu_data_tx->len = conn->packet_tx_head_len -
   11cc0:	f890 5150 	ldrb.w	r5, [r0, #336]	; 0x150
				    conn->packet_tx_head_offset;
   11cc4:	f890 1151 	ldrb.w	r1, [r0, #337]	; 0x151
		_pdu_data_tx->len = conn->packet_tx_head_len -
   11cc8:	1a6d      	subs	r5, r5, r1
   11cca:	b2ed      	uxtb	r5, r5
   11ccc:	7055      	strb	r5, [r2, #1]
		_pdu_data_tx->md = 0;
   11cce:	5d99      	ldrb	r1, [r3, r6]
   11cd0:	f36f 1104 	bfc	r1, #4, #1
   11cd4:	5599      	strb	r1, [r3, r6]
		switch (conn->phy_tx_time) {
   11cd6:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
   11cda:	f001 0107 	and.w	r1, r1, #7
   11cde:	2902      	cmp	r1, #2
   11ce0:	d02d      	beq.n	11d3e <prepare_pdu_data_tx+0xd6>
			max_tx_octets = (conn->max_tx_time >> 3) - 10;
   11ce2:	8e81      	ldrh	r1, [r0, #52]	; 0x34
   11ce4:	08c9      	lsrs	r1, r1, #3
   11ce6:	390a      	subs	r1, #10
   11ce8:	b289      	uxth	r1, r1
		if (conn->enc_tx) {
   11cea:	f890 70f8 	ldrb.w	r7, [r0, #248]	; 0xf8
   11cee:	f017 0f20 	tst.w	r7, #32
   11cf2:	d001      	beq.n	11cf8 <prepare_pdu_data_tx+0x90>
			max_tx_octets -= 4;
   11cf4:	3904      	subs	r1, #4
   11cf6:	b289      	uxth	r1, r1
		if (max_tx_octets > conn->max_tx_octets) {
   11cf8:	8dc7      	ldrh	r7, [r0, #46]	; 0x2e
   11cfa:	42b9      	cmp	r1, r7
   11cfc:	d800      	bhi.n	11d00 <prepare_pdu_data_tx+0x98>
   11cfe:	460f      	mov	r7, r1
		if (_pdu_data_tx->len > max_tx_octets) {
   11d00:	b2ad      	uxth	r5, r5
   11d02:	42af      	cmp	r7, r5
   11d04:	d204      	bcs.n	11d10 <prepare_pdu_data_tx+0xa8>
			_pdu_data_tx->len = max_tx_octets;
   11d06:	7057      	strb	r7, [r2, #1]
			_pdu_data_tx->md = 1;
   11d08:	5d99      	ldrb	r1, [r3, r6]
   11d0a:	f041 0110 	orr.w	r1, r1, #16
   11d0e:	5599      	strb	r1, [r3, r6]
		if (conn->pkt_tx_head->next) {
   11d10:	f8d0 113c 	ldr.w	r1, [r0, #316]	; 0x13c
   11d14:	6809      	ldr	r1, [r1, #0]
   11d16:	b119      	cbz	r1, 11d20 <prepare_pdu_data_tx+0xb8>
			_pdu_data_tx->md = 1;
   11d18:	5d99      	ldrb	r1, [r3, r6]
   11d1a:	f041 0110 	orr.w	r1, r1, #16
   11d1e:	5599      	strb	r1, [r3, r6]
		if (!conn->pkt_tx_ctrl &&
   11d20:	f8d0 3140 	ldr.w	r3, [r0, #320]	; 0x140
   11d24:	2b00      	cmp	r3, #0
   11d26:	d1b3      	bne.n	11c90 <prepare_pdu_data_tx+0x28>
		    (conn->pkt_tx_head != conn->pkt_tx_data)) {
   11d28:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
   11d2c:	f8d0 1148 	ldr.w	r1, [r0, #328]	; 0x148
		if (!conn->pkt_tx_ctrl &&
   11d30:	428b      	cmp	r3, r1
   11d32:	d0ad      	beq.n	11c90 <prepare_pdu_data_tx+0x28>
			conn->pkt_tx_ctrl = conn->pkt_tx_ctrl_last =
   11d34:	f8c0 3144 	str.w	r3, [r0, #324]	; 0x144
   11d38:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
   11d3c:	e7a8      	b.n	11c90 <prepare_pdu_data_tx+0x28>
			max_tx_octets = (conn->max_tx_time >> 2) - 11;
   11d3e:	8e81      	ldrh	r1, [r0, #52]	; 0x34
   11d40:	0889      	lsrs	r1, r1, #2
   11d42:	390b      	subs	r1, #11
   11d44:	b289      	uxth	r1, r1
			break;
   11d46:	e7d0      	b.n	11cea <prepare_pdu_data_tx+0x82>

00011d48 <version_ind_send>:
{
   11d48:	b510      	push	{r4, lr}
   11d4a:	4604      	mov	r4, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   11d4c:	4810      	ldr	r0, [pc, #64]	; (11d90 <version_ind_send+0x48>)
   11d4e:	f7fc fd10 	bl	e772 <mem_acquire>
	LL_ASSERT(node_tx);
   11d52:	b1b8      	cbz	r0, 11d84 <version_ind_send+0x3c>
   11d54:	4601      	mov	r1, r0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   11d56:	7903      	ldrb	r3, [r0, #4]
   11d58:	f043 0303 	orr.w	r3, r3, #3
   11d5c:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   11d5e:	2306      	movs	r3, #6
   11d60:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   11d62:	230c      	movs	r3, #12
   11d64:	71c3      	strb	r3, [r0, #7]
	pdu_ctrl_tx->payload.llctrl.ctrldata.version_ind.version_number =
   11d66:	2309      	movs	r3, #9
   11d68:	7203      	strb	r3, [r0, #8]
	pdu_ctrl_tx->payload.llctrl.ctrldata.version_ind.company_id =
   11d6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11d6e:	7243      	strb	r3, [r0, #9]
   11d70:	7283      	strb	r3, [r0, #10]
	pdu_ctrl_tx->payload.llctrl.ctrldata.version_ind.sub_version_number =
   11d72:	72c3      	strb	r3, [r0, #11]
   11d74:	7303      	strb	r3, [r0, #12]
	ctrl_tx_sec_enqueue(conn, node_tx);
   11d76:	4620      	mov	r0, r4
   11d78:	f7fe ffcb 	bl	10d12 <ctrl_tx_sec_enqueue>
	empty_tx_enqueue(conn);
   11d7c:	4620      	mov	r0, r4
   11d7e:	f7ff ff55 	bl	11c2c <empty_tx_enqueue>
   11d82:	bd10      	pop	{r4, pc}
	LL_ASSERT(node_tx);
   11d84:	4040      	eors	r0, r0
   11d86:	f380 8811 	msr	BASEPRI, r0
   11d8a:	f04f 0004 	mov.w	r0, #4
   11d8e:	df02      	svc	2
   11d90:	20000fdc 	.word	0x20000fdc

00011d94 <tx_packet_set>:
{
   11d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11d96:	4605      	mov	r5, r0
   11d98:	460f      	mov	r7, r1
	max_tx_octets = conn->max_tx_octets;
   11d9a:	8dc6      	ldrh	r6, [r0, #46]	; 0x2e
	phy = conn->phy_tx;
   11d9c:	f890 1038 	ldrb.w	r1, [r0, #56]	; 0x38
   11da0:	f3c1 04c2 	ubfx	r4, r1, #3, #3
	radio_phy_set(phy, flags);
   11da4:	09c9      	lsrs	r1, r1, #7
   11da6:	4620      	mov	r0, r4
   11da8:	f7fc fe60 	bl	ea6c <radio_phy_set>
	if (conn->enc_tx) {
   11dac:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
   11db0:	f013 0f20 	tst.w	r3, #32
   11db4:	d10a      	bne.n	11dcc <tx_packet_set+0x38>
		radio_pkt_configure(8, max_tx_octets, (phy << 1) | 0x01);
   11db6:	0062      	lsls	r2, r4, #1
   11db8:	f042 0201 	orr.w	r2, r2, #1
   11dbc:	b2f1      	uxtb	r1, r6
   11dbe:	2008      	movs	r0, #8
   11dc0:	f7fc fe98 	bl	eaf4 <radio_pkt_configure>
		radio_pkt_tx_set(pdu_data_tx);
   11dc4:	4638      	mov	r0, r7
   11dc6:	f7fc fecb 	bl	eb60 <radio_pkt_tx_set>
   11dca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		radio_pkt_configure(8, (max_tx_octets + 4), (phy << 1) | 0x01);
   11dcc:	0062      	lsls	r2, r4, #1
   11dce:	1d31      	adds	r1, r6, #4
   11dd0:	f042 0201 	orr.w	r2, r2, #1
   11dd4:	b2c9      	uxtb	r1, r1
   11dd6:	2008      	movs	r0, #8
   11dd8:	f7fc fe8c 	bl	eaf4 <radio_pkt_configure>
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&conn->ccm_tx,
   11ddc:	4639      	mov	r1, r7
   11dde:	f505 708d 	add.w	r0, r5, #282	; 0x11a
   11de2:	f7fd f8f3 	bl	efcc <radio_ccm_tx_pkt_set>
   11de6:	f7fc febb 	bl	eb60 <radio_pkt_tx_set>
   11dea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00011dec <chan_set>:
{
   11dec:	b510      	push	{r4, lr}
   11dee:	4604      	mov	r4, r0
	switch (chan) {
   11df0:	2826      	cmp	r0, #38	; 0x26
   11df2:	d013      	beq.n	11e1c <chan_set+0x30>
   11df4:	2827      	cmp	r0, #39	; 0x27
   11df6:	d015      	beq.n	11e24 <chan_set+0x38>
   11df8:	2825      	cmp	r0, #37	; 0x25
   11dfa:	d008      	beq.n	11e0e <chan_set+0x22>
		if (chan < 11) {
   11dfc:	280a      	cmp	r0, #10
   11dfe:	d915      	bls.n	11e2c <chan_set+0x40>
		} else if (chan < 40) {
   11e00:	2827      	cmp	r0, #39	; 0x27
   11e02:	d818      	bhi.n	11e36 <chan_set+0x4a>
			radio_freq_chan_set(28 + (2 * (chan - 11)));
   11e04:	3003      	adds	r0, #3
   11e06:	0040      	lsls	r0, r0, #1
   11e08:	f7fc fe44 	bl	ea94 <radio_freq_chan_set>
   11e0c:	e002      	b.n	11e14 <chan_set+0x28>
		radio_freq_chan_set(2);
   11e0e:	2002      	movs	r0, #2
   11e10:	f7fc fe40 	bl	ea94 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   11e14:	4620      	mov	r0, r4
   11e16:	f7fc fe43 	bl	eaa0 <radio_whiten_iv_set>
   11e1a:	bd10      	pop	{r4, pc}
		radio_freq_chan_set(26);
   11e1c:	201a      	movs	r0, #26
   11e1e:	f7fc fe39 	bl	ea94 <radio_freq_chan_set>
		break;
   11e22:	e7f7      	b.n	11e14 <chan_set+0x28>
		radio_freq_chan_set(80);
   11e24:	2050      	movs	r0, #80	; 0x50
   11e26:	f7fc fe35 	bl	ea94 <radio_freq_chan_set>
		break;
   11e2a:	e7f3      	b.n	11e14 <chan_set+0x28>
			radio_freq_chan_set(4 + (2 * chan));
   11e2c:	3002      	adds	r0, #2
   11e2e:	0040      	lsls	r0, r0, #1
   11e30:	f7fc fe30 	bl	ea94 <radio_freq_chan_set>
   11e34:	e7ee      	b.n	11e14 <chan_set+0x28>
			LL_ASSERT(0);
   11e36:	4040      	eors	r0, r0
   11e38:	f380 8811 	msr	BASEPRI, r0
   11e3c:	f04f 0004 	mov.w	r0, #4
   11e40:	df02      	svc	2
	...

00011e44 <adv_setup>:
{
   11e44:	b538      	push	{r3, r4, r5, lr}
	if (_radio.advertiser.adv_data.first !=
   11e46:	4a39      	ldr	r2, [pc, #228]	; (11f2c <adv_setup+0xe8>)
   11e48:	f892 3075 	ldrb.w	r3, [r2, #117]	; 0x75
	    _radio.advertiser.adv_data.last) {
   11e4c:	f892 2076 	ldrb.w	r2, [r2, #118]	; 0x76
	if (_radio.advertiser.adv_data.first !=
   11e50:	4293      	cmp	r3, r2
   11e52:	d037      	beq.n	11ec4 <adv_setup+0x80>
		first = _radio.advertiser.adv_data.first + 1;
   11e54:	3301      	adds	r3, #1
   11e56:	b2db      	uxtb	r3, r3
		if (first == DOUBLE_BUFFER_SIZE) {
   11e58:	2b02      	cmp	r3, #2
   11e5a:	d031      	beq.n	11ec0 <adv_setup+0x7c>
		_radio.advertiser.adv_data.first = first;
   11e5c:	4a33      	ldr	r2, [pc, #204]	; (11f2c <adv_setup+0xe8>)
   11e5e:	f882 3075 	strb.w	r3, [r2, #117]	; 0x75
		upd = 1;
   11e62:	2101      	movs	r1, #1
	if (_radio.advertiser.scan_data.first != _radio.
   11e64:	4a31      	ldr	r2, [pc, #196]	; (11f2c <adv_setup+0xe8>)
   11e66:	f892 30c5 	ldrb.w	r3, [r2, #197]	; 0xc5
	    advertiser.scan_data.last) {
   11e6a:	f892 20c6 	ldrb.w	r2, [r2, #198]	; 0xc6
	if (_radio.advertiser.scan_data.first != _radio.
   11e6e:	4293      	cmp	r3, r2
   11e70:	d007      	beq.n	11e82 <adv_setup+0x3e>
		first = _radio.advertiser.scan_data.first + 1;
   11e72:	3301      	adds	r3, #1
   11e74:	b2db      	uxtb	r3, r3
		if (first == DOUBLE_BUFFER_SIZE) {
   11e76:	2b02      	cmp	r3, #2
   11e78:	d026      	beq.n	11ec8 <adv_setup+0x84>
		_radio.advertiser.scan_data.first = first;
   11e7a:	4a2c      	ldr	r2, [pc, #176]	; (11f2c <adv_setup+0xe8>)
   11e7c:	f882 30c5 	strb.w	r3, [r2, #197]	; 0xc5
		upd = 1;
   11e80:	2101      	movs	r1, #1
			_radio.advertiser.adv_data.first];
   11e82:	4c2a      	ldr	r4, [pc, #168]	; (11f2c <adv_setup+0xe8>)
   11e84:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
	pdu = (struct pdu_adv *)
   11e88:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   11e8c:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
   11e90:	3320      	adds	r3, #32
   11e92:	441c      	add	r4, r3
   11e94:	1de5      	adds	r5, r4, #7
	if (upd) {
   11e96:	b9c9      	cbnz	r1, 11ecc <adv_setup+0x88>
	radio_pkt_tx_set(pdu);
   11e98:	4628      	mov	r0, r5
   11e9a:	f7fc fe61 	bl	eb60 <radio_pkt_tx_set>
	if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
   11e9e:	79e3      	ldrb	r3, [r4, #7]
   11ea0:	f003 030f 	and.w	r3, r3, #15
   11ea4:	2b02      	cmp	r3, #2
   11ea6:	d020      	beq.n	11eea <adv_setup+0xa6>
   11ea8:	2b07      	cmp	r3, #7
   11eaa:	d01e      	beq.n	11eea <adv_setup+0xa6>
		_radio.state = STATE_TX;
   11eac:	2202      	movs	r2, #2
   11eae:	4b1f      	ldr	r3, [pc, #124]	; (11f2c <adv_setup+0xe8>)
   11eb0:	741a      	strb	r2, [r3, #16]
		radio_tmr_tifs_set(RADIO_TIFS);
   11eb2:	2096      	movs	r0, #150	; 0x96
   11eb4:	f7fc ff7a 	bl	edac <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
   11eb8:	2000      	movs	r0, #0
   11eba:	f7fc fec5 	bl	ec48 <radio_switch_complete_and_rx>
   11ebe:	e019      	b.n	11ef4 <adv_setup+0xb0>
			first = 0;
   11ec0:	2300      	movs	r3, #0
   11ec2:	e7cb      	b.n	11e5c <adv_setup+0x18>
	u8_t upd = 0;
   11ec4:	2100      	movs	r1, #0
   11ec6:	e7cd      	b.n	11e64 <adv_setup+0x20>
			first = 0;
   11ec8:	2300      	movs	r3, #0
   11eca:	e7d6      	b.n	11e7a <adv_setup+0x36>
			_radio.advertiser.scan_data.first];
   11ecc:	4817      	ldr	r0, [pc, #92]	; (11f2c <adv_setup+0xe8>)
   11ece:	f890 30c5 	ldrb.w	r3, [r0, #197]	; 0xc5
		struct pdu_adv *scan_pdu = (struct pdu_adv *)
   11ed2:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   11ed6:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
   11eda:	3370      	adds	r3, #112	; 0x70
   11edc:	4418      	add	r0, r3
		memcpy(&scan_pdu->payload.scan_rsp.addr[0],
   11ede:	2206      	movs	r2, #6
   11ee0:	1ca9      	adds	r1, r5, #2
   11ee2:	3009      	adds	r0, #9
   11ee4:	f7ee f9ec 	bl	2c0 <memcpy>
   11ee8:	e7d6      	b.n	11e98 <adv_setup+0x54>
		_radio.state = STATE_CLOSE;
   11eea:	2203      	movs	r2, #3
   11eec:	4b0f      	ldr	r3, [pc, #60]	; (11f2c <adv_setup+0xe8>)
   11eee:	741a      	strb	r2, [r3, #16]
		radio_switch_complete_and_disable();
   11ef0:	f7fc feba 	bl	ec68 <radio_switch_complete_and_disable>
	bitmap = _radio.advertiser.chan_map_current;
   11ef4:	4b0d      	ldr	r3, [pc, #52]	; (11f2c <adv_setup+0xe8>)
   11ef6:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
   11efa:	f3c2 0142 	ubfx	r1, r2, #1, #3
   11efe:	b2ca      	uxtb	r2, r1
   11f00:	4613      	mov	r3, r2
	chan = 0;
   11f02:	2000      	movs	r0, #0
	while ((bitmap & 0x01) == 0) {
   11f04:	e002      	b.n	11f0c <adv_setup+0xc8>
		chan++;
   11f06:	3001      	adds	r0, #1
   11f08:	b2c0      	uxtb	r0, r0
		bitmap >>= 1;
   11f0a:	085b      	lsrs	r3, r3, #1
	while ((bitmap & 0x01) == 0) {
   11f0c:	f013 0f01 	tst.w	r3, #1
   11f10:	d0f9      	beq.n	11f06 <adv_setup+0xc2>
		(_radio.advertiser.chan_map_current - 1);
   11f12:	3a01      	subs	r2, #1
	_radio.advertiser.chan_map_current &=
   11f14:	4b05      	ldr	r3, [pc, #20]	; (11f2c <adv_setup+0xe8>)
   11f16:	400a      	ands	r2, r1
   11f18:	f893 1024 	ldrb.w	r1, [r3, #36]	; 0x24
   11f1c:	f362 0143 	bfi	r1, r2, #1, #3
   11f20:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24
	chan_set(37 + chan);
   11f24:	3025      	adds	r0, #37	; 0x25
   11f26:	f7ff ff61 	bl	11dec <chan_set>
   11f2a:	bd38      	pop	{r3, r4, r5, pc}
   11f2c:	20000e84 	.word	0x20000e84

00011f30 <ticker_stop_adv_stop>:
	if (status != TICKER_STATUS_SUCCESS) {
   11f30:	b158      	cbz	r0, 11f4a <ticker_stop_adv_stop+0x1a>
		LL_ASSERT(_radio.ticker_id_stop == RADIO_TICKER_ID_ADV);
   11f32:	4b6c      	ldr	r3, [pc, #432]	; (120e4 <ticker_stop_adv_stop+0x1b4>)
   11f34:	7b9b      	ldrb	r3, [r3, #14]
   11f36:	b2db      	uxtb	r3, r3
   11f38:	2b05      	cmp	r3, #5
   11f3a:	d100      	bne.n	11f3e <ticker_stop_adv_stop+0xe>
   11f3c:	4770      	bx	lr
   11f3e:	4040      	eors	r0, r0
   11f40:	f380 8811 	msr	BASEPRI, r0
   11f44:	f04f 0004 	mov.w	r0, #4
   11f48:	df02      	svc	2
{
   11f4a:	b500      	push	{lr}
   11f4c:	b085      	sub	sp, #20
	if ((_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV) ||
   11f4e:	4b65      	ldr	r3, [pc, #404]	; (120e4 <ticker_stop_adv_stop+0x1b4>)
   11f50:	7b1b      	ldrb	r3, [r3, #12]
   11f52:	b2db      	uxtb	r3, r3
   11f54:	2b05      	cmp	r3, #5
   11f56:	d010      	beq.n	11f7a <ticker_stop_adv_stop+0x4a>
	    (_radio.ticker_id_event == RADIO_TICKER_ID_ADV)) {
   11f58:	4b62      	ldr	r3, [pc, #392]	; (120e4 <ticker_stop_adv_stop+0x1b4>)
   11f5a:	7b5b      	ldrb	r3, [r3, #13]
   11f5c:	b2db      	uxtb	r3, r3
	if ((_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV) ||
   11f5e:	2b05      	cmp	r3, #5
   11f60:	d00b      	beq.n	11f7a <ticker_stop_adv_stop+0x4a>
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
   11f62:	4b61      	ldr	r3, [pc, #388]	; (120e8 <ticker_stop_adv_stop+0x1b8>)
   11f64:	2200      	movs	r2, #0
   11f66:	4611      	mov	r1, r2
   11f68:	2001      	movs	r0, #1
   11f6a:	f7fc fac1 	bl	e4f0 <mayfly_enqueue>
	LL_ASSERT(!retval);
   11f6e:	2800      	cmp	r0, #0
   11f70:	f040 80b1 	bne.w	120d6 <ticker_stop_adv_stop+0x1a6>
}
   11f74:	b005      	add	sp, #20
   11f76:	f85d fb04 	ldr.w	pc, [sp], #4
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   11f7a:	ab04      	add	r3, sp, #16
   11f7c:	2202      	movs	r2, #2
   11f7e:	f843 2d08 	str.w	r2, [r3, #-8]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   11f82:	9300      	str	r3, [sp, #0]
   11f84:	4b59      	ldr	r3, [pc, #356]	; (120ec <ticker_stop_adv_stop+0x1bc>)
   11f86:	2200      	movs	r2, #0
   11f88:	2101      	movs	r1, #1
   11f8a:	4610      	mov	r0, r2
   11f8c:	f7fe f95c 	bl	10248 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
   11f90:	2802      	cmp	r0, #2
   11f92:	d02c      	beq.n	11fee <ticker_stop_adv_stop+0xbe>
	if (ret_cb == TICKER_STATUS_SUCCESS) {
   11f94:	9b02      	ldr	r3, [sp, #8]
   11f96:	2b00      	cmp	r3, #0
   11f98:	d17e      	bne.n	12098 <ticker_stop_adv_stop+0x168>
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   11f9a:	2302      	movs	r3, #2
   11f9c:	9303      	str	r3, [sp, #12]
		LL_ASSERT(_radio.ticker_id_prepare);
   11f9e:	4b51      	ldr	r3, [pc, #324]	; (120e4 <ticker_stop_adv_stop+0x1b4>)
   11fa0:	7b1b      	ldrb	r3, [r3, #12]
   11fa2:	2b00      	cmp	r3, #0
   11fa4:	d031      	beq.n	1200a <ticker_stop_adv_stop+0xda>
		_radio.ticker_id_prepare = 0;
   11fa6:	2000      	movs	r0, #0
   11fa8:	4b4e      	ldr	r3, [pc, #312]	; (120e4 <ticker_stop_adv_stop+0x1b4>)
   11faa:	7318      	strb	r0, [r3, #12]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   11fac:	ab03      	add	r3, sp, #12
   11fae:	9300      	str	r3, [sp, #0]
   11fb0:	4b4e      	ldr	r3, [pc, #312]	; (120ec <ticker_stop_adv_stop+0x1bc>)
   11fb2:	2201      	movs	r2, #1
   11fb4:	4611      	mov	r1, r2
   11fb6:	f7fe f947 	bl	10248 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
   11fba:	2802      	cmp	r0, #2
   11fbc:	d02b      	beq.n	12016 <ticker_stop_adv_stop+0xe6>
		if (ret_cb == TICKER_STATUS_SUCCESS) {
   11fbe:	9b03      	ldr	r3, [sp, #12]
   11fc0:	2b00      	cmp	r3, #0
   11fc2:	d144      	bne.n	1204e <ticker_stop_adv_stop+0x11e>
			if (_radio.advertiser.hdr.ticks_active_to_start >
   11fc4:	4b47      	ldr	r3, [pc, #284]	; (120e4 <ticker_stop_adv_stop+0x1b4>)
   11fc6:	699a      	ldr	r2, [r3, #24]
			    (_radio.advertiser.hdr.ticks_xtal_to_start &
   11fc8:	695b      	ldr	r3, [r3, #20]
   11fca:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			if (_radio.advertiser.hdr.ticks_active_to_start >
   11fce:	429a      	cmp	r2, r3
   11fd0:	d92f      	bls.n	12032 <ticker_stop_adv_stop+0x102>
				retval = mayfly_enqueue(
   11fd2:	4b47      	ldr	r3, [pc, #284]	; (120f0 <ticker_stop_adv_stop+0x1c0>)
   11fd4:	2200      	movs	r2, #0
   11fd6:	4611      	mov	r1, r2
   11fd8:	2001      	movs	r0, #1
   11fda:	f7fc fa89 	bl	e4f0 <mayfly_enqueue>
				LL_ASSERT(!retval);
   11fde:	2800      	cmp	r0, #0
   11fe0:	d0bf      	beq.n	11f62 <ticker_stop_adv_stop+0x32>
   11fe2:	4040      	eors	r0, r0
   11fe4:	f380 8811 	msr	BASEPRI, r0
   11fe8:	f04f 0004 	mov.w	r0, #4
   11fec:	df02      	svc	2
		mayfly_enable(RADIO_TICKER_USER_ID_JOB,
   11fee:	2201      	movs	r2, #1
   11ff0:	4611      	mov	r1, r2
   11ff2:	4610      	mov	r0, r2
   11ff4:	f7fc fa3e 	bl	e474 <mayfly_enable>
   11ff8:	e003      	b.n	12002 <ticker_stop_adv_stop+0xd2>
			ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
   11ffa:	2101      	movs	r1, #1
   11ffc:	2000      	movs	r0, #0
   11ffe:	f7fe f9df 	bl	103c0 <ticker_job_sched>
		while (ret_cb == TICKER_STATUS_BUSY) {
   12002:	9b02      	ldr	r3, [sp, #8]
   12004:	2b02      	cmp	r3, #2
   12006:	d0f8      	beq.n	11ffa <ticker_stop_adv_stop+0xca>
   12008:	e7c4      	b.n	11f94 <ticker_stop_adv_stop+0x64>
		LL_ASSERT(_radio.ticker_id_prepare);
   1200a:	4040      	eors	r0, r0
   1200c:	f380 8811 	msr	BASEPRI, r0
   12010:	f04f 0004 	mov.w	r0, #4
   12014:	df02      	svc	2
			mayfly_enable(RADIO_TICKER_USER_ID_JOB,
   12016:	2201      	movs	r2, #1
   12018:	4611      	mov	r1, r2
   1201a:	4610      	mov	r0, r2
   1201c:	f7fc fa2a 	bl	e474 <mayfly_enable>
   12020:	e003      	b.n	1202a <ticker_stop_adv_stop+0xfa>
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
   12022:	2101      	movs	r1, #1
   12024:	2000      	movs	r0, #0
   12026:	f7fe f9cb 	bl	103c0 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
   1202a:	9b03      	ldr	r3, [sp, #12]
   1202c:	2b02      	cmp	r3, #2
   1202e:	d0f8      	beq.n	12022 <ticker_stop_adv_stop+0xf2>
   12030:	e7c5      	b.n	11fbe <ticker_stop_adv_stop+0x8e>
				retval = mayfly_enqueue(
   12032:	4b30      	ldr	r3, [pc, #192]	; (120f4 <ticker_stop_adv_stop+0x1c4>)
   12034:	2200      	movs	r2, #0
   12036:	4611      	mov	r1, r2
   12038:	2001      	movs	r0, #1
   1203a:	f7fc fa59 	bl	e4f0 <mayfly_enqueue>
				LL_ASSERT(!retval);
   1203e:	2800      	cmp	r0, #0
   12040:	d08f      	beq.n	11f62 <ticker_stop_adv_stop+0x32>
   12042:	4040      	eors	r0, r0
   12044:	f380 8811 	msr	BASEPRI, r0
   12048:	f04f 0004 	mov.w	r0, #4
   1204c:	df02      	svc	2
		} else if (ret_cb == TICKER_STATUS_FAILURE) {
   1204e:	9b03      	ldr	r3, [sp, #12]
   12050:	2b01      	cmp	r3, #1
   12052:	d11b      	bne.n	1208c <ticker_stop_adv_stop+0x15c>
			retval = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
   12054:	4b26      	ldr	r3, [pc, #152]	; (120f0 <ticker_stop_adv_stop+0x1c0>)
   12056:	2200      	movs	r2, #0
   12058:	4611      	mov	r1, r2
   1205a:	2001      	movs	r0, #1
   1205c:	f7fc fa48 	bl	e4f0 <mayfly_enqueue>
			LL_ASSERT(!retval);
   12060:	b970      	cbnz	r0, 12080 <ticker_stop_adv_stop+0x150>
			retval = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
   12062:	4b24      	ldr	r3, [pc, #144]	; (120f4 <ticker_stop_adv_stop+0x1c4>)
   12064:	2200      	movs	r2, #0
   12066:	4611      	mov	r1, r2
   12068:	2001      	movs	r0, #1
   1206a:	f7fc fa41 	bl	e4f0 <mayfly_enqueue>
			LL_ASSERT(!retval);
   1206e:	2800      	cmp	r0, #0
   12070:	f43f af77 	beq.w	11f62 <ticker_stop_adv_stop+0x32>
   12074:	4040      	eors	r0, r0
   12076:	f380 8811 	msr	BASEPRI, r0
   1207a:	f04f 0004 	mov.w	r0, #4
   1207e:	df02      	svc	2
			LL_ASSERT(!retval);
   12080:	4040      	eors	r0, r0
   12082:	f380 8811 	msr	BASEPRI, r0
   12086:	f04f 0004 	mov.w	r0, #4
   1208a:	df02      	svc	2
			LL_ASSERT(0);
   1208c:	4040      	eors	r0, r0
   1208e:	f380 8811 	msr	BASEPRI, r0
   12092:	f04f 0004 	mov.w	r0, #4
   12096:	df02      	svc	2
	} else if (ret_cb == TICKER_STATUS_FAILURE) {
   12098:	9b02      	ldr	r3, [sp, #8]
   1209a:	2b01      	cmp	r3, #1
   1209c:	d115      	bne.n	120ca <ticker_stop_adv_stop+0x19a>
		if (_radio.role != ROLE_NONE) {
   1209e:	4b11      	ldr	r3, [pc, #68]	; (120e4 <ticker_stop_adv_stop+0x1b4>)
   120a0:	7bdb      	ldrb	r3, [r3, #15]
   120a2:	2b00      	cmp	r3, #0
   120a4:	f43f af5d 	beq.w	11f62 <ticker_stop_adv_stop+0x32>
			s_mfy_radio_stop.param = (void *)STATE_STOP;
   120a8:	4b13      	ldr	r3, [pc, #76]	; (120f8 <ticker_stop_adv_stop+0x1c8>)
   120aa:	2204      	movs	r2, #4
   120ac:	609a      	str	r2, [r3, #8]
			retval = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
   120ae:	2200      	movs	r2, #0
   120b0:	4611      	mov	r1, r2
   120b2:	2001      	movs	r0, #1
   120b4:	f7fc fa1c 	bl	e4f0 <mayfly_enqueue>
			LL_ASSERT(!retval);
   120b8:	2800      	cmp	r0, #0
   120ba:	f43f af52 	beq.w	11f62 <ticker_stop_adv_stop+0x32>
   120be:	4040      	eors	r0, r0
   120c0:	f380 8811 	msr	BASEPRI, r0
   120c4:	f04f 0004 	mov.w	r0, #4
   120c8:	df02      	svc	2
		LL_ASSERT(0);
   120ca:	4040      	eors	r0, r0
   120cc:	f380 8811 	msr	BASEPRI, r0
   120d0:	f04f 0004 	mov.w	r0, #4
   120d4:	df02      	svc	2
	LL_ASSERT(!retval);
   120d6:	4040      	eors	r0, r0
   120d8:	f380 8811 	msr	BASEPRI, r0
   120dc:	f04f 0004 	mov.w	r0, #4
   120e0:	df02      	svc	2
   120e2:	bf00      	nop
   120e4:	20000e84 	.word	0x20000e84
   120e8:	2000bba8 	.word	0x2000bba8
   120ec:	00010af5 	.word	0x00010af5
   120f0:	2000bbd8 	.word	0x2000bbd8
   120f4:	2000bc98 	.word	0x2000bc98
   120f8:	2000bc08 	.word	0x2000bc08
   120fc:	00000000 	.word	0x00000000

00012100 <sched_free_win_offset_calc>:
{
   12100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12104:	b091      	sub	sp, #68	; 0x44
   12106:	9009      	str	r0, [sp, #36]	; 0x24
   12108:	910a      	str	r1, [sp, #40]	; 0x28
   1210a:	9207      	str	r2, [sp, #28]
   1210c:	469b      	mov	fp, r3
   1210e:	9d1a      	ldr	r5, [sp, #104]	; 0x68
   12110:	f8dd a06c 	ldr.w	sl, [sp, #108]	; 0x6c
	if (conn_curr->hdr.ticks_xtal_to_start & ((u32_t)1 << 31)) {
   12114:	6803      	ldr	r3, [r0, #0]
   12116:	2b00      	cmp	r3, #0
   12118:	db0f      	blt.n	1213a <sched_free_win_offset_calc+0x3a>
	u32_t ticks_prepare_reduced = 0;
   1211a:	2300      	movs	r3, #0
   1211c:	930b      	str	r3, [sp, #44]	; 0x2c
	ticker_id = ticker_id_prev = ticker_id_other = 0xFF;
   1211e:	27ff      	movs	r7, #255	; 0xff
   12120:	f88d 7037 	strb.w	r7, [sp, #55]	; 0x37
		ticks_anchor_prev = offset_index = _win_offset = 0;
   12124:	2300      	movs	r3, #0
   12126:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
   1212a:	930f      	str	r3, [sp, #60]	; 0x3c
   1212c:	930e      	str	r3, [sp, #56]	; 0x38
		ticks_anchor_prev = offset_index = _win_offset = 0;
   1212e:	461c      	mov	r4, r3
	ticker_id = ticker_id_prev = ticker_id_other = 0xFF;
   12130:	9706      	str	r7, [sp, #24]
	ticks_slot_prev_abs = 0;
   12132:	461e      	mov	r6, r3
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
   12134:	9308      	str	r3, [sp, #32]
		ticks_anchor_prev = offset_index = _win_offset = 0;
   12136:	4698      	mov	r8, r3
   12138:	e06d      	b.n	12216 <sched_free_win_offset_calc+0x116>
				conn_curr->hdr.ticks_preempt_to_start;
   1213a:	6881      	ldr	r1, [r0, #8]
				conn_curr->hdr.ticks_active_to_start :
   1213c:	6842      	ldr	r2, [r0, #4]
		ticks_prepare_reduced = ((conn_curr->hdr.ticks_xtal_to_start &
   1213e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   12142:	4291      	cmp	r1, r2
   12144:	bf2c      	ite	cs
   12146:	1a5b      	subcs	r3, r3, r1
   12148:	1a9b      	subcc	r3, r3, r2
   1214a:	930b      	str	r3, [sp, #44]	; 0x2c
   1214c:	e7e7      	b.n	1211e <sched_free_win_offset_calc+0x1e>
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
   1214e:	2101      	movs	r1, #1
   12150:	2000      	movs	r0, #0
   12152:	f7fe f935 	bl	103c0 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
   12156:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   12158:	2b02      	cmp	r3, #2
   1215a:	d0f8      	beq.n	1214e <sched_free_win_offset_calc+0x4e>
   1215c:	e06c      	b.n	12238 <sched_free_win_offset_calc+0x138>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
   1215e:	4040      	eors	r0, r0
   12160:	f380 8811 	msr	BASEPRI, r0
   12164:	f04f 0004 	mov.w	r0, #4
   12168:	df02      	svc	2
			LL_ASSERT(0);
   1216a:	4040      	eors	r0, r0
   1216c:	f380 8811 	msr	BASEPRI, r0
   12170:	f04f 0004 	mov.w	r0, #4
   12174:	df02      	svc	2
					conn->hdr.ticks_preempt_to_start;
   12176:	f8d9 1008 	ldr.w	r1, [r9, #8]
					conn->hdr.ticks_active_to_start :
   1217a:	f8d9 2004 	ldr.w	r2, [r9, #4]
					((conn->hdr.ticks_xtal_to_start &
   1217e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
					  (~((u32_t)1 << 31))) -
   12182:	4291      	cmp	r1, r2
   12184:	bf2c      	ite	cs
   12186:	ebc3 0301 	rsbcs	r3, r3, r1
   1218a:	ebc3 0302 	rsbcc	r3, r3, r2
				ticks_to_expire_normal -=
   1218e:	9a05      	ldr	r2, [sp, #20]
   12190:	441a      	add	r2, r3
   12192:	9205      	str	r2, [sp, #20]
   12194:	e085      	b.n	122a2 <sched_free_win_offset_calc+0x1a2>
					memcpy(win_offset +
   12196:	2202      	movs	r2, #2
   12198:	a90d      	add	r1, sp, #52	; 0x34
   1219a:	eb0a 0044 	add.w	r0, sl, r4, lsl #1
   1219e:	f7ee f88f 	bl	2c0 <memcpy>
					offset_index++;
   121a2:	3401      	adds	r4, #1
   121a4:	b2e4      	uxtb	r4, r4
					ticks_to_expire_prev +=
   121a6:	3728      	adds	r7, #40	; 0x28
				while ((offset_index < *offset_max) &&
   121a8:	782b      	ldrb	r3, [r5, #0]
   121aa:	429c      	cmp	r4, r3
   121ac:	d21f      	bcs.n	121ee <sched_free_win_offset_calc+0xee>
				       (ticker_ticks_diff_get(ticks_to_expire_normal,
   121ae:	4639      	mov	r1, r7
   121b0:	9805      	ldr	r0, [sp, #20]
   121b2:	f7fe f919 	bl	103e8 <ticker_ticks_diff_get>
					 conn->hdr.ticks_slot))) {
   121b6:	f8d9 300c 	ldr.w	r3, [r9, #12]
							    625 + 1250) +
   121ba:	4433      	add	r3, r6
   121bc:	3364      	adds	r3, #100	; 0x64
				while ((offset_index < *offset_max) &&
   121be:	4298      	cmp	r0, r3
   121c0:	d315      	bcc.n	121ee <sched_free_win_offset_calc+0xee>
						TICKER_TICKS_TO_US(ticks_to_expire_prev +
   121c2:	19bb      	adds	r3, r7, r6
   121c4:	485a      	ldr	r0, [pc, #360]	; (12330 <sched_free_win_offset_calc+0x230>)
   121c6:	fba3 0100 	umull	r0, r1, r3, r0
   121ca:	2207      	movs	r2, #7
   121cc:	fb02 1103 	mla	r1, r2, r3, r1
   121d0:	a355      	add	r3, pc, #340	; (adr r3, 12328 <sched_free_win_offset_calc+0x228>)
   121d2:	e9d3 2300 	ldrd	r2, r3, [r3]
   121d6:	f7ee ff91 	bl	10fc <__aeabi_uldivmod>
								   ticks_slot_prev_abs) / 1250;
   121da:	4b56      	ldr	r3, [pc, #344]	; (12334 <sched_free_win_offset_calc+0x234>)
   121dc:	fba3 3000 	umull	r3, r0, r3, r0
					_win_offset =
   121e0:	f3c0 208f 	ubfx	r0, r0, #10, #16
   121e4:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
					if (_win_offset >= conn_interval) {
   121e8:	4558      	cmp	r0, fp
   121ea:	d3d4      	bcc.n	12196 <sched_free_win_offset_calc+0x96>
						ticks_to_expire_prev = 0;
   121ec:	2700      	movs	r7, #0
				*ticks_to_offset_next = ticks_to_expire_prev;
   121ee:	9b07      	ldr	r3, [sp, #28]
   121f0:	601f      	str	r7, [r3, #0]
				if (_win_offset >= conn_interval) {
   121f2:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
   121f6:	459b      	cmp	fp, r3
   121f8:	d95e      	bls.n	122b8 <sched_free_win_offset_calc+0x1b8>
			ticks_anchor_prev = ticks_anchor;
   121fa:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
			ticker_id_prev = ticker_id;
   121fe:	f89d 7037 	ldrb.w	r7, [sp, #55]	; 0x37
				conn->hdr.ticks_slot;
   12202:	f8d9 600c 	ldr.w	r6, [r9, #12]
			ticks_slot_prev_abs =
   12206:	3664      	adds	r6, #100	; 0x64
			ticks_to_expire_prev = ticks_to_expire_normal;
   12208:	9b05      	ldr	r3, [sp, #20]
   1220a:	9308      	str	r3, [sp, #32]
   1220c:	e000      	b.n	12210 <sched_free_win_offset_calc+0x110>
			ticker_id_other = ticker_id;
   1220e:	9206      	str	r2, [sp, #24]
	} while (offset_index < *offset_max);
   12210:	782b      	ldrb	r3, [r5, #0]
   12212:	429c      	cmp	r4, r3
   12214:	d251      	bcs.n	122ba <sched_free_win_offset_calc+0x1ba>
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   12216:	2302      	movs	r3, #2
   12218:	930c      	str	r3, [sp, #48]	; 0x30
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
   1221a:	ab0c      	add	r3, sp, #48	; 0x30
   1221c:	9302      	str	r3, [sp, #8]
   1221e:	4b46      	ldr	r3, [pc, #280]	; (12338 <sched_free_win_offset_calc+0x238>)
   12220:	9301      	str	r3, [sp, #4]
   12222:	ab0e      	add	r3, sp, #56	; 0x38
   12224:	9300      	str	r3, [sp, #0]
   12226:	ab0f      	add	r3, sp, #60	; 0x3c
   12228:	f10d 0237 	add.w	r2, sp, #55	; 0x37
   1222c:	2101      	movs	r1, #1
   1222e:	2000      	movs	r0, #0
   12230:	f7fe f846 	bl	102c0 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
   12234:	2802      	cmp	r0, #2
   12236:	d08e      	beq.n	12156 <sched_free_win_offset_calc+0x56>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
   12238:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1223a:	2b00      	cmp	r3, #0
   1223c:	d18f      	bne.n	1215e <sched_free_win_offset_calc+0x5e>
		if (ticker_id == 0xff) {
   1223e:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
   12242:	2aff      	cmp	r2, #255	; 0xff
   12244:	d039      	beq.n	122ba <sched_free_win_offset_calc+0x1ba>
		if ((ticker_id_prev != 0xff) &&
   12246:	2fff      	cmp	r7, #255	; 0xff
   12248:	d002      	beq.n	12250 <sched_free_win_offset_calc+0x150>
		    (ticks_anchor != ticks_anchor_prev)) {
   1224a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
		if ((ticker_id_prev != 0xff) &&
   1224c:	4598      	cmp	r8, r3
   1224e:	d18c      	bne.n	1216a <sched_free_win_offset_calc+0x6a>
		if (ticker_id <= RADIO_TICKER_ID_ADV ||
   12250:	2a05      	cmp	r2, #5
   12252:	d9dd      	bls.n	12210 <sched_free_win_offset_calc+0x110>
				  _radio.connection_count)) {
   12254:	4b39      	ldr	r3, [pc, #228]	; (1233c <sched_free_win_offset_calc+0x23c>)
   12256:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
		    ticker_id >= (RADIO_TICKER_ID_FIRST_CONNECTION +
   1225a:	3307      	adds	r3, #7
		if (ticker_id <= RADIO_TICKER_ID_ADV ||
   1225c:	429a      	cmp	r2, r3
   1225e:	dad7      	bge.n	12210 <sched_free_win_offset_calc+0x110>
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION) {
   12260:	2a06      	cmp	r2, #6
   12262:	d9d4      	bls.n	1220e <sched_free_win_offset_calc+0x10e>
		if (ticker_id_other != 0xFF) {
   12264:	9b06      	ldr	r3, [sp, #24]
   12266:	2bff      	cmp	r3, #255	; 0xff
   12268:	d127      	bne.n	122ba <sched_free_win_offset_calc+0x1ba>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
   1226a:	3a07      	subs	r2, #7
   1226c:	b292      	uxth	r2, r2
   1226e:	f44f 71aa 	mov.w	r1, #340	; 0x154
   12272:	4b32      	ldr	r3, [pc, #200]	; (1233c <sched_free_win_offset_calc+0x23c>)
   12274:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
   12278:	f7fc fab8 	bl	e7ec <mem_get>
   1227c:	4681      	mov	r9, r0
		if ((conn != conn_curr) && (is_select || !conn->role)) {
   1227e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12280:	4283      	cmp	r3, r0
   12282:	d0c5      	beq.n	12210 <sched_free_win_offset_calc+0x110>
   12284:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   12286:	b91b      	cbnz	r3, 12290 <sched_free_win_offset_calc+0x190>
   12288:	f990 301d 	ldrsb.w	r3, [r0, #29]
   1228c:	2b00      	cmp	r3, #0
   1228e:	dbbf      	blt.n	12210 <sched_free_win_offset_calc+0x110>
				ticks_to_expire + ticks_prepare_reduced;
   12290:	9b0e      	ldr	r3, [sp, #56]	; 0x38
			u32_t ticks_to_expire_normal =
   12292:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   12294:	18d3      	adds	r3, r2, r3
   12296:	9305      	str	r3, [sp, #20]
			if (conn->hdr.ticks_xtal_to_start &
   12298:	f8d9 3000 	ldr.w	r3, [r9]
   1229c:	2b00      	cmp	r3, #0
   1229e:	f6ff af6a 	blt.w	12176 <sched_free_win_offset_calc+0x76>
			if (*ticks_to_offset_next < ticks_to_expire_normal) {
   122a2:	9b07      	ldr	r3, [sp, #28]
   122a4:	681f      	ldr	r7, [r3, #0]
   122a6:	9b05      	ldr	r3, [sp, #20]
   122a8:	42bb      	cmp	r3, r7
   122aa:	d9a6      	bls.n	121fa <sched_free_win_offset_calc+0xfa>
				if (ticks_to_expire_prev < *ticks_to_offset_next) {
   122ac:	9a08      	ldr	r2, [sp, #32]
   122ae:	42ba      	cmp	r2, r7
   122b0:	f4ff af7a 	bcc.w	121a8 <sched_free_win_offset_calc+0xa8>
   122b4:	4617      	mov	r7, r2
   122b6:	e777      	b.n	121a8 <sched_free_win_offset_calc+0xa8>
   122b8:	9708      	str	r7, [sp, #32]
	if (ticker_id == 0xFF) {
   122ba:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   122be:	2bff      	cmp	r3, #255	; 0xff
   122c0:	d003      	beq.n	122ca <sched_free_win_offset_calc+0x1ca>
	*offset_max = offset_index;
   122c2:	702c      	strb	r4, [r5, #0]
}
   122c4:	b011      	add	sp, #68	; 0x44
   122c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (ticks_to_expire_prev < *ticks_to_offset_next) {
   122ca:	9b07      	ldr	r3, [sp, #28]
   122cc:	681f      	ldr	r7, [r3, #0]
   122ce:	9a08      	ldr	r2, [sp, #32]
   122d0:	42ba      	cmp	r2, r7
   122d2:	d300      	bcc.n	122d6 <sched_free_win_offset_calc+0x1d6>
   122d4:	4617      	mov	r7, r2
		while (offset_index < *offset_max) {
   122d6:	782b      	ldrb	r3, [r5, #0]
   122d8:	429c      	cmp	r4, r3
   122da:	d21f      	bcs.n	1231c <sched_free_win_offset_calc+0x21c>
				TICKER_TICKS_TO_US(ticks_to_expire_prev +
   122dc:	19bb      	adds	r3, r7, r6
   122de:	4814      	ldr	r0, [pc, #80]	; (12330 <sched_free_win_offset_calc+0x230>)
   122e0:	fba3 0100 	umull	r0, r1, r3, r0
   122e4:	2207      	movs	r2, #7
   122e6:	fb02 1103 	mla	r1, r2, r3, r1
   122ea:	a30f      	add	r3, pc, #60	; (adr r3, 12328 <sched_free_win_offset_calc+0x228>)
   122ec:	e9d3 2300 	ldrd	r2, r3, [r3]
   122f0:	f7ee ff04 	bl	10fc <__aeabi_uldivmod>
						   ticks_slot_prev_abs) / 1250;
   122f4:	4b0f      	ldr	r3, [pc, #60]	; (12334 <sched_free_win_offset_calc+0x234>)
   122f6:	fba3 2300 	umull	r2, r3, r3, r0
			_win_offset =
   122fa:	f3c3 238f 	ubfx	r3, r3, #10, #16
   122fe:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
			if (_win_offset >= conn_interval) {
   12302:	459b      	cmp	fp, r3
   12304:	d909      	bls.n	1231a <sched_free_win_offset_calc+0x21a>
			memcpy(win_offset + (sizeof(u16_t) * offset_index),
   12306:	2202      	movs	r2, #2
   12308:	a90d      	add	r1, sp, #52	; 0x34
   1230a:	eb0a 0044 	add.w	r0, sl, r4, lsl #1
   1230e:	f7ed ffd7 	bl	2c0 <memcpy>
			offset_index++;
   12312:	3401      	adds	r4, #1
   12314:	b2e4      	uxtb	r4, r4
			ticks_to_expire_prev += TICKER_US_TO_TICKS(1250);
   12316:	3728      	adds	r7, #40	; 0x28
   12318:	e7dd      	b.n	122d6 <sched_free_win_offset_calc+0x1d6>
				ticks_to_expire_prev = 0;
   1231a:	2700      	movs	r7, #0
		*ticks_to_offset_next = ticks_to_expire_prev;
   1231c:	9b07      	ldr	r3, [sp, #28]
   1231e:	601f      	str	r7, [r3, #0]
   12320:	e7cf      	b.n	122c2 <sched_free_win_offset_calc+0x1c2>
   12322:	bf00      	nop
   12324:	f3af 8000 	nop.w
   12328:	3b9aca00 	.word	0x3b9aca00
   1232c:	00000000 	.word	0x00000000
   12330:	1afd498d 	.word	0x1afd498d
   12334:	d1b71759 	.word	0xd1b71759
   12338:	00010af5 	.word	0x00010af5
   1233c:	20000e84 	.word	0x20000e84

00012340 <mayfly_sched_free_win_offset_calc>:
{
   12340:	b500      	push	{lr}
   12342:	b085      	sub	sp, #20
	u32_t ticks_to_offset_default = 0;
   12344:	2300      	movs	r3, #0
   12346:	9303      	str	r3, [sp, #12]
	u8_t offset_max = 6;
   12348:	2306      	movs	r3, #6
   1234a:	f88d 300b 	strb.w	r3, [sp, #11]
	if (conn->role) {
   1234e:	f990 301d 	ldrsb.w	r3, [r0, #29]
   12352:	2b00      	cmp	r3, #0
   12354:	db0e      	blt.n	12374 <mayfly_sched_free_win_offset_calc+0x34>
	ticks_to_offset_next = &ticks_to_offset_default;
   12356:	aa03      	add	r2, sp, #12
				   (u8_t *)conn->llcp_conn_param.pdu_win_offset0);
   12358:	f8d0 10dc 	ldr.w	r1, [r0, #220]	; 0xdc
	sched_free_win_offset_calc(conn, 0, ticks_to_offset_next,
   1235c:	f8b0 30c4 	ldrh.w	r3, [r0, #196]	; 0xc4
   12360:	9101      	str	r1, [sp, #4]
   12362:	f10d 010b 	add.w	r1, sp, #11
   12366:	9100      	str	r1, [sp, #0]
   12368:	2100      	movs	r1, #0
   1236a:	f7ff fec9 	bl	12100 <sched_free_win_offset_calc>
}
   1236e:	b005      	add	sp, #20
   12370:	f85d fb04 	ldr.w	pc, [sp], #4
			conn->slave.ticks_to_offset;
   12374:	6f03      	ldr	r3, [r0, #112]	; 0x70
		conn->llcp_conn_param.ticks_to_offset_next =
   12376:	4602      	mov	r2, r0
   12378:	f842 3fe4 	str.w	r3, [r2, #228]!
   1237c:	e7ec      	b.n	12358 <mayfly_sched_free_win_offset_calc+0x18>
	...

00012380 <mayfly_sched_win_offset_select>:
{
   12380:	b570      	push	{r4, r5, r6, lr}
   12382:	b088      	sub	sp, #32
   12384:	4606      	mov	r6, r0
	u16_t win_offset_m[OFFSET_M_MAX] = {0, };
   12386:	ac05      	add	r4, sp, #20
   12388:	2500      	movs	r5, #0
   1238a:	9505      	str	r5, [sp, #20]
   1238c:	9506      	str	r5, [sp, #24]
   1238e:	9507      	str	r5, [sp, #28]
	u8_t offset_m_max = OFFSET_M_MAX;
   12390:	2306      	movs	r3, #6
   12392:	f88d 3013 	strb.w	r3, [sp, #19]
		TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 * 1250);
   12396:	f8b0 20ce 	ldrh.w	r2, [r0, #206]	; 0xce
   1239a:	4843      	ldr	r0, [pc, #268]	; (124a8 <mayfly_sched_win_offset_select+0x128>)
   1239c:	fba2 0100 	umull	r0, r1, r2, r0
   123a0:	f240 1323 	movw	r3, #291	; 0x123
   123a4:	fb03 1102 	mla	r1, r3, r2, r1
   123a8:	a33d      	add	r3, pc, #244	; (adr r3, 124a0 <mayfly_sched_win_offset_select+0x120>)
   123aa:	e9d3 2300 	ldrd	r2, r3, [r3]
   123ae:	f7ee fea5 	bl	10fc <__aeabi_uldivmod>
   123b2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	ticks_to_offset =
   123b6:	aa08      	add	r2, sp, #32
   123b8:	f842 0d14 	str.w	r0, [r2, #-20]!
	sched_free_win_offset_calc(conn, 1, &ticks_to_offset,
   123bc:	f8b6 30c4 	ldrh.w	r3, [r6, #196]	; 0xc4
   123c0:	9401      	str	r4, [sp, #4]
   123c2:	f10d 0113 	add.w	r1, sp, #19
   123c6:	9100      	str	r1, [sp, #0]
   123c8:	2101      	movs	r1, #1
   123ca:	4630      	mov	r0, r6
   123cc:	f7ff fe98 	bl	12100 <sched_free_win_offset_calc>
	u8_t has_offset_s = 0;
   123d0:	462c      	mov	r4, r5
	while (offset_index_s < OFFSET_S_MAX) {
   123d2:	e018      	b.n	12406 <mayfly_sched_win_offset_select+0x86>
			offset_index_m++;
   123d4:	3301      	adds	r3, #1
   123d6:	b2db      	uxtb	r3, r3
		while (offset_index_m < offset_m_max) {
   123d8:	f89d 1013 	ldrb.w	r1, [sp, #19]
   123dc:	428b      	cmp	r3, r1
   123de:	d20e      	bcs.n	123fe <mayfly_sched_win_offset_select+0x7e>
			if (win_offset_s != 0xffff) {
   123e0:	f8bd 200a 	ldrh.w	r2, [sp, #10]
   123e4:	f64f 70ff 	movw	r0, #65535	; 0xffff
   123e8:	4282      	cmp	r2, r0
   123ea:	d0f3      	beq.n	123d4 <mayfly_sched_win_offset_select+0x54>
				    win_offset_m[offset_index_m]) {
   123ec:	a808      	add	r0, sp, #32
   123ee:	eb00 0043 	add.w	r0, r0, r3, lsl #1
   123f2:	f830 0c0c 	ldrh.w	r0, [r0, #-12]
				if (win_offset_s ==
   123f6:	4282      	cmp	r2, r0
   123f8:	d001      	beq.n	123fe <mayfly_sched_win_offset_select+0x7e>
				has_offset_s = 1;
   123fa:	2401      	movs	r4, #1
   123fc:	e7ea      	b.n	123d4 <mayfly_sched_win_offset_select+0x54>
		if (offset_index_m < offset_m_max) {
   123fe:	428b      	cmp	r3, r1
   12400:	d30e      	bcc.n	12420 <mayfly_sched_win_offset_select+0xa0>
		offset_index_s++;
   12402:	3501      	adds	r5, #1
   12404:	b2ed      	uxtb	r5, r5
	while (offset_index_s < OFFSET_S_MAX) {
   12406:	2d05      	cmp	r5, #5
   12408:	d80a      	bhi.n	12420 <mayfly_sched_win_offset_select+0xa0>
		       ((u8_t *)&conn->llcp_conn_param.offset0 +
   1240a:	f106 01ce 	add.w	r1, r6, #206	; 0xce
		memcpy((u8_t *)&win_offset_s,
   1240e:	2202      	movs	r2, #2
   12410:	eb01 0145 	add.w	r1, r1, r5, lsl #1
   12414:	f10d 000a 	add.w	r0, sp, #10
   12418:	f7ed ff52 	bl	2c0 <memcpy>
		u8_t offset_index_m = 0;
   1241c:	2300      	movs	r3, #0
		while (offset_index_m < offset_m_max) {
   1241e:	e7db      	b.n	123d8 <mayfly_sched_win_offset_select+0x58>
	if (offset_index_s < OFFSET_S_MAX) {
   12420:	2d05      	cmp	r5, #5
   12422:	d91d      	bls.n	12460 <mayfly_sched_win_offset_select+0xe0>
	} else if (!has_offset_s) {
   12424:	b35c      	cbz	r4, 1247e <mayfly_sched_win_offset_select+0xfe>
		conn->llcp_ack = conn->llcp_req;
   12426:	f896 3074 	ldrb.w	r3, [r6, #116]	; 0x74
   1242a:	f886 3075 	strb.w	r3, [r6, #117]	; 0x75
		_radio.conn_upd = NULL;
   1242e:	2200      	movs	r2, #0
   12430:	4b1e      	ldr	r3, [pc, #120]	; (124ac <mayfly_sched_win_offset_select+0x12c>)
   12432:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
			((u8_t *)conn->llcp.conn_upd.pdu_win_offset -
   12436:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1243a:	f813 2c05 	ldrb.w	r2, [r3, #-5]
   1243e:	f042 0203 	orr.w	r2, r2, #3
   12442:	f803 2c05 	strb.w	r2, [r3, #-5]
		pdu_ctrl_tx->len =
   12446:	2203      	movs	r2, #3
   12448:	f803 2c04 	strb.w	r2, [r3, #-4]
		pdu_ctrl_tx->payload.llctrl.opcode =
   1244c:	2211      	movs	r2, #17
   1244e:	f803 2c02 	strb.w	r2, [r3, #-2]
			reject_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   12452:	220f      	movs	r2, #15
   12454:	f803 2c01 	strb.w	r2, [r3, #-1]
			error_code = 0x20; /* Unsupported parameter value */
   12458:	2220      	movs	r2, #32
   1245a:	701a      	strb	r2, [r3, #0]
}
   1245c:	b008      	add	sp, #32
   1245e:	bd70      	pop	{r4, r5, r6, pc}
			win_offset_s * 1250;
   12460:	a908      	add	r1, sp, #32
   12462:	f831 2d16 	ldrh.w	r2, [r1, #-22]!
   12466:	f240 43e2 	movw	r3, #1250	; 0x4e2
   1246a:	fb03 f302 	mul.w	r3, r3, r2
		conn->llcp.conn_upd.win_offset_us =
   1246e:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
		memcpy(conn->llcp.conn_upd.pdu_win_offset,
   12472:	2202      	movs	r2, #2
   12474:	f8d6 008c 	ldr.w	r0, [r6, #140]	; 0x8c
   12478:	f7ed ff22 	bl	2c0 <memcpy>
   1247c:	e7ee      	b.n	1245c <mayfly_sched_win_offset_select+0xdc>
			win_offset_m[0] * 1250;
   1247e:	a908      	add	r1, sp, #32
   12480:	f831 2d0c 	ldrh.w	r2, [r1, #-12]!
   12484:	f240 43e2 	movw	r3, #1250	; 0x4e2
   12488:	fb03 f302 	mul.w	r3, r3, r2
		conn->llcp.conn_upd.win_offset_us =
   1248c:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
		memcpy(conn->llcp.conn_upd.pdu_win_offset,
   12490:	2202      	movs	r2, #2
   12492:	f8d6 008c 	ldr.w	r0, [r6, #140]	; 0x8c
   12496:	f7ed ff13 	bl	2c0 <memcpy>
   1249a:	e7df      	b.n	1245c <mayfly_sched_win_offset_select+0xdc>
   1249c:	f3af 8000 	nop.w
   124a0:	1afd498d 	.word	0x1afd498d
   124a4:	00000007 	.word	0x00000007
   124a8:	09ce5400 	.word	0x09ce5400
   124ac:	20000e84 	.word	0x20000e84

000124b0 <sched_after_mstr_free_slot_get>:
{
   124b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   124b4:	b08b      	sub	sp, #44	; 0x2c
   124b6:	4604      	mov	r4, r0
   124b8:	468b      	mov	fp, r1
   124ba:	4615      	mov	r5, r2
   124bc:	469a      	mov	sl, r3
	ticker_id = ticker_id_prev = 0xff;
   124be:	f04f 08ff 	mov.w	r8, #255	; 0xff
   124c2:	f88d 8027 	strb.w	r8, [sp, #39]	; 0x27
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0;
   124c6:	2300      	movs	r3, #0
   124c8:	f8ca 3000 	str.w	r3, [sl]
   124cc:	9308      	str	r3, [sp, #32]
	ticks_slot_prev_abs = 0;
   124ce:	461f      	mov	r7, r3
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0;
   124d0:	9305      	str	r3, [sp, #20]
   124d2:	e01f      	b.n	12514 <sched_after_mstr_free_slot_get+0x64>
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
   124d4:	4621      	mov	r1, r4
   124d6:	2000      	movs	r0, #0
   124d8:	f7fd ff72 	bl	103c0 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
   124dc:	9b07      	ldr	r3, [sp, #28]
   124de:	2b02      	cmp	r3, #2
   124e0:	d0f8      	beq.n	124d4 <sched_after_mstr_free_slot_get+0x24>
   124e2:	e028      	b.n	12536 <sched_after_mstr_free_slot_get+0x86>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
   124e4:	4040      	eors	r0, r0
   124e6:	f380 8811 	msr	BASEPRI, r0
   124ea:	f04f 0004 	mov.w	r0, #4
   124ee:	df02      	svc	2
					conn->hdr.ticks_preempt_to_start;
   124f0:	6881      	ldr	r1, [r0, #8]
					conn->hdr.ticks_active_to_start :
   124f2:	6842      	ldr	r2, [r0, #4]
					((conn->hdr.ticks_xtal_to_start &
   124f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
					  (~((u32_t)1 << 31))) -
   124f8:	4291      	cmp	r1, r2
   124fa:	bf2c      	ite	cs
   124fc:	ebc3 0301 	rsbcs	r3, r3, r1
   12500:	ebc3 0302 	rsbcc	r3, r3, r2
				ticks_to_expire_normal -=
   12504:	4499      	add	r9, r3
   12506:	e03a      	b.n	1257e <sched_after_mstr_free_slot_get+0xce>
			ticker_id_prev = ticker_id;
   12508:	f89d 8027 	ldrb.w	r8, [sp, #39]	; 0x27
				conn->hdr.ticks_slot;
   1250c:	68f7      	ldr	r7, [r6, #12]
			ticks_slot_prev_abs =
   1250e:	3727      	adds	r7, #39	; 0x27
			ticks_to_expire_prev = ticks_to_expire_normal;
   12510:	f8cd 9014 	str.w	r9, [sp, #20]
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   12514:	2302      	movs	r3, #2
   12516:	9307      	str	r3, [sp, #28]
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
   12518:	ab07      	add	r3, sp, #28
   1251a:	9302      	str	r3, [sp, #8]
   1251c:	4b2c      	ldr	r3, [pc, #176]	; (125d0 <sched_after_mstr_free_slot_get+0x120>)
   1251e:	9301      	str	r3, [sp, #4]
   12520:	ab08      	add	r3, sp, #32
   12522:	9300      	str	r3, [sp, #0]
   12524:	462b      	mov	r3, r5
   12526:	f10d 0227 	add.w	r2, sp, #39	; 0x27
   1252a:	4621      	mov	r1, r4
   1252c:	2000      	movs	r0, #0
   1252e:	f7fd fec7 	bl	102c0 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
   12532:	2802      	cmp	r0, #2
   12534:	d0d2      	beq.n	124dc <sched_after_mstr_free_slot_get+0x2c>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
   12536:	9b07      	ldr	r3, [sp, #28]
   12538:	2b00      	cmp	r3, #0
   1253a:	d1d3      	bne.n	124e4 <sched_after_mstr_free_slot_get+0x34>
		if (ticker_id == 0xff) {
   1253c:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
   12540:	2aff      	cmp	r2, #255	; 0xff
   12542:	d028      	beq.n	12596 <sched_after_mstr_free_slot_get+0xe6>
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION ||
   12544:	2a06      	cmp	r2, #6
   12546:	d9e5      	bls.n	12514 <sched_after_mstr_free_slot_get+0x64>
				  _radio.connection_count)) {
   12548:	4b22      	ldr	r3, [pc, #136]	; (125d4 <sched_after_mstr_free_slot_get+0x124>)
   1254a:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
		    ticker_id >= (RADIO_TICKER_ID_FIRST_CONNECTION +
   1254e:	3307      	adds	r3, #7
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION ||
   12550:	429a      	cmp	r2, r3
   12552:	dadf      	bge.n	12514 <sched_after_mstr_free_slot_get+0x64>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
   12554:	3a07      	subs	r2, #7
   12556:	b292      	uxth	r2, r2
   12558:	f44f 71aa 	mov.w	r1, #340	; 0x154
   1255c:	4b1d      	ldr	r3, [pc, #116]	; (125d4 <sched_after_mstr_free_slot_get+0x124>)
   1255e:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
   12562:	f7fc f943 	bl	e7ec <mem_get>
		if (conn && !conn->role) {
   12566:	4606      	mov	r6, r0
   12568:	2800      	cmp	r0, #0
   1256a:	d0d3      	beq.n	12514 <sched_after_mstr_free_slot_get+0x64>
   1256c:	f990 301d 	ldrsb.w	r3, [r0, #29]
   12570:	2b00      	cmp	r3, #0
   12572:	dbcf      	blt.n	12514 <sched_after_mstr_free_slot_get+0x64>
			u32_t ticks_to_expire_normal = ticks_to_expire;
   12574:	f8dd 9020 	ldr.w	r9, [sp, #32]
			if (conn->hdr.ticks_xtal_to_start & ((u32_t)1 << 31)) {
   12578:	6803      	ldr	r3, [r0, #0]
   1257a:	2b00      	cmp	r3, #0
   1257c:	dbb8      	blt.n	124f0 <sched_after_mstr_free_slot_get+0x40>
			if ((ticker_id_prev != 0xFF) &&
   1257e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   12582:	d0c1      	beq.n	12508 <sched_after_mstr_free_slot_get+0x58>
			    (ticker_ticks_diff_get(ticks_to_expire_normal,
   12584:	9905      	ldr	r1, [sp, #20]
   12586:	4648      	mov	r0, r9
   12588:	f7fd ff2e 	bl	103e8 <ticker_ticks_diff_get>
			     (ticks_slot_prev_abs + ticks_slot_abs +
   1258c:	eb07 030b 	add.w	r3, r7, fp
   12590:	3302      	adds	r3, #2
			if ((ticker_id_prev != 0xFF) &&
   12592:	4298      	cmp	r0, r3
   12594:	d9b8      	bls.n	12508 <sched_after_mstr_free_slot_get+0x58>
	if (ticker_id_prev != 0xff) {
   12596:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   1259a:	d010      	beq.n	125be <sched_after_mstr_free_slot_get+0x10e>
		*us_offset = TICKER_TICKS_TO_US(ticks_to_expire_prev +
   1259c:	9b05      	ldr	r3, [sp, #20]
   1259e:	443b      	add	r3, r7
   125a0:	461f      	mov	r7, r3
   125a2:	480d      	ldr	r0, [pc, #52]	; (125d8 <sched_after_mstr_free_slot_get+0x128>)
   125a4:	fba3 0100 	umull	r0, r1, r3, r0
   125a8:	2307      	movs	r3, #7
   125aa:	fb03 1107 	mla	r1, r3, r7, r1
   125ae:	a306      	add	r3, pc, #24	; (adr r3, 125c8 <sched_after_mstr_free_slot_get+0x118>)
   125b0:	e9d3 2300 	ldrd	r2, r3, [r3]
   125b4:	f7ee fda2 	bl	10fc <__aeabi_uldivmod>
						ticks_slot_prev_abs) +
   125b8:	3020      	adds	r0, #32
		*us_offset = TICKER_TICKS_TO_US(ticks_to_expire_prev +
   125ba:	f8ca 0000 	str.w	r0, [sl]
}
   125be:	b00b      	add	sp, #44	; 0x2c
   125c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   125c4:	f3af 8000 	nop.w
   125c8:	3b9aca00 	.word	0x3b9aca00
   125cc:	00000000 	.word	0x00000000
   125d0:	00010af5 	.word	0x00010af5
   125d4:	20000e84 	.word	0x20000e84
   125d8:	1afd498d 	.word	0x1afd498d
   125dc:	00000000 	.word	0x00000000

000125e0 <sched_after_mstr_free_offset_get>:
{
   125e0:	b570      	push	{r4, r5, r6, lr}
   125e2:	b082      	sub	sp, #8
   125e4:	4606      	mov	r6, r0
   125e6:	4615      	mov	r5, r2
   125e8:	461c      	mov	r4, r3
	u32_t ticks_anchor_offset = ticks_anchor;
   125ea:	aa02      	add	r2, sp, #8
   125ec:	f842 5d04 	str.w	r5, [r2, #-4]!
	sched_after_mstr_free_slot_get(RADIO_TICKER_USER_ID_JOB,
   125f0:	3127      	adds	r1, #39	; 0x27
   125f2:	2001      	movs	r0, #1
   125f4:	f7ff ff5c 	bl	124b0 <sched_after_mstr_free_slot_get>
	if (ticks_anchor_offset != ticks_anchor) {
   125f8:	9801      	ldr	r0, [sp, #4]
   125fa:	4285      	cmp	r5, r0
   125fc:	d011      	beq.n	12622 <sched_after_mstr_free_offset_get+0x42>
			TICKER_TICKS_TO_US(ticker_ticks_diff_get(ticks_anchor_offset,
   125fe:	4629      	mov	r1, r5
   12600:	f7fd fef2 	bl	103e8 <ticker_ticks_diff_get>
   12604:	4602      	mov	r2, r0
   12606:	4810      	ldr	r0, [pc, #64]	; (12648 <sched_after_mstr_free_offset_get+0x68>)
   12608:	fba2 0100 	umull	r0, r1, r2, r0
   1260c:	2307      	movs	r3, #7
   1260e:	fb03 1102 	mla	r1, r3, r2, r1
   12612:	a30b      	add	r3, pc, #44	; (adr r3, 12640 <sched_after_mstr_free_offset_get+0x60>)
   12614:	e9d3 2300 	ldrd	r2, r3, [r3]
   12618:	f7ee fd70 	bl	10fc <__aeabi_uldivmod>
		*win_offset_us +=
   1261c:	6823      	ldr	r3, [r4, #0]
   1261e:	4418      	add	r0, r3
   12620:	6020      	str	r0, [r4, #0]
	if ((*win_offset_us & ((u32_t)1 << 31)) == 0) {
   12622:	6823      	ldr	r3, [r4, #0]
   12624:	2b00      	cmp	r3, #0
   12626:	db09      	blt.n	1263c <sched_after_mstr_free_offset_get+0x5c>
		u32_t conn_interval_us = conn_interval * 1250;
   12628:	f240 40e2 	movw	r0, #1250	; 0x4e2
   1262c:	fb00 f006 	mul.w	r0, r0, r6
		while (*win_offset_us > conn_interval_us) {
   12630:	e001      	b.n	12636 <sched_after_mstr_free_offset_get+0x56>
			*win_offset_us -= conn_interval_us;
   12632:	1a1b      	subs	r3, r3, r0
   12634:	6023      	str	r3, [r4, #0]
		while (*win_offset_us > conn_interval_us) {
   12636:	6823      	ldr	r3, [r4, #0]
   12638:	4298      	cmp	r0, r3
   1263a:	d3fa      	bcc.n	12632 <sched_after_mstr_free_offset_get+0x52>
}
   1263c:	b002      	add	sp, #8
   1263e:	bd70      	pop	{r4, r5, r6, pc}
   12640:	3b9aca00 	.word	0x3b9aca00
   12644:	00000000 	.word	0x00000000
   12648:	1afd498d 	.word	0x1afd498d

0001264c <mayfly_sched_win_offset_use>:
{
   1264c:	b510      	push	{r4, lr}
   1264e:	b082      	sub	sp, #8
   12650:	4604      	mov	r4, r0
	sched_after_mstr_free_offset_get(conn->conn_interval,
   12652:	f100 0384 	add.w	r3, r0, #132	; 0x84
   12656:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
   1265a:	68c1      	ldr	r1, [r0, #12]
   1265c:	8c80      	ldrh	r0, [r0, #36]	; 0x24
   1265e:	f7ff ffbf 	bl	125e0 <sched_after_mstr_free_offset_get>
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
   12662:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
   12666:	4a07      	ldr	r2, [pc, #28]	; (12684 <mayfly_sched_win_offset_use+0x38>)
   12668:	fba2 2303 	umull	r2, r3, r2, r3
   1266c:	0a9b      	lsrs	r3, r3, #10
   1266e:	a902      	add	r1, sp, #8
   12670:	f821 3d02 	strh.w	r3, [r1, #-2]!
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
   12674:	2202      	movs	r2, #2
   12676:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
   1267a:	f7ed fe21 	bl	2c0 <memcpy>
}
   1267e:	b002      	add	sp, #8
   12680:	bd10      	pop	{r4, pc}
   12682:	bf00      	nop
   12684:	d1b71759 	.word	0xd1b71759

00012688 <mayfly_sched_after_mstr_free_offset_get>:
{
   12688:	b510      	push	{r4, lr}
	sched_after_mstr_free_offset_get(_radio.scanner.conn_interval,
   1268a:	4c05      	ldr	r4, [pc, #20]	; (126a0 <mayfly_sched_after_mstr_free_offset_get+0x18>)
   1268c:	f504 7380 	add.w	r3, r4, #256	; 0x100
   12690:	4602      	mov	r2, r0
   12692:	f8d4 10f8 	ldr.w	r1, [r4, #248]	; 0xf8
   12696:	f8b4 00f0 	ldrh.w	r0, [r4, #240]	; 0xf0
   1269a:	f7ff ffa1 	bl	125e0 <sched_after_mstr_free_offset_get>
   1269e:	bd10      	pop	{r4, pc}
   126a0:	20000e84 	.word	0x20000e84

000126a4 <enc_rsp_send>:
{
   126a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   126a8:	4605      	mov	r5, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   126aa:	4818      	ldr	r0, [pc, #96]	; (1270c <enc_rsp_send+0x68>)
   126ac:	f7fc f861 	bl	e772 <mem_acquire>
	LL_ASSERT(node_tx);
   126b0:	b330      	cbz	r0, 12700 <enc_rsp_send+0x5c>
   126b2:	4604      	mov	r4, r0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   126b4:	7903      	ldrb	r3, [r0, #4]
   126b6:	f043 0303 	orr.w	r3, r3, #3
   126ba:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata)
   126bc:	230d      	movs	r3, #13
   126be:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
   126c0:	2604      	movs	r6, #4
   126c2:	71c6      	strb	r6, [r0, #7]
		     pdu_ctrl_tx->payload.llctrl.ctrldata.enc_rsp.skds);
   126c4:	f100 0808 	add.w	r8, r0, #8
	rand_isr_get(sizeof(pdu_ctrl_tx->payload.llctrl.ctrldata.enc_rsp.skds),
   126c8:	4641      	mov	r1, r8
   126ca:	2008      	movs	r0, #8
   126cc:	f7fd faa2 	bl	fc14 <rand_isr_get>
		     pdu_ctrl_tx->payload.llctrl.ctrldata.enc_rsp.ivs);
   126d0:	f104 0710 	add.w	r7, r4, #16
	rand_isr_get(sizeof(pdu_ctrl_tx->payload.llctrl.ctrldata.enc_rsp.ivs),
   126d4:	4639      	mov	r1, r7
   126d6:	4630      	mov	r0, r6
   126d8:	f7fd fa9c 	bl	fc14 <rand_isr_get>
	memcpy(&conn->llcp.encryption.skd[8],
   126dc:	2208      	movs	r2, #8
   126de:	4641      	mov	r1, r8
   126e0:	f105 009b 	add.w	r0, r5, #155	; 0x9b
   126e4:	f7ed fdec 	bl	2c0 <memcpy>
	memcpy(&conn->ccm_rx.iv[4],
   126e8:	4632      	mov	r2, r6
   126ea:	4639      	mov	r1, r7
   126ec:	f505 708b 	add.w	r0, r5, #278	; 0x116
   126f0:	f7ed fde6 	bl	2c0 <memcpy>
	ctrl_tx_enqueue(conn, node_tx);
   126f4:	4621      	mov	r1, r4
   126f6:	4628      	mov	r0, r5
   126f8:	f7fe facc 	bl	10c94 <ctrl_tx_enqueue>
   126fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	LL_ASSERT(node_tx);
   12700:	4040      	eors	r0, r0
   12702:	f380 8811 	msr	BASEPRI, r0
   12706:	f04f 0004 	mov.w	r0, #4
   1270a:	df02      	svc	2
   1270c:	20000fdc 	.word	0x20000fdc

00012710 <enc_req_reused_send>:
{
   12710:	b538      	push	{r3, r4, r5, lr}
   12712:	4605      	mov	r5, r0
   12714:	460c      	mov	r4, r1
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   12716:	790b      	ldrb	r3, [r1, #4]
   12718:	f043 0303 	orr.w	r3, r3, #3
   1271c:	710b      	strb	r3, [r1, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata)
   1271e:	2317      	movs	r3, #23
   12720:	714b      	strb	r3, [r1, #5]
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   12722:	2303      	movs	r3, #3
   12724:	71cb      	strb	r3, [r1, #7]
	memcpy(&pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.rand[0],
   12726:	2208      	movs	r2, #8
   12728:	f100 0179 	add.w	r1, r0, #121	; 0x79
   1272c:	18a0      	adds	r0, r4, r2
   1272e:	f7ed fdc7 	bl	2c0 <memcpy>
		conn->llcp.encryption.ediv[0];
   12732:	f895 3081 	ldrb.w	r3, [r5, #129]	; 0x81
	pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.ediv[0] =
   12736:	7423      	strb	r3, [r4, #16]
		conn->llcp.encryption.ediv[1];
   12738:	f895 3082 	ldrb.w	r3, [r5, #130]	; 0x82
	pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.ediv[1] =
   1273c:	7463      	strb	r3, [r4, #17]
	rand_isr_get(sizeof(pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.skdm),
   1273e:	f104 0112 	add.w	r1, r4, #18
   12742:	2008      	movs	r0, #8
   12744:	f7fd fa66 	bl	fc14 <rand_isr_get>
	rand_isr_get(sizeof(pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.ivm),
   12748:	f104 011a 	add.w	r1, r4, #26
   1274c:	2004      	movs	r0, #4
   1274e:	f7fd fa61 	bl	fc14 <rand_isr_get>
   12752:	bd38      	pop	{r3, r4, r5, pc}

00012754 <isr_rx_conn_pkt_ctrl>:
{
   12754:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12758:	b082      	sub	sp, #8
   1275a:	4604      	mov	r4, r0
   1275c:	460f      	mov	r7, r1
	pdu_data_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
   1275e:	f100 0608 	add.w	r6, r0, #8
	if (_radio.conn_curr->role) {
   12762:	4ba0      	ldr	r3, [pc, #640]	; (129e4 <isr_rx_conn_pkt_ctrl+0x290>)
   12764:	f8d3 5110 	ldr.w	r5, [r3, #272]	; 0x110
   12768:	f995 301d 	ldrsb.w	r3, [r5, #29]
   1276c:	2b00      	cmp	r3, #0
   1276e:	db11      	blt.n	12794 <isr_rx_conn_pkt_ctrl+0x40>
		switch (pdu_data_rx->payload.llctrl.opcode) {
   12770:	7ac1      	ldrb	r1, [r0, #11]
   12772:	2918      	cmp	r1, #24
   12774:	d82c      	bhi.n	127d0 <isr_rx_conn_pkt_ctrl+0x7c>
   12776:	e8df f001 	tbb	[pc, r1]
   1277a:	2323      	.short	0x2323
   1277c:	2b2b232b 	.word	0x2b2b232b
   12780:	2b232b2b 	.word	0x2b232b2b
   12784:	2b2b2b23 	.word	0x2b2b2b23
   12788:	2b2b2b2b 	.word	0x2b2b2b2b
   1278c:	2b2b2b2b 	.word	0x2b2b2b2b
   12790:	2b2b      	.short	0x2b2b
   12792:	23          	.byte	0x23
   12793:	00          	.byte	0x00
		switch (pdu_data_rx->payload.llctrl.opcode) {
   12794:	7ac1      	ldrb	r1, [r0, #11]
   12796:	1f0a      	subs	r2, r1, #4
   12798:	2a15      	cmp	r2, #21
   1279a:	d819      	bhi.n	127d0 <isr_rx_conn_pkt_ctrl+0x7c>
   1279c:	e8df f002 	tbb	[pc, r2]
   127a0:	18180b0b 	.word	0x18180b0b
   127a4:	18181818 	.word	0x18181818
   127a8:	180b1818 	.word	0x180b1818
   127ac:	1818180b 	.word	0x1818180b
   127b0:	0b181818 	.word	0x0b181818
   127b4:	0b18      	.short	0x0b18
			unknown_rsp_send(_radio.conn_curr,
   127b6:	4628      	mov	r0, r5
   127b8:	f7fe fcca 	bl	11150 <unknown_rsp_send>
			return 0;
   127bc:	2400      	movs	r4, #0
   127be:	e003      	b.n	127c8 <isr_rx_conn_pkt_ctrl+0x74>
			unknown_rsp_send(_radio.conn_curr,
   127c0:	4628      	mov	r0, r5
   127c2:	f7fe fcc5 	bl	11150 <unknown_rsp_send>
			return 0;
   127c6:	2400      	movs	r4, #0
}
   127c8:	4620      	mov	r0, r4
   127ca:	b002      	add	sp, #8
   127cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	switch (pdu_data_rx->payload.llctrl.opcode) {
   127d0:	7ae1      	ldrb	r1, [r4, #11]
   127d2:	2919      	cmp	r1, #25
   127d4:	f200 87e6 	bhi.w	137a4 <isr_rx_conn_pkt_ctrl+0x1050>
   127d8:	e8df f011 	tbh	[pc, r1, lsl #1]
   127dc:	002e001a 	.word	0x002e001a
   127e0:	0042003d 	.word	0x0042003d
   127e4:	00800065 	.word	0x00800065
   127e8:	04c60099 	.word	0x04c60099
   127ec:	010600de 	.word	0x010600de
   127f0:	014b012d 	.word	0x014b012d
   127f4:	01ad0170 	.word	0x01ad0170
   127f8:	01c400de 	.word	0x01c400de
   127fc:	0395032d 	.word	0x0395032d
   12800:	04c104bb 	.word	0x04c104bb
   12804:	05180518 	.word	0x05180518
   12808:	06de0606 	.word	0x06de0606
   1280c:	07b9071b 	.word	0x07b9071b
		if (conn_update(_radio.conn_curr, pdu_data_rx) == 0) {
   12810:	4631      	mov	r1, r6
   12812:	4628      	mov	r0, r5
   12814:	f7fe fb90 	bl	10f38 <conn_update>
   12818:	b930      	cbnz	r0, 12828 <isr_rx_conn_pkt_ctrl+0xd4>
			_radio.conn_curr->procedure_expire = 0;
   1281a:	4b72      	ldr	r3, [pc, #456]	; (129e4 <isr_rx_conn_pkt_ctrl+0x290>)
   1281c:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   12820:	2400      	movs	r4, #0
   12822:	f8a3 4044 	strh.w	r4, [r3, #68]	; 0x44
   12826:	e7cf      	b.n	127c8 <isr_rx_conn_pkt_ctrl+0x74>
			_radio.conn_curr->llcp_terminate.reason_peer = 0x28;
   12828:	4b6e      	ldr	r3, [pc, #440]	; (129e4 <isr_rx_conn_pkt_ctrl+0x290>)
   1282a:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   1282e:	2228      	movs	r2, #40	; 0x28
   12830:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
	u8_t nack = 0;
   12834:	2400      	movs	r4, #0
   12836:	e7c7      	b.n	127c8 <isr_rx_conn_pkt_ctrl+0x74>
		if (chan_map_update(_radio.conn_curr, pdu_data_rx)) {
   12838:	4631      	mov	r1, r6
   1283a:	4628      	mov	r0, r5
   1283c:	f7ff f99e 	bl	11b7c <chan_map_update>
   12840:	2800      	cmp	r0, #0
   12842:	f000 87b5 	beq.w	137b0 <isr_rx_conn_pkt_ctrl+0x105c>
			_radio.conn_curr->llcp_terminate.reason_peer = 0x28;
   12846:	4b67      	ldr	r3, [pc, #412]	; (129e4 <isr_rx_conn_pkt_ctrl+0x290>)
   12848:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   1284c:	2228      	movs	r2, #40	; 0x28
   1284e:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
	u8_t nack = 0;
   12852:	2400      	movs	r4, #0
   12854:	e7b8      	b.n	127c8 <isr_rx_conn_pkt_ctrl+0x74>
			pdu_data_rx->payload.llctrl.ctrldata.terminate_ind.error_code;
   12856:	7b23      	ldrb	r3, [r4, #12]
		_radio.conn_curr->llcp_terminate.reason_peer =
   12858:	f885 30b3 	strb.w	r3, [r5, #179]	; 0xb3
	u8_t nack = 0;
   1285c:	2400      	movs	r4, #0
		break;
   1285e:	e7b3      	b.n	127c8 <isr_rx_conn_pkt_ctrl+0x74>
		memcpy(&_radio.conn_curr->llcp.encryption.skd[0],
   12860:	2208      	movs	r2, #8
   12862:	f104 0116 	add.w	r1, r4, #22
   12866:	f105 0093 	add.w	r0, r5, #147	; 0x93
   1286a:	f7ed fd29 	bl	2c0 <memcpy>
		memcpy(&_radio.conn_curr->ccm_rx.iv[0],
   1286e:	4d5d      	ldr	r5, [pc, #372]	; (129e4 <isr_rx_conn_pkt_ctrl+0x290>)
   12870:	f8d5 0110 	ldr.w	r0, [r5, #272]	; 0x110
   12874:	2204      	movs	r2, #4
   12876:	f104 011e 	add.w	r1, r4, #30
   1287a:	f500 7089 	add.w	r0, r0, #274	; 0x112
   1287e:	f7ed fd1f 	bl	2c0 <memcpy>
		_radio.conn_curr->pause_rx = 1;
   12882:	f8d5 2110 	ldr.w	r2, [r5, #272]	; 0x110
   12886:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
   1288a:	f043 0304 	orr.w	r3, r3, #4
   1288e:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
		_radio.conn_curr->procedure_expire =
   12892:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
			_radio.conn_curr->procedure_reload;
   12896:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
		_radio.conn_curr->procedure_expire =
   1289a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		*rx_enqueue = 1;
   1289e:	2301      	movs	r3, #1
   128a0:	703b      	strb	r3, [r7, #0]
	u8_t nack = 0;
   128a2:	2400      	movs	r4, #0
		break;
   128a4:	e790      	b.n	127c8 <isr_rx_conn_pkt_ctrl+0x74>
		memcpy(&_radio.conn_curr->llcp.encryption.skd[8],
   128a6:	2208      	movs	r2, #8
   128a8:	f104 010c 	add.w	r1, r4, #12
   128ac:	f105 009b 	add.w	r0, r5, #155	; 0x9b
   128b0:	f7ed fd06 	bl	2c0 <memcpy>
		memcpy(&_radio.conn_curr->ccm_rx.iv[4],
   128b4:	4d4b      	ldr	r5, [pc, #300]	; (129e4 <isr_rx_conn_pkt_ctrl+0x290>)
   128b6:	f8d5 0110 	ldr.w	r0, [r5, #272]	; 0x110
   128ba:	2204      	movs	r2, #4
   128bc:	f104 0114 	add.w	r1, r4, #20
   128c0:	f500 708b 	add.w	r0, r0, #278	; 0x116
   128c4:	f7ed fcfc 	bl	2c0 <memcpy>
		_radio.conn_curr->pause_rx = 1;
   128c8:	f8d5 2110 	ldr.w	r2, [r5, #272]	; 0x110
   128cc:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
   128d0:	f043 0304 	orr.w	r3, r3, #4
   128d4:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
	u8_t nack = 0;
   128d8:	2400      	movs	r4, #0
		break;
   128da:	e775      	b.n	127c8 <isr_rx_conn_pkt_ctrl+0x74>
		LL_ASSERT(_radio.conn_curr->llcp_req ==
   128dc:	f895 2074 	ldrb.w	r2, [r5, #116]	; 0x74
   128e0:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
   128e4:	429a      	cmp	r2, r3
   128e6:	d10c      	bne.n	12902 <isr_rx_conn_pkt_ctrl+0x1ae>
		_radio.conn_curr->llcp_type = LLCP_ENCRYPTION;
   128e8:	2303      	movs	r3, #3
   128ea:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
		_radio.conn_curr->llcp_ack--;
   128ee:	4b3d      	ldr	r3, [pc, #244]	; (129e4 <isr_rx_conn_pkt_ctrl+0x290>)
   128f0:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   128f4:	f892 3075 	ldrb.w	r3, [r2, #117]	; 0x75
   128f8:	3b01      	subs	r3, #1
   128fa:	f882 3075 	strb.w	r3, [r2, #117]	; 0x75
	u8_t nack = 0;
   128fe:	2400      	movs	r4, #0
		break;
   12900:	e762      	b.n	127c8 <isr_rx_conn_pkt_ctrl+0x74>
		LL_ASSERT(_radio.conn_curr->llcp_req ==
   12902:	4040      	eors	r0, r0
   12904:	f380 8811 	msr	BASEPRI, r0
   12908:	f04f 0004 	mov.w	r0, #4
   1290c:	df02      	svc	2
		if (_radio.role == ROLE_SLAVE) {
   1290e:	4b35      	ldr	r3, [pc, #212]	; (129e4 <isr_rx_conn_pkt_ctrl+0x290>)
   12910:	7bdb      	ldrb	r3, [r3, #15]
   12912:	b2db      	uxtb	r3, r3
   12914:	2b03      	cmp	r3, #3
   12916:	d027      	beq.n	12968 <isr_rx_conn_pkt_ctrl+0x214>
			_radio.conn_curr->pause_rx = 0;
   12918:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
   1291c:	f36f 0382 	bfc	r3, #2, #1
   12920:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
			_radio.conn_curr->pause_tx = 0;
   12924:	4b2f      	ldr	r3, [pc, #188]	; (129e4 <isr_rx_conn_pkt_ctrl+0x290>)
   12926:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   1292a:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   1292e:	f36f 02c3 	bfc	r2, #3, #1
   12932:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
		if (_radio.conn_curr->refresh) {
   12936:	4b2b      	ldr	r3, [pc, #172]	; (129e4 <isr_rx_conn_pkt_ctrl+0x290>)
   12938:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   1293c:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   12940:	f012 0f40 	tst.w	r2, #64	; 0x40
   12944:	d007      	beq.n	12956 <isr_rx_conn_pkt_ctrl+0x202>
			_radio.conn_curr->refresh = 0;
   12946:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   1294a:	f36f 1286 	bfc	r2, #6, #1
   1294e:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
   12952:	2309      	movs	r3, #9
   12954:	7123      	strb	r3, [r4, #4]
		*rx_enqueue = 1;
   12956:	2301      	movs	r3, #1
   12958:	703b      	strb	r3, [r7, #0]
		_radio.conn_curr->procedure_expire = 0;
   1295a:	4b22      	ldr	r3, [pc, #136]	; (129e4 <isr_rx_conn_pkt_ctrl+0x290>)
   1295c:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   12960:	2400      	movs	r4, #0
   12962:	f8a3 4044 	strh.w	r4, [r3, #68]	; 0x44
		break;
   12966:	e72f      	b.n	127c8 <isr_rx_conn_pkt_ctrl+0x74>
			LL_ASSERT(_radio.conn_curr->llcp_req ==
   12968:	f895 2074 	ldrb.w	r2, [r5, #116]	; 0x74
   1296c:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
   12970:	429a      	cmp	r2, r3
   12972:	d10b      	bne.n	1298c <isr_rx_conn_pkt_ctrl+0x238>
			_radio.conn_curr->llcp_type = LLCP_ENCRYPTION;
   12974:	2303      	movs	r3, #3
   12976:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
			_radio.conn_curr->llcp_ack--;
   1297a:	4b1a      	ldr	r3, [pc, #104]	; (129e4 <isr_rx_conn_pkt_ctrl+0x290>)
   1297c:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   12980:	f892 3075 	ldrb.w	r3, [r2, #117]	; 0x75
   12984:	3b01      	subs	r3, #1
   12986:	f882 3075 	strb.w	r3, [r2, #117]	; 0x75
   1298a:	e7d4      	b.n	12936 <isr_rx_conn_pkt_ctrl+0x1e2>
			LL_ASSERT(_radio.conn_curr->llcp_req ==
   1298c:	4040      	eors	r0, r0
   1298e:	f380 8811 	msr	BASEPRI, r0
   12992:	f04f 0004 	mov.w	r0, #4
   12996:	df02      	svc	2
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
   12998:	7b23      	ldrb	r3, [r4, #12]
   1299a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
   1299e:	f443 037e 	orr.w	r3, r3, #16646144	; 0xfe0000
   129a2:	f443 5343 	orr.w	r3, r3, #12480	; 0x30c0
   129a6:	f043 0310 	orr.w	r3, r3, #16
	       (features[1] << 8) | (features[2] << 16);
   129aa:	7b62      	ldrb	r2, [r4, #13]
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
   129ac:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	       (features[1] << 8) | (features[2] << 16);
   129b0:	7ba2      	ldrb	r2, [r4, #14]
   129b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	feat &= RADIO_BLE_FEAT_BIT_MASK;
   129b6:	f3c3 0310 	ubfx	r3, r3, #0, #17
		_radio.conn_curr->llcp_features &= feat_get(&req->features[0]);
   129ba:	f8d5 20a4 	ldr.w	r2, [r5, #164]	; 0xa4
   129be:	4013      	ands	r3, r2
   129c0:	f8c5 30a4 	str.w	r3, [r5, #164]	; 0xa4
		_radio.conn_curr->common.fex_valid = 1;
   129c4:	4a07      	ldr	r2, [pc, #28]	; (129e4 <isr_rx_conn_pkt_ctrl+0x290>)
   129c6:	f8d2 1110 	ldr.w	r1, [r2, #272]	; 0x110
   129ca:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
   129ce:	f043 0320 	orr.w	r3, r3, #32
   129d2:	f881 3050 	strb.w	r3, [r1, #80]	; 0x50
		feature_rsp_send(_radio.conn_curr);
   129d6:	f8d2 0110 	ldr.w	r0, [r2, #272]	; 0x110
   129da:	f7ff f8fd 	bl	11bd8 <feature_rsp_send>
	u8_t nack = 0;
   129de:	2400      	movs	r4, #0
	break;
   129e0:	e6f2      	b.n	127c8 <isr_rx_conn_pkt_ctrl+0x74>
   129e2:	bf00      	nop
   129e4:	20000e84 	.word	0x20000e84
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
   129e8:	7b23      	ldrb	r3, [r4, #12]
   129ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
   129ee:	f443 037e 	orr.w	r3, r3, #16646144	; 0xfe0000
   129f2:	f443 5343 	orr.w	r3, r3, #12480	; 0x30c0
   129f6:	f043 0310 	orr.w	r3, r3, #16
	       (features[1] << 8) | (features[2] << 16);
   129fa:	7b62      	ldrb	r2, [r4, #13]
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
   129fc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	       (features[1] << 8) | (features[2] << 16);
   12a00:	7ba2      	ldrb	r2, [r4, #14]
   12a02:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	feat &= RADIO_BLE_FEAT_BIT_MASK;
   12a06:	f3c3 0310 	ubfx	r3, r3, #0, #17
		_radio.conn_curr->llcp_features &= feat_get(&rsp->features[0]);
   12a0a:	f8d5 20a4 	ldr.w	r2, [r5, #164]	; 0xa4
   12a0e:	4013      	ands	r3, r2
   12a10:	f8c5 30a4 	str.w	r3, [r5, #164]	; 0xa4
		_radio.conn_curr->common.fex_valid = 1;
   12a14:	4ad2      	ldr	r2, [pc, #840]	; (12d60 <isr_rx_conn_pkt_ctrl+0x60c>)
   12a16:	f8d2 1110 	ldr.w	r1, [r2, #272]	; 0x110
   12a1a:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
   12a1e:	f043 0320 	orr.w	r3, r3, #32
   12a22:	f881 3050 	strb.w	r3, [r1, #80]	; 0x50
		*rx_enqueue = 1;
   12a26:	2301      	movs	r3, #1
   12a28:	703b      	strb	r3, [r7, #0]
		_radio.conn_curr->procedure_expire = 0;
   12a2a:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
   12a2e:	2400      	movs	r4, #0
   12a30:	f8a3 4044 	strh.w	r4, [r3, #68]	; 0x44
	break;
   12a34:	e6c8      	b.n	127c8 <isr_rx_conn_pkt_ctrl+0x74>
		pause_enc_rsp_send(_radio.conn_curr);
   12a36:	4628      	mov	r0, r5
   12a38:	f7fe fae8 	bl	1100c <pause_enc_rsp_send>
		_radio.conn_curr->pause_rx = 1;
   12a3c:	4bc8      	ldr	r3, [pc, #800]	; (12d60 <isr_rx_conn_pkt_ctrl+0x60c>)
   12a3e:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   12a42:	f891 20f8 	ldrb.w	r2, [r1, #248]	; 0xf8
   12a46:	f042 0204 	orr.w	r2, r2, #4
   12a4a:	f881 20f8 	strb.w	r2, [r1, #248]	; 0xf8
		_radio.conn_curr->refresh = 1;
   12a4e:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   12a52:	f891 20f8 	ldrb.w	r2, [r1, #248]	; 0xf8
   12a56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   12a5a:	f881 20f8 	strb.w	r2, [r1, #248]	; 0xf8
		_radio.conn_curr->enc_rx = 0;
   12a5e:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   12a62:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   12a66:	f36f 1204 	bfc	r2, #4, #1
   12a6a:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
	u8_t nack = 0;
   12a6e:	2400      	movs	r4, #0
		break;
   12a70:	e6aa      	b.n	127c8 <isr_rx_conn_pkt_ctrl+0x74>
		if (_radio.role == ROLE_MASTER) {
   12a72:	4bbb      	ldr	r3, [pc, #748]	; (12d60 <isr_rx_conn_pkt_ctrl+0x60c>)
   12a74:	7bdb      	ldrb	r3, [r3, #15]
   12a76:	b2db      	uxtb	r3, r3
   12a78:	2b04      	cmp	r3, #4
   12a7a:	d00a      	beq.n	12a92 <isr_rx_conn_pkt_ctrl+0x33e>
		_radio.conn_curr->enc_tx = 0;
   12a7c:	4bb8      	ldr	r3, [pc, #736]	; (12d60 <isr_rx_conn_pkt_ctrl+0x60c>)
   12a7e:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   12a82:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   12a86:	f36f 1245 	bfc	r2, #5, #1
   12a8a:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
	u8_t nack = 0;
   12a8e:	2400      	movs	r4, #0
		break;
   12a90:	e69a      	b.n	127c8 <isr_rx_conn_pkt_ctrl+0x74>
			pause_enc_rsp_send(_radio.conn_curr);
   12a92:	4628      	mov	r0, r5
   12a94:	f7fe faba 	bl	1100c <pause_enc_rsp_send>
			_radio.conn_curr->pause_rx = 1;
   12a98:	4ab1      	ldr	r2, [pc, #708]	; (12d60 <isr_rx_conn_pkt_ctrl+0x60c>)
   12a9a:	f8d2 1110 	ldr.w	r1, [r2, #272]	; 0x110
   12a9e:	f891 30f8 	ldrb.w	r3, [r1, #248]	; 0xf8
   12aa2:	f043 0304 	orr.w	r3, r3, #4
   12aa6:	f881 30f8 	strb.w	r3, [r1, #248]	; 0xf8
			_radio.conn_curr->enc_rx = 0;
   12aaa:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
   12aae:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   12ab2:	f36f 1204 	bfc	r2, #4, #1
   12ab6:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
   12aba:	e7df      	b.n	12a7c <isr_rx_conn_pkt_ctrl+0x328>
			version_ind.version_number;
   12abc:	7b23      	ldrb	r3, [r4, #12]
		_radio.conn_curr->llcp_version.version_number =
   12abe:	f885 30a9 	strb.w	r3, [r5, #169]	; 0xa9
		_radio.conn_curr->llcp_version. company_id =
   12ac2:	4ba7      	ldr	r3, [pc, #668]	; (12d60 <isr_rx_conn_pkt_ctrl+0x60c>)
   12ac4:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
			pdu_data_rx->payload.llctrl.ctrldata.version_ind.company_id;
   12ac8:	f8b4 100d 	ldrh.w	r1, [r4, #13]
		_radio.conn_curr->llcp_version. company_id =
   12acc:	f8a2 10aa 	strh.w	r1, [r2, #170]	; 0xaa
		_radio.conn_curr->llcp_version.sub_version_number =
   12ad0:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
			pdu_data_rx->payload.llctrl.ctrldata.version_ind.sub_version_number;
   12ad4:	f8b4 100f 	ldrh.w	r1, [r4, #15]
		_radio.conn_curr->llcp_version.sub_version_number =
   12ad8:	f8a2 10ac 	strh.w	r1, [r2, #172]	; 0xac
		if ((_radio.conn_curr->llcp_version.tx != 0) &&
   12adc:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   12ae0:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
   12ae4:	f003 0303 	and.w	r3, r3, #3
   12ae8:	2b01      	cmp	r3, #1
   12aea:	d011      	beq.n	12b10 <isr_rx_conn_pkt_ctrl+0x3bc>
		_radio.conn_curr->llcp_version.rx = 1;
   12aec:	4a9c      	ldr	r2, [pc, #624]	; (12d60 <isr_rx_conn_pkt_ctrl+0x60c>)
   12aee:	f8d2 1110 	ldr.w	r1, [r2, #272]	; 0x110
   12af2:	f891 30a8 	ldrb.w	r3, [r1, #168]	; 0xa8
   12af6:	f043 0302 	orr.w	r3, r3, #2
   12afa:	f881 30a8 	strb.w	r3, [r1, #168]	; 0xa8
		if (_radio.conn_curr->llcp_version.tx == 0) {
   12afe:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
   12b02:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
   12b06:	f012 0f01 	tst.w	r2, #1
   12b0a:	d009      	beq.n	12b20 <isr_rx_conn_pkt_ctrl+0x3cc>
	u8_t nack = 0;
   12b0c:	2400      	movs	r4, #0
   12b0e:	e65b      	b.n	127c8 <isr_rx_conn_pkt_ctrl+0x74>
			*rx_enqueue = 1;
   12b10:	703b      	strb	r3, [r7, #0]
			_radio.conn_curr->procedure_expire = 0;
   12b12:	4b93      	ldr	r3, [pc, #588]	; (12d60 <isr_rx_conn_pkt_ctrl+0x60c>)
   12b14:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   12b18:	2200      	movs	r2, #0
   12b1a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
   12b1e:	e7e5      	b.n	12aec <isr_rx_conn_pkt_ctrl+0x398>
			_radio.conn_curr->llcp_version.tx = 1;
   12b20:	f042 0201 	orr.w	r2, r2, #1
   12b24:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
			version_ind_send(_radio.conn_curr);
   12b28:	4b8d      	ldr	r3, [pc, #564]	; (12d60 <isr_rx_conn_pkt_ctrl+0x60c>)
   12b2a:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
   12b2e:	f7ff f90b 	bl	11d48 <version_ind_send>
	u8_t nack = 0;
   12b32:	2400      	movs	r4, #0
   12b34:	e648      	b.n	127c8 <isr_rx_conn_pkt_ctrl+0x74>
		_radio.conn_curr->pause_rx = 0;
   12b36:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
   12b3a:	f36f 0382 	bfc	r3, #2, #1
   12b3e:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
		_radio.conn_curr->pause_tx = 0;
   12b42:	4b87      	ldr	r3, [pc, #540]	; (12d60 <isr_rx_conn_pkt_ctrl+0x60c>)
   12b44:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   12b48:	f892 10f8 	ldrb.w	r1, [r2, #248]	; 0xf8
   12b4c:	f36f 01c3 	bfc	r1, #3, #1
   12b50:	f882 10f8 	strb.w	r1, [r2, #248]	; 0xf8
		_radio.conn_curr->procedure_expire = 0;
   12b54:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   12b58:	2400      	movs	r4, #0
   12b5a:	f8a3 4044 	strh.w	r4, [r3, #68]	; 0x44
		*rx_enqueue = 1;
   12b5e:	2301      	movs	r3, #1
   12b60:	703b      	strb	r3, [r7, #0]
		break;
   12b62:	e631      	b.n	127c8 <isr_rx_conn_pkt_ctrl+0x74>
		if (_radio.conn_upd && (_radio.conn_upd != _radio.conn_curr)) {
   12b64:	4a7e      	ldr	r2, [pc, #504]	; (12d60 <isr_rx_conn_pkt_ctrl+0x60c>)
   12b66:	f8d2 2184 	ldr.w	r2, [r2, #388]	; 0x184
   12b6a:	b142      	cbz	r2, 12b7e <isr_rx_conn_pkt_ctrl+0x42a>
   12b6c:	4295      	cmp	r5, r2
   12b6e:	d006      	beq.n	12b7e <isr_rx_conn_pkt_ctrl+0x42a>
			reject_ext_ind_send(_radio.conn_curr,
   12b70:	2220      	movs	r2, #32
   12b72:	210f      	movs	r1, #15
   12b74:	4628      	mov	r0, r5
   12b76:	f7fe faa5 	bl	110c4 <reject_ext_ind_send>
	u8_t nack = 0;
   12b7a:	2400      	movs	r4, #0
			break;
   12b7c:	e624      	b.n	127c8 <isr_rx_conn_pkt_ctrl+0x74>
		if (!_radio.conn_curr->role) {
   12b7e:	2b00      	cmp	r3, #0
   12b80:	f2c0 80bc 	blt.w	12cfc <isr_rx_conn_pkt_ctrl+0x5a8>
			if ((conn->llcp_conn_param.req !=
   12b84:	f895 20c0 	ldrb.w	r2, [r5, #192]	; 0xc0
					conn->llcp_conn_param.ack) &&
   12b88:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
			if ((conn->llcp_conn_param.req !=
   12b8c:	429a      	cmp	r2, r3
   12b8e:	d008      	beq.n	12ba2 <isr_rx_conn_pkt_ctrl+0x44e>
			    ((conn->llcp_conn_param.state ==
   12b90:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
					conn->llcp_conn_param.ack) &&
   12b94:	f013 0307 	ands.w	r3, r3, #7
   12b98:	d016      	beq.n	12bc8 <isr_rx_conn_pkt_ctrl+0x474>
			      LLCP_CPR_STATE_REQ) ||
   12b9a:	2b04      	cmp	r3, #4
   12b9c:	d014      	beq.n	12bc8 <isr_rx_conn_pkt_ctrl+0x474>
			      LLCP_CPR_STATE_RSP_WAIT) ||
   12b9e:	2b05      	cmp	r3, #5
   12ba0:	d012      	beq.n	12bc8 <isr_rx_conn_pkt_ctrl+0x474>
			} else if ((conn->llcp_req != conn->llcp_ack) ||
   12ba2:	f895 2074 	ldrb.w	r2, [r5, #116]	; 0x74
   12ba6:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
   12baa:	429a      	cmp	r2, r3
   12bac:	d105      	bne.n	12bba <isr_rx_conn_pkt_ctrl+0x466>
				   (conn->llcp_phy.req != conn->llcp_phy.ack)) {
   12bae:	f895 20f4 	ldrb.w	r2, [r5, #244]	; 0xf4
   12bb2:	f895 30f5 	ldrb.w	r3, [r5, #245]	; 0xf5
			} else if ((conn->llcp_req != conn->llcp_ack) ||
   12bb6:	429a      	cmp	r2, r3
   12bb8:	d00d      	beq.n	12bd6 <isr_rx_conn_pkt_ctrl+0x482>
				reject_ext_ind_send(_radio.conn_curr,
   12bba:	222a      	movs	r2, #42	; 0x2a
   12bbc:	210f      	movs	r1, #15
   12bbe:	4628      	mov	r0, r5
   12bc0:	f7fe fa80 	bl	110c4 <reject_ext_ind_send>
	u8_t nack = 0;
   12bc4:	2400      	movs	r4, #0
				reject_ext_ind_send(_radio.conn_curr,
   12bc6:	e5ff      	b.n	127c8 <isr_rx_conn_pkt_ctrl+0x74>
				reject_ext_ind_send(_radio.conn_curr,
   12bc8:	2223      	movs	r2, #35	; 0x23
   12bca:	210f      	movs	r1, #15
   12bcc:	4628      	mov	r0, r5
   12bce:	f7fe fa79 	bl	110c4 <reject_ext_ind_send>
	u8_t nack = 0;
   12bd2:	2400      	movs	r4, #0
				reject_ext_ind_send(_radio.conn_curr,
   12bd4:	e5f8      	b.n	127c8 <isr_rx_conn_pkt_ctrl+0x74>
				if ((cpr->interval_min < 6) ||
   12bd6:	89a0      	ldrh	r0, [r4, #12]
   12bd8:	b282      	uxth	r2, r0
   12bda:	2a05      	cmp	r2, #5
   12bdc:	d970      	bls.n	12cc0 <isr_rx_conn_pkt_ctrl+0x56c>
				    (cpr->interval_max > 3200) ||
   12bde:	89e3      	ldrh	r3, [r4, #14]
				if ((cpr->interval_min < 6) ||
   12be0:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   12be4:	d86c      	bhi.n	12cc0 <isr_rx_conn_pkt_ctrl+0x56c>
				    (cpr->interval_max > 3200) ||
   12be6:	429a      	cmp	r2, r3
   12be8:	d86a      	bhi.n	12cc0 <isr_rx_conn_pkt_ctrl+0x56c>
				    (cpr->latency > 499) ||
   12bea:	8a22      	ldrh	r2, [r4, #16]
				    (cpr->interval_min > cpr->interval_max) ||
   12bec:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
   12bf0:	d266      	bcs.n	12cc0 <isr_rx_conn_pkt_ctrl+0x56c>
				    (cpr->timeout < 10) ||
   12bf2:	8a61      	ldrh	r1, [r4, #18]
				    (cpr->latency > 499) ||
   12bf4:	2909      	cmp	r1, #9
   12bf6:	d963      	bls.n	12cc0 <isr_rx_conn_pkt_ctrl+0x56c>
				    (cpr->timeout < 10) ||
   12bf8:	f5b1 6f48 	cmp.w	r1, #3200	; 0xc80
   12bfc:	d860      	bhi.n	12cc0 <isr_rx_conn_pkt_ctrl+0x56c>
				     ((cpr->latency + 1) *
   12bfe:	fb02 3203 	mla	r2, r2, r3, r3
				    (cpr->timeout > 3200) ||
   12c02:	ebb2 0f81 	cmp.w	r2, r1, lsl #2
   12c06:	da5b      	bge.n	12cc0 <isr_rx_conn_pkt_ctrl+0x56c>
				    (cpr->preferred_periodicity >
   12c08:	7d22      	ldrb	r2, [r4, #20]
				      cpr->interval_max)) ||
   12c0a:	4293      	cmp	r3, r2
   12c0c:	d358      	bcc.n	12cc0 <isr_rx_conn_pkt_ctrl+0x56c>
				conn->llcp_conn_param.interval = cpr->interval_min;
   12c0e:	f8a5 00c4 	strh.w	r0, [r5, #196]	; 0xc4
				conn->llcp_conn_param.latency =	cpr->latency;
   12c12:	8a23      	ldrh	r3, [r4, #16]
   12c14:	f8a5 30c6 	strh.w	r3, [r5, #198]	; 0xc6
				conn->llcp_conn_param.timeout =	cpr->timeout;
   12c18:	8a62      	ldrh	r2, [r4, #18]
   12c1a:	b293      	uxth	r3, r2
   12c1c:	f8a5 20c8 	strh.w	r2, [r5, #200]	; 0xc8
					cpr->preferred_periodicity;
   12c20:	7d22      	ldrb	r2, [r4, #20]
				conn->llcp_conn_param.preferred_periodicity =
   12c22:	f885 20ca 	strb.w	r2, [r5, #202]	; 0xca
					cpr->reference_conn_event_count;
   12c26:	f8b4 2015 	ldrh.w	r2, [r4, #21]
				conn->llcp_conn_param.reference_conn_event_count =
   12c2a:	f8a5 20cc 	strh.w	r2, [r5, #204]	; 0xcc
				conn->llcp_conn_param.offset0 =	cpr->offset0;
   12c2e:	f8b4 2017 	ldrh.w	r2, [r4, #23]
   12c32:	f8a5 20ce 	strh.w	r2, [r5, #206]	; 0xce
				conn->llcp_conn_param.offset1 =	cpr->offset1;
   12c36:	f8b4 2019 	ldrh.w	r2, [r4, #25]
   12c3a:	f8a5 20d0 	strh.w	r2, [r5, #208]	; 0xd0
				conn->llcp_conn_param.offset2 =	cpr->offset2;
   12c3e:	f8b4 201b 	ldrh.w	r2, [r4, #27]
   12c42:	f8a5 20d2 	strh.w	r2, [r5, #210]	; 0xd2
				conn->llcp_conn_param.offset3 =	cpr->offset3;
   12c46:	f8b4 201d 	ldrh.w	r2, [r4, #29]
   12c4a:	f8a5 20d4 	strh.w	r2, [r5, #212]	; 0xd4
				conn->llcp_conn_param.offset4 =	cpr->offset4;
   12c4e:	f8b4 201f 	ldrh.w	r2, [r4, #31]
   12c52:	f8a5 20d6 	strh.w	r2, [r5, #214]	; 0xd6
				conn->llcp_conn_param.offset5 =	cpr->offset5;
   12c56:	f8b4 2021 	ldrh.w	r2, [r4, #33]	; 0x21
   12c5a:	f8a5 20d8 	strh.w	r2, [r5, #216]	; 0xd8
				     conn->conn_interval) ||
   12c5e:	f8d5 10c4 	ldr.w	r1, [r5, #196]	; 0xc4
   12c62:	6a6a      	ldr	r2, [r5, #36]	; 0x24
				if ((conn->llcp_conn_param.interval !=
   12c64:	4291      	cmp	r1, r2
   12c66:	d10f      	bne.n	12c88 <isr_rx_conn_pkt_ctrl+0x534>
				    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   12c68:	8ca9      	ldrh	r1, [r5, #36]	; 0x24
   12c6a:	f240 42e2 	movw	r2, #1250	; 0x4e2
   12c6e:	fb02 f201 	mul.w	r2, r2, r1
   12c72:	f242 7110 	movw	r1, #10000	; 0x2710
   12c76:	fb01 2303 	mla	r3, r1, r3, r2
   12c7a:	3b01      	subs	r3, #1
   12c7c:	fb93 f3f2 	sdiv	r3, r3, r2
   12c80:	b29b      	uxth	r3, r3
				     conn->supervision_reload)) {
   12c82:	8fea      	ldrh	r2, [r5, #62]	; 0x3e
				     conn->latency) ||
   12c84:	4293      	cmp	r3, r2
   12c86:	d02c      	beq.n	12ce2 <isr_rx_conn_pkt_ctrl+0x58e>
					if (conn->pause_tx) {
   12c88:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
   12c8c:	f013 0f08 	tst.w	r3, #8
   12c90:	d01d      	beq.n	12cce <isr_rx_conn_pkt_ctrl+0x57a>
						conn->llcp_conn_param.state =
   12c92:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
   12c96:	2202      	movs	r2, #2
   12c98:	f362 0302 	bfi	r3, r2, #0, #3
   12c9c:	f885 30c2 	strb.w	r3, [r5, #194]	; 0xc2
				conn->llcp_conn_param.ack--;
   12ca0:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
   12ca4:	3b01      	subs	r3, #1
   12ca6:	f885 30c1 	strb.w	r3, [r5, #193]	; 0xc1
				if (_radio.conn_upd == 0) {
   12caa:	4b2d      	ldr	r3, [pc, #180]	; (12d60 <isr_rx_conn_pkt_ctrl+0x60c>)
   12cac:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
   12cb0:	2b00      	cmp	r3, #0
   12cb2:	f040 8580 	bne.w	137b6 <isr_rx_conn_pkt_ctrl+0x1062>
					_radio.conn_upd = conn;
   12cb6:	4b2a      	ldr	r3, [pc, #168]	; (12d60 <isr_rx_conn_pkt_ctrl+0x60c>)
   12cb8:	f8c3 5184 	str.w	r5, [r3, #388]	; 0x184
	u8_t nack = 0;
   12cbc:	2400      	movs	r4, #0
   12cbe:	e583      	b.n	127c8 <isr_rx_conn_pkt_ctrl+0x74>
					reject_ext_ind_send(conn,
   12cc0:	221e      	movs	r2, #30
   12cc2:	210f      	movs	r1, #15
   12cc4:	4628      	mov	r0, r5
   12cc6:	f7fe f9fd 	bl	110c4 <reject_ext_ind_send>
	u8_t nack = 0;
   12cca:	2400      	movs	r4, #0
					break;
   12ccc:	e57c      	b.n	127c8 <isr_rx_conn_pkt_ctrl+0x74>
						*rx_enqueue = 1;
   12cce:	2301      	movs	r3, #1
   12cd0:	703b      	strb	r3, [r7, #0]
						conn->llcp_conn_param.state =
   12cd2:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
   12cd6:	2203      	movs	r2, #3
   12cd8:	f362 0302 	bfi	r3, r2, #0, #3
   12cdc:	f885 30c2 	strb.w	r3, [r5, #194]	; 0xc2
   12ce0:	e7de      	b.n	12ca0 <isr_rx_conn_pkt_ctrl+0x54c>
					conn->llcp_conn_param.status = 0;
   12ce2:	2300      	movs	r3, #0
   12ce4:	f885 30c3 	strb.w	r3, [r5, #195]	; 0xc3
					conn->llcp_conn_param.cmd = 0;
   12ce8:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
					conn->llcp_conn_param.state =
   12cec:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
   12cf0:	2201      	movs	r2, #1
   12cf2:	f362 0302 	bfi	r3, r2, #0, #3
   12cf6:	f885 30c2 	strb.w	r3, [r5, #194]	; 0xc2
   12cfa:	e7d1      	b.n	12ca0 <isr_rx_conn_pkt_ctrl+0x54c>
		} else if ((_radio.conn_curr->llcp_conn_param.req ==
   12cfc:	f895 20c0 	ldrb.w	r2, [r5, #192]	; 0xc0
			    _radio.conn_curr->llcp_conn_param.ack) ||
   12d00:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
		} else if ((_radio.conn_curr->llcp_conn_param.req ==
   12d04:	429a      	cmp	r2, r3
   12d06:	d007      	beq.n	12d18 <isr_rx_conn_pkt_ctrl+0x5c4>
			   (_radio.conn_curr->llcp_conn_param.state ==
   12d08:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
			    _radio.conn_curr->llcp_conn_param.ack) ||
   12d0c:	f013 0307 	ands.w	r3, r3, #7
   12d10:	d002      	beq.n	12d18 <isr_rx_conn_pkt_ctrl+0x5c4>
			    LLCP_CPR_STATE_REQ) ||
   12d12:	2b04      	cmp	r3, #4
   12d14:	f040 8089 	bne.w	12e2a <isr_rx_conn_pkt_ctrl+0x6d6>
			if ((cpr->interval_min < 6) ||
   12d18:	89a1      	ldrh	r1, [r4, #12]
   12d1a:	b28a      	uxth	r2, r1
   12d1c:	2a05      	cmp	r2, #5
   12d1e:	d917      	bls.n	12d50 <isr_rx_conn_pkt_ctrl+0x5fc>
			    (cpr->interval_max > 3200) ||
   12d20:	89e3      	ldrh	r3, [r4, #14]
			if ((cpr->interval_min < 6) ||
   12d22:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   12d26:	d813      	bhi.n	12d50 <isr_rx_conn_pkt_ctrl+0x5fc>
			    (cpr->interval_max > 3200) ||
   12d28:	429a      	cmp	r2, r3
   12d2a:	d811      	bhi.n	12d50 <isr_rx_conn_pkt_ctrl+0x5fc>
			    (cpr->latency > 499) ||
   12d2c:	8a22      	ldrh	r2, [r4, #16]
			    (cpr->interval_min > cpr->interval_max) ||
   12d2e:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
   12d32:	d20d      	bcs.n	12d50 <isr_rx_conn_pkt_ctrl+0x5fc>
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
   12d34:	8a60      	ldrh	r0, [r4, #18]
			    (cpr->latency > 499) ||
   12d36:	2809      	cmp	r0, #9
   12d38:	d90a      	bls.n	12d50 <isr_rx_conn_pkt_ctrl+0x5fc>
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
   12d3a:	f5b0 6f48 	cmp.w	r0, #3200	; 0xc80
   12d3e:	d807      	bhi.n	12d50 <isr_rx_conn_pkt_ctrl+0x5fc>
			    ((cpr->timeout * 4) <= ((cpr->latency + 1) *
   12d40:	fb02 3203 	mla	r2, r2, r3, r3
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
   12d44:	ebb2 0f80 	cmp.w	r2, r0, lsl #2
   12d48:	da02      	bge.n	12d50 <isr_rx_conn_pkt_ctrl+0x5fc>
			    (cpr->preferred_periodicity > cpr->interval_max)) {
   12d4a:	7d22      	ldrb	r2, [r4, #20]
						    cpr->interval_max)) ||
   12d4c:	4293      	cmp	r3, r2
   12d4e:	d209      	bcs.n	12d64 <isr_rx_conn_pkt_ctrl+0x610>
				reject_ext_ind_send(conn,
   12d50:	221e      	movs	r2, #30
   12d52:	210f      	movs	r1, #15
   12d54:	4628      	mov	r0, r5
   12d56:	f7fe f9b5 	bl	110c4 <reject_ext_ind_send>
	u8_t nack = 0;
   12d5a:	2400      	movs	r4, #0
				break;
   12d5c:	e534      	b.n	127c8 <isr_rx_conn_pkt_ctrl+0x74>
   12d5e:	bf00      	nop
   12d60:	20000e84 	.word	0x20000e84
			conn->llcp_conn_param.interval = cpr->interval_min;
   12d64:	f8a5 10c4 	strh.w	r1, [r5, #196]	; 0xc4
			conn->llcp_conn_param.latency =	cpr->latency;
   12d68:	8a23      	ldrh	r3, [r4, #16]
   12d6a:	f8a5 30c6 	strh.w	r3, [r5, #198]	; 0xc6
			conn->llcp_conn_param.timeout =	cpr->timeout;
   12d6e:	8a62      	ldrh	r2, [r4, #18]
   12d70:	b293      	uxth	r3, r2
   12d72:	f8a5 20c8 	strh.w	r2, [r5, #200]	; 0xc8
				cpr->preferred_periodicity;
   12d76:	7d22      	ldrb	r2, [r4, #20]
			conn->llcp_conn_param.preferred_periodicity =
   12d78:	f885 20ca 	strb.w	r2, [r5, #202]	; 0xca
				cpr->reference_conn_event_count;
   12d7c:	f8b4 2015 	ldrh.w	r2, [r4, #21]
			conn->llcp_conn_param.reference_conn_event_count =
   12d80:	f8a5 20cc 	strh.w	r2, [r5, #204]	; 0xcc
			conn->llcp_conn_param.offset0 =	cpr->offset0;
   12d84:	f8b4 2017 	ldrh.w	r2, [r4, #23]
   12d88:	f8a5 20ce 	strh.w	r2, [r5, #206]	; 0xce
			conn->llcp_conn_param.offset1 =	cpr->offset1;
   12d8c:	f8b4 2019 	ldrh.w	r2, [r4, #25]
   12d90:	f8a5 20d0 	strh.w	r2, [r5, #208]	; 0xd0
			conn->llcp_conn_param.offset2 =	cpr->offset2;
   12d94:	f8b4 201b 	ldrh.w	r2, [r4, #27]
   12d98:	f8a5 20d2 	strh.w	r2, [r5, #210]	; 0xd2
			conn->llcp_conn_param.offset3 =	cpr->offset3;
   12d9c:	f8b4 201d 	ldrh.w	r2, [r4, #29]
   12da0:	f8a5 20d4 	strh.w	r2, [r5, #212]	; 0xd4
			conn->llcp_conn_param.offset4 =	cpr->offset4;
   12da4:	f8b4 201f 	ldrh.w	r2, [r4, #31]
   12da8:	f8a5 20d6 	strh.w	r2, [r5, #214]	; 0xd6
			conn->llcp_conn_param.offset5 =	cpr->offset5;
   12dac:	f8b4 2021 	ldrh.w	r2, [r4, #33]	; 0x21
   12db0:	f8a5 20d8 	strh.w	r2, [r5, #216]	; 0xd8
			     conn->conn_interval) ||
   12db4:	f8d5 10c4 	ldr.w	r1, [r5, #196]	; 0xc4
   12db8:	6a6a      	ldr	r2, [r5, #36]	; 0x24
			if ((conn->llcp_conn_param.interval !=
   12dba:	4291      	cmp	r1, r2
   12dbc:	d013      	beq.n	12de6 <isr_rx_conn_pkt_ctrl+0x692>
				*rx_enqueue = 1;
   12dbe:	2301      	movs	r3, #1
   12dc0:	703b      	strb	r3, [r7, #0]
				conn->llcp_conn_param.state =
   12dc2:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
   12dc6:	2203      	movs	r2, #3
   12dc8:	f362 0302 	bfi	r3, r2, #0, #3
   12dcc:	f885 30c2 	strb.w	r3, [r5, #194]	; 0xc2
			conn->llcp_conn_param.ack--;
   12dd0:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
   12dd4:	3b01      	subs	r3, #1
   12dd6:	f885 30c1 	strb.w	r3, [r5, #193]	; 0xc1
			if (_radio.conn_upd == 0) {
   12dda:	4bcb      	ldr	r3, [pc, #812]	; (13108 <isr_rx_conn_pkt_ctrl+0x9b4>)
   12ddc:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
   12de0:	b1f3      	cbz	r3, 12e20 <isr_rx_conn_pkt_ctrl+0x6cc>
	u8_t nack = 0;
   12de2:	2400      	movs	r4, #0
   12de4:	e4f0      	b.n	127c8 <isr_rx_conn_pkt_ctrl+0x74>
			    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   12de6:	8ca9      	ldrh	r1, [r5, #36]	; 0x24
   12de8:	f240 42e2 	movw	r2, #1250	; 0x4e2
   12dec:	fb02 f201 	mul.w	r2, r2, r1
   12df0:	f242 7110 	movw	r1, #10000	; 0x2710
   12df4:	fb01 2303 	mla	r3, r1, r3, r2
   12df8:	3b01      	subs	r3, #1
   12dfa:	fb93 f3f2 	sdiv	r3, r3, r2
   12dfe:	b29b      	uxth	r3, r3
			     conn->supervision_reload)) {
   12e00:	8fea      	ldrh	r2, [r5, #62]	; 0x3e
			    (conn->llcp_conn_param.latency != conn->latency) ||
   12e02:	4293      	cmp	r3, r2
   12e04:	d1db      	bne.n	12dbe <isr_rx_conn_pkt_ctrl+0x66a>
				conn->llcp_conn_param.status = 0;
   12e06:	2300      	movs	r3, #0
   12e08:	f885 30c3 	strb.w	r3, [r5, #195]	; 0xc3
				conn->llcp_conn_param.cmd = 0;
   12e0c:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
				conn->llcp_conn_param.state =
   12e10:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
   12e14:	2201      	movs	r2, #1
   12e16:	f362 0302 	bfi	r3, r2, #0, #3
   12e1a:	f885 30c2 	strb.w	r3, [r5, #194]	; 0xc2
   12e1e:	e7d7      	b.n	12dd0 <isr_rx_conn_pkt_ctrl+0x67c>
				_radio.conn_upd = conn;
   12e20:	4bb9      	ldr	r3, [pc, #740]	; (13108 <isr_rx_conn_pkt_ctrl+0x9b4>)
   12e22:	f8c3 5184 	str.w	r5, [r3, #388]	; 0x184
	u8_t nack = 0;
   12e26:	2400      	movs	r4, #0
   12e28:	e4ce      	b.n	127c8 <isr_rx_conn_pkt_ctrl+0x74>
			LL_ASSERT(0);
   12e2a:	4040      	eors	r0, r0
   12e2c:	f380 8811 	msr	BASEPRI, r0
   12e30:	f04f 0004 	mov.w	r0, #4
   12e34:	df02      	svc	2
		if (!_radio.conn_curr->role &&
   12e36:	2b00      	cmp	r3, #0
   12e38:	f2c0 84c0 	blt.w	137bc <isr_rx_conn_pkt_ctrl+0x1068>
		    (_radio.conn_curr->llcp_conn_param.req !=
   12e3c:	f895 20c0 	ldrb.w	r2, [r5, #192]	; 0xc0
		     _radio.conn_curr->llcp_conn_param.ack) &&
   12e40:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
		if (!_radio.conn_curr->role &&
   12e44:	429a      	cmp	r2, r3
   12e46:	f000 84bc 	beq.w	137c2 <isr_rx_conn_pkt_ctrl+0x106e>
		    (_radio.conn_curr->llcp_conn_param.state ==
   12e4a:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
   12e4e:	f003 0307 	and.w	r3, r3, #7
		     _radio.conn_curr->llcp_conn_param.ack) &&
   12e52:	2b04      	cmp	r3, #4
   12e54:	d001      	beq.n	12e5a <isr_rx_conn_pkt_ctrl+0x706>
	u8_t nack = 0;
   12e56:	2400      	movs	r4, #0
   12e58:	e4b6      	b.n	127c8 <isr_rx_conn_pkt_ctrl+0x74>
			if ((cpr->interval_min < 6) ||
   12e5a:	89a2      	ldrh	r2, [r4, #12]
   12e5c:	2a05      	cmp	r2, #5
   12e5e:	d917      	bls.n	12e90 <isr_rx_conn_pkt_ctrl+0x73c>
			    (cpr->interval_max > 3200) ||
   12e60:	89e3      	ldrh	r3, [r4, #14]
			if ((cpr->interval_min < 6) ||
   12e62:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   12e66:	d813      	bhi.n	12e90 <isr_rx_conn_pkt_ctrl+0x73c>
			    (cpr->interval_max > 3200) ||
   12e68:	429a      	cmp	r2, r3
   12e6a:	d811      	bhi.n	12e90 <isr_rx_conn_pkt_ctrl+0x73c>
			    (cpr->latency > 499) ||
   12e6c:	8a22      	ldrh	r2, [r4, #16]
			    (cpr->interval_min > cpr->interval_max) ||
   12e6e:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
   12e72:	d20d      	bcs.n	12e90 <isr_rx_conn_pkt_ctrl+0x73c>
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
   12e74:	8a61      	ldrh	r1, [r4, #18]
			    (cpr->latency > 499) ||
   12e76:	2909      	cmp	r1, #9
   12e78:	d90a      	bls.n	12e90 <isr_rx_conn_pkt_ctrl+0x73c>
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
   12e7a:	f5b1 6f48 	cmp.w	r1, #3200	; 0xc80
   12e7e:	d807      	bhi.n	12e90 <isr_rx_conn_pkt_ctrl+0x73c>
			    ((cpr->timeout * 4) <= ((cpr->latency + 1) *
   12e80:	fb02 3203 	mla	r2, r2, r3, r3
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
   12e84:	ebb2 0f81 	cmp.w	r2, r1, lsl #2
   12e88:	da02      	bge.n	12e90 <isr_rx_conn_pkt_ctrl+0x73c>
			    (cpr->preferred_periodicity > cpr->interval_max)) {
   12e8a:	7d22      	ldrb	r2, [r4, #20]
						    cpr->interval_max)) ||
   12e8c:	4293      	cmp	r3, r2
   12e8e:	d206      	bcs.n	12e9e <isr_rx_conn_pkt_ctrl+0x74a>
				reject_ext_ind_send(conn,
   12e90:	221e      	movs	r2, #30
   12e92:	2110      	movs	r1, #16
   12e94:	4628      	mov	r0, r5
   12e96:	f7fe f915 	bl	110c4 <reject_ext_ind_send>
	u8_t nack = 0;
   12e9a:	2400      	movs	r4, #0
				break;
   12e9c:	e494      	b.n	127c8 <isr_rx_conn_pkt_ctrl+0x74>
			_radio.conn_curr->procedure_expire = 0;
   12e9e:	2300      	movs	r3, #0
   12ea0:	f8a5 3044 	strh.w	r3, [r5, #68]	; 0x44
			conn->llcp_conn_param.interval = cpr->interval_min;
   12ea4:	89a2      	ldrh	r2, [r4, #12]
   12ea6:	f8a5 20c4 	strh.w	r2, [r5, #196]	; 0xc4
			conn->llcp_conn_param.latency =	cpr->latency;
   12eaa:	8a22      	ldrh	r2, [r4, #16]
   12eac:	f8a5 20c6 	strh.w	r2, [r5, #198]	; 0xc6
			conn->llcp_conn_param.timeout =	cpr->timeout;
   12eb0:	8a62      	ldrh	r2, [r4, #18]
   12eb2:	f8a5 20c8 	strh.w	r2, [r5, #200]	; 0xc8
				cpr->preferred_periodicity;
   12eb6:	7d22      	ldrb	r2, [r4, #20]
			conn->llcp_conn_param.preferred_periodicity =
   12eb8:	f885 20ca 	strb.w	r2, [r5, #202]	; 0xca
				cpr->reference_conn_event_count;
   12ebc:	f8b4 2015 	ldrh.w	r2, [r4, #21]
			conn->llcp_conn_param.reference_conn_event_count =
   12ec0:	f8a5 20cc 	strh.w	r2, [r5, #204]	; 0xcc
			conn->llcp_conn_param.offset0 =	cpr->offset0;
   12ec4:	f8b4 2017 	ldrh.w	r2, [r4, #23]
   12ec8:	f8a5 20ce 	strh.w	r2, [r5, #206]	; 0xce
			conn->llcp_conn_param.offset1 =	cpr->offset1;
   12ecc:	f8b4 2019 	ldrh.w	r2, [r4, #25]
   12ed0:	f8a5 20d0 	strh.w	r2, [r5, #208]	; 0xd0
			conn->llcp_conn_param.offset2 =	cpr->offset2;
   12ed4:	f8b4 201b 	ldrh.w	r2, [r4, #27]
   12ed8:	f8a5 20d2 	strh.w	r2, [r5, #210]	; 0xd2
			conn->llcp_conn_param.offset3 =	cpr->offset3;
   12edc:	f8b4 201d 	ldrh.w	r2, [r4, #29]
   12ee0:	f8a5 20d4 	strh.w	r2, [r5, #212]	; 0xd4
			conn->llcp_conn_param.offset4 =	cpr->offset4;
   12ee4:	f8b4 201f 	ldrh.w	r2, [r4, #31]
   12ee8:	f8a5 20d6 	strh.w	r2, [r5, #214]	; 0xd6
			conn->llcp_conn_param.offset5 =	cpr->offset5;
   12eec:	f8b4 2021 	ldrh.w	r2, [r4, #33]	; 0x21
   12ef0:	f8a5 20d8 	strh.w	r2, [r5, #216]	; 0xd8
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
   12ef4:	f895 20c2 	ldrb.w	r2, [r5, #194]	; 0xc2
   12ef8:	2101      	movs	r1, #1
   12efa:	f361 0202 	bfi	r2, r1, #0, #3
   12efe:	f885 20c2 	strb.w	r2, [r5, #194]	; 0xc2
	u8_t nack = 0;
   12f02:	461c      	mov	r4, r3
   12f04:	e460      	b.n	127c8 <isr_rx_conn_pkt_ctrl+0x74>
	} else if (_radio.conn_curr->llcp_phy.ack !=
   12f06:	4b80      	ldr	r3, [pc, #512]	; (13108 <isr_rx_conn_pkt_ctrl+0x9b4>)
   12f08:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   12f0c:	f893 10f5 	ldrb.w	r1, [r3, #245]	; 0xf5
		   _radio.conn_curr->llcp_phy.req) {
   12f10:	f893 20f4 	ldrb.w	r2, [r3, #244]	; 0xf4
	} else if (_radio.conn_curr->llcp_phy.ack !=
   12f14:	4291      	cmp	r1, r2
   12f16:	d112      	bne.n	12f3e <isr_rx_conn_pkt_ctrl+0x7ea>
	} else if (_radio.conn_curr->llcp_conn_param.ack !=
   12f18:	f893 10c1 	ldrb.w	r1, [r3, #193]	; 0xc1
		   _radio.conn_curr->llcp_conn_param.req) {
   12f1c:	f893 20c0 	ldrb.w	r2, [r3, #192]	; 0xc0
	} else if (_radio.conn_curr->llcp_conn_param.ack !=
   12f20:	4291      	cmp	r1, r2
   12f22:	d14c      	bne.n	12fbe <isr_rx_conn_pkt_ctrl+0x86a>
	} else if (_radio.conn_curr->llcp_length.ack !=
   12f24:	f893 10e9 	ldrb.w	r1, [r3, #233]	; 0xe9
		   _radio.conn_curr->llcp_length.req) {
   12f28:	f893 20e8 	ldrb.w	r2, [r3, #232]	; 0xe8
	} else if (_radio.conn_curr->llcp_length.ack !=
   12f2c:	4291      	cmp	r1, r2
   12f2e:	f000 80ef 	beq.w	13110 <isr_rx_conn_pkt_ctrl+0x9bc>
	if (rej_ext_ind->reject_opcode == PDU_DATA_LLCTRL_TYPE_LENGTH_REQ) {
   12f32:	7b21      	ldrb	r1, [r4, #12]
   12f34:	2914      	cmp	r1, #20
   12f36:	f000 80cb 	beq.w	130d0 <isr_rx_conn_pkt_ctrl+0x97c>
	u8_t nack = 0;
   12f3a:	2400      	movs	r4, #0
   12f3c:	e444      	b.n	127c8 <isr_rx_conn_pkt_ctrl+0x74>
	if (rej_ext_ind->reject_opcode == PDU_DATA_LLCTRL_TYPE_PHY_REQ) {
   12f3e:	7b23      	ldrb	r3, [r4, #12]
   12f40:	2b16      	cmp	r3, #22
   12f42:	d001      	beq.n	12f48 <isr_rx_conn_pkt_ctrl+0x7f4>
	u8_t nack = 0;
   12f44:	2400      	movs	r4, #0
   12f46:	e43f      	b.n	127c8 <isr_rx_conn_pkt_ctrl+0x74>
		if (rej_ext_ind->error_code != 0x23) {
   12f48:	7b63      	ldrb	r3, [r4, #13]
   12f4a:	2b23      	cmp	r3, #35	; 0x23
   12f4c:	d017      	beq.n	12f7e <isr_rx_conn_pkt_ctrl+0x82a>
			_radio.conn_curr->llcp_phy.ack =
   12f4e:	4b6e      	ldr	r3, [pc, #440]	; (13108 <isr_rx_conn_pkt_ctrl+0x9b4>)
   12f50:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
				_radio.conn_curr->llcp_phy.req;
   12f54:	f892 10f4 	ldrb.w	r1, [r2, #244]	; 0xf4
			_radio.conn_curr->llcp_phy.ack =
   12f58:	f882 10f5 	strb.w	r1, [r2, #245]	; 0xf5
			_radio.conn_curr->phy_tx_time =
   12f5c:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
				_radio.conn_curr->phy_tx;
   12f60:	f892 1038 	ldrb.w	r1, [r2, #56]	; 0x38
   12f64:	f3c1 01c2 	ubfx	r1, r1, #3, #3
			_radio.conn_curr->phy_tx_time =
   12f68:	f892 0039 	ldrb.w	r0, [r2, #57]	; 0x39
   12f6c:	f361 0002 	bfi	r0, r1, #0, #3
   12f70:	f882 0039 	strb.w	r0, [r2, #57]	; 0x39
			_radio.conn_curr->procedure_expire = 0;
   12f74:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   12f78:	2200      	movs	r2, #0
   12f7a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		if (!_radio.conn_curr->llcp_phy.cmd) {
   12f7e:	4b62      	ldr	r3, [pc, #392]	; (13108 <isr_rx_conn_pkt_ctrl+0x9b4>)
   12f80:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   12f84:	f893 30f7 	ldrb.w	r3, [r3, #247]	; 0xf7
   12f88:	f013 0f02 	tst.w	r3, #2
   12f8c:	f000 841c 	beq.w	137c8 <isr_rx_conn_pkt_ctrl+0x1074>
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   12f90:	230c      	movs	r3, #12
   12f92:	7123      	strb	r3, [r4, #4]
		p->status = rej_ext_ind->error_code;
   12f94:	7b63      	ldrb	r3, [r4, #13]
   12f96:	72e3      	strb	r3, [r4, #11]
		p->tx = _radio.conn_curr->phy_tx;
   12f98:	4a5b      	ldr	r2, [pc, #364]	; (13108 <isr_rx_conn_pkt_ctrl+0x9b4>)
   12f9a:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
   12f9e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
   12fa2:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   12fa6:	7323      	strb	r3, [r4, #12]
		p->rx = _radio.conn_curr->phy_rx;
   12fa8:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
   12fac:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   12fb0:	f3c3 0302 	ubfx	r3, r3, #0, #3
   12fb4:	7363      	strb	r3, [r4, #13]
		*rx_enqueue = 1;
   12fb6:	2301      	movs	r3, #1
   12fb8:	703b      	strb	r3, [r7, #0]
	u8_t nack = 0;
   12fba:	2400      	movs	r4, #0
   12fbc:	e404      	b.n	127c8 <isr_rx_conn_pkt_ctrl+0x74>
	if (rej_ext_ind->reject_opcode != PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ) {
   12fbe:	7b23      	ldrb	r3, [r4, #12]
   12fc0:	2b0f      	cmp	r3, #15
   12fc2:	d002      	beq.n	12fca <isr_rx_conn_pkt_ctrl+0x876>
	u8_t nack = 0;
   12fc4:	2400      	movs	r4, #0
   12fc6:	f7ff bbff 	b.w	127c8 <isr_rx_conn_pkt_ctrl+0x74>
	conn = _radio.conn_curr;
   12fca:	4b4f      	ldr	r3, [pc, #316]	; (13108 <isr_rx_conn_pkt_ctrl+0x9b4>)
   12fcc:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
	if (!conn->role && (rej_ext_ind->error_code == 0x1a)) {
   12fd0:	f993 201d 	ldrsb.w	r2, [r3, #29]
   12fd4:	2a00      	cmp	r2, #0
   12fd6:	db02      	blt.n	12fde <isr_rx_conn_pkt_ctrl+0x88a>
   12fd8:	7b62      	ldrb	r2, [r4, #13]
   12fda:	2a1a      	cmp	r2, #26
   12fdc:	d037      	beq.n	1304e <isr_rx_conn_pkt_ctrl+0x8fa>
	else if (rej_ext_ind->error_code != 0x23) {
   12fde:	7b62      	ldrb	r2, [r4, #13]
   12fe0:	2a23      	cmp	r2, #35	; 0x23
   12fe2:	d012      	beq.n	1300a <isr_rx_conn_pkt_ctrl+0x8b6>
		LL_ASSERT(_radio.conn_upd == conn);
   12fe4:	4a48      	ldr	r2, [pc, #288]	; (13108 <isr_rx_conn_pkt_ctrl+0x9b4>)
   12fe6:	f8d2 2184 	ldr.w	r2, [r2, #388]	; 0x184
   12fea:	4293      	cmp	r3, r2
   12fec:	d166      	bne.n	130bc <isr_rx_conn_pkt_ctrl+0x968>
		_radio.conn_upd = NULL;
   12fee:	2200      	movs	r2, #0
   12ff0:	4945      	ldr	r1, [pc, #276]	; (13108 <isr_rx_conn_pkt_ctrl+0x9b4>)
   12ff2:	f8c1 2184 	str.w	r2, [r1, #388]	; 0x184
			conn->llcp_conn_param.req;
   12ff6:	f893 10c0 	ldrb.w	r1, [r3, #192]	; 0xc0
		conn->llcp_conn_param.ack =
   12ffa:	f883 10c1 	strb.w	r1, [r3, #193]	; 0xc1
		conn->procedure_expire = 0;
   12ffe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		if (conn->role) {
   13002:	f993 201d 	ldrsb.w	r2, [r3, #29]
   13006:	2a00      	cmp	r2, #0
   13008:	db5e      	blt.n	130c8 <isr_rx_conn_pkt_ctrl+0x974>
	if (!conn->llcp_conn_param.cmd) {
   1300a:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
   1300e:	f012 0f08 	tst.w	r2, #8
   13012:	f000 83dc 	beq.w	137ce <isr_rx_conn_pkt_ctrl+0x107a>
	radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   13016:	2208      	movs	r2, #8
   13018:	7122      	strb	r2, [r4, #4]
	cp->status = rej_ext_ind->error_code;
   1301a:	7b62      	ldrb	r2, [r4, #13]
   1301c:	72e2      	strb	r2, [r4, #11]
	cp->interval = conn->conn_interval;
   1301e:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
   13020:	81a2      	strh	r2, [r4, #12]
	cp->latency = conn->latency;
   13022:	8cda      	ldrh	r2, [r3, #38]	; 0x26
   13024:	81e2      	strh	r2, [r4, #14]
	cp->timeout = conn->supervision_reload *
   13026:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
		      conn->conn_interval * 125 / 1000;
   13028:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
	cp->timeout = conn->supervision_reload *
   1302a:	fb03 f302 	mul.w	r3, r3, r2
		      conn->conn_interval * 125 / 1000;
   1302e:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
   13032:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   13036:	4a35      	ldr	r2, [pc, #212]	; (1310c <isr_rx_conn_pkt_ctrl+0x9b8>)
   13038:	fb82 1203 	smull	r1, r2, r2, r3
   1303c:	17db      	asrs	r3, r3, #31
	cp->timeout = conn->supervision_reload *
   1303e:	ebc3 1392 	rsb	r3, r3, r2, lsr #6
   13042:	8223      	strh	r3, [r4, #16]
	*rx_enqueue = 1;
   13044:	2301      	movs	r3, #1
   13046:	703b      	strb	r3, [r7, #0]
	u8_t nack = 0;
   13048:	2400      	movs	r4, #0
   1304a:	f7ff bbbd 	b.w	127c8 <isr_rx_conn_pkt_ctrl+0x74>
		LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   1304e:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
   13052:	f893 0075 	ldrb.w	r0, [r3, #117]	; 0x75
   13056:	4282      	cmp	r2, r0
   13058:	d12a      	bne.n	130b0 <isr_rx_conn_pkt_ctrl+0x95c>
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   1305a:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
   1305e:	2105      	movs	r1, #5
   13060:	f361 0202 	bfi	r2, r1, #0, #3
   13064:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
		conn->llcp.conn_upd.win_size = 1;
   13068:	2501      	movs	r5, #1
   1306a:	f883 5088 	strb.w	r5, [r3, #136]	; 0x88
		conn->llcp.conn_upd.win_offset_us = 0;
   1306e:	2400      	movs	r4, #0
   13070:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
		conn->llcp.conn_upd.interval = conn->llcp_conn_param.interval;
   13074:	f8b3 10c4 	ldrh.w	r1, [r3, #196]	; 0xc4
   13078:	f8a3 107a 	strh.w	r1, [r3, #122]	; 0x7a
		conn->llcp.conn_upd.latency = conn->llcp_conn_param.latency;
   1307c:	f8b3 10c6 	ldrh.w	r1, [r3, #198]	; 0xc6
   13080:	f8a3 107c 	strh.w	r1, [r3, #124]	; 0x7c
		conn->llcp.conn_upd.timeout = conn->llcp_conn_param.timeout;
   13084:	f8b3 10c8 	ldrh.w	r1, [r3, #200]	; 0xc8
   13088:	f8a3 107e 	strh.w	r1, [r3, #126]	; 0x7e
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
   1308c:	f893 1078 	ldrb.w	r1, [r3, #120]	; 0x78
   13090:	f365 0101 	bfi	r1, r5, #0, #2
		conn->llcp.conn_upd.is_internal = !conn->llcp_conn_param.cmd;
   13094:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   13098:	406a      	eors	r2, r5
   1309a:	f362 0182 	bfi	r1, r2, #2, #1
   1309e:	f883 1078 	strb.w	r1, [r3, #120]	; 0x78
		conn->llcp_type = LLCP_CONN_UPD;
   130a2:	f883 5076 	strb.w	r5, [r3, #118]	; 0x76
		conn->llcp_ack--;
   130a6:	3801      	subs	r0, #1
   130a8:	f883 0075 	strb.w	r0, [r3, #117]	; 0x75
   130ac:	f7ff bb8c 	b.w	127c8 <isr_rx_conn_pkt_ctrl+0x74>
		LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   130b0:	4040      	eors	r0, r0
   130b2:	f380 8811 	msr	BASEPRI, r0
   130b6:	f04f 0004 	mov.w	r0, #4
   130ba:	df02      	svc	2
		LL_ASSERT(_radio.conn_upd == conn);
   130bc:	4040      	eors	r0, r0
   130be:	f380 8811 	msr	BASEPRI, r0
   130c2:	f04f 0004 	mov.w	r0, #4
   130c6:	df02      	svc	2
			    conn->llcp_conn_param.ticks_to_offset_next;
   130c8:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
			conn->slave.ticks_to_offset =
   130cc:	671a      	str	r2, [r3, #112]	; 0x70
   130ce:	e79c      	b.n	1300a <isr_rx_conn_pkt_ctrl+0x8b6>
		conn->llcp_length.ack = conn->llcp_length.req;
   130d0:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
		conn->procedure_expire = 0;
   130d4:	2200      	movs	r2, #0
   130d6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		conn->pause_tx = 0;
   130da:	f893 10f8 	ldrb.w	r1, [r3, #248]	; 0xf8
   130de:	f362 01c3 	bfi	r1, r2, #3, #1
   130e2:	f883 10f8 	strb.w	r1, [r3, #248]	; 0xf8
		pdu_data_rx->len = offsetof(struct pdu_data_llctrl,
   130e6:	2109      	movs	r1, #9
   130e8:	7261      	strb	r1, [r4, #9]
		pdu_data_rx->payload.llctrl.opcode =
   130ea:	2115      	movs	r1, #21
   130ec:	72e1      	strb	r1, [r4, #11]
		lr->max_rx_octets = conn->max_rx_octets;
   130ee:	8e19      	ldrh	r1, [r3, #48]	; 0x30
   130f0:	81a1      	strh	r1, [r4, #12]
		lr->max_tx_octets = conn->max_tx_octets;
   130f2:	8dd9      	ldrh	r1, [r3, #46]	; 0x2e
   130f4:	8221      	strh	r1, [r4, #16]
		lr->max_rx_time = conn->max_rx_time;
   130f6:	8ed9      	ldrh	r1, [r3, #54]	; 0x36
   130f8:	81e1      	strh	r1, [r4, #14]
		lr->max_tx_time = conn->max_tx_time;
   130fa:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
   130fc:	8263      	strh	r3, [r4, #18]
		*rx_enqueue = 1;
   130fe:	2301      	movs	r3, #1
   13100:	703b      	strb	r3, [r7, #0]
	u8_t nack = 0;
   13102:	4614      	mov	r4, r2
   13104:	f7ff bb60 	b.w	127c8 <isr_rx_conn_pkt_ctrl+0x74>
   13108:	20000e84 	.word	0x20000e84
   1310c:	10624dd3 	.word	0x10624dd3
		switch (rej_ext_ind->reject_opcode) {
   13110:	7b22      	ldrb	r2, [r4, #12]
   13112:	2a03      	cmp	r2, #3
   13114:	f040 835e 	bne.w	137d4 <isr_rx_conn_pkt_ctrl+0x1080>
			_radio.conn_curr->pause_rx = 0;
   13118:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   1311c:	f36f 0282 	bfc	r2, #2, #1
   13120:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			_radio.conn_curr->pause_tx = 0;
   13124:	4bcb      	ldr	r3, [pc, #812]	; (13454 <isr_rx_conn_pkt_ctrl+0xd00>)
   13126:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   1312a:	f892 10f8 	ldrb.w	r1, [r2, #248]	; 0xf8
   1312e:	f36f 01c3 	bfc	r1, #3, #1
   13132:	f882 10f8 	strb.w	r1, [r2, #248]	; 0xf8
			_radio.conn_curr->procedure_expire = 0;
   13136:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   1313a:	2300      	movs	r3, #0
   1313c:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
			pdu_rx->payload.llctrl.opcode =
   13140:	220d      	movs	r2, #13
   13142:	72e2      	strb	r2, [r4, #11]
				rej_ext_ind->error_code;
   13144:	7b62      	ldrb	r2, [r4, #13]
			pdu_rx->payload.llctrl.ctrldata.reject_ind.error_code =
   13146:	7322      	strb	r2, [r4, #12]
			*rx_enqueue = 1;
   13148:	2201      	movs	r2, #1
   1314a:	703a      	strb	r2, [r7, #0]
	u8_t nack = 0;
   1314c:	461c      	mov	r4, r3
   1314e:	f7ff bb3b 	b.w	127c8 <isr_rx_conn_pkt_ctrl+0x74>
		ping_resp_send(_radio.conn_curr);
   13152:	4628      	mov	r0, r5
   13154:	f7fd ff76 	bl	11044 <ping_resp_send>
	u8_t nack = 0;
   13158:	2400      	movs	r4, #0
		break;
   1315a:	f7ff bb35 	b.w	127c8 <isr_rx_conn_pkt_ctrl+0x74>
		_radio.conn_curr->procedure_expire = 0;
   1315e:	2400      	movs	r4, #0
   13160:	f8a5 4044 	strh.w	r4, [r5, #68]	; 0x44
		break;
   13164:	f7ff bb30 	b.w	127c8 <isr_rx_conn_pkt_ctrl+0x74>
		} else if (_radio.conn_curr->llcp_length.req !=
   13168:	f895 30e8 	ldrb.w	r3, [r5, #232]	; 0xe8
			   _radio.conn_curr->llcp_length.ack) {
   1316c:	f895 20e9 	ldrb.w	r2, [r5, #233]	; 0xe9
		} else if (_radio.conn_curr->llcp_length.req !=
   13170:	4293      	cmp	r3, r2
   13172:	d014      	beq.n	1319e <isr_rx_conn_pkt_ctrl+0xa4a>
			_radio.conn_curr->llcp_length.ack =
   13174:	f885 30e9 	strb.w	r3, [r5, #233]	; 0xe9
			_radio.conn_curr->pause_tx = 0;
   13178:	4bb6      	ldr	r3, [pc, #728]	; (13454 <isr_rx_conn_pkt_ctrl+0xd00>)
   1317a:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   1317e:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   13182:	f36f 02c3 	bfc	r2, #3, #1
   13186:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			*rx_enqueue = 1;
   1318a:	2301      	movs	r3, #1
   1318c:	703b      	strb	r3, [r7, #0]
		_radio.conn_curr->procedure_expire = 0;
   1318e:	4bb1      	ldr	r3, [pc, #708]	; (13454 <isr_rx_conn_pkt_ctrl+0xd00>)
   13190:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   13194:	2400      	movs	r4, #0
   13196:	f8a3 4044 	strh.w	r4, [r3, #68]	; 0x44
		break;
   1319a:	f7ff bb15 	b.w	127c8 <isr_rx_conn_pkt_ctrl+0x74>
		} else if (_radio.conn_curr->llcp_phy.req !=
   1319e:	f895 30f4 	ldrb.w	r3, [r5, #244]	; 0xf4
			   _radio.conn_curr->llcp_phy.ack) {
   131a2:	f895 20f5 	ldrb.w	r2, [r5, #245]	; 0xf5
		} else if (_radio.conn_curr->llcp_phy.req !=
   131a6:	4293      	cmp	r3, r2
   131a8:	d02a      	beq.n	13200 <isr_rx_conn_pkt_ctrl+0xaac>
			_radio.conn_curr->llcp_phy.ack =
   131aa:	f885 30f5 	strb.w	r3, [r5, #245]	; 0xf5
			_radio.conn_curr->phy_tx_time =
   131ae:	49a9      	ldr	r1, [pc, #676]	; (13454 <isr_rx_conn_pkt_ctrl+0xd00>)
   131b0:	f8d1 3110 	ldr.w	r3, [r1, #272]	; 0x110
				_radio.conn_curr->phy_tx;
   131b4:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
   131b8:	f3c2 02c2 	ubfx	r2, r2, #3, #3
			_radio.conn_curr->phy_tx_time =
   131bc:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
   131c0:	f362 0002 	bfi	r0, r2, #0, #3
   131c4:	f883 0039 	strb.w	r0, [r3, #57]	; 0x39
			if (_radio.conn_curr->llcp_phy.cmd) {
   131c8:	f8d1 3110 	ldr.w	r3, [r1, #272]	; 0x110
   131cc:	f893 30f7 	ldrb.w	r3, [r3, #247]	; 0xf7
   131d0:	f013 0f02 	tst.w	r3, #2
   131d4:	d0db      	beq.n	1318e <isr_rx_conn_pkt_ctrl+0xa3a>
				radio_pdu_node_rx->hdr.type =
   131d6:	230c      	movs	r3, #12
   131d8:	7123      	strb	r3, [r4, #4]
				p->status = 0;
   131da:	2300      	movs	r3, #0
   131dc:	72e3      	strb	r3, [r4, #11]
				p->tx = _radio.conn_curr->phy_tx;
   131de:	f8d1 3110 	ldr.w	r3, [r1, #272]	; 0x110
   131e2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
   131e6:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   131ea:	7323      	strb	r3, [r4, #12]
				p->rx = _radio.conn_curr->phy_rx;
   131ec:	f8d1 3110 	ldr.w	r3, [r1, #272]	; 0x110
   131f0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   131f4:	f3c3 0302 	ubfx	r3, r3, #0, #3
   131f8:	7363      	strb	r3, [r4, #13]
				*rx_enqueue = 1;
   131fa:	2301      	movs	r3, #1
   131fc:	703b      	strb	r3, [r7, #0]
   131fe:	e7c6      	b.n	1318e <isr_rx_conn_pkt_ctrl+0xa3a>
			switch (llctrl->ctrldata.unknown_rsp.type) {
   13200:	7b23      	ldrb	r3, [r4, #12]
   13202:	2b12      	cmp	r3, #18
   13204:	d0c3      	beq.n	1318e <isr_rx_conn_pkt_ctrl+0xa3a>
				*rx_enqueue = 1;
   13206:	2301      	movs	r3, #1
   13208:	703b      	strb	r3, [r7, #0]
				break;
   1320a:	e7c0      	b.n	1318e <isr_rx_conn_pkt_ctrl+0xa3a>
	eff_rx_octets = _radio.conn_curr->max_rx_octets;
   1320c:	4b91      	ldr	r3, [pc, #580]	; (13454 <isr_rx_conn_pkt_ctrl+0xd00>)
   1320e:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
   13212:	8e01      	ldrh	r1, [r0, #48]	; 0x30
	eff_tx_octets = _radio.conn_curr->max_tx_octets;
   13214:	8dc5      	ldrh	r5, [r0, #46]	; 0x2e
	eff_rx_time = _radio.conn_curr->max_rx_time;
   13216:	f8b0 9036 	ldrh.w	r9, [r0, #54]	; 0x36
	eff_tx_time = _radio.conn_curr->max_tx_time;
   1321a:	f8b0 8034 	ldrh.w	r8, [r0, #52]	; 0x34
	    ((_radio.conn_curr->llcp_length.req ==
   1321e:	f890 20e8 	ldrb.w	r2, [r0, #232]	; 0xe8
	      _radio.conn_curr->llcp_length.ack) &&
   13222:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
	if (/* Local idle, and Peer request then complete the Peer procedure
   13226:	429a      	cmp	r2, r3
   13228:	d020      	beq.n	1326c <isr_rx_conn_pkt_ctrl+0xb18>
	      PDU_DATA_LLCTRL_TYPE_LENGTH_REQ)) ||
   1322a:	429a      	cmp	r2, r3
   1322c:	d007      	beq.n	1323e <isr_rx_conn_pkt_ctrl+0xaea>
	     ((((_radio.conn_curr->llcp_length.state ==
   1322e:	f890 30ea 	ldrb.w	r3, [r0, #234]	; 0xea
		 LLCP_LENGTH_STATE_REQ) ||
   13232:	f003 0303 	and.w	r3, r3, #3
	      _radio.conn_curr->llcp_length.ack) &&
   13236:	2b01      	cmp	r3, #1
   13238:	d960      	bls.n	132fc <isr_rx_conn_pkt_ctrl+0xba8>
		PDU_DATA_LLCTRL_TYPE_LENGTH_REQ)) ||
   1323a:	2b02      	cmp	r3, #2
   1323c:	d062      	beq.n	13304 <isr_rx_conn_pkt_ctrl+0xbb0>
		LL_ASSERT(pdu_data_rx->payload.llctrl.opcode ==
   1323e:	78f3      	ldrb	r3, [r6, #3]
   13240:	2b15      	cmp	r3, #21
   13242:	f040 80cb 	bne.w	133dc <isr_rx_conn_pkt_ctrl+0xc88>
	u8_t nack = 0;
   13246:	2400      	movs	r4, #0
	     pdu_data_rx->payload.llctrl.opcode) && !nack) {
   13248:	78f3      	ldrb	r3, [r6, #3]
	if ((PDU_DATA_LLCTRL_TYPE_LENGTH_REQ ==
   1324a:	2b14      	cmp	r3, #20
   1324c:	f47f aabc 	bne.w	127c8 <isr_rx_conn_pkt_ctrl+0x74>
	     pdu_data_rx->payload.llctrl.opcode) && !nack) {
   13250:	2c00      	cmp	r4, #0
   13252:	f47f aab9 	bne.w	127c8 <isr_rx_conn_pkt_ctrl+0x74>
		length_resp_send(_radio.conn_curr, eff_rx_octets, eff_rx_time,
   13256:	4b7f      	ldr	r3, [pc, #508]	; (13454 <isr_rx_conn_pkt_ctrl+0xd00>)
   13258:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
   1325c:	f8cd 8000 	str.w	r8, [sp]
   13260:	462b      	mov	r3, r5
   13262:	464a      	mov	r2, r9
   13264:	f7fd ff0a 	bl	1107c <length_resp_send>
		break;
   13268:	f7ff baae 	b.w	127c8 <isr_rx_conn_pkt_ctrl+0x74>
	     (pdu_data_rx->payload.llctrl.opcode ==
   1326c:	78f4      	ldrb	r4, [r6, #3]
	      _radio.conn_curr->llcp_length.ack) &&
   1326e:	2c14      	cmp	r4, #20
   13270:	d1db      	bne.n	1322a <isr_rx_conn_pkt_ctrl+0xad6>
		if (lr->max_rx_octets >= RADIO_LL_LENGTH_OCTETS_RX_MIN) {
   13272:	88b3      	ldrh	r3, [r6, #4]
   13274:	2b1a      	cmp	r3, #26
   13276:	d903      	bls.n	13280 <isr_rx_conn_pkt_ctrl+0xb2c>
			eff_tx_octets = min(lr->max_rx_octets,
   13278:	8d85      	ldrh	r5, [r0, #44]	; 0x2c
   1327a:	429d      	cmp	r5, r3
   1327c:	bf28      	it	cs
   1327e:	461d      	movcs	r5, r3
		if (lr->max_tx_octets >= RADIO_LL_LENGTH_OCTETS_RX_MIN) {
   13280:	f8b6 a008 	ldrh.w	sl, [r6, #8]
   13284:	f1ba 0f1a 	cmp.w	sl, #26
   13288:	d942      	bls.n	13310 <isr_rx_conn_pkt_ctrl+0xbbc>
			eff_rx_octets = min(lr->max_tx_octets,
   1328a:	f1ba 0f1b 	cmp.w	sl, #27
   1328e:	bf28      	it	cs
   13290:	f04f 0a1b 	movcs.w	sl, #27
		if (lr->max_rx_time >=
   13294:	88f3      	ldrh	r3, [r6, #6]
   13296:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
   1329a:	d304      	bcc.n	132a6 <isr_rx_conn_pkt_ctrl+0xb52>
			eff_tx_time = min(lr->max_rx_time,
   1329c:	f8b0 8032 	ldrh.w	r8, [r0, #50]	; 0x32
   132a0:	4598      	cmp	r8, r3
   132a2:	bf28      	it	cs
   132a4:	4698      	movcs	r8, r3
		if (lr->max_tx_time >=
   132a6:	8973      	ldrh	r3, [r6, #10]
   132a8:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
   132ac:	d305      	bcc.n	132ba <isr_rx_conn_pkt_ctrl+0xb66>
			eff_rx_time = min(lr->max_tx_time,
   132ae:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
   132b2:	bf28      	it	cs
   132b4:	f44f 73a4 	movcs.w	r3, #328	; 0x148
   132b8:	4699      	mov	r9, r3
		if (eff_rx_octets != _radio.conn_curr->max_rx_octets) {
   132ba:	4551      	cmp	r1, sl
   132bc:	d066      	beq.n	1338c <isr_rx_conn_pkt_ctrl+0xc38>
	if (_radio.packet_rx_acquire >=
   132be:	4b65      	ldr	r3, [pc, #404]	; (13454 <isr_rx_conn_pkt_ctrl+0xd00>)
   132c0:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   132c4:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   132c8:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   132ca:	429a      	cmp	r2, r3
   132cc:	d322      	bcc.n	13314 <isr_rx_conn_pkt_ctrl+0xbc0>
			_radio.packet_rx_last);
   132ce:	4b61      	ldr	r3, [pc, #388]	; (13454 <isr_rx_conn_pkt_ctrl+0xd00>)
   132d0:	f893 413d 	ldrb.w	r4, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   132d4:	1b14      	subs	r4, r2, r4
   132d6:	b2e4      	uxtb	r4, r4
			free_count_rx = packet_rx_acquired_count_get()
   132d8:	b2a4      	uxth	r4, r4
				+ mem_free_count_get(_radio.pkt_rx_data_free);
   132da:	4b5e      	ldr	r3, [pc, #376]	; (13454 <isr_rx_conn_pkt_ctrl+0xd00>)
   132dc:	f8d3 012c 	ldr.w	r0, [r3, #300]	; 0x12c
   132e0:	f7fb fa7b 	bl	e7da <mem_free_count_get>
			free_count_rx = packet_rx_acquired_count_get()
   132e4:	1823      	adds	r3, r4, r0
   132e6:	b29b      	uxth	r3, r3
			LL_ASSERT(free_count_rx <= 0xFF);
   132e8:	2bff      	cmp	r3, #255	; 0xff
   132ea:	d81d      	bhi.n	13328 <isr_rx_conn_pkt_ctrl+0xbd4>
			if (_radio.packet_rx_data_count == free_count_rx) {
   132ec:	4a59      	ldr	r2, [pc, #356]	; (13454 <isr_rx_conn_pkt_ctrl+0xd00>)
   132ee:	f892 2136 	ldrb.w	r2, [r2, #310]	; 0x136
   132f2:	4293      	cmp	r3, r2
   132f4:	d01e      	beq.n	13334 <isr_rx_conn_pkt_ctrl+0xbe0>
   132f6:	4651      	mov	r1, sl
				nack = 1;
   132f8:	2401      	movs	r4, #1
   132fa:	e7a5      	b.n	13248 <isr_rx_conn_pkt_ctrl+0xaf4>
	       (pdu_data_rx->payload.llctrl.opcode ==
   132fc:	78f2      	ldrb	r2, [r6, #3]
		 LLCP_LENGTH_STATE_ACK_WAIT)) &&
   132fe:	2a14      	cmp	r2, #20
   13300:	d19b      	bne.n	1323a <isr_rx_conn_pkt_ctrl+0xae6>
   13302:	e7b6      	b.n	13272 <isr_rx_conn_pkt_ctrl+0xb1e>
	       ((pdu_data_rx->payload.llctrl.opcode ==
   13304:	78f3      	ldrb	r3, [r6, #3]
		 PDU_DATA_LLCTRL_TYPE_LENGTH_RSP) ||
   13306:	3b14      	subs	r3, #20
   13308:	b2db      	uxtb	r3, r3
		LLCP_LENGTH_STATE_RSP_WAIT) &&
   1330a:	2b01      	cmp	r3, #1
   1330c:	d897      	bhi.n	1323e <isr_rx_conn_pkt_ctrl+0xaea>
   1330e:	e7b0      	b.n	13272 <isr_rx_conn_pkt_ctrl+0xb1e>
	eff_rx_octets = _radio.conn_curr->max_rx_octets;
   13310:	468a      	mov	sl, r1
   13312:	e7bf      	b.n	13294 <isr_rx_conn_pkt_ctrl+0xb40>
		return (_radio.packet_rx_count -
   13314:	4b4f      	ldr	r3, [pc, #316]	; (13454 <isr_rx_conn_pkt_ctrl+0xd00>)
   13316:	f893 413c 	ldrb.w	r4, [r3, #316]	; 0x13c
			_radio.packet_rx_last +
   1331a:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_count -
   1331e:	1ae4      	subs	r4, r4, r3
			_radio.packet_rx_last +
   13320:	fa52 f484 	uxtab	r4, r2, r4
   13324:	b2e4      	uxtb	r4, r4
   13326:	e7d7      	b.n	132d8 <isr_rx_conn_pkt_ctrl+0xb84>
			LL_ASSERT(free_count_rx <= 0xFF);
   13328:	4040      	eors	r0, r0
   1332a:	f380 8811 	msr	BASEPRI, r0
   1332e:	f04f 0004 	mov.w	r0, #4
   13332:	df02      	svc	2
				_radio.conn_curr->max_tx_octets = eff_tx_octets;
   13334:	4b47      	ldr	r3, [pc, #284]	; (13454 <isr_rx_conn_pkt_ctrl+0xd00>)
   13336:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   1333a:	85d5      	strh	r5, [r2, #46]	; 0x2e
				_radio.conn_curr->llcp_length.rx_octets =
   1333c:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   13340:	f8a2 a0ec 	strh.w	sl, [r2, #236]	; 0xec
				_radio.conn_curr->llcp_length.tx_octets =
   13344:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   13348:	f8a2 50ee 	strh.w	r5, [r2, #238]	; 0xee
				_radio.conn_curr->max_tx_time = eff_tx_time;
   1334c:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   13350:	f8a2 8034 	strh.w	r8, [r2, #52]	; 0x34
				_radio.conn_curr->llcp_length.rx_time =
   13354:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   13358:	f8a2 90f0 	strh.w	r9, [r2, #240]	; 0xf0
				_radio.conn_curr->llcp_length.tx_time =
   1335c:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   13360:	f8a2 80f2 	strh.w	r8, [r2, #242]	; 0xf2
				_radio.conn_curr->llcp_length.ack =
   13364:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
					(_radio.conn_curr->llcp_length.req - 1);
   13368:	f891 20e8 	ldrb.w	r2, [r1, #232]	; 0xe8
   1336c:	3a01      	subs	r2, #1
				_radio.conn_curr->llcp_length.ack =
   1336e:	f881 20e9 	strb.w	r2, [r1, #233]	; 0xe9
				_radio.conn_curr->llcp_length.state =
   13372:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   13376:	f891 20ea 	ldrb.w	r2, [r1, #234]	; 0xea
   1337a:	f042 0203 	orr.w	r2, r2, #3
   1337e:	f881 20ea 	strb.w	r2, [r1, #234]	; 0xea
				_radio.state = STATE_CLOSE;
   13382:	2203      	movs	r2, #3
   13384:	741a      	strb	r2, [r3, #16]
   13386:	4651      	mov	r1, sl
	u8_t nack = 0;
   13388:	2400      	movs	r4, #0
   1338a:	e75d      	b.n	13248 <isr_rx_conn_pkt_ctrl+0xaf4>
			_radio.conn_curr->pause_tx = 0;
   1338c:	f890 30f8 	ldrb.w	r3, [r0, #248]	; 0xf8
   13390:	f36f 03c3 	bfc	r3, #3, #1
   13394:	f880 30f8 	strb.w	r3, [r0, #248]	; 0xf8
			_radio.conn_curr->max_tx_octets = eff_tx_octets;
   13398:	4b2e      	ldr	r3, [pc, #184]	; (13454 <isr_rx_conn_pkt_ctrl+0xd00>)
   1339a:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   1339e:	85d5      	strh	r5, [r2, #46]	; 0x2e
			_radio.conn_curr->max_rx_time = eff_rx_time;
   133a0:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   133a4:	f8a2 9036 	strh.w	r9, [r2, #54]	; 0x36
			_radio.conn_curr->max_tx_time = eff_tx_time;
   133a8:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   133ac:	f8a2 8034 	strh.w	r8, [r2, #52]	; 0x34
			_radio.conn_curr->llcp_length.ack =
   133b0:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
				_radio.conn_curr->llcp_length.req;
   133b4:	f892 10e8 	ldrb.w	r1, [r2, #232]	; 0xe8
			_radio.conn_curr->llcp_length.ack =
   133b8:	f882 10e9 	strb.w	r1, [r2, #233]	; 0xe9
			_radio.conn_curr->procedure_expire = 0;
   133bc:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   133c0:	2400      	movs	r4, #0
   133c2:	f8a3 4044 	strh.w	r4, [r3, #68]	; 0x44
			lr->max_rx_octets = eff_rx_octets;
   133c6:	f8a6 a004 	strh.w	sl, [r6, #4]
			lr->max_tx_octets = eff_tx_octets;
   133ca:	8135      	strh	r5, [r6, #8]
			lr->max_rx_time = eff_rx_time;
   133cc:	f8a6 9006 	strh.w	r9, [r6, #6]
			lr->max_tx_time = eff_tx_time;
   133d0:	f8a6 800a 	strh.w	r8, [r6, #10]
			*rx_enqueue = 1;
   133d4:	2301      	movs	r3, #1
   133d6:	703b      	strb	r3, [r7, #0]
   133d8:	4651      	mov	r1, sl
   133da:	e735      	b.n	13248 <isr_rx_conn_pkt_ctrl+0xaf4>
		LL_ASSERT(pdu_data_rx->payload.llctrl.opcode ==
   133dc:	4040      	eors	r0, r0
   133de:	f380 8811 	msr	BASEPRI, r0
   133e2:	f04f 0004 	mov.w	r0, #4
   133e6:	df02      	svc	2
		if (_radio.role == ROLE_MASTER) {
   133e8:	4b1a      	ldr	r3, [pc, #104]	; (13454 <isr_rx_conn_pkt_ctrl+0xd00>)
   133ea:	7bdb      	ldrb	r3, [r3, #15]
   133ec:	b2db      	uxtb	r3, r3
   133ee:	2b04      	cmp	r3, #4
   133f0:	d032      	beq.n	13458 <isr_rx_conn_pkt_ctrl+0xd04>
			_radio.conn_curr->llcp_phy.state =
   133f2:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
   133f6:	2202      	movs	r2, #2
   133f8:	f362 0301 	bfi	r3, r2, #0, #2
   133fc:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
			if (_radio.conn_curr->llcp_phy.ack ==
   13400:	4b14      	ldr	r3, [pc, #80]	; (13454 <isr_rx_conn_pkt_ctrl+0xd00>)
   13402:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   13406:	f893 20f5 	ldrb.w	r2, [r3, #245]	; 0xf5
			    _radio.conn_curr->llcp_phy.req) {
   1340a:	f893 10f4 	ldrb.w	r1, [r3, #244]	; 0xf4
			if (_radio.conn_curr->llcp_phy.ack ==
   1340e:	428a      	cmp	r2, r1
   13410:	f000 8099 	beq.w	13546 <isr_rx_conn_pkt_ctrl+0xdf2>
			_radio.conn_curr->llcp_phy.tx &= p->rx_phys;
   13414:	4a0f      	ldr	r2, [pc, #60]	; (13454 <isr_rx_conn_pkt_ctrl+0xd00>)
   13416:	f8d2 0110 	ldr.w	r0, [r2, #272]	; 0x110
   1341a:	7b61      	ldrb	r1, [r4, #13]
   1341c:	f890 30f6 	ldrb.w	r3, [r0, #246]	; 0xf6
   13420:	f3c3 0582 	ubfx	r5, r3, #2, #3
   13424:	4029      	ands	r1, r5
   13426:	f361 0384 	bfi	r3, r1, #2, #3
   1342a:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
			_radio.conn_curr->llcp_phy.rx &= p->tx_phys;
   1342e:	f8d2 0110 	ldr.w	r0, [r2, #272]	; 0x110
   13432:	7b21      	ldrb	r1, [r4, #12]
   13434:	f890 30f6 	ldrb.w	r3, [r0, #246]	; 0xf6
   13438:	ea01 1153 	and.w	r1, r1, r3, lsr #5
   1343c:	f361 1347 	bfi	r3, r1, #5, #3
   13440:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
			phy_rsp_send(_radio.conn_curr);
   13444:	f8d2 0110 	ldr.w	r0, [r2, #272]	; 0x110
   13448:	f7fd fe5c 	bl	11104 <phy_rsp_send>
	u8_t nack = 0;
   1344c:	2400      	movs	r4, #0
   1344e:	f7ff b9bb 	b.w	127c8 <isr_rx_conn_pkt_ctrl+0x74>
   13452:	bf00      	nop
   13454:	20000e84 	.word	0x20000e84
			if ((_radio.conn_curr->llcp_phy.ack !=
   13458:	f895 20f5 	ldrb.w	r2, [r5, #245]	; 0xf5
			     _radio.conn_curr->llcp_phy.req) &&
   1345c:	f895 30f4 	ldrb.w	r3, [r5, #244]	; 0xf4
			if ((_radio.conn_curr->llcp_phy.ack !=
   13460:	429a      	cmp	r2, r3
   13462:	d007      	beq.n	13474 <isr_rx_conn_pkt_ctrl+0xd20>
			    ((_radio.conn_curr->llcp_phy.state ==
   13464:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
			      LLCP_PHY_STATE_RSP_WAIT) ||
   13468:	f003 0303 	and.w	r3, r3, #3
   1346c:	3b01      	subs	r3, #1
   1346e:	b2db      	uxtb	r3, r3
			     _radio.conn_curr->llcp_phy.req) &&
   13470:	2b02      	cmp	r3, #2
   13472:	d913      	bls.n	1349c <isr_rx_conn_pkt_ctrl+0xd48>
			} else if ((_radio.conn_curr->llcp_req !=
   13474:	f895 2074 	ldrb.w	r2, [r5, #116]	; 0x74
				    _radio.conn_curr->llcp_ack) ||
   13478:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
			} else if ((_radio.conn_curr->llcp_req !=
   1347c:	429a      	cmp	r2, r3
   1347e:	d105      	bne.n	1348c <isr_rx_conn_pkt_ctrl+0xd38>
				   (_radio.conn_curr->llcp_conn_param.req !=
   13480:	f895 20c0 	ldrb.w	r2, [r5, #192]	; 0xc0
				    _radio.conn_curr->llcp_conn_param.ack)) {
   13484:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
				    _radio.conn_curr->llcp_ack) ||
   13488:	429a      	cmp	r2, r3
   1348a:	d00f      	beq.n	134ac <isr_rx_conn_pkt_ctrl+0xd58>
				reject_ext_ind_send(_radio.conn_curr,
   1348c:	222a      	movs	r2, #42	; 0x2a
   1348e:	2116      	movs	r1, #22
   13490:	4628      	mov	r0, r5
   13492:	f7fd fe17 	bl	110c4 <reject_ext_ind_send>
	u8_t nack = 0;
   13496:	2400      	movs	r4, #0
				reject_ext_ind_send(_radio.conn_curr,
   13498:	f7ff b996 	b.w	127c8 <isr_rx_conn_pkt_ctrl+0x74>
				reject_ext_ind_send(_radio.conn_curr,
   1349c:	2223      	movs	r2, #35	; 0x23
   1349e:	2116      	movs	r1, #22
   134a0:	4628      	mov	r0, r5
   134a2:	f7fd fe0f 	bl	110c4 <reject_ext_ind_send>
	u8_t nack = 0;
   134a6:	2400      	movs	r4, #0
				reject_ext_ind_send(_radio.conn_curr,
   134a8:	f7ff b98e 	b.w	127c8 <isr_rx_conn_pkt_ctrl+0x74>
				_radio.conn_curr->llcp_phy.state =
   134ac:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
   134b0:	f043 0303 	orr.w	r3, r3, #3
   134b4:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
				if (_radio.conn_curr->llcp_phy.ack ==
   134b8:	4bce      	ldr	r3, [pc, #824]	; (137f4 <isr_rx_conn_pkt_ctrl+0x10a0>)
   134ba:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   134be:	f892 30f5 	ldrb.w	r3, [r2, #245]	; 0xf5
				    _radio.conn_curr->llcp_phy.req) {
   134c2:	f892 10f4 	ldrb.w	r1, [r2, #244]	; 0xf4
				if (_radio.conn_curr->llcp_phy.ack ==
   134c6:	428b      	cmp	r3, r1
   134c8:	d01a      	beq.n	13500 <isr_rx_conn_pkt_ctrl+0xdac>
				_radio.conn_curr->llcp_phy.tx &= p->rx_phys;
   134ca:	49ca      	ldr	r1, [pc, #808]	; (137f4 <isr_rx_conn_pkt_ctrl+0x10a0>)
   134cc:	f8d1 0110 	ldr.w	r0, [r1, #272]	; 0x110
   134d0:	7b62      	ldrb	r2, [r4, #13]
   134d2:	f890 30f6 	ldrb.w	r3, [r0, #246]	; 0xf6
   134d6:	f3c3 0582 	ubfx	r5, r3, #2, #3
   134da:	402a      	ands	r2, r5
   134dc:	f362 0384 	bfi	r3, r2, #2, #3
   134e0:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
				_radio.conn_curr->llcp_phy.rx &= p->tx_phys;
   134e4:	f8d1 1110 	ldr.w	r1, [r1, #272]	; 0x110
   134e8:	7b22      	ldrb	r2, [r4, #12]
   134ea:	f891 30f6 	ldrb.w	r3, [r1, #246]	; 0xf6
   134ee:	ea02 1253 	and.w	r2, r2, r3, lsr #5
   134f2:	f362 1347 	bfi	r3, r2, #5, #3
   134f6:	f881 30f6 	strb.w	r3, [r1, #246]	; 0xf6
	u8_t nack = 0;
   134fa:	2400      	movs	r4, #0
   134fc:	f7ff b964 	b.w	127c8 <isr_rx_conn_pkt_ctrl+0x74>
					_radio.conn_curr->llcp_phy.ack--;
   13500:	3b01      	subs	r3, #1
   13502:	f882 30f5 	strb.w	r3, [r2, #245]	; 0xf5
					_radio.conn_curr->llcp_phy.cmd = 0;
   13506:	4bbb      	ldr	r3, [pc, #748]	; (137f4 <isr_rx_conn_pkt_ctrl+0x10a0>)
   13508:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   1350c:	f892 10f7 	ldrb.w	r1, [r2, #247]	; 0xf7
   13510:	f36f 0141 	bfc	r1, #1, #1
   13514:	f882 10f7 	strb.w	r1, [r2, #247]	; 0xf7
					_radio.conn_curr->llcp_phy.tx =
   13518:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
						_radio.conn_curr->phy_pref_tx;
   1351c:	f892 0038 	ldrb.w	r0, [r2, #56]	; 0x38
					_radio.conn_curr->llcp_phy.tx =
   13520:	f892 10f6 	ldrb.w	r1, [r2, #246]	; 0xf6
   13524:	f360 0184 	bfi	r1, r0, #2, #3
   13528:	f882 10f6 	strb.w	r1, [r2, #246]	; 0xf6
					_radio.conn_curr->llcp_phy.rx =
   1352c:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
						_radio.conn_curr->phy_pref_rx;
   13530:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
   13534:	f3c2 02c2 	ubfx	r2, r2, #3, #3
					_radio.conn_curr->llcp_phy.rx =
   13538:	f893 10f6 	ldrb.w	r1, [r3, #246]	; 0xf6
   1353c:	f362 1147 	bfi	r1, r2, #5, #3
   13540:	f883 10f6 	strb.w	r1, [r3, #246]	; 0xf6
   13544:	e7c1      	b.n	134ca <isr_rx_conn_pkt_ctrl+0xd76>
				_radio.conn_curr->llcp_phy.ack--;
   13546:	3a01      	subs	r2, #1
   13548:	f883 20f5 	strb.w	r2, [r3, #245]	; 0xf5
				_radio.conn_curr->llcp_phy.cmd = 0;
   1354c:	4ba9      	ldr	r3, [pc, #676]	; (137f4 <isr_rx_conn_pkt_ctrl+0x10a0>)
   1354e:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   13552:	f892 10f7 	ldrb.w	r1, [r2, #247]	; 0xf7
   13556:	f36f 0141 	bfc	r1, #1, #1
   1355a:	f882 10f7 	strb.w	r1, [r2, #247]	; 0xf7
				_radio.conn_curr->llcp_phy.tx =
   1355e:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
					_radio.conn_curr->phy_pref_tx;
   13562:	f892 0038 	ldrb.w	r0, [r2, #56]	; 0x38
				_radio.conn_curr->llcp_phy.tx =
   13566:	f892 10f6 	ldrb.w	r1, [r2, #246]	; 0xf6
   1356a:	f360 0184 	bfi	r1, r0, #2, #3
   1356e:	f882 10f6 	strb.w	r1, [r2, #246]	; 0xf6
				_radio.conn_curr->llcp_phy.rx =
   13572:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
					_radio.conn_curr->phy_pref_rx;
   13576:	f892 1039 	ldrb.w	r1, [r2, #57]	; 0x39
   1357a:	f3c1 01c2 	ubfx	r1, r1, #3, #3
				_radio.conn_curr->llcp_phy.rx =
   1357e:	f892 00f6 	ldrb.w	r0, [r2, #246]	; 0xf6
   13582:	f361 1047 	bfi	r0, r1, #5, #3
   13586:	f882 00f6 	strb.w	r0, [r2, #246]	; 0xf6
				_radio.conn_curr->procedure_expire =
   1358a:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
					_radio.conn_curr->procedure_reload;
   1358e:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
				_radio.conn_curr->procedure_expire =
   13592:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
   13596:	e73d      	b.n	13414 <isr_rx_conn_pkt_ctrl+0xcc0>
		if ((_radio.role == ROLE_MASTER) &&
   13598:	4b96      	ldr	r3, [pc, #600]	; (137f4 <isr_rx_conn_pkt_ctrl+0x10a0>)
   1359a:	7bdb      	ldrb	r3, [r3, #15]
   1359c:	b2db      	uxtb	r3, r3
   1359e:	2b04      	cmp	r3, #4
   135a0:	d002      	beq.n	135a8 <isr_rx_conn_pkt_ctrl+0xe54>
	u8_t nack = 0;
   135a2:	2400      	movs	r4, #0
   135a4:	f7ff b910 	b.w	127c8 <isr_rx_conn_pkt_ctrl+0x74>
		    (_radio.conn_curr->llcp_phy.ack !=
   135a8:	f895 20f5 	ldrb.w	r2, [r5, #245]	; 0xf5
		     _radio.conn_curr->llcp_phy.req) &&
   135ac:	f895 30f4 	ldrb.w	r3, [r5, #244]	; 0xf4
		if ((_radio.role == ROLE_MASTER) &&
   135b0:	429a      	cmp	r2, r3
   135b2:	f000 8112 	beq.w	137da <isr_rx_conn_pkt_ctrl+0x1086>
		    (_radio.conn_curr->llcp_phy.state ==
   135b6:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
   135ba:	f003 0303 	and.w	r3, r3, #3
		     _radio.conn_curr->llcp_phy.req) &&
   135be:	2b02      	cmp	r3, #2
   135c0:	d002      	beq.n	135c8 <isr_rx_conn_pkt_ctrl+0xe74>
	u8_t nack = 0;
   135c2:	2400      	movs	r4, #0
   135c4:	f7ff b900 	b.w	127c8 <isr_rx_conn_pkt_ctrl+0x74>
			_radio.conn_curr->llcp_phy.state = LLCP_PHY_STATE_UPD;
   135c8:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
   135cc:	f043 0303 	orr.w	r3, r3, #3
   135d0:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
			_radio.conn_curr->llcp_phy.tx &= p->rx_phys;
   135d4:	4a87      	ldr	r2, [pc, #540]	; (137f4 <isr_rx_conn_pkt_ctrl+0x10a0>)
   135d6:	f8d2 0110 	ldr.w	r0, [r2, #272]	; 0x110
   135da:	7b61      	ldrb	r1, [r4, #13]
   135dc:	f890 30f6 	ldrb.w	r3, [r0, #246]	; 0xf6
   135e0:	f3c3 0582 	ubfx	r5, r3, #2, #3
   135e4:	4029      	ands	r1, r5
   135e6:	f361 0384 	bfi	r3, r1, #2, #3
   135ea:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
			_radio.conn_curr->llcp_phy.rx &= p->tx_phys;
   135ee:	f8d2 0110 	ldr.w	r0, [r2, #272]	; 0x110
   135f2:	7b21      	ldrb	r1, [r4, #12]
   135f4:	f890 30f6 	ldrb.w	r3, [r0, #246]	; 0xf6
   135f8:	ea01 1153 	and.w	r1, r1, r3, lsr #5
   135fc:	f361 1347 	bfi	r3, r1, #5, #3
   13600:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
			_radio.conn_curr->procedure_expire = 0;
   13604:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
   13608:	2400      	movs	r4, #0
   1360a:	f8a3 4044 	strh.w	r4, [r3, #68]	; 0x44
   1360e:	f7ff b8db 	b.w	127c8 <isr_rx_conn_pkt_ctrl+0x74>
	struct connection *conn = _radio.conn_curr;
   13612:	4b78      	ldr	r3, [pc, #480]	; (137f4 <isr_rx_conn_pkt_ctrl+0x10a0>)
   13614:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	if (!((p->m_to_s_phy | p->s_to_m_phy) & 0x07)) {
   13618:	7b23      	ldrb	r3, [r4, #12]
   1361a:	7b61      	ldrb	r1, [r4, #13]
   1361c:	430b      	orrs	r3, r1
   1361e:	f013 0f07 	tst.w	r3, #7
   13622:	d134      	bne.n	1368e <isr_rx_conn_pkt_ctrl+0xf3a>
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
   13624:	f892 30f5 	ldrb.w	r3, [r2, #245]	; 0xf5
   13628:	f892 10f4 	ldrb.w	r1, [r2, #244]	; 0xf4
   1362c:	428b      	cmp	r3, r1
   1362e:	f000 8086 	beq.w	1373e <isr_rx_conn_pkt_ctrl+0xfea>
		    (conn->llcp_phy.state != LLCP_PHY_STATE_RSP_WAIT)) {
   13632:	f892 30f6 	ldrb.w	r3, [r2, #246]	; 0xf6
   13636:	f003 0303 	and.w	r3, r3, #3
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
   1363a:	2b02      	cmp	r3, #2
   1363c:	d00c      	beq.n	13658 <isr_rx_conn_pkt_ctrl+0xf04>
			return 0;
   1363e:	2300      	movs	r3, #0
		if (phy_upd_ind(radio_pdu_node_rx, rx_enqueue)) {
   13640:	2b00      	cmp	r3, #0
   13642:	f000 80cd 	beq.w	137e0 <isr_rx_conn_pkt_ctrl+0x108c>
			_radio.conn_curr->llcp_terminate.reason_peer = 0x28;
   13646:	4b6b      	ldr	r3, [pc, #428]	; (137f4 <isr_rx_conn_pkt_ctrl+0x10a0>)
   13648:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   1364c:	2228      	movs	r2, #40	; 0x28
   1364e:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
	u8_t nack = 0;
   13652:	2400      	movs	r4, #0
   13654:	f7ff b8b8 	b.w	127c8 <isr_rx_conn_pkt_ctrl+0x74>
		conn->llcp_phy.ack = conn->llcp_phy.req;
   13658:	f882 10f5 	strb.w	r1, [r2, #245]	; 0xf5
		conn->procedure_expire = 0;
   1365c:	2300      	movs	r3, #0
   1365e:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
		if (!conn->llcp_phy.cmd) {
   13662:	f892 30f7 	ldrb.w	r3, [r2, #247]	; 0xf7
   13666:	f013 0f02 	tst.w	r3, #2
   1366a:	d06a      	beq.n	13742 <isr_rx_conn_pkt_ctrl+0xfee>
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   1366c:	230c      	movs	r3, #12
   1366e:	7123      	strb	r3, [r4, #4]
		p->status = 0;
   13670:	2300      	movs	r3, #0
   13672:	72e3      	strb	r3, [r4, #11]
		p->tx = conn->phy_tx;
   13674:	f892 1038 	ldrb.w	r1, [r2, #56]	; 0x38
   13678:	f3c1 01c2 	ubfx	r1, r1, #3, #3
   1367c:	7321      	strb	r1, [r4, #12]
		p->rx = conn->phy_rx;
   1367e:	f892 203a 	ldrb.w	r2, [r2, #58]	; 0x3a
   13682:	f3c2 0202 	ubfx	r2, r2, #0, #3
   13686:	7362      	strb	r2, [r4, #13]
		*rx_enqueue = 1;
   13688:	2201      	movs	r2, #1
   1368a:	703a      	strb	r2, [r7, #0]
   1368c:	e7d8      	b.n	13640 <isr_rx_conn_pkt_ctrl+0xeec>
	if (((p->instant - conn->event_counter) & 0xffff) > 0x7fff) {
   1368e:	89e3      	ldrh	r3, [r4, #14]
   13690:	8c51      	ldrh	r1, [r2, #34]	; 0x22
   13692:	1a5b      	subs	r3, r3, r1
   13694:	b29b      	uxth	r3, r3
   13696:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1369a:	da54      	bge.n	13746 <isr_rx_conn_pkt_ctrl+0xff2>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   1369c:	f892 3074 	ldrb.w	r3, [r2, #116]	; 0x74
   136a0:	f892 1075 	ldrb.w	r1, [r2, #117]	; 0x75
   136a4:	428b      	cmp	r3, r1
   136a6:	d134      	bne.n	13712 <isr_rx_conn_pkt_ctrl+0xfbe>
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
   136a8:	f892 30f5 	ldrb.w	r3, [r2, #245]	; 0xf5
   136ac:	f892 00f4 	ldrb.w	r0, [r2, #244]	; 0xf4
   136b0:	4283      	cmp	r3, r0
   136b2:	d005      	beq.n	136c0 <isr_rx_conn_pkt_ctrl+0xf6c>
	    (conn->llcp_phy.state == LLCP_PHY_STATE_RSP_WAIT)) {
   136b4:	f892 30f6 	ldrb.w	r3, [r2, #246]	; 0xf6
   136b8:	f003 0303 	and.w	r3, r3, #3
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
   136bc:	2b02      	cmp	r3, #2
   136be:	d02e      	beq.n	1371e <isr_rx_conn_pkt_ctrl+0xfca>
	conn->llcp.phy_upd_ind.tx = p->s_to_m_phy;
   136c0:	7b60      	ldrb	r0, [r4, #13]
   136c2:	f000 0007 	and.w	r0, r0, #7
   136c6:	f892 3078 	ldrb.w	r3, [r2, #120]	; 0x78
   136ca:	f360 0384 	bfi	r3, r0, #2, #3
   136ce:	f882 3078 	strb.w	r3, [r2, #120]	; 0x78
	conn->llcp.phy_upd_ind.rx = p->m_to_s_phy;
   136d2:	7b25      	ldrb	r5, [r4, #12]
   136d4:	b2db      	uxtb	r3, r3
   136d6:	f365 1347 	bfi	r3, r5, #5, #3
   136da:	f882 3078 	strb.w	r3, [r2, #120]	; 0x78
	conn->llcp.phy_upd_ind.instant = p->instant;
   136de:	89e3      	ldrh	r3, [r4, #14]
   136e0:	f8a2 307a 	strh.w	r3, [r2, #122]	; 0x7a
	conn->llcp.phy_upd_ind.initiate = 0;
   136e4:	f892 3078 	ldrb.w	r3, [r2, #120]	; 0x78
   136e8:	f36f 0300 	bfc	r3, #0, #1
   136ec:	f882 3078 	strb.w	r3, [r2, #120]	; 0x78
	conn->llcp_type = LLCP_PHY_UPD;
   136f0:	2408      	movs	r4, #8
   136f2:	f882 4076 	strb.w	r4, [r2, #118]	; 0x76
	conn->llcp_ack--;
   136f6:	3901      	subs	r1, #1
   136f8:	f882 1075 	strb.w	r1, [r2, #117]	; 0x75
	if (conn->llcp.phy_upd_ind.tx) {
   136fc:	f003 031c 	and.w	r3, r3, #28
   13700:	b31b      	cbz	r3, 1374a <isr_rx_conn_pkt_ctrl+0xff6>
		conn->phy_tx_time = conn->llcp.phy_upd_ind.tx;
   13702:	f892 3039 	ldrb.w	r3, [r2, #57]	; 0x39
   13706:	f360 0302 	bfi	r3, r0, #0, #3
   1370a:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
	return 0;
   1370e:	2300      	movs	r3, #0
   13710:	e796      	b.n	13640 <isr_rx_conn_pkt_ctrl+0xeec>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   13712:	4040      	eors	r0, r0
   13714:	f380 8811 	msr	BASEPRI, r0
   13718:	f04f 0004 	mov.w	r0, #4
   1371c:	df02      	svc	2
		conn->llcp_phy.ack = conn->llcp_phy.req;
   1371e:	f882 00f5 	strb.w	r0, [r2, #245]	; 0xf5
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   13722:	f892 30f7 	ldrb.w	r3, [r2, #247]	; 0xf7
   13726:	f3c3 0340 	ubfx	r3, r3, #1, #1
   1372a:	f892 0078 	ldrb.w	r0, [r2, #120]	; 0x78
   1372e:	f363 0041 	bfi	r0, r3, #1, #1
   13732:	f882 0078 	strb.w	r0, [r2, #120]	; 0x78
		conn->procedure_expire = 0;
   13736:	2300      	movs	r3, #0
   13738:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
   1373c:	e7c0      	b.n	136c0 <isr_rx_conn_pkt_ctrl+0xf6c>
			return 0;
   1373e:	2300      	movs	r3, #0
   13740:	e77e      	b.n	13640 <isr_rx_conn_pkt_ctrl+0xeec>
			return 0;
   13742:	2300      	movs	r3, #0
   13744:	e77c      	b.n	13640 <isr_rx_conn_pkt_ctrl+0xeec>
		return 1;
   13746:	2301      	movs	r3, #1
   13748:	e77a      	b.n	13640 <isr_rx_conn_pkt_ctrl+0xeec>
	return 0;
   1374a:	2300      	movs	r3, #0
   1374c:	e778      	b.n	13640 <isr_rx_conn_pkt_ctrl+0xeec>
		if (!_radio.conn_curr->role) {
   1374e:	2b00      	cmp	r3, #0
   13750:	db49      	blt.n	137e6 <isr_rx_conn_pkt_ctrl+0x1092>
			if (!(p->phys & (conn->phy_tx | conn->phy_rx))) {
   13752:	7b21      	ldrb	r1, [r4, #12]
   13754:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
   13758:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   1375c:	f895 203a 	ldrb.w	r2, [r5, #58]	; 0x3a
   13760:	f002 0207 	and.w	r2, r2, #7
   13764:	4313      	orrs	r3, r2
   13766:	4219      	tst	r1, r3
   13768:	d040      	beq.n	137ec <isr_rx_conn_pkt_ctrl+0x1098>
			if (conn->llcp_req != conn->llcp_ack) {
   1376a:	f895 2074 	ldrb.w	r2, [r5, #116]	; 0x74
   1376e:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
   13772:	429a      	cmp	r2, r3
   13774:	d002      	beq.n	1377c <isr_rx_conn_pkt_ctrl+0x1028>
	u8_t nack = 0;
   13776:	2400      	movs	r4, #0
   13778:	f7ff b826 	b.w	127c8 <isr_rx_conn_pkt_ctrl+0x74>
			memcpy(&conn->llcp.chan_map.chm[0],
   1377c:	2205      	movs	r2, #5
   1377e:	491e      	ldr	r1, [pc, #120]	; (137f8 <isr_rx_conn_pkt_ctrl+0x10a4>)
   13780:	f105 0079 	add.w	r0, r5, #121	; 0x79
   13784:	f7ec fd9c 	bl	2c0 <memcpy>
			conn->llcp.chan_map.initiate = 1;
   13788:	2301      	movs	r3, #1
   1378a:	f885 3078 	strb.w	r3, [r5, #120]	; 0x78
			conn->llcp_type = LLCP_CHAN_MAP;
   1378e:	2302      	movs	r3, #2
   13790:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
			conn->llcp_ack--;
   13794:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
   13798:	3b01      	subs	r3, #1
   1379a:	f885 3075 	strb.w	r3, [r5, #117]	; 0x75
	u8_t nack = 0;
   1379e:	2400      	movs	r4, #0
   137a0:	f7ff b812 	b.w	127c8 <isr_rx_conn_pkt_ctrl+0x74>
		unknown_rsp_send(_radio.conn_curr,
   137a4:	4628      	mov	r0, r5
   137a6:	f7fd fcd3 	bl	11150 <unknown_rsp_send>
	u8_t nack = 0;
   137aa:	2400      	movs	r4, #0
		break;
   137ac:	f7ff b80c 	b.w	127c8 <isr_rx_conn_pkt_ctrl+0x74>
	u8_t nack = 0;
   137b0:	2400      	movs	r4, #0
   137b2:	f7ff b809 	b.w	127c8 <isr_rx_conn_pkt_ctrl+0x74>
   137b6:	2400      	movs	r4, #0
   137b8:	f7ff b806 	b.w	127c8 <isr_rx_conn_pkt_ctrl+0x74>
   137bc:	2400      	movs	r4, #0
   137be:	f7ff b803 	b.w	127c8 <isr_rx_conn_pkt_ctrl+0x74>
   137c2:	2400      	movs	r4, #0
   137c4:	f7ff b800 	b.w	127c8 <isr_rx_conn_pkt_ctrl+0x74>
   137c8:	2400      	movs	r4, #0
   137ca:	f7fe bffd 	b.w	127c8 <isr_rx_conn_pkt_ctrl+0x74>
   137ce:	2400      	movs	r4, #0
   137d0:	f7fe bffa 	b.w	127c8 <isr_rx_conn_pkt_ctrl+0x74>
   137d4:	2400      	movs	r4, #0
   137d6:	f7fe bff7 	b.w	127c8 <isr_rx_conn_pkt_ctrl+0x74>
   137da:	2400      	movs	r4, #0
   137dc:	f7fe bff4 	b.w	127c8 <isr_rx_conn_pkt_ctrl+0x74>
   137e0:	2400      	movs	r4, #0
   137e2:	f7fe bff1 	b.w	127c8 <isr_rx_conn_pkt_ctrl+0x74>
   137e6:	2400      	movs	r4, #0
   137e8:	f7fe bfee 	b.w	127c8 <isr_rx_conn_pkt_ctrl+0x74>
   137ec:	2400      	movs	r4, #0
   137ee:	f7fe bfeb 	b.w	127c8 <isr_rx_conn_pkt_ctrl+0x74>
   137f2:	bf00      	nop
   137f4:	20000e84 	.word	0x20000e84
   137f8:	20000f9a 	.word	0x20000f9a

000137fc <packet_rx_enqueue>:
{
   137fc:	b508      	push	{r3, lr}
	LL_ASSERT(_radio.packet_rx_last != _radio.packet_rx_acquire);
   137fe:	4a1a      	ldr	r2, [pc, #104]	; (13868 <packet_rx_enqueue+0x6c>)
   13800:	f892 313d 	ldrb.w	r3, [r2, #317]	; 0x13d
   13804:	b2db      	uxtb	r3, r3
   13806:	f892 213e 	ldrb.w	r2, [r2, #318]	; 0x13e
   1380a:	4293      	cmp	r3, r2
   1380c:	d01d      	beq.n	1384a <packet_rx_enqueue+0x4e>
	radio_pdu_node_rx = _radio.packet_rx[_radio.packet_rx_last];
   1380e:	4a16      	ldr	r2, [pc, #88]	; (13868 <packet_rx_enqueue+0x6c>)
   13810:	f8d2 3138 	ldr.w	r3, [r2, #312]	; 0x138
   13814:	f892 113d 	ldrb.w	r1, [r2, #317]	; 0x13d
   13818:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
	link = radio_pdu_node_rx->hdr.onion.link;
   1381c:	6801      	ldr	r1, [r0, #0]
	    _radio.packet_release_last;
   1381e:	f892 3174 	ldrb.w	r3, [r2, #372]	; 0x174
	radio_pdu_node_rx->hdr.onion.packet_release_last =
   13822:	7003      	strb	r3, [r0, #0]
	last = _radio.packet_rx_last + 1;
   13824:	f892 313d 	ldrb.w	r3, [r2, #317]	; 0x13d
   13828:	3301      	adds	r3, #1
   1382a:	b2db      	uxtb	r3, r3
	if (last == _radio.packet_rx_count) {
   1382c:	f892 213c 	ldrb.w	r2, [r2, #316]	; 0x13c
   13830:	4293      	cmp	r3, r2
   13832:	d010      	beq.n	13856 <packet_rx_enqueue+0x5a>
	_radio.packet_rx_last = last;
   13834:	4a0c      	ldr	r2, [pc, #48]	; (13868 <packet_rx_enqueue+0x6c>)
   13836:	f882 313d 	strb.w	r3, [r2, #317]	; 0x13d
	link = memq_enqueue(radio_pdu_node_rx, link,
   1383a:	f502 72a6 	add.w	r2, r2, #332	; 0x14c
   1383e:	f7fb f800 	bl	e842 <memq_enqueue>
	LL_ASSERT(link);
   13842:	b150      	cbz	r0, 1385a <packet_rx_enqueue+0x5e>
	packet_rx_callback();
   13844:	f7fe f871 	bl	1192a <packet_rx_callback>
   13848:	bd08      	pop	{r3, pc}
	LL_ASSERT(_radio.packet_rx_last != _radio.packet_rx_acquire);
   1384a:	4040      	eors	r0, r0
   1384c:	f380 8811 	msr	BASEPRI, r0
   13850:	f04f 0004 	mov.w	r0, #4
   13854:	df02      	svc	2
		last = 0;
   13856:	2300      	movs	r3, #0
   13858:	e7ec      	b.n	13834 <packet_rx_enqueue+0x38>
	LL_ASSERT(link);
   1385a:	4040      	eors	r0, r0
   1385c:	f380 8811 	msr	BASEPRI, r0
   13860:	f04f 0004 	mov.w	r0, #4
   13864:	df02      	svc	2
   13866:	bf00      	nop
   13868:	20000e84 	.word	0x20000e84

0001386c <mayfly_adv_stop>:
{
   1386c:	b510      	push	{r4, lr}
	if (_radio.packet_rx_acquire >=
   1386e:	4b1c      	ldr	r3, [pc, #112]	; (138e0 <mayfly_adv_stop+0x74>)
   13870:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   13874:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   13878:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   1387a:	429a      	cmp	r2, r3
   1387c:	d31d      	bcc.n	138ba <mayfly_adv_stop+0x4e>
			_radio.packet_rx_last);
   1387e:	4b18      	ldr	r3, [pc, #96]	; (138e0 <mayfly_adv_stop+0x74>)
   13880:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   13884:	1ad3      	subs	r3, r2, r3
   13886:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   13888:	b30b      	cbz	r3, 138ce <mayfly_adv_stop+0x62>
	return _radio.packet_rx[_radio.packet_rx_last];
   1388a:	4b15      	ldr	r3, [pc, #84]	; (138e0 <mayfly_adv_stop+0x74>)
   1388c:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   13890:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   13894:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
	LL_ASSERT(radio_pdu_node_rx);
   13898:	b1dc      	cbz	r4, 138d2 <mayfly_adv_stop+0x66>
	radio_pdu_node_rx->hdr.handle = 0xffff;
   1389a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1389e:	80e3      	strh	r3, [r4, #6]
	radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   138a0:	2306      	movs	r3, #6
   138a2:	7123      	strb	r3, [r4, #4]
	memset(radio_le_conn_cmplt, 0x00, sizeof(struct radio_le_conn_cmplt));
   138a4:	221d      	movs	r2, #29
   138a6:	2100      	movs	r1, #0
   138a8:	f104 000b 	add.w	r0, r4, #11
   138ac:	f017 f8ea 	bl	2aa84 <memset>
	radio_le_conn_cmplt->status = 0x3c;
   138b0:	233c      	movs	r3, #60	; 0x3c
   138b2:	72e3      	strb	r3, [r4, #11]
	packet_rx_enqueue();
   138b4:	f7ff ffa2 	bl	137fc <packet_rx_enqueue>
   138b8:	bd10      	pop	{r4, pc}
		return (_radio.packet_rx_count -
   138ba:	4909      	ldr	r1, [pc, #36]	; (138e0 <mayfly_adv_stop+0x74>)
   138bc:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
			_radio.packet_rx_last +
   138c0:	f891 113d 	ldrb.w	r1, [r1, #317]	; 0x13d
		return (_radio.packet_rx_count -
   138c4:	1a5b      	subs	r3, r3, r1
			_radio.packet_rx_last +
   138c6:	fa52 f383 	uxtab	r3, r2, r3
   138ca:	b2db      	uxtb	r3, r3
   138cc:	e7dc      	b.n	13888 <mayfly_adv_stop+0x1c>
		return 0;
   138ce:	2400      	movs	r4, #0
   138d0:	e7e2      	b.n	13898 <mayfly_adv_stop+0x2c>
	LL_ASSERT(radio_pdu_node_rx);
   138d2:	4040      	eors	r0, r0
   138d4:	f380 8811 	msr	BASEPRI, r0
   138d8:	f04f 0004 	mov.w	r0, #4
   138dc:	df02      	svc	2
   138de:	bf00      	nop
   138e0:	20000e84 	.word	0x20000e84

000138e4 <terminate_ind_rx_enqueue>:
{
   138e4:	b510      	push	{r4, lr}
   138e6:	4603      	mov	r3, r0
	LL_ASSERT(radio_pdu_node_rx->hdr.onion.link);
   138e8:	f8d0 40b4 	ldr.w	r4, [r0, #180]	; 0xb4
   138ec:	b1bc      	cbz	r4, 1391e <terminate_ind_rx_enqueue+0x3a>
   138ee:	30b4      	adds	r0, #180	; 0xb4
   138f0:	460a      	mov	r2, r1
	radio_pdu_node_rx->hdr.handle = conn->handle;
   138f2:	8c19      	ldrh	r1, [r3, #32]
   138f4:	f8a3 10ba 	strh.w	r1, [r3, #186]	; 0xba
	radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   138f8:	2107      	movs	r1, #7
   138fa:	f883 10b8 	strb.w	r1, [r3, #184]	; 0xb8
	*((u8_t *)radio_pdu_node_rx->pdu_data) = reason;
   138fe:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	    _radio.packet_release_last;
   13902:	4a0d      	ldr	r2, [pc, #52]	; (13938 <terminate_ind_rx_enqueue+0x54>)
   13904:	f892 1174 	ldrb.w	r1, [r2, #372]	; 0x174
	radio_pdu_node_rx->hdr.onion.packet_release_last =
   13908:	f883 10b4 	strb.w	r1, [r3, #180]	; 0xb4
	link = memq_enqueue(radio_pdu_node_rx, link,
   1390c:	f502 72a6 	add.w	r2, r2, #332	; 0x14c
   13910:	4621      	mov	r1, r4
   13912:	f7fa ff96 	bl	e842 <memq_enqueue>
	LL_ASSERT(link);
   13916:	b140      	cbz	r0, 1392a <terminate_ind_rx_enqueue+0x46>
	packet_rx_callback();
   13918:	f7fe f807 	bl	1192a <packet_rx_callback>
   1391c:	bd10      	pop	{r4, pc}
	LL_ASSERT(radio_pdu_node_rx->hdr.onion.link);
   1391e:	4040      	eors	r0, r0
   13920:	f380 8811 	msr	BASEPRI, r0
   13924:	f04f 0004 	mov.w	r0, #4
   13928:	df02      	svc	2
	LL_ASSERT(link);
   1392a:	4040      	eors	r0, r0
   1392c:	f380 8811 	msr	BASEPRI, r0
   13930:	f04f 0004 	mov.w	r0, #4
   13934:	df02      	svc	2
   13936:	bf00      	nop
   13938:	20000e84 	.word	0x20000e84

0001393c <isr_rx_scan_report>:
{
   1393c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (_radio.packet_rx_acquire >=
   13940:	4b31      	ldr	r3, [pc, #196]	; (13a08 <isr_rx_scan_report+0xcc>)
   13942:	f893 413e 	ldrb.w	r4, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   13946:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   1394a:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   1394c:	429c      	cmp	r4, r3
   1394e:	d327      	bcc.n	139a0 <isr_rx_scan_report+0x64>
			_radio.packet_rx_last);
   13950:	4b2d      	ldr	r3, [pc, #180]	; (13a08 <isr_rx_scan_report+0xcc>)
   13952:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   13956:	1ae3      	subs	r3, r4, r3
   13958:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   1395a:	2b02      	cmp	r3, #2
   1395c:	d92a      	bls.n	139b4 <isr_rx_scan_report+0x78>
	return _radio.packet_rx[_radio.packet_rx_last];
   1395e:	4b2a      	ldr	r3, [pc, #168]	; (13a08 <isr_rx_scan_report+0xcc>)
   13960:	f8d3 4138 	ldr.w	r4, [r3, #312]	; 0x138
   13964:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   13968:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
	if (radio_pdu_node_rx == 0) {
   1396c:	2c00      	cmp	r4, #0
   1396e:	d047      	beq.n	13a00 <isr_rx_scan_report+0xc4>
	radio_pdu_node_rx->hdr.handle = 0xffff;
   13970:	f64f 73ff 	movw	r3, #65535	; 0xffff
   13974:	80e3      	strh	r3, [r4, #6]
	} else if (_radio.scanner.phy) {
   13976:	4b24      	ldr	r3, [pc, #144]	; (13a08 <isr_rx_scan_report+0xcc>)
   13978:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
   1397c:	f013 0f07 	tst.w	r3, #7
   13980:	d020      	beq.n	139c4 <isr_rx_scan_report+0x88>
		switch (_radio.scanner.phy) {
   13982:	4b21      	ldr	r3, [pc, #132]	; (13a08 <isr_rx_scan_report+0xcc>)
   13984:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
   13988:	f003 0307 	and.w	r3, r3, #7
   1398c:	2b01      	cmp	r3, #1
   1398e:	d013      	beq.n	139b8 <isr_rx_scan_report+0x7c>
   13990:	2b04      	cmp	r3, #4
   13992:	d014      	beq.n	139be <isr_rx_scan_report+0x82>
			LL_ASSERT(0);
   13994:	4040      	eors	r0, r0
   13996:	f380 8811 	msr	BASEPRI, r0
   1399a:	f04f 0004 	mov.w	r0, #4
   1399e:	df02      	svc	2
		return (_radio.packet_rx_count -
   139a0:	4d19      	ldr	r5, [pc, #100]	; (13a08 <isr_rx_scan_report+0xcc>)
   139a2:	f895 313c 	ldrb.w	r3, [r5, #316]	; 0x13c
			_radio.packet_rx_last +
   139a6:	f895 513d 	ldrb.w	r5, [r5, #317]	; 0x13d
		return (_radio.packet_rx_count -
   139aa:	1b5b      	subs	r3, r3, r5
			_radio.packet_rx_last +
   139ac:	fa54 f383 	uxtab	r3, r4, r3
   139b0:	b2db      	uxtb	r3, r3
   139b2:	e7d2      	b.n	1395a <isr_rx_scan_report+0x1e>
		return 0;
   139b4:	2400      	movs	r4, #0
   139b6:	e7d9      	b.n	1396c <isr_rx_scan_report+0x30>
			radio_pdu_node_rx->hdr.type =
   139b8:	2303      	movs	r3, #3
   139ba:	7123      	strb	r3, [r4, #4]
			break;
   139bc:	e004      	b.n	139c8 <isr_rx_scan_report+0x8c>
			radio_pdu_node_rx->hdr.type =
   139be:	2304      	movs	r3, #4
   139c0:	7123      	strb	r3, [r4, #4]
			break;
   139c2:	e001      	b.n	139c8 <isr_rx_scan_report+0x8c>
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_REPORT;
   139c4:	2302      	movs	r3, #2
   139c6:	7123      	strb	r3, [r4, #4]
   139c8:	4615      	mov	r5, r2
   139ca:	460e      	mov	r6, r1
	pdu_adv_rx = (struct pdu_adv *)radio_pdu_node_rx->pdu_data;
   139cc:	f104 0708 	add.w	r7, r4, #8
			     pdu_adv_rx->len] =
   139d0:	f894 8009 	ldrb.w	r8, [r4, #9]
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
   139d4:	f108 0802 	add.w	r8, r8, #2
			     pdu_adv_rx->len] =
   139d8:	b968      	cbnz	r0, 139f6 <isr_rx_scan_report+0xba>
   139da:	207f      	movs	r0, #127	; 0x7f
   139dc:	f807 0008 	strb.w	r0, [r7, r8]
			     pdu_adv_rx->len + 1] = rl_idx;
   139e0:	7a63      	ldrb	r3, [r4, #9]
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
   139e2:	3303      	adds	r3, #3
			     pdu_adv_rx->len + 1] = rl_idx;
   139e4:	54fe      	strb	r6, [r7, r3]
			     pdu_adv_rx->len + 2] = dir_report ? 1 : 0;
   139e6:	7a63      	ldrb	r3, [r4, #9]
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
   139e8:	3304      	adds	r3, #4
			     pdu_adv_rx->len + 2] = dir_report ? 1 : 0;
   139ea:	54fd      	strb	r5, [r7, r3]
	packet_rx_enqueue();
   139ec:	f7ff ff06 	bl	137fc <packet_rx_enqueue>
	return 0;
   139f0:	2000      	movs	r0, #0
   139f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		(rssi_ready) ? (radio_rssi_get() & 0x7f) : 0x7f;
   139f6:	f7fb f949 	bl	ec8c <radio_rssi_get>
			     pdu_adv_rx->len] =
   139fa:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   139fe:	e7ed      	b.n	139dc <isr_rx_scan_report+0xa0>
		return 1;
   13a00:	2001      	movs	r0, #1
}
   13a02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13a06:	bf00      	nop
   13a08:	20000e84 	.word	0x20000e84

00013a0c <isr_rx_conn>:
{
   13a0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13a10:	b084      	sub	sp, #16
	u8_t rx_enqueue = 0;
   13a12:	2300      	movs	r3, #0
   13a14:	f88d 300b 	strb.w	r3, [sp, #11]
	_radio.packet_counter++;
   13a18:	4bc1      	ldr	r3, [pc, #772]	; (13d20 <isr_rx_conn+0x314>)
   13a1a:	f893 2114 	ldrb.w	r2, [r3, #276]	; 0x114
   13a1e:	3201      	adds	r2, #1
   13a20:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
	radio_pdu_node_rx = _radio.packet_rx[_radio.packet_rx_last];
   13a24:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   13a28:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   13a2c:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
	radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   13a30:	2301      	movs	r3, #1
   13a32:	712b      	strb	r3, [r5, #4]
	if (crc_ok) {
   13a34:	4607      	mov	r7, r0
   13a36:	2800      	cmp	r0, #0
   13a38:	d143      	bne.n	13ac2 <isr_rx_conn+0xb6>
		if (_radio.crc_expire == 0) {
   13a3a:	4bb9      	ldr	r3, [pc, #740]	; (13d20 <isr_rx_conn+0x314>)
   13a3c:	f893 3115 	ldrb.w	r3, [r3, #277]	; 0x115
   13a40:	b91b      	cbnz	r3, 13a4a <isr_rx_conn+0x3e>
			_radio.crc_expire = 2;
   13a42:	2202      	movs	r2, #2
   13a44:	4bb6      	ldr	r3, [pc, #728]	; (13d20 <isr_rx_conn+0x314>)
   13a46:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		_radio.crc_expire--;
   13a4a:	4bb5      	ldr	r3, [pc, #724]	; (13d20 <isr_rx_conn+0x314>)
   13a4c:	f893 4115 	ldrb.w	r4, [r3, #277]	; 0x115
   13a50:	3c01      	subs	r4, #1
   13a52:	b2e4      	uxtb	r4, r4
   13a54:	f883 4115 	strb.w	r4, [r3, #277]	; 0x115
		crc_close = (_radio.crc_expire == 0);
   13a58:	fab4 f484 	clz	r4, r4
   13a5c:	0964      	lsrs	r4, r4, #5
		if (!_radio.conn_curr->supervision_expire) {
   13a5e:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   13a62:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
   13a66:	2a00      	cmp	r2, #0
   13a68:	f040 8387 	bne.w	1417a <isr_rx_conn+0x76e>
				_radio.conn_curr->supervision_reload;
   13a6c:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
			_radio.conn_curr->supervision_expire =
   13a6e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	struct radio_pdu_node_tx *tx_release = NULL;
   13a72:	2600      	movs	r6, #0
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
   13a74:	f8df 92a8 	ldr.w	r9, [pc, #680]	; 13d20 <isr_rx_conn+0x314>
   13a78:	f8d9 0110 	ldr.w	r0, [r9, #272]	; 0x110
   13a7c:	f890 80f8 	ldrb.w	r8, [r0, #248]	; 0xf8
   13a80:	ea4f 18d8 	mov.w	r8, r8, lsr #7
	prepare_pdu_data_tx(_radio.conn_curr, &pdu_data_tx);
   13a84:	a903      	add	r1, sp, #12
   13a86:	f7fe f8ef 	bl	11c68 <prepare_pdu_data_tx>
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
   13a8a:	f899 3010 	ldrb.w	r3, [r9, #16]
			STATE_CLOSE : STATE_TX;
   13a8e:	2b03      	cmp	r3, #3
   13a90:	f000 8376 	beq.w	14180 <isr_rx_conn+0x774>
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
   13a94:	2c00      	cmp	r4, #0
   13a96:	f040 8372 	bne.w	1417e <isr_rx_conn+0x772>
   13a9a:	b147      	cbz	r7, 13aae <isr_rx_conn+0xa2>
			((crc_ok) && (pdu_data_rx->md == 0) &&
   13a9c:	7a2b      	ldrb	r3, [r5, #8]
   13a9e:	f013 0f10 	tst.w	r3, #16
   13aa2:	d104      	bne.n	13aae <isr_rx_conn+0xa2>
			 (pdu_data_tx->len == 0)) ||
   13aa4:	9b03      	ldr	r3, [sp, #12]
   13aa6:	785b      	ldrb	r3, [r3, #1]
			((crc_ok) && (pdu_data_rx->md == 0) &&
   13aa8:	2b00      	cmp	r3, #0
   13aaa:	f000 83aa 	beq.w	14202 <isr_rx_conn+0x7f6>
			_radio.conn_curr->llcp_terminate.reason_peer) ?
   13aae:	4b9c      	ldr	r3, [pc, #624]	; (13d20 <isr_rx_conn+0x314>)
   13ab0:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   13ab4:	f893 30b3 	ldrb.w	r3, [r3, #179]	; 0xb3
			 (pdu_data_tx->len == 0)) ||
   13ab8:	2b00      	cmp	r3, #0
   13aba:	f000 83a4 	beq.w	14206 <isr_rx_conn+0x7fa>
			STATE_CLOSE : STATE_TX;
   13abe:	2303      	movs	r3, #3
   13ac0:	e35e      	b.n	14180 <isr_rx_conn+0x774>
	pdu_data_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
   13ac2:	f105 0808 	add.w	r8, r5, #8
	if (pdu_data_rx->nesn != _radio.conn_curr->sn) {
   13ac6:	7a2a      	ldrb	r2, [r5, #8]
   13ac8:	f3c2 0280 	ubfx	r2, r2, #2, #1
   13acc:	4b94      	ldr	r3, [pc, #592]	; (13d20 <isr_rx_conn+0x314>)
   13ace:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   13ad2:	f891 30f8 	ldrb.w	r3, [r1, #248]	; 0xf8
   13ad6:	f003 0301 	and.w	r3, r3, #1
   13ada:	429a      	cmp	r2, r3
   13adc:	f000 81cd 	beq.w	13e7a <isr_rx_conn+0x46e>
		_radio.conn_curr->sn++;
   13ae0:	f083 0301 	eor.w	r3, r3, #1
   13ae4:	f891 20f8 	ldrb.w	r2, [r1, #248]	; 0xf8
   13ae8:	f363 0200 	bfi	r2, r3, #0, #1
   13aec:	f881 20f8 	strb.w	r2, [r1, #248]	; 0xf8
		if (_radio.role == ROLE_SLAVE) {
   13af0:	4b8b      	ldr	r3, [pc, #556]	; (13d20 <isr_rx_conn+0x314>)
   13af2:	7bdb      	ldrb	r3, [r3, #15]
   13af4:	b2db      	uxtb	r3, r3
   13af6:	2b03      	cmp	r3, #3
   13af8:	d02c      	beq.n	13b54 <isr_rx_conn+0x148>
		if (_radio.conn_curr->empty == 0) {
   13afa:	4b89      	ldr	r3, [pc, #548]	; (13d20 <isr_rx_conn+0x314>)
   13afc:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   13b00:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   13b04:	f012 0f80 	tst.w	r2, #128	; 0x80
   13b08:	f040 81ae 	bne.w	13e68 <isr_rx_conn+0x45c>
			node_tx = _radio.conn_curr->pkt_tx_head;
   13b0c:	f8d3 613c 	ldr.w	r6, [r3, #316]	; 0x13c
				(node_tx->pdu_data +
   13b10:	f106 0c04 	add.w	ip, r6, #4
				 _radio.conn_curr->packet_tx_head_offset);
   13b14:	f893 e151 	ldrb.w	lr, [r3, #337]	; 0x151
			pdu_data_tx = (struct pdu_data *)
   13b18:	eb0c 090e 	add.w	r9, ip, lr
			pdu_data_tx_len = pdu_data_tx->len;
   13b1c:	f899 4001 	ldrb.w	r4, [r9, #1]
			if (pdu_data_tx_len != 0) {
   13b20:	2c00      	cmp	r4, #0
   13b22:	f000 8145 	beq.w	13db0 <isr_rx_conn+0x3a4>
				if (_radio.conn_curr->enc_tx) {
   13b26:	f012 0f20 	tst.w	r2, #32
   13b2a:	d00a      	beq.n	13b42 <isr_rx_conn+0x136>
					_radio.conn_curr->ccm_tx.counter++;
   13b2c:	f8d3 012a 	ldr.w	r0, [r3, #298]	; 0x12a
   13b30:	f8d3 112e 	ldr.w	r1, [r3, #302]	; 0x12e
   13b34:	3001      	adds	r0, #1
   13b36:	f141 0100 	adc.w	r1, r1, #0
   13b3a:	f8c3 012a 	str.w	r0, [r3, #298]	; 0x12a
   13b3e:	f8c3 112e 	str.w	r1, [r3, #302]	; 0x12e
				if (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) {
   13b42:	f81c 300e 	ldrb.w	r3, [ip, lr]
   13b46:	f003 0303 	and.w	r3, r3, #3
   13b4a:	2b03      	cmp	r3, #3
   13b4c:	d00c      	beq.n	13b68 <isr_rx_conn+0x15c>
	u8_t terminate = 0;
   13b4e:	f04f 0900 	mov.w	r9, #0
   13b52:	e12e      	b.n	13db2 <isr_rx_conn+0x3a6>
			_radio.conn_curr->slave.latency_enabled = 1;
   13b54:	4b72      	ldr	r3, [pc, #456]	; (13d20 <isr_rx_conn+0x314>)
   13b56:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   13b5a:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
   13b5e:	f043 0301 	orr.w	r3, r3, #1
   13b62:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
   13b66:	e7c8      	b.n	13afa <isr_rx_conn+0xee>
	switch (pdu_data_tx->payload.llctrl.opcode) {
   13b68:	f899 3003 	ldrb.w	r3, [r9, #3]
   13b6c:	3b02      	subs	r3, #2
   13b6e:	2b16      	cmp	r3, #22
   13b70:	f200 8118 	bhi.w	13da4 <isr_rx_conn+0x398>
   13b74:	e8df f013 	tbh	[pc, r3, lsl #1]
   13b78:	00330017 	.word	0x00330017
   13b7c:	01160057 	.word	0x01160057
   13b80:	01160116 	.word	0x01160116
   13b84:	01160116 	.word	0x01160116
   13b88:	007d0063 	.word	0x007d0063
   13b8c:	00970116 	.word	0x00970116
   13b90:	01160116 	.word	0x01160116
   13b94:	01160116 	.word	0x01160116
   13b98:	01160116 	.word	0x01160116
   13b9c:	011600af 	.word	0x011600af
   13ba0:	00e000d6 	.word	0x00e000d6
   13ba4:	0106      	.short	0x0106
		_radio.state = STATE_CLOSE;
   13ba6:	2203      	movs	r2, #3
   13ba8:	4b5d      	ldr	r3, [pc, #372]	; (13d20 <isr_rx_conn+0x314>)
   13baa:	741a      	strb	r2, [r3, #16]
		radio_disable();
   13bac:	f7fa fff6 	bl	eb9c <radio_disable>
		LL_ASSERT(!radio_is_ready());
   13bb0:	f7fb f80e 	bl	ebd0 <radio_is_ready>
   13bb4:	b958      	cbnz	r0, 13bce <isr_rx_conn+0x1c2>
		terminate_ind_rx_enqueue(_radio.conn_curr,
   13bb6:	4b5a      	ldr	r3, [pc, #360]	; (13d20 <isr_rx_conn+0x314>)
   13bb8:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
		     (pdu_data_tx->payload.llctrl.ctrldata.terminate_ind.
   13bbc:	f899 1004 	ldrb.w	r1, [r9, #4]
		terminate_ind_rx_enqueue(_radio.conn_curr,
   13bc0:	2913      	cmp	r1, #19
   13bc2:	d00a      	beq.n	13bda <isr_rx_conn+0x1ce>
   13bc4:	f7ff fe8e 	bl	138e4 <terminate_ind_rx_enqueue>
		terminate = 1;
   13bc8:	f04f 0901 	mov.w	r9, #1
   13bcc:	e0f1      	b.n	13db2 <isr_rx_conn+0x3a6>
		LL_ASSERT(!radio_is_ready());
   13bce:	4040      	eors	r0, r0
   13bd0:	f380 8811 	msr	BASEPRI, r0
   13bd4:	f04f 0004 	mov.w	r0, #4
   13bd8:	df02      	svc	2
		terminate_ind_rx_enqueue(_radio.conn_curr,
   13bda:	2116      	movs	r1, #22
   13bdc:	e7f2      	b.n	13bc4 <isr_rx_conn+0x1b8>
		memcpy(&_radio.conn_curr->llcp.encryption.skd[0],
   13bde:	f8df a140 	ldr.w	sl, [pc, #320]	; 13d20 <isr_rx_conn+0x314>
   13be2:	f8da 0110 	ldr.w	r0, [sl, #272]	; 0x110
   13be6:	2208      	movs	r2, #8
   13be8:	f109 010e 	add.w	r1, r9, #14
   13bec:	3093      	adds	r0, #147	; 0x93
   13bee:	f7ec fb67 	bl	2c0 <memcpy>
		memcpy(&_radio.conn_curr->ccm_rx.iv[0],
   13bf2:	f8da 0110 	ldr.w	r0, [sl, #272]	; 0x110
   13bf6:	2204      	movs	r2, #4
   13bf8:	f109 0116 	add.w	r1, r9, #22
   13bfc:	f500 7089 	add.w	r0, r0, #274	; 0x112
   13c00:	f7ec fb5e 	bl	2c0 <memcpy>
		_radio.conn_curr->pause_tx = 1;
   13c04:	f8da 2110 	ldr.w	r2, [sl, #272]	; 0x110
   13c08:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
   13c0c:	f043 0308 	orr.w	r3, r3, #8
   13c10:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
		_radio.conn_curr->procedure_expire =
   13c14:	f8da 3110 	ldr.w	r3, [sl, #272]	; 0x110
			_radio.conn_curr->procedure_reload;
   13c18:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
		_radio.conn_curr->procedure_expire =
   13c1c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	u8_t terminate = 0;
   13c20:	f04f 0900 	mov.w	r9, #0
   13c24:	e0c5      	b.n	13db2 <isr_rx_conn+0x3a6>
		_radio.conn_curr->pause_tx = 1;
   13c26:	4b3e      	ldr	r3, [pc, #248]	; (13d20 <isr_rx_conn+0x314>)
   13c28:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   13c2c:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
   13c30:	f043 0308 	orr.w	r3, r3, #8
   13c34:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
	u8_t terminate = 0;
   13c38:	f04f 0900 	mov.w	r9, #0
   13c3c:	e0b9      	b.n	13db2 <isr_rx_conn+0x3a6>
		_radio.conn_curr->pause_tx = 1;
   13c3e:	4b38      	ldr	r3, [pc, #224]	; (13d20 <isr_rx_conn+0x314>)
   13c40:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   13c44:	f891 20f8 	ldrb.w	r2, [r1, #248]	; 0xf8
   13c48:	f042 0208 	orr.w	r2, r2, #8
   13c4c:	f881 20f8 	strb.w	r2, [r1, #248]	; 0xf8
		_radio.conn_curr->refresh = 1;
   13c50:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   13c54:	f891 20f8 	ldrb.w	r2, [r1, #248]	; 0xf8
   13c58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   13c5c:	f881 20f8 	strb.w	r2, [r1, #248]	; 0xf8
		_radio.conn_curr->procedure_expire =
   13c60:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
			_radio.conn_curr->procedure_reload;
   13c64:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
		_radio.conn_curr->procedure_expire =
   13c68:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	u8_t terminate = 0;
   13c6c:	f04f 0900 	mov.w	r9, #0
   13c70:	e09f      	b.n	13db2 <isr_rx_conn+0x3a6>
		if (_radio.role == ROLE_MASTER) {
   13c72:	4b2b      	ldr	r3, [pc, #172]	; (13d20 <isr_rx_conn+0x314>)
   13c74:	7bdb      	ldrb	r3, [r3, #15]
   13c76:	b2db      	uxtb	r3, r3
   13c78:	2b04      	cmp	r3, #4
   13c7a:	d00b      	beq.n	13c94 <isr_rx_conn+0x288>
			_radio.conn_curr->pause_tx = 1;
   13c7c:	4b28      	ldr	r3, [pc, #160]	; (13d20 <isr_rx_conn+0x314>)
   13c7e:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   13c82:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
   13c86:	f043 0308 	orr.w	r3, r3, #8
   13c8a:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
	u8_t terminate = 0;
   13c8e:	f04f 0900 	mov.w	r9, #0
   13c92:	e08e      	b.n	13db2 <isr_rx_conn+0x3a6>
			enc_req_reused_send(_radio.conn_curr, *node_tx);
   13c94:	4631      	mov	r1, r6
   13c96:	4b22      	ldr	r3, [pc, #136]	; (13d20 <isr_rx_conn+0x314>)
   13c98:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
   13c9c:	f7fe fd38 	bl	12710 <enc_req_reused_send>
			*node_tx = NULL;
   13ca0:	2600      	movs	r6, #0
	u8_t terminate = 0;
   13ca2:	46b1      	mov	r9, r6
   13ca4:	e085      	b.n	13db2 <isr_rx_conn+0x3a6>
		_radio.conn_curr->pause_rx = 0;
   13ca6:	4b1e      	ldr	r3, [pc, #120]	; (13d20 <isr_rx_conn+0x314>)
   13ca8:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   13cac:	f892 10f8 	ldrb.w	r1, [r2, #248]	; 0xf8
   13cb0:	f36f 0182 	bfc	r1, #2, #1
   13cb4:	f882 10f8 	strb.w	r1, [r2, #248]	; 0xf8
		_radio.conn_curr->pause_tx = 0;
   13cb8:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   13cbc:	f892 10f8 	ldrb.w	r1, [r2, #248]	; 0xf8
   13cc0:	f36f 01c3 	bfc	r1, #3, #1
   13cc4:	f882 10f8 	strb.w	r1, [r2, #248]	; 0xf8
		_radio.conn_curr->procedure_expire = 0;
   13cc8:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   13ccc:	f04f 0900 	mov.w	r9, #0
   13cd0:	f8a3 9044 	strh.w	r9, [r3, #68]	; 0x44
   13cd4:	e06d      	b.n	13db2 <isr_rx_conn+0x3a6>
		if ((_radio.conn_curr->llcp_length.req !=
   13cd6:	4b12      	ldr	r3, [pc, #72]	; (13d20 <isr_rx_conn+0x314>)
   13cd8:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   13cdc:	f893 10e8 	ldrb.w	r1, [r3, #232]	; 0xe8
		     _radio.conn_curr->llcp_length.ack) &&
   13ce0:	f893 20e9 	ldrb.w	r2, [r3, #233]	; 0xe9
		if ((_radio.conn_curr->llcp_length.req !=
   13ce4:	4291      	cmp	r1, r2
   13ce6:	d060      	beq.n	13daa <isr_rx_conn+0x39e>
		    (_radio.conn_curr->llcp_length.state ==
   13ce8:	f893 20ea 	ldrb.w	r2, [r3, #234]	; 0xea
   13cec:	f002 0203 	and.w	r2, r2, #3
		     _radio.conn_curr->llcp_length.ack) &&
   13cf0:	2a01      	cmp	r2, #1
   13cf2:	d002      	beq.n	13cfa <isr_rx_conn+0x2ee>
	u8_t terminate = 0;
   13cf4:	f04f 0900 	mov.w	r9, #0
   13cf8:	e05b      	b.n	13db2 <isr_rx_conn+0x3a6>
			_radio.conn_curr->pause_tx = 1;
   13cfa:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   13cfe:	f042 0208 	orr.w	r2, r2, #8
   13d02:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			_radio.conn_curr->llcp_length.state =
   13d06:	4b06      	ldr	r3, [pc, #24]	; (13d20 <isr_rx_conn+0x314>)
   13d08:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   13d0c:	f893 20ea 	ldrb.w	r2, [r3, #234]	; 0xea
   13d10:	2102      	movs	r1, #2
   13d12:	f361 0201 	bfi	r2, r1, #0, #2
   13d16:	f883 20ea 	strb.w	r2, [r3, #234]	; 0xea
	u8_t terminate = 0;
   13d1a:	f04f 0900 	mov.w	r9, #0
   13d1e:	e048      	b.n	13db2 <isr_rx_conn+0x3a6>
   13d20:	20000e84 	.word	0x20000e84
		_radio.conn_curr->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   13d24:	4bbe      	ldr	r3, [pc, #760]	; (14020 <isr_rx_conn+0x614>)
   13d26:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   13d2a:	f893 20f6 	ldrb.w	r2, [r3, #246]	; 0xf6
   13d2e:	2102      	movs	r1, #2
   13d30:	f361 0201 	bfi	r2, r1, #0, #2
   13d34:	f883 20f6 	strb.w	r2, [r3, #246]	; 0xf6
		if (_radio.role == ROLE_SLAVE) {
   13d38:	4bb9      	ldr	r3, [pc, #740]	; (14020 <isr_rx_conn+0x614>)
   13d3a:	7bdb      	ldrb	r3, [r3, #15]
   13d3c:	b2db      	uxtb	r3, r3
   13d3e:	2b03      	cmp	r3, #3
   13d40:	d002      	beq.n	13d48 <isr_rx_conn+0x33c>
	u8_t terminate = 0;
   13d42:	f04f 0900 	mov.w	r9, #0
   13d46:	e034      	b.n	13db2 <isr_rx_conn+0x3a6>
	u8_t phy_tx_time[8] = {BIT(0), BIT(0), BIT(1), BIT(0),
   13d48:	4ab6      	ldr	r2, [pc, #728]	; (14024 <isr_rx_conn+0x618>)
   13d4a:	e892 0003 	ldmia.w	r2, {r0, r1}
   13d4e:	e88d 0003 	stmia.w	sp, {r0, r1}
	struct connection *conn = _radio.conn_curr;
   13d52:	4bb3      	ldr	r3, [pc, #716]	; (14020 <isr_rx_conn+0x614>)
   13d54:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	u8_t phys = conn->llcp_phy.tx | conn->phy_tx;
   13d58:	f892 30f6 	ldrb.w	r3, [r2, #246]	; 0xf6
   13d5c:	f3c3 0382 	ubfx	r3, r3, #2, #3
   13d60:	f892 1038 	ldrb.w	r1, [r2, #56]	; 0x38
   13d64:	f3c1 01c2 	ubfx	r1, r1, #3, #3
   13d68:	430b      	orrs	r3, r1
	conn->phy_tx_time = phy_tx_time[phys];
   13d6a:	a904      	add	r1, sp, #16
   13d6c:	440b      	add	r3, r1
   13d6e:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   13d72:	f892 3039 	ldrb.w	r3, [r2, #57]	; 0x39
   13d76:	f361 0302 	bfi	r3, r1, #0, #3
   13d7a:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
	u8_t terminate = 0;
   13d7e:	f04f 0900 	mov.w	r9, #0
   13d82:	e016      	b.n	13db2 <isr_rx_conn+0x3a6>
		_radio.conn_curr->phy_tx_time =
   13d84:	4ba6      	ldr	r3, [pc, #664]	; (14020 <isr_rx_conn+0x614>)
   13d86:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
			_radio.conn_curr->llcp.phy_upd_ind.tx;
   13d8a:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
   13d8e:	f3c2 0282 	ubfx	r2, r2, #2, #3
		_radio.conn_curr->phy_tx_time =
   13d92:	f893 1039 	ldrb.w	r1, [r3, #57]	; 0x39
   13d96:	f362 0102 	bfi	r1, r2, #0, #3
   13d9a:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
	u8_t terminate = 0;
   13d9e:	f04f 0900 	mov.w	r9, #0
   13da2:	e006      	b.n	13db2 <isr_rx_conn+0x3a6>
   13da4:	f04f 0900 	mov.w	r9, #0
   13da8:	e003      	b.n	13db2 <isr_rx_conn+0x3a6>
   13daa:	f04f 0900 	mov.w	r9, #0
   13dae:	e000      	b.n	13db2 <isr_rx_conn+0x3a6>
	u8_t terminate = 0;
   13db0:	46a1      	mov	r9, r4
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
   13db2:	4b9b      	ldr	r3, [pc, #620]	; (14020 <isr_rx_conn+0x614>)
   13db4:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   13db8:	f893 2151 	ldrb.w	r2, [r3, #337]	; 0x151
   13dbc:	4414      	add	r4, r2
   13dbe:	b2e4      	uxtb	r4, r4
   13dc0:	f883 4151 	strb.w	r4, [r3, #337]	; 0x151
			    _radio.conn_curr->packet_tx_head_len) {
   13dc4:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
			if (_radio.conn_curr->packet_tx_head_offset ==
   13dc8:	429c      	cmp	r4, r3
   13dca:	d01c      	beq.n	13e06 <isr_rx_conn+0x3fa>
	struct radio_pdu_node_tx *tx_release = NULL;
   13dcc:	2600      	movs	r6, #0
	if (terminate) {
   13dce:	f1b9 0f00 	cmp.w	r9, #0
   13dd2:	d155      	bne.n	13e80 <isr_rx_conn+0x474>
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
   13dd4:	7a2a      	ldrb	r2, [r5, #8]
   13dd6:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   13dda:	4b91      	ldr	r3, [pc, #580]	; (14020 <isr_rx_conn+0x614>)
   13ddc:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   13de0:	f891 30f8 	ldrb.w	r3, [r1, #248]	; 0xf8
   13de4:	f3c3 0340 	ubfx	r3, r3, #1, #1
   13de8:	429a      	cmp	r2, r3
   13dea:	d053      	beq.n	13e94 <isr_rx_conn+0x488>
	return 0;
   13dec:	2300      	movs	r3, #0
		if (terminate) {
   13dee:	2b00      	cmp	r3, #0
   13df0:	f040 81f5 	bne.w	141de <isr_rx_conn+0x7d2>
		_radio.crc_expire = 0;
   13df4:	4b8a      	ldr	r3, [pc, #552]	; (14020 <isr_rx_conn+0x614>)
   13df6:	2400      	movs	r4, #0
   13df8:	f883 4115 	strb.w	r4, [r3, #277]	; 0x115
		_radio.conn_curr->supervision_expire = 0;
   13dfc:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   13e00:	f8a3 4040 	strh.w	r4, [r3, #64]	; 0x40
   13e04:	e636      	b.n	13a74 <isr_rx_conn+0x68>
	struct connection *conn = _radio.conn_curr;
   13e06:	4b86      	ldr	r3, [pc, #536]	; (14020 <isr_rx_conn+0x614>)
   13e08:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
	conn->packet_tx_head_len = 0;
   13e0c:	2200      	movs	r2, #0
   13e0e:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
	conn->packet_tx_head_offset = 0;
   13e12:	f883 2151 	strb.w	r2, [r3, #337]	; 0x151
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
   13e16:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
   13e1a:	f8d3 1140 	ldr.w	r1, [r3, #320]	; 0x140
   13e1e:	428a      	cmp	r2, r1
   13e20:	d007      	beq.n	13e32 <isr_rx_conn+0x426>
		if (conn->pkt_tx_head == conn->pkt_tx_data) {
   13e22:	f8d3 1148 	ldr.w	r1, [r3, #328]	; 0x148
   13e26:	428a      	cmp	r2, r1
   13e28:	d01a      	beq.n	13e60 <isr_rx_conn+0x454>
		conn->pkt_tx_head = conn->pkt_tx_head->next;
   13e2a:	6812      	ldr	r2, [r2, #0]
   13e2c:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
   13e30:	e7cd      	b.n	13dce <isr_rx_conn+0x3c2>
		if (node_tx) {
   13e32:	2e00      	cmp	r6, #0
   13e34:	d0cb      	beq.n	13dce <isr_rx_conn+0x3c2>
			conn->pkt_tx_head = conn->pkt_tx_head->next;
   13e36:	6812      	ldr	r2, [r2, #0]
   13e38:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
			if (conn->pkt_tx_ctrl == conn->pkt_tx_ctrl_last) {
   13e3c:	f8d3 0144 	ldr.w	r0, [r3, #324]	; 0x144
   13e40:	4281      	cmp	r1, r0
   13e42:	d007      	beq.n	13e54 <isr_rx_conn+0x448>
				conn->pkt_tx_ctrl = conn->pkt_tx_head;
   13e44:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
			mem_release(node_tx, &_radio. pkt_tx_ctrl_free);
   13e48:	4977      	ldr	r1, [pc, #476]	; (14028 <isr_rx_conn+0x61c>)
   13e4a:	4630      	mov	r0, r6
   13e4c:	f7fa fcad 	bl	e7aa <mem_release>
	return NULL;
   13e50:	2600      	movs	r6, #0
   13e52:	e7bc      	b.n	13dce <isr_rx_conn+0x3c2>
				conn->pkt_tx_ctrl = NULL;
   13e54:	2200      	movs	r2, #0
   13e56:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
				conn->pkt_tx_ctrl_last = NULL;
   13e5a:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
   13e5e:	e7f3      	b.n	13e48 <isr_rx_conn+0x43c>
			conn->pkt_tx_data = conn->pkt_tx_data->next;
   13e60:	6809      	ldr	r1, [r1, #0]
   13e62:	f8c3 1148 	str.w	r1, [r3, #328]	; 0x148
   13e66:	e7e0      	b.n	13e2a <isr_rx_conn+0x41e>
			_radio.conn_curr->empty = 0;
   13e68:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   13e6c:	f36f 12c7 	bfc	r2, #7, #1
   13e70:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
	struct radio_pdu_node_tx *tx_release = NULL;
   13e74:	2600      	movs	r6, #0
	u8_t terminate = 0;
   13e76:	46b1      	mov	r9, r6
   13e78:	e7a9      	b.n	13dce <isr_rx_conn+0x3c2>
	struct radio_pdu_node_tx *tx_release = NULL;
   13e7a:	2600      	movs	r6, #0
	u8_t terminate = 0;
   13e7c:	46b1      	mov	r9, r6
   13e7e:	e7a6      	b.n	13dce <isr_rx_conn+0x3c2>
		connection_release(_radio.conn_curr);
   13e80:	4c67      	ldr	r4, [pc, #412]	; (14020 <isr_rx_conn+0x614>)
   13e82:	f8d4 0110 	ldr.w	r0, [r4, #272]	; 0x110
   13e86:	f7fd fdd9 	bl	11a3c <connection_release>
		_radio.conn_curr = NULL;
   13e8a:	2300      	movs	r3, #0
   13e8c:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
		return terminate;
   13e90:	464b      	mov	r3, r9
   13e92:	e7ac      	b.n	13dee <isr_rx_conn+0x3e2>
	if (_radio.packet_rx_acquire >=
   13e94:	4a62      	ldr	r2, [pc, #392]	; (14020 <isr_rx_conn+0x614>)
   13e96:	f892 013e 	ldrb.w	r0, [r2, #318]	; 0x13e
	    _radio.packet_rx_last) {
   13e9a:	f892 213d 	ldrb.w	r2, [r2, #317]	; 0x13d
   13e9e:	b2d2      	uxtb	r2, r2
	if (_radio.packet_rx_acquire >=
   13ea0:	4290      	cmp	r0, r2
   13ea2:	d347      	bcc.n	13f34 <isr_rx_conn+0x528>
			_radio.packet_rx_last);
   13ea4:	4b5e      	ldr	r3, [pc, #376]	; (14020 <isr_rx_conn+0x614>)
   13ea6:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   13eaa:	1ac3      	subs	r3, r0, r3
   13eac:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   13eae:	2b02      	cmp	r3, #2
   13eb0:	d94a      	bls.n	13f48 <isr_rx_conn+0x53c>
	return _radio.packet_rx[_radio.packet_rx_last];
   13eb2:	4b5b      	ldr	r3, [pc, #364]	; (14020 <isr_rx_conn+0x614>)
   13eb4:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   13eb8:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   13ebc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
   13ec0:	2b00      	cmp	r3, #0
   13ec2:	f000 814e 	beq.w	14162 <isr_rx_conn+0x756>
	    ((_radio.fc_ena == 0) ||
   13ec6:	4b56      	ldr	r3, [pc, #344]	; (14020 <isr_rx_conn+0x614>)
   13ec8:	f893 317e 	ldrb.w	r3, [r3, #382]	; 0x17e
	    (packet_rx_reserve_get(3) != 0) &&
   13ecc:	2b00      	cmp	r3, #0
   13ece:	d045      	beq.n	13f5c <isr_rx_conn+0x550>
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
   13ed0:	4b53      	ldr	r3, [pc, #332]	; (14020 <isr_rx_conn+0x614>)
   13ed2:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
   13ed6:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
	    ((_radio.fc_ena == 0) ||
   13eda:	429a      	cmp	r2, r3
   13edc:	d036      	beq.n	13f4c <isr_rx_conn+0x540>
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
   13ede:	4b50      	ldr	r3, [pc, #320]	; (14020 <isr_rx_conn+0x614>)
   13ee0:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
	      (_radio.fc_req == _radio.fc_ack)) ||
   13ee4:	429a      	cmp	r2, r3
   13ee6:	f000 813e 	beq.w	14166 <isr_rx_conn+0x75a>
	      (_radio.fc_req != _radio.fc_ack) &&
   13eea:	4a4d      	ldr	r2, [pc, #308]	; (14020 <isr_rx_conn+0x614>)
   13eec:	f892 317c 	ldrb.w	r3, [r2, #380]	; 0x17c
   13ef0:	b2db      	uxtb	r3, r3
   13ef2:	f892 217d 	ldrb.w	r2, [r2, #381]	; 0x17d
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
   13ef6:	4293      	cmp	r3, r2
   13ef8:	f000 8137 	beq.w	1416a <isr_rx_conn+0x75e>
		(((_radio.fc_req == 0) &&
   13efc:	4b48      	ldr	r3, [pc, #288]	; (14020 <isr_rx_conn+0x614>)
   13efe:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
	      (_radio.fc_req != _radio.fc_ack) &&
   13f02:	b92b      	cbnz	r3, 13f10 <isr_rx_conn+0x504>
		  (_radio.fc_handle[TRIPLE_BUFFER_SIZE - 1] ==
   13f04:	4b46      	ldr	r3, [pc, #280]	; (14020 <isr_rx_conn+0x614>)
   13f06:	f8b3 217a 	ldrh.w	r2, [r3, #378]	; 0x17a
		   _radio.conn_curr->handle)) ||
   13f0a:	8c0b      	ldrh	r3, [r1, #32]
		(((_radio.fc_req == 0) &&
   13f0c:	429a      	cmp	r2, r3
   13f0e:	d025      	beq.n	13f5c <isr_rx_conn+0x550>
		 ((_radio.fc_req != 0) &&
   13f10:	4b43      	ldr	r3, [pc, #268]	; (14020 <isr_rx_conn+0x614>)
   13f12:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
		   _radio.conn_curr->handle)) ||
   13f16:	2b00      	cmp	r3, #0
   13f18:	f000 8129 	beq.w	1416e <isr_rx_conn+0x762>
		  (_radio.fc_handle[_radio.fc_req - 1] ==
   13f1c:	4b40      	ldr	r3, [pc, #256]	; (14020 <isr_rx_conn+0x614>)
   13f1e:	f893 217c 	ldrb.w	r2, [r3, #380]	; 0x17c
   13f22:	32b7      	adds	r2, #183	; 0xb7
   13f24:	eb03 0342 	add.w	r3, r3, r2, lsl #1
   13f28:	88da      	ldrh	r2, [r3, #6]
		   _radio.conn_curr->handle)))))) {
   13f2a:	8c0b      	ldrh	r3, [r1, #32]
		 ((_radio.fc_req != 0) &&
   13f2c:	429a      	cmp	r2, r3
   13f2e:	d015      	beq.n	13f5c <isr_rx_conn+0x550>
	return 0;
   13f30:	2300      	movs	r3, #0
   13f32:	e75c      	b.n	13dee <isr_rx_conn+0x3e2>
		return (_radio.packet_rx_count -
   13f34:	4a3a      	ldr	r2, [pc, #232]	; (14020 <isr_rx_conn+0x614>)
   13f36:	f892 313c 	ldrb.w	r3, [r2, #316]	; 0x13c
			_radio.packet_rx_last +
   13f3a:	f892 213d 	ldrb.w	r2, [r2, #317]	; 0x13d
		return (_radio.packet_rx_count -
   13f3e:	1a9b      	subs	r3, r3, r2
			_radio.packet_rx_last +
   13f40:	fa50 f383 	uxtab	r3, r0, r3
   13f44:	b2db      	uxtb	r3, r3
   13f46:	e7b2      	b.n	13eae <isr_rx_conn+0x4a2>
		return 0;
   13f48:	2300      	movs	r3, #0
   13f4a:	e7b9      	b.n	13ec0 <isr_rx_conn+0x4b4>
	      (_radio.fc_req == _radio.fc_ack)) ||
   13f4c:	4834      	ldr	r0, [pc, #208]	; (14020 <isr_rx_conn+0x614>)
   13f4e:	f890 317c 	ldrb.w	r3, [r0, #380]	; 0x17c
   13f52:	b2db      	uxtb	r3, r3
   13f54:	f890 017d 	ldrb.w	r0, [r0, #381]	; 0x17d
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
   13f58:	4283      	cmp	r3, r0
   13f5a:	d1c0      	bne.n	13ede <isr_rx_conn+0x4d2>
		if (pdu_data_rx->len != 0) {
   13f5c:	7a68      	ldrb	r0, [r5, #9]
   13f5e:	2800      	cmp	r0, #0
   13f60:	f000 80b8 	beq.w	140d4 <isr_rx_conn+0x6c8>
			if (_radio.conn_curr->enc_rx) {
   13f64:	f891 30f8 	ldrb.w	r3, [r1, #248]	; 0xf8
   13f68:	f013 0f10 	tst.w	r3, #16
   13f6c:	d133      	bne.n	13fd6 <isr_rx_conn+0x5ca>
		u8_t ccm_rx_increment = 0;
   13f6e:	464c      	mov	r4, r9
			if ((_radio.conn_curr->enc_rx &&
   13f70:	4b2b      	ldr	r3, [pc, #172]	; (14020 <isr_rx_conn+0x614>)
   13f72:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   13f76:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
   13f7a:	f013 0f10 	tst.w	r3, #16
   13f7e:	d135      	bne.n	13fec <isr_rx_conn+0x5e0>
			    (_radio.conn_curr->pause_rx &&
   13f80:	4b27      	ldr	r3, [pc, #156]	; (14020 <isr_rx_conn+0x614>)
   13f82:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   13f86:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
			     !radio_ccm_mic_is_valid()) ||
   13f8a:	f012 0f04 	tst.w	r2, #4
   13f8e:	f000 8082 	beq.w	14096 <isr_rx_conn+0x68a>
	u8_t opcode = pdu_data->payload.llctrl.opcode;
   13f92:	f898 1003 	ldrb.w	r1, [r8, #3]
	return (pdu_data->ll_id != PDU_DATA_LLID_CTRL) ||
   13f96:	7a2a      	ldrb	r2, [r5, #8]
   13f98:	f002 0203 	and.w	r2, r2, #3
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
   13f9c:	2a03      	cmp	r2, #3
   13f9e:	d02a      	beq.n	13ff6 <isr_rx_conn+0x5ea>
   13fa0:	2201      	movs	r2, #1
			    (_radio.conn_curr->pause_rx &&
   13fa2:	2a00      	cmp	r2, #0
   13fa4:	d077      	beq.n	14096 <isr_rx_conn+0x68a>
				_radio.state = STATE_CLOSE;
   13fa6:	2203      	movs	r2, #3
   13fa8:	4b1d      	ldr	r3, [pc, #116]	; (14020 <isr_rx_conn+0x614>)
   13faa:	741a      	strb	r2, [r3, #16]
				radio_disable();
   13fac:	f7fa fdf6 	bl	eb9c <radio_disable>
				LL_ASSERT(!radio_is_ready());
   13fb0:	f7fa fe0e 	bl	ebd0 <radio_is_ready>
   13fb4:	2800      	cmp	r0, #0
   13fb6:	d168      	bne.n	1408a <isr_rx_conn+0x67e>
				terminate_ind_rx_enqueue(_radio.conn_curr,
   13fb8:	4c19      	ldr	r4, [pc, #100]	; (14020 <isr_rx_conn+0x614>)
   13fba:	213d      	movs	r1, #61	; 0x3d
   13fbc:	f8d4 0110 	ldr.w	r0, [r4, #272]	; 0x110
   13fc0:	f7ff fc90 	bl	138e4 <terminate_ind_rx_enqueue>
				connection_release(_radio.conn_curr);
   13fc4:	f8d4 0110 	ldr.w	r0, [r4, #272]	; 0x110
   13fc8:	f7fd fd38 	bl	11a3c <connection_release>
				_radio.conn_curr = NULL;
   13fcc:	2300      	movs	r3, #0
   13fce:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
				return 1; /* terminated */
   13fd2:	2301      	movs	r3, #1
   13fd4:	e70b      	b.n	13dee <isr_rx_conn+0x3e2>
				done = radio_ccm_is_done();
   13fd6:	f7fb f823 	bl	f020 <radio_ccm_is_done>
				LL_ASSERT(done);
   13fda:	b108      	cbz	r0, 13fe0 <isr_rx_conn+0x5d4>
				ccm_rx_increment = 1;
   13fdc:	2401      	movs	r4, #1
   13fde:	e7c7      	b.n	13f70 <isr_rx_conn+0x564>
				LL_ASSERT(done);
   13fe0:	4040      	eors	r0, r0
   13fe2:	f380 8811 	msr	BASEPRI, r0
   13fe6:	f04f 0004 	mov.w	r0, #4
   13fea:	df02      	svc	2
			     !radio_ccm_mic_is_valid()) ||
   13fec:	f7fb f838 	bl	f060 <radio_ccm_mic_is_valid>
			if ((_radio.conn_curr->enc_rx &&
   13ff0:	2800      	cmp	r0, #0
   13ff2:	d0d8      	beq.n	13fa6 <isr_rx_conn+0x59a>
   13ff4:	e7c4      	b.n	13f80 <isr_rx_conn+0x574>
   13ff6:	f993 201d 	ldrsb.w	r2, [r3, #29]
	return (pdu_data->ll_id != PDU_DATA_LLID_CTRL) ||
   13ffa:	2a00      	cmp	r2, #0
   13ffc:	db1d      	blt.n	1403a <isr_rx_conn+0x62e>
		((!conn->refresh &&
   13ffe:	f893 00f8 	ldrb.w	r0, [r3, #248]	; 0xf8
	       (!conn->role &&
   14002:	f010 0040 	ands.w	r0, r0, #64	; 0x40
   14006:	d111      	bne.n	1402c <isr_rx_conn+0x620>
		((!conn->refresh &&
   14008:	2902      	cmp	r1, #2
   1400a:	d00f      	beq.n	1402c <isr_rx_conn+0x620>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   1400c:	2905      	cmp	r1, #5
   1400e:	d014      	beq.n	1403a <isr_rx_conn+0x62e>
   14010:	2906      	cmp	r1, #6
   14012:	d012      	beq.n	1403a <isr_rx_conn+0x62e>
   14014:	290d      	cmp	r1, #13
   14016:	d010      	beq.n	1403a <isr_rx_conn+0x62e>
   14018:	2911      	cmp	r1, #17
   1401a:	d00e      	beq.n	1403a <isr_rx_conn+0x62e>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
   1401c:	2201      	movs	r2, #1
   1401e:	e7c0      	b.n	13fa2 <isr_rx_conn+0x596>
   14020:	20000e84 	.word	0x20000e84
   14024:	0002ee40 	.word	0x0002ee40
   14028:	20000fdc 	.word	0x20000fdc
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   1402c:	b128      	cbz	r0, 1403a <isr_rx_conn+0x62e>
		 (conn->refresh &&
   1402e:	2902      	cmp	r1, #2
   14030:	d003      	beq.n	1403a <isr_rx_conn+0x62e>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
   14032:	290b      	cmp	r1, #11
   14034:	d001      	beq.n	1403a <isr_rx_conn+0x62e>
		  (opcode != PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP) &&
   14036:	2904      	cmp	r1, #4
   14038:	d1e8      	bne.n	1400c <isr_rx_conn+0x600>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
   1403a:	2a00      	cmp	r2, #0
   1403c:	db01      	blt.n	14042 <isr_rx_conn+0x636>
   1403e:	2200      	movs	r2, #0
   14040:	e7af      	b.n	13fa2 <isr_rx_conn+0x596>
		((!conn->refresh &&
   14042:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
	       (conn->role &&
   14046:	f012 0240 	ands.w	r2, r2, #64	; 0x40
   1404a:	d109      	bne.n	14060 <isr_rx_conn+0x654>
		((!conn->refresh &&
   1404c:	2902      	cmp	r1, #2
   1404e:	d007      	beq.n	14060 <isr_rx_conn+0x654>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   14050:	2906      	cmp	r1, #6
   14052:	d014      	beq.n	1407e <isr_rx_conn+0x672>
   14054:	290d      	cmp	r1, #13
   14056:	d014      	beq.n	14082 <isr_rx_conn+0x676>
   14058:	2911      	cmp	r1, #17
   1405a:	d114      	bne.n	14086 <isr_rx_conn+0x67a>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
   1405c:	2200      	movs	r2, #0
   1405e:	e7a0      	b.n	13fa2 <isr_rx_conn+0x596>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   14060:	b13a      	cbz	r2, 14072 <isr_rx_conn+0x666>
		 (conn->refresh &&
   14062:	2902      	cmp	r1, #2
   14064:	d007      	beq.n	14076 <isr_rx_conn+0x66a>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
   14066:	290b      	cmp	r1, #11
   14068:	d007      	beq.n	1407a <isr_rx_conn+0x66e>
		  (opcode != PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP) &&
   1406a:	2903      	cmp	r1, #3
   1406c:	d1f0      	bne.n	14050 <isr_rx_conn+0x644>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
   1406e:	2200      	movs	r2, #0
   14070:	e797      	b.n	13fa2 <isr_rx_conn+0x596>
   14072:	2200      	movs	r2, #0
   14074:	e795      	b.n	13fa2 <isr_rx_conn+0x596>
   14076:	2200      	movs	r2, #0
   14078:	e793      	b.n	13fa2 <isr_rx_conn+0x596>
   1407a:	2200      	movs	r2, #0
   1407c:	e791      	b.n	13fa2 <isr_rx_conn+0x596>
   1407e:	2200      	movs	r2, #0
   14080:	e78f      	b.n	13fa2 <isr_rx_conn+0x596>
   14082:	2200      	movs	r2, #0
   14084:	e78d      	b.n	13fa2 <isr_rx_conn+0x596>
   14086:	2201      	movs	r2, #1
   14088:	e78b      	b.n	13fa2 <isr_rx_conn+0x596>
				LL_ASSERT(!radio_is_ready());
   1408a:	4040      	eors	r0, r0
   1408c:	f380 8811 	msr	BASEPRI, r0
   14090:	f04f 0004 	mov.w	r0, #4
   14094:	df02      	svc	2
			_radio.conn_curr->appto_expire = 0;
   14096:	2200      	movs	r2, #0
   14098:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
			_radio.conn_curr->apto_expire = 0;
   1409c:	4b70      	ldr	r3, [pc, #448]	; (14260 <isr_rx_conn+0x854>)
   1409e:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   140a2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
			switch (pdu_data_rx->ll_id) {
   140a6:	7a2b      	ldrb	r3, [r5, #8]
   140a8:	f013 0303 	ands.w	r3, r3, #3
   140ac:	d00c      	beq.n	140c8 <isr_rx_conn+0x6bc>
   140ae:	2b02      	cmp	r3, #2
   140b0:	d905      	bls.n	140be <isr_rx_conn+0x6b2>
				nack = isr_rx_conn_pkt_ctrl(radio_pdu_node_rx,
   140b2:	f10d 010b 	add.w	r1, sp, #11
   140b6:	4628      	mov	r0, r5
   140b8:	f7fe fb4c 	bl	12754 <isr_rx_conn_pkt_ctrl>
   140bc:	e030      	b.n	14120 <isr_rx_conn+0x714>
				*rx_enqueue = 1;
   140be:	2301      	movs	r3, #1
   140c0:	f88d 300b 	strb.w	r3, [sp, #11]
	u8_t nack = 0;
   140c4:	4648      	mov	r0, r9
   140c6:	e02b      	b.n	14120 <isr_rx_conn+0x714>
				LL_ASSERT(0);
   140c8:	4040      	eors	r0, r0
   140ca:	f380 8811 	msr	BASEPRI, r0
   140ce:	f04f 0004 	mov.w	r0, #4
   140d2:	df02      	svc	2
		} else if ((_radio.conn_curr->enc_rx) ||
   140d4:	f891 30f8 	ldrb.w	r3, [r1, #248]	; 0xf8
   140d8:	f013 0f14 	tst.w	r3, #20
   140dc:	d01f      	beq.n	1411e <isr_rx_conn+0x712>
			appto_reload_new = (conn->apto_reload >
   140de:	f8b1 204a 	ldrh.w	r2, [r1, #74]	; 0x4a
					    (conn->latency + 6)) ?
   140e2:	8ccb      	ldrh	r3, [r1, #38]	; 0x26
   140e4:	1d9c      	adds	r4, r3, #6
			appto_reload_new = (conn->apto_reload >
   140e6:	42a2      	cmp	r2, r4
   140e8:	dd04      	ble.n	140f4 <isr_rx_conn+0x6e8>
					   (conn->apto_reload -
   140ea:	1ad3      	subs	r3, r2, r3
   140ec:	b29b      	uxth	r3, r3
			appto_reload_new = (conn->apto_reload >
   140ee:	3b06      	subs	r3, #6
   140f0:	b29b      	uxth	r3, r3
   140f2:	e000      	b.n	140f6 <isr_rx_conn+0x6ea>
   140f4:	4613      	mov	r3, r2
			if (conn->appto_reload != appto_reload_new) {
   140f6:	f8b1 4046 	ldrh.w	r4, [r1, #70]	; 0x46
   140fa:	429c      	cmp	r4, r3
   140fc:	d004      	beq.n	14108 <isr_rx_conn+0x6fc>
				conn->appto_reload = appto_reload_new;
   140fe:	f8a1 3046 	strh.w	r3, [r1, #70]	; 0x46
				conn->apto_expire = 0;
   14102:	2300      	movs	r3, #0
   14104:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
			if (conn->apto_expire == 0) {
   14108:	f8b1 304c 	ldrh.w	r3, [r1, #76]	; 0x4c
   1410c:	bb3b      	cbnz	r3, 1415e <isr_rx_conn+0x752>
				conn->appto_expire = conn->appto_reload;
   1410e:	f8b1 3046 	ldrh.w	r3, [r1, #70]	; 0x46
   14112:	f8a1 3048 	strh.w	r3, [r1, #72]	; 0x48
				conn->apto_expire = conn->apto_reload;
   14116:	f8a1 204c 	strh.w	r2, [r1, #76]	; 0x4c
		u8_t ccm_rx_increment = 0;
   1411a:	4604      	mov	r4, r0
   1411c:	e000      	b.n	14120 <isr_rx_conn+0x714>
   1411e:	4604      	mov	r4, r0
		if (!nack) {
   14120:	bb38      	cbnz	r0, 14172 <isr_rx_conn+0x766>
			_radio.conn_curr->nesn++;
   14122:	4b4f      	ldr	r3, [pc, #316]	; (14260 <isr_rx_conn+0x854>)
   14124:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   14128:	f891 30f8 	ldrb.w	r3, [r1, #248]	; 0xf8
   1412c:	f3c3 0240 	ubfx	r2, r3, #1, #1
   14130:	f082 0201 	eor.w	r2, r2, #1
   14134:	f362 0341 	bfi	r3, r2, #1, #1
   14138:	f881 30f8 	strb.w	r3, [r1, #248]	; 0xf8
			if (ccm_rx_increment) {
   1413c:	b1dc      	cbz	r4, 14176 <isr_rx_conn+0x76a>
				_radio.conn_curr->ccm_rx.counter++;
   1413e:	4b48      	ldr	r3, [pc, #288]	; (14260 <isr_rx_conn+0x854>)
   14140:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   14144:	f8d1 2109 	ldr.w	r2, [r1, #265]	; 0x109
   14148:	f8d1 310d 	ldr.w	r3, [r1, #269]	; 0x10d
   1414c:	3201      	adds	r2, #1
   1414e:	f143 0300 	adc.w	r3, r3, #0
   14152:	f8c1 2109 	str.w	r2, [r1, #265]	; 0x109
   14156:	f8c1 310d 	str.w	r3, [r1, #269]	; 0x10d
	return 0;
   1415a:	2300      	movs	r3, #0
   1415c:	e647      	b.n	13dee <isr_rx_conn+0x3e2>
		u8_t ccm_rx_increment = 0;
   1415e:	4604      	mov	r4, r0
   14160:	e7de      	b.n	14120 <isr_rx_conn+0x714>
	return 0;
   14162:	2300      	movs	r3, #0
   14164:	e643      	b.n	13dee <isr_rx_conn+0x3e2>
   14166:	2300      	movs	r3, #0
   14168:	e641      	b.n	13dee <isr_rx_conn+0x3e2>
   1416a:	2300      	movs	r3, #0
   1416c:	e63f      	b.n	13dee <isr_rx_conn+0x3e2>
   1416e:	2300      	movs	r3, #0
   14170:	e63d      	b.n	13dee <isr_rx_conn+0x3e2>
   14172:	2300      	movs	r3, #0
   14174:	e63b      	b.n	13dee <isr_rx_conn+0x3e2>
   14176:	2300      	movs	r3, #0
   14178:	e639      	b.n	13dee <isr_rx_conn+0x3e2>
	struct radio_pdu_node_tx *tx_release = NULL;
   1417a:	2600      	movs	r6, #0
   1417c:	e47a      	b.n	13a74 <isr_rx_conn+0x68>
			STATE_CLOSE : STATE_TX;
   1417e:	2303      	movs	r3, #3
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
   14180:	4a37      	ldr	r2, [pc, #220]	; (14260 <isr_rx_conn+0x854>)
   14182:	7413      	strb	r3, [r2, #16]
	if (_radio.state == STATE_CLOSE) {
   14184:	2b03      	cmp	r3, #3
   14186:	d040      	beq.n	1420a <isr_rx_conn+0x7fe>
		radio_tmr_tifs_set(RADIO_TIFS);
   14188:	2096      	movs	r0, #150	; 0x96
   1418a:	f7fa fe0f 	bl	edac <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(_radio.conn_curr->phy_rx);
   1418e:	4b34      	ldr	r3, [pc, #208]	; (14260 <isr_rx_conn+0x854>)
   14190:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   14194:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
   14198:	f000 0007 	and.w	r0, r0, #7
   1419c:	f7fa fd54 	bl	ec48 <radio_switch_complete_and_rx>
		radio_tmr_end_capture();
   141a0:	f7fa febc 	bl	ef1c <radio_tmr_end_capture>
	pdu_data_tx->sn = _radio.conn_curr->sn;
   141a4:	9a03      	ldr	r2, [sp, #12]
   141a6:	4b2e      	ldr	r3, [pc, #184]	; (14260 <isr_rx_conn+0x854>)
   141a8:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   141ac:	f891 00f8 	ldrb.w	r0, [r1, #248]	; 0xf8
   141b0:	7811      	ldrb	r1, [r2, #0]
   141b2:	f360 01c3 	bfi	r1, r0, #3, #1
   141b6:	7011      	strb	r1, [r2, #0]
	pdu_data_tx->nesn = _radio.conn_curr->nesn;
   141b8:	9903      	ldr	r1, [sp, #12]
   141ba:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   141be:	f892 20f8 	ldrb.w	r2, [r2, #248]	; 0xf8
   141c2:	f3c2 0240 	ubfx	r2, r2, #1, #1
   141c6:	7808      	ldrb	r0, [r1, #0]
   141c8:	f362 0082 	bfi	r0, r2, #2, #1
   141cc:	7008      	strb	r0, [r1, #0]
	tx_packet_set(_radio.conn_curr, pdu_data_tx);
   141ce:	9903      	ldr	r1, [sp, #12]
   141d0:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
   141d4:	f7fd fdde 	bl	11d94 <tx_packet_set>
	LL_ASSERT(!radio_is_ready());
   141d8:	f7fa fcfa 	bl	ebd0 <radio_is_ready>
   141dc:	bb38      	cbnz	r0, 1422e <isr_rx_conn+0x822>
	if (!radio_tmr_aa_restore()) {
   141de:	f7fa fe91 	bl	ef04 <radio_tmr_aa_restore>
   141e2:	b350      	cbz	r0, 1423a <isr_rx_conn+0x82e>
	if (!_radio.conn_curr) {
   141e4:	4b1e      	ldr	r3, [pc, #120]	; (14260 <isr_rx_conn+0x854>)
   141e6:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   141ea:	b13b      	cbz	r3, 141fc <isr_rx_conn+0x7f0>
	if (tx_release) {
   141ec:	b11e      	cbz	r6, 141f6 <isr_rx_conn+0x7ea>
		pdu_node_tx_release(_radio.conn_curr->handle, tx_release);
   141ee:	4631      	mov	r1, r6
   141f0:	8c18      	ldrh	r0, [r3, #32]
   141f2:	f7fd fb9f 	bl	11934 <pdu_node_tx_release>
	if (rx_enqueue) {
   141f6:	f89d 300b 	ldrb.w	r3, [sp, #11]
   141fa:	bb1b      	cbnz	r3, 14244 <isr_rx_conn+0x838>
}
   141fc:	b004      	add	sp, #16
   141fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			STATE_CLOSE : STATE_TX;
   14202:	2303      	movs	r3, #3
   14204:	e7bc      	b.n	14180 <isr_rx_conn+0x774>
   14206:	2302      	movs	r3, #2
   14208:	e7ba      	b.n	14180 <isr_rx_conn+0x774>
		if (_radio.role == ROLE_MASTER) {
   1420a:	7bd3      	ldrb	r3, [r2, #15]
   1420c:	b2db      	uxtb	r3, r3
   1420e:	2b04      	cmp	r3, #4
   14210:	d002      	beq.n	14218 <isr_rx_conn+0x80c>
			radio_switch_complete_and_disable();
   14212:	f7fa fd29 	bl	ec68 <radio_switch_complete_and_disable>
   14216:	e7c5      	b.n	141a4 <isr_rx_conn+0x798>
			_radio.conn_curr->empty = is_empty_pdu_tx_retry;
   14218:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
   1421c:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   14220:	f368 12c7 	bfi	r2, r8, #7, #1
   14224:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			radio_disable();
   14228:	f7fa fcb8 	bl	eb9c <radio_disable>
			goto isr_rx_conn_exit;
   1422c:	e7d7      	b.n	141de <isr_rx_conn+0x7d2>
	LL_ASSERT(!radio_is_ready());
   1422e:	4040      	eors	r0, r0
   14230:	f380 8811 	msr	BASEPRI, r0
   14234:	f04f 0004 	mov.w	r0, #4
   14238:	df02      	svc	2
		radio_tmr_aa_save(radio_tmr_aa_get());
   1423a:	f7fa fe57 	bl	eeec <radio_tmr_aa_get>
   1423e:	f7fa fe5b 	bl	eef8 <radio_tmr_aa_save>
   14242:	e7cf      	b.n	141e4 <isr_rx_conn+0x7d8>
		rx_fc_lock(_radio.conn_curr->handle);
   14244:	4c06      	ldr	r4, [pc, #24]	; (14260 <isr_rx_conn+0x854>)
   14246:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   1424a:	8c18      	ldrh	r0, [r3, #32]
   1424c:	f7fc fdec 	bl	10e28 <rx_fc_lock>
		radio_pdu_node_rx->hdr.handle = _radio.conn_curr->handle;
   14250:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   14254:	8c1b      	ldrh	r3, [r3, #32]
   14256:	80eb      	strh	r3, [r5, #6]
		packet_rx_enqueue();
   14258:	f7ff fad0 	bl	137fc <packet_rx_enqueue>
	return;
   1425c:	e7ce      	b.n	141fc <isr_rx_conn+0x7f0>
   1425e:	bf00      	nop
   14260:	20000e84 	.word	0x20000e84

00014264 <prepare_normal_set>:
	if (hdr->ticks_xtal_to_start & ((u32_t)1 << 31)) {
   14264:	6803      	ldr	r3, [r0, #0]
   14266:	2b00      	cmp	r3, #0
   14268:	db00      	blt.n	1426c <prepare_normal_set+0x8>
   1426a:	4770      	bx	lr
{
   1426c:	b530      	push	{r4, r5, lr}
   1426e:	b089      	sub	sp, #36	; 0x24
			ticks_active_to_start : hdr->ticks_preempt_to_start;
   14270:	6885      	ldr	r5, [r0, #8]
			 hdr->ticks_preempt_to_start) ? hdr->
   14272:	6844      	ldr	r4, [r0, #4]
			(hdr->ticks_xtal_to_start & (~((u32_t)1 << 31))) -
   14274:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
		u32_t ticks_drift_minus =
   14278:	42a5      	cmp	r5, r4
   1427a:	bf2c      	ite	cs
   1427c:	1b5b      	subcs	r3, r3, r5
   1427e:	1b1b      	subcc	r3, r3, r4
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
   14280:	b29b      	uxth	r3, r3
		ticker_status =
   14282:	9006      	str	r0, [sp, #24]
   14284:	480a      	ldr	r0, [pc, #40]	; (142b0 <prepare_normal_set+0x4c>)
   14286:	9005      	str	r0, [sp, #20]
   14288:	2000      	movs	r0, #0
   1428a:	9004      	str	r0, [sp, #16]
   1428c:	9003      	str	r0, [sp, #12]
   1428e:	9002      	str	r0, [sp, #8]
   14290:	9301      	str	r3, [sp, #4]
   14292:	9300      	str	r3, [sp, #0]
   14294:	4603      	mov	r3, r0
   14296:	f7fb ff89 	bl	101ac <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1429a:	b108      	cbz	r0, 142a0 <prepare_normal_set+0x3c>
   1429c:	2802      	cmp	r0, #2
   1429e:	d101      	bne.n	142a4 <prepare_normal_set+0x40>
}
   142a0:	b009      	add	sp, #36	; 0x24
   142a2:	bd30      	pop	{r4, r5, pc}
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   142a4:	4040      	eors	r0, r0
   142a6:	f380 8811 	msr	BASEPRI, r0
   142aa:	f04f 0004 	mov.w	r0, #4
   142ae:	df02      	svc	2
   142b0:	00010b2d 	.word	0x00010b2d

000142b4 <event_common_prepare>:
{
   142b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   142b8:	b08a      	sub	sp, #40	; 0x28
   142ba:	4681      	mov	r9, r0
   142bc:	468a      	mov	sl, r1
   142be:	4616      	mov	r6, r2
   142c0:	461f      	mov	r7, r3
   142c2:	f89d 504c 	ldrb.w	r5, [sp, #76]	; 0x4c
	u32_t _ticks_xtal_to_start = *ticks_xtal_to_start;
   142c6:	6814      	ldr	r4, [r2, #0]
	u32_t _ticks_active_to_start = *ticks_active_to_start;
   142c8:	f8d3 8000 	ldr.w	r8, [r3]
	if (_ticks_xtal_to_start & ((u32_t)1 << 31)) {
   142cc:	2c00      	cmp	r4, #0
   142ce:	db25      	blt.n	1431c <event_common_prepare+0x68>
	if (_ticks_active_to_start < _ticks_xtal_to_start) {
   142d0:	4544      	cmp	r4, r8
   142d2:	d828      	bhi.n	14326 <event_common_prepare+0x72>
	} else if (_ticks_active_to_start > _ticks_xtal_to_start) {
   142d4:	4544      	cmp	r4, r8
   142d6:	d251      	bcs.n	1437c <event_common_prepare+0xc8>
		ticks_to_xtal = _ticks_active_to_start - _ticks_xtal_to_start;
   142d8:	eba8 0404 	sub.w	r4, r8, r4
		event_active(0, 0, 0, NULL);
   142dc:	2300      	movs	r3, #0
   142de:	461a      	mov	r2, r3
   142e0:	4619      	mov	r1, r3
   142e2:	4618      	mov	r0, r3
   142e4:	f7fd fa3a 	bl	1175c <event_active>
		ticker_status =
   142e8:	f241 43d1 	movw	r3, #5329	; 0x14d1
   142ec:	9308      	str	r3, [sp, #32]
   142ee:	4b5e      	ldr	r3, [pc, #376]	; (14468 <event_common_prepare+0x1b4>)
   142f0:	9307      	str	r3, [sp, #28]
   142f2:	2000      	movs	r0, #0
   142f4:	9006      	str	r0, [sp, #24]
   142f6:	4b5d      	ldr	r3, [pc, #372]	; (1446c <event_common_prepare+0x1b8>)
   142f8:	9305      	str	r3, [sp, #20]
   142fa:	9004      	str	r0, [sp, #16]
   142fc:	9003      	str	r0, [sp, #12]
   142fe:	9002      	str	r0, [sp, #8]
   14300:	9001      	str	r0, [sp, #4]
   14302:	9400      	str	r4, [sp, #0]
   14304:	464b      	mov	r3, r9
   14306:	2201      	movs	r2, #1
   14308:	4601      	mov	r1, r0
   1430a:	f7fb ff01 	bl	10110 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1430e:	2800      	cmp	r0, #0
   14310:	f000 8091 	beq.w	14436 <event_common_prepare+0x182>
   14314:	2802      	cmp	r0, #2
   14316:	d12b      	bne.n	14370 <event_common_prepare+0xbc>
		ticks_to_start = _ticks_active_to_start;
   14318:	4644      	mov	r4, r8
   1431a:	e03b      	b.n	14394 <event_common_prepare+0xe0>
		_ticks_xtal_to_start =
   1431c:	9c12      	ldr	r4, [sp, #72]	; 0x48
   1431e:	4544      	cmp	r4, r8
   14320:	bf38      	it	cc
   14322:	4644      	movcc	r4, r8
   14324:	e7d4      	b.n	142d0 <event_common_prepare+0x1c>
		ticks_to_active = _ticks_xtal_to_start - _ticks_active_to_start;
   14326:	eba4 0308 	sub.w	r3, r4, r8
		ticker_status =
   1432a:	f241 42bc 	movw	r2, #5308	; 0x14bc
   1432e:	9208      	str	r2, [sp, #32]
   14330:	4a4d      	ldr	r2, [pc, #308]	; (14468 <event_common_prepare+0x1b4>)
   14332:	9207      	str	r2, [sp, #28]
   14334:	2000      	movs	r0, #0
   14336:	9006      	str	r0, [sp, #24]
   14338:	4a4d      	ldr	r2, [pc, #308]	; (14470 <event_common_prepare+0x1bc>)
   1433a:	9205      	str	r2, [sp, #20]
   1433c:	9004      	str	r0, [sp, #16]
   1433e:	9003      	str	r0, [sp, #12]
   14340:	9002      	str	r0, [sp, #8]
   14342:	9001      	str	r0, [sp, #4]
   14344:	9300      	str	r3, [sp, #0]
   14346:	464b      	mov	r3, r9
   14348:	2201      	movs	r2, #1
   1434a:	4601      	mov	r1, r0
   1434c:	f7fb fee0 	bl	10110 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   14350:	b108      	cbz	r0, 14356 <event_common_prepare+0xa2>
   14352:	2802      	cmp	r0, #2
   14354:	d106      	bne.n	14364 <event_common_prepare+0xb0>
		event_xtal(0, 0, 0, NULL);
   14356:	2300      	movs	r3, #0
   14358:	461a      	mov	r2, r3
   1435a:	4619      	mov	r1, r3
   1435c:	4618      	mov	r0, r3
   1435e:	f7fd fa0f 	bl	11780 <event_xtal>
   14362:	e017      	b.n	14394 <event_common_prepare+0xe0>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   14364:	4040      	eors	r0, r0
   14366:	f380 8811 	msr	BASEPRI, r0
   1436a:	f04f 0004 	mov.w	r0, #4
   1436e:	df02      	svc	2
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   14370:	4040      	eors	r0, r0
   14372:	f380 8811 	msr	BASEPRI, r0
   14376:	f04f 0004 	mov.w	r0, #4
   1437a:	df02      	svc	2
		event_active(0, 0, 0, NULL);
   1437c:	2300      	movs	r3, #0
   1437e:	461a      	mov	r2, r3
   14380:	4619      	mov	r1, r3
   14382:	4618      	mov	r0, r3
   14384:	f7fd f9ea 	bl	1175c <event_active>
		event_xtal(0, 0, 0, NULL);
   14388:	2300      	movs	r3, #0
   1438a:	461a      	mov	r2, r3
   1438c:	4619      	mov	r1, r3
   1438e:	4618      	mov	r0, r3
   14390:	f7fd f9f6 	bl	11780 <event_xtal>
	_radio.remainder_anchor = remainder;
   14394:	4b37      	ldr	r3, [pc, #220]	; (14474 <event_common_prepare+0x1c0>)
   14396:	f8c3 a008 	str.w	sl, [r3, #8]
	ticker_status =
   1439a:	f241 43e9 	movw	r3, #5353	; 0x14e9
   1439e:	9308      	str	r3, [sp, #32]
   143a0:	4b31      	ldr	r3, [pc, #196]	; (14468 <event_common_prepare+0x1b4>)
   143a2:	9307      	str	r3, [sp, #28]
   143a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
   143a6:	9306      	str	r3, [sp, #24]
   143a8:	9b14      	ldr	r3, [sp, #80]	; 0x50
   143aa:	9305      	str	r3, [sp, #20]
   143ac:	2000      	movs	r0, #0
   143ae:	9004      	str	r0, [sp, #16]
   143b0:	9003      	str	r0, [sp, #12]
   143b2:	9002      	str	r0, [sp, #8]
   143b4:	9001      	str	r0, [sp, #4]
   143b6:	9400      	str	r4, [sp, #0]
   143b8:	464b      	mov	r3, r9
   143ba:	4602      	mov	r2, r0
   143bc:	4601      	mov	r1, r0
   143be:	f7fb fea7 	bl	10110 <ticker_start>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   143c2:	b108      	cbz	r0, 143c8 <event_common_prepare+0x114>
   143c4:	2802      	cmp	r0, #2
   143c6:	d138      	bne.n	1443a <event_common_prepare+0x186>
	event_stop(0, 0, 0, (void *)STATE_ABORT);
   143c8:	2305      	movs	r3, #5
   143ca:	2200      	movs	r2, #0
   143cc:	4611      	mov	r1, r2
   143ce:	4610      	mov	r0, r2
   143d0:	f7fd f93a 	bl	11648 <event_stop>
	if (_radio.ticks_active_to_start != _ticks_active_to_start) {
   143d4:	4b27      	ldr	r3, [pc, #156]	; (14474 <event_common_prepare+0x1c0>)
   143d6:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
   143da:	4598      	cmp	r8, r3
   143dc:	d01d      	beq.n	1441a <event_common_prepare+0x166>
			 (*ticks_xtal_to_start & ~(((u32_t)1 << 31))) :
   143de:	6832      	ldr	r2, [r6, #0]
   143e0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
		u32_t ticks_to_start_new =
   143e4:	429a      	cmp	r2, r3
   143e6:	bf38      	it	cc
   143e8:	461a      	movcc	r2, r3
		*ticks_active_to_start = _radio.ticks_active_to_start;
   143ea:	603b      	str	r3, [r7, #0]
		if ((*ticks_xtal_to_start) & ((u32_t)1 << 31)) {
   143ec:	6833      	ldr	r3, [r6, #0]
   143ee:	2b00      	cmp	r3, #0
   143f0:	db29      	blt.n	14446 <event_common_prepare+0x192>
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
   143f2:	b2a3      	uxth	r3, r4
   143f4:	b292      	uxth	r2, r2
		ticker_status =
   143f6:	f241 5116 	movw	r1, #5398	; 0x1516
   143fa:	9106      	str	r1, [sp, #24]
   143fc:	491a      	ldr	r1, [pc, #104]	; (14468 <event_common_prepare+0x1b4>)
   143fe:	9105      	str	r1, [sp, #20]
   14400:	2000      	movs	r0, #0
   14402:	9004      	str	r0, [sp, #16]
   14404:	9003      	str	r0, [sp, #12]
   14406:	9302      	str	r3, [sp, #8]
   14408:	9201      	str	r2, [sp, #4]
   1440a:	9200      	str	r2, [sp, #0]
   1440c:	462a      	mov	r2, r5
   1440e:	4601      	mov	r1, r0
   14410:	f7fb fecc 	bl	101ac <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   14414:	b108      	cbz	r0, 1441a <event_common_prepare+0x166>
   14416:	2802      	cmp	r0, #2
   14418:	d119      	bne.n	1444e <event_common_prepare+0x19a>
	packet_tx_enqueue(0xFF);
   1441a:	20ff      	movs	r0, #255	; 0xff
   1441c:	f7fd fab6 	bl	1198c <packet_tx_enqueue>
		s_mfy_xtal_stop_calc.param = (void *)(u32_t)ticker_id;
   14420:	4b15      	ldr	r3, [pc, #84]	; (14478 <event_common_prepare+0x1c4>)
   14422:	609d      	str	r5, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   14424:	2201      	movs	r2, #1
   14426:	4611      	mov	r1, r2
   14428:	2000      	movs	r0, #0
   1442a:	f7fa f861 	bl	e4f0 <mayfly_enqueue>
		LL_ASSERT(!retval);
   1442e:	b9a0      	cbnz	r0, 1445a <event_common_prepare+0x1a6>
}
   14430:	b00a      	add	sp, #40	; 0x28
   14432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		ticks_to_start = _ticks_active_to_start;
   14436:	4644      	mov	r4, r8
   14438:	e7ac      	b.n	14394 <event_common_prepare+0xe0>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1443a:	4040      	eors	r0, r0
   1443c:	f380 8811 	msr	BASEPRI, r0
   14440:	f04f 0004 	mov.w	r0, #4
   14444:	df02      	svc	2
			*ticks_xtal_to_start &= ~(((u32_t)1 << 31));
   14446:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   1444a:	6033      	str	r3, [r6, #0]
   1444c:	e7d1      	b.n	143f2 <event_common_prepare+0x13e>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1444e:	4040      	eors	r0, r0
   14450:	f380 8811 	msr	BASEPRI, r0
   14454:	f04f 0004 	mov.w	r0, #4
   14458:	df02      	svc	2
		LL_ASSERT(!retval);
   1445a:	4040      	eors	r0, r0
   1445c:	f380 8811 	msr	BASEPRI, r0
   14460:	f04f 0004 	mov.w	r0, #4
   14464:	df02      	svc	2
   14466:	bf00      	nop
   14468:	00010e65 	.word	0x00010e65
   1446c:	00011781 	.word	0x00011781
   14470:	0001175d 	.word	0x0001175d
   14474:	20000e84 	.word	0x20000e84
   14478:	2000bcb8 	.word	0x2000bcb8

0001447c <radio_event_adv_prepare>:
	LL_ASSERT(!_radio.ticker_id_prepare);
   1447c:	4b0d      	ldr	r3, [pc, #52]	; (144b4 <radio_event_adv_prepare+0x38>)
   1447e:	7b1b      	ldrb	r3, [r3, #12]
   14480:	b993      	cbnz	r3, 144a8 <radio_event_adv_prepare+0x2c>
{
   14482:	b510      	push	{r4, lr}
   14484:	b084      	sub	sp, #16
	_radio.ticker_id_prepare = RADIO_TICKER_ID_ADV;
   14486:	4a0b      	ldr	r2, [pc, #44]	; (144b4 <radio_event_adv_prepare+0x38>)
   14488:	2305      	movs	r3, #5
   1448a:	7313      	strb	r3, [r2, #12]
	event_common_prepare(ticks_at_expire, remainder,
   1448c:	2400      	movs	r4, #0
   1448e:	9403      	str	r4, [sp, #12]
   14490:	4c09      	ldr	r4, [pc, #36]	; (144b8 <radio_event_adv_prepare+0x3c>)
   14492:	9402      	str	r4, [sp, #8]
   14494:	9301      	str	r3, [sp, #4]
   14496:	69d3      	ldr	r3, [r2, #28]
   14498:	9300      	str	r3, [sp, #0]
   1449a:	f102 0318 	add.w	r3, r2, #24
   1449e:	3214      	adds	r2, #20
   144a0:	f7ff ff08 	bl	142b4 <event_common_prepare>
}
   144a4:	b004      	add	sp, #16
   144a6:	bd10      	pop	{r4, pc}
	LL_ASSERT(!_radio.ticker_id_prepare);
   144a8:	4040      	eors	r0, r0
   144aa:	f380 8811 	msr	BASEPRI, r0
   144ae:	f04f 0004 	mov.w	r0, #4
   144b2:	df02      	svc	2
   144b4:	20000e84 	.word	0x20000e84
   144b8:	00015d79 	.word	0x00015d79
   144bc:	00000000 	.word	0x00000000

000144c0 <event_connection_prepare>:
{
   144c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   144c4:	b08f      	sub	sp, #60	; 0x3c
	LL_ASSERT(!_radio.ticker_id_prepare);
   144c6:	4ccb      	ldr	r4, [pc, #812]	; (147f4 <event_connection_prepare+0x334>)
   144c8:	7b24      	ldrb	r4, [r4, #12]
   144ca:	2c00      	cmp	r4, #0
   144cc:	d135      	bne.n	1453a <event_connection_prepare+0x7a>
				   conn->handle;
   144ce:	8c1d      	ldrh	r5, [r3, #32]
	_radio.ticker_id_prepare = RADIO_TICKER_ID_FIRST_CONNECTION +
   144d0:	3507      	adds	r5, #7
   144d2:	b2ed      	uxtb	r5, r5
   144d4:	4cc7      	ldr	r4, [pc, #796]	; (147f4 <event_connection_prepare+0x334>)
   144d6:	7325      	strb	r5, [r4, #12]
	if (conn->role) {
   144d8:	f993 401d 	ldrsb.w	r4, [r3, #29]
   144dc:	2c00      	cmp	r4, #0
   144de:	db32      	blt.n	14546 <event_connection_prepare+0x86>
   144e0:	461c      	mov	r4, r3
   144e2:	910a      	str	r1, [sp, #40]	; 0x28
   144e4:	4606      	mov	r6, r0
	conn->latency_prepare += lazy;
   144e6:	8d1d      	ldrh	r5, [r3, #40]	; 0x28
   144e8:	4415      	add	r5, r2
   144ea:	b2ad      	uxth	r5, r5
   144ec:	851d      	strh	r5, [r3, #40]	; 0x28
	event_counter = conn->event_counter + conn->latency_prepare;
   144ee:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
   144f0:	441d      	add	r5, r3
   144f2:	b2ad      	uxth	r5, r5
	if (conn->llcp_ack == conn->llcp_req) {
   144f4:	f894 2075 	ldrb.w	r2, [r4, #117]	; 0x75
   144f8:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   144fc:	429a      	cmp	r2, r3
   144fe:	d02d      	beq.n	1455c <event_connection_prepare+0x9c>
	if (conn->llcp_ack != conn->llcp_req) {
   14500:	f894 2075 	ldrb.w	r2, [r4, #117]	; 0x75
   14504:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   14508:	429a      	cmp	r2, r3
   1450a:	f000 861a 	beq.w	15142 <event_connection_prepare+0xc82>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
   1450e:	2305      	movs	r3, #5
   14510:	2200      	movs	r2, #0
   14512:	4611      	mov	r1, r2
   14514:	4610      	mov	r0, r2
   14516:	f7fd f897 	bl	11648 <event_stop>
		switch (conn->llcp_type) {
   1451a:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
   1451e:	3b01      	subs	r3, #1
   14520:	2b07      	cmp	r3, #7
   14522:	f201 80d6 	bhi.w	156d2 <event_connection_prepare+0x1212>
   14526:	e8df f013 	tbh	[pc, r3, lsl #1]
   1452a:	029f      	.short	0x029f
   1452c:	05b1054e 	.word	0x05b1054e
   14530:	072706ee 	.word	0x072706ee
   14534:	07ac08d4 	.word	0x07ac08d4
   14538:	07c7      	.short	0x07c7
	LL_ASSERT(!_radio.ticker_id_prepare);
   1453a:	4040      	eors	r0, r0
   1453c:	f380 8811 	msr	BASEPRI, r0
   14540:	f04f 0004 	mov.w	r0, #4
   14544:	df02      	svc	2
		    conn->slave.window_widening_periodic_us * (lazy + 1);
   14546:	6d5c      	ldr	r4, [r3, #84]	; 0x54
   14548:	fb02 4404 	mla	r4, r2, r4, r4
		conn->slave.window_widening_prepare_us +=
   1454c:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
   1454e:	442c      	add	r4, r5
   14550:	65dc      	str	r4, [r3, #92]	; 0x5c
		    conn->slave.window_widening_max_us) {
   14552:	6d9d      	ldr	r5, [r3, #88]	; 0x58
		if (conn->slave.window_widening_prepare_us >
   14554:	42ac      	cmp	r4, r5
   14556:	d9c3      	bls.n	144e0 <event_connection_prepare+0x20>
			conn->slave.window_widening_prepare_us =
   14558:	65dd      	str	r5, [r3, #92]	; 0x5c
   1455a:	e7c1      	b.n	144e0 <event_connection_prepare+0x20>
		if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
   1455c:	f894 20c1 	ldrb.w	r2, [r4, #193]	; 0xc1
   14560:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
   14564:	429a      	cmp	r2, r3
   14566:	d00b      	beq.n	14580 <event_connection_prepare+0xc0>
			event_stop(0, 0, 0, (void *)STATE_ABORT);
   14568:	2305      	movs	r3, #5
   1456a:	2200      	movs	r2, #0
   1456c:	4611      	mov	r1, r2
   1456e:	4610      	mov	r0, r2
   14570:	f7fd f86a 	bl	11648 <event_stop>
	conn_upd = _radio.conn_upd;
   14574:	4b9f      	ldr	r3, [pc, #636]	; (147f4 <event_connection_prepare+0x334>)
   14576:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
	if (conn_upd && (conn_upd != conn)) {
   1457a:	b1fb      	cbz	r3, 145bc <event_connection_prepare+0xfc>
   1457c:	429c      	cmp	r4, r3
   1457e:	d01d      	beq.n	145bc <event_connection_prepare+0xfc>
		if (conn->llcp_phy.ack != conn->llcp_phy.req) {
   14580:	f894 20f5 	ldrb.w	r2, [r4, #245]	; 0xf5
   14584:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
   14588:	429a      	cmp	r2, r3
   1458a:	d0b9      	beq.n	14500 <event_connection_prepare+0x40>
			event_stop(0, 0, 0, (void *)STATE_ABORT);
   1458c:	2305      	movs	r3, #5
   1458e:	2200      	movs	r2, #0
   14590:	4611      	mov	r1, r2
   14592:	4610      	mov	r0, r2
   14594:	f7fd f858 	bl	11648 <event_stop>
	switch (conn->llcp_phy.state) {
   14598:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   1459c:	f003 0303 	and.w	r3, r3, #3
   145a0:	2b03      	cmp	r3, #3
   145a2:	f200 8257 	bhi.w	14a54 <event_connection_prepare+0x594>
   145a6:	a201      	add	r2, pc, #4	; (adr r2, 145ac <event_connection_prepare+0xec>)
   145a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   145ac:	000148a5 	.word	0x000148a5
   145b0:	00014501 	.word	0x00014501
   145b4:	00014501 	.word	0x00014501
   145b8:	0001491f 	.word	0x0001491f
	switch (conn->llcp_conn_param.state) {
   145bc:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
   145c0:	f003 0307 	and.w	r3, r3, #7
   145c4:	2b05      	cmp	r3, #5
   145c6:	f200 8167 	bhi.w	14898 <event_connection_prepare+0x3d8>
   145ca:	a201      	add	r2, pc, #4	; (adr r2, 145d0 <event_connection_prepare+0x110>)
   145cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   145d0:	000145e9 	.word	0x000145e9
   145d4:	000146b3 	.word	0x000146b3
   145d8:	00014801 	.word	0x00014801
   145dc:	00014581 	.word	0x00014581
   145e0:	00014581 	.word	0x00014581
   145e4:	00014581 	.word	0x00014581
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   145e8:	4883      	ldr	r0, [pc, #524]	; (147f8 <event_connection_prepare+0x338>)
   145ea:	f7fa f8c2 	bl	e772 <mem_acquire>
	if (!node_tx) {
   145ee:	4680      	mov	r8, r0
   145f0:	2800      	cmp	r0, #0
   145f2:	d0c5      	beq.n	14580 <event_connection_prepare+0xc0>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
   145f4:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
   145f8:	2204      	movs	r2, #4
   145fa:	f362 0302 	bfi	r3, r2, #0, #3
   145fe:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   14602:	7903      	ldrb	r3, [r0, #4]
   14604:	f043 0303 	orr.w	r3, r3, #3
   14608:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   1460a:	2318      	movs	r3, #24
   1460c:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->payload.llctrl.opcode =
   1460e:	230f      	movs	r3, #15
   14610:	71c3      	strb	r3, [r0, #7]
	p->interval_min = conn->llcp_conn_param.interval;
   14612:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
   14616:	8103      	strh	r3, [r0, #8]
	p->interval_max = conn->llcp_conn_param.interval;
   14618:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
   1461c:	8143      	strh	r3, [r0, #10]
	p->latency = conn->llcp_conn_param.latency;
   1461e:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
   14622:	8183      	strh	r3, [r0, #12]
	p->timeout = conn->llcp_conn_param.timeout;
   14624:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
   14628:	81c3      	strh	r3, [r0, #14]
	p->preferred_periodicity = 0;
   1462a:	2300      	movs	r3, #0
   1462c:	7403      	strb	r3, [r0, #16]
	p->reference_conn_event_count = event_counter;
   1462e:	f8a0 5011 	strh.w	r5, [r0, #17]
	p->offset0 = 0x0000;
   14632:	74c3      	strb	r3, [r0, #19]
   14634:	7503      	strb	r3, [r0, #20]
	p->offset1 = 0xffff;
   14636:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1463a:	7543      	strb	r3, [r0, #21]
   1463c:	7583      	strb	r3, [r0, #22]
	p->offset2 = 0xffff;
   1463e:	75c3      	strb	r3, [r0, #23]
   14640:	7603      	strb	r3, [r0, #24]
	p->offset3 = 0xffff;
   14642:	7643      	strb	r3, [r0, #25]
   14644:	7683      	strb	r3, [r0, #26]
	p->offset4 = 0xffff;
   14646:	76c3      	strb	r3, [r0, #27]
   14648:	7703      	strb	r3, [r0, #28]
	p->offset5 = 0xffff;
   1464a:	7743      	strb	r3, [r0, #29]
   1464c:	7783      	strb	r3, [r0, #30]
	ctrl_tx_enqueue(conn, node_tx);
   1464e:	4601      	mov	r1, r0
   14650:	4620      	mov	r0, r4
   14652:	f7fc fb1f 	bl	10c94 <ctrl_tx_enqueue>
	_radio.conn_upd = conn;
   14656:	4b67      	ldr	r3, [pc, #412]	; (147f4 <event_connection_prepare+0x334>)
   14658:	f8c3 4184 	str.w	r4, [r3, #388]	; 0x184
	conn->procedure_expire = conn->procedure_reload;
   1465c:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
   14660:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
		conn->llcp_conn_param.ticks_ref = ticks_at_expire;
   14664:	f8c4 60e0 	str.w	r6, [r4, #224]	; 0xe0
		if (conn->hdr.ticks_xtal_to_start & ((u32_t)1 << 31)) {
   14668:	6823      	ldr	r3, [r4, #0]
   1466a:	2b00      	cmp	r3, #0
   1466c:	db13      	blt.n	14696 <event_connection_prepare+0x1d6>
		conn->llcp_conn_param.pdu_win_offset0 = (u16_t *)&p->offset0;
   1466e:	f108 0313 	add.w	r3, r8, #19
   14672:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
		s_mfy_sched_offset.param = (void *)conn;
   14676:	4b61      	ldr	r3, [pc, #388]	; (147fc <event_connection_prepare+0x33c>)
   14678:	609c      	str	r4, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   1467a:	2201      	movs	r2, #1
   1467c:	4611      	mov	r1, r2
   1467e:	2000      	movs	r0, #0
   14680:	f7f9 ff36 	bl	e4f0 <mayfly_enqueue>
		LL_ASSERT(!retval);
   14684:	2800      	cmp	r0, #0
   14686:	f43f af7b 	beq.w	14580 <event_connection_prepare+0xc0>
   1468a:	4040      	eors	r0, r0
   1468c:	f380 8811 	msr	BASEPRI, r0
   14690:	f04f 0004 	mov.w	r0, #4
   14694:	df02      	svc	2
				conn->hdr.ticks_preempt_to_start;
   14696:	68a1      	ldr	r1, [r4, #8]
				conn->hdr.ticks_active_to_start :
   14698:	6862      	ldr	r2, [r4, #4]
				((conn->hdr.ticks_xtal_to_start &
   1469a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
				  (~((u32_t)1 << 31))) -
   1469e:	4291      	cmp	r1, r2
   146a0:	bf2c      	ite	cs
   146a2:	ebc3 0301 	rsbcs	r3, r3, r1
   146a6:	ebc3 0302 	rsbcc	r3, r3, r2
			conn->llcp_conn_param.ticks_ref -=
   146aa:	4433      	add	r3, r6
   146ac:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
   146b0:	e7dd      	b.n	1466e <event_connection_prepare+0x1ae>
	if (conn->llcp_conn_param.status) {
   146b2:	f894 30c3 	ldrb.w	r3, [r4, #195]	; 0xc3
   146b6:	bbb3      	cbnz	r3, 14726 <event_connection_prepare+0x266>
	if (!conn->role) {
   146b8:	f994 301d 	ldrsb.w	r3, [r4, #29]
   146bc:	2b00      	cmp	r3, #0
   146be:	db52      	blt.n	14766 <event_connection_prepare+0x2a6>
		if (conn->llcp_req != conn->llcp_ack) {
   146c0:	f894 2074 	ldrb.w	r2, [r4, #116]	; 0x74
   146c4:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
   146c8:	429a      	cmp	r2, r3
   146ca:	f47f af59 	bne.w	14580 <event_connection_prepare+0xc0>
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   146ce:	f894 20c2 	ldrb.w	r2, [r4, #194]	; 0xc2
   146d2:	2105      	movs	r1, #5
   146d4:	f361 0202 	bfi	r2, r1, #0, #3
   146d8:	f884 20c2 	strb.w	r2, [r4, #194]	; 0xc2
		conn->llcp.conn_upd.win_size = 1;
   146dc:	2001      	movs	r0, #1
   146de:	f884 0088 	strb.w	r0, [r4, #136]	; 0x88
		conn->llcp.conn_upd.win_offset_us = 0;
   146e2:	2100      	movs	r1, #0
   146e4:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
		conn->llcp.conn_upd.interval = conn->llcp_conn_param.interval;
   146e8:	f8b4 10c4 	ldrh.w	r1, [r4, #196]	; 0xc4
   146ec:	f8a4 107a 	strh.w	r1, [r4, #122]	; 0x7a
		conn->llcp.conn_upd.latency = conn->llcp_conn_param.latency;
   146f0:	f8b4 10c6 	ldrh.w	r1, [r4, #198]	; 0xc6
   146f4:	f8a4 107c 	strh.w	r1, [r4, #124]	; 0x7c
		conn->llcp.conn_upd.timeout = conn->llcp_conn_param.timeout;
   146f8:	f8b4 10c8 	ldrh.w	r1, [r4, #200]	; 0xc8
   146fc:	f8a4 107e 	strh.w	r1, [r4, #126]	; 0x7e
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_SELECT;
   14700:	f894 1078 	ldrb.w	r1, [r4, #120]	; 0x78
   14704:	f04f 0e02 	mov.w	lr, #2
   14708:	f36e 0101 	bfi	r1, lr, #0, #2
		conn->llcp.conn_upd.is_internal = !conn->llcp_conn_param.cmd;
   1470c:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   14710:	4042      	eors	r2, r0
   14712:	f362 0182 	bfi	r1, r2, #2, #1
   14716:	f884 1078 	strb.w	r1, [r4, #120]	; 0x78
		conn->llcp_type = LLCP_CONN_UPD;
   1471a:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
		conn->llcp_ack--;
   1471e:	3b01      	subs	r3, #1
   14720:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
   14724:	e72c      	b.n	14580 <event_connection_prepare+0xc0>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   14726:	4834      	ldr	r0, [pc, #208]	; (147f8 <event_connection_prepare+0x338>)
   14728:	f7fa f823 	bl	e772 <mem_acquire>
		if (!node_tx) {
   1472c:	4601      	mov	r1, r0
   1472e:	2800      	cmp	r0, #0
   14730:	f43f af26 	beq.w	14580 <event_connection_prepare+0xc0>
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   14734:	7903      	ldrb	r3, [r0, #4]
   14736:	f043 0303 	orr.w	r3, r3, #3
   1473a:	7103      	strb	r3, [r0, #4]
		pdu->payload.llctrl.opcode =
   1473c:	2311      	movs	r3, #17
   1473e:	71c3      	strb	r3, [r0, #7]
		pdu->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   14740:	2303      	movs	r3, #3
   14742:	7143      	strb	r3, [r0, #5]
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   14744:	230f      	movs	r3, #15
   14746:	7203      	strb	r3, [r0, #8]
		p->error_code = conn->llcp_conn_param.status;
   14748:	f894 30c3 	ldrb.w	r3, [r4, #195]	; 0xc3
   1474c:	7243      	strb	r3, [r0, #9]
		ctrl_tx_enqueue(conn, node_tx);
   1474e:	4620      	mov	r0, r4
   14750:	f7fc faa0 	bl	10c94 <ctrl_tx_enqueue>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   14754:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
   14758:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
		_radio.conn_upd = NULL;
   1475c:	2200      	movs	r2, #0
   1475e:	4b25      	ldr	r3, [pc, #148]	; (147f4 <event_connection_prepare+0x334>)
   14760:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   14764:	e70c      	b.n	14580 <event_connection_prepare+0xc0>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   14766:	4824      	ldr	r0, [pc, #144]	; (147f8 <event_connection_prepare+0x338>)
   14768:	f7fa f803 	bl	e772 <mem_acquire>
	if (!node_tx) {
   1476c:	4601      	mov	r1, r0
   1476e:	2800      	cmp	r0, #0
   14770:	f43f af06 	beq.w	14580 <event_connection_prepare+0xc0>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   14774:	7903      	ldrb	r3, [r0, #4]
   14776:	f043 0303 	orr.w	r3, r3, #3
   1477a:	7103      	strb	r3, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   1477c:	2318      	movs	r3, #24
   1477e:	7143      	strb	r3, [r0, #5]
	pdu->payload.llctrl.opcode =
   14780:	2310      	movs	r3, #16
   14782:	71c3      	strb	r3, [r0, #7]
	p->interval_min = conn->llcp_conn_param.interval;
   14784:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
   14788:	8103      	strh	r3, [r0, #8]
	p->interval_max = conn->llcp_conn_param.interval;
   1478a:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
   1478e:	8143      	strh	r3, [r0, #10]
	p->latency = conn->llcp_conn_param.latency;
   14790:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
   14794:	8183      	strh	r3, [r0, #12]
	p->timeout = conn->llcp_conn_param.timeout;
   14796:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
   1479a:	81c3      	strh	r3, [r0, #14]
	p->preferred_periodicity = conn->llcp_conn_param.preferred_periodicity;
   1479c:	f894 30ca 	ldrb.w	r3, [r4, #202]	; 0xca
   147a0:	7403      	strb	r3, [r0, #16]
	p->reference_conn_event_count =
   147a2:	f8b4 30cc 	ldrh.w	r3, [r4, #204]	; 0xcc
   147a6:	f8a0 3011 	strh.w	r3, [r0, #17]
	p->offset0 = conn->llcp_conn_param.offset0;
   147aa:	f8b4 30ce 	ldrh.w	r3, [r4, #206]	; 0xce
   147ae:	f8a0 3013 	strh.w	r3, [r0, #19]
	p->offset1 = conn->llcp_conn_param.offset1;
   147b2:	f8b4 30d0 	ldrh.w	r3, [r4, #208]	; 0xd0
   147b6:	f8a0 3015 	strh.w	r3, [r0, #21]
	p->offset2 = conn->llcp_conn_param.offset2;
   147ba:	f8b4 30d2 	ldrh.w	r3, [r4, #210]	; 0xd2
   147be:	f8a0 3017 	strh.w	r3, [r0, #23]
	p->offset3 = conn->llcp_conn_param.offset3;
   147c2:	f8b4 30d4 	ldrh.w	r3, [r4, #212]	; 0xd4
   147c6:	f8a0 3019 	strh.w	r3, [r0, #25]
	p->offset4 = conn->llcp_conn_param.offset4;
   147ca:	f8b4 30d6 	ldrh.w	r3, [r4, #214]	; 0xd6
   147ce:	f8a0 301b 	strh.w	r3, [r0, #27]
	p->offset5 = conn->llcp_conn_param.offset5;
   147d2:	f8b4 30d8 	ldrh.w	r3, [r4, #216]	; 0xd8
   147d6:	f8a0 301d 	strh.w	r3, [r0, #29]
	ctrl_tx_enqueue(conn, node_tx);
   147da:	4620      	mov	r0, r4
   147dc:	f7fc fa5a 	bl	10c94 <ctrl_tx_enqueue>
	conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   147e0:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
   147e4:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
	_radio.conn_upd = NULL;
   147e8:	2200      	movs	r2, #0
   147ea:	4b02      	ldr	r3, [pc, #8]	; (147f4 <event_connection_prepare+0x334>)
   147ec:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   147f0:	e6c6      	b.n	14580 <event_connection_prepare+0xc0>
   147f2:	bf00      	nop
   147f4:	20000e84 	.word	0x20000e84
   147f8:	20000fdc 	.word	0x20000fdc
   147fc:	2000bc48 	.word	0x2000bc48
	if (conn->pause_tx) {
   14800:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
   14804:	f013 0f08 	tst.w	r3, #8
   14808:	f47f aeba 	bne.w	14580 <event_connection_prepare+0xc0>
	if (_radio.packet_rx_acquire >=
   1480c:	4b94      	ldr	r3, [pc, #592]	; (14a60 <event_connection_prepare+0x5a0>)
   1480e:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   14812:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   14816:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   14818:	429a      	cmp	r2, r3
   1481a:	d331      	bcc.n	14880 <event_connection_prepare+0x3c0>
			_radio.packet_rx_last);
   1481c:	4b90      	ldr	r3, [pc, #576]	; (14a60 <event_connection_prepare+0x5a0>)
   1481e:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   14822:	1ad3      	subs	r3, r2, r3
   14824:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   14826:	2b01      	cmp	r3, #1
   14828:	d934      	bls.n	14894 <event_connection_prepare+0x3d4>
	return _radio.packet_rx[_radio.packet_rx_last];
   1482a:	4b8d      	ldr	r3, [pc, #564]	; (14a60 <event_connection_prepare+0x5a0>)
   1482c:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   14830:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   14834:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	if (!node_rx) {
   14838:	2b00      	cmp	r3, #0
   1483a:	f43f aea1 	beq.w	14580 <event_connection_prepare+0xc0>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
   1483e:	f894 20c2 	ldrb.w	r2, [r4, #194]	; 0xc2
   14842:	2103      	movs	r1, #3
   14844:	f361 0202 	bfi	r2, r1, #0, #3
   14848:	f884 20c2 	strb.w	r2, [r4, #194]	; 0xc2
	node_rx->hdr.handle = conn->handle;
   1484c:	8c22      	ldrh	r2, [r4, #32]
   1484e:	80da      	strh	r2, [r3, #6]
	node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   14850:	2201      	movs	r2, #1
   14852:	711a      	strb	r2, [r3, #4]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   14854:	7a1a      	ldrb	r2, [r3, #8]
   14856:	430a      	orrs	r2, r1
   14858:	721a      	strb	r2, [r3, #8]
	pdu->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   1485a:	2218      	movs	r2, #24
   1485c:	725a      	strb	r2, [r3, #9]
	pdu->payload.llctrl.opcode =
   1485e:	220f      	movs	r2, #15
   14860:	72da      	strb	r2, [r3, #11]
	p->interval_min = conn->llcp_conn_param.interval;
   14862:	f8b4 20c4 	ldrh.w	r2, [r4, #196]	; 0xc4
   14866:	819a      	strh	r2, [r3, #12]
	p->interval_max = conn->llcp_conn_param.interval;
   14868:	f8b4 20c4 	ldrh.w	r2, [r4, #196]	; 0xc4
   1486c:	81da      	strh	r2, [r3, #14]
	p->latency = conn->llcp_conn_param.latency;
   1486e:	f8b4 20c6 	ldrh.w	r2, [r4, #198]	; 0xc6
   14872:	821a      	strh	r2, [r3, #16]
	p->timeout = conn->llcp_conn_param.timeout;
   14874:	f8b4 20c8 	ldrh.w	r2, [r4, #200]	; 0xc8
   14878:	825a      	strh	r2, [r3, #18]
	packet_rx_enqueue();
   1487a:	f7fe ffbf 	bl	137fc <packet_rx_enqueue>
   1487e:	e67f      	b.n	14580 <event_connection_prepare+0xc0>
		return (_radio.packet_rx_count -
   14880:	4977      	ldr	r1, [pc, #476]	; (14a60 <event_connection_prepare+0x5a0>)
   14882:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
			_radio.packet_rx_last +
   14886:	f891 113d 	ldrb.w	r1, [r1, #317]	; 0x13d
		return (_radio.packet_rx_count -
   1488a:	1a5b      	subs	r3, r3, r1
			_radio.packet_rx_last +
   1488c:	fa52 f383 	uxtab	r3, r2, r3
   14890:	b2db      	uxtb	r3, r3
   14892:	e7c8      	b.n	14826 <event_connection_prepare+0x366>
		return 0;
   14894:	2300      	movs	r3, #0
   14896:	e7cf      	b.n	14838 <event_connection_prepare+0x378>
		LL_ASSERT(0);
   14898:	4040      	eors	r0, r0
   1489a:	f380 8811 	msr	BASEPRI, r0
   1489e:	f04f 0004 	mov.w	r0, #4
   148a2:	df02      	svc	2
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   148a4:	486f      	ldr	r0, [pc, #444]	; (14a64 <event_connection_prepare+0x5a4>)
   148a6:	f7f9 ff64 	bl	e772 <mem_acquire>
		if (!node_tx) {
   148aa:	4601      	mov	r1, r0
   148ac:	2800      	cmp	r0, #0
   148ae:	f43f ae27 	beq.w	14500 <event_connection_prepare+0x40>
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
   148b2:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   148b6:	2201      	movs	r2, #1
   148b8:	f362 0301 	bfi	r3, r2, #0, #2
   148bc:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
		conn->phy_pref_tx = conn->llcp_phy.tx;
   148c0:	b2db      	uxtb	r3, r3
   148c2:	f3c3 0082 	ubfx	r0, r3, #2, #3
   148c6:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
   148ca:	f360 0202 	bfi	r2, r0, #0, #3
		conn->phy_pref_rx = conn->llcp_phy.rx;
   148ce:	095b      	lsrs	r3, r3, #5
   148d0:	f894 0039 	ldrb.w	r0, [r4, #57]	; 0x39
   148d4:	f363 00c5 	bfi	r0, r3, #3, #3
   148d8:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
		conn->phy_pref_flags = conn->llcp_phy.flags;
   148dc:	f894 00f7 	ldrb.w	r0, [r4, #247]	; 0xf7
   148e0:	4613      	mov	r3, r2
   148e2:	f360 1386 	bfi	r3, r0, #6, #1
   148e6:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   148ea:	790b      	ldrb	r3, [r1, #4]
   148ec:	f043 0303 	orr.w	r3, r3, #3
   148f0:	710b      	strb	r3, [r1, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   148f2:	2303      	movs	r3, #3
   148f4:	714b      	strb	r3, [r1, #5]
		pdu_ctrl_tx->payload.llctrl.opcode =
   148f6:	2316      	movs	r3, #22
   148f8:	71cb      	strb	r3, [r1, #7]
		pr->tx_phys = conn->llcp_phy.tx;
   148fa:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   148fe:	f3c3 0382 	ubfx	r3, r3, #2, #3
   14902:	720b      	strb	r3, [r1, #8]
		pr->rx_phys = conn->llcp_phy.rx;
   14904:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   14908:	f3c3 1342 	ubfx	r3, r3, #5, #3
   1490c:	724b      	strb	r3, [r1, #9]
		ctrl_tx_enqueue(conn, node_tx);
   1490e:	4620      	mov	r0, r4
   14910:	f7fc f9c0 	bl	10c94 <ctrl_tx_enqueue>
		conn->procedure_expire = conn->procedure_reload;
   14914:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
   14918:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
   1491c:	e5f0      	b.n	14500 <event_connection_prepare+0x40>
		conn->llcp_phy.ack = conn->llcp_phy.req;
   1491e:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
   14922:	f884 30f5 	strb.w	r3, [r4, #245]	; 0xf5
		if (conn->llcp_phy.tx & BIT(1)) {
   14926:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   1492a:	f3c3 0382 	ubfx	r3, r3, #2, #3
   1492e:	f013 0f02 	tst.w	r3, #2
   14932:	d047      	beq.n	149c4 <event_connection_prepare+0x504>
			conn->llcp_phy.tx = BIT(1);
   14934:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   14938:	2202      	movs	r2, #2
   1493a:	f362 0384 	bfi	r3, r2, #2, #3
   1493e:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
		if (conn->llcp_phy.rx & BIT(1)) {
   14942:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   14946:	095b      	lsrs	r3, r3, #5
   14948:	f013 0f02 	tst.w	r3, #2
   1494c:	d057      	beq.n	149fe <event_connection_prepare+0x53e>
			conn->llcp_phy.rx = BIT(1);
   1494e:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   14952:	2202      	movs	r2, #2
   14954:	f362 1347 	bfi	r3, r2, #5, #3
   14958:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
		if (conn->llcp_phy.tx != conn->phy_tx) {
   1495c:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   14960:	f3c3 0382 	ubfx	r3, r3, #2, #3
   14964:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
   14968:	f3c2 02c2 	ubfx	r2, r2, #3, #3
   1496c:	4293      	cmp	r3, r2
   1496e:	d063      	beq.n	14a38 <event_connection_prepare+0x578>
			conn->llcp.phy_upd_ind.tx = conn->llcp_phy.tx;
   14970:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
   14974:	f363 0284 	bfi	r2, r3, #2, #3
   14978:	f884 2078 	strb.w	r2, [r4, #120]	; 0x78
		if (conn->llcp_phy.rx != conn->phy_rx) {
   1497c:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   14980:	095b      	lsrs	r3, r3, #5
   14982:	f894 203a 	ldrb.w	r2, [r4, #58]	; 0x3a
   14986:	f002 0207 	and.w	r2, r2, #7
   1498a:	4293      	cmp	r3, r2
   1498c:	d05b      	beq.n	14a46 <event_connection_prepare+0x586>
			conn->llcp.phy_upd_ind.rx = conn->llcp_phy.rx;
   1498e:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
   14992:	f363 1247 	bfi	r2, r3, #5, #3
   14996:	f884 2078 	strb.w	r2, [r4, #120]	; 0x78
		conn->llcp.phy_upd_ind.initiate = 1;
   1499a:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   1499e:	f894 20f7 	ldrb.w	r2, [r4, #247]	; 0xf7
   149a2:	f3c2 0240 	ubfx	r2, r2, #1, #1
   149a6:	f043 0301 	orr.w	r3, r3, #1
   149aa:	f362 0341 	bfi	r3, r2, #1, #1
   149ae:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		conn->llcp_type = LLCP_PHY_UPD;
   149b2:	2308      	movs	r3, #8
   149b4:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
		conn->llcp_ack--;
   149b8:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
   149bc:	3b01      	subs	r3, #1
   149be:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
   149c2:	e59d      	b.n	14500 <event_connection_prepare+0x40>
		} else if (conn->llcp_phy.tx & BIT(0)) {
   149c4:	f013 0f01 	tst.w	r3, #1
   149c8:	d007      	beq.n	149da <event_connection_prepare+0x51a>
			conn->llcp_phy.tx = BIT(0);
   149ca:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   149ce:	2201      	movs	r2, #1
   149d0:	f362 0384 	bfi	r3, r2, #2, #3
   149d4:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
   149d8:	e7b3      	b.n	14942 <event_connection_prepare+0x482>
		} else if (conn->llcp_phy.tx & BIT(2)) {
   149da:	f013 0f04 	tst.w	r3, #4
   149de:	d007      	beq.n	149f0 <event_connection_prepare+0x530>
			conn->llcp_phy.tx = BIT(2);
   149e0:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   149e4:	2204      	movs	r2, #4
   149e6:	f362 0384 	bfi	r3, r2, #2, #3
   149ea:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
   149ee:	e7a8      	b.n	14942 <event_connection_prepare+0x482>
			conn->llcp_phy.tx = 0;
   149f0:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   149f4:	f36f 0384 	bfc	r3, #2, #3
   149f8:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
   149fc:	e7a1      	b.n	14942 <event_connection_prepare+0x482>
		} else if (conn->llcp_phy.rx & BIT(0)) {
   149fe:	f013 0f01 	tst.w	r3, #1
   14a02:	d007      	beq.n	14a14 <event_connection_prepare+0x554>
			conn->llcp_phy.rx = BIT(0);
   14a04:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   14a08:	2201      	movs	r2, #1
   14a0a:	f362 1347 	bfi	r3, r2, #5, #3
   14a0e:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
   14a12:	e7a3      	b.n	1495c <event_connection_prepare+0x49c>
		} else if (conn->llcp_phy.rx & BIT(2)) {
   14a14:	f013 0f04 	tst.w	r3, #4
   14a18:	d007      	beq.n	14a2a <event_connection_prepare+0x56a>
			conn->llcp_phy.rx = BIT(2);
   14a1a:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   14a1e:	2204      	movs	r2, #4
   14a20:	f362 1347 	bfi	r3, r2, #5, #3
   14a24:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
   14a28:	e798      	b.n	1495c <event_connection_prepare+0x49c>
			conn->llcp_phy.rx = 0;
   14a2a:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   14a2e:	f36f 1347 	bfc	r3, #5, #3
   14a32:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
   14a36:	e791      	b.n	1495c <event_connection_prepare+0x49c>
			conn->llcp.phy_upd_ind.tx = 0;
   14a38:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   14a3c:	f36f 0384 	bfc	r3, #2, #3
   14a40:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
   14a44:	e79a      	b.n	1497c <event_connection_prepare+0x4bc>
			conn->llcp.phy_upd_ind.rx = 0;
   14a46:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   14a4a:	f36f 1347 	bfc	r3, #5, #3
   14a4e:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
   14a52:	e7a2      	b.n	1499a <event_connection_prepare+0x4da>
		LL_ASSERT(0);
   14a54:	4040      	eors	r0, r0
   14a56:	f380 8811 	msr	BASEPRI, r0
   14a5a:	f04f 0004 	mov.w	r0, #4
   14a5e:	df02      	svc	2
   14a60:	20000e84 	.word	0x20000e84
   14a64:	20000fdc 	.word	0x20000fdc
	conn_upd = _radio.conn_upd;
   14a68:	4bb7      	ldr	r3, [pc, #732]	; (14d48 <event_connection_prepare+0x888>)
   14a6a:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
	if (!conn_upd) {
   14a6e:	2b00      	cmp	r3, #0
   14a70:	f000 814b 	beq.w	14d0a <event_connection_prepare+0x84a>
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
   14a74:	f8b4 8080 	ldrh.w	r8, [r4, #128]	; 0x80
   14a78:	eba5 0808 	sub.w	r8, r5, r8
   14a7c:	fa1f f888 	uxth.w	r8, r8
	if (conn->llcp.conn_upd.state != LLCP_CUI_STATE_INPROG) {
   14a80:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   14a84:	f013 0f03 	tst.w	r3, #3
   14a88:	f040 8143 	bne.w	14d12 <event_connection_prepare+0x852>
	} else if (instant_latency <= 0x7FFF) {
   14a8c:	f418 4f00 	tst.w	r8, #32768	; 0x8000
   14a90:	f040 8296 	bne.w	14fc0 <event_connection_prepare+0xb00>
		conn->llcp_ack = conn->llcp_req;
   14a94:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   14a98:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   14a9c:	f894 20c0 	ldrb.w	r2, [r4, #192]	; 0xc0
   14aa0:	f894 30c1 	ldrb.w	r3, [r4, #193]	; 0xc1
   14aa4:	429a      	cmp	r2, r3
   14aa6:	d006      	beq.n	14ab6 <event_connection_prepare+0x5f6>
		    (conn->llcp_conn_param.state == LLCP_CPR_STATE_UPD)) {
   14aa8:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
   14aac:	f003 0307 	and.w	r3, r3, #7
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   14ab0:	2b05      	cmp	r3, #5
   14ab2:	f000 81bb 	beq.w	14e2c <event_connection_prepare+0x96c>
		_radio.ticker_id_prepare = 0;
   14ab6:	4ba4      	ldr	r3, [pc, #656]	; (14d48 <event_connection_prepare+0x888>)
   14ab8:	2200      	movs	r2, #0
   14aba:	731a      	strb	r2, [r3, #12]
		if (_radio.conn_upd == conn) {
   14abc:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
   14ac0:	429c      	cmp	r4, r3
   14ac2:	f000 81b9 	beq.w	14e38 <event_connection_prepare+0x978>
		if ((conn->llcp.conn_upd.interval !=
   14ac6:	f8b4 207a 	ldrh.w	r2, [r4, #122]	; 0x7a
		     conn->conn_interval) ||
   14aca:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
		if ((conn->llcp.conn_upd.interval !=
   14acc:	429a      	cmp	r2, r3
   14ace:	f000 81b7 	beq.w	14e40 <event_connection_prepare+0x980>
	if (_radio.packet_rx_acquire >=
   14ad2:	4b9d      	ldr	r3, [pc, #628]	; (14d48 <event_connection_prepare+0x888>)
   14ad4:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   14ad8:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   14adc:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   14ade:	429a      	cmp	r2, r3
   14ae0:	f0c0 81c7 	bcc.w	14e72 <event_connection_prepare+0x9b2>
			_radio.packet_rx_last);
   14ae4:	4b98      	ldr	r3, [pc, #608]	; (14d48 <event_connection_prepare+0x888>)
   14ae6:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   14aea:	1ad3      	subs	r3, r2, r3
   14aec:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   14aee:	2b01      	cmp	r3, #1
   14af0:	f240 81c9 	bls.w	14e86 <event_connection_prepare+0x9c6>
	return _radio.packet_rx[_radio.packet_rx_last];
   14af4:	4b94      	ldr	r3, [pc, #592]	; (14d48 <event_connection_prepare+0x888>)
   14af6:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   14afa:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   14afe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
			LL_ASSERT(radio_pdu_node_rx);
   14b02:	2b00      	cmp	r3, #0
   14b04:	f000 81c1 	beq.w	14e8a <event_connection_prepare+0x9ca>
			radio_pdu_node_rx->hdr.handle = conn->handle;
   14b08:	8c22      	ldrh	r2, [r4, #32]
   14b0a:	80da      	strh	r2, [r3, #6]
			radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   14b0c:	2208      	movs	r2, #8
   14b0e:	711a      	strb	r2, [r3, #4]
			radio_le_conn_update_cmplt->status = 0x00;
   14b10:	2200      	movs	r2, #0
   14b12:	72da      	strb	r2, [r3, #11]
			radio_le_conn_update_cmplt->interval =
   14b14:	f8b4 207a 	ldrh.w	r2, [r4, #122]	; 0x7a
   14b18:	819a      	strh	r2, [r3, #12]
			radio_le_conn_update_cmplt->latency =
   14b1a:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
   14b1e:	81da      	strh	r2, [r3, #14]
			radio_le_conn_update_cmplt->timeout =
   14b20:	f8b4 207e 	ldrh.w	r2, [r4, #126]	; 0x7e
   14b24:	821a      	strh	r2, [r3, #16]
			packet_rx_enqueue();
   14b26:	f7fe fe69 	bl	137fc <packet_rx_enqueue>
		if (conn->hdr.ticks_xtal_to_start & ((u32_t)1 << 31)) {
   14b2a:	6823      	ldr	r3, [r4, #0]
   14b2c:	2b00      	cmp	r3, #0
   14b2e:	f2c0 81b2 	blt.w	14e96 <event_connection_prepare+0x9d6>
   14b32:	46b1      	mov	r9, r6
		conn_interval_old = instant_latency * conn->conn_interval;
   14b34:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   14b36:	fb18 f303 	smulbb	r3, r8, r3
   14b3a:	b29b      	uxth	r3, r3
			conn->llcp.conn_upd.interval;
   14b3c:	f8b4 a07a 	ldrh.w	sl, [r4, #122]	; 0x7a
		latency = conn_interval_old /
   14b40:	fbb3 fbfa 	udiv	fp, r3, sl
		conn_interval_new = latency *
   14b44:	fb1a f00b 	smulbb	r0, sl, fp
   14b48:	b280      	uxth	r0, r0
		if (conn_interval_new > conn_interval_old) {
   14b4a:	4283      	cmp	r3, r0
   14b4c:	f080 81b1 	bcs.w	14eb2 <event_connection_prepare+0x9f2>
				TICKER_US_TO_TICKS((conn_interval_new -
   14b50:	1ac3      	subs	r3, r0, r3
   14b52:	17d9      	asrs	r1, r3, #31
   14b54:	487d      	ldr	r0, [pc, #500]	; (14d4c <event_connection_prepare+0x88c>)
   14b56:	f240 1223 	movw	r2, #291	; 0x123
   14b5a:	fb02 f203 	mul.w	r2, r2, r3
   14b5e:	fb00 2201 	mla	r2, r0, r1, r2
   14b62:	fba3 0100 	umull	r0, r1, r3, r0
   14b66:	4411      	add	r1, r2
   14b68:	a375      	add	r3, pc, #468	; (adr r3, 14d40 <event_connection_prepare+0x880>)
   14b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
   14b6e:	f7ec fac5 	bl	10fc <__aeabi_uldivmod>
   14b72:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticks_at_expire +=
   14b76:	eb00 0309 	add.w	r3, r0, r9
   14b7a:	930b      	str	r3, [sp, #44]	; 0x2c
		conn->latency_prepare -= (instant_latency - latency);
   14b7c:	ebab 0308 	sub.w	r3, fp, r8
   14b80:	8d22      	ldrh	r2, [r4, #40]	; 0x28
   14b82:	fa12 f383 	uxtah	r3, r2, r3
   14b86:	8523      	strh	r3, [r4, #40]	; 0x28
			conn->hdr.ticks_active_to_start;
   14b88:	6862      	ldr	r2, [r4, #4]
			conn->hdr.ticks_xtal_to_start :
   14b8a:	6823      	ldr	r3, [r4, #0]
		ticks_slot_offset =
   14b8c:	429a      	cmp	r2, r3
   14b8e:	bf38      	it	cc
   14b90:	461a      	movcc	r2, r3
   14b92:	920c      	str	r2, [sp, #48]	; 0x30
		conn_interval_us = conn->llcp.conn_upd.interval * 1250;
   14b94:	f240 49e2 	movw	r9, #1250	; 0x4e2
   14b98:	fb09 f90a 	mul.w	r9, r9, sl
		if (conn->role) {
   14b9c:	f994 301d 	ldrsb.w	r3, [r4, #29]
   14ba0:	2b00      	cmp	r3, #0
   14ba2:	f2c0 819d 	blt.w	14ee0 <event_connection_prepare+0xa20>
				TICKER_US_TO_TICKS(conn->llcp.conn_upd.win_offset_us);
   14ba6:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
   14baa:	a365      	add	r3, pc, #404	; (adr r3, 14d40 <event_connection_prepare+0x880>)
   14bac:	e9d3 2300 	ldrd	r2, r3, [r3]
   14bb0:	4967      	ldr	r1, [pc, #412]	; (14d50 <event_connection_prepare+0x890>)
   14bb2:	fba0 0101 	umull	r0, r1, r0, r1
   14bb6:	f7ec faa1 	bl	10fc <__aeabi_uldivmod>
			ticks_win_offset =
   14bba:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticks_win_offset += 1;
   14bbe:	f100 0b01 	add.w	fp, r0, #1
		periodic_us = conn_interval_us;
   14bc2:	46c8      	mov	r8, r9
		conn->conn_interval = conn->llcp.conn_upd.interval;
   14bc4:	f8a4 a024 	strh.w	sl, [r4, #36]	; 0x24
		conn->latency = conn->llcp.conn_upd.latency;
   14bc8:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
   14bcc:	84e2      	strh	r2, [r4, #38]	; 0x26
			RADIO_CONN_EVENTS((conn->llcp.conn_upd.timeout
   14bce:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
   14bd2:	f242 7110 	movw	r1, #10000	; 0x2710
   14bd6:	fb01 9303 	mla	r3, r1, r3, r9
   14bda:	3b01      	subs	r3, #1
   14bdc:	fbb3 f3f9 	udiv	r3, r3, r9
		conn->supervision_reload =
   14be0:	87e3      	strh	r3, [r4, #62]	; 0x3e
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   14be2:	4b5c      	ldr	r3, [pc, #368]	; (14d54 <event_connection_prepare+0x894>)
   14be4:	444b      	add	r3, r9
   14be6:	fbb3 f3f9 	udiv	r3, r3, r9
		conn->procedure_reload =
   14bea:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   14bee:	4b5a      	ldr	r3, [pc, #360]	; (14d58 <event_connection_prepare+0x898>)
   14bf0:	444b      	add	r3, r9
   14bf2:	fbb3 f9f9 	udiv	r9, r3, r9
   14bf6:	fa1f f989 	uxth.w	r9, r9
   14bfa:	f8a4 904a 	strh.w	r9, [r4, #74]	; 0x4a
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   14bfe:	1d93      	adds	r3, r2, #6
   14c00:	4599      	cmp	r9, r3
   14c02:	dd07      	ble.n	14c14 <event_connection_prepare+0x754>
				     (conn->apto_reload - (conn->latency + 6)) :
   14c04:	eba9 0902 	sub.w	r9, r9, r2
   14c08:	fa1f f989 	uxth.w	r9, r9
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   14c0c:	f1a9 0906 	sub.w	r9, r9, #6
   14c10:	fa1f f989 	uxth.w	r9, r9
   14c14:	f8a4 9046 	strh.w	r9, [r4, #70]	; 0x46
		if (!conn->llcp.conn_upd.is_internal) {
   14c18:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   14c1c:	f013 0f04 	tst.w	r3, #4
   14c20:	d102      	bne.n	14c28 <event_connection_prepare+0x768>
			conn->supervision_expire = 0;
   14c22:	2300      	movs	r3, #0
   14c24:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
		mayfly_was_enabled =
   14c28:	2101      	movs	r1, #1
   14c2a:	2000      	movs	r0, #0
   14c2c:	f003 fe2d 	bl	1888a <mayfly_is_enabled>
   14c30:	4681      	mov	r9, r0
		mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
   14c32:	2200      	movs	r2, #0
   14c34:	2101      	movs	r1, #1
   14c36:	4610      	mov	r0, r2
   14c38:	f7f9 fc1c 	bl	e474 <mayfly_enable>
				    conn->handle, ticker_success_assert,
   14c3c:	8c22      	ldrh	r2, [r4, #32]
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   14c3e:	3207      	adds	r2, #7
		ticker_status =
   14c40:	f641 13e3 	movw	r3, #6627	; 0x19e3
   14c44:	9300      	str	r3, [sp, #0]
   14c46:	4b45      	ldr	r3, [pc, #276]	; (14d5c <event_connection_prepare+0x89c>)
   14c48:	b2d2      	uxtb	r2, r2
   14c4a:	2100      	movs	r1, #0
   14c4c:	4608      	mov	r0, r1
   14c4e:	f7fb fafb 	bl	10248 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   14c52:	b110      	cbz	r0, 14c5a <event_connection_prepare+0x79a>
   14c54:	2802      	cmp	r0, #2
   14c56:	f040 819a 	bne.w	14f8e <event_connection_prepare+0xace>
				     conn->handle,
   14c5a:	f8b4 a020 	ldrh.w	sl, [r4, #32]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   14c5e:	f10a 0a07 	add.w	sl, sl, #7
   14c62:	fa5f fa8a 	uxtb.w	sl, sl
				     TICKER_US_TO_TICKS(periodic_us),
   14c66:	4b3a      	ldr	r3, [pc, #232]	; (14d50 <event_connection_prepare+0x890>)
   14c68:	fba8 2303 	umull	r2, r3, r8, r3
   14c6c:	4617      	mov	r7, r2
   14c6e:	4698      	mov	r8, r3
   14c70:	a333      	add	r3, pc, #204	; (adr r3, 14d40 <event_connection_prepare+0x880>)
   14c72:	e9d3 2300 	ldrd	r2, r3, [r3]
   14c76:	4638      	mov	r0, r7
   14c78:	4641      	mov	r1, r8
   14c7a:	f7ec fa3f 	bl	10fc <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   14c7e:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
   14c82:	930d      	str	r3, [sp, #52]	; 0x34
				     TICKER_REMAINDER(periodic_us),
   14c84:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   14c88:	2100      	movs	r1, #0
   14c8a:	4a35      	ldr	r2, [pc, #212]	; (14d60 <event_connection_prepare+0x8a0>)
   14c8c:	2307      	movs	r3, #7
   14c8e:	fb03 f300 	mul.w	r3, r3, r0
   14c92:	fb02 3301 	mla	r3, r2, r1, r3
   14c96:	fba0 0102 	umull	r0, r1, r0, r2
   14c9a:	4419      	add	r1, r3
   14c9c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   14ca0:	2300      	movs	r3, #0
   14ca2:	1a3f      	subs	r7, r7, r0
   14ca4:	eb68 0801 	sbc.w	r8, r8, r1
   14ca8:	4638      	mov	r0, r7
   14caa:	4641      	mov	r1, r8
   14cac:	f7ec fa26 	bl	10fc <__aeabi_uldivmod>
   14cb0:	4602      	mov	r2, r0
				     (ticks_slot_offset + conn->hdr.ticks_slot),
   14cb2:	68e3      	ldr	r3, [r4, #12]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   14cb4:	990c      	ldr	r1, [sp, #48]	; 0x30
   14cb6:	440b      	add	r3, r1
   14cb8:	b29b      	uxth	r3, r3
   14cba:	f994 101d 	ldrsb.w	r1, [r4, #29]
   14cbe:	2900      	cmp	r1, #0
   14cc0:	f2c0 816b 	blt.w	14f9a <event_connection_prepare+0xada>
   14cc4:	4927      	ldr	r1, [pc, #156]	; (14d64 <event_connection_prepare+0x8a4>)
		ticker_status =
   14cc6:	f641 10f3 	movw	r0, #6643	; 0x19f3
   14cca:	9008      	str	r0, [sp, #32]
   14ccc:	4823      	ldr	r0, [pc, #140]	; (14d5c <event_connection_prepare+0x89c>)
   14cce:	9007      	str	r0, [sp, #28]
   14cd0:	9406      	str	r4, [sp, #24]
   14cd2:	9105      	str	r1, [sp, #20]
   14cd4:	9304      	str	r3, [sp, #16]
   14cd6:	2000      	movs	r0, #0
   14cd8:	9003      	str	r0, [sp, #12]
   14cda:	9202      	str	r2, [sp, #8]
   14cdc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   14cde:	9301      	str	r3, [sp, #4]
   14ce0:	f8cd b000 	str.w	fp, [sp]
   14ce4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14ce6:	4652      	mov	r2, sl
   14ce8:	4601      	mov	r1, r0
   14cea:	f7fb fa11 	bl	10110 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   14cee:	b110      	cbz	r0, 14cf6 <event_connection_prepare+0x836>
   14cf0:	2802      	cmp	r0, #2
   14cf2:	f040 8154 	bne.w	14f9e <event_connection_prepare+0xade>
		if (mayfly_was_enabled) {
   14cf6:	f1b9 0f00 	cmp.w	r9, #0
   14cfa:	f040 8156 	bne.w	14faa <event_connection_prepare+0xaea>
			if (event_conn_upd_prep(conn, event_counter,
   14cfe:	f1b9 0f00 	cmp.w	r9, #0
   14d02:	f040 821e 	bne.w	15142 <event_connection_prepare+0xc82>
   14d06:	f000 be59 	b.w	159bc <event_connection_prepare+0x14fc>
		_radio.conn_upd = conn;
   14d0a:	4b0f      	ldr	r3, [pc, #60]	; (14d48 <event_connection_prepare+0x888>)
   14d0c:	f8c3 4184 	str.w	r4, [r3, #388]	; 0x184
   14d10:	e6b0      	b.n	14a74 <event_connection_prepare+0x5b4>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   14d12:	4815      	ldr	r0, [pc, #84]	; (14d68 <event_connection_prepare+0x8a8>)
   14d14:	f7f9 fd2d 	bl	e772 <mem_acquire>
		if (!node_tx) {
   14d18:	4680      	mov	r8, r0
   14d1a:	2800      	cmp	r0, #0
   14d1c:	f000 814d 	beq.w	14fba <event_connection_prepare+0xafa>
		pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
   14d20:	1d03      	adds	r3, r0, #4
		switch (conn->llcp.conn_upd.state) {
   14d22:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
   14d26:	f002 0203 	and.w	r2, r2, #3
   14d2a:	2a01      	cmp	r2, #1
   14d2c:	d01e      	beq.n	14d6c <event_connection_prepare+0x8ac>
   14d2e:	2a02      	cmp	r2, #2
   14d30:	d066      	beq.n	14e00 <event_connection_prepare+0x940>
			LL_ASSERT(0);
   14d32:	4040      	eors	r0, r0
   14d34:	f380 8811 	msr	BASEPRI, r0
   14d38:	f04f 0004 	mov.w	r0, #4
   14d3c:	df02      	svc	2
   14d3e:	bf00      	nop
   14d40:	1afd498d 	.word	0x1afd498d
   14d44:	00000007 	.word	0x00000007
   14d48:	20000e84 	.word	0x20000e84
   14d4c:	09ce5400 	.word	0x09ce5400
   14d50:	3b9aca00 	.word	0x3b9aca00
   14d54:	026259ff 	.word	0x026259ff
   14d58:	01c9c37f 	.word	0x01c9c37f
   14d5c:	00010e65 	.word	0x00010e65
   14d60:	1afd498d 	.word	0x1afd498d
   14d64:	00015a25 	.word	0x00015a25
   14d68:	20000fdc 	.word	0x20000fdc
			fp_mayfly_select_or_use = mayfly_sched_win_offset_use;
   14d6c:	49bc      	ldr	r1, [pc, #752]	; (15060 <event_connection_prepare+0xba0>)
	conn->llcp.conn_upd.state = LLCP_CUI_STATE_INPROG;
   14d6e:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
   14d72:	f36f 0201 	bfc	r2, #0, #2
   14d76:	f884 2078 	strb.w	r2, [r4, #120]	; 0x78
		event_counter + conn->latency + 6;
   14d7a:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
   14d7c:	442a      	add	r2, r5
   14d7e:	b292      	uxth	r2, r2
   14d80:	3206      	adds	r2, #6
	conn->llcp.conn_upd.instant =
   14d82:	f8a4 2080 	strh.w	r2, [r4, #128]	; 0x80
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   14d86:	f898 2004 	ldrb.w	r2, [r8, #4]
   14d8a:	f042 0203 	orr.w	r2, r2, #3
   14d8e:	f888 2004 	strb.w	r2, [r8, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   14d92:	220c      	movs	r2, #12
   14d94:	705a      	strb	r2, [r3, #1]
	pdu_ctrl_tx->payload.llctrl.opcode =
   14d96:	2200      	movs	r2, #0
   14d98:	70da      	strb	r2, [r3, #3]
		conn->llcp.conn_upd.win_size;
   14d9a:	f894 2088 	ldrb.w	r2, [r4, #136]	; 0x88
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.win_size =
   14d9e:	711a      	strb	r2, [r3, #4]
		win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
   14da0:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
   14da4:	48af      	ldr	r0, [pc, #700]	; (15064 <event_connection_prepare+0xba4>)
   14da6:	fba0 0202 	umull	r0, r2, r0, r2
   14daa:	0a92      	lsrs	r2, r2, #10
   14dac:	f8a3 2005 	strh.w	r2, [r3, #5]
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.interval =
   14db0:	f8b4 207a 	ldrh.w	r2, [r4, #122]	; 0x7a
   14db4:	f8a3 2007 	strh.w	r2, [r3, #7]
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.latency =
   14db8:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
   14dbc:	f8a3 2009 	strh.w	r2, [r3, #9]
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.timeout =
   14dc0:	f8b4 207e 	ldrh.w	r2, [r4, #126]	; 0x7e
   14dc4:	f8a3 200b 	strh.w	r2, [r3, #11]
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.instant =
   14dc8:	f8b4 2080 	ldrh.w	r2, [r4, #128]	; 0x80
   14dcc:	f8a3 200d 	strh.w	r2, [r3, #13]
		conn->llcp.conn_upd.ticks_anchor = ticks_at_expire;
   14dd0:	f8c4 6090 	str.w	r6, [r4, #144]	; 0x90
		if (conn->hdr.ticks_xtal_to_start & ((u32_t)1 << 31)) {
   14dd4:	6820      	ldr	r0, [r4, #0]
   14dd6:	2800      	cmp	r0, #0
   14dd8:	db14      	blt.n	14e04 <event_connection_prepare+0x944>
		conn->llcp.conn_upd.pdu_win_offset = (u16_t *)
   14dda:	3305      	adds	r3, #5
   14ddc:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
		mayfly_sched_offset->fp = fp_mayfly_select_or_use;
   14de0:	4ba1      	ldr	r3, [pc, #644]	; (15068 <event_connection_prepare+0xba8>)
   14de2:	60d9      	str	r1, [r3, #12]
		mayfly_sched_offset->param = (void *)conn;
   14de4:	609c      	str	r4, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   14de6:	2201      	movs	r2, #1
   14de8:	4611      	mov	r1, r2
   14dea:	2000      	movs	r0, #0
   14dec:	f7f9 fb80 	bl	e4f0 <mayfly_enqueue>
		LL_ASSERT(!retval);
   14df0:	b9b0      	cbnz	r0, 14e20 <event_connection_prepare+0x960>
		ctrl_tx_enqueue(conn, node_tx);
   14df2:	4641      	mov	r1, r8
   14df4:	4620      	mov	r0, r4
   14df6:	f7fb ff4d 	bl	10c94 <ctrl_tx_enqueue>
	return 1;
   14dfa:	f04f 0901 	mov.w	r9, #1
   14dfe:	e77e      	b.n	14cfe <event_connection_prepare+0x83e>
			fp_mayfly_select_or_use =
   14e00:	499a      	ldr	r1, [pc, #616]	; (1506c <event_connection_prepare+0xbac>)
   14e02:	e7b4      	b.n	14d6e <event_connection_prepare+0x8ae>
				conn->hdr.ticks_preempt_to_start;
   14e04:	68a7      	ldr	r7, [r4, #8]
				conn->hdr.ticks_active_to_start :
   14e06:	6862      	ldr	r2, [r4, #4]
				((conn->hdr.ticks_xtal_to_start &
   14e08:	f020 4e00 	bic.w	lr, r0, #2147483648	; 0x80000000
				  (~((u32_t)1 << 31))) -
   14e0c:	4297      	cmp	r7, r2
   14e0e:	bf2c      	ite	cs
   14e10:	ebce 0207 	rsbcs	r2, lr, r7
   14e14:	ebce 0202 	rsbcc	r2, lr, r2
			conn->llcp.conn_upd.ticks_anchor -=
   14e18:	4432      	add	r2, r6
   14e1a:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
   14e1e:	e7dc      	b.n	14dda <event_connection_prepare+0x91a>
		LL_ASSERT(!retval);
   14e20:	4040      	eors	r0, r0
   14e22:	f380 8811 	msr	BASEPRI, r0
   14e26:	f04f 0004 	mov.w	r0, #4
   14e2a:	df02      	svc	2
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   14e2c:	f884 20c1 	strb.w	r2, [r4, #193]	; 0xc1
			conn->procedure_expire = 0;
   14e30:	2300      	movs	r3, #0
   14e32:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
   14e36:	e63e      	b.n	14ab6 <event_connection_prepare+0x5f6>
			_radio.conn_upd = NULL;
   14e38:	4b8d      	ldr	r3, [pc, #564]	; (15070 <event_connection_prepare+0xbb0>)
   14e3a:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   14e3e:	e642      	b.n	14ac6 <event_connection_prepare+0x606>
		    (conn->llcp.conn_upd.latency != conn->latency) ||
   14e40:	f8b4 107c 	ldrh.w	r1, [r4, #124]	; 0x7c
   14e44:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
		     conn->conn_interval) ||
   14e46:	4291      	cmp	r1, r2
   14e48:	f47f ae43 	bne.w	14ad2 <event_connection_prepare+0x612>
		    (RADIO_CONN_EVENTS(conn->llcp.conn_upd.timeout *
   14e4c:	f8b4 207e 	ldrh.w	r2, [r4, #126]	; 0x7e
   14e50:	f240 41e2 	movw	r1, #1250	; 0x4e2
   14e54:	fb01 f103 	mul.w	r1, r1, r3
   14e58:	f242 7310 	movw	r3, #10000	; 0x2710
   14e5c:	fb03 1302 	mla	r3, r3, r2, r1
   14e60:	3b01      	subs	r3, #1
   14e62:	fb93 f3f1 	sdiv	r3, r3, r1
   14e66:	b29b      	uxth	r3, r3
		     conn->supervision_reload)) {
   14e68:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
		    (conn->llcp.conn_upd.latency != conn->latency) ||
   14e6a:	4293      	cmp	r3, r2
   14e6c:	f47f ae31 	bne.w	14ad2 <event_connection_prepare+0x612>
   14e70:	e65b      	b.n	14b2a <event_connection_prepare+0x66a>
		return (_radio.packet_rx_count -
   14e72:	497f      	ldr	r1, [pc, #508]	; (15070 <event_connection_prepare+0xbb0>)
   14e74:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
			_radio.packet_rx_last +
   14e78:	f891 113d 	ldrb.w	r1, [r1, #317]	; 0x13d
		return (_radio.packet_rx_count -
   14e7c:	1a5b      	subs	r3, r3, r1
			_radio.packet_rx_last +
   14e7e:	fa52 f383 	uxtab	r3, r2, r3
   14e82:	b2db      	uxtb	r3, r3
   14e84:	e633      	b.n	14aee <event_connection_prepare+0x62e>
		return 0;
   14e86:	2300      	movs	r3, #0
   14e88:	e63b      	b.n	14b02 <event_connection_prepare+0x642>
			LL_ASSERT(radio_pdu_node_rx);
   14e8a:	4040      	eors	r0, r0
   14e8c:	f380 8811 	msr	BASEPRI, r0
   14e90:	f04f 0004 	mov.w	r0, #4
   14e94:	df02      	svc	2
				conn->hdr.ticks_preempt_to_start;
   14e96:	68a1      	ldr	r1, [r4, #8]
				conn->hdr.ticks_active_to_start :
   14e98:	6862      	ldr	r2, [r4, #4]
			conn->hdr.ticks_xtal_to_start &= ~((u32_t)1 << 31);
   14e9a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   14e9e:	6023      	str	r3, [r4, #0]
			ticks_at_expire -= (conn->hdr.ticks_xtal_to_start -
   14ea0:	4291      	cmp	r1, r2
   14ea2:	bf2c      	ite	cs
   14ea4:	ebc3 0301 	rsbcs	r3, r3, r1
   14ea8:	ebc3 0302 	rsbcc	r3, r3, r2
   14eac:	eb06 0903 	add.w	r9, r6, r3
   14eb0:	e640      	b.n	14b34 <event_connection_prepare+0x674>
				TICKER_US_TO_TICKS((conn_interval_old -
   14eb2:	1a1b      	subs	r3, r3, r0
   14eb4:	17d9      	asrs	r1, r3, #31
   14eb6:	486f      	ldr	r0, [pc, #444]	; (15074 <event_connection_prepare+0xbb4>)
   14eb8:	f240 1223 	movw	r2, #291	; 0x123
   14ebc:	fb02 f203 	mul.w	r2, r2, r3
   14ec0:	fb00 2201 	mla	r2, r0, r1, r2
   14ec4:	fba3 0100 	umull	r0, r1, r3, r0
   14ec8:	4411      	add	r1, r2
   14eca:	a363      	add	r3, pc, #396	; (adr r3, 15058 <event_connection_prepare+0xb98>)
   14ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
   14ed0:	f7ec f914 	bl	10fc <__aeabi_uldivmod>
   14ed4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticks_at_expire -=
   14ed8:	eba9 0300 	sub.w	r3, r9, r0
   14edc:	930b      	str	r3, [sp, #44]	; 0x2c
   14ede:	e64d      	b.n	14b7c <event_connection_prepare+0x6bc>
				conn->slave.window_widening_periodic_us *
   14ee0:	6d62      	ldr	r2, [r4, #84]	; 0x54
			conn->slave.window_widening_prepare_us -=
   14ee2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   14ee4:	fb02 3218 	mls	r2, r2, r8, r3
   14ee8:	65e2      	str	r2, [r4, #92]	; 0x5c
				(((gc_lookup_ppm[_radio.sca] +
   14eea:	4b61      	ldr	r3, [pc, #388]	; (15070 <event_connection_prepare+0xbb0>)
   14eec:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
   14ef0:	4861      	ldr	r0, [pc, #388]	; (15078 <event_connection_prepare+0xbb8>)
   14ef2:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
				   gc_lookup_ppm[conn->slave.sca]) *
   14ef6:	f894 1050 	ldrb.w	r1, [r4, #80]	; 0x50
   14efa:	f3c1 0182 	ubfx	r1, r1, #2, #3
   14efe:	f830 1011 	ldrh.w	r1, [r0, r1, lsl #1]
				(((gc_lookup_ppm[_radio.sca] +
   14f02:	440b      	add	r3, r1
				   gc_lookup_ppm[conn->slave.sca]) *
   14f04:	fb03 f309 	mul.w	r3, r3, r9
				  conn_interval_us) + (1000000 - 1)) / 1000000;
   14f08:	f503 2374 	add.w	r3, r3, #999424	; 0xf4000
   14f0c:	f203 233f 	addw	r3, r3, #575	; 0x23f
   14f10:	495a      	ldr	r1, [pc, #360]	; (1507c <event_connection_prepare+0xbbc>)
   14f12:	fba1 1303 	umull	r1, r3, r1, r3
   14f16:	ea4f 4893 	mov.w	r8, r3, lsr #18
			conn->slave.window_widening_periodic_us =
   14f1a:	f8c4 8054 	str.w	r8, [r4, #84]	; 0x54
				(conn_interval_us >> 1) - RADIO_TIFS;
   14f1e:	ea4f 0359 	mov.w	r3, r9, lsr #1
   14f22:	3b96      	subs	r3, #150	; 0x96
			conn->slave.window_widening_max_us =
   14f24:	65a3      	str	r3, [r4, #88]	; 0x58
				conn->llcp.conn_upd.win_size * 1250;
   14f26:	f894 0088 	ldrb.w	r0, [r4, #136]	; 0x88
   14f2a:	f240 41e2 	movw	r1, #1250	; 0x4e2
   14f2e:	fb01 f100 	mul.w	r1, r1, r0
			conn->slave.window_size_prepare_us =
   14f32:	6661      	str	r1, [r4, #100]	; 0x64
			conn->slave.ticks_to_offset = 0;
   14f34:	2100      	movs	r1, #0
   14f36:	6721      	str	r1, [r4, #112]	; 0x70
				conn->slave.window_widening_periodic_us *
   14f38:	fb08 f00b 	mul.w	r0, r8, fp
			conn->slave.window_widening_prepare_us +=
   14f3c:	4402      	add	r2, r0
   14f3e:	65e2      	str	r2, [r4, #92]	; 0x5c
			if (conn->slave.window_widening_prepare_us >
   14f40:	4293      	cmp	r3, r2
   14f42:	d200      	bcs.n	14f46 <event_connection_prepare+0xa86>
				conn->slave.window_widening_prepare_us =
   14f44:	65e3      	str	r3, [r4, #92]	; 0x5c
				TICKER_US_TO_TICKS(conn->slave.window_widening_periodic_us *
   14f46:	f8df b140 	ldr.w	fp, [pc, #320]	; 15088 <event_connection_prepare+0xbc8>
   14f4a:	a343      	add	r3, pc, #268	; (adr r3, 15058 <event_connection_prepare+0xb98>)
   14f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
   14f50:	fba0 010b 	umull	r0, r1, r0, fp
   14f54:	f7ec f8d2 	bl	10fc <__aeabi_uldivmod>
   14f58:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticks_at_expire -=
   14f5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14f5e:	1a1b      	subs	r3, r3, r0
   14f60:	930b      	str	r3, [sp, #44]	; 0x2c
				TICKER_US_TO_TICKS((conn->llcp.conn_upd.win_offset_us /
   14f62:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
   14f66:	4a3f      	ldr	r2, [pc, #252]	; (15064 <event_connection_prepare+0xba4>)
   14f68:	fba2 2303 	umull	r2, r3, r2, r3
   14f6c:	0a9b      	lsrs	r3, r3, #10
   14f6e:	f240 40e2 	movw	r0, #1250	; 0x4e2
   14f72:	fb00 f003 	mul.w	r0, r0, r3
   14f76:	a338      	add	r3, pc, #224	; (adr r3, 15058 <event_connection_prepare+0xb98>)
   14f78:	e9d3 2300 	ldrd	r2, r3, [r3]
   14f7c:	fba0 010b 	umull	r0, r1, r0, fp
   14f80:	f7ec f8bc 	bl	10fc <__aeabi_uldivmod>
			ticks_win_offset =
   14f84:	f020 4b7f 	bic.w	fp, r0, #4278190080	; 0xff000000
			periodic_us -=
   14f88:	eba9 0808 	sub.w	r8, r9, r8
   14f8c:	e61a      	b.n	14bc4 <event_connection_prepare+0x704>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   14f8e:	4040      	eors	r0, r0
   14f90:	f380 8811 	msr	BASEPRI, r0
   14f94:	f04f 0004 	mov.w	r0, #4
   14f98:	df02      	svc	2
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   14f9a:	4939      	ldr	r1, [pc, #228]	; (15080 <event_connection_prepare+0xbc0>)
   14f9c:	e693      	b.n	14cc6 <event_connection_prepare+0x806>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   14f9e:	4040      	eors	r0, r0
   14fa0:	f380 8811 	msr	BASEPRI, r0
   14fa4:	f04f 0004 	mov.w	r0, #4
   14fa8:	df02      	svc	2
			mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
   14faa:	2201      	movs	r2, #1
   14fac:	4611      	mov	r1, r2
   14fae:	2000      	movs	r0, #0
   14fb0:	f7f9 fa60 	bl	e474 <mayfly_enable>
		return 0;
   14fb4:	f04f 0900 	mov.w	r9, #0
   14fb8:	e6a1      	b.n	14cfe <event_connection_prepare+0x83e>
			return 1;
   14fba:	f04f 0901 	mov.w	r9, #1
   14fbe:	e69e      	b.n	14cfe <event_connection_prepare+0x83e>
	return 1;
   14fc0:	f04f 0901 	mov.w	r9, #1
   14fc4:	e69b      	b.n	14cfe <event_connection_prepare+0x83e>
	if (conn->llcp.chan_map.initiate) {
   14fc6:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   14fca:	b9f3      	cbnz	r3, 1500a <event_connection_prepare+0xb4a>
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
   14fcc:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
   14fd0:	1aeb      	subs	r3, r5, r3
   14fd2:	b29b      	uxth	r3, r3
   14fd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   14fd8:	f280 80b3 	bge.w	15142 <event_connection_prepare+0xc82>
		conn->llcp_ack = conn->llcp_req;
   14fdc:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   14fe0:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		memcpy(&conn->data_chan_map[0],
   14fe4:	f104 0817 	add.w	r8, r4, #23
   14fe8:	2205      	movs	r2, #5
   14fea:	f104 0179 	add.w	r1, r4, #121	; 0x79
   14fee:	4640      	mov	r0, r8
   14ff0:	f7eb f966 	bl	2c0 <memcpy>
			util_ones_count_get(&conn->data_chan_map[0],
   14ff4:	2105      	movs	r1, #5
   14ff6:	4640      	mov	r0, r8
   14ff8:	f7f9 fc3f 	bl	e87a <util_ones_count_get>
		conn->data_chan_count =
   14ffc:	7f63      	ldrb	r3, [r4, #29]
   14ffe:	f360 0305 	bfi	r3, r0, #0, #6
   15002:	7763      	strb	r3, [r4, #29]
		conn->chm_update = 1;
   15004:	2301      	movs	r3, #1
   15006:	7723      	strb	r3, [r4, #28]
   15008:	e09b      	b.n	15142 <event_connection_prepare+0xc82>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   1500a:	481e      	ldr	r0, [pc, #120]	; (15084 <event_connection_prepare+0xbc4>)
   1500c:	f7f9 fbb1 	bl	e772 <mem_acquire>
		if (node_tx) {
   15010:	4680      	mov	r8, r0
   15012:	2800      	cmp	r0, #0
   15014:	f000 8095 	beq.w	15142 <event_connection_prepare+0xc82>
			conn->llcp.chan_map.initiate = 0;
   15018:	2300      	movs	r3, #0
   1501a:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
				event_counter + conn->latency + 6;
   1501e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   15020:	442b      	add	r3, r5
   15022:	b29b      	uxth	r3, r3
   15024:	3306      	adds	r3, #6
			conn->llcp.chan_map.instant =
   15026:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1502a:	7903      	ldrb	r3, [r0, #4]
   1502c:	f043 0303 	orr.w	r3, r3, #3
   15030:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   15032:	2308      	movs	r3, #8
   15034:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->payload.llctrl.opcode =
   15036:	2301      	movs	r3, #1
   15038:	71c3      	strb	r3, [r0, #7]
			memcpy(&pdu_ctrl_tx->payload.llctrl.
   1503a:	2205      	movs	r2, #5
   1503c:	f104 0179 	add.w	r1, r4, #121	; 0x79
   15040:	3008      	adds	r0, #8
   15042:	f7eb f93d 	bl	2c0 <memcpy>
			pdu_ctrl_tx->payload.llctrl.ctrldata.chan_map_ind.instant =
   15046:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
   1504a:	f8a8 300d 	strh.w	r3, [r8, #13]
			ctrl_tx_enqueue(conn, node_tx);
   1504e:	4641      	mov	r1, r8
   15050:	4620      	mov	r0, r4
   15052:	f7fb fe1f 	bl	10c94 <ctrl_tx_enqueue>
   15056:	e074      	b.n	15142 <event_connection_prepare+0xc82>
   15058:	1afd498d 	.word	0x1afd498d
   1505c:	00000007 	.word	0x00000007
   15060:	0001264d 	.word	0x0001264d
   15064:	d1b71759 	.word	0xd1b71759
   15068:	2000bc38 	.word	0x2000bc38
   1506c:	00012381 	.word	0x00012381
   15070:	20000e84 	.word	0x20000e84
   15074:	09ce5400 	.word	0x09ce5400
   15078:	0002fb40 	.word	0x0002fb40
   1507c:	431bde83 	.word	0x431bde83
   15080:	00015a1d 	.word	0x00015a1d
   15084:	20000fdc 	.word	0x20000fdc
   15088:	3b9aca00 	.word	0x3b9aca00
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   1508c:	48d9      	ldr	r0, [pc, #868]	; (153f4 <event_connection_prepare+0xf34>)
   1508e:	f7f9 fb70 	bl	e772 <mem_acquire>
	if (node_tx) {
   15092:	4680      	mov	r8, r0
   15094:	2800      	cmp	r0, #0
   15096:	d054      	beq.n	15142 <event_connection_prepare+0xc82>
		struct pdu_data *pdu_ctrl_tx =
   15098:	f100 0904 	add.w	r9, r0, #4
		conn->llcp_ack = conn->llcp_req;
   1509c:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   150a0:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		if (!conn->role) {
   150a4:	f994 301d 	ldrsb.w	r3, [r4, #29]
   150a8:	2b00      	cmp	r3, #0
   150aa:	f2c0 808c 	blt.w	151c6 <event_connection_prepare+0xd06>
			ecb_encrypt(&conn->llcp.encryption.ltk[0],
   150ae:	f104 0af9 	add.w	sl, r4, #249	; 0xf9
   150b2:	4653      	mov	r3, sl
   150b4:	2200      	movs	r2, #0
   150b6:	f104 0193 	add.w	r1, r4, #147	; 0x93
   150ba:	f104 0083 	add.w	r0, r4, #131	; 0x83
   150be:	f7f9 fc65 	bl	e98c <ecb_encrypt>
			memcpy(&conn->ccm_tx.key[0], &conn->ccm_rx.key[0],
   150c2:	2210      	movs	r2, #16
   150c4:	4651      	mov	r1, sl
   150c6:	f504 708d 	add.w	r0, r4, #282	; 0x11a
   150ca:	f7eb f8f9 	bl	2c0 <memcpy>
			memcpy(&conn->ccm_tx.iv[0], &conn->ccm_rx.iv[0],
   150ce:	2208      	movs	r2, #8
   150d0:	f504 7189 	add.w	r1, r4, #274	; 0x112
   150d4:	f204 1033 	addw	r0, r4, #307	; 0x133
   150d8:	f7eb f8f2 	bl	2c0 <memcpy>
			conn->ccm_rx.counter = 0;
   150dc:	2300      	movs	r3, #0
   150de:	f884 3109 	strb.w	r3, [r4, #265]	; 0x109
   150e2:	f884 310a 	strb.w	r3, [r4, #266]	; 0x10a
   150e6:	f884 310b 	strb.w	r3, [r4, #267]	; 0x10b
   150ea:	f884 310c 	strb.w	r3, [r4, #268]	; 0x10c
   150ee:	f884 310d 	strb.w	r3, [r4, #269]	; 0x10d
   150f2:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
   150f6:	f884 310f 	strb.w	r3, [r4, #271]	; 0x10f
   150fa:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
			conn->ccm_tx.counter = 0;
   150fe:	f8a4 312a 	strh.w	r3, [r4, #298]	; 0x12a
   15102:	f8a4 312c 	strh.w	r3, [r4, #300]	; 0x12c
   15106:	f8a4 312e 	strh.w	r3, [r4, #302]	; 0x12e
   1510a:	f8a4 3130 	strh.w	r3, [r4, #304]	; 0x130
			conn->ccm_rx.direction = 0;
   1510e:	f894 2111 	ldrb.w	r2, [r4, #273]	; 0x111
   15112:	f363 0200 	bfi	r2, r3, #0, #1
   15116:	f884 2111 	strb.w	r2, [r4, #273]	; 0x111
			conn->ccm_tx.direction = 1;
   1511a:	f894 3132 	ldrb.w	r3, [r4, #306]	; 0x132
   1511e:	f043 0301 	orr.w	r3, r3, #1
   15122:	f884 3132 	strb.w	r3, [r4, #306]	; 0x132
			conn->enc_rx = 1;
   15126:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
			conn->enc_tx = 1;
   1512a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
   1512e:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
			start_enc_rsp_send(conn, pdu_ctrl_tx);
   15132:	4649      	mov	r1, r9
   15134:	4620      	mov	r0, r4
   15136:	f7fb fe9d 	bl	10e74 <start_enc_rsp_send>
		ctrl_tx_enqueue(conn, node_tx);
   1513a:	4641      	mov	r1, r8
   1513c:	4620      	mov	r0, r4
   1513e:	f7fb fda9 	bl	10c94 <ctrl_tx_enqueue>
	if (conn->llcp_terminate.ack != conn->llcp_terminate.req) {
   15142:	f894 20b1 	ldrb.w	r2, [r4, #177]	; 0xb1
   15146:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
   1514a:	429a      	cmp	r2, r3
   1514c:	d021      	beq.n	15192 <event_connection_prepare+0xcd2>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
   1514e:	2305      	movs	r3, #5
   15150:	2200      	movs	r2, #0
   15152:	4611      	mov	r1, r2
   15154:	4610      	mov	r0, r2
   15156:	f7fc fa77 	bl	11648 <event_stop>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   1515a:	48a6      	ldr	r0, [pc, #664]	; (153f4 <event_connection_prepare+0xf34>)
   1515c:	f7f9 fb09 	bl	e772 <mem_acquire>
		if (node_tx) {
   15160:	4601      	mov	r1, r0
   15162:	b1b0      	cbz	r0, 15192 <event_connection_prepare+0xcd2>
			conn->llcp_terminate.ack = conn->llcp_terminate.req;
   15164:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
   15168:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1516c:	7903      	ldrb	r3, [r0, #4]
   1516e:	f043 0303 	orr.w	r3, r3, #3
   15172:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len =
   15174:	2302      	movs	r3, #2
   15176:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->payload.llctrl.opcode =
   15178:	71c3      	strb	r3, [r0, #7]
				error_code = conn->llcp_terminate.reason_own;
   1517a:	f894 30b2 	ldrb.w	r3, [r4, #178]	; 0xb2
   1517e:	7203      	strb	r3, [r0, #8]
			ctrl_tx_enqueue(conn, node_tx);
   15180:	4620      	mov	r0, r4
   15182:	f7fb fd87 	bl	10c94 <ctrl_tx_enqueue>
			conn->procedure_expire = conn->supervision_reload;
   15186:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
   15188:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
			if (conn->procedure_expire <= 1) {
   1518c:	2b01      	cmp	r3, #1
   1518e:	f240 82a6 	bls.w	156de <event_connection_prepare+0x121e>
	if (conn->llcp_length.ack != conn->llcp_length.req) {
   15192:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
   15196:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   1519a:	429a      	cmp	r2, r3
   1519c:	f000 83f9 	beq.w	15992 <event_connection_prepare+0x14d2>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
   151a0:	2305      	movs	r3, #5
   151a2:	2200      	movs	r2, #0
   151a4:	4611      	mov	r1, r2
   151a6:	4610      	mov	r0, r2
   151a8:	f7fc fa4e 	bl	11648 <event_stop>
	switch (conn->llcp_length.state) {
   151ac:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   151b0:	f003 0303 	and.w	r3, r3, #3
   151b4:	2b03      	cmp	r3, #3
   151b6:	f200 8427 	bhi.w	15a08 <event_connection_prepare+0x1548>
   151ba:	e8df f013 	tbh	[pc, r3, lsl #1]
   151be:	0299      	.short	0x0299
   151c0:	03ea03ea 	.word	0x03ea03ea
   151c4:	02fa      	.short	0x02fa
		else if (!conn->pause_tx || conn->refresh) {
   151c6:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
   151ca:	f003 0348 	and.w	r3, r3, #72	; 0x48
   151ce:	2b08      	cmp	r3, #8
   151d0:	d079      	beq.n	152c6 <event_connection_prepare+0xe06>
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   151d2:	7903      	ldrb	r3, [r0, #4]
   151d4:	f043 0303 	orr.w	r3, r3, #3
   151d8:	7103      	strb	r3, [r0, #4]
			if (conn->llcp.encryption.error_code) {
   151da:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   151de:	b333      	cbz	r3, 1522e <event_connection_prepare+0xd6e>
	if (conn->common.fex_valid &&
   151e0:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
   151e4:	f013 0f20 	tst.w	r3, #32
   151e8:	d00e      	beq.n	15208 <event_connection_prepare+0xd48>
	    (conn->llcp_features & BIT(BT_LE_FEAT_BIT_EXT_REJ_IND))) {
   151ea:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
	if (conn->common.fex_valid &&
   151ee:	f013 0f04 	tst.w	r3, #4
   151f2:	d009      	beq.n	15208 <event_connection_prepare+0xd48>
		pdu->payload.llctrl.opcode =
   151f4:	2311      	movs	r3, #17
   151f6:	71c3      	strb	r3, [r0, #7]
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   151f8:	2303      	movs	r3, #3
   151fa:	7203      	strb	r3, [r0, #8]
		p->error_code = conn->llcp.encryption.error_code;
   151fc:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   15200:	7243      	strb	r3, [r0, #9]
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ext_ind);
   15202:	2302      	movs	r3, #2
   15204:	7143      	strb	r3, [r0, #5]
   15206:	e009      	b.n	1521c <event_connection_prepare+0xd5c>
		pdu->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   15208:	230d      	movs	r3, #13
   1520a:	f888 3007 	strb.w	r3, [r8, #7]
		p->error_code =	conn->llcp.encryption.error_code;
   1520e:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   15212:	f888 3008 	strb.w	r3, [r8, #8]
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ind);
   15216:	2301      	movs	r3, #1
   15218:	f888 3005 	strb.w	r3, [r8, #5]
	pdu->len += offsetof(struct pdu_data_llctrl, ctrldata);
   1521c:	f898 3005 	ldrb.w	r3, [r8, #5]
   15220:	3301      	adds	r3, #1
   15222:	f888 3005 	strb.w	r3, [r8, #5]
	conn->llcp.encryption.error_code = 0;
   15226:	2300      	movs	r3, #0
   15228:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
   1522c:	e785      	b.n	1513a <event_connection_prepare+0xc7a>
				enc_rsp_send(conn);
   1522e:	4620      	mov	r0, r4
   15230:	f7fd fa38 	bl	126a4 <enc_rsp_send>
				ecb_encrypt(&conn->llcp.encryption.ltk[0],
   15234:	f104 09f9 	add.w	r9, r4, #249	; 0xf9
   15238:	464b      	mov	r3, r9
   1523a:	2200      	movs	r2, #0
   1523c:	f104 0193 	add.w	r1, r4, #147	; 0x93
   15240:	f104 0083 	add.w	r0, r4, #131	; 0x83
   15244:	f7f9 fba2 	bl	e98c <ecb_encrypt>
				memcpy(&conn->ccm_tx.key[0],
   15248:	2210      	movs	r2, #16
   1524a:	4649      	mov	r1, r9
   1524c:	f504 708d 	add.w	r0, r4, #282	; 0x11a
   15250:	f7eb f836 	bl	2c0 <memcpy>
				memcpy(&conn->ccm_tx.iv[0], &conn->ccm_rx.iv[0],
   15254:	2208      	movs	r2, #8
   15256:	f504 7189 	add.w	r1, r4, #274	; 0x112
   1525a:	f204 1033 	addw	r0, r4, #307	; 0x133
   1525e:	f7eb f82f 	bl	2c0 <memcpy>
				conn->ccm_rx.counter = 0;
   15262:	2300      	movs	r3, #0
   15264:	f884 3109 	strb.w	r3, [r4, #265]	; 0x109
   15268:	f884 310a 	strb.w	r3, [r4, #266]	; 0x10a
   1526c:	f884 310b 	strb.w	r3, [r4, #267]	; 0x10b
   15270:	f884 310c 	strb.w	r3, [r4, #268]	; 0x10c
   15274:	f884 310d 	strb.w	r3, [r4, #269]	; 0x10d
   15278:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
   1527c:	f884 310f 	strb.w	r3, [r4, #271]	; 0x10f
   15280:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
				conn->ccm_tx.counter = 0;
   15284:	f8a4 312a 	strh.w	r3, [r4, #298]	; 0x12a
   15288:	f8a4 312c 	strh.w	r3, [r4, #300]	; 0x12c
   1528c:	f8a4 312e 	strh.w	r3, [r4, #302]	; 0x12e
   15290:	f8a4 3130 	strh.w	r3, [r4, #304]	; 0x130
				conn->ccm_rx.direction = 1;
   15294:	f894 2111 	ldrb.w	r2, [r4, #273]	; 0x111
   15298:	f042 0201 	orr.w	r2, r2, #1
   1529c:	f884 2111 	strb.w	r2, [r4, #273]	; 0x111
				conn->ccm_tx.direction = 0;
   152a0:	f894 2132 	ldrb.w	r2, [r4, #306]	; 0x132
   152a4:	f363 0200 	bfi	r2, r3, #0, #1
   152a8:	f884 2132 	strb.w	r2, [r4, #306]	; 0x132
				conn->enc_rx = 1;
   152ac:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
   152b0:	f043 0310 	orr.w	r3, r3, #16
   152b4:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
				pdu_ctrl_tx->len =
   152b8:	2301      	movs	r3, #1
   152ba:	f888 3005 	strb.w	r3, [r8, #5]
				pdu_ctrl_tx->payload.llctrl.opcode =
   152be:	2305      	movs	r3, #5
   152c0:	f888 3007 	strb.w	r3, [r8, #7]
   152c4:	e739      	b.n	1513a <event_connection_prepare+0xc7a>
			_radio.conn_curr->enc_tx = 1;
   152c6:	f8df 9134 	ldr.w	r9, [pc, #308]	; 153fc <event_connection_prepare+0xf3c>
   152ca:	f8d9 2110 	ldr.w	r2, [r9, #272]	; 0x110
   152ce:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
   152d2:	f043 0320 	orr.w	r3, r3, #32
   152d6:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
			start_enc_rsp_send(_radio.conn_curr, NULL);
   152da:	2100      	movs	r1, #0
   152dc:	f8d9 0110 	ldr.w	r0, [r9, #272]	; 0x110
   152e0:	f7fb fdc8 	bl	10e74 <start_enc_rsp_send>
			_radio.conn_curr->pause_rx = 0;
   152e4:	f8d9 3110 	ldr.w	r3, [r9, #272]	; 0x110
   152e8:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   152ec:	f36f 0282 	bfc	r2, #2, #1
   152f0:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			_radio.conn_curr->pause_tx = 0;
   152f4:	f8d9 3110 	ldr.w	r3, [r9, #272]	; 0x110
   152f8:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   152fc:	f36f 02c3 	bfc	r2, #3, #1
   15300:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
   15304:	e719      	b.n	1513a <event_connection_prepare+0xc7a>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   15306:	483b      	ldr	r0, [pc, #236]	; (153f4 <event_connection_prepare+0xf34>)
   15308:	f7f9 fa33 	bl	e772 <mem_acquire>
	if (node_tx) {
   1530c:	4680      	mov	r8, r0
   1530e:	2800      	cmp	r0, #0
   15310:	f43f af17 	beq.w	15142 <event_connection_prepare+0xc82>
		conn->llcp_ack = conn->llcp_req;
   15314:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   15318:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		conn->llcp_features = RADIO_BLE_FEAT;
   1531c:	4b36      	ldr	r3, [pc, #216]	; (153f8 <event_connection_prepare+0xf38>)
   1531e:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   15322:	7903      	ldrb	r3, [r0, #4]
   15324:	f043 0303 	orr.w	r3, r3, #3
   15328:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   1532a:	2309      	movs	r3, #9
   1532c:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->payload.llctrl.opcode =
   1532e:	f994 301d 	ldrsb.w	r3, [r4, #29]
   15332:	2b00      	cmp	r3, #0
   15334:	db1e      	blt.n	15374 <event_connection_prepare+0xeb4>
   15336:	2308      	movs	r3, #8
   15338:	f888 3007 	strb.w	r3, [r8, #7]
		memset(&pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[0],
   1533c:	2208      	movs	r2, #8
   1533e:	2100      	movs	r1, #0
   15340:	eb08 0002 	add.w	r0, r8, r2
   15344:	f015 fb9e 	bl	2aa84 <memset>
			conn->llcp_features & 0xFF;
   15348:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
		pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[0] =
   1534c:	f888 3008 	strb.w	r3, [r8, #8]
			(conn->llcp_features >> 8) & 0xFF;
   15350:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   15354:	0a1b      	lsrs	r3, r3, #8
		pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[1] =
   15356:	f888 3009 	strb.w	r3, [r8, #9]
			(conn->llcp_features >> 16) & 0xFF;
   1535a:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
		pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[2] =
   1535e:	f888 300a 	strb.w	r3, [r8, #10]
		ctrl_tx_enqueue(conn, node_tx);
   15362:	4641      	mov	r1, r8
   15364:	4620      	mov	r0, r4
   15366:	f7fb fc95 	bl	10c94 <ctrl_tx_enqueue>
		conn->procedure_expire = conn->procedure_reload;
   1536a:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
   1536e:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
   15372:	e6e6      	b.n	15142 <event_connection_prepare+0xc82>
		pdu_ctrl_tx->payload.llctrl.opcode =
   15374:	230e      	movs	r3, #14
   15376:	e7df      	b.n	15338 <event_connection_prepare+0xe78>
	if (conn->llcp_version.tx == 0) {
   15378:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
   1537c:	f013 0f01 	tst.w	r3, #1
   15380:	d03e      	beq.n	15400 <event_connection_prepare+0xf40>
	} else if (conn->llcp_version.rx != 0) {
   15382:	f013 0f02 	tst.w	r3, #2
   15386:	d076      	beq.n	15476 <event_connection_prepare+0xfb6>
		conn->llcp_ack = conn->llcp_req;
   15388:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   1538c:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
	if (_radio.packet_rx_acquire >=
   15390:	4b1a      	ldr	r3, [pc, #104]	; (153fc <event_connection_prepare+0xf3c>)
   15392:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   15396:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   1539a:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   1539c:	429a      	cmp	r2, r3
   1539e:	d358      	bcc.n	15452 <event_connection_prepare+0xf92>
			_radio.packet_rx_last);
   153a0:	4b16      	ldr	r3, [pc, #88]	; (153fc <event_connection_prepare+0xf3c>)
   153a2:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   153a6:	1ad3      	subs	r3, r2, r3
   153a8:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   153aa:	2b01      	cmp	r3, #1
   153ac:	d95b      	bls.n	15466 <event_connection_prepare+0xfa6>
	return _radio.packet_rx[_radio.packet_rx_last];
   153ae:	4b13      	ldr	r3, [pc, #76]	; (153fc <event_connection_prepare+0xf3c>)
   153b0:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   153b4:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   153b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
		LL_ASSERT(radio_pdu_node_rx);
   153bc:	2b00      	cmp	r3, #0
   153be:	d054      	beq.n	1546a <event_connection_prepare+0xfaa>
		radio_pdu_node_rx->hdr.handle = conn->handle;
   153c0:	8c22      	ldrh	r2, [r4, #32]
   153c2:	80da      	strh	r2, [r3, #6]
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   153c4:	2201      	movs	r2, #1
   153c6:	711a      	strb	r2, [r3, #4]
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   153c8:	7a1a      	ldrb	r2, [r3, #8]
   153ca:	f042 0203 	orr.w	r2, r2, #3
   153ce:	721a      	strb	r2, [r3, #8]
		pdu_ctrl_rx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   153d0:	2206      	movs	r2, #6
   153d2:	725a      	strb	r2, [r3, #9]
		pdu_ctrl_rx->payload.llctrl.opcode =
   153d4:	220c      	movs	r2, #12
   153d6:	72da      	strb	r2, [r3, #11]
			conn->llcp_version.version_number;
   153d8:	f894 20a9 	ldrb.w	r2, [r4, #169]	; 0xa9
		pdu_ctrl_rx->payload.llctrl.ctrldata.version_ind.version_number =
   153dc:	731a      	strb	r2, [r3, #12]
		pdu_ctrl_rx->payload.llctrl.ctrldata.version_ind.company_id =
   153de:	f8b4 20aa 	ldrh.w	r2, [r4, #170]	; 0xaa
   153e2:	f8a3 200d 	strh.w	r2, [r3, #13]
		pdu_ctrl_rx->payload.llctrl.ctrldata.version_ind.sub_version_number =
   153e6:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
   153ea:	f8a3 200f 	strh.w	r2, [r3, #15]
		packet_rx_enqueue();
   153ee:	f7fe fa05 	bl	137fc <packet_rx_enqueue>
   153f2:	e6a6      	b.n	15142 <event_connection_prepare+0xc82>
   153f4:	20000fdc 	.word	0x20000fdc
   153f8:	000141ff 	.word	0x000141ff
   153fc:	20000e84 	.word	0x20000e84
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   15400:	48b9      	ldr	r0, [pc, #740]	; (156e8 <event_connection_prepare+0x1228>)
   15402:	f7f9 f9b6 	bl	e772 <mem_acquire>
		if (node_tx) {
   15406:	4601      	mov	r1, r0
   15408:	2800      	cmp	r0, #0
   1540a:	f43f ae9a 	beq.w	15142 <event_connection_prepare+0xc82>
			conn->llcp_ack = conn->llcp_req;
   1540e:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   15412:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
			conn->llcp_version.tx = 1;
   15416:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
   1541a:	f043 0301 	orr.w	r3, r3, #1
   1541e:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   15422:	7903      	ldrb	r3, [r0, #4]
   15424:	f043 0303 	orr.w	r3, r3, #3
   15428:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   1542a:	2306      	movs	r3, #6
   1542c:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->payload.llctrl.opcode =
   1542e:	230c      	movs	r3, #12
   15430:	71c3      	strb	r3, [r0, #7]
			pdu_ctrl_tx->payload.llctrl.ctrldata.version_ind.version_number =
   15432:	2309      	movs	r3, #9
   15434:	7203      	strb	r3, [r0, #8]
			pdu_ctrl_tx->payload.llctrl.ctrldata.version_ind.company_id =
   15436:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1543a:	7243      	strb	r3, [r0, #9]
   1543c:	7283      	strb	r3, [r0, #10]
			pdu_ctrl_tx->payload.llctrl.ctrldata.version_ind.sub_version_number =
   1543e:	72c3      	strb	r3, [r0, #11]
   15440:	7303      	strb	r3, [r0, #12]
			ctrl_tx_enqueue(conn, node_tx);
   15442:	4620      	mov	r0, r4
   15444:	f7fb fc26 	bl	10c94 <ctrl_tx_enqueue>
			conn->procedure_expire = conn->procedure_reload;
   15448:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
   1544c:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
   15450:	e677      	b.n	15142 <event_connection_prepare+0xc82>
		return (_radio.packet_rx_count -
   15452:	49a6      	ldr	r1, [pc, #664]	; (156ec <event_connection_prepare+0x122c>)
   15454:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
			_radio.packet_rx_last +
   15458:	f891 113d 	ldrb.w	r1, [r1, #317]	; 0x13d
		return (_radio.packet_rx_count -
   1545c:	1a5b      	subs	r3, r3, r1
			_radio.packet_rx_last +
   1545e:	fa52 f383 	uxtab	r3, r2, r3
   15462:	b2db      	uxtb	r3, r3
   15464:	e7a1      	b.n	153aa <event_connection_prepare+0xeea>
		return 0;
   15466:	2300      	movs	r3, #0
   15468:	e7a8      	b.n	153bc <event_connection_prepare+0xefc>
		LL_ASSERT(radio_pdu_node_rx);
   1546a:	4040      	eors	r0, r0
   1546c:	f380 8811 	msr	BASEPRI, r0
   15470:	f04f 0004 	mov.w	r0, #4
   15474:	df02      	svc	2
		LL_ASSERT(0);
   15476:	4040      	eors	r0, r0
   15478:	f380 8811 	msr	BASEPRI, r0
   1547c:	f04f 0004 	mov.w	r0, #4
   15480:	df02      	svc	2
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   15482:	4899      	ldr	r0, [pc, #612]	; (156e8 <event_connection_prepare+0x1228>)
   15484:	f7f9 f975 	bl	e772 <mem_acquire>
	if (node_tx) {
   15488:	4601      	mov	r1, r0
   1548a:	2800      	cmp	r0, #0
   1548c:	f43f ae59 	beq.w	15142 <event_connection_prepare+0xc82>
		conn->llcp_ack = conn->llcp_req;
   15490:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   15494:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   15498:	7903      	ldrb	r3, [r0, #4]
   1549a:	f043 0303 	orr.w	r3, r3, #3
   1549e:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata);
   154a0:	2301      	movs	r3, #1
   154a2:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->payload.llctrl.opcode =
   154a4:	2312      	movs	r3, #18
   154a6:	71c3      	strb	r3, [r0, #7]
		ctrl_tx_enqueue(conn, node_tx);
   154a8:	4620      	mov	r0, r4
   154aa:	f7fb fbf3 	bl	10c94 <ctrl_tx_enqueue>
		conn->procedure_expire = conn->procedure_reload;
   154ae:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
   154b2:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
   154b6:	e644      	b.n	15142 <event_connection_prepare+0xc82>
	if (conn->llcp.phy_upd_ind.initiate) {
   154b8:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
   154bc:	f012 0f01 	tst.w	r2, #1
   154c0:	d16b      	bne.n	1559a <event_connection_prepare+0x10da>
	} else if (((event_counter - conn->llcp.phy_upd_ind.instant) & 0xFFFF)
   154c2:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
   154c6:	1aeb      	subs	r3, r5, r3
   154c8:	b29b      	uxth	r3, r3
   154ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   154ce:	f6bf ae38 	bge.w	15142 <event_connection_prepare+0xc82>
		conn->llcp_ack = conn->llcp_req;
   154d2:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   154d6:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		old_tx = conn->phy_tx;
   154da:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
   154de:	f3c1 01c2 	ubfx	r1, r1, #3, #3
		old_rx = conn->phy_rx;
   154e2:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
   154e6:	f000 0007 	and.w	r0, r0, #7
		if (conn->llcp.phy_upd_ind.tx) {
   154ea:	f012 0f1c 	tst.w	r2, #28
   154ee:	d009      	beq.n	15504 <event_connection_prepare+0x1044>
			conn->phy_tx = conn->llcp.phy_upd_ind.tx;
   154f0:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   154f4:	f3c3 0382 	ubfx	r3, r3, #2, #3
   154f8:	f894 e038 	ldrb.w	lr, [r4, #56]	; 0x38
   154fc:	f363 0ec5 	bfi	lr, r3, #3, #3
   15500:	f884 e038 	strb.w	lr, [r4, #56]	; 0x38
		if (conn->llcp.phy_upd_ind.rx) {
   15504:	f012 0fe0 	tst.w	r2, #224	; 0xe0
   15508:	d008      	beq.n	1551c <event_connection_prepare+0x105c>
			conn->phy_rx = conn->llcp.phy_upd_ind.rx;
   1550a:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   1550e:	095b      	lsrs	r3, r3, #5
   15510:	f894 e03a 	ldrb.w	lr, [r4, #58]	; 0x3a
   15514:	f363 0e02 	bfi	lr, r3, #0, #3
   15518:	f884 e03a 	strb.w	lr, [r4, #58]	; 0x3a
		conn->phy_flags = conn->phy_pref_flags;
   1551c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   15520:	f3c3 1e80 	ubfx	lr, r3, #6, #1
   15524:	f36e 13c7 	bfi	r3, lr, #7, #1
   15528:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
		if (!conn->llcp.phy_upd_ind.cmd && (conn->phy_tx == old_tx) &&
   1552c:	f012 0f02 	tst.w	r2, #2
   15530:	d105      	bne.n	1553e <event_connection_prepare+0x107e>
   15532:	b2db      	uxtb	r3, r3
   15534:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   15538:	4299      	cmp	r1, r3
   1553a:	f000 80b0 	beq.w	1569e <event_connection_prepare+0x11de>
	if (_radio.packet_rx_acquire >=
   1553e:	4b6b      	ldr	r3, [pc, #428]	; (156ec <event_connection_prepare+0x122c>)
   15540:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   15544:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   15548:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   1554a:	429a      	cmp	r2, r3
   1554c:	f0c0 80af 	bcc.w	156ae <event_connection_prepare+0x11ee>
			_radio.packet_rx_last);
   15550:	4b66      	ldr	r3, [pc, #408]	; (156ec <event_connection_prepare+0x122c>)
   15552:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   15556:	1ad3      	subs	r3, r2, r3
   15558:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   1555a:	2b01      	cmp	r3, #1
   1555c:	f240 80b1 	bls.w	156c2 <event_connection_prepare+0x1202>
	return _radio.packet_rx[_radio.packet_rx_last];
   15560:	4b62      	ldr	r3, [pc, #392]	; (156ec <event_connection_prepare+0x122c>)
   15562:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   15566:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   1556a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
		LL_ASSERT(node_rx);
   1556e:	2b00      	cmp	r3, #0
   15570:	f000 80a9 	beq.w	156c6 <event_connection_prepare+0x1206>
		node_rx->hdr.handle = conn->handle;
   15574:	8c22      	ldrh	r2, [r4, #32]
   15576:	80da      	strh	r2, [r3, #6]
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   15578:	220c      	movs	r2, #12
   1557a:	711a      	strb	r2, [r3, #4]
		p->status = 0;
   1557c:	2200      	movs	r2, #0
   1557e:	72da      	strb	r2, [r3, #11]
		p->tx = conn->phy_tx;
   15580:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
   15584:	f3c2 02c2 	ubfx	r2, r2, #3, #3
   15588:	731a      	strb	r2, [r3, #12]
		p->rx = conn->phy_rx;
   1558a:	f894 203a 	ldrb.w	r2, [r4, #58]	; 0x3a
   1558e:	f3c2 0202 	ubfx	r2, r2, #0, #3
   15592:	735a      	strb	r2, [r3, #13]
		packet_rx_enqueue();
   15594:	f7fe f932 	bl	137fc <packet_rx_enqueue>
   15598:	e5d3      	b.n	15142 <event_connection_prepare+0xc82>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   1559a:	4853      	ldr	r0, [pc, #332]	; (156e8 <event_connection_prepare+0x1228>)
   1559c:	f7f9 f8e9 	bl	e772 <mem_acquire>
		if (node_tx) {
   155a0:	4680      	mov	r8, r0
   155a2:	2800      	cmp	r0, #0
   155a4:	f43f adcd 	beq.w	15142 <event_connection_prepare+0xc82>
			conn->llcp.phy_upd_ind.initiate = 0;
   155a8:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   155ac:	f36f 0300 	bfc	r3, #0, #1
   155b0:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
			if (!((conn->llcp.phy_upd_ind.tx |
   155b4:	b2db      	uxtb	r3, r3
   155b6:	f3c3 0282 	ubfx	r2, r3, #2, #3
   155ba:	ea52 1353 	orrs.w	r3, r2, r3, lsr #5
   155be:	d147      	bne.n	15650 <event_connection_prepare+0x1190>
				conn->llcp_ack = conn->llcp_req;
   155c0:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   155c4:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
				conn->llcp.phy_upd_ind.instant = 0;
   155c8:	2300      	movs	r3, #0
   155ca:	f8a4 307a 	strh.w	r3, [r4, #122]	; 0x7a
				if (conn->llcp.phy_upd_ind.cmd) {
   155ce:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   155d2:	f013 0f02 	tst.w	r3, #2
   155d6:	d041      	beq.n	1565c <event_connection_prepare+0x119c>
	if (_radio.packet_rx_acquire >=
   155d8:	4b44      	ldr	r3, [pc, #272]	; (156ec <event_connection_prepare+0x122c>)
   155da:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   155de:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   155e2:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   155e4:	429a      	cmp	r2, r3
   155e6:	d321      	bcc.n	1562c <event_connection_prepare+0x116c>
			_radio.packet_rx_last);
   155e8:	4b40      	ldr	r3, [pc, #256]	; (156ec <event_connection_prepare+0x122c>)
   155ea:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   155ee:	1ad3      	subs	r3, r2, r3
   155f0:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   155f2:	2b01      	cmp	r3, #1
   155f4:	d924      	bls.n	15640 <event_connection_prepare+0x1180>
	return _radio.packet_rx[_radio.packet_rx_last];
   155f6:	4b3d      	ldr	r3, [pc, #244]	; (156ec <event_connection_prepare+0x122c>)
   155f8:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   155fc:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   15600:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
					LL_ASSERT(node_rx);
   15604:	b1f3      	cbz	r3, 15644 <event_connection_prepare+0x1184>
					node_rx->hdr.handle = conn->handle;
   15606:	8c22      	ldrh	r2, [r4, #32]
   15608:	80da      	strh	r2, [r3, #6]
					node_rx->hdr.type =
   1560a:	220c      	movs	r2, #12
   1560c:	711a      	strb	r2, [r3, #4]
					p->status = 0;
   1560e:	2200      	movs	r2, #0
   15610:	72da      	strb	r2, [r3, #11]
					p->tx = conn->phy_tx;
   15612:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
   15616:	f3c2 02c2 	ubfx	r2, r2, #3, #3
   1561a:	731a      	strb	r2, [r3, #12]
					p->rx = conn->phy_rx;
   1561c:	f894 203a 	ldrb.w	r2, [r4, #58]	; 0x3a
   15620:	f3c2 0202 	ubfx	r2, r2, #0, #3
   15624:	735a      	strb	r2, [r3, #13]
					packet_rx_enqueue();
   15626:	f7fe f8e9 	bl	137fc <packet_rx_enqueue>
   1562a:	e017      	b.n	1565c <event_connection_prepare+0x119c>
		return (_radio.packet_rx_count -
   1562c:	492f      	ldr	r1, [pc, #188]	; (156ec <event_connection_prepare+0x122c>)
   1562e:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
			_radio.packet_rx_last +
   15632:	f891 113d 	ldrb.w	r1, [r1, #317]	; 0x13d
		return (_radio.packet_rx_count -
   15636:	1a5b      	subs	r3, r3, r1
			_radio.packet_rx_last +
   15638:	fa52 f383 	uxtab	r3, r2, r3
   1563c:	b2db      	uxtb	r3, r3
   1563e:	e7d8      	b.n	155f2 <event_connection_prepare+0x1132>
		return 0;
   15640:	2300      	movs	r3, #0
   15642:	e7df      	b.n	15604 <event_connection_prepare+0x1144>
					LL_ASSERT(node_rx);
   15644:	4040      	eors	r0, r0
   15646:	f380 8811 	msr	BASEPRI, r0
   1564a:	f04f 0004 	mov.w	r0, #4
   1564e:	df02      	svc	2
								 conn->latency +
   15650:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
				conn->llcp.phy_upd_ind.instant = event_counter +
   15652:	442b      	add	r3, r5
   15654:	b29b      	uxth	r3, r3
								 conn->latency +
   15656:	3306      	adds	r3, #6
				conn->llcp.phy_upd_ind.instant = event_counter +
   15658:	f8a4 307a 	strh.w	r3, [r4, #122]	; 0x7a
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1565c:	f898 3004 	ldrb.w	r3, [r8, #4]
   15660:	f043 0303 	orr.w	r3, r3, #3
   15664:	f888 3004 	strb.w	r3, [r8, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   15668:	2305      	movs	r3, #5
   1566a:	f888 3005 	strb.w	r3, [r8, #5]
			pdu_ctrl_tx->payload.llctrl.opcode =
   1566e:	2318      	movs	r3, #24
   15670:	f888 3007 	strb.w	r3, [r8, #7]
			p->m_to_s_phy = conn->llcp.phy_upd_ind.tx;
   15674:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   15678:	f3c3 0382 	ubfx	r3, r3, #2, #3
   1567c:	f888 3008 	strb.w	r3, [r8, #8]
			p->s_to_m_phy = conn->llcp.phy_upd_ind.rx;
   15680:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   15684:	f3c3 1342 	ubfx	r3, r3, #5, #3
   15688:	f888 3009 	strb.w	r3, [r8, #9]
			p->instant = conn->llcp.phy_upd_ind.instant;
   1568c:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
   15690:	f8a8 300a 	strh.w	r3, [r8, #10]
			ctrl_tx_enqueue(conn, node_tx);
   15694:	4641      	mov	r1, r8
   15696:	4620      	mov	r0, r4
   15698:	f7fb fafc 	bl	10c94 <ctrl_tx_enqueue>
   1569c:	e551      	b.n	15142 <event_connection_prepare+0xc82>
		    (conn->phy_rx == old_rx)) {
   1569e:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
   156a2:	f003 0307 	and.w	r3, r3, #7
		if (!conn->llcp.phy_upd_ind.cmd && (conn->phy_tx == old_tx) &&
   156a6:	4298      	cmp	r0, r3
   156a8:	f47f af49 	bne.w	1553e <event_connection_prepare+0x107e>
   156ac:	e549      	b.n	15142 <event_connection_prepare+0xc82>
		return (_radio.packet_rx_count -
   156ae:	490f      	ldr	r1, [pc, #60]	; (156ec <event_connection_prepare+0x122c>)
   156b0:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
			_radio.packet_rx_last +
   156b4:	f891 113d 	ldrb.w	r1, [r1, #317]	; 0x13d
		return (_radio.packet_rx_count -
   156b8:	1a5b      	subs	r3, r3, r1
			_radio.packet_rx_last +
   156ba:	fa52 f383 	uxtab	r3, r2, r3
   156be:	b2db      	uxtb	r3, r3
   156c0:	e74b      	b.n	1555a <event_connection_prepare+0x109a>
		return 0;
   156c2:	2300      	movs	r3, #0
   156c4:	e753      	b.n	1556e <event_connection_prepare+0x10ae>
		LL_ASSERT(node_rx);
   156c6:	4040      	eors	r0, r0
   156c8:	f380 8811 	msr	BASEPRI, r0
   156cc:	f04f 0004 	mov.w	r0, #4
   156d0:	df02      	svc	2
			LL_ASSERT(0);
   156d2:	4040      	eors	r0, r0
   156d4:	f380 8811 	msr	BASEPRI, r0
   156d8:	f04f 0004 	mov.w	r0, #4
   156dc:	df02      	svc	2
				conn->procedure_expire++;
   156de:	3301      	adds	r3, #1
   156e0:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
   156e4:	e555      	b.n	15192 <event_connection_prepare+0xcd2>
   156e6:	bf00      	nop
   156e8:	20000fdc 	.word	0x20000fdc
   156ec:	20000e84 	.word	0x20000e84
	if (_radio.packet_rx_acquire >=
   156f0:	4bbf      	ldr	r3, [pc, #764]	; (159f0 <event_connection_prepare+0x1530>)
   156f2:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   156f6:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   156fa:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   156fc:	429a      	cmp	r2, r3
   156fe:	d346      	bcc.n	1578e <event_connection_prepare+0x12ce>
			_radio.packet_rx_last);
   15700:	4bbb      	ldr	r3, [pc, #748]	; (159f0 <event_connection_prepare+0x1530>)
   15702:	f893 813d 	ldrb.w	r8, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   15706:	eba2 0808 	sub.w	r8, r2, r8
   1570a:	fa5f f888 	uxtb.w	r8, r8
		free_count_rx = packet_rx_acquired_count_get() +
   1570e:	fa1f f888 	uxth.w	r8, r8
			mem_free_count_get(_radio.pkt_rx_data_free);
   15712:	4bb7      	ldr	r3, [pc, #732]	; (159f0 <event_connection_prepare+0x1530>)
   15714:	f8d3 012c 	ldr.w	r0, [r3, #300]	; 0x12c
   15718:	f7f9 f85f 	bl	e7da <mem_free_count_get>
		free_count_rx = packet_rx_acquired_count_get() +
   1571c:	4440      	add	r0, r8
   1571e:	b280      	uxth	r0, r0
		LL_ASSERT(free_count_rx <= 0xFF);
   15720:	28ff      	cmp	r0, #255	; 0xff
   15722:	d840      	bhi.n	157a6 <event_connection_prepare+0x12e6>
		if (_radio.packet_rx_data_count != free_count_rx) {
   15724:	4bb2      	ldr	r3, [pc, #712]	; (159f0 <event_connection_prepare+0x1530>)
   15726:	f893 3136 	ldrb.w	r3, [r3, #310]	; 0x136
   1572a:	4298      	cmp	r0, r3
   1572c:	f040 8131 	bne.w	15992 <event_connection_prepare+0x14d2>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   15730:	48b0      	ldr	r0, [pc, #704]	; (159f4 <event_connection_prepare+0x1534>)
   15732:	f7f9 f81e 	bl	e772 <mem_acquire>
		if (!node_tx) {
   15736:	4601      	mov	r1, r0
   15738:	2800      	cmp	r0, #0
   1573a:	f000 812a 	beq.w	15992 <event_connection_prepare+0x14d2>
		conn->llcp_length.state = LLCP_LENGTH_STATE_ACK_WAIT;
   1573e:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   15742:	2201      	movs	r2, #1
   15744:	f362 0301 	bfi	r3, r2, #0, #2
   15748:	f884 30ea 	strb.w	r3, [r4, #234]	; 0xea
		conn->default_tx_octets = conn->llcp_length.tx_octets;
   1574c:	f8b4 30ee 	ldrh.w	r3, [r4, #238]	; 0xee
   15750:	85a3      	strh	r3, [r4, #44]	; 0x2c
		conn->default_tx_time = conn->llcp_length.tx_time;
   15752:	f8b4 30f2 	ldrh.w	r3, [r4, #242]	; 0xf2
   15756:	8663      	strh	r3, [r4, #50]	; 0x32
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   15758:	7903      	ldrb	r3, [r0, #4]
   1575a:	f043 0303 	orr.w	r3, r3, #3
   1575e:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   15760:	2309      	movs	r3, #9
   15762:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->payload.llctrl.opcode =
   15764:	2314      	movs	r3, #20
   15766:	71c3      	strb	r3, [r0, #7]
		lr->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
   15768:	231b      	movs	r3, #27
   1576a:	7203      	strb	r3, [r0, #8]
   1576c:	2300      	movs	r3, #0
   1576e:	7243      	strb	r3, [r0, #9]
		lr->max_tx_octets = conn->default_tx_octets;
   15770:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
   15772:	8183      	strh	r3, [r0, #12]
		lr->max_rx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX,
   15774:	2348      	movs	r3, #72	; 0x48
   15776:	7283      	strb	r3, [r0, #10]
   15778:	72ca      	strb	r2, [r1, #11]
		lr->max_tx_time = conn->default_tx_time;
   1577a:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   1577c:	81c3      	strh	r3, [r0, #14]
		ctrl_tx_enqueue(conn, node_tx);
   1577e:	4620      	mov	r0, r4
   15780:	f7fb fa88 	bl	10c94 <ctrl_tx_enqueue>
		conn->procedure_expire = conn->procedure_reload;
   15784:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
   15788:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
   1578c:	e101      	b.n	15992 <event_connection_prepare+0x14d2>
		return (_radio.packet_rx_count -
   1578e:	4b98      	ldr	r3, [pc, #608]	; (159f0 <event_connection_prepare+0x1530>)
   15790:	f893 813c 	ldrb.w	r8, [r3, #316]	; 0x13c
			_radio.packet_rx_last +
   15794:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_count -
   15798:	eba8 0803 	sub.w	r8, r8, r3
			_radio.packet_rx_last +
   1579c:	fa52 f888 	uxtab	r8, r2, r8
   157a0:	fa5f f888 	uxtb.w	r8, r8
   157a4:	e7b3      	b.n	1570e <event_connection_prepare+0x124e>
		LL_ASSERT(free_count_rx <= 0xFF);
   157a6:	4040      	eors	r0, r0
   157a8:	f380 8811 	msr	BASEPRI, r0
   157ac:	f04f 0004 	mov.w	r0, #4
   157b0:	df02      	svc	2
	if (_radio.packet_rx_acquire >=
   157b2:	4b8f      	ldr	r3, [pc, #572]	; (159f0 <event_connection_prepare+0x1530>)
   157b4:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   157b8:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   157bc:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   157be:	429a      	cmp	r2, r3
   157c0:	d352      	bcc.n	15868 <event_connection_prepare+0x13a8>
			_radio.packet_rx_last);
   157c2:	4b8b      	ldr	r3, [pc, #556]	; (159f0 <event_connection_prepare+0x1530>)
   157c4:	f893 813d 	ldrb.w	r8, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   157c8:	eba2 0808 	sub.w	r8, r2, r8
   157cc:	fa5f f888 	uxtb.w	r8, r8
		free_count_rx = packet_rx_acquired_count_get() +
   157d0:	fa1f f888 	uxth.w	r8, r8
			mem_free_count_get(_radio.pkt_rx_data_free);
   157d4:	4b86      	ldr	r3, [pc, #536]	; (159f0 <event_connection_prepare+0x1530>)
   157d6:	f8d3 012c 	ldr.w	r0, [r3, #300]	; 0x12c
   157da:	f7f8 fffe 	bl	e7da <mem_free_count_get>
		free_count_rx = packet_rx_acquired_count_get() +
   157de:	4440      	add	r0, r8
   157e0:	b280      	uxth	r0, r0
		LL_ASSERT(free_count_rx <= 0xFF);
   157e2:	28ff      	cmp	r0, #255	; 0xff
   157e4:	d84c      	bhi.n	15880 <event_connection_prepare+0x13c0>
		if (_radio.packet_rx_data_count != free_count_rx) {
   157e6:	4b82      	ldr	r3, [pc, #520]	; (159f0 <event_connection_prepare+0x1530>)
   157e8:	f893 3136 	ldrb.w	r3, [r3, #310]	; 0x136
   157ec:	4298      	cmp	r0, r3
   157ee:	d14d      	bne.n	1588c <event_connection_prepare+0x13cc>
		conn->llcp_length.ack = conn->llcp_length.req;
   157f0:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   157f4:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
		conn->procedure_expire = 0;
   157f8:	2100      	movs	r1, #0
   157fa:	f8a4 1044 	strh.w	r1, [r4, #68]	; 0x44
		_radio.conn_curr->pause_tx = 0;
   157fe:	f8df 81f0 	ldr.w	r8, [pc, #496]	; 159f0 <event_connection_prepare+0x1530>
   15802:	f8d8 3110 	ldr.w	r3, [r8, #272]	; 0x110
   15806:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   1580a:	f361 02c3 	bfi	r2, r1, #3, #1
   1580e:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
		conn->max_rx_octets = conn->llcp_length.rx_octets;
   15812:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
   15816:	8623      	strh	r3, [r4, #48]	; 0x30
		conn->max_rx_time = conn->llcp_length.rx_time;
   15818:	f8b4 30f0 	ldrh.w	r3, [r4, #240]	; 0xf0
   1581c:	86e3      	strh	r3, [r4, #54]	; 0x36
		free_count_conn = mem_free_count_get(_radio.conn_free);
   1581e:	f8d8 0108 	ldr.w	r0, [r8, #264]	; 0x108
   15822:	f7f8 ffda 	bl	e7da <mem_free_count_get>
		if (_radio.advertiser.conn) {
   15826:	f8d8 30c8 	ldr.w	r3, [r8, #200]	; 0xc8
   1582a:	b10b      	cbz	r3, 15830 <event_connection_prepare+0x1370>
			free_count_conn++;
   1582c:	3001      	adds	r0, #1
   1582e:	b280      	uxth	r0, r0
		if (_radio.scanner.conn) {
   15830:	4b6f      	ldr	r3, [pc, #444]	; (159f0 <event_connection_prepare+0x1530>)
   15832:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
   15836:	b10b      	cbz	r3, 1583c <event_connection_prepare+0x137c>
			free_count_conn++;
   15838:	3001      	adds	r0, #1
   1583a:	b280      	uxth	r0, r0
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
   1583c:	f8b4 9030 	ldrh.w	r9, [r4, #48]	; 0x30
   15840:	f109 090e 	add.w	r9, r9, #14
   15844:	fa1f f989 	uxth.w	r9, r9
   15848:	f029 0903 	bic.w	r9, r9, #3
   1584c:	fa1f f989 	uxth.w	r9, r9
		if (((free_count_conn + 1) == _radio.connection_count) ||
   15850:	3001      	adds	r0, #1
   15852:	4b67      	ldr	r3, [pc, #412]	; (159f0 <event_connection_prepare+0x1530>)
   15854:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
   15858:	4298      	cmp	r0, r3
   1585a:	d038      	beq.n	158ce <event_connection_prepare+0x140e>
		    (packet_rx_data_size > _radio.packet_rx_data_size)) {
   1585c:	4b64      	ldr	r3, [pc, #400]	; (159f0 <event_connection_prepare+0x1530>)
   1585e:	f8b3 3134 	ldrh.w	r3, [r3, #308]	; 0x134
		if (((free_count_conn + 1) == _radio.connection_count) ||
   15862:	4599      	cmp	r9, r3
   15864:	d833      	bhi.n	158ce <event_connection_prepare+0x140e>
   15866:	e066      	b.n	15936 <event_connection_prepare+0x1476>
		return (_radio.packet_rx_count -
   15868:	4b61      	ldr	r3, [pc, #388]	; (159f0 <event_connection_prepare+0x1530>)
   1586a:	f893 813c 	ldrb.w	r8, [r3, #316]	; 0x13c
			_radio.packet_rx_last +
   1586e:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_count -
   15872:	eba8 0803 	sub.w	r8, r8, r3
			_radio.packet_rx_last +
   15876:	fa52 f888 	uxtab	r8, r2, r8
   1587a:	fa5f f888 	uxtb.w	r8, r8
   1587e:	e7a7      	b.n	157d0 <event_connection_prepare+0x1310>
		LL_ASSERT(free_count_rx <= 0xFF);
   15880:	4040      	eors	r0, r0
   15882:	f380 8811 	msr	BASEPRI, r0
   15886:	f04f 0004 	mov.w	r0, #4
   1588a:	df02      	svc	2
			LL_ASSERT(0);
   1588c:	4040      	eors	r0, r0
   1588e:	f380 8811 	msr	BASEPRI, r0
   15892:	f04f 0004 	mov.w	r0, #4
   15896:	df02      	svc	2
					_radio.packet_rx_acquire -= 1;
   15898:	3b01      	subs	r3, #1
   1589a:	4a55      	ldr	r2, [pc, #340]	; (159f0 <event_connection_prepare+0x1530>)
   1589c:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
				node_rx = _radio.packet_rx[
   158a0:	4f53      	ldr	r7, [pc, #332]	; (159f0 <event_connection_prepare+0x1530>)
   158a2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
						_radio.packet_rx_acquire];
   158a6:	f897 213e 	ldrb.w	r2, [r7, #318]	; 0x13e
				node_rx = _radio.packet_rx[
   158aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
				mem_release(node_rx->hdr.onion.link,
   158ae:	f507 71a2 	add.w	r1, r7, #324	; 0x144
   158b2:	6818      	ldr	r0, [r3, #0]
   158b4:	f7f8 ff79 	bl	e7aa <mem_release>
				LL_ASSERT(_radio.link_rx_data_quota <
   158b8:	f897 3150 	ldrb.w	r3, [r7, #336]	; 0x150
   158bc:	f897 213c 	ldrb.w	r2, [r7, #316]	; 0x13c
   158c0:	3a01      	subs	r2, #1
   158c2:	4293      	cmp	r3, r2
   158c4:	da14      	bge.n	158f0 <event_connection_prepare+0x1430>
				_radio.link_rx_data_quota++;
   158c6:	3301      	adds	r3, #1
   158c8:	4a49      	ldr	r2, [pc, #292]	; (159f0 <event_connection_prepare+0x1530>)
   158ca:	f882 3150 	strb.w	r3, [r2, #336]	; 0x150
			while (_radio.packet_rx_acquire !=
   158ce:	4a48      	ldr	r2, [pc, #288]	; (159f0 <event_connection_prepare+0x1530>)
   158d0:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
				_radio.packet_rx_last) {
   158d4:	f892 213d 	ldrb.w	r2, [r2, #317]	; 0x13d
   158d8:	b2d2      	uxtb	r2, r2
			while (_radio.packet_rx_acquire !=
   158da:	4293      	cmp	r3, r2
   158dc:	d00e      	beq.n	158fc <event_connection_prepare+0x143c>
				if (_radio.packet_rx_acquire == 0) {
   158de:	2b00      	cmp	r3, #0
   158e0:	d1da      	bne.n	15898 <event_connection_prepare+0x13d8>
						_radio.packet_rx_count - 1;
   158e2:	4a43      	ldr	r2, [pc, #268]	; (159f0 <event_connection_prepare+0x1530>)
   158e4:	f892 313c 	ldrb.w	r3, [r2, #316]	; 0x13c
   158e8:	3b01      	subs	r3, #1
					_radio.packet_rx_acquire =
   158ea:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
   158ee:	e7d7      	b.n	158a0 <event_connection_prepare+0x13e0>
				LL_ASSERT(_radio.link_rx_data_quota <
   158f0:	4040      	eors	r0, r0
   158f2:	f380 8811 	msr	BASEPRI, r0
   158f6:	f04f 0004 	mov.w	r0, #4
   158fa:	df02      	svc	2
			if (conn->max_rx_octets < (PDU_AC_SIZE_MAX +
   158fc:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   158fe:	2b29      	cmp	r3, #41	; 0x29
   15900:	d85f      	bhi.n	159c2 <event_connection_prepare+0x1502>
				_radio.packet_rx_data_size =
   15902:	2234      	movs	r2, #52	; 0x34
   15904:	4b3a      	ldr	r3, [pc, #232]	; (159f0 <event_connection_prepare+0x1530>)
   15906:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				_radio.packet_rx_data_pool_size /
   1590a:	4b39      	ldr	r3, [pc, #228]	; (159f0 <event_connection_prepare+0x1530>)
   1590c:	f8b3 2132 	ldrh.w	r2, [r3, #306]	; 0x132
				_radio.packet_rx_data_size;
   15910:	f8b3 1134 	ldrh.w	r1, [r3, #308]	; 0x134
			_radio.packet_rx_data_count =
   15914:	fbb2 f2f1 	udiv	r2, r2, r1
   15918:	b2d2      	uxtb	r2, r2
   1591a:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
			LL_ASSERT(_radio.packet_rx_data_count);
   1591e:	2a00      	cmp	r2, #0
   15920:	d053      	beq.n	159ca <event_connection_prepare+0x150a>
			mem_init(_radio.pkt_rx_data_pool,
   15922:	4833      	ldr	r0, [pc, #204]	; (159f0 <event_connection_prepare+0x1530>)
   15924:	f500 7396 	add.w	r3, r0, #300	; 0x12c
   15928:	f8d0 0128 	ldr.w	r0, [r0, #296]	; 0x128
   1592c:	f7f8 fefc 	bl	e728 <mem_init>
			packet_rx_allocate(4);
   15930:	2004      	movs	r0, #4
   15932:	f7fb fc59 	bl	111e8 <packet_rx_allocate>
	if (_radio.packet_rx_acquire >=
   15936:	4b2e      	ldr	r3, [pc, #184]	; (159f0 <event_connection_prepare+0x1530>)
   15938:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   1593c:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   15940:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   15942:	429a      	cmp	r2, r3
   15944:	d347      	bcc.n	159d6 <event_connection_prepare+0x1516>
			_radio.packet_rx_last);
   15946:	4b2a      	ldr	r3, [pc, #168]	; (159f0 <event_connection_prepare+0x1530>)
   15948:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   1594c:	1ad3      	subs	r3, r2, r3
   1594e:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   15950:	2b01      	cmp	r3, #1
   15952:	d94a      	bls.n	159ea <event_connection_prepare+0x152a>
	return _radio.packet_rx[_radio.packet_rx_last];
   15954:	4b26      	ldr	r3, [pc, #152]	; (159f0 <event_connection_prepare+0x1530>)
   15956:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   1595a:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   1595e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
		LL_ASSERT(node_rx);
   15962:	2b00      	cmp	r3, #0
   15964:	d04a      	beq.n	159fc <event_connection_prepare+0x153c>
		node_rx->hdr.handle = conn->handle;
   15966:	8c22      	ldrh	r2, [r4, #32]
   15968:	80da      	strh	r2, [r3, #6]
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   1596a:	2201      	movs	r2, #1
   1596c:	711a      	strb	r2, [r3, #4]
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   1596e:	7a1a      	ldrb	r2, [r3, #8]
   15970:	f042 0203 	orr.w	r2, r2, #3
   15974:	721a      	strb	r2, [r3, #8]
		pdu_ctrl_rx->len = offsetof(struct pdu_data_llctrl,
   15976:	2209      	movs	r2, #9
   15978:	725a      	strb	r2, [r3, #9]
		pdu_ctrl_rx->payload.llctrl.opcode =
   1597a:	2215      	movs	r2, #21
   1597c:	72da      	strb	r2, [r3, #11]
		lr->max_rx_octets = conn->max_rx_octets;
   1597e:	8e22      	ldrh	r2, [r4, #48]	; 0x30
   15980:	819a      	strh	r2, [r3, #12]
		lr->max_tx_octets = conn->max_tx_octets;
   15982:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
   15984:	821a      	strh	r2, [r3, #16]
		lr->max_rx_time = conn->max_rx_time;
   15986:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
   15988:	81da      	strh	r2, [r3, #14]
		lr->max_tx_time = conn->max_tx_time;
   1598a:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
   1598c:	825a      	strh	r2, [r3, #18]
		packet_rx_enqueue();
   1598e:	f7fd ff35 	bl	137fc <packet_rx_enqueue>
	event_common_prepare(ticks_at_expire, remainder,
   15992:	1d23      	adds	r3, r4, #4
   15994:	68a1      	ldr	r1, [r4, #8]
			     (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle),
   15996:	8c22      	ldrh	r2, [r4, #32]
	event_common_prepare(ticks_at_expire, remainder,
   15998:	3207      	adds	r2, #7
   1599a:	b2d2      	uxtb	r2, r2
   1599c:	f994 001d 	ldrsb.w	r0, [r4, #29]
   159a0:	2800      	cmp	r0, #0
   159a2:	db37      	blt.n	15a14 <event_connection_prepare+0x1554>
   159a4:	4814      	ldr	r0, [pc, #80]	; (159f8 <event_connection_prepare+0x1538>)
   159a6:	9403      	str	r4, [sp, #12]
   159a8:	9002      	str	r0, [sp, #8]
   159aa:	9201      	str	r2, [sp, #4]
   159ac:	9100      	str	r1, [sp, #0]
   159ae:	4622      	mov	r2, r4
   159b0:	990a      	ldr	r1, [sp, #40]	; 0x28
   159b2:	4630      	mov	r0, r6
   159b4:	f7fe fc7e 	bl	142b4 <event_common_prepare>
	conn->event_counter = event_counter + 1;
   159b8:	3501      	adds	r5, #1
   159ba:	8465      	strh	r5, [r4, #34]	; 0x22
}
   159bc:	b00f      	add	sp, #60	; 0x3c
   159be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				_radio.packet_rx_data_size =
   159c2:	4b0b      	ldr	r3, [pc, #44]	; (159f0 <event_connection_prepare+0x1530>)
   159c4:	f8a3 9134 	strh.w	r9, [r3, #308]	; 0x134
   159c8:	e79f      	b.n	1590a <event_connection_prepare+0x144a>
			LL_ASSERT(_radio.packet_rx_data_count);
   159ca:	4040      	eors	r0, r0
   159cc:	f380 8811 	msr	BASEPRI, r0
   159d0:	f04f 0004 	mov.w	r0, #4
   159d4:	df02      	svc	2
		return (_radio.packet_rx_count -
   159d6:	4906      	ldr	r1, [pc, #24]	; (159f0 <event_connection_prepare+0x1530>)
   159d8:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
			_radio.packet_rx_last +
   159dc:	f891 113d 	ldrb.w	r1, [r1, #317]	; 0x13d
		return (_radio.packet_rx_count -
   159e0:	1a5b      	subs	r3, r3, r1
			_radio.packet_rx_last +
   159e2:	fa52 f383 	uxtab	r3, r2, r3
   159e6:	b2db      	uxtb	r3, r3
   159e8:	e7b2      	b.n	15950 <event_connection_prepare+0x1490>
		return 0;
   159ea:	2300      	movs	r3, #0
   159ec:	e7b9      	b.n	15962 <event_connection_prepare+0x14a2>
   159ee:	bf00      	nop
   159f0:	20000e84 	.word	0x20000e84
   159f4:	20000fdc 	.word	0x20000fdc
   159f8:	00015e71 	.word	0x00015e71
		LL_ASSERT(node_rx);
   159fc:	4040      	eors	r0, r0
   159fe:	f380 8811 	msr	BASEPRI, r0
   15a02:	f04f 0004 	mov.w	r0, #4
   15a06:	df02      	svc	2
		LL_ASSERT(0);
   15a08:	4040      	eors	r0, r0
   15a0a:	f380 8811 	msr	BASEPRI, r0
   15a0e:	f04f 0004 	mov.w	r0, #4
   15a12:	df02      	svc	2
	event_common_prepare(ticks_at_expire, remainder,
   15a14:	4800      	ldr	r0, [pc, #0]	; (15a18 <event_connection_prepare+0x1558>)
   15a16:	e7c6      	b.n	159a6 <event_connection_prepare+0x14e6>
   15a18:	00015fad 	.word	0x00015fad

00015a1c <event_slave_prepare>:
{
   15a1c:	b508      	push	{r3, lr}
	event_connection_prepare(ticks_at_expire, remainder, lazy, context);
   15a1e:	f7fe fd4f 	bl	144c0 <event_connection_prepare>
   15a22:	bd08      	pop	{r3, pc}

00015a24 <event_master_prepare>:
{
   15a24:	b508      	push	{r3, lr}
	event_connection_prepare(ticks_at_expire, remainder, lazy, context);
   15a26:	f7fe fd4b 	bl	144c0 <event_connection_prepare>
   15a2a:	bd08      	pop	{r3, pc}

00015a2c <event_scan_prepare>:
	LL_ASSERT(!_radio.ticker_id_prepare);
   15a2c:	4b20      	ldr	r3, [pc, #128]	; (15ab0 <event_scan_prepare+0x84>)
   15a2e:	7b1b      	ldrb	r3, [r3, #12]
   15a30:	bb23      	cbnz	r3, 15a7c <event_scan_prepare+0x50>
{
   15a32:	b530      	push	{r4, r5, lr}
   15a34:	b085      	sub	sp, #20
   15a36:	4605      	mov	r5, r0
	_radio.ticker_id_prepare = RADIO_TICKER_ID_SCAN;
   15a38:	4c1d      	ldr	r4, [pc, #116]	; (15ab0 <event_scan_prepare+0x84>)
   15a3a:	2306      	movs	r3, #6
   15a3c:	7323      	strb	r3, [r4, #12]
	event_common_prepare(ticks_at_expire, remainder,
   15a3e:	2200      	movs	r2, #0
   15a40:	9203      	str	r2, [sp, #12]
   15a42:	4a1c      	ldr	r2, [pc, #112]	; (15ab4 <event_scan_prepare+0x88>)
   15a44:	9202      	str	r2, [sp, #8]
   15a46:	9301      	str	r3, [sp, #4]
   15a48:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
   15a4c:	9300      	str	r3, [sp, #0]
   15a4e:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
   15a52:	f104 02cc 	add.w	r2, r4, #204	; 0xcc
   15a56:	f7fe fc2d 	bl	142b4 <event_common_prepare>
	if (_radio.scanner.conn) {
   15a5a:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
   15a5e:	b15b      	cbz	r3, 15a78 <event_scan_prepare+0x4c>
		if (_radio.scanner.hdr.ticks_xtal_to_start & ((u32_t)1 << 31)) {
   15a60:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
   15a64:	2b00      	cmp	r3, #0
   15a66:	db0f      	blt.n	15a88 <event_scan_prepare+0x5c>
		s_mfy_sched_after_mstr_free_offset_get.param =
   15a68:	4b13      	ldr	r3, [pc, #76]	; (15ab8 <event_scan_prepare+0x8c>)
   15a6a:	609d      	str	r5, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   15a6c:	2201      	movs	r2, #1
   15a6e:	4611      	mov	r1, r2
   15a70:	2000      	movs	r0, #0
   15a72:	f7f8 fd3d 	bl	e4f0 <mayfly_enqueue>
		LL_ASSERT(!retval);
   15a76:	b9a8      	cbnz	r0, 15aa4 <event_scan_prepare+0x78>
}
   15a78:	b005      	add	sp, #20
   15a7a:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(!_radio.ticker_id_prepare);
   15a7c:	4040      	eors	r0, r0
   15a7e:	f380 8811 	msr	BASEPRI, r0
   15a82:	f04f 0004 	mov.w	r0, #4
   15a86:	df02      	svc	2
				_radio.scanner.hdr.ticks_preempt_to_start;
   15a88:	f8d4 10d4 	ldr.w	r1, [r4, #212]	; 0xd4
				_radio.scanner.hdr.ticks_active_to_start :
   15a8c:	f8d4 20d0 	ldr.w	r2, [r4, #208]	; 0xd0
				((_radio.scanner.hdr.ticks_xtal_to_start &
   15a90:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
				  (~((u32_t)1 << 31))) -
   15a94:	4291      	cmp	r1, r2
   15a96:	bf2c      	ite	cs
   15a98:	ebc3 0301 	rsbcs	r3, r3, r1
   15a9c:	ebc3 0302 	rsbcc	r3, r3, r2
			ticks_at_expire_normal -=
   15aa0:	441d      	add	r5, r3
   15aa2:	e7e1      	b.n	15a68 <event_scan_prepare+0x3c>
		LL_ASSERT(!retval);
   15aa4:	4040      	eors	r0, r0
   15aa6:	f380 8811 	msr	BASEPRI, r0
   15aaa:	f04f 0004 	mov.w	r0, #4
   15aae:	df02      	svc	2
   15ab0:	20000e84 	.word	0x20000e84
   15ab4:	00016149 	.word	0x00016149
   15ab8:	2000bc28 	.word	0x2000bc28
   15abc:	00000000 	.word	0x00000000

00015ac0 <mayfly_xtal_stop_calc>:
{
   15ac0:	b530      	push	{r4, r5, lr}
   15ac2:	b08d      	sub	sp, #52	; 0x34
   15ac4:	4604      	mov	r4, r0
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   15ac6:	2302      	movs	r3, #2
   15ac8:	930b      	str	r3, [sp, #44]	; 0x2c
	ticker_id = 0xff;
   15aca:	23ff      	movs	r3, #255	; 0xff
   15acc:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
	ticks_to_expire = 0;
   15ad0:	2300      	movs	r3, #0
   15ad2:	930a      	str	r3, [sp, #40]	; 0x28
   15ad4:	e012      	b.n	15afc <mayfly_xtal_stop_calc+0x3c>
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
   15ad6:	2101      	movs	r1, #1
   15ad8:	2000      	movs	r0, #0
   15ada:	f7fa fc71 	bl	103c0 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
   15ade:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   15ae0:	2b02      	cmp	r3, #2
   15ae2:	d0f8      	beq.n	15ad6 <mayfly_xtal_stop_calc+0x16>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
   15ae4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   15ae6:	b9cb      	cbnz	r3, 15b1c <mayfly_xtal_stop_calc+0x5c>
	} while (ticker_id != 0xff &&
   15ae8:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
			       _radio.connection_count));
   15aec:	2aff      	cmp	r2, #255	; 0xff
   15aee:	d01b      	beq.n	15b28 <mayfly_xtal_stop_calc+0x68>
   15af0:	4b8b      	ldr	r3, [pc, #556]	; (15d20 <mayfly_xtal_stop_calc+0x260>)
   15af2:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
		 ticker_id >= (RADIO_TICKER_ID_FIRST_CONNECTION +
   15af6:	3307      	adds	r3, #7
	} while (ticker_id != 0xff &&
   15af8:	429a      	cmp	r2, r3
   15afa:	db15      	blt.n	15b28 <mayfly_xtal_stop_calc+0x68>
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
   15afc:	ab0b      	add	r3, sp, #44	; 0x2c
   15afe:	9302      	str	r3, [sp, #8]
   15b00:	4b88      	ldr	r3, [pc, #544]	; (15d24 <mayfly_xtal_stop_calc+0x264>)
   15b02:	9301      	str	r3, [sp, #4]
   15b04:	ab0a      	add	r3, sp, #40	; 0x28
   15b06:	9300      	str	r3, [sp, #0]
   15b08:	ab09      	add	r3, sp, #36	; 0x24
   15b0a:	f10d 0223 	add.w	r2, sp, #35	; 0x23
   15b0e:	2101      	movs	r1, #1
   15b10:	2000      	movs	r0, #0
   15b12:	f7fa fbd5 	bl	102c0 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
   15b16:	2802      	cmp	r0, #2
   15b18:	d1e4      	bne.n	15ae4 <mayfly_xtal_stop_calc+0x24>
   15b1a:	e7e0      	b.n	15ade <mayfly_xtal_stop_calc+0x1e>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
   15b1c:	4040      	eors	r0, r0
   15b1e:	f380 8811 	msr	BASEPRI, r0
   15b22:	f04f 0004 	mov.w	r0, #4
   15b26:	df02      	svc	2
	if ((ticker_id != 0xff) &&
   15b28:	2aff      	cmp	r2, #255	; 0xff
   15b2a:	d002      	beq.n	15b32 <mayfly_xtal_stop_calc+0x72>
	    (ticks_to_expire <
   15b2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	if ((ticker_id != 0xff) &&
   15b2e:	2ba8      	cmp	r3, #168	; 0xa8
   15b30:	d91a      	bls.n	15b68 <mayfly_xtal_stop_calc+0xa8>
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_JOB, 0);
   15b32:	2100      	movs	r1, #0
   15b34:	2001      	movs	r0, #1
   15b36:	f7fb fdcd 	bl	116d4 <mayfly_xtal_retain>
		if ((ticker_id != 0xff) && (ticker_id >= RADIO_TICKER_ID_ADV)) {
   15b3a:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
   15b3e:	1f53      	subs	r3, r2, #5
   15b40:	b2db      	uxtb	r3, r3
   15b42:	2bf9      	cmp	r3, #249	; 0xf9
   15b44:	d80e      	bhi.n	15b64 <mayfly_xtal_stop_calc+0xa4>
			if (ticker_id >= RADIO_TICKER_ID_FIRST_CONNECTION) {
   15b46:	2a06      	cmp	r2, #6
   15b48:	f200 80d1 	bhi.w	15cee <mayfly_xtal_stop_calc+0x22e>
			} else if (ticker_id == RADIO_TICKER_ID_ADV) {
   15b4c:	2a05      	cmp	r2, #5
   15b4e:	f000 80de 	beq.w	15d0e <mayfly_xtal_stop_calc+0x24e>
			} else if (ticker_id == RADIO_TICKER_ID_SCAN) {
   15b52:	2a06      	cmp	r2, #6
   15b54:	f040 80d5 	bne.w	15d02 <mayfly_xtal_stop_calc+0x242>
				hdr = &_radio.scanner.hdr;
   15b58:	4873      	ldr	r0, [pc, #460]	; (15d28 <mayfly_xtal_stop_calc+0x268>)
			prepare_normal_set(hdr, RADIO_TICKER_USER_ID_JOB,
   15b5a:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
   15b5e:	2101      	movs	r1, #1
   15b60:	f7fe fb80 	bl	14264 <prepare_normal_set>
}
   15b64:	b00d      	add	sp, #52	; 0x34
   15b66:	bd30      	pop	{r4, r5, pc}
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_JOB, 1);
   15b68:	2101      	movs	r1, #1
   15b6a:	4608      	mov	r0, r1
   15b6c:	f7fb fdb2 	bl	116d4 <mayfly_xtal_retain>
		if (ticker_id >= RADIO_TICKER_ID_ADV) {
   15b70:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   15b74:	2b04      	cmp	r3, #4
   15b76:	d9f5      	bls.n	15b64 <mayfly_xtal_stop_calc+0xa4>
			u8_t ticker_id_current = ((u32_t)params & 0xff);
   15b78:	b2e4      	uxtb	r4, r4
			if (ticker_id >= RADIO_TICKER_ID_FIRST_CONNECTION) {
   15b7a:	2b06      	cmp	r3, #6
   15b7c:	d82a      	bhi.n	15bd4 <mayfly_xtal_stop_calc+0x114>
			} else if (ticker_id == RADIO_TICKER_ID_ADV) {
   15b7e:	2b05      	cmp	r3, #5
   15b80:	d03a      	beq.n	15bf8 <mayfly_xtal_stop_calc+0x138>
			} else if (ticker_id == RADIO_TICKER_ID_SCAN) {
   15b82:	2b06      	cmp	r3, #6
   15b84:	d132      	bne.n	15bec <mayfly_xtal_stop_calc+0x12c>
				hdr = &_radio.scanner.hdr;
   15b86:	4968      	ldr	r1, [pc, #416]	; (15d28 <mayfly_xtal_stop_calc+0x268>)
			struct connection *conn = NULL;
   15b88:	2500      	movs	r5, #0
				hdr->ticks_preempt_to_start;
   15b8a:	688b      	ldr	r3, [r1, #8]
				hdr->ticks_active_to_start :
   15b8c:	684a      	ldr	r2, [r1, #4]
			ticks_prepare_to_start =
   15b8e:	429a      	cmp	r2, r3
   15b90:	bf38      	it	cc
   15b92:	461a      	movcc	r2, r3
			if ((hdr->ticks_xtal_to_start & ((u32_t)1 << 31)) != 0) {
   15b94:	680b      	ldr	r3, [r1, #0]
   15b96:	2b00      	cmp	r3, #0
   15b98:	db31      	blt.n	15bfe <mayfly_xtal_stop_calc+0x13e>
				if (hdr->ticks_xtal_to_start >
   15b9a:	429a      	cmp	r2, r3
   15b9c:	d336      	bcc.n	15c0c <mayfly_xtal_stop_calc+0x14c>
			if (ticker_id_current >= RADIO_TICKER_ID_FIRST_CONNECTION) {
   15b9e:	2c06      	cmp	r4, #6
   15ba0:	d84e      	bhi.n	15c40 <mayfly_xtal_stop_calc+0x180>
			struct connection *conn_curr = NULL;
   15ba2:	2400      	movs	r4, #0
			if ((conn) && (conn_curr) &&
   15ba4:	2d00      	cmp	r5, #0
   15ba6:	d0dd      	beq.n	15b64 <mayfly_xtal_stop_calc+0xa4>
   15ba8:	2c00      	cmp	r4, #0
   15baa:	d0db      	beq.n	15b64 <mayfly_xtal_stop_calc+0xa4>
			    (conn_curr->conn_interval == conn->conn_interval)) {
   15bac:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   15bae:	8caa      	ldrh	r2, [r5, #36]	; 0x24
			if ((conn) && (conn_curr) &&
   15bb0:	4293      	cmp	r3, r2
   15bb2:	d1d7      	bne.n	15b64 <mayfly_xtal_stop_calc+0xa4>
					TICKER_US_TO_TICKS(conn->conn_interval * 1250);
   15bb4:	b292      	uxth	r2, r2
   15bb6:	485d      	ldr	r0, [pc, #372]	; (15d2c <mayfly_xtal_stop_calc+0x26c>)
   15bb8:	fba2 0100 	umull	r0, r1, r2, r0
   15bbc:	f240 1323 	movw	r3, #291	; 0x123
   15bc0:	fb03 1102 	mla	r1, r3, r2, r1
   15bc4:	a354      	add	r3, pc, #336	; (adr r3, 15d18 <mayfly_xtal_stop_calc+0x258>)
   15bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
   15bca:	f7eb fa97 	bl	10fc <__aeabi_uldivmod>
				u32_t ticks_conn_interval =
   15bce:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
				while (ticks_to_expire > ticks_conn_interval) {
   15bd2:	e050      	b.n	15c76 <mayfly_xtal_stop_calc+0x1b6>
				conn = mem_get(_radio.conn_pool,
   15bd4:	3b07      	subs	r3, #7
   15bd6:	b29a      	uxth	r2, r3
   15bd8:	f44f 71aa 	mov.w	r1, #340	; 0x154
   15bdc:	4b50      	ldr	r3, [pc, #320]	; (15d20 <mayfly_xtal_stop_calc+0x260>)
   15bde:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
   15be2:	f7f8 fe03 	bl	e7ec <mem_get>
   15be6:	4605      	mov	r5, r0
				hdr = &conn->hdr;
   15be8:	4601      	mov	r1, r0
   15bea:	e7ce      	b.n	15b8a <mayfly_xtal_stop_calc+0xca>
				LL_ASSERT(0);
   15bec:	4040      	eors	r0, r0
   15bee:	f380 8811 	msr	BASEPRI, r0
   15bf2:	f04f 0004 	mov.w	r0, #4
   15bf6:	df02      	svc	2
				hdr = &_radio.advertiser.hdr;
   15bf8:	494d      	ldr	r1, [pc, #308]	; (15d30 <mayfly_xtal_stop_calc+0x270>)
			struct connection *conn = NULL;
   15bfa:	2500      	movs	r5, #0
   15bfc:	e7c5      	b.n	15b8a <mayfly_xtal_stop_calc+0xca>
				ticks_to_expire -= ((hdr->ticks_xtal_to_start &
   15bfe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
						     (~((u32_t)1 << 31))) -
   15c02:	1ad3      	subs	r3, r2, r3
				ticks_to_expire -= ((hdr->ticks_xtal_to_start &
   15c04:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   15c06:	4413      	add	r3, r2
   15c08:	930a      	str	r3, [sp, #40]	; 0x28
   15c0a:	e7c8      	b.n	15b9e <mayfly_xtal_stop_calc+0xde>
					u32_t ticks_drift_plus =
   15c0c:	1a9b      	subs	r3, r3, r2
						ticker_update(
   15c0e:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
   15c12:	b29b      	uxth	r3, r3
					ticker_status =
   15c14:	9106      	str	r1, [sp, #24]
   15c16:	4947      	ldr	r1, [pc, #284]	; (15d34 <mayfly_xtal_stop_calc+0x274>)
   15c18:	9105      	str	r1, [sp, #20]
   15c1a:	2000      	movs	r0, #0
   15c1c:	9004      	str	r0, [sp, #16]
   15c1e:	9003      	str	r0, [sp, #12]
   15c20:	9302      	str	r3, [sp, #8]
   15c22:	9001      	str	r0, [sp, #4]
   15c24:	9000      	str	r0, [sp, #0]
   15c26:	2101      	movs	r1, #1
   15c28:	f7fa fac0 	bl	101ac <ticker_update>
					LL_ASSERT((TICKER_STATUS_SUCCESS ==
   15c2c:	2800      	cmp	r0, #0
   15c2e:	d0b6      	beq.n	15b9e <mayfly_xtal_stop_calc+0xde>
   15c30:	2802      	cmp	r0, #2
   15c32:	d0b4      	beq.n	15b9e <mayfly_xtal_stop_calc+0xde>
   15c34:	4040      	eors	r0, r0
   15c36:	f380 8811 	msr	BASEPRI, r0
   15c3a:	f04f 0004 	mov.w	r0, #4
   15c3e:	df02      	svc	2
					mem_get(_radio.conn_pool,
   15c40:	3c07      	subs	r4, #7
				conn_curr =
   15c42:	b2a2      	uxth	r2, r4
   15c44:	f44f 71aa 	mov.w	r1, #340	; 0x154
   15c48:	4b35      	ldr	r3, [pc, #212]	; (15d20 <mayfly_xtal_stop_calc+0x260>)
   15c4a:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
   15c4e:	f7f8 fdcd 	bl	e7ec <mem_get>
   15c52:	4604      	mov	r4, r0
					conn_curr->hdr.ticks_preempt_to_start;
   15c54:	6883      	ldr	r3, [r0, #8]
					conn_curr->hdr.ticks_active_to_start :
   15c56:	6842      	ldr	r2, [r0, #4]
				ticks_prepare_to_start =
   15c58:	429a      	cmp	r2, r3
   15c5a:	bf38      	it	cc
   15c5c:	461a      	movcc	r2, r3
				if ((conn_curr->hdr.ticks_xtal_to_start &
   15c5e:	6803      	ldr	r3, [r0, #0]
   15c60:	2b00      	cmp	r3, #0
   15c62:	da9f      	bge.n	15ba4 <mayfly_xtal_stop_calc+0xe4>
						((conn_curr->hdr.ticks_xtal_to_start &
   15c64:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
						  (~((u32_t)1 << 31))) -
   15c68:	1a9b      	subs	r3, r3, r2
					ticks_to_expire +=
   15c6a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   15c6c:	4413      	add	r3, r2
   15c6e:	930a      	str	r3, [sp, #40]	; 0x28
   15c70:	e798      	b.n	15ba4 <mayfly_xtal_stop_calc+0xe4>
					ticks_to_expire -= ticks_conn_interval;
   15c72:	1a1b      	subs	r3, r3, r0
   15c74:	930a      	str	r3, [sp, #40]	; 0x28
				while (ticks_to_expire > ticks_conn_interval) {
   15c76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   15c78:	4298      	cmp	r0, r3
   15c7a:	d3fa      	bcc.n	15c72 <mayfly_xtal_stop_calc+0x1b2>
   15c7c:	f994 101d 	ldrsb.w	r1, [r4, #29]
				if (conn_curr->role && !conn->role &&
   15c80:	2900      	cmp	r1, #0
   15c82:	db1c      	blt.n	15cbe <mayfly_xtal_stop_calc+0x1fe>
				} else if (!conn_curr->role && conn->role &&
   15c84:	2900      	cmp	r1, #0
   15c86:	f6ff af6d 	blt.w	15b64 <mayfly_xtal_stop_calc+0xa4>
   15c8a:	f995 201d 	ldrsb.w	r2, [r5, #29]
   15c8e:	2a00      	cmp	r2, #0
   15c90:	f6bf af68 	bge.w	15b64 <mayfly_xtal_stop_calc+0xa4>
					     conn_curr->hdr.ticks_slot))) {
   15c94:	68e2      	ldr	r2, [r4, #12]
								625) +
   15c96:	323b      	adds	r2, #59	; 0x3b
				} else if (!conn_curr->role && conn->role &&
   15c98:	4293      	cmp	r3, r2
   15c9a:	f4bf af63 	bcs.w	15b64 <mayfly_xtal_stop_calc+0xa4>
					status = conn_update_req(conn);
   15c9e:	4628      	mov	r0, r5
   15ca0:	f7fb f852 	bl	10d48 <conn_update_req>
					if ((status == 2) &&
   15ca4:	2802      	cmp	r0, #2
   15ca6:	f47f af5d 	bne.w	15b64 <mayfly_xtal_stop_calc+0xa4>
   15caa:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
   15cae:	f013 0f02 	tst.w	r3, #2
   15cb2:	f43f af57 	beq.w	15b64 <mayfly_xtal_stop_calc+0xa4>
						conn_update_req(conn_curr);
   15cb6:	4620      	mov	r0, r4
   15cb8:	f7fb f846 	bl	10d48 <conn_update_req>
   15cbc:	e752      	b.n	15b64 <mayfly_xtal_stop_calc+0xa4>
				if (conn_curr->role && !conn->role &&
   15cbe:	f995 201d 	ldrsb.w	r2, [r5, #29]
   15cc2:	2a00      	cmp	r2, #0
   15cc4:	dbde      	blt.n	15c84 <mayfly_xtal_stop_calc+0x1c4>
				      conn_curr->hdr.ticks_slot))) {
   15cc6:	68e2      	ldr	r2, [r4, #12]
							 625) +
   15cc8:	323b      	adds	r2, #59	; 0x3b
				if (conn_curr->role && !conn->role &&
   15cca:	4293      	cmp	r3, r2
   15ccc:	d2da      	bcs.n	15c84 <mayfly_xtal_stop_calc+0x1c4>
					status = conn_update_req(conn_curr);
   15cce:	4620      	mov	r0, r4
   15cd0:	f7fb f83a 	bl	10d48 <conn_update_req>
					if ((status == 2) &&
   15cd4:	2802      	cmp	r0, #2
   15cd6:	f47f af45 	bne.w	15b64 <mayfly_xtal_stop_calc+0xa4>
   15cda:	f895 30a8 	ldrb.w	r3, [r5, #168]	; 0xa8
   15cde:	f013 0f02 	tst.w	r3, #2
   15ce2:	f43f af3f 	beq.w	15b64 <mayfly_xtal_stop_calc+0xa4>
						conn_update_req(conn);
   15ce6:	4628      	mov	r0, r5
   15ce8:	f7fb f82e 	bl	10d48 <conn_update_req>
   15cec:	e73a      	b.n	15b64 <mayfly_xtal_stop_calc+0xa4>
				conn = mem_get(_radio.conn_pool,
   15cee:	3a07      	subs	r2, #7
   15cf0:	b292      	uxth	r2, r2
   15cf2:	f44f 71aa 	mov.w	r1, #340	; 0x154
   15cf6:	4b0a      	ldr	r3, [pc, #40]	; (15d20 <mayfly_xtal_stop_calc+0x260>)
   15cf8:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
   15cfc:	f7f8 fd76 	bl	e7ec <mem_get>
   15d00:	e72b      	b.n	15b5a <mayfly_xtal_stop_calc+0x9a>
				LL_ASSERT(0);
   15d02:	4040      	eors	r0, r0
   15d04:	f380 8811 	msr	BASEPRI, r0
   15d08:	f04f 0004 	mov.w	r0, #4
   15d0c:	df02      	svc	2
				hdr = &_radio.advertiser.hdr;
   15d0e:	4808      	ldr	r0, [pc, #32]	; (15d30 <mayfly_xtal_stop_calc+0x270>)
   15d10:	e723      	b.n	15b5a <mayfly_xtal_stop_calc+0x9a>
   15d12:	bf00      	nop
   15d14:	f3af 8000 	nop.w
   15d18:	1afd498d 	.word	0x1afd498d
   15d1c:	00000007 	.word	0x00000007
   15d20:	20000e84 	.word	0x20000e84
   15d24:	00010af5 	.word	0x00010af5
   15d28:	20000f50 	.word	0x20000f50
   15d2c:	09ce5400 	.word	0x09ce5400
   15d30:	20000e98 	.word	0x20000e98
   15d34:	00010b21 	.word	0x00010b21

00015d38 <preempt_calc>:
{
   15d38:	b570      	push	{r4, r5, r6, lr}
   15d3a:	4605      	mov	r5, r0
   15d3c:	460e      	mov	r6, r1
   15d3e:	4614      	mov	r4, r2
		ticker_ticks_diff_get(ticker_ticks_now_get(), ticks_at_expire);
   15d40:	f7fa fb4e 	bl	103e0 <ticker_ticks_now_get>
	u32_t diff =
   15d44:	4621      	mov	r1, r4
   15d46:	f7fa fb4f 	bl	103e8 <ticker_ticks_diff_get>
	diff += 3;
   15d4a:	1cc4      	adds	r4, r0, #3
	if (diff > TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US)) {
   15d4c:	2c09      	cmp	r4, #9
   15d4e:	d801      	bhi.n	15d54 <preempt_calc+0x1c>
	return 0;
   15d50:	2000      	movs	r0, #0
   15d52:	bd70      	pop	{r4, r5, r6, pc}
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_WORKER, 0);
   15d54:	2100      	movs	r1, #0
   15d56:	4608      	mov	r0, r1
   15d58:	f7fb fcbc 	bl	116d4 <mayfly_xtal_retain>
		prepare_normal_set(hdr, RADIO_TICKER_USER_ID_WORKER, ticker_id);
   15d5c:	4632      	mov	r2, r6
   15d5e:	2100      	movs	r1, #0
   15d60:	4628      	mov	r0, r5
   15d62:	f7fe fa7f 	bl	14264 <prepare_normal_set>
		diff += hdr->ticks_preempt_to_start;
   15d66:	68ab      	ldr	r3, [r5, #8]
   15d68:	441c      	add	r4, r3
		if (diff <
   15d6a:	2c26      	cmp	r4, #38	; 0x26
   15d6c:	d802      	bhi.n	15d74 <preempt_calc+0x3c>
			hdr->ticks_preempt_to_start = diff;
   15d6e:	60ac      	str	r4, [r5, #8]
		return 1;
   15d70:	2001      	movs	r0, #1
   15d72:	bd70      	pop	{r4, r5, r6, pc}
   15d74:	2001      	movs	r0, #1
}
   15d76:	bd70      	pop	{r4, r5, r6, pc}

00015d78 <event_adv>:
{
   15d78:	b538      	push	{r3, r4, r5, lr}
	LL_ASSERT(_radio.role == ROLE_NONE);
   15d7a:	4b3b      	ldr	r3, [pc, #236]	; (15e68 <event_adv+0xf0>)
   15d7c:	7bdb      	ldrb	r3, [r3, #15]
   15d7e:	2b00      	cmp	r3, #0
   15d80:	d142      	bne.n	15e08 <event_adv+0x90>
	LL_ASSERT(_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV);
   15d82:	4b39      	ldr	r3, [pc, #228]	; (15e68 <event_adv+0xf0>)
   15d84:	7b1b      	ldrb	r3, [r3, #12]
   15d86:	b2db      	uxtb	r3, r3
   15d88:	2b05      	cmp	r3, #5
   15d8a:	d143      	bne.n	15e14 <event_adv+0x9c>
   15d8c:	4605      	mov	r5, r0
	_radio.role = ROLE_ADV;
   15d8e:	4c36      	ldr	r4, [pc, #216]	; (15e68 <event_adv+0xf0>)
   15d90:	2101      	movs	r1, #1
   15d92:	73e1      	strb	r1, [r4, #15]
	_radio.ticker_id_prepare = 0;
   15d94:	2300      	movs	r3, #0
   15d96:	7323      	strb	r3, [r4, #12]
	_radio.ticker_id_event = RADIO_TICKER_ID_ADV;
   15d98:	2305      	movs	r3, #5
   15d9a:	7363      	strb	r3, [r4, #13]
	_radio.ticks_anchor = ticks_at_expire;
   15d9c:	6060      	str	r0, [r4, #4]
	adv_scan_configure(_radio.advertiser.phy_p, 1);
   15d9e:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
   15da2:	f000 0007 	and.w	r0, r0, #7
   15da6:	f7fb fd5b 	bl	11860 <adv_scan_configure>
	_radio.advertiser.chan_map_current = _radio.advertiser.chan_map;
   15daa:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
   15dae:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   15db2:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
   15db6:	f363 0243 	bfi	r2, r3, #1, #3
   15dba:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
	adv_setup();
   15dbe:	f7fc f841 	bl	11e44 <adv_setup>
	if (ctrl_rl_enabled()) {
   15dc2:	f003 fa43 	bl	1924c <ctrl_rl_enabled>
   15dc6:	bb58      	cbnz	r0, 15e20 <event_adv+0xa8>
	if (_radio.advertiser.filter_policy) {
   15dc8:	4b27      	ldr	r3, [pc, #156]	; (15e68 <event_adv+0xf0>)
   15dca:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   15dce:	f013 0fc0 	tst.w	r3, #192	; 0xc0
   15dd2:	d134      	bne.n	15e3e <event_adv+0xc6>
	remainder_us = radio_tmr_start(1,
   15dd4:	4c24      	ldr	r4, [pc, #144]	; (15e68 <event_adv+0xf0>)
   15dd6:	68a2      	ldr	r2, [r4, #8]
   15dd8:	f105 0109 	add.w	r1, r5, #9
   15ddc:	2001      	movs	r0, #1
   15dde:	f7f8 ffeb 	bl	edb8 <radio_tmr_start>
	radio_tmr_end_capture();
   15de2:	f7f9 f89b 	bl	ef1c <radio_tmr_end_capture>
	if (preempt_calc(&_radio.advertiser.hdr, RADIO_TICKER_ID_ADV,
   15de6:	462a      	mov	r2, r5
   15de8:	2105      	movs	r1, #5
   15dea:	f104 0014 	add.w	r0, r4, #20
   15dee:	f7ff ffa3 	bl	15d38 <preempt_calc>
   15df2:	bb68      	cbnz	r0, 15e50 <event_adv+0xd8>
		ticker_status =
   15df4:	2300      	movs	r3, #0
   15df6:	4a1d      	ldr	r2, [pc, #116]	; (15e6c <event_adv+0xf4>)
   15df8:	4619      	mov	r1, r3
   15dfa:	4618      	mov	r0, r3
   15dfc:	f7fa faa4 	bl	10348 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   15e00:	b108      	cbz	r0, 15e06 <event_adv+0x8e>
   15e02:	2802      	cmp	r0, #2
   15e04:	d129      	bne.n	15e5a <event_adv+0xe2>
   15e06:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(_radio.role == ROLE_NONE);
   15e08:	4040      	eors	r0, r0
   15e0a:	f380 8811 	msr	BASEPRI, r0
   15e0e:	f04f 0004 	mov.w	r0, #4
   15e12:	df02      	svc	2
	LL_ASSERT(_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV);
   15e14:	4040      	eors	r0, r0
   15e16:	f380 8811 	msr	BASEPRI, r0
   15e1a:	f04f 0004 	mov.w	r0, #4
   15e1e:	df02      	svc	2
			ctrl_filter_get(!!(_radio.advertiser.filter_policy));
   15e20:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
   15e24:	f013 0fc0 	tst.w	r3, #192	; 0xc0
		struct ll_filter *filter =
   15e28:	bf14      	ite	ne
   15e2a:	2001      	movne	r0, #1
   15e2c:	2000      	moveq	r0, #0
   15e2e:	f003 f80f 	bl	18e50 <ctrl_filter_get>
		radio_filter_configure(filter->enable_bitmask,
   15e32:	1c82      	adds	r2, r0, #2
   15e34:	7841      	ldrb	r1, [r0, #1]
   15e36:	7800      	ldrb	r0, [r0, #0]
   15e38:	f7f8 ff40 	bl	ecbc <radio_filter_configure>
   15e3c:	e7ca      	b.n	15dd4 <event_adv+0x5c>
		struct ll_filter *wl = ctrl_filter_get(true);
   15e3e:	2001      	movs	r0, #1
   15e40:	f003 f806 	bl	18e50 <ctrl_filter_get>
		radio_filter_configure(wl->enable_bitmask,
   15e44:	1c82      	adds	r2, r0, #2
   15e46:	7841      	ldrb	r1, [r0, #1]
   15e48:	7800      	ldrb	r0, [r0, #0]
   15e4a:	f7f8 ff37 	bl	ecbc <radio_filter_configure>
   15e4e:	e7c1      	b.n	15dd4 <event_adv+0x5c>
		_radio.state = STATE_STOP;
   15e50:	2204      	movs	r2, #4
   15e52:	7422      	strb	r2, [r4, #16]
		radio_disable();
   15e54:	f7f8 fea2 	bl	eb9c <radio_disable>
   15e58:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   15e5a:	4040      	eors	r0, r0
   15e5c:	f380 8811 	msr	BASEPRI, r0
   15e60:	f04f 0004 	mov.w	r0, #4
   15e64:	df02      	svc	2
   15e66:	bf00      	nop
   15e68:	20000e84 	.word	0x20000e84
   15e6c:	00011321 	.word	0x00011321

00015e70 <event_master>:
	LL_ASSERT(_radio.role == ROLE_NONE);
   15e70:	4a4c      	ldr	r2, [pc, #304]	; (15fa4 <event_master+0x134>)
   15e72:	7bd2      	ldrb	r2, [r2, #15]
   15e74:	2a00      	cmp	r2, #0
   15e76:	d174      	bne.n	15f62 <event_master+0xf2>
{
   15e78:	b530      	push	{r4, r5, lr}
   15e7a:	b085      	sub	sp, #20
	LL_ASSERT(_radio.ticker_id_prepare ==
   15e7c:	4a49      	ldr	r2, [pc, #292]	; (15fa4 <event_master+0x134>)
   15e7e:	7b12      	ldrb	r2, [r2, #12]
   15e80:	b2d2      	uxtb	r2, r2
   15e82:	8c19      	ldrh	r1, [r3, #32]
   15e84:	1dcc      	adds	r4, r1, #7
   15e86:	42a2      	cmp	r2, r4
   15e88:	d171      	bne.n	15f6e <event_master+0xfe>
   15e8a:	461c      	mov	r4, r3
   15e8c:	4605      	mov	r5, r0
	_radio.role = ROLE_MASTER;
   15e8e:	4b45      	ldr	r3, [pc, #276]	; (15fa4 <event_master+0x134>)
   15e90:	2204      	movs	r2, #4
   15e92:	73da      	strb	r2, [r3, #15]
	_radio.state = STATE_TX;
   15e94:	2002      	movs	r0, #2
   15e96:	7418      	strb	r0, [r3, #16]
	_radio.ticker_id_prepare = 0;
   15e98:	2200      	movs	r2, #0
   15e9a:	731a      	strb	r2, [r3, #12]
	    (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
   15e9c:	3107      	adds	r1, #7
   15e9e:	b2c9      	uxtb	r1, r1
	_radio.ticker_id_event =
   15ea0:	7359      	strb	r1, [r3, #13]
	_radio.ticks_anchor = ticks_at_expire;
   15ea2:	605d      	str	r5, [r3, #4]
	_radio.packet_counter = 0;
   15ea4:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
	_radio.crc_expire = 0;
   15ea8:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
	_radio.conn_curr = conn;
   15eac:	f8c3 4110 	str.w	r4, [r3, #272]	; 0x110
	conn->latency_event = conn->latency_prepare;
   15eb0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   15eb2:	8563      	strh	r3, [r4, #42]	; 0x2a
	conn->latency_prepare = 0;
   15eb4:	8522      	strh	r2, [r4, #40]	; 0x28
	packet_tx_enqueue(2);
   15eb6:	f7fb fd69 	bl	1198c <packet_tx_enqueue>
	prepare_pdu_data_tx(conn, &pdu_data_tx);
   15eba:	a903      	add	r1, sp, #12
   15ebc:	4620      	mov	r0, r4
   15ebe:	f7fb fed3 	bl	11c68 <prepare_pdu_data_tx>
	pdu_data_tx->sn = conn->sn;
   15ec2:	9b03      	ldr	r3, [sp, #12]
   15ec4:	f894 10f8 	ldrb.w	r1, [r4, #248]	; 0xf8
   15ec8:	781a      	ldrb	r2, [r3, #0]
   15eca:	f361 02c3 	bfi	r2, r1, #3, #1
   15ece:	701a      	strb	r2, [r3, #0]
	pdu_data_tx->nesn = conn->nesn;
   15ed0:	9a03      	ldr	r2, [sp, #12]
   15ed2:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
   15ed6:	f3c3 0340 	ubfx	r3, r3, #1, #1
   15eda:	7811      	ldrb	r1, [r2, #0]
   15edc:	f363 0182 	bfi	r1, r3, #2, #1
   15ee0:	7011      	strb	r1, [r2, #0]
	connection_configure(conn);
   15ee2:	4620      	mov	r0, r4
   15ee4:	f7fb fce0 	bl	118a8 <connection_configure>
	radio_tmr_tifs_set(RADIO_TIFS);
   15ee8:	2096      	movs	r0, #150	; 0x96
   15eea:	f7f8 ff5f 	bl	edac <radio_tmr_tifs_set>
	radio_switch_complete_and_rx(conn->phy_rx);
   15eee:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
   15ef2:	f000 0007 	and.w	r0, r0, #7
   15ef6:	f7f8 fea7 	bl	ec48 <radio_switch_complete_and_rx>
	tx_packet_set(conn, pdu_data_tx);
   15efa:	9903      	ldr	r1, [sp, #12]
   15efc:	4620      	mov	r0, r4
   15efe:	f7fb ff49 	bl	11d94 <tx_packet_set>
	if (conn->data_chan_sel) {
   15f02:	7f63      	ldrb	r3, [r4, #29]
   15f04:	f013 0f40 	tst.w	r3, #64	; 0x40
   15f08:	d037      	beq.n	15f7a <event_master+0x10a>
		data_chan_use = chan_sel_2(conn->event_counter - 1,
   15f0a:	8c60      	ldrh	r0, [r4, #34]	; 0x22
   15f0c:	3801      	subs	r0, #1
   15f0e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   15f12:	f104 0217 	add.w	r2, r4, #23
   15f16:	8be1      	ldrh	r1, [r4, #30]
   15f18:	b280      	uxth	r0, r0
   15f1a:	f7fa fe8b 	bl	10c34 <chan_sel_2>
	chan_set(data_chan_use);
   15f1e:	f7fb ff65 	bl	11dec <chan_set>
		remainder_us = radio_tmr_start(1,
   15f22:	4b20      	ldr	r3, [pc, #128]	; (15fa4 <event_master+0x134>)
   15f24:	689a      	ldr	r2, [r3, #8]
   15f26:	f105 0109 	add.w	r1, r5, #9
   15f2a:	2001      	movs	r0, #1
   15f2c:	f7f8 ff44 	bl	edb8 <radio_tmr_start>
		radio_tmr_end_capture();
   15f30:	f7f8 fff4 	bl	ef1c <radio_tmr_end_capture>
				      conn->handle), ticks_at_expire)) {
   15f34:	8c21      	ldrh	r1, [r4, #32]
	    preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
   15f36:	3107      	adds	r1, #7
   15f38:	462a      	mov	r2, r5
   15f3a:	b2c9      	uxtb	r1, r1
   15f3c:	4620      	mov	r0, r4
   15f3e:	f7ff fefb 	bl	15d38 <preempt_calc>
	if (0 !=
   15f42:	bb38      	cbnz	r0, 15f94 <event_master+0x124>
		ticker_status =
   15f44:	2300      	movs	r3, #0
   15f46:	4a18      	ldr	r2, [pc, #96]	; (15fa8 <event_master+0x138>)
   15f48:	4619      	mov	r1, r3
   15f4a:	4618      	mov	r0, r3
   15f4c:	f7fa f9fc 	bl	10348 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   15f50:	b328      	cbz	r0, 15f9e <event_master+0x12e>
   15f52:	2802      	cmp	r0, #2
   15f54:	d023      	beq.n	15f9e <event_master+0x12e>
   15f56:	4040      	eors	r0, r0
   15f58:	f380 8811 	msr	BASEPRI, r0
   15f5c:	f04f 0004 	mov.w	r0, #4
   15f60:	df02      	svc	2
	LL_ASSERT(_radio.role == ROLE_NONE);
   15f62:	4040      	eors	r0, r0
   15f64:	f380 8811 	msr	BASEPRI, r0
   15f68:	f04f 0004 	mov.w	r0, #4
   15f6c:	df02      	svc	2
	LL_ASSERT(_radio.ticker_id_prepare ==
   15f6e:	4040      	eors	r0, r0
   15f70:	f380 8811 	msr	BASEPRI, r0
   15f74:	f04f 0004 	mov.w	r0, #4
   15f78:	df02      	svc	2
		data_chan_use = chan_sel_1(&conn->data_chan_use,
   15f7a:	7fa1      	ldrb	r1, [r4, #30]
   15f7c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
					   conn->data_chan_count);
   15f7e:	7f63      	ldrb	r3, [r4, #29]
   15f80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		data_chan_use = chan_sel_1(&conn->data_chan_use,
   15f84:	9300      	str	r3, [sp, #0]
   15f86:	f104 0317 	add.w	r3, r4, #23
   15f8a:	f104 001f 	add.w	r0, r4, #31
   15f8e:	f7fa fdf3 	bl	10b78 <chan_sel_1>
   15f92:	e7c4      	b.n	15f1e <event_master+0xae>
		_radio.state = STATE_STOP;
   15f94:	2204      	movs	r2, #4
   15f96:	4b03      	ldr	r3, [pc, #12]	; (15fa4 <event_master+0x134>)
   15f98:	741a      	strb	r2, [r3, #16]
		radio_disable();
   15f9a:	f7f8 fdff 	bl	eb9c <radio_disable>
}
   15f9e:	b005      	add	sp, #20
   15fa0:	bd30      	pop	{r4, r5, pc}
   15fa2:	bf00      	nop
   15fa4:	20000e84 	.word	0x20000e84
   15fa8:	00011321 	.word	0x00011321

00015fac <event_slave>:
	LL_ASSERT(_radio.role == ROLE_NONE);
   15fac:	4a64      	ldr	r2, [pc, #400]	; (16140 <event_slave+0x194>)
   15fae:	7bd2      	ldrb	r2, [r2, #15]
   15fb0:	2a00      	cmp	r2, #0
   15fb2:	f040 809d 	bne.w	160f0 <event_slave+0x144>
{
   15fb6:	b5f0      	push	{r4, r5, r6, r7, lr}
   15fb8:	b083      	sub	sp, #12
	LL_ASSERT(_radio.ticker_id_prepare ==
   15fba:	4a61      	ldr	r2, [pc, #388]	; (16140 <event_slave+0x194>)
   15fbc:	7b11      	ldrb	r1, [r2, #12]
   15fbe:	b2c9      	uxtb	r1, r1
   15fc0:	8c1a      	ldrh	r2, [r3, #32]
   15fc2:	1dd4      	adds	r4, r2, #7
   15fc4:	42a1      	cmp	r1, r4
   15fc6:	f040 8099 	bne.w	160fc <event_slave+0x150>
   15fca:	461c      	mov	r4, r3
   15fcc:	4606      	mov	r6, r0
	_radio.role = ROLE_SLAVE;
   15fce:	4d5c      	ldr	r5, [pc, #368]	; (16140 <event_slave+0x194>)
   15fd0:	2303      	movs	r3, #3
   15fd2:	73eb      	strb	r3, [r5, #15]
	_radio.state = STATE_RX;
   15fd4:	2301      	movs	r3, #1
   15fd6:	742b      	strb	r3, [r5, #16]
	_radio.ticker_id_prepare = 0;
   15fd8:	2700      	movs	r7, #0
   15fda:	732f      	strb	r7, [r5, #12]
		(RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
   15fdc:	3207      	adds	r2, #7
   15fde:	b2d2      	uxtb	r2, r2
	_radio.ticker_id_event =
   15fe0:	736a      	strb	r2, [r5, #13]
	_radio.ticks_anchor = ticks_at_expire;
   15fe2:	6068      	str	r0, [r5, #4]
	_radio.packet_counter = 0;
   15fe4:	f885 7114 	strb.w	r7, [r5, #276]	; 0x114
	_radio.crc_expire = 0;
   15fe8:	f885 7115 	strb.w	r7, [r5, #277]	; 0x115
	_radio.conn_curr = conn;
   15fec:	f8c5 4110 	str.w	r4, [r5, #272]	; 0x110
	conn->latency_event = conn->latency_prepare;
   15ff0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   15ff2:	8563      	strh	r3, [r4, #42]	; 0x2a
	conn->latency_prepare = 0;
   15ff4:	8527      	strh	r7, [r4, #40]	; 0x28
	connection_configure(conn);
   15ff6:	4620      	mov	r0, r4
   15ff8:	f7fb fc56 	bl	118a8 <connection_configure>
	radio_tmr_tifs_set(RADIO_TIFS);
   15ffc:	2096      	movs	r0, #150	; 0x96
   15ffe:	f7f8 fed5 	bl	edac <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(conn->phy_rx, 0, conn->phy_tx,
   16002:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
   16006:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
   1600a:	09d3      	lsrs	r3, r2, #7
   1600c:	f3c2 02c2 	ubfx	r2, r2, #3, #3
   16010:	4639      	mov	r1, r7
   16012:	f000 0007 	and.w	r0, r0, #7
   16016:	f7f8 fe1f 	bl	ec58 <radio_switch_complete_and_tx>
		      _radio.packet_rx[_radio.packet_rx_last]->pdu_data);
   1601a:	f8d5 3138 	ldr.w	r3, [r5, #312]	; 0x138
   1601e:	f895 213d 	ldrb.w	r2, [r5, #317]	; 0x13d
   16022:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
	rx_packet_set(conn, (struct pdu_data *)
   16026:	3108      	adds	r1, #8
   16028:	4620      	mov	r0, r4
   1602a:	f7fb fc51 	bl	118d0 <rx_packet_set>
	if (conn->data_chan_sel) {
   1602e:	7f63      	ldrb	r3, [r4, #29]
   16030:	f013 0f40 	tst.w	r3, #64	; 0x40
   16034:	d068      	beq.n	16108 <event_slave+0x15c>
		data_chan_use = chan_sel_2(conn->event_counter - 1,
   16036:	8c60      	ldrh	r0, [r4, #34]	; 0x22
   16038:	3801      	subs	r0, #1
   1603a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1603e:	f104 0217 	add.w	r2, r4, #23
   16042:	8be1      	ldrh	r1, [r4, #30]
   16044:	b280      	uxth	r0, r0
   16046:	f7fa fdf5 	bl	10c34 <chan_sel_2>
	chan_set(data_chan_use);
   1604a:	f7fb fecf 	bl	11dec <chan_set>
		conn->slave.window_widening_prepare_us;
   1604e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
	conn->slave.window_widening_event_us +=
   16050:	6e22      	ldr	r2, [r4, #96]	; 0x60
   16052:	4413      	add	r3, r2
   16054:	6623      	str	r3, [r4, #96]	; 0x60
	conn->slave.window_widening_prepare_us = 0;
   16056:	2200      	movs	r2, #0
   16058:	65e2      	str	r2, [r4, #92]	; 0x5c
	    conn->slave.window_widening_max_us) {
   1605a:	6da2      	ldr	r2, [r4, #88]	; 0x58
	if (conn->slave.window_widening_event_us >
   1605c:	4293      	cmp	r3, r2
   1605e:	d900      	bls.n	16062 <event_slave+0xb6>
		conn->slave.window_widening_event_us =
   16060:	6622      	str	r2, [r4, #96]	; 0x60
		conn->slave.window_size_prepare_us;
   16062:	6e62      	ldr	r2, [r4, #100]	; 0x64
	conn->slave.window_size_event_us +=
   16064:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   16066:	4413      	add	r3, r2
   16068:	66a3      	str	r3, [r4, #104]	; 0x68
	conn->slave.window_size_prepare_us = 0;
   1606a:	2700      	movs	r7, #0
   1606c:	6667      	str	r7, [r4, #100]	; 0x64
	remainder_us =
   1606e:	4b34      	ldr	r3, [pc, #208]	; (16140 <event_slave+0x194>)
   16070:	689a      	ldr	r2, [r3, #8]
   16072:	f106 0109 	add.w	r1, r6, #9
   16076:	4638      	mov	r0, r7
   16078:	f7f8 fe9e 	bl	edb8 <radio_tmr_start>
   1607c:	4605      	mov	r5, r0
	radio_tmr_aa_capture();
   1607e:	f7f8 ff19 	bl	eeb4 <radio_tmr_aa_capture>
	radio_tmr_aa_save(0);
   16082:	4638      	mov	r0, r7
   16084:	f7f8 ff38 	bl	eef8 <radio_tmr_aa_save>
	       (conn->slave.window_widening_event_us << 1) +
   16088:	6e20      	ldr	r0, [r4, #96]	; 0x60
	       (RADIO_TICKER_JITTER_US << 2) +
   1608a:	eb05 0540 	add.w	r5, r5, r0, lsl #1
	       conn->slave.window_size_event_us;
   1608e:	6ea0      	ldr	r0, [r4, #104]	; 0x68
	       (conn->slave.window_widening_event_us << 1) +
   16090:	4405      	add	r5, r0
	hcto = remainder_us + RADIO_TICKER_JITTER_US +
   16092:	3550      	adds	r5, #80	; 0x50
	hcto += radio_rx_ready_delay_get(conn->phy_rx);
   16094:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
   16098:	f000 0007 	and.w	r0, r0, #7
   1609c:	f7f8 fd6a 	bl	eb74 <radio_rx_ready_delay_get>
   160a0:	4405      	add	r5, r0
	hcto += addr_us_get(conn->phy_rx);
   160a2:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
   160a6:	f000 0007 	and.w	r0, r0, #7
	switch (phy) {
   160aa:	2802      	cmp	r0, #2
   160ac:	d03c      	beq.n	16128 <event_slave+0x17c>
   160ae:	2804      	cmp	r0, #4
   160b0:	d037      	beq.n	16122 <event_slave+0x176>
		return 40;
   160b2:	2328      	movs	r3, #40	; 0x28
	hcto += addr_us_get(conn->phy_rx);
   160b4:	441d      	add	r5, r3
	hcto += radio_rx_chain_delay_get(conn->phy_rx, 1);
   160b6:	2101      	movs	r1, #1
   160b8:	f7f8 fd5e 	bl	eb78 <radio_rx_chain_delay_get>
	radio_tmr_hcto_configure(hcto);
   160bc:	4428      	add	r0, r5
   160be:	f7f8 fed7 	bl	ee70 <radio_tmr_hcto_configure>
				      conn->handle), ticks_at_expire) != 0) {
   160c2:	8c21      	ldrh	r1, [r4, #32]
	if (preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
   160c4:	3107      	adds	r1, #7
   160c6:	4632      	mov	r2, r6
   160c8:	b2c9      	uxtb	r1, r1
   160ca:	4620      	mov	r0, r4
   160cc:	f7ff fe34 	bl	15d38 <preempt_calc>
   160d0:	bb60      	cbnz	r0, 1612c <event_slave+0x180>
		ticker_status =
   160d2:	2300      	movs	r3, #0
   160d4:	4a1b      	ldr	r2, [pc, #108]	; (16144 <event_slave+0x198>)
   160d6:	4619      	mov	r1, r3
   160d8:	4618      	mov	r0, r3
   160da:	f7fa f935 	bl	10348 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   160de:	b350      	cbz	r0, 16136 <event_slave+0x18a>
   160e0:	2802      	cmp	r0, #2
   160e2:	d028      	beq.n	16136 <event_slave+0x18a>
   160e4:	4040      	eors	r0, r0
   160e6:	f380 8811 	msr	BASEPRI, r0
   160ea:	f04f 0004 	mov.w	r0, #4
   160ee:	df02      	svc	2
	LL_ASSERT(_radio.role == ROLE_NONE);
   160f0:	4040      	eors	r0, r0
   160f2:	f380 8811 	msr	BASEPRI, r0
   160f6:	f04f 0004 	mov.w	r0, #4
   160fa:	df02      	svc	2
	LL_ASSERT(_radio.ticker_id_prepare ==
   160fc:	4040      	eors	r0, r0
   160fe:	f380 8811 	msr	BASEPRI, r0
   16102:	f04f 0004 	mov.w	r0, #4
   16106:	df02      	svc	2
		data_chan_use = chan_sel_1(&conn->data_chan_use,
   16108:	7fa1      	ldrb	r1, [r4, #30]
   1610a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
					   conn->data_chan_count);
   1610c:	7f63      	ldrb	r3, [r4, #29]
   1610e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		data_chan_use = chan_sel_1(&conn->data_chan_use,
   16112:	9300      	str	r3, [sp, #0]
   16114:	f104 0317 	add.w	r3, r4, #23
   16118:	f104 001f 	add.w	r0, r4, #31
   1611c:	f7fa fd2c 	bl	10b78 <chan_sel_1>
   16120:	e793      	b.n	1604a <event_slave+0x9e>
		return 376;
   16122:	f44f 73bc 	mov.w	r3, #376	; 0x178
   16126:	e7c5      	b.n	160b4 <event_slave+0x108>
		return 24;
   16128:	2318      	movs	r3, #24
   1612a:	e7c3      	b.n	160b4 <event_slave+0x108>
		_radio.state = STATE_STOP;
   1612c:	2204      	movs	r2, #4
   1612e:	4b04      	ldr	r3, [pc, #16]	; (16140 <event_slave+0x194>)
   16130:	741a      	strb	r2, [r3, #16]
		radio_disable();
   16132:	f7f8 fd33 	bl	eb9c <radio_disable>
	packet_tx_enqueue(2);
   16136:	2002      	movs	r0, #2
   16138:	f7fb fc28 	bl	1198c <packet_tx_enqueue>
}
   1613c:	b003      	add	sp, #12
   1613e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16140:	20000e84 	.word	0x20000e84
   16144:	00011321 	.word	0x00011321

00016148 <event_scan>:
	LL_ASSERT(_radio.role == ROLE_NONE);
   16148:	4b67      	ldr	r3, [pc, #412]	; (162e8 <event_scan+0x1a0>)
   1614a:	7bdb      	ldrb	r3, [r3, #15]
   1614c:	2b00      	cmp	r3, #0
   1614e:	f040 808b 	bne.w	16268 <event_scan+0x120>
	LL_ASSERT(_radio.ticker_id_prepare == RADIO_TICKER_ID_SCAN);
   16152:	4b65      	ldr	r3, [pc, #404]	; (162e8 <event_scan+0x1a0>)
   16154:	7b1b      	ldrb	r3, [r3, #12]
   16156:	b2db      	uxtb	r3, r3
   16158:	2b06      	cmp	r3, #6
   1615a:	f040 808b 	bne.w	16274 <event_scan+0x12c>
{
   1615e:	b570      	push	{r4, r5, r6, lr}
   16160:	b08c      	sub	sp, #48	; 0x30
   16162:	4605      	mov	r5, r0
	_radio.role = ROLE_SCAN;
   16164:	4c60      	ldr	r4, [pc, #384]	; (162e8 <event_scan+0x1a0>)
   16166:	2302      	movs	r3, #2
   16168:	73e3      	strb	r3, [r4, #15]
	_radio.state = STATE_RX;
   1616a:	2101      	movs	r1, #1
   1616c:	7421      	strb	r1, [r4, #16]
	_radio.ticker_id_prepare = 0;
   1616e:	2200      	movs	r2, #0
   16170:	7322      	strb	r2, [r4, #12]
	_radio.ticker_id_event = RADIO_TICKER_ID_SCAN;
   16172:	2306      	movs	r3, #6
   16174:	7363      	strb	r3, [r4, #13]
	_radio.ticks_anchor = ticks_at_expire;
   16176:	6060      	str	r0, [r4, #4]
	_radio.scanner.state = 0;
   16178:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   1617c:	f362 0341 	bfi	r3, r2, #1, #1
   16180:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
	adv_scan_configure(_radio.scanner.phy, 1); /* if coded then use S8. */
   16184:	f894 00dd 	ldrb.w	r0, [r4, #221]	; 0xdd
   16188:	f000 0007 	and.w	r0, r0, #7
   1618c:	f7fb fb68 	bl	11860 <adv_scan_configure>
	chan_set(37 + _radio.scanner.chan++);
   16190:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   16194:	f3c3 0081 	ubfx	r0, r3, #2, #2
   16198:	1c42      	adds	r2, r0, #1
   1619a:	f362 0383 	bfi	r3, r2, #2, #2
   1619e:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
   161a2:	3025      	adds	r0, #37	; 0x25
   161a4:	f7fb fe22 	bl	11dec <chan_set>
	if (_radio.scanner.chan == 3) {
   161a8:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   161ac:	f003 030c 	and.w	r3, r3, #12
   161b0:	2b0c      	cmp	r3, #12
   161b2:	d065      	beq.n	16280 <event_scan+0x138>
	radio_tmr_tifs_set(RADIO_TIFS);
   161b4:	2096      	movs	r0, #150	; 0x96
   161b6:	f7f8 fdf9 	bl	edac <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
   161ba:	2300      	movs	r3, #0
   161bc:	461a      	mov	r2, r3
   161be:	4619      	mov	r1, r3
   161c0:	4618      	mov	r0, r3
   161c2:	f7f8 fd49 	bl	ec58 <radio_switch_complete_and_tx>
	radio_pkt_rx_set(_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
   161c6:	4b48      	ldr	r3, [pc, #288]	; (162e8 <event_scan+0x1a0>)
   161c8:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   161cc:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   161d0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
   161d4:	3008      	adds	r0, #8
   161d6:	f7f8 fcbd 	bl	eb54 <radio_pkt_rx_set>
	radio_rssi_measure();
   161da:	f7f8 fd4d 	bl	ec78 <radio_rssi_measure>
	if (ctrl_rl_enabled()) {
   161de:	f003 f835 	bl	1924c <ctrl_rl_enabled>
   161e2:	2800      	cmp	r0, #0
   161e4:	d153      	bne.n	1628e <event_scan+0x146>
	if (_radio.scanner.filter_policy) {
   161e6:	4b40      	ldr	r3, [pc, #256]	; (162e8 <event_scan+0x1a0>)
   161e8:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
   161ec:	f013 0f30 	tst.w	r3, #48	; 0x30
   161f0:	d165      	bne.n	162be <event_scan+0x176>
	remainder_us = radio_tmr_start(0,
   161f2:	4c3d      	ldr	r4, [pc, #244]	; (162e8 <event_scan+0x1a0>)
   161f4:	68a2      	ldr	r2, [r4, #8]
   161f6:	f105 0109 	add.w	r1, r5, #9
   161fa:	2000      	movs	r0, #0
   161fc:	f7f8 fddc 	bl	edb8 <radio_tmr_start>
	radio_tmr_end_capture();
   16200:	f7f8 fe8c 	bl	ef1c <radio_tmr_end_capture>
	if (preempt_calc(&_radio.scanner.hdr, RADIO_TICKER_ID_SCAN,
   16204:	462a      	mov	r2, r5
   16206:	2106      	movs	r1, #6
   16208:	f104 00cc 	add.w	r0, r4, #204	; 0xcc
   1620c:	f7ff fd94 	bl	15d38 <preempt_calc>
   16210:	2800      	cmp	r0, #0
   16212:	d15d      	bne.n	162d0 <event_scan+0x188>
				     _radio.scanner.ticks_window +
   16214:	4b34      	ldr	r3, [pc, #208]	; (162e8 <event_scan+0x1a0>)
   16216:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   1621a:	3309      	adds	r3, #9
		ticker_status =
   1621c:	f641 0287 	movw	r2, #6279	; 0x1887
   16220:	9208      	str	r2, [sp, #32]
   16222:	4a32      	ldr	r2, [pc, #200]	; (162ec <event_scan+0x1a4>)
   16224:	9207      	str	r2, [sp, #28]
   16226:	2204      	movs	r2, #4
   16228:	9206      	str	r2, [sp, #24]
   1622a:	4931      	ldr	r1, [pc, #196]	; (162f0 <event_scan+0x1a8>)
   1622c:	9105      	str	r1, [sp, #20]
   1622e:	2000      	movs	r0, #0
   16230:	9004      	str	r0, [sp, #16]
   16232:	9003      	str	r0, [sp, #12]
   16234:	9002      	str	r0, [sp, #8]
   16236:	9001      	str	r0, [sp, #4]
   16238:	9300      	str	r3, [sp, #0]
   1623a:	462b      	mov	r3, r5
   1623c:	4601      	mov	r1, r0
   1623e:	f7f9 ff67 	bl	10110 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   16242:	b108      	cbz	r0, 16248 <event_scan+0x100>
   16244:	2802      	cmp	r0, #2
   16246:	d149      	bne.n	162dc <event_scan+0x194>
			ticker_status =
   16248:	2300      	movs	r3, #0
   1624a:	4a2a      	ldr	r2, [pc, #168]	; (162f4 <event_scan+0x1ac>)
   1624c:	4619      	mov	r1, r3
   1624e:	4618      	mov	r0, r3
   16250:	f7fa f87a 	bl	10348 <ticker_job_idle_get>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   16254:	2800      	cmp	r0, #0
   16256:	d03f      	beq.n	162d8 <event_scan+0x190>
   16258:	2802      	cmp	r0, #2
   1625a:	d03d      	beq.n	162d8 <event_scan+0x190>
   1625c:	4040      	eors	r0, r0
   1625e:	f380 8811 	msr	BASEPRI, r0
   16262:	f04f 0004 	mov.w	r0, #4
   16266:	df02      	svc	2
	LL_ASSERT(_radio.role == ROLE_NONE);
   16268:	4040      	eors	r0, r0
   1626a:	f380 8811 	msr	BASEPRI, r0
   1626e:	f04f 0004 	mov.w	r0, #4
   16272:	df02      	svc	2
	LL_ASSERT(_radio.ticker_id_prepare == RADIO_TICKER_ID_SCAN);
   16274:	4040      	eors	r0, r0
   16276:	f380 8811 	msr	BASEPRI, r0
   1627a:	f04f 0004 	mov.w	r0, #4
   1627e:	df02      	svc	2
		_radio.scanner.chan = 0;
   16280:	f894 20dc 	ldrb.w	r2, [r4, #220]	; 0xdc
   16284:	f36f 0283 	bfc	r2, #2, #2
   16288:	f884 20dc 	strb.w	r2, [r4, #220]	; 0xdc
   1628c:	e792      	b.n	161b4 <event_scan+0x6c>
			ctrl_filter_get(!!(_radio.scanner.filter_policy & 0x1));
   1628e:	4b16      	ldr	r3, [pc, #88]	; (162e8 <event_scan+0x1a0>)
   16290:	f893 00dd 	ldrb.w	r0, [r3, #221]	; 0xdd
		struct ll_filter *filter =
   16294:	f3c0 1000 	ubfx	r0, r0, #4, #1
   16298:	f002 fdda 	bl	18e50 <ctrl_filter_get>
   1629c:	4604      	mov	r4, r0
		u8_t count, *irks = ctrl_irks_get(&count);
   1629e:	f10d 002f 	add.w	r0, sp, #47	; 0x2f
   162a2:	f002 fd4f 	bl	18d44 <ctrl_irks_get>
   162a6:	4606      	mov	r6, r0
		radio_filter_configure(filter->enable_bitmask,
   162a8:	1ca2      	adds	r2, r4, #2
   162aa:	7861      	ldrb	r1, [r4, #1]
   162ac:	7820      	ldrb	r0, [r4, #0]
   162ae:	f7f8 fd05 	bl	ecbc <radio_filter_configure>
		radio_ar_configure(count, irks);
   162b2:	4631      	mov	r1, r6
   162b4:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
   162b8:	f7f8 fedc 	bl	f074 <radio_ar_configure>
   162bc:	e799      	b.n	161f2 <event_scan+0xaa>
		struct ll_filter *wl = ctrl_filter_get(true);
   162be:	2001      	movs	r0, #1
   162c0:	f002 fdc6 	bl	18e50 <ctrl_filter_get>
		radio_filter_configure(wl->enable_bitmask,
   162c4:	1c82      	adds	r2, r0, #2
   162c6:	7841      	ldrb	r1, [r0, #1]
   162c8:	7800      	ldrb	r0, [r0, #0]
   162ca:	f7f8 fcf7 	bl	ecbc <radio_filter_configure>
   162ce:	e790      	b.n	161f2 <event_scan+0xaa>
		_radio.state = STATE_STOP;
   162d0:	2204      	movs	r2, #4
   162d2:	7422      	strb	r2, [r4, #16]
		radio_disable();
   162d4:	f7f8 fc62 	bl	eb9c <radio_disable>
}
   162d8:	b00c      	add	sp, #48	; 0x30
   162da:	bd70      	pop	{r4, r5, r6, pc}
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   162dc:	4040      	eors	r0, r0
   162de:	f380 8811 	msr	BASEPRI, r0
   162e2:	f04f 0004 	mov.w	r0, #4
   162e6:	df02      	svc	2
   162e8:	20000e84 	.word	0x20000e84
   162ec:	00010e65 	.word	0x00010e65
   162f0:	00011649 	.word	0x00011649
   162f4:	00011321 	.word	0x00011321

000162f8 <access_addr_get>:
{
   162f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   162fa:	b083      	sub	sp, #12
	retry = 3;
   162fc:	2403      	movs	r4, #3
   162fe:	e059      	b.n	163b4 <access_addr_get+0xbc>
	LL_ASSERT(retry);
   16300:	4040      	eors	r0, r0
   16302:	f380 8811 	msr	BASEPRI, r0
   16306:	f04f 0004 	mov.w	r0, #4
   1630a:	df02      	svc	2
	consecutive_bit = (access_addr >> bit_idx) & 0x01;
   1630c:	9900      	ldr	r1, [sp, #0]
   1630e:	0fc9      	lsrs	r1, r1, #31
	transitions = 0;
   16310:	4607      	mov	r7, r0
	bit_idx = 31;
   16312:	221f      	movs	r2, #31
	consecutive_cnt = 1;
   16314:	2501      	movs	r5, #1
	while (bit_idx--) {
   16316:	e010      	b.n	1633a <access_addr_get+0x42>
			consecutive_cnt++;
   16318:	3501      	adds	r5, #1
   1631a:	b2ed      	uxtb	r5, r5
   1631c:	e01c      	b.n	16358 <access_addr_get+0x60>
		    ((bit_idx < 28) && (transitions < 1)) ||
   1631e:	b9ff      	cbnz	r7, 16360 <access_addr_get+0x68>
			if (consecutive_bit) {
   16320:	b319      	cbz	r1, 1636a <access_addr_get+0x72>
				access_addr &= ~BIT(bit_idx);
   16322:	2201      	movs	r2, #1
   16324:	409a      	lsls	r2, r3
   16326:	ea26 0602 	bic.w	r6, r6, r2
   1632a:	9600      	str	r6, [sp, #0]
				consecutive_bit = 0;
   1632c:	4601      	mov	r1, r0
			transitions++;
   1632e:	3701      	adds	r7, #1
   16330:	b2ff      	uxtb	r7, r7
			consecutive_cnt = 1;
   16332:	2501      	movs	r5, #1
	while (bit_idx--) {
   16334:	461a      	mov	r2, r3
		if (transitions > 24) {
   16336:	2f18      	cmp	r7, #24
   16338:	d81d      	bhi.n	16376 <access_addr_get+0x7e>
	while (bit_idx--) {
   1633a:	1e53      	subs	r3, r2, #1
   1633c:	b2db      	uxtb	r3, r3
   1633e:	b32a      	cbz	r2, 1638c <access_addr_get+0x94>
		bit = (access_addr >> bit_idx) & 0x01;
   16340:	9e00      	ldr	r6, [sp, #0]
   16342:	469e      	mov	lr, r3
   16344:	fa26 f203 	lsr.w	r2, r6, r3
   16348:	f002 0201 	and.w	r2, r2, #1
		if (bit == consecutive_bit) {
   1634c:	4291      	cmp	r1, r2
   1634e:	d0e3      	beq.n	16318 <access_addr_get+0x20>
			transitions++;
   16350:	3701      	adds	r7, #1
   16352:	b2ff      	uxtb	r7, r7
			consecutive_bit = bit;
   16354:	4611      	mov	r1, r2
			consecutive_cnt = 1;
   16356:	2501      	movs	r5, #1
		if ((consecutive_cnt > 6) ||
   16358:	2d06      	cmp	r5, #6
   1635a:	d8e1      	bhi.n	16320 <access_addr_get+0x28>
   1635c:	2b1b      	cmp	r3, #27
   1635e:	d9de      	bls.n	1631e <access_addr_get+0x26>
		    ((bit_idx < 28) && (transitions < 1)) ||
   16360:	2b1a      	cmp	r3, #26
   16362:	d8e7      	bhi.n	16334 <access_addr_get+0x3c>
		    ((bit_idx < 27) && (transitions < 2))) {
   16364:	2f01      	cmp	r7, #1
   16366:	d8e5      	bhi.n	16334 <access_addr_get+0x3c>
   16368:	e7da      	b.n	16320 <access_addr_get+0x28>
				access_addr |= BIT(bit_idx);
   1636a:	2101      	movs	r1, #1
   1636c:	fa01 f203 	lsl.w	r2, r1, r3
   16370:	4316      	orrs	r6, r2
   16372:	9600      	str	r6, [sp, #0]
   16374:	e7db      	b.n	1632e <access_addr_get+0x36>
			if (consecutive_bit) {
   16376:	2900      	cmp	r1, #0
   16378:	d02d      	beq.n	163d6 <access_addr_get+0xde>
				access_addr &= ~(BIT(bit_idx + 1) - 1);
   1637a:	f10e 0e01 	add.w	lr, lr, #1
   1637e:	2301      	movs	r3, #1
   16380:	fa03 f30e 	lsl.w	r3, r3, lr
   16384:	425b      	negs	r3, r3
   16386:	9a00      	ldr	r2, [sp, #0]
   16388:	4013      	ands	r3, r2
   1638a:	9300      	str	r3, [sp, #0]
	adv_aa_check = access_addr ^ 0x8e89bed6;
   1638c:	4b19      	ldr	r3, [pc, #100]	; (163f4 <access_addr_get+0xfc>)
   1638e:	9a00      	ldr	r2, [sp, #0]
   16390:	4053      	eors	r3, r2
   16392:	a802      	add	r0, sp, #8
   16394:	f840 3d04 	str.w	r3, [r0, #-4]!
	if (util_ones_count_get((u8_t *)&adv_aa_check,
   16398:	2104      	movs	r1, #4
   1639a:	f7f8 fa6e 	bl	e87a <util_ones_count_get>
   1639e:	2801      	cmp	r0, #1
   163a0:	d908      	bls.n	163b4 <access_addr_get+0xbc>
	if (!((access_addr & 0xFFFF) ^ (access_addr >> 16)) &&
   163a2:	9800      	ldr	r0, [sp, #0]
   163a4:	b283      	uxth	r3, r0
   163a6:	ebb3 4f10 	cmp.w	r3, r0, lsr #16
   163aa:	d120      	bne.n	163ee <access_addr_get+0xf6>
	    !((access_addr & 0xFF) ^ (access_addr >> 24))) {
   163ac:	b2c3      	uxtb	r3, r0
	if (!((access_addr & 0xFFFF) ^ (access_addr >> 16)) &&
   163ae:	ebb3 6f10 	cmp.w	r3, r0, lsr #24
   163b2:	d11c      	bne.n	163ee <access_addr_get+0xf6>
	LL_ASSERT(retry);
   163b4:	2c00      	cmp	r4, #0
   163b6:	d0a3      	beq.n	16300 <access_addr_get+0x8>
	retry--;
   163b8:	3c01      	subs	r4, #1
   163ba:	b2e4      	uxtb	r4, r4
	len = sizeof(u32_t);
   163bc:	2004      	movs	r0, #4
	while (len) {
   163be:	2800      	cmp	r0, #0
   163c0:	d0a4      	beq.n	1630c <access_addr_get+0x14>
		len = rand_get(len, (u8_t *)&access_addr);
   163c2:	4669      	mov	r1, sp
   163c4:	f7f9 fc1c 	bl	fc00 <rand_get>
   163c8:	b2c0      	uxtb	r0, r0
		if (len) {
   163ca:	2800      	cmp	r0, #0
   163cc:	d0f7      	beq.n	163be <access_addr_get+0xc6>
   163ce:	bf20      	wfe
  __ASM volatile ("sev");
   163d0:	bf40      	sev
  __ASM volatile ("wfe");
   163d2:	bf20      	wfe
   163d4:	e7f3      	b.n	163be <access_addr_get+0xc6>
				access_addr |= (BIT(bit_idx + 1) - 1);
   163d6:	f10e 0e01 	add.w	lr, lr, #1
   163da:	2301      	movs	r3, #1
   163dc:	fa03 fe0e 	lsl.w	lr, r3, lr
   163e0:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
   163e4:	9b00      	ldr	r3, [sp, #0]
   163e6:	ea43 030e 	orr.w	r3, r3, lr
   163ea:	9300      	str	r3, [sp, #0]
   163ec:	e7ce      	b.n	1638c <access_addr_get+0x94>
}
   163ee:	b003      	add	sp, #12
   163f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   163f2:	bf00      	nop
   163f4:	8e89bed6 	.word	0x8e89bed6

000163f8 <isr_rx_scan>:
{
   163f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   163fc:	b08f      	sub	sp, #60	; 0x3c
   163fe:	4617      	mov	r7, r2
   16400:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
   16404:	f89d 6064 	ldrb.w	r6, [sp, #100]	; 0x64
		_radio.packet_rx[_radio.packet_rx_last]->pdu_data;
   16408:	4b99      	ldr	r3, [pc, #612]	; (16670 <isr_rx_scan+0x278>)
   1640a:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   1640e:	f893 113d 	ldrb.w	r1, [r3, #317]	; 0x13d
   16412:	f852 4021 	ldr.w	r4, [r2, r1, lsl #2]
	pdu_adv_rx = (struct pdu_adv *)
   16416:	f104 0808 	add.w	r8, r4, #8
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
   1641a:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
   1641e:	b15b      	cbz	r3, 16438 <isr_rx_scan+0x40>
   16420:	4b93      	ldr	r3, [pc, #588]	; (16670 <isr_rx_scan+0x278>)
   16422:	f893 317e 	ldrb.w	r3, [r3, #382]	; 0x17e
   16426:	b34b      	cbz	r3, 1647c <isr_rx_scan+0x84>
				      (_radio.fc_req == _radio.fc_ack)) &&
   16428:	4a91      	ldr	r2, [pc, #580]	; (16670 <isr_rx_scan+0x278>)
   1642a:	f892 317c 	ldrb.w	r3, [r2, #380]	; 0x17c
   1642e:	b2db      	uxtb	r3, r3
   16430:	f892 217d 	ldrb.w	r2, [r2, #381]	; 0x17d
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
   16434:	4293      	cmp	r3, r2
   16436:	d021      	beq.n	1647c <isr_rx_scan+0x84>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
   16438:	7a23      	ldrb	r3, [r4, #8]
   1643a:	f013 030f 	ands.w	r3, r3, #15
   1643e:	f000 82e9 	beq.w	16a14 <isr_rx_scan+0x61c>
   16442:	2b06      	cmp	r3, #6
   16444:	f000 82e6 	beq.w	16a14 <isr_rx_scan+0x61c>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
   16448:	2b00      	cmp	r3, #0
   1644a:	f000 83d9 	beq.w	16c00 <isr_rx_scan+0x808>
   1644e:	2b01      	cmp	r3, #1
   16450:	f000 8355 	beq.w	16afe <isr_rx_scan+0x706>
	bool dir_report = false;
   16454:	f04f 0900 	mov.w	r9, #0
		  (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
   16458:	7a23      	ldrb	r3, [r4, #8]
   1645a:	f003 030f 	and.w	r3, r3, #15
					&dir_report))) ||
   1645e:	2b02      	cmp	r3, #2
   16460:	f000 83d0 	beq.w	16c04 <isr_rx_scan+0x80c>
		  (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
   16464:	2b06      	cmp	r3, #6
   16466:	f000 83cd 	beq.w	16c04 <isr_rx_scan+0x80c>
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND) ||
   1646a:	2b07      	cmp	r3, #7
   1646c:	f000 839f 	beq.w	16bae <isr_rx_scan+0x7b6>
		   (_radio.scanner.phy)) ||
   16470:	2b04      	cmp	r3, #4
   16472:	f000 83a3 	beq.w	16bbc <isr_rx_scan+0x7c4>
		return 1;
   16476:	f04f 0a01 	mov.w	sl, #1
   1647a:	e3cb      	b.n	16c14 <isr_rx_scan+0x81c>
	return ((((_radio.scanner.filter_policy & 0x01) != 0) ||
   1647c:	4b7c      	ldr	r3, [pc, #496]	; (16670 <isr_rx_scan+0x278>)
   1647e:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
		isr_scan_init_adva_check(pdu, rl_idx)) &&
   16482:	f013 0f10 	tst.w	r3, #16
   16486:	d072      	beq.n	1656e <isr_rx_scan+0x176>
		((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
   16488:	7a23      	ldrb	r3, [r4, #8]
		isr_scan_init_adva_check(pdu, rl_idx)) &&
   1648a:	f013 030f 	ands.w	r3, r3, #15
   1648e:	f000 80da 	beq.w	16646 <isr_rx_scan+0x24e>
		((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
   16492:	2b01      	cmp	r3, #1
   16494:	f000 808f 	beq.w	165b6 <isr_rx_scan+0x1be>
		isr_scan_init_adva_check(pdu, rl_idx)) &&
   16498:	2300      	movs	r3, #0
				      (_radio.fc_req == _radio.fc_ack)) &&
   1649a:	2b00      	cmp	r3, #0
   1649c:	d0cc      	beq.n	16438 <isr_rx_scan+0x40>
	    ((radio_tmr_end_get() + 502 + (RADIO_TICKER_JITTER_US << 1)) <
   1649e:	f7f8 fd4f 	bl	ef40 <radio_tmr_end_get>
   164a2:	f200 2916 	addw	r9, r0, #534	; 0x216
	     (TICKER_TICKS_TO_US(_radio.scanner.hdr.ticks_slot) -
   164a6:	4b72      	ldr	r3, [pc, #456]	; (16670 <isr_rx_scan+0x278>)
   164a8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   164ac:	4871      	ldr	r0, [pc, #452]	; (16674 <isr_rx_scan+0x27c>)
   164ae:	fba3 0100 	umull	r0, r1, r3, r0
   164b2:	2207      	movs	r2, #7
   164b4:	fb02 1103 	mla	r1, r2, r3, r1
   164b8:	a36b      	add	r3, pc, #428	; (adr r3, 16668 <isr_rx_scan+0x270>)
   164ba:	e9d3 2300 	ldrd	r2, r3, [r3]
   164be:	f7ea fe1d 	bl	10fc <__aeabi_uldivmod>
   164c2:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
	    isr_scan_init_check(pdu_adv_rx, rl_idx) &&
   164c6:	4581      	cmp	r9, r0
   164c8:	d2b6      	bcs.n	16438 <isr_rx_scan+0x40>
	if (_radio.packet_rx_acquire >=
   164ca:	4b69      	ldr	r3, [pc, #420]	; (16670 <isr_rx_scan+0x278>)
   164cc:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   164d0:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   164d4:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   164d6:	429a      	cmp	r2, r3
   164d8:	f0c0 80b7 	bcc.w	1664a <isr_rx_scan+0x252>
			_radio.packet_rx_last);
   164dc:	4b64      	ldr	r3, [pc, #400]	; (16670 <isr_rx_scan+0x278>)
   164de:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   164e2:	1ad3      	subs	r3, r2, r3
   164e4:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   164e6:	2b03      	cmp	r3, #3
   164e8:	f240 80b9 	bls.w	1665e <isr_rx_scan+0x266>
	return _radio.packet_rx[_radio.packet_rx_last];
   164ec:	4b60      	ldr	r3, [pc, #384]	; (16670 <isr_rx_scan+0x278>)
   164ee:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   164f2:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   164f6:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
		if (radio_pdu_node_rx == 0) {
   164fa:	f1b9 0f00 	cmp.w	r9, #0
   164fe:	f000 839a 	beq.w	16c36 <isr_rx_scan+0x83e>
		_radio.state = STATE_STOP;
   16502:	f8df a16c 	ldr.w	sl, [pc, #364]	; 16670 <isr_rx_scan+0x278>
   16506:	2304      	movs	r3, #4
   16508:	f88a 3010 	strb.w	r3, [sl, #16]
		conn = _radio.scanner.conn;
   1650c:	f8da 80fc 	ldr.w	r8, [sl, #252]	; 0xfc
		_radio.scanner.conn = NULL;
   16510:	2300      	movs	r3, #0
   16512:	f8ca 30fc 	str.w	r3, [sl, #252]	; 0xfc
		pdu_adv_tx = (struct pdu_adv *)radio_pkt_scratch_get();
   16516:	f7f8 fb93 	bl	ec40 <radio_pkt_scratch_get>
   1651a:	4606      	mov	r6, r0
		pdu_adv_tx->type = PDU_ADV_TYPE_CONNECT_IND;
   1651c:	7803      	ldrb	r3, [r0, #0]
   1651e:	2205      	movs	r2, #5
   16520:	f362 0303 	bfi	r3, r2, #0, #4
			pdu_adv_tx->chan_sel = 1;
   16524:	b2db      	uxtb	r3, r3
   16526:	f043 0320 	orr.w	r3, r3, #32
   1652a:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
   1652c:	7a23      	ldrb	r3, [r4, #8]
   1652e:	f3c3 1380 	ubfx	r3, r3, #6, #1
   16532:	7802      	ldrb	r2, [r0, #0]
   16534:	f363 12c7 	bfi	r2, r3, #7, #1
   16538:	7002      	strb	r2, [r0, #0]
		pdu_adv_tx->len = sizeof(struct pdu_adv_payload_connect_ind);
   1653a:	2322      	movs	r3, #34	; 0x22
   1653c:	7043      	strb	r3, [r0, #1]
		lrpa = ctrl_lrpa_get(rl_idx);
   1653e:	4628      	mov	r0, r5
   16540:	f002 fbde 	bl	18d00 <ctrl_lrpa_get>
		if (_radio.scanner.rpa_gen && lrpa) {
   16544:	f89a 30de 	ldrb.w	r3, [sl, #222]	; 0xde
   16548:	f013 0f01 	tst.w	r3, #1
   1654c:	f000 8098 	beq.w	16680 <isr_rx_scan+0x288>
   16550:	2800      	cmp	r0, #0
   16552:	f000 8095 	beq.w	16680 <isr_rx_scan+0x288>
			pdu_adv_tx->tx_addr = 1;
   16556:	7832      	ldrb	r2, [r6, #0]
   16558:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   1655c:	4633      	mov	r3, r6
   1655e:	f803 2b02 	strb.w	r2, [r3], #2
			memcpy(&pdu_adv_tx->payload.connect_ind.init_addr[0],
   16562:	2206      	movs	r2, #6
   16564:	4601      	mov	r1, r0
   16566:	4618      	mov	r0, r3
   16568:	f7e9 feaa 	bl	2c0 <memcpy>
   1656c:	e096      	b.n	1669c <isr_rx_scan+0x2a4>
	if (rl_idx != FILTER_IDX_NONE) {
   1656e:	2dff      	cmp	r5, #255	; 0xff
   16570:	d00a      	beq.n	16588 <isr_rx_scan+0x190>
		return (rl_idx == _radio.scanner.rl_idx);
   16572:	4b3f      	ldr	r3, [pc, #252]	; (16670 <isr_rx_scan+0x278>)
   16574:	f893 30df 	ldrb.w	r3, [r3, #223]	; 0xdf
   16578:	429d      	cmp	r5, r3
   1657a:	bf14      	ite	ne
   1657c:	2300      	movne	r3, #0
   1657e:	2301      	moveq	r3, #1
	return ((((_radio.scanner.filter_policy & 0x01) != 0) ||
   16580:	2b00      	cmp	r3, #0
   16582:	d181      	bne.n	16488 <isr_rx_scan+0x90>
		isr_scan_init_adva_check(pdu, rl_idx)) &&
   16584:	2300      	movs	r3, #0
   16586:	e788      	b.n	1649a <isr_rx_scan+0xa2>
	return ((_radio.scanner.adv_addr_type == pdu->tx_addr) &&
   16588:	4b39      	ldr	r3, [pc, #228]	; (16670 <isr_rx_scan+0x278>)
   1658a:	f893 20dd 	ldrb.w	r2, [r3, #221]	; 0xdd
   1658e:	f3c2 1280 	ubfx	r2, r2, #6, #1
   16592:	7a23      	ldrb	r3, [r4, #8]
   16594:	f3c3 1380 	ubfx	r3, r3, #6, #1
   16598:	429a      	cmp	r2, r3
   1659a:	d001      	beq.n	165a0 <isr_rx_scan+0x1a8>
   1659c:	2300      	movs	r3, #0
   1659e:	e7ef      	b.n	16580 <isr_rx_scan+0x188>
		(memcmp(&_radio.scanner.adv_addr[0],
   165a0:	2206      	movs	r2, #6
   165a2:	f108 0102 	add.w	r1, r8, #2
   165a6:	4834      	ldr	r0, [pc, #208]	; (16678 <isr_rx_scan+0x280>)
   165a8:	f014 f9d8 	bl	2a95c <memcmp>
	return ((_radio.scanner.adv_addr_type == pdu->tx_addr) &&
   165ac:	b908      	cbnz	r0, 165b2 <isr_rx_scan+0x1ba>
   165ae:	2301      	movs	r3, #1
   165b0:	e7e6      	b.n	16580 <isr_rx_scan+0x188>
   165b2:	2300      	movs	r3, #0
   165b4:	e7e4      	b.n	16580 <isr_rx_scan+0x188>
	if (ctrl_rl_addr_resolve(pdu->rx_addr,
   165b6:	7a20      	ldrb	r0, [r4, #8]
				 pdu->payload.direct_ind.tgt_addr, rl_idx)) {
   165b8:	f108 0a08 	add.w	sl, r8, #8
	if (ctrl_rl_addr_resolve(pdu->rx_addr,
   165bc:	462a      	mov	r2, r5
   165be:	4651      	mov	r1, sl
   165c0:	09c0      	lsrs	r0, r0, #7
   165c2:	f002 fe17 	bl	191f4 <ctrl_rl_addr_resolve>
   165c6:	4681      	mov	r9, r0
   165c8:	b9d0      	cbnz	r0, 16600 <isr_rx_scan+0x208>
	} else if (init && _radio.scanner.rpa_gen && ctrl_lrpa_get(rl_idx)) {
   165ca:	4b29      	ldr	r3, [pc, #164]	; (16670 <isr_rx_scan+0x278>)
   165cc:	f893 30de 	ldrb.w	r3, [r3, #222]	; 0xde
   165d0:	f013 0f01 	tst.w	r3, #1
   165d4:	d119      	bne.n	1660a <isr_rx_scan+0x212>
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
   165d6:	4b26      	ldr	r3, [pc, #152]	; (16670 <isr_rx_scan+0x278>)
   165d8:	f893 20dd 	ldrb.w	r2, [r3, #221]	; 0xdd
   165dc:	7a23      	ldrb	r3, [r4, #8]
   165de:	09db      	lsrs	r3, r3, #7
			BDADDR_SIZE) == 0))) ||
   165e0:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   165e4:	d017      	beq.n	16616 <isr_rx_scan+0x21e>
	if (((_radio.scanner.filter_policy & 0x02) != 0) &&
   165e6:	4b22      	ldr	r3, [pc, #136]	; (16670 <isr_rx_scan+0x278>)
   165e8:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
   165ec:	f013 0f20 	tst.w	r3, #32
   165f0:	d003      	beq.n	165fa <isr_rx_scan+0x202>
   165f2:	f994 3008 	ldrsb.w	r3, [r4, #8]
   165f6:	2b00      	cmp	r3, #0
   165f8:	db17      	blt.n	1662a <isr_rx_scan+0x232>
			BDADDR_SIZE) == 0))) ||
   165fa:	f1b9 0f00 	cmp.w	r9, #0
   165fe:	d11d      	bne.n	1663c <isr_rx_scan+0x244>
		((pdu->type == PDU_ADV_TYPE_DIRECT_IND) &&
   16600:	f1b9 0f00 	cmp.w	r9, #0
   16604:	d01d      	beq.n	16642 <isr_rx_scan+0x24a>
		isr_scan_init_adva_check(pdu, rl_idx)) &&
   16606:	2301      	movs	r3, #1
   16608:	e747      	b.n	1649a <isr_rx_scan+0xa2>
	} else if (init && _radio.scanner.rpa_gen && ctrl_lrpa_get(rl_idx)) {
   1660a:	4628      	mov	r0, r5
   1660c:	f002 fb78 	bl	18d00 <ctrl_lrpa_get>
   16610:	2800      	cmp	r0, #0
   16612:	d1f5      	bne.n	16600 <isr_rx_scan+0x208>
   16614:	e7df      	b.n	165d6 <isr_rx_scan+0x1de>
		(memcmp(&_radio.scanner.init_addr[0],
   16616:	2206      	movs	r2, #6
   16618:	4651      	mov	r1, sl
   1661a:	4818      	ldr	r0, [pc, #96]	; (1667c <isr_rx_scan+0x284>)
   1661c:	f014 f99e 	bl	2a95c <memcmp>
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
   16620:	2800      	cmp	r0, #0
   16622:	d1e0      	bne.n	165e6 <isr_rx_scan+0x1ee>
			BDADDR_SIZE) == 0))) ||
   16624:	f04f 0901 	mov.w	r9, #1
   16628:	e7ea      	b.n	16600 <isr_rx_scan+0x208>
	    ((pdu->payload.direct_ind.tgt_addr[5] & 0xc0) == 0x40)) {
   1662a:	f898 300d 	ldrb.w	r3, [r8, #13]
	    (pdu->rx_addr != 0) &&
   1662e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   16632:	2b40      	cmp	r3, #64	; 0x40
   16634:	d1e1      	bne.n	165fa <isr_rx_scan+0x202>
		return true;
   16636:	f04f 0901 	mov.w	r9, #1
   1663a:	e7de      	b.n	165fa <isr_rx_scan+0x202>
			BDADDR_SIZE) == 0))) ||
   1663c:	f04f 0901 	mov.w	r9, #1
   16640:	e7de      	b.n	16600 <isr_rx_scan+0x208>
		isr_scan_init_adva_check(pdu, rl_idx)) &&
   16642:	2300      	movs	r3, #0
   16644:	e729      	b.n	1649a <isr_rx_scan+0xa2>
   16646:	2301      	movs	r3, #1
   16648:	e727      	b.n	1649a <isr_rx_scan+0xa2>
		return (_radio.packet_rx_count -
   1664a:	4909      	ldr	r1, [pc, #36]	; (16670 <isr_rx_scan+0x278>)
   1664c:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
			_radio.packet_rx_last +
   16650:	f891 113d 	ldrb.w	r1, [r1, #317]	; 0x13d
		return (_radio.packet_rx_count -
   16654:	1a5b      	subs	r3, r3, r1
			_radio.packet_rx_last +
   16656:	fa52 f383 	uxtab	r3, r2, r3
   1665a:	b2db      	uxtb	r3, r3
   1665c:	e743      	b.n	164e6 <isr_rx_scan+0xee>
		return 0;
   1665e:	f04f 0900 	mov.w	r9, #0
   16662:	e74a      	b.n	164fa <isr_rx_scan+0x102>
   16664:	f3af 8000 	nop.w
   16668:	3b9aca00 	.word	0x3b9aca00
   1666c:	00000000 	.word	0x00000000
   16670:	20000e84 	.word	0x20000e84
   16674:	1afd498d 	.word	0x1afd498d
   16678:	20000f6a 	.word	0x20000f6a
   1667c:	20000f64 	.word	0x20000f64
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
   16680:	4962      	ldr	r1, [pc, #392]	; (1680c <isr_rx_scan+0x414>)
   16682:	f891 30dd 	ldrb.w	r3, [r1, #221]	; 0xdd
   16686:	09db      	lsrs	r3, r3, #7
   16688:	7832      	ldrb	r2, [r6, #0]
   1668a:	f363 1286 	bfi	r2, r3, #6, #1
   1668e:	4630      	mov	r0, r6
   16690:	f800 2b02 	strb.w	r2, [r0], #2
			memcpy(&pdu_adv_tx->payload.connect_ind.init_addr[0],
   16694:	2206      	movs	r2, #6
   16696:	31e0      	adds	r1, #224	; 0xe0
   16698:	f7e9 fe12 	bl	2c0 <memcpy>
		memcpy(&pdu_adv_tx->payload.connect_ind.adv_addr[0],
   1669c:	f106 0308 	add.w	r3, r6, #8
   166a0:	930b      	str	r3, [sp, #44]	; 0x2c
   166a2:	2206      	movs	r2, #6
   166a4:	f104 010a 	add.w	r1, r4, #10
   166a8:	4618      	mov	r0, r3
   166aa:	f7e9 fe09 	bl	2c0 <memcpy>
		memcpy(&pdu_adv_tx->payload.connect_ind.lldata.
   166ae:	2204      	movs	r2, #4
   166b0:	f108 0110 	add.w	r1, r8, #16
   166b4:	f106 000e 	add.w	r0, r6, #14
   166b8:	f7e9 fe02 	bl	2c0 <memcpy>
		memcpy(&pdu_adv_tx->payload.connect_ind.lldata.crc_init[0],
   166bc:	2203      	movs	r2, #3
   166be:	f108 0114 	add.w	r1, r8, #20
   166c2:	f106 0012 	add.w	r0, r6, #18
   166c6:	f7e9 fdfb 	bl	2c0 <memcpy>
		pdu_adv_tx->payload.connect_ind.lldata.win_size = 1;
   166ca:	2301      	movs	r3, #1
   166cc:	7573      	strb	r3, [r6, #21]
			(u32_t)_radio.scanner.conn_interval * 1250;
   166ce:	4b4f      	ldr	r3, [pc, #316]	; (1680c <isr_rx_scan+0x414>)
   166d0:	f8b3 30f0 	ldrh.w	r3, [r3, #240]	; 0xf0
		conn_interval_us =
   166d4:	f240 42e2 	movw	r2, #1250	; 0x4e2
   166d8:	fb02 fb03 	mul.w	fp, r2, r3
		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
   166dc:	f7f8 fc30 	bl	ef40 <radio_tmr_end_get>
   166e0:	f500 6adb 	add.w	sl, r0, #1752	; 0x6d8
		if (!_radio.remainder_anchor ||
   166e4:	4b49      	ldr	r3, [pc, #292]	; (1680c <isr_rx_scan+0x414>)
   166e6:	689b      	ldr	r3, [r3, #8]
   166e8:	2b00      	cmp	r3, #0
   166ea:	dd75      	ble.n	167d8 <isr_rx_scan+0x3e0>
		if (_radio.scanner.win_offset_us == 0) {
   166ec:	4b47      	ldr	r3, [pc, #284]	; (1680c <isr_rx_scan+0x414>)
   166ee:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   166f2:	2b00      	cmp	r3, #0
   166f4:	d174      	bne.n	167e0 <isr_rx_scan+0x3e8>
			pdu_adv_tx->payload.connect_ind.lldata.win_offset = 0;
   166f6:	75b3      	strb	r3, [r6, #22]
   166f8:	75f3      	strb	r3, [r6, #23]
		conn_space_us -= radio_tx_ready_delay_get(0, 0);
   166fa:	2100      	movs	r1, #0
   166fc:	4608      	mov	r0, r1
   166fe:	f7f8 fa35 	bl	eb6c <radio_tx_ready_delay_get>
   16702:	ebaa 0a00 	sub.w	sl, sl, r0
		conn_space_us -= radio_tx_chain_delay_get(0, 0);
   16706:	2100      	movs	r1, #0
   16708:	4608      	mov	r0, r1
   1670a:	f7f8 fa31 	bl	eb70 <radio_tx_chain_delay_get>
   1670e:	ebaa 0a00 	sub.w	sl, sl, r0
		conn_space_us += TICKER_TICKS_TO_US(1);
   16712:	f10a 031e 	add.w	r3, sl, #30
   16716:	930c      	str	r3, [sp, #48]	; 0x30
			_radio.scanner.conn_interval;
   16718:	f8df a0f0 	ldr.w	sl, [pc, #240]	; 1680c <isr_rx_scan+0x414>
		pdu_adv_tx->payload.connect_ind.lldata.interval =
   1671c:	f8ba 30f0 	ldrh.w	r3, [sl, #240]	; 0xf0
   16720:	8333      	strh	r3, [r6, #24]
		pdu_adv_tx->payload.connect_ind.lldata.latency =
   16722:	f8ba 30f2 	ldrh.w	r3, [sl, #242]	; 0xf2
   16726:	8373      	strh	r3, [r6, #26]
		pdu_adv_tx->payload.connect_ind.lldata.timeout =
   16728:	f8ba 30f4 	ldrh.w	r3, [sl, #244]	; 0xf4
   1672c:	83b3      	strh	r3, [r6, #28]
		memcpy(&pdu_adv_tx->payload.connect_ind.lldata.chan_map[0],
   1672e:	2205      	movs	r2, #5
   16730:	f108 0117 	add.w	r1, r8, #23
   16734:	f106 001e 	add.w	r0, r6, #30
   16738:	f7e9 fdc2 	bl	2c0 <memcpy>
			conn->data_chan_hop;
   1673c:	f898 201e 	ldrb.w	r2, [r8, #30]
		pdu_adv_tx->payload.connect_ind.lldata.hop =
   16740:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
   16744:	f362 0304 	bfi	r3, r2, #0, #5
   16748:	f886 3023 	strb.w	r3, [r6, #35]	; 0x23
		pdu_adv_tx->payload.connect_ind.lldata.sca = _radio.sca;
   1674c:	f89a 211c 	ldrb.w	r2, [sl, #284]	; 0x11c
   16750:	b2db      	uxtb	r3, r3
   16752:	f362 1347 	bfi	r3, r2, #5, #3
   16756:	f886 3023 	strb.w	r3, [r6, #35]	; 0x23
		radio_switch_complete_and_disable();
   1675a:	f7f8 fa85 	bl	ec68 <radio_switch_complete_and_disable>
		radio_pkt_tx_set(pdu_adv_tx);
   1675e:	4630      	mov	r0, r6
   16760:	f7f8 f9fe 	bl	eb60 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
   16764:	f7f8 fa34 	bl	ebd0 <radio_is_ready>
   16768:	4682      	mov	sl, r0
   1676a:	2800      	cmp	r0, #0
   1676c:	d148      	bne.n	16800 <isr_rx_scan+0x408>
		conn->handle = mem_index_get(conn, _radio.conn_pool,
   1676e:	f44f 72aa 	mov.w	r2, #340	; 0x154
   16772:	4b26      	ldr	r3, [pc, #152]	; (1680c <isr_rx_scan+0x414>)
   16774:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
   16778:	4640      	mov	r0, r8
   1677a:	f7f8 f83a 	bl	e7f2 <mem_index_get>
   1677e:	f8a8 0020 	strh.w	r0, [r8, #32]
		radio_pdu_node_rx->hdr.handle = conn->handle;
   16782:	f8a9 0006 	strh.w	r0, [r9, #6]
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   16786:	2206      	movs	r2, #6
   16788:	f889 2004 	strb.w	r2, [r9, #4]
		radio_le_conn_cmplt->status = 0x00;
   1678c:	2300      	movs	r3, #0
   1678e:	f889 300b 	strb.w	r3, [r9, #11]
		radio_le_conn_cmplt->role = 0x00;
   16792:	f889 300c 	strb.w	r3, [r9, #12]
		radio_le_conn_cmplt->own_addr_type = pdu_adv_tx->tx_addr;
   16796:	4631      	mov	r1, r6
   16798:	f811 3b02 	ldrb.w	r3, [r1], #2
   1679c:	f3c3 1380 	ubfx	r3, r3, #6, #1
   167a0:	f889 301a 	strb.w	r3, [r9, #26]
		memcpy(&radio_le_conn_cmplt->own_addr[0],
   167a4:	f109 001b 	add.w	r0, r9, #27
   167a8:	f7e9 fd8a 	bl	2c0 <memcpy>
		if (irkmatch_ok && rl_idx != FILTER_IDX_NONE) {
   167ac:	b397      	cbz	r7, 16814 <isr_rx_scan+0x41c>
   167ae:	2dff      	cmp	r5, #255	; 0xff
   167b0:	d030      	beq.n	16814 <isr_rx_scan+0x41c>
			ll_rl_id_addr_get(rl_idx,
   167b2:	f109 020e 	add.w	r2, r9, #14
   167b6:	f109 010d 	add.w	r1, r9, #13
   167ba:	4628      	mov	r0, r5
   167bc:	f002 fc96 	bl	190ec <ll_rl_id_addr_get>
			radio_le_conn_cmplt->peer_addr_type += 2;
   167c0:	f899 300d 	ldrb.w	r3, [r9, #13]
   167c4:	3302      	adds	r3, #2
   167c6:	f889 300d 	strb.w	r3, [r9, #13]
			memcpy(&radio_le_conn_cmplt->peer_rpa[0],
   167ca:	2206      	movs	r2, #6
   167cc:	990b      	ldr	r1, [sp, #44]	; 0x2c
   167ce:	f109 0014 	add.w	r0, r9, #20
   167d2:	f7e9 fd75 	bl	2c0 <memcpy>
   167d6:	e02e      	b.n	16836 <isr_rx_scan+0x43e>
			conn_offset_us -= TICKER_TICKS_TO_US(1);
   167d8:	f200 6aba 	addw	sl, r0, #1722	; 0x6ba
   167dc:	e786      	b.n	166ec <isr_rx_scan+0x2f4>
				conn_space_us += conn_interval_us;
   167de:	445b      	add	r3, fp
			while ((conn_space_us & ((u32_t)1 << 31)) ||
   167e0:	2b00      	cmp	r3, #0
   167e2:	dbfc      	blt.n	167de <isr_rx_scan+0x3e6>
   167e4:	459a      	cmp	sl, r3
   167e6:	d8fa      	bhi.n	167de <isr_rx_scan+0x3e6>
				(conn_space_us - conn_offset_us) / 1250;
   167e8:	eba3 020a 	sub.w	r2, r3, sl
   167ec:	4908      	ldr	r1, [pc, #32]	; (16810 <isr_rx_scan+0x418>)
   167ee:	fba1 1202 	umull	r1, r2, r1, r2
			pdu_adv_tx->payload.connect_ind.lldata.win_offset =
   167f2:	0a92      	lsrs	r2, r2, #10
   167f4:	82f2      	strh	r2, [r6, #22]
			pdu_adv_tx->payload.connect_ind.lldata.win_size++;
   167f6:	7d72      	ldrb	r2, [r6, #21]
   167f8:	3201      	adds	r2, #1
   167fa:	7572      	strb	r2, [r6, #21]
   167fc:	469a      	mov	sl, r3
   167fe:	e77c      	b.n	166fa <isr_rx_scan+0x302>
		LL_ASSERT(!radio_is_ready());
   16800:	4040      	eors	r0, r0
   16802:	f380 8811 	msr	BASEPRI, r0
   16806:	f04f 0004 	mov.w	r0, #4
   1680a:	df02      	svc	2
   1680c:	20000e84 	.word	0x20000e84
   16810:	d1b71759 	.word	0xd1b71759
			memset(&radio_le_conn_cmplt->peer_rpa[0], 0x0,
   16814:	2206      	movs	r2, #6
   16816:	2100      	movs	r1, #0
   16818:	f109 0014 	add.w	r0, r9, #20
   1681c:	f014 f932 	bl	2aa84 <memset>
				pdu_adv_tx->rx_addr;
   16820:	7833      	ldrb	r3, [r6, #0]
   16822:	f3c3 13c0 	ubfx	r3, r3, #7, #1
			radio_le_conn_cmplt->peer_addr_type =
   16826:	f889 300d 	strb.w	r3, [r9, #13]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
   1682a:	2206      	movs	r2, #6
   1682c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1682e:	f109 000e 	add.w	r0, r9, #14
   16832:	f7e9 fd45 	bl	2c0 <memcpy>
		radio_le_conn_cmplt->interval = _radio.scanner.conn_interval;
   16836:	4dce      	ldr	r5, [pc, #824]	; (16b70 <isr_rx_scan+0x778>)
   16838:	f8b5 30f0 	ldrh.w	r3, [r5, #240]	; 0xf0
   1683c:	f8a9 3021 	strh.w	r3, [r9, #33]	; 0x21
		radio_le_conn_cmplt->latency = _radio.scanner. conn_latency;
   16840:	f8b5 30f2 	ldrh.w	r3, [r5, #242]	; 0xf2
   16844:	f8a9 3023 	strh.w	r3, [r9, #35]	; 0x23
		radio_le_conn_cmplt->timeout = _radio.scanner.conn_timeout;
   16848:	f8b5 30f4 	ldrh.w	r3, [r5, #244]	; 0xf4
   1684c:	f8a9 3025 	strh.w	r3, [r9, #37]	; 0x25
			pdu_adv_tx->payload.connect_ind.lldata.sca;
   16850:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
   16854:	f3c3 1342 	ubfx	r3, r3, #5, #3
		radio_le_conn_cmplt->mca =
   16858:	f889 3027 	strb.w	r3, [r9, #39]	; 0x27
		rx_fc_lock(conn->handle);
   1685c:	f8b8 0020 	ldrh.w	r0, [r8, #32]
   16860:	f7fa fae2 	bl	10e28 <rx_fc_lock>
		packet_rx_enqueue();
   16864:	f7fc ffca 	bl	137fc <packet_rx_enqueue>
	if (_radio.packet_rx_acquire >=
   16868:	f895 113e 	ldrb.w	r1, [r5, #318]	; 0x13e
	    _radio.packet_rx_last) {
   1686c:	f895 213d 	ldrb.w	r2, [r5, #317]	; 0x13d
   16870:	b2d2      	uxtb	r2, r2
	if (_radio.packet_rx_acquire >=
   16872:	4291      	cmp	r1, r2
   16874:	f0c0 80b9 	bcc.w	169ea <isr_rx_scan+0x5f2>
			_radio.packet_rx_last);
   16878:	f895 313d 	ldrb.w	r3, [r5, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   1687c:	1acb      	subs	r3, r1, r3
   1687e:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   16880:	2b02      	cmp	r3, #2
   16882:	f240 80bc 	bls.w	169fe <isr_rx_scan+0x606>
	return _radio.packet_rx[_radio.packet_rx_last];
   16886:	4bba      	ldr	r3, [pc, #744]	; (16b70 <isr_rx_scan+0x778>)
   16888:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   1688c:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   16890:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
			LL_ASSERT(radio_pdu_node_rx);
   16894:	2b00      	cmp	r3, #0
   16896:	f000 80b4 	beq.w	16a02 <isr_rx_scan+0x60a>
			radio_pdu_node_rx->hdr.handle = conn->handle;
   1689a:	f8b8 2020 	ldrh.w	r2, [r8, #32]
   1689e:	80da      	strh	r2, [r3, #6]
			radio_pdu_node_rx->hdr.type =
   168a0:	220b      	movs	r2, #11
   168a2:	711a      	strb	r2, [r3, #4]
			if (pdu_adv_rx->chan_sel) {
   168a4:	7a22      	ldrb	r2, [r4, #8]
   168a6:	f012 0f20 	tst.w	r2, #32
   168aa:	f000 80b0 	beq.w	16a0e <isr_rx_scan+0x616>
					((u16_t)conn->access_addr[1] << 8) |
   168ae:	f898 1011 	ldrb.w	r1, [r8, #17]
					conn->access_addr[0];
   168b2:	f898 2010 	ldrb.w	r2, [r8, #16]
				u16_t aa_ls =
   168b6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
					((u16_t)conn->access_addr[3] << 8) |
   168ba:	f898 0013 	ldrb.w	r0, [r8, #19]
					 conn->access_addr[2];
   168be:	f898 1012 	ldrb.w	r1, [r8, #18]
				u16_t aa_ms =
   168c2:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
				conn->data_chan_sel = 1;
   168c6:	f898 001d 	ldrb.w	r0, [r8, #29]
   168ca:	f040 0040 	orr.w	r0, r0, #64	; 0x40
   168ce:	f888 001d 	strb.w	r0, [r8, #29]
				conn->data_chan_id = aa_ms ^ aa_ls;
   168d2:	404a      	eors	r2, r1
   168d4:	f8a8 201e 	strh.w	r2, [r8, #30]
				le_chan_sel_algo->chan_sel_algo = 0x01;
   168d8:	2201      	movs	r2, #1
   168da:	72da      	strb	r2, [r3, #11]
			packet_rx_enqueue();
   168dc:	f7fc ff8e 	bl	137fc <packet_rx_enqueue>
		conn->hdr.ticks_slot = _radio.scanner.ticks_conn_slot;
   168e0:	4ea3      	ldr	r6, [pc, #652]	; (16b70 <isr_rx_scan+0x778>)
   168e2:	f8d6 30f8 	ldr.w	r3, [r6, #248]	; 0xf8
   168e6:	f8c8 300c 	str.w	r3, [r8, #12]
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
   168ea:	f8d6 5180 	ldr.w	r5, [r6, #384]	; 0x180
   168ee:	f8c8 5004 	str.w	r5, [r8, #4]
		conn->hdr.ticks_xtal_to_start =
   168f2:	2327      	movs	r3, #39	; 0x27
   168f4:	f8c8 3000 	str.w	r3, [r8]
		conn->hdr.ticks_preempt_to_start =
   168f8:	2400      	movs	r4, #0
   168fa:	f8c8 4008 	str.w	r4, [r8, #8]
		ticks_slot_offset =
   168fe:	429d      	cmp	r5, r3
   16900:	bf38      	it	cc
   16902:	461d      	movcc	r5, r3
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   16904:	f44f 63c6 	mov.w	r3, #1584	; 0x630
   16908:	9300      	str	r3, [sp, #0]
   1690a:	4b9a      	ldr	r3, [pc, #616]	; (16b74 <isr_rx_scan+0x77c>)
   1690c:	2206      	movs	r2, #6
   1690e:	4621      	mov	r1, r4
   16910:	4620      	mov	r0, r4
   16912:	f7f9 fc99 	bl	10248 <ticker_stop>
		ticker_stop_scan_assert(ticker_status, (void *)__LINE__);
   16916:	f240 6131 	movw	r1, #1585	; 0x631
   1691a:	f7fa faed 	bl	10ef8 <ticker_stop_scan_assert>
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   1691e:	9400      	str	r4, [sp, #0]
   16920:	4623      	mov	r3, r4
   16922:	2204      	movs	r2, #4
   16924:	4621      	mov	r1, r4
   16926:	4620      	mov	r0, r4
   16928:	f7f9 fc8e 	bl	10248 <ticker_stop>
				     conn->handle,
   1692c:	f8b8 3020 	ldrh.w	r3, [r8, #32]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   16930:	3307      	adds	r3, #7
   16932:	b2db      	uxtb	r3, r3
   16934:	930b      	str	r3, [sp, #44]	; 0x2c
				     (_radio.ticks_anchor - ticks_slot_offset),
   16936:	6876      	ldr	r6, [r6, #4]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   16938:	1b76      	subs	r6, r6, r5
				     TICKER_US_TO_TICKS(conn_space_us),
   1693a:	4f8f      	ldr	r7, [pc, #572]	; (16b78 <isr_rx_scan+0x780>)
   1693c:	a38a      	add	r3, pc, #552	; (adr r3, 16b68 <isr_rx_scan+0x770>)
   1693e:	e9d3 2300 	ldrd	r2, r3, [r3]
   16942:	990c      	ldr	r1, [sp, #48]	; 0x30
   16944:	fba1 0107 	umull	r0, r1, r1, r7
   16948:	f7ea fbd8 	bl	10fc <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   1694c:	f020 497f 	bic.w	r9, r0, #4278190080	; 0xff000000
				     TICKER_US_TO_TICKS(conn_interval_us),
   16950:	fbab 1207 	umull	r1, r2, fp, r7
   16954:	468b      	mov	fp, r1
   16956:	4694      	mov	ip, r2
   16958:	a383      	add	r3, pc, #524	; (adr r3, 16b68 <isr_rx_scan+0x770>)
   1695a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1695e:	e9cd bc0c 	strd	fp, ip, [sp, #48]	; 0x30
   16962:	4658      	mov	r0, fp
   16964:	4661      	mov	r1, ip
   16966:	f7ea fbc9 	bl	10fc <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   1696a:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
				     TICKER_REMAINDER(conn_interval_us),
   1696e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   16972:	2100      	movs	r1, #0
   16974:	4a81      	ldr	r2, [pc, #516]	; (16b7c <isr_rx_scan+0x784>)
   16976:	2307      	movs	r3, #7
   16978:	fb03 f300 	mul.w	r3, r3, r0
   1697c:	fb02 3301 	mla	r3, r2, r1, r3
   16980:	fba0 0102 	umull	r0, r1, r0, r2
   16984:	4419      	add	r1, r3
   16986:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1698a:	2300      	movs	r3, #0
   1698c:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	; 0x30
   16990:	ebbb 0b00 	subs.w	fp, fp, r0
   16994:	eb6c 0c01 	sbc.w	ip, ip, r1
   16998:	4658      	mov	r0, fp
   1699a:	4661      	mov	r1, ip
   1699c:	f7ea fbae 	bl	10fc <__aeabi_uldivmod>
				     (ticks_slot_offset + conn->hdr.ticks_slot),
   169a0:	f8d8 300c 	ldr.w	r3, [r8, #12]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   169a4:	442b      	add	r3, r5
   169a6:	b29b      	uxth	r3, r3
		ticker_status =
   169a8:	f44f 62c9 	mov.w	r2, #1608	; 0x648
   169ac:	9208      	str	r2, [sp, #32]
   169ae:	4a74      	ldr	r2, [pc, #464]	; (16b80 <isr_rx_scan+0x788>)
   169b0:	9207      	str	r2, [sp, #28]
   169b2:	f8cd 8018 	str.w	r8, [sp, #24]
   169b6:	4a73      	ldr	r2, [pc, #460]	; (16b84 <isr_rx_scan+0x78c>)
   169b8:	9205      	str	r2, [sp, #20]
   169ba:	9304      	str	r3, [sp, #16]
   169bc:	9403      	str	r4, [sp, #12]
   169be:	9002      	str	r0, [sp, #8]
   169c0:	9701      	str	r7, [sp, #4]
   169c2:	f8cd 9000 	str.w	r9, [sp]
   169c6:	4633      	mov	r3, r6
   169c8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   169ca:	4621      	mov	r1, r4
   169cc:	4620      	mov	r0, r4
   169ce:	f7f9 fb9f 	bl	10110 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   169d2:	2800      	cmp	r0, #0
   169d4:	f000 8132 	beq.w	16c3c <isr_rx_scan+0x844>
   169d8:	2802      	cmp	r0, #2
   169da:	f000 811b 	beq.w	16c14 <isr_rx_scan+0x81c>
   169de:	4040      	eors	r0, r0
   169e0:	f380 8811 	msr	BASEPRI, r0
   169e4:	f04f 0004 	mov.w	r0, #4
   169e8:	df02      	svc	2
		return (_radio.packet_rx_count -
   169ea:	4a61      	ldr	r2, [pc, #388]	; (16b70 <isr_rx_scan+0x778>)
   169ec:	f892 313c 	ldrb.w	r3, [r2, #316]	; 0x13c
			_radio.packet_rx_last +
   169f0:	f892 213d 	ldrb.w	r2, [r2, #317]	; 0x13d
		return (_radio.packet_rx_count -
   169f4:	1a9b      	subs	r3, r3, r2
			_radio.packet_rx_last +
   169f6:	fa51 f383 	uxtab	r3, r1, r3
   169fa:	b2db      	uxtb	r3, r3
   169fc:	e740      	b.n	16880 <isr_rx_scan+0x488>
		return 0;
   169fe:	2300      	movs	r3, #0
   16a00:	e748      	b.n	16894 <isr_rx_scan+0x49c>
			LL_ASSERT(radio_pdu_node_rx);
   16a02:	4040      	eors	r0, r0
   16a04:	f380 8811 	msr	BASEPRI, r0
   16a08:	f04f 0004 	mov.w	r0, #4
   16a0c:	df02      	svc	2
				le_chan_sel_algo->chan_sel_algo = 0x00;
   16a0e:	2200      	movs	r2, #0
   16a10:	72da      	strb	r2, [r3, #11]
   16a12:	e763      	b.n	168dc <isr_rx_scan+0x4e4>
		 (_radio.scanner.type != 0) &&
   16a14:	4a56      	ldr	r2, [pc, #344]	; (16b70 <isr_rx_scan+0x778>)
   16a16:	f892 20dd 	ldrb.w	r2, [r2, #221]	; 0xdd
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
   16a1a:	f012 0f08 	tst.w	r2, #8
   16a1e:	f43f ad13 	beq.w	16448 <isr_rx_scan+0x50>
		 (_radio.scanner.conn == 0)) {
   16a22:	4a53      	ldr	r2, [pc, #332]	; (16b70 <isr_rx_scan+0x778>)
   16a24:	f8d2 20fc 	ldr.w	r2, [r2, #252]	; 0xfc
		 (_radio.scanner.type != 0) &&
   16a28:	2a00      	cmp	r2, #0
   16a2a:	f47f ad0d 	bne.w	16448 <isr_rx_scan+0x50>
		err = isr_rx_scan_report(rssi_ready,
   16a2e:	b37f      	cbz	r7, 16a90 <isr_rx_scan+0x698>
   16a30:	4629      	mov	r1, r5
   16a32:	2200      	movs	r2, #0
   16a34:	4630      	mov	r0, r6
   16a36:	f7fc ff81 	bl	1393c <isr_rx_scan_report>
		if (err) {
   16a3a:	4682      	mov	sl, r0
   16a3c:	2800      	cmp	r0, #0
   16a3e:	f040 80e9 	bne.w	16c14 <isr_rx_scan+0x81c>
		pdu_adv_tx = (struct pdu_adv *)radio_pkt_scratch_get();
   16a42:	f7f8 f8fd 	bl	ec40 <radio_pkt_scratch_get>
   16a46:	4606      	mov	r6, r0
		pdu_adv_tx->type = PDU_ADV_TYPE_SCAN_REQ;
   16a48:	7803      	ldrb	r3, [r0, #0]
   16a4a:	2203      	movs	r2, #3
   16a4c:	f362 0303 	bfi	r3, r2, #0, #4
   16a50:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
   16a52:	7a23      	ldrb	r3, [r4, #8]
   16a54:	f3c3 1380 	ubfx	r3, r3, #6, #1
   16a58:	7802      	ldrb	r2, [r0, #0]
   16a5a:	f363 12c7 	bfi	r2, r3, #7, #1
   16a5e:	7002      	strb	r2, [r0, #0]
		pdu_adv_tx->len = sizeof(struct pdu_adv_payload_scan_req);
   16a60:	230c      	movs	r3, #12
   16a62:	7043      	strb	r3, [r0, #1]
		lrpa = ctrl_lrpa_get(rl_idx);
   16a64:	4628      	mov	r0, r5
   16a66:	f002 f94b 	bl	18d00 <ctrl_lrpa_get>
		if (_radio.scanner.rpa_gen && lrpa) {
   16a6a:	4b41      	ldr	r3, [pc, #260]	; (16b70 <isr_rx_scan+0x778>)
   16a6c:	f893 30de 	ldrb.w	r3, [r3, #222]	; 0xde
   16a70:	f013 0f01 	tst.w	r3, #1
   16a74:	d00e      	beq.n	16a94 <isr_rx_scan+0x69c>
   16a76:	b168      	cbz	r0, 16a94 <isr_rx_scan+0x69c>
			pdu_adv_tx->tx_addr = 1;
   16a78:	7832      	ldrb	r2, [r6, #0]
   16a7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   16a7e:	4633      	mov	r3, r6
   16a80:	f803 2b02 	strb.w	r2, [r3], #2
			memcpy(&pdu_adv_tx->payload.scan_req.scan_addr[0],
   16a84:	2206      	movs	r2, #6
   16a86:	4601      	mov	r1, r0
   16a88:	4618      	mov	r0, r3
   16a8a:	f7e9 fc19 	bl	2c0 <memcpy>
   16a8e:	e00f      	b.n	16ab0 <isr_rx_scan+0x6b8>
		err = isr_rx_scan_report(rssi_ready,
   16a90:	21ff      	movs	r1, #255	; 0xff
   16a92:	e7ce      	b.n	16a32 <isr_rx_scan+0x63a>
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
   16a94:	4936      	ldr	r1, [pc, #216]	; (16b70 <isr_rx_scan+0x778>)
   16a96:	f891 30dd 	ldrb.w	r3, [r1, #221]	; 0xdd
   16a9a:	09db      	lsrs	r3, r3, #7
   16a9c:	7832      	ldrb	r2, [r6, #0]
   16a9e:	f363 1286 	bfi	r2, r3, #6, #1
   16aa2:	4630      	mov	r0, r6
   16aa4:	f800 2b02 	strb.w	r2, [r0], #2
			memcpy(&pdu_adv_tx->payload.scan_req.scan_addr[0],
   16aa8:	2206      	movs	r2, #6
   16aaa:	31e0      	adds	r1, #224	; 0xe0
   16aac:	f7e9 fc08 	bl	2c0 <memcpy>
		memcpy(&pdu_adv_tx->payload.scan_req.adv_addr[0],
   16ab0:	2206      	movs	r2, #6
   16ab2:	f104 010a 	add.w	r1, r4, #10
   16ab6:	f106 0008 	add.w	r0, r6, #8
   16aba:	f7e9 fc01 	bl	2c0 <memcpy>
		_radio.scanner.state = 1;
   16abe:	4b2c      	ldr	r3, [pc, #176]	; (16b70 <isr_rx_scan+0x778>)
   16ac0:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
   16ac4:	f042 0202 	orr.w	r2, r2, #2
   16ac8:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
		_radio.state = STATE_TX;
   16acc:	2202      	movs	r2, #2
   16ace:	741a      	strb	r2, [r3, #16]
		radio_tmr_tifs_set(RADIO_TIFS);
   16ad0:	2096      	movs	r0, #150	; 0x96
   16ad2:	f7f8 f96b 	bl	edac <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
   16ad6:	2000      	movs	r0, #0
   16ad8:	f7f8 f8b6 	bl	ec48 <radio_switch_complete_and_rx>
		radio_pkt_tx_set(pdu_adv_tx);
   16adc:	4630      	mov	r0, r6
   16ade:	f7f8 f83f 	bl	eb60 <radio_pkt_tx_set>
		radio_tmr_end_capture();
   16ae2:	f7f8 fa1b 	bl	ef1c <radio_tmr_end_capture>
		LL_ASSERT(!radio_is_ready());
   16ae6:	f7f8 f873 	bl	ebd0 <radio_is_ready>
   16aea:	4682      	mov	sl, r0
   16aec:	2800      	cmp	r0, #0
   16aee:	f000 8091 	beq.w	16c14 <isr_rx_scan+0x81c>
   16af2:	4040      	eors	r0, r0
   16af4:	f380 8811 	msr	BASEPRI, r0
   16af8:	f04f 0004 	mov.w	r0, #4
   16afc:	df02      	svc	2
	if (ctrl_rl_addr_resolve(pdu->rx_addr,
   16afe:	7a20      	ldrb	r0, [r4, #8]
				 pdu->payload.direct_ind.tgt_addr, rl_idx)) {
   16b00:	f108 0908 	add.w	r9, r8, #8
	if (ctrl_rl_addr_resolve(pdu->rx_addr,
   16b04:	462a      	mov	r2, r5
   16b06:	4649      	mov	r1, r9
   16b08:	09c0      	lsrs	r0, r0, #7
   16b0a:	f002 fb73 	bl	191f4 <ctrl_rl_addr_resolve>
   16b0e:	4682      	mov	sl, r0
   16b10:	2800      	cmp	r0, #0
   16b12:	d146      	bne.n	16ba2 <isr_rx_scan+0x7aa>
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
   16b14:	4b16      	ldr	r3, [pc, #88]	; (16b70 <isr_rx_scan+0x778>)
   16b16:	f893 20dd 	ldrb.w	r2, [r3, #221]	; 0xdd
   16b1a:	7a23      	ldrb	r3, [r4, #8]
   16b1c:	09db      	lsrs	r3, r3, #7
			BDADDR_SIZE) == 0))) ||
   16b1e:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   16b22:	d00b      	beq.n	16b3c <isr_rx_scan+0x744>
	if (((_radio.scanner.filter_policy & 0x02) != 0) &&
   16b24:	4b12      	ldr	r3, [pc, #72]	; (16b70 <isr_rx_scan+0x778>)
   16b26:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
   16b2a:	f013 0f20 	tst.w	r3, #32
   16b2e:	d02d      	beq.n	16b8c <isr_rx_scan+0x794>
   16b30:	f994 3008 	ldrsb.w	r3, [r4, #8]
   16b34:	2b00      	cmp	r3, #0
   16b36:	db0c      	blt.n	16b52 <isr_rx_scan+0x75a>
	bool dir_report = false;
   16b38:	46d1      	mov	r9, sl
   16b3a:	e028      	b.n	16b8e <isr_rx_scan+0x796>
		(memcmp(&_radio.scanner.init_addr[0],
   16b3c:	2206      	movs	r2, #6
   16b3e:	4649      	mov	r1, r9
   16b40:	4811      	ldr	r0, [pc, #68]	; (16b88 <isr_rx_scan+0x790>)
   16b42:	f013 ff0b 	bl	2a95c <memcmp>
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
   16b46:	2800      	cmp	r0, #0
   16b48:	d1ec      	bne.n	16b24 <isr_rx_scan+0x72c>
	bool dir_report = false;
   16b4a:	46d1      	mov	r9, sl
			BDADDR_SIZE) == 0))) ||
   16b4c:	f04f 0a01 	mov.w	sl, #1
   16b50:	e029      	b.n	16ba6 <isr_rx_scan+0x7ae>
	    ((pdu->payload.direct_ind.tgt_addr[5] & 0xc0) == 0x40)) {
   16b52:	f898 300d 	ldrb.w	r3, [r8, #13]
	    (pdu->rx_addr != 0) &&
   16b56:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   16b5a:	2b40      	cmp	r3, #64	; 0x40
   16b5c:	d01d      	beq.n	16b9a <isr_rx_scan+0x7a2>
	bool dir_report = false;
   16b5e:	46d1      	mov	r9, sl
   16b60:	e015      	b.n	16b8e <isr_rx_scan+0x796>
   16b62:	bf00      	nop
   16b64:	f3af 8000 	nop.w
   16b68:	1afd498d 	.word	0x1afd498d
   16b6c:	00000007 	.word	0x00000007
   16b70:	20000e84 	.word	0x20000e84
   16b74:	00010ef9 	.word	0x00010ef9
   16b78:	3b9aca00 	.word	0x3b9aca00
   16b7c:	1afd498d 	.word	0x1afd498d
   16b80:	00010e65 	.word	0x00010e65
   16b84:	00015a25 	.word	0x00015a25
   16b88:	20000f64 	.word	0x20000f64
   16b8c:	46d1      	mov	r9, sl
			BDADDR_SIZE) == 0))) ||
   16b8e:	f1ba 0f00 	cmp.w	sl, #0
   16b92:	d008      	beq.n	16ba6 <isr_rx_scan+0x7ae>
   16b94:	f04f 0a01 	mov.w	sl, #1
   16b98:	e005      	b.n	16ba6 <isr_rx_scan+0x7ae>
			*dir_report = true;
   16b9a:	f04f 0901 	mov.w	r9, #1
		return true;
   16b9e:	46ca      	mov	sl, r9
   16ba0:	e7f5      	b.n	16b8e <isr_rx_scan+0x796>
	bool dir_report = false;
   16ba2:	f04f 0900 	mov.w	r9, #0
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
   16ba6:	f1ba 0f00 	cmp.w	sl, #0
   16baa:	d12b      	bne.n	16c04 <isr_rx_scan+0x80c>
   16bac:	e454      	b.n	16458 <isr_rx_scan+0x60>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_EXT_IND) &&
   16bae:	4a26      	ldr	r2, [pc, #152]	; (16c48 <isr_rx_scan+0x850>)
   16bb0:	f892 20dd 	ldrb.w	r2, [r2, #221]	; 0xdd
   16bb4:	f012 0f07 	tst.w	r2, #7
   16bb8:	d124      	bne.n	16c04 <isr_rx_scan+0x80c>
   16bba:	e459      	b.n	16470 <isr_rx_scan+0x78>
		   (_radio.scanner.state != 0) &&
   16bbc:	4b22      	ldr	r3, [pc, #136]	; (16c48 <isr_rx_scan+0x850>)
   16bbe:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
   16bc2:	f013 0f02 	tst.w	r3, #2
   16bc6:	d102      	bne.n	16bce <isr_rx_scan+0x7d6>
		return 1;
   16bc8:	f04f 0a01 	mov.w	sl, #1
   16bcc:	e022      	b.n	16c14 <isr_rx_scan+0x81c>
	struct pdu_adv *sreq = (struct pdu_adv *)radio_pkt_scratch_get();
   16bce:	f7f8 f837 	bl	ec40 <radio_pkt_scratch_get>
	return ((sreq->rx_addr == srsp->tx_addr) &&
   16bd2:	7802      	ldrb	r2, [r0, #0]
   16bd4:	7a23      	ldrb	r3, [r4, #8]
   16bd6:	f3c3 1380 	ubfx	r3, r3, #6, #1
   16bda:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   16bde:	d004      	beq.n	16bea <isr_rx_scan+0x7f2>
   16be0:	2300      	movs	r3, #0
		   (_radio.scanner.state != 0) &&
   16be2:	b97b      	cbnz	r3, 16c04 <isr_rx_scan+0x80c>
		return 1;
   16be4:	f04f 0a01 	mov.w	sl, #1
   16be8:	e014      	b.n	16c14 <isr_rx_scan+0x81c>
		(memcmp(&sreq->payload.scan_req.adv_addr[0],
   16bea:	2206      	movs	r2, #6
   16bec:	f108 0102 	add.w	r1, r8, #2
   16bf0:	3008      	adds	r0, #8
   16bf2:	f013 feb3 	bl	2a95c <memcmp>
	return ((sreq->rx_addr == srsp->tx_addr) &&
   16bf6:	b108      	cbz	r0, 16bfc <isr_rx_scan+0x804>
   16bf8:	2300      	movs	r3, #0
   16bfa:	e7f2      	b.n	16be2 <isr_rx_scan+0x7ea>
   16bfc:	2301      	movs	r3, #1
   16bfe:	e7f0      	b.n	16be2 <isr_rx_scan+0x7ea>
	bool dir_report = false;
   16c00:	f04f 0900 	mov.w	r9, #0
		 (pdu_adv_rx->len != 0) && (!_radio.scanner.conn)) {
   16c04:	7a63      	ldrb	r3, [r4, #9]
		   isr_scan_rsp_adva_matches(pdu_adv_rx))) &&
   16c06:	b1db      	cbz	r3, 16c40 <isr_rx_scan+0x848>
		 (pdu_adv_rx->len != 0) && (!_radio.scanner.conn)) {
   16c08:	4b0f      	ldr	r3, [pc, #60]	; (16c48 <isr_rx_scan+0x850>)
   16c0a:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
   16c0e:	b12b      	cbz	r3, 16c1c <isr_rx_scan+0x824>
		return 1;
   16c10:	f04f 0a01 	mov.w	sl, #1
}
   16c14:	4650      	mov	r0, sl
   16c16:	b00f      	add	sp, #60	; 0x3c
   16c18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		err = isr_rx_scan_report(rssi_ready,
   16c1c:	b907      	cbnz	r7, 16c20 <isr_rx_scan+0x828>
   16c1e:	25ff      	movs	r5, #255	; 0xff
   16c20:	464a      	mov	r2, r9
   16c22:	4629      	mov	r1, r5
   16c24:	4630      	mov	r0, r6
   16c26:	f7fc fe89 	bl	1393c <isr_rx_scan_report>
		if (err) {
   16c2a:	4682      	mov	sl, r0
   16c2c:	2800      	cmp	r0, #0
   16c2e:	d1f1      	bne.n	16c14 <isr_rx_scan+0x81c>
	return 1;
   16c30:	f04f 0a01 	mov.w	sl, #1
   16c34:	e7ee      	b.n	16c14 <isr_rx_scan+0x81c>
			return 1;
   16c36:	f04f 0a01 	mov.w	sl, #1
   16c3a:	e7eb      	b.n	16c14 <isr_rx_scan+0x81c>
		return 0;
   16c3c:	4682      	mov	sl, r0
   16c3e:	e7e9      	b.n	16c14 <isr_rx_scan+0x81c>
		return 1;
   16c40:	f04f 0a01 	mov.w	sl, #1
   16c44:	e7e6      	b.n	16c14 <isr_rx_scan+0x81c>
   16c46:	bf00      	nop
   16c48:	20000e84 	.word	0x20000e84
   16c4c:	00000000 	.word	0x00000000

00016c50 <isr_rx_adv>:
{
   16c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16c54:	b08f      	sub	sp, #60	; 0x3c
   16c56:	4604      	mov	r4, r0
	u8_t rl_idx = irkmatch_ok ? ctrl_rl_irk_idx(irkmatch_id) :
   16c58:	b9fa      	cbnz	r2, 16c9a <isr_rx_adv+0x4a>
   16c5a:	20ff      	movs	r0, #255	; 0xff
   16c5c:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
	pdu_adv = (struct pdu_adv *)radio_pkt_scratch_get();
   16c60:	f7f7 ffee 	bl	ec40 <radio_pkt_scratch_get>
   16c64:	4680      	mov	r8, r0
		[_radio.advertiser.adv_data.first][0];
   16c66:	4f9d      	ldr	r7, [pc, #628]	; (16edc <isr_rx_adv+0x28c>)
   16c68:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
	_pdu_adv = (struct pdu_adv *)&_radio.advertiser.adv_data.data
   16c6c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   16c70:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
   16c74:	3320      	adds	r3, #32
   16c76:	441f      	add	r7, r3
   16c78:	1dfd      	adds	r5, r7, #7
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
   16c7a:	7803      	ldrb	r3, [r0, #0]
   16c7c:	f003 030f 	and.w	r3, r3, #15
   16c80:	2b03      	cmp	r3, #3
   16c82:	d00e      	beq.n	16ca2 <isr_rx_adv+0x52>
	} else if ((pdu_adv->type == PDU_ADV_TYPE_CONNECT_IND) &&
   16c84:	f898 3000 	ldrb.w	r3, [r8]
   16c88:	f003 030f 	and.w	r3, r3, #15
   16c8c:	2b05      	cmp	r3, #5
   16c8e:	d065      	beq.n	16d5c <isr_rx_adv+0x10c>
	return 1;
   16c90:	2301      	movs	r3, #1
}
   16c92:	4618      	mov	r0, r3
   16c94:	b00f      	add	sp, #60	; 0x3c
   16c96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	u8_t rl_idx = irkmatch_ok ? ctrl_rl_irk_idx(irkmatch_id) :
   16c9a:	4618      	mov	r0, r3
   16c9c:	f002 f892 	bl	18dc4 <ctrl_rl_irk_idx>
   16ca0:	e7dc      	b.n	16c5c <isr_rx_adv+0xc>
	    (pdu_adv->len == sizeof(struct pdu_adv_payload_scan_req)) &&
   16ca2:	7843      	ldrb	r3, [r0, #1]
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
   16ca4:	2b0c      	cmp	r3, #12
   16ca6:	d1ed      	bne.n	16c84 <isr_rx_adv+0x34>
	return ((((_radio.advertiser.filter_policy & 0x01) == 0) &&
   16ca8:	4b8c      	ldr	r3, [pc, #560]	; (16edc <isr_rx_adv+0x28c>)
   16caa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   16cae:	f013 0f40 	tst.w	r3, #64	; 0x40
   16cb2:	d030      	beq.n	16d16 <isr_rx_adv+0xc6>
		(((_radio.advertiser.filter_policy & 0x01) != 0) &&
   16cb4:	4b89      	ldr	r3, [pc, #548]	; (16edc <isr_rx_adv+0x28c>)
   16cb6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
				      rl_idx)) ||
   16cba:	f013 0f40 	tst.w	r3, #64	; 0x40
   16cbe:	d04b      	beq.n	16d58 <isr_rx_adv+0x108>
		(((_radio.advertiser.filter_policy & 0x01) != 0) &&
   16cc0:	2c00      	cmp	r4, #0
   16cc2:	d034      	beq.n	16d2e <isr_rx_adv+0xde>
	return (adv->tx_addr == sr->rx_addr) &&
   16cc4:	79fb      	ldrb	r3, [r7, #7]
   16cc6:	f3c3 1380 	ubfx	r3, r3, #6, #1
   16cca:	f898 2000 	ldrb.w	r2, [r8]
   16cce:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   16cd2:	d034      	beq.n	16d3e <isr_rx_adv+0xee>
   16cd4:	2300      	movs	r3, #0
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   16cd6:	2b00      	cmp	r3, #0
   16cd8:	d13c      	bne.n	16d54 <isr_rx_adv+0x104>
   16cda:	2300      	movs	r3, #0
	    (pdu_adv->len == sizeof(struct pdu_adv_payload_scan_req)) &&
   16cdc:	2b00      	cmp	r3, #0
   16cde:	d0d1      	beq.n	16c84 <isr_rx_adv+0x34>
		_radio.state = STATE_CLOSE;
   16ce0:	4c7e      	ldr	r4, [pc, #504]	; (16edc <isr_rx_adv+0x28c>)
   16ce2:	2303      	movs	r3, #3
   16ce4:	7423      	strb	r3, [r4, #16]
		radio_switch_complete_and_disable();
   16ce6:	f7f7 ffbf 	bl	ec68 <radio_switch_complete_and_disable>
		     data[_radio.advertiser.scan_data.first][0]);
   16cea:	f894 30c5 	ldrb.w	r3, [r4, #197]	; 0xc5
		radio_pkt_tx_set(&_radio.advertiser.scan_data.
   16cee:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   16cf2:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
   16cf6:	3370      	adds	r3, #112	; 0x70
   16cf8:	4423      	add	r3, r4
   16cfa:	1dd8      	adds	r0, r3, #7
   16cfc:	f7f7 ff30 	bl	eb60 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
   16d00:	f7f7 ff66 	bl	ebd0 <radio_is_ready>
   16d04:	4603      	mov	r3, r0
   16d06:	2800      	cmp	r0, #0
   16d08:	d0c3      	beq.n	16c92 <isr_rx_adv+0x42>
   16d0a:	4040      	eors	r0, r0
   16d0c:	f380 8811 	msr	BASEPRI, r0
   16d10:	f04f 0004 	mov.w	r0, #4
   16d14:	df02      	svc	2
		 ctrl_rl_addr_allowed(sr->tx_addr,
   16d16:	4601      	mov	r1, r0
   16d18:	f811 0b02 	ldrb.w	r0, [r1], #2
   16d1c:	f10d 0237 	add.w	r2, sp, #55	; 0x37
   16d20:	f3c0 1080 	ubfx	r0, r0, #6, #1
   16d24:	f002 fa0e 	bl	19144 <ctrl_rl_addr_allowed>
	return ((((_radio.advertiser.filter_policy & 0x01) == 0) &&
   16d28:	2800      	cmp	r0, #0
   16d2a:	d1cb      	bne.n	16cc4 <isr_rx_adv+0x74>
   16d2c:	e7c2      	b.n	16cb4 <isr_rx_adv+0x64>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   16d2e:	f89d 0037 	ldrb.w	r0, [sp, #55]	; 0x37
   16d32:	f002 f871 	bl	18e18 <ctrl_irk_whitelisted>
   16d36:	2800      	cmp	r0, #0
   16d38:	d1c4      	bne.n	16cc4 <isr_rx_adv+0x74>
   16d3a:	2300      	movs	r3, #0
   16d3c:	e7ce      	b.n	16cdc <isr_rx_adv+0x8c>
		 !memcmp(adv->payload.adv_ind.addr,
   16d3e:	2206      	movs	r2, #6
   16d40:	f108 0108 	add.w	r1, r8, #8
   16d44:	1ca8      	adds	r0, r5, #2
   16d46:	f013 fe09 	bl	2a95c <memcmp>
	return (adv->tx_addr == sr->rx_addr) &&
   16d4a:	b908      	cbnz	r0, 16d50 <isr_rx_adv+0x100>
   16d4c:	2301      	movs	r3, #1
   16d4e:	e7c2      	b.n	16cd6 <isr_rx_adv+0x86>
   16d50:	2300      	movs	r3, #0
   16d52:	e7c0      	b.n	16cd6 <isr_rx_adv+0x86>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   16d54:	2301      	movs	r3, #1
   16d56:	e7c1      	b.n	16cdc <isr_rx_adv+0x8c>
   16d58:	2300      	movs	r3, #0
   16d5a:	e7bf      	b.n	16cdc <isr_rx_adv+0x8c>
		   (pdu_adv->len == sizeof(struct pdu_adv_payload_connect_ind)) &&
   16d5c:	f898 3001 	ldrb.w	r3, [r8, #1]
	} else if ((pdu_adv->type == PDU_ADV_TYPE_CONNECT_IND) &&
   16d60:	2b22      	cmp	r3, #34	; 0x22
   16d62:	d001      	beq.n	16d68 <isr_rx_adv+0x118>
	return 1;
   16d64:	2301      	movs	r3, #1
   16d66:	e794      	b.n	16c92 <isr_rx_adv+0x42>
	if (adv->type == PDU_ADV_TYPE_DIRECT_IND) {
   16d68:	79fb      	ldrb	r3, [r7, #7]
   16d6a:	f003 030f 	and.w	r3, r3, #15
   16d6e:	2b01      	cmp	r3, #1
   16d70:	d01a      	beq.n	16da8 <isr_rx_adv+0x158>
	return ((((_radio.advertiser.filter_policy & 0x02) == 0) &&
   16d72:	4b5a      	ldr	r3, [pc, #360]	; (16edc <isr_rx_adv+0x28c>)
   16d74:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   16d78:	09db      	lsrs	r3, r3, #7
   16d7a:	d06d      	beq.n	16e58 <isr_rx_adv+0x208>
		(((_radio.advertiser.filter_policy & 0x02) != 0) &&
   16d7c:	4b57      	ldr	r3, [pc, #348]	; (16edc <isr_rx_adv+0x28c>)
   16d7e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
				      rl_idx)) ||
   16d82:	09db      	lsrs	r3, r3, #7
   16d84:	f000 8096 	beq.w	16eb4 <isr_rx_adv+0x264>
		(((_radio.advertiser.filter_policy & 0x02) != 0) &&
   16d88:	2c00      	cmp	r4, #0
   16d8a:	d071      	beq.n	16e70 <isr_rx_adv+0x220>
	return (adv->tx_addr == ci->rx_addr) &&
   16d8c:	79fb      	ldrb	r3, [r7, #7]
   16d8e:	f3c3 1380 	ubfx	r3, r3, #6, #1
   16d92:	f898 2000 	ldrb.w	r2, [r8]
   16d96:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   16d9a:	d071      	beq.n	16e80 <isr_rx_adv+0x230>
   16d9c:	2300      	movs	r3, #0
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   16d9e:	2b00      	cmp	r3, #0
   16da0:	f000 809a 	beq.w	16ed8 <isr_rx_adv+0x288>
   16da4:	2301      	movs	r3, #1
   16da6:	e086      	b.n	16eb6 <isr_rx_adv+0x266>
		return ctrl_rl_addr_allowed(ci->tx_addr,
   16da8:	4641      	mov	r1, r8
   16daa:	f811 0b02 	ldrb.w	r0, [r1], #2
   16dae:	f10d 0237 	add.w	r2, sp, #55	; 0x37
   16db2:	f3c0 1080 	ubfx	r0, r0, #6, #1
   16db6:	f002 f9c5 	bl	19144 <ctrl_rl_addr_allowed>
		       isr_adv_ci_adva_check(adv, ci) &&
   16dba:	b908      	cbnz	r0, 16dc0 <isr_rx_adv+0x170>
   16dbc:	2300      	movs	r3, #0
   16dbe:	e07a      	b.n	16eb6 <isr_rx_adv+0x266>
	return (adv->tx_addr == ci->rx_addr) &&
   16dc0:	79fb      	ldrb	r3, [r7, #7]
   16dc2:	f3c3 1380 	ubfx	r3, r3, #6, #1
   16dc6:	f898 2000 	ldrb.w	r2, [r8]
   16dca:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   16dce:	d003      	beq.n	16dd8 <isr_rx_adv+0x188>
   16dd0:	2300      	movs	r3, #0
					    rl_idx) &&
   16dd2:	b9db      	cbnz	r3, 16e0c <isr_rx_adv+0x1bc>
		       isr_adv_ci_adva_check(adv, ci) &&
   16dd4:	2300      	movs	r3, #0
   16dd6:	e06e      	b.n	16eb6 <isr_rx_adv+0x266>
		(((adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
   16dd8:	79fb      	ldrb	r3, [r7, #7]
   16dda:	f003 030f 	and.w	r3, r3, #15
	return (adv->tx_addr == ci->rx_addr) &&
   16dde:	2b01      	cmp	r3, #1
   16de0:	d008      	beq.n	16df4 <isr_rx_adv+0x1a4>
		 (!memcmp(adv->payload.adv_ind.addr,
   16de2:	2206      	movs	r2, #6
   16de4:	f108 0108 	add.w	r1, r8, #8
   16de8:	1ca8      	adds	r0, r5, #2
   16dea:	f013 fdb7 	bl	2a95c <memcmp>
			 ci->payload.connect_ind.adv_addr, BDADDR_SIZE)) ||
   16dee:	b958      	cbnz	r0, 16e08 <isr_rx_adv+0x1b8>
	return (adv->tx_addr == ci->rx_addr) &&
   16df0:	2301      	movs	r3, #1
   16df2:	e7ee      	b.n	16dd2 <isr_rx_adv+0x182>
		 !memcmp(adv->payload.direct_ind.adv_addr,
   16df4:	2206      	movs	r2, #6
   16df6:	f108 0108 	add.w	r1, r8, #8
   16dfa:	1ca8      	adds	r0, r5, #2
   16dfc:	f013 fdae 	bl	2a95c <memcmp>
		(((adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
   16e00:	2800      	cmp	r0, #0
   16e02:	d1ee      	bne.n	16de2 <isr_rx_adv+0x192>
	return (adv->tx_addr == ci->rx_addr) &&
   16e04:	2301      	movs	r3, #1
   16e06:	e7e4      	b.n	16dd2 <isr_rx_adv+0x182>
   16e08:	2300      	movs	r3, #0
   16e0a:	e7e2      	b.n	16dd2 <isr_rx_adv+0x182>
		       isr_adv_ci_tgta_check(adv, ci, *rl_idx);
   16e0c:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
	if (rl_idx != FILTER_IDX_NONE) {
   16e10:	2bff      	cmp	r3, #255	; 0xff
   16e12:	d009      	beq.n	16e28 <isr_rx_adv+0x1d8>
		return rl_idx == _radio.advertiser.rl_idx;
   16e14:	4a31      	ldr	r2, [pc, #196]	; (16edc <isr_rx_adv+0x28c>)
   16e16:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
   16e1a:	4293      	cmp	r3, r2
   16e1c:	bf14      	ite	ne
   16e1e:	2300      	movne	r3, #0
   16e20:	2301      	moveq	r3, #1
		       isr_adv_ci_adva_check(adv, ci) &&
   16e22:	b9bb      	cbnz	r3, 16e54 <isr_rx_adv+0x204>
   16e24:	2300      	movs	r3, #0
   16e26:	e046      	b.n	16eb6 <isr_rx_adv+0x266>
	return (adv->rx_addr == ci->tx_addr) &&
   16e28:	79fa      	ldrb	r2, [r7, #7]
   16e2a:	f898 3000 	ldrb.w	r3, [r8]
   16e2e:	f3c3 1380 	ubfx	r3, r3, #6, #1
   16e32:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   16e36:	d001      	beq.n	16e3c <isr_rx_adv+0x1ec>
   16e38:	2300      	movs	r3, #0
   16e3a:	e7f2      	b.n	16e22 <isr_rx_adv+0x1d2>
	       !memcmp(adv->payload.direct_ind.tgt_addr,
   16e3c:	2206      	movs	r2, #6
   16e3e:	f108 0102 	add.w	r1, r8, #2
   16e42:	f105 0008 	add.w	r0, r5, #8
   16e46:	f013 fd89 	bl	2a95c <memcmp>
	return (adv->rx_addr == ci->tx_addr) &&
   16e4a:	b908      	cbnz	r0, 16e50 <isr_rx_adv+0x200>
   16e4c:	2301      	movs	r3, #1
   16e4e:	e7e8      	b.n	16e22 <isr_rx_adv+0x1d2>
   16e50:	2300      	movs	r3, #0
   16e52:	e7e6      	b.n	16e22 <isr_rx_adv+0x1d2>
		       isr_adv_ci_adva_check(adv, ci) &&
   16e54:	2301      	movs	r3, #1
   16e56:	e02e      	b.n	16eb6 <isr_rx_adv+0x266>
		 ctrl_rl_addr_allowed(ci->tx_addr,
   16e58:	4641      	mov	r1, r8
   16e5a:	f811 0b02 	ldrb.w	r0, [r1], #2
   16e5e:	f10d 0237 	add.w	r2, sp, #55	; 0x37
   16e62:	f3c0 1080 	ubfx	r0, r0, #6, #1
   16e66:	f002 f96d 	bl	19144 <ctrl_rl_addr_allowed>
	return ((((_radio.advertiser.filter_policy & 0x02) == 0) &&
   16e6a:	2800      	cmp	r0, #0
   16e6c:	d18e      	bne.n	16d8c <isr_rx_adv+0x13c>
   16e6e:	e785      	b.n	16d7c <isr_rx_adv+0x12c>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   16e70:	f89d 0037 	ldrb.w	r0, [sp, #55]	; 0x37
   16e74:	f001 ffd0 	bl	18e18 <ctrl_irk_whitelisted>
   16e78:	2800      	cmp	r0, #0
   16e7a:	d187      	bne.n	16d8c <isr_rx_adv+0x13c>
   16e7c:	2300      	movs	r3, #0
   16e7e:	e01a      	b.n	16eb6 <isr_rx_adv+0x266>
		(((adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
   16e80:	79fb      	ldrb	r3, [r7, #7]
   16e82:	f003 030f 	and.w	r3, r3, #15
	return (adv->tx_addr == ci->rx_addr) &&
   16e86:	2b01      	cmp	r3, #1
   16e88:	d008      	beq.n	16e9c <isr_rx_adv+0x24c>
		 (!memcmp(adv->payload.adv_ind.addr,
   16e8a:	2206      	movs	r2, #6
   16e8c:	f108 0108 	add.w	r1, r8, #8
   16e90:	1ca8      	adds	r0, r5, #2
   16e92:	f013 fd63 	bl	2a95c <memcmp>
			 ci->payload.connect_ind.adv_addr, BDADDR_SIZE)) ||
   16e96:	b958      	cbnz	r0, 16eb0 <isr_rx_adv+0x260>
	return (adv->tx_addr == ci->rx_addr) &&
   16e98:	2301      	movs	r3, #1
   16e9a:	e780      	b.n	16d9e <isr_rx_adv+0x14e>
		 !memcmp(adv->payload.direct_ind.adv_addr,
   16e9c:	2206      	movs	r2, #6
   16e9e:	f108 0108 	add.w	r1, r8, #8
   16ea2:	1ca8      	adds	r0, r5, #2
   16ea4:	f013 fd5a 	bl	2a95c <memcmp>
		(((adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
   16ea8:	2800      	cmp	r0, #0
   16eaa:	d1ee      	bne.n	16e8a <isr_rx_adv+0x23a>
	return (adv->tx_addr == ci->rx_addr) &&
   16eac:	2301      	movs	r3, #1
   16eae:	e776      	b.n	16d9e <isr_rx_adv+0x14e>
   16eb0:	2300      	movs	r3, #0
   16eb2:	e774      	b.n	16d9e <isr_rx_adv+0x14e>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   16eb4:	2300      	movs	r3, #0
		   (pdu_adv->len == sizeof(struct pdu_adv_payload_connect_ind)) &&
   16eb6:	2b00      	cmp	r3, #0
   16eb8:	f000 8232 	beq.w	17320 <isr_rx_adv+0x6d0>
		   ((_radio.fc_ena == 0) || (_radio.fc_req == _radio.fc_ack)) &&
   16ebc:	4b07      	ldr	r3, [pc, #28]	; (16edc <isr_rx_adv+0x28c>)
   16ebe:	f893 317e 	ldrb.w	r3, [r3, #382]	; 0x17e
		   isr_adv_ci_check(_pdu_adv, pdu_adv, devmatch_ok, &rl_idx) &&
   16ec2:	b16b      	cbz	r3, 16ee0 <isr_rx_adv+0x290>
		   ((_radio.fc_ena == 0) || (_radio.fc_req == _radio.fc_ack)) &&
   16ec4:	4a05      	ldr	r2, [pc, #20]	; (16edc <isr_rx_adv+0x28c>)
   16ec6:	f892 317c 	ldrb.w	r3, [r2, #380]	; 0x17c
   16eca:	b2db      	uxtb	r3, r3
   16ecc:	f892 217d 	ldrb.w	r2, [r2, #381]	; 0x17d
   16ed0:	4293      	cmp	r3, r2
   16ed2:	d005      	beq.n	16ee0 <isr_rx_adv+0x290>
	return 1;
   16ed4:	2301      	movs	r3, #1
   16ed6:	e6dc      	b.n	16c92 <isr_rx_adv+0x42>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   16ed8:	2300      	movs	r3, #0
   16eda:	e7ec      	b.n	16eb6 <isr_rx_adv+0x266>
   16edc:	20000e84 	.word	0x20000e84
		   (_radio.advertiser.conn)) {
   16ee0:	4bd9      	ldr	r3, [pc, #868]	; (17248 <isr_rx_adv+0x5f8>)
   16ee2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
		   ((_radio.fc_ena == 0) || (_radio.fc_req == _radio.fc_ack)) &&
   16ee6:	2b00      	cmp	r3, #0
   16ee8:	f000 821c 	beq.w	17324 <isr_rx_adv+0x6d4>
	if (_radio.packet_rx_acquire >=
   16eec:	4bd6      	ldr	r3, [pc, #856]	; (17248 <isr_rx_adv+0x5f8>)
   16eee:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   16ef2:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   16ef6:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   16ef8:	429a      	cmp	r2, r3
   16efa:	f0c0 81cf 	bcc.w	1729c <isr_rx_adv+0x64c>
			_radio.packet_rx_last);
   16efe:	4bd2      	ldr	r3, [pc, #840]	; (17248 <isr_rx_adv+0x5f8>)
   16f00:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   16f04:	1ad3      	subs	r3, r2, r3
   16f06:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   16f08:	2b03      	cmp	r3, #3
   16f0a:	f240 81d1 	bls.w	172b0 <isr_rx_adv+0x660>
	return _radio.packet_rx[_radio.packet_rx_last];
   16f0e:	4bce      	ldr	r3, [pc, #824]	; (17248 <isr_rx_adv+0x5f8>)
   16f10:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   16f14:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   16f18:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
		if (radio_pdu_node_rx == 0) {
   16f1c:	2d00      	cmp	r5, #0
   16f1e:	f000 8203 	beq.w	17328 <isr_rx_adv+0x6d8>
		_radio.state = STATE_STOP;
   16f22:	4ec9      	ldr	r6, [pc, #804]	; (17248 <isr_rx_adv+0x5f8>)
   16f24:	f04f 0904 	mov.w	r9, #4
   16f28:	f886 9010 	strb.w	r9, [r6, #16]
		radio_disable();
   16f2c:	f7f7 fe36 	bl	eb9c <radio_disable>
		conn = _radio.advertiser.conn;
   16f30:	f8d6 40c8 	ldr.w	r4, [r6, #200]	; 0xc8
		_radio.advertiser.conn = NULL;
   16f34:	2300      	movs	r3, #0
   16f36:	f8c6 30c8 	str.w	r3, [r6, #200]	; 0xc8
		conn->handle = mem_index_get(conn, _radio.conn_pool,
   16f3a:	f44f 72aa 	mov.w	r2, #340	; 0x154
   16f3e:	f8d6 1104 	ldr.w	r1, [r6, #260]	; 0x104
   16f42:	4620      	mov	r0, r4
   16f44:	f7f7 fc55 	bl	e7f2 <mem_index_get>
   16f48:	8420      	strh	r0, [r4, #32]
		memcpy(&conn->crc_init[0],
   16f4a:	2203      	movs	r2, #3
   16f4c:	f108 0112 	add.w	r1, r8, #18
   16f50:	f104 0014 	add.w	r0, r4, #20
   16f54:	f7e9 f9b4 	bl	2c0 <memcpy>
		memcpy(&conn->access_addr[0],
   16f58:	f104 0a10 	add.w	sl, r4, #16
   16f5c:	464a      	mov	r2, r9
   16f5e:	f108 010e 	add.w	r1, r8, #14
   16f62:	4650      	mov	r0, sl
   16f64:	f7e9 f9ac 	bl	2c0 <memcpy>
		memcpy(&conn->data_chan_map[0],
   16f68:	f104 0617 	add.w	r6, r4, #23
   16f6c:	2205      	movs	r2, #5
   16f6e:	f108 011e 	add.w	r1, r8, #30
   16f72:	4630      	mov	r0, r6
   16f74:	f7e9 f9a4 	bl	2c0 <memcpy>
			util_ones_count_get(&conn->data_chan_map[0],
   16f78:	2105      	movs	r1, #5
   16f7a:	4630      	mov	r0, r6
   16f7c:	f7f7 fc7d 	bl	e87a <util_ones_count_get>
		conn->data_chan_count =
   16f80:	7f63      	ldrb	r3, [r4, #29]
   16f82:	f360 0305 	bfi	r3, r0, #0, #6
   16f86:	7763      	strb	r3, [r4, #29]
		conn->data_chan_hop = pdu_adv->payload.connect_ind.lldata.hop;
   16f88:	f898 3023 	ldrb.w	r3, [r8, #35]	; 0x23
   16f8c:	f3c3 0304 	ubfx	r3, r3, #0, #5
   16f90:	77a3      	strb	r3, [r4, #30]
			pdu_adv->payload.connect_ind.lldata.interval;
   16f92:	f8b8 3018 	ldrh.w	r3, [r8, #24]
		conn->conn_interval =
   16f96:	84a3      	strh	r3, [r4, #36]	; 0x24
			pdu_adv->payload.connect_ind.lldata.interval * 1250;
   16f98:	f8b8 3018 	ldrh.w	r3, [r8, #24]
   16f9c:	f240 46e2 	movw	r6, #1250	; 0x4e2
   16fa0:	fb06 f603 	mul.w	r6, r6, r3
		conn->latency = pdu_adv->payload.connect_ind.lldata.latency;
   16fa4:	f8b8 301a 	ldrh.w	r3, [r8, #26]
   16fa8:	84e3      	strh	r3, [r4, #38]	; 0x26
		memcpy((void *)&conn->slave.force, &conn->access_addr[0],
   16faa:	464a      	mov	r2, r9
   16fac:	4651      	mov	r1, sl
   16fae:	f104 006c 	add.w	r0, r4, #108	; 0x6c
   16fb2:	f7e9 f985 	bl	2c0 <memcpy>
			RADIO_CONN_EVENTS((pdu_adv->payload.connect_ind.lldata.timeout
   16fb6:	f8b8 301c 	ldrh.w	r3, [r8, #28]
   16fba:	f242 7210 	movw	r2, #10000	; 0x2710
   16fbe:	fb02 6303 	mla	r3, r2, r3, r6
   16fc2:	3b01      	subs	r3, #1
   16fc4:	fbb3 f3f6 	udiv	r3, r3, r6
		conn->supervision_reload =
   16fc8:	87e3      	strh	r3, [r4, #62]	; 0x3e
		conn->procedure_reload = RADIO_CONN_EVENTS((40 * 1000 * 1000),
   16fca:	4ba0      	ldr	r3, [pc, #640]	; (1724c <isr_rx_adv+0x5fc>)
   16fcc:	4433      	add	r3, r6
   16fce:	fbb3 f3f6 	udiv	r3, r3, r6
   16fd2:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   16fd6:	4b9e      	ldr	r3, [pc, #632]	; (17250 <isr_rx_adv+0x600>)
   16fd8:	4433      	add	r3, r6
   16fda:	fbb3 f3f6 	udiv	r3, r3, r6
   16fde:	b29b      	uxth	r3, r3
   16fe0:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   16fe4:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
   16fe6:	1d91      	adds	r1, r2, #6
   16fe8:	428b      	cmp	r3, r1
   16fea:	dd03      	ble.n	16ff4 <isr_rx_adv+0x3a4>
				     (conn->apto_reload - (conn->latency + 6)) :
   16fec:	1a9b      	subs	r3, r3, r2
   16fee:	b29b      	uxth	r3, r3
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   16ff0:	3b06      	subs	r3, #6
   16ff2:	b29b      	uxth	r3, r3
   16ff4:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
		radio_pdu_node_rx->hdr.handle = conn->handle;
   16ff8:	8c23      	ldrh	r3, [r4, #32]
   16ffa:	80eb      	strh	r3, [r5, #6]
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   16ffc:	2206      	movs	r2, #6
   16ffe:	712a      	strb	r2, [r5, #4]
		radio_le_conn_cmplt->status = 0x00;
   17000:	2300      	movs	r3, #0
   17002:	72eb      	strb	r3, [r5, #11]
		radio_le_conn_cmplt->role = 0x01;
   17004:	2301      	movs	r3, #1
   17006:	732b      	strb	r3, [r5, #12]
		radio_le_conn_cmplt->own_addr_type = pdu_adv->rx_addr;
   17008:	4641      	mov	r1, r8
   1700a:	f811 3b08 	ldrb.w	r3, [r1], #8
   1700e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
   17012:	76ab      	strb	r3, [r5, #26]
		memcpy(&radio_le_conn_cmplt->own_addr[0],
   17014:	f105 001b 	add.w	r0, r5, #27
   17018:	f7e9 f952 	bl	2c0 <memcpy>
		if (rl_idx != FILTER_IDX_NONE) {
   1701c:	f89d 0037 	ldrb.w	r0, [sp, #55]	; 0x37
   17020:	28ff      	cmp	r0, #255	; 0xff
   17022:	f000 8147 	beq.w	172b4 <isr_rx_adv+0x664>
			ll_rl_id_addr_get(rl_idx,
   17026:	f105 020e 	add.w	r2, r5, #14
   1702a:	f105 010d 	add.w	r1, r5, #13
   1702e:	f002 f85d 	bl	190ec <ll_rl_id_addr_get>
			radio_le_conn_cmplt->peer_addr_type += 2;
   17032:	7b6b      	ldrb	r3, [r5, #13]
   17034:	3302      	adds	r3, #2
   17036:	736b      	strb	r3, [r5, #13]
			memcpy(&radio_le_conn_cmplt->peer_rpa[0],
   17038:	2206      	movs	r2, #6
   1703a:	f108 0102 	add.w	r1, r8, #2
   1703e:	f105 0014 	add.w	r0, r5, #20
   17042:	f7e9 f93d 	bl	2c0 <memcpy>
			pdu_adv->payload.connect_ind.lldata.interval;
   17046:	f8b8 3018 	ldrh.w	r3, [r8, #24]
		radio_le_conn_cmplt->interval =
   1704a:	f8a5 3021 	strh.w	r3, [r5, #33]	; 0x21
			pdu_adv->payload.connect_ind.lldata.latency;
   1704e:	f8b8 301a 	ldrh.w	r3, [r8, #26]
		radio_le_conn_cmplt->latency =
   17052:	f8a5 3023 	strh.w	r3, [r5, #35]	; 0x23
			pdu_adv->payload.connect_ind.lldata.timeout;
   17056:	f8b8 301c 	ldrh.w	r3, [r8, #28]
		radio_le_conn_cmplt->timeout =
   1705a:	f8a5 3025 	strh.w	r3, [r5, #37]	; 0x25
			pdu_adv->payload.connect_ind.lldata.sca;
   1705e:	f898 3023 	ldrb.w	r3, [r8, #35]	; 0x23
   17062:	f3c3 1342 	ubfx	r3, r3, #5, #3
		radio_le_conn_cmplt->mca =
   17066:	f885 3027 	strb.w	r3, [r5, #39]	; 0x27
		rx_fc_lock(conn->handle);
   1706a:	8c20      	ldrh	r0, [r4, #32]
   1706c:	f7f9 fedc 	bl	10e28 <rx_fc_lock>
		packet_rx_enqueue();
   17070:	f7fc fbc4 	bl	137fc <packet_rx_enqueue>
	if (_radio.packet_rx_acquire >=
   17074:	4b74      	ldr	r3, [pc, #464]	; (17248 <isr_rx_adv+0x5f8>)
   17076:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   1707a:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   1707e:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   17080:	429a      	cmp	r2, r3
   17082:	f0c0 8129 	bcc.w	172d8 <isr_rx_adv+0x688>
			_radio.packet_rx_last);
   17086:	4b70      	ldr	r3, [pc, #448]	; (17248 <isr_rx_adv+0x5f8>)
   17088:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   1708c:	1ad3      	subs	r3, r2, r3
   1708e:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   17090:	2b02      	cmp	r3, #2
   17092:	f240 812b 	bls.w	172ec <isr_rx_adv+0x69c>
	return _radio.packet_rx[_radio.packet_rx_last];
   17096:	4b6c      	ldr	r3, [pc, #432]	; (17248 <isr_rx_adv+0x5f8>)
   17098:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   1709c:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   170a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
			LL_ASSERT(radio_pdu_node_rx);
   170a4:	2b00      	cmp	r3, #0
   170a6:	f000 8123 	beq.w	172f0 <isr_rx_adv+0x6a0>
			radio_pdu_node_rx->hdr.handle = conn->handle;
   170aa:	8c22      	ldrh	r2, [r4, #32]
   170ac:	80da      	strh	r2, [r3, #6]
			radio_pdu_node_rx->hdr.type =
   170ae:	220b      	movs	r2, #11
   170b0:	711a      	strb	r2, [r3, #4]
			if (pdu_adv->chan_sel) {
   170b2:	f898 2000 	ldrb.w	r2, [r8]
   170b6:	f012 0f20 	tst.w	r2, #32
   170ba:	f000 811f 	beq.w	172fc <isr_rx_adv+0x6ac>
					((u16_t)conn->access_addr[1] << 8) |
   170be:	7c61      	ldrb	r1, [r4, #17]
					conn->access_addr[0];
   170c0:	7c22      	ldrb	r2, [r4, #16]
				u16_t aa_ls =
   170c2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
					((u16_t)conn->access_addr[3] << 8) |
   170c6:	7ce0      	ldrb	r0, [r4, #19]
					 conn->access_addr[2];
   170c8:	7ca1      	ldrb	r1, [r4, #18]
				u16_t aa_ms =
   170ca:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
				conn->data_chan_sel = 1;
   170ce:	7f60      	ldrb	r0, [r4, #29]
   170d0:	f040 0040 	orr.w	r0, r0, #64	; 0x40
   170d4:	7760      	strb	r0, [r4, #29]
				conn->data_chan_id = aa_ms ^ aa_ls;
   170d6:	404a      	eors	r2, r1
   170d8:	83e2      	strh	r2, [r4, #30]
				le_chan_sel_algo->chan_sel_algo = 0x01;
   170da:	2201      	movs	r2, #1
   170dc:	72da      	strb	r2, [r3, #11]
			packet_rx_enqueue();
   170de:	f7fc fb8d 	bl	137fc <packet_rx_enqueue>
		conn->slave.sca = pdu_adv->payload.connect_ind.lldata.sca;
   170e2:	f898 2023 	ldrb.w	r2, [r8, #35]	; 0x23
   170e6:	0952      	lsrs	r2, r2, #5
   170e8:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
   170ec:	f362 0384 	bfi	r3, r2, #2, #3
   170f0:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
			(((gc_lookup_ppm[_radio.sca] +
   170f4:	4d54      	ldr	r5, [pc, #336]	; (17248 <isr_rx_adv+0x5f8>)
   170f6:	f895 311c 	ldrb.w	r3, [r5, #284]	; 0x11c
   170fa:	4956      	ldr	r1, [pc, #344]	; (17254 <isr_rx_adv+0x604>)
   170fc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
			   gc_lookup_ppm[conn->slave.sca]) *
   17100:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
			(((gc_lookup_ppm[_radio.sca] +
   17104:	4413      	add	r3, r2
			   gc_lookup_ppm[conn->slave.sca]) *
   17106:	fb03 f306 	mul.w	r3, r3, r6
			  conn_interval_us) + (1000000 - 1)) / 1000000;
   1710a:	f503 2374 	add.w	r3, r3, #999424	; 0xf4000
   1710e:	f203 233f 	addw	r3, r3, #575	; 0x23f
   17112:	4a51      	ldr	r2, [pc, #324]	; (17258 <isr_rx_adv+0x608>)
   17114:	fba2 2303 	umull	r2, r3, r2, r3
   17118:	0c9b      	lsrs	r3, r3, #18
		conn->slave.window_widening_periodic_us =
   1711a:	6563      	str	r3, [r4, #84]	; 0x54
			(conn_interval_us >> 1) - RADIO_TIFS;
   1711c:	0873      	lsrs	r3, r6, #1
   1711e:	3b96      	subs	r3, #150	; 0x96
		conn->slave.window_widening_max_us =
   17120:	65a3      	str	r3, [r4, #88]	; 0x58
			pdu_adv->payload.connect_ind.lldata.win_size * 1250;
   17122:	f898 3015 	ldrb.w	r3, [r8, #21]
   17126:	f240 49e2 	movw	r9, #1250	; 0x4e2
   1712a:	fb09 f303 	mul.w	r3, r9, r3
		conn->slave.window_size_event_us =
   1712e:	66a3      	str	r3, [r4, #104]	; 0x68
		conn->slave.window_size_prepare_us = 0;
   17130:	f04f 0b00 	mov.w	fp, #0
   17134:	f8c4 b064 	str.w	fp, [r4, #100]	; 0x64
		rx_ready_delay = radio_rx_ready_delay_get(0);
   17138:	4658      	mov	r0, fp
   1713a:	f7f7 fd1b 	bl	eb74 <radio_rx_ready_delay_get>
   1713e:	4682      	mov	sl, r0
			TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
   17140:	f200 4052 	addw	r0, r0, #1106	; 0x452
   17144:	a33e      	add	r3, pc, #248	; (adr r3, 17240 <isr_rx_adv+0x5f0>)
   17146:	e9d3 2300 	ldrd	r2, r3, [r3]
   1714a:	4944      	ldr	r1, [pc, #272]	; (1725c <isr_rx_adv+0x60c>)
   1714c:	fba0 0101 	umull	r0, r1, r0, r1
   17150:	f7e9 ffd4 	bl	10fc <__aeabi_uldivmod>
   17154:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		conn->hdr.ticks_slot =
   17158:	60e0      	str	r0, [r4, #12]
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
   1715a:	f8d5 5180 	ldr.w	r5, [r5, #384]	; 0x180
   1715e:	6065      	str	r5, [r4, #4]
		conn->hdr.ticks_xtal_to_start =
   17160:	2327      	movs	r3, #39	; 0x27
   17162:	6023      	str	r3, [r4, #0]
		conn->hdr.ticks_preempt_to_start =
   17164:	f8c4 b008 	str.w	fp, [r4, #8]
		ticks_slot_offset =
   17168:	429d      	cmp	r5, r3
   1716a:	bf38      	it	cc
   1716c:	461d      	movcc	r5, r3
			conn->slave.window_widening_periodic_us;
   1716e:	6d63      	ldr	r3, [r4, #84]	; 0x54
		conn_interval_us -=
   17170:	1af6      	subs	r6, r6, r3
		conn_offset_us = radio_tmr_end_get();
   17172:	f7f7 fee5 	bl	ef40 <radio_tmr_end_get>
			((u64_t)pdu_adv->payload.connect_ind.lldata.win_offset +
   17176:	f8b8 2016 	ldrh.w	r2, [r8, #22]
   1717a:	b292      	uxth	r2, r2
		conn_offset_us +=
   1717c:	fb09 9902 	mla	r9, r9, r2, r9
   17180:	4481      	add	r9, r0
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
   17182:	4659      	mov	r1, fp
   17184:	4658      	mov	r0, fp
   17186:	f7f7 fcf3 	bl	eb70 <radio_tx_chain_delay_get>
   1718a:	eba9 0000 	sub.w	r0, r9, r0
		conn_offset_us -= rx_ready_delay;
   1718e:	eba0 0a0a 	sub.w	sl, r0, sl
		conn_offset_us -= RADIO_TICKER_JITTER_US;
   17192:	f1aa 0a30 	sub.w	sl, sl, #48	; 0x30
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   17196:	f240 4372 	movw	r3, #1138	; 0x472
   1719a:	9300      	str	r3, [sp, #0]
   1719c:	4b30      	ldr	r3, [pc, #192]	; (17260 <isr_rx_adv+0x610>)
   1719e:	2205      	movs	r2, #5
   171a0:	4659      	mov	r1, fp
   171a2:	4658      	mov	r0, fp
   171a4:	f7f9 f850 	bl	10248 <ticker_stop>
		ticker_stop_adv_assert(ticker_status, (void *)__LINE__);
   171a8:	f240 4173 	movw	r1, #1139	; 0x473
   171ac:	f7f9 fe84 	bl	10eb8 <ticker_stop_adv_assert>
		if (_pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
   171b0:	79fb      	ldrb	r3, [r7, #7]
   171b2:	f003 030f 	and.w	r3, r3, #15
   171b6:	2b01      	cmp	r3, #1
   171b8:	f000 80a3 	beq.w	17302 <isr_rx_adv+0x6b2>
		     RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle,
   171bc:	8c23      	ldrh	r3, [r4, #32]
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   171be:	3307      	adds	r3, #7
   171c0:	b2db      	uxtb	r3, r3
   171c2:	930b      	str	r3, [sp, #44]	; 0x2c
		     (_radio.ticks_anchor - ticks_slot_offset),
   171c4:	4b20      	ldr	r3, [pc, #128]	; (17248 <isr_rx_adv+0x5f8>)
   171c6:	685b      	ldr	r3, [r3, #4]
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   171c8:	eba3 0905 	sub.w	r9, r3, r5
		     TICKER_US_TO_TICKS(conn_offset_us),
   171cc:	f04f 0800 	mov.w	r8, #0
   171d0:	4f22      	ldr	r7, [pc, #136]	; (1725c <isr_rx_adv+0x60c>)
   171d2:	a31b      	add	r3, pc, #108	; (adr r3, 17240 <isr_rx_adv+0x5f0>)
   171d4:	e9d3 2300 	ldrd	r2, r3, [r3]
   171d8:	fbaa 0107 	umull	r0, r1, sl, r7
   171dc:	f7e9 ff8e 	bl	10fc <__aeabi_uldivmod>
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   171e0:	f020 4a7f 	bic.w	sl, r0, #4278190080	; 0xff000000
		     TICKER_US_TO_TICKS(conn_interval_us),
   171e4:	fba6 6707 	umull	r6, r7, r6, r7
   171e8:	a315      	add	r3, pc, #84	; (adr r3, 17240 <isr_rx_adv+0x5f0>)
   171ea:	e9d3 2300 	ldrd	r2, r3, [r3]
   171ee:	4630      	mov	r0, r6
   171f0:	4639      	mov	r1, r7
   171f2:	f7e9 ff83 	bl	10fc <__aeabi_uldivmod>
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   171f6:	f020 4b7f 	bic.w	fp, r0, #4278190080	; 0xff000000
		     TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
   171fa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   171fe:	2100      	movs	r1, #0
   17200:	4a18      	ldr	r2, [pc, #96]	; (17264 <isr_rx_adv+0x614>)
   17202:	2307      	movs	r3, #7
   17204:	fb03 f300 	mul.w	r3, r3, r0
   17208:	fb02 3301 	mla	r3, r2, r1, r3
   1720c:	fba0 0102 	umull	r0, r1, r0, r2
   17210:	4419      	add	r1, r3
   17212:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   17216:	2300      	movs	r3, #0
   17218:	1a30      	subs	r0, r6, r0
   1721a:	eb67 0101 	sbc.w	r1, r7, r1
   1721e:	f7e9 ff6d 	bl	10fc <__aeabi_uldivmod>
		     (ticks_slot_offset + conn->hdr.ticks_slot),
   17222:	68e3      	ldr	r3, [r4, #12]
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   17224:	442b      	add	r3, r5
   17226:	b29b      	uxth	r3, r3
   17228:	f240 428a 	movw	r2, #1162	; 0x48a
   1722c:	9208      	str	r2, [sp, #32]
   1722e:	4a0e      	ldr	r2, [pc, #56]	; (17268 <isr_rx_adv+0x618>)
   17230:	9207      	str	r2, [sp, #28]
   17232:	9406      	str	r4, [sp, #24]
   17234:	4a0d      	ldr	r2, [pc, #52]	; (1726c <isr_rx_adv+0x61c>)
   17236:	9205      	str	r2, [sp, #20]
   17238:	e01a      	b.n	17270 <isr_rx_adv+0x620>
   1723a:	bf00      	nop
   1723c:	f3af 8000 	nop.w
   17240:	1afd498d 	.word	0x1afd498d
   17244:	00000007 	.word	0x00000007
   17248:	20000e84 	.word	0x20000e84
   1724c:	026259ff 	.word	0x026259ff
   17250:	01c9c37f 	.word	0x01c9c37f
   17254:	0002fb40 	.word	0x0002fb40
   17258:	431bde83 	.word	0x431bde83
   1725c:	3b9aca00 	.word	0x3b9aca00
   17260:	00010eb9 	.word	0x00010eb9
   17264:	1afd498d 	.word	0x1afd498d
   17268:	00010e65 	.word	0x00010e65
   1726c:	00015a1d 	.word	0x00015a1d
   17270:	9304      	str	r3, [sp, #16]
   17272:	f8cd 800c 	str.w	r8, [sp, #12]
   17276:	9002      	str	r0, [sp, #8]
   17278:	f8cd b004 	str.w	fp, [sp, #4]
   1727c:	f8cd a000 	str.w	sl, [sp]
   17280:	464b      	mov	r3, r9
   17282:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   17284:	4641      	mov	r1, r8
   17286:	4640      	mov	r0, r8
   17288:	f7f8 ff42 	bl	10110 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1728c:	4603      	mov	r3, r0
   1728e:	2800      	cmp	r0, #0
   17290:	f43f acff 	beq.w	16c92 <isr_rx_adv+0x42>
   17294:	2802      	cmp	r0, #2
   17296:	d13d      	bne.n	17314 <isr_rx_adv+0x6c4>
		return 0;
   17298:	2300      	movs	r3, #0
   1729a:	e4fa      	b.n	16c92 <isr_rx_adv+0x42>
		return (_radio.packet_rx_count -
   1729c:	4923      	ldr	r1, [pc, #140]	; (1732c <isr_rx_adv+0x6dc>)
   1729e:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
			_radio.packet_rx_last +
   172a2:	f891 113d 	ldrb.w	r1, [r1, #317]	; 0x13d
		return (_radio.packet_rx_count -
   172a6:	1a5b      	subs	r3, r3, r1
			_radio.packet_rx_last +
   172a8:	fa52 f383 	uxtab	r3, r2, r3
   172ac:	b2db      	uxtb	r3, r3
   172ae:	e62b      	b.n	16f08 <isr_rx_adv+0x2b8>
		return 0;
   172b0:	2500      	movs	r5, #0
   172b2:	e633      	b.n	16f1c <isr_rx_adv+0x2cc>
			memset(&radio_le_conn_cmplt->peer_rpa[0], 0x0,
   172b4:	2206      	movs	r2, #6
   172b6:	2100      	movs	r1, #0
   172b8:	f105 0014 	add.w	r0, r5, #20
   172bc:	f013 fbe2 	bl	2aa84 <memset>
			radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
   172c0:	4641      	mov	r1, r8
   172c2:	f811 3b02 	ldrb.w	r3, [r1], #2
   172c6:	f3c3 1380 	ubfx	r3, r3, #6, #1
   172ca:	736b      	strb	r3, [r5, #13]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
   172cc:	2206      	movs	r2, #6
   172ce:	f105 000e 	add.w	r0, r5, #14
   172d2:	f7e8 fff5 	bl	2c0 <memcpy>
   172d6:	e6b6      	b.n	17046 <isr_rx_adv+0x3f6>
		return (_radio.packet_rx_count -
   172d8:	4914      	ldr	r1, [pc, #80]	; (1732c <isr_rx_adv+0x6dc>)
   172da:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
			_radio.packet_rx_last +
   172de:	f891 113d 	ldrb.w	r1, [r1, #317]	; 0x13d
		return (_radio.packet_rx_count -
   172e2:	1a5b      	subs	r3, r3, r1
			_radio.packet_rx_last +
   172e4:	fa52 f383 	uxtab	r3, r2, r3
   172e8:	b2db      	uxtb	r3, r3
   172ea:	e6d1      	b.n	17090 <isr_rx_adv+0x440>
		return 0;
   172ec:	2300      	movs	r3, #0
   172ee:	e6d9      	b.n	170a4 <isr_rx_adv+0x454>
			LL_ASSERT(radio_pdu_node_rx);
   172f0:	4040      	eors	r0, r0
   172f2:	f380 8811 	msr	BASEPRI, r0
   172f6:	f04f 0004 	mov.w	r0, #4
   172fa:	df02      	svc	2
				le_chan_sel_algo->chan_sel_algo = 0x00;
   172fc:	2200      	movs	r2, #0
   172fe:	72da      	strb	r2, [r3, #11]
   17300:	e6ed      	b.n	170de <isr_rx_adv+0x48e>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   17302:	4658      	mov	r0, fp
   17304:	f8cd b000 	str.w	fp, [sp]
   17308:	465b      	mov	r3, fp
   1730a:	2203      	movs	r2, #3
   1730c:	4659      	mov	r1, fp
   1730e:	f7f8 ff9b 	bl	10248 <ticker_stop>
   17312:	e753      	b.n	171bc <isr_rx_adv+0x56c>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   17314:	4040      	eors	r0, r0
   17316:	f380 8811 	msr	BASEPRI, r0
   1731a:	f04f 0004 	mov.w	r0, #4
   1731e:	df02      	svc	2
	return 1;
   17320:	2301      	movs	r3, #1
   17322:	e4b6      	b.n	16c92 <isr_rx_adv+0x42>
   17324:	2301      	movs	r3, #1
   17326:	e4b4      	b.n	16c92 <isr_rx_adv+0x42>
			return 1;
   17328:	2301      	movs	r3, #1
   1732a:	e4b2      	b.n	16c92 <isr_rx_adv+0x42>
   1732c:	20000e84 	.word	0x20000e84

00017330 <radio_init>:
{
   17330:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17334:	f89d e018 	ldrb.w	lr, [sp, #24]
   17338:	f8bd c01c 	ldrh.w	ip, [sp, #28]
   1733c:	9d09      	ldr	r5, [sp, #36]	; 0x24
   1733e:	f8bd 6028 	ldrh.w	r6, [sp, #40]	; 0x28
	_radio.hf_clock = hf_clock;
   17342:	4c3b      	ldr	r4, [pc, #236]	; (17430 <radio_init+0x100>)
   17344:	6020      	str	r0, [r4, #0]
	_radio.sca = sca;
   17346:	f884 111c 	strb.w	r1, [r4, #284]	; 0x11c
	mem_radio_end = mem_radio + mem_size;
   1734a:	19a8      	adds	r0, r5, r6
	_radio.connection_count = connection_count_max;
   1734c:	f884 210c 	strb.w	r2, [r4, #268]	; 0x10c
	_radio.conn_pool = mem_radio;
   17350:	f8c4 5104 	str.w	r5, [r4, #260]	; 0x104
	mem_radio += (sizeof(struct connection) * _radio.connection_count);
   17354:	f44f 71aa 	mov.w	r1, #340	; 0x154
   17358:	fb01 5102 	mla	r1, r1, r2, r5
	rx_count_max += 3;
   1735c:	f103 0803 	add.w	r8, r3, #3
   17360:	fa5f f888 	uxtb.w	r8, r8
	tx_count_max += 1;
   17364:	f10e 0701 	add.w	r7, lr, #1
   17368:	b2ff      	uxtb	r7, r7
	_radio.packet_rx_count = (rx_count_max + 1);
   1736a:	3304      	adds	r3, #4
   1736c:	b2dd      	uxtb	r5, r3
   1736e:	f884 513c 	strb.w	r5, [r4, #316]	; 0x13c
	_radio.packet_tx_count = (tx_count_max + 1);
   17372:	f10e 0e02 	add.w	lr, lr, #2
   17376:	fa5f fe8e 	uxtb.w	lr, lr
   1737a:	f884 e170 	strb.w	lr, [r4, #368]	; 0x170
	_radio.link_rx_data_quota = rx_count_max;
   1737e:	f884 8150 	strb.w	r8, [r4, #336]	; 0x150
	_radio.packet_rx = (void *)mem_radio;
   17382:	f8c4 1138 	str.w	r1, [r4, #312]	; 0x138
	mem_radio +=
   17386:	eb01 0185 	add.w	r1, r1, r5, lsl #2
	_radio.pkt_tx = (void *)mem_radio;
   1738a:	f8c4 1168 	str.w	r1, [r4, #360]	; 0x168
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
   1738e:	ea4f 0ece 	mov.w	lr, lr, lsl #3
   17392:	4471      	add	r1, lr
	_radio.pkt_release = (void *)mem_radio;
   17394:	f8c4 116c 	str.w	r1, [r4, #364]	; 0x16c
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
   17398:	4471      	add	r1, lr
	_radio.packet_data_octets_max = packet_data_octets_max;
   1739a:	f8a4 c130 	strh.w	ip, [r4, #304]	; 0x130
	    (offsetof(struct pdu_data, payload) +
   1739e:	f10c 0303 	add.w	r3, ip, #3
	if ((PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA) <
   173a2:	2b2a      	cmp	r3, #42	; 0x2a
   173a4:	d931      	bls.n	1740a <radio_init+0xda>
		    (MROUND(offsetof(struct radio_pdu_node_rx, pdu_data) +
   173a6:	f10c 0c0e 	add.w	ip, ip, #14
		_radio.packet_rx_data_pool_size =
   173aa:	f02c 0c03 	bic.w	ip, ip, #3
   173ae:	fb1c f808 	smulbb	r8, ip, r8
   173b2:	f8a4 8132 	strh.w	r8, [r4, #306]	; 0x132
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
   173b6:	4c1e      	ldr	r4, [pc, #120]	; (17430 <radio_init+0x100>)
   173b8:	2334      	movs	r3, #52	; 0x34
   173ba:	f8a4 3134 	strh.w	r3, [r4, #308]	; 0x134
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
   173be:	f8b4 e132 	ldrh.w	lr, [r4, #306]	; 0x132
   173c2:	4b1c      	ldr	r3, [pc, #112]	; (17434 <radio_init+0x104>)
   173c4:	fba3 c30e 	umull	ip, r3, r3, lr
   173c8:	091b      	lsrs	r3, r3, #4
   173ca:	f884 3136 	strb.w	r3, [r4, #310]	; 0x136
	_radio.pkt_rx_data_pool = mem_radio;
   173ce:	f8c4 1128 	str.w	r1, [r4, #296]	; 0x128
	mem_radio += _radio.packet_rx_data_pool_size;
   173d2:	4471      	add	r1, lr
	_radio.link_rx_pool = mem_radio;
   173d4:	f8c4 1140 	str.w	r1, [r4, #320]	; 0x140
	mem_radio += (sizeof(void *) * 2 * (_radio.packet_rx_count +
   173d8:	442a      	add	r2, r5
   173da:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
	_radio.pkt_tx_ctrl_pool = mem_radio;
   173de:	f8c4 2154 	str.w	r2, [r4, #340]	; 0x154
	mem_radio += PACKET_TX_CTRL_SIZE_MIN * PACKET_MEM_COUNT_TX_CTRL;
   173e2:	3248      	adds	r2, #72	; 0x48
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
   173e4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   173e8:	330a      	adds	r3, #10
   173ea:	b29b      	uxth	r3, r3
   173ec:	f023 0303 	bic.w	r3, r3, #3
   173f0:	b29b      	uxth	r3, r3
	_radio.packet_tx_data_size =
   173f2:	f8a4 3164 	strh.w	r3, [r4, #356]	; 0x164
	_radio.pkt_tx_data_pool = mem_radio;
   173f6:	f8c4 215c 	str.w	r2, [r4, #348]	; 0x15c
	mem_radio += (_radio.packet_tx_data_size * tx_count_max);
   173fa:	fb03 2707 	mla	r7, r3, r7, r2
	if (retcode) {
   173fe:	1a3f      	subs	r7, r7, r0
   17400:	d00d      	beq.n	1741e <radio_init+0xee>
		return (retcode + mem_size);
   17402:	4437      	add	r7, r6
}
   17404:	4638      	mov	r0, r7
   17406:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
   1740a:	eb08 0348 	add.w	r3, r8, r8, lsl #1
   1740e:	eb08 0883 	add.w	r8, r8, r3, lsl #2
   17412:	ea4f 0388 	mov.w	r3, r8, lsl #2
		_radio.packet_rx_data_pool_size =
   17416:	4c06      	ldr	r4, [pc, #24]	; (17430 <radio_init+0x100>)
   17418:	f8a4 3132 	strh.w	r3, [r4, #306]	; 0x132
   1741c:	e7cb      	b.n	173b6 <radio_init+0x86>
	_radio.fc_ena = 1;
   1741e:	2201      	movs	r2, #1
   17420:	4b03      	ldr	r3, [pc, #12]	; (17430 <radio_init+0x100>)
   17422:	f883 217e 	strb.w	r2, [r3, #382]	; 0x17e
	common_init();
   17426:	f7ec ff23 	bl	4270 <common_init>
	radio_setup();
   1742a:	f7f7 faef 	bl	ea0c <radio_setup>
	return retcode;
   1742e:	e7e9      	b.n	17404 <radio_init+0xd4>
   17430:	20000e84 	.word	0x20000e84
   17434:	4ec4ec4f 	.word	0x4ec4ec4f

00017438 <ll_reset>:
{
   17438:	b510      	push	{r4, lr}
	role_disable(RADIO_TICKER_ID_ADV, RADIO_TICKER_ID_ADV_STOP);
   1743a:	2103      	movs	r1, #3
   1743c:	2005      	movs	r0, #5
   1743e:	f7f9 ff9b 	bl	11378 <role_disable>
	role_disable(RADIO_TICKER_ID_SCAN, RADIO_TICKER_ID_SCAN_STOP);
   17442:	2104      	movs	r1, #4
   17444:	2006      	movs	r0, #6
   17446:	f7f9 ff97 	bl	11378 <role_disable>
	for (conn_handle = 0; conn_handle < _radio.connection_count;
   1744a:	2400      	movs	r4, #0
   1744c:	e006      	b.n	1745c <ll_reset+0x24>
		role_disable(RADIO_TICKER_ID_FIRST_CONNECTION + conn_handle,
   1744e:	1de0      	adds	r0, r4, #7
   17450:	21ff      	movs	r1, #255	; 0xff
   17452:	b2c0      	uxtb	r0, r0
   17454:	f7f9 ff90 	bl	11378 <role_disable>
	     conn_handle++) {
   17458:	3401      	adds	r4, #1
   1745a:	b2a4      	uxth	r4, r4
	for (conn_handle = 0; conn_handle < _radio.connection_count;
   1745c:	4b1d      	ldr	r3, [pc, #116]	; (174d4 <ll_reset+0x9c>)
   1745e:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
   17462:	429c      	cmp	r4, r3
   17464:	d3f3      	bcc.n	1744e <ll_reset+0x16>
	_radio.advertiser.is_enabled = 0;
   17466:	4b1b      	ldr	r3, [pc, #108]	; (174d4 <ll_reset+0x9c>)
   17468:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
   1746c:	f36f 0200 	bfc	r2, #0, #1
   17470:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	_radio.advertiser.conn = NULL;
   17474:	2000      	movs	r0, #0
   17476:	f8c3 00c8 	str.w	r0, [r3, #200]	; 0xc8
	_radio.scanner.is_enabled = 0;
   1747a:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
   1747e:	f360 0200 	bfi	r2, r0, #0, #1
   17482:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
	_radio.scanner.conn = NULL;
   17486:	f8c3 00fc 	str.w	r0, [r3, #252]	; 0xfc
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
   1748a:	2234      	movs	r2, #52	; 0x34
   1748c:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
   17490:	f8b3 2132 	ldrh.w	r2, [r3, #306]	; 0x132
   17494:	4910      	ldr	r1, [pc, #64]	; (174d8 <ll_reset+0xa0>)
   17496:	fba1 1202 	umull	r1, r2, r1, r2
   1749a:	0912      	lsrs	r2, r2, #4
   1749c:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
	_radio.packet_rx_last = 0;
   174a0:	f883 013d 	strb.w	r0, [r3, #317]	; 0x13d
	_radio.packet_rx_acquire = 0;
   174a4:	f883 013e 	strb.w	r0, [r3, #318]	; 0x13e
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
   174a8:	f893 213c 	ldrb.w	r2, [r3, #316]	; 0x13c
   174ac:	3a01      	subs	r2, #1
   174ae:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
	_radio.packet_tx_first = 0;
   174b2:	f883 0171 	strb.w	r0, [r3, #369]	; 0x171
	_radio.packet_tx_last = 0;
   174b6:	f883 0172 	strb.w	r0, [r3, #370]	; 0x172
	_radio.packet_release_first = 0;
   174ba:	f883 0173 	strb.w	r0, [r3, #371]	; 0x173
	_radio.packet_release_last = 0;
   174be:	f883 0174 	strb.w	r0, [r3, #372]	; 0x174
	_radio.fc_ack = _radio.fc_req;
   174c2:	f893 217c 	ldrb.w	r2, [r3, #380]	; 0x17c
   174c6:	f883 217d 	strb.w	r2, [r3, #381]	; 0x17d
	ll_filter_reset(false);
   174ca:	f002 fa69 	bl	199a0 <ll_filter_reset>
	common_init();
   174ce:	f7ec fecf 	bl	4270 <common_init>
   174d2:	bd10      	pop	{r4, pc}
   174d4:	20000e84 	.word	0x20000e84
   174d8:	4ec4ec4f 	.word	0x4ec4ec4f

000174dc <radio_adv_data_get>:
}
   174dc:	4800      	ldr	r0, [pc, #0]	; (174e0 <radio_adv_data_get+0x4>)
   174de:	4770      	bx	lr
   174e0:	20000eab 	.word	0x20000eab

000174e4 <radio_scan_data_get>:
}
   174e4:	4800      	ldr	r0, [pc, #0]	; (174e8 <radio_scan_data_get+0x4>)
   174e6:	4770      	bx	lr
   174e8:	20000efb 	.word	0x20000efb

000174ec <radio_adv_is_enabled>:
	return _radio.advertiser.is_enabled;
   174ec:	4b02      	ldr	r3, [pc, #8]	; (174f8 <radio_adv_is_enabled+0xc>)
   174ee:	f893 0024 	ldrb.w	r0, [r3, #36]	; 0x24
}
   174f2:	f000 0001 	and.w	r0, r0, #1
   174f6:	4770      	bx	lr
   174f8:	20000e84 	.word	0x20000e84

000174fc <radio_adv_filter_pol_get>:
	if (_radio.advertiser.is_enabled) {
   174fc:	4b06      	ldr	r3, [pc, #24]	; (17518 <radio_adv_filter_pol_get+0x1c>)
   174fe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   17502:	f013 0f01 	tst.w	r3, #1
   17506:	d004      	beq.n	17512 <radio_adv_filter_pol_get+0x16>
		return _radio.advertiser.filter_policy;
   17508:	4b03      	ldr	r3, [pc, #12]	; (17518 <radio_adv_filter_pol_get+0x1c>)
   1750a:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
   1750e:	0980      	lsrs	r0, r0, #6
   17510:	4770      	bx	lr
	return 0;
   17512:	2000      	movs	r0, #0
}
   17514:	4770      	bx	lr
   17516:	bf00      	nop
   17518:	20000e84 	.word	0x20000e84

0001751c <radio_scan_is_enabled>:
	return _radio.scanner.is_enabled;
   1751c:	4b02      	ldr	r3, [pc, #8]	; (17528 <radio_scan_is_enabled+0xc>)
   1751e:	f893 00dc 	ldrb.w	r0, [r3, #220]	; 0xdc
}
   17522:	f000 0001 	and.w	r0, r0, #1
   17526:	4770      	bx	lr
   17528:	20000e84 	.word	0x20000e84

0001752c <radio_scan_filter_pol_get>:
	if (_radio.scanner.is_enabled) {
   1752c:	4b06      	ldr	r3, [pc, #24]	; (17548 <radio_scan_filter_pol_get+0x1c>)
   1752e:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
   17532:	f013 0f01 	tst.w	r3, #1
   17536:	d005      	beq.n	17544 <radio_scan_filter_pol_get+0x18>
		return _radio.scanner.filter_policy;
   17538:	4b03      	ldr	r3, [pc, #12]	; (17548 <radio_scan_filter_pol_get+0x1c>)
   1753a:	f893 00dd 	ldrb.w	r0, [r3, #221]	; 0xdd
   1753e:	f3c0 1001 	ubfx	r0, r0, #4, #2
   17542:	4770      	bx	lr
	return 0;
   17544:	2000      	movs	r0, #0
}
   17546:	4770      	bx	lr
   17548:	20000e84 	.word	0x20000e84
   1754c:	00000000 	.word	0x00000000

00017550 <radio_connect_enable>:
{
   17550:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   17554:	b083      	sub	sp, #12
	if (_radio.scanner.conn) {
   17556:	4c94      	ldr	r4, [pc, #592]	; (177a8 <radio_connect_enable+0x258>)
   17558:	f8d4 40fc 	ldr.w	r4, [r4, #252]	; 0xfc
   1755c:	b11c      	cbz	r4, 17566 <radio_connect_enable+0x16>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1755e:	200c      	movs	r0, #12
}
   17560:	b003      	add	sp, #12
   17562:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   17566:	461f      	mov	r7, r3
   17568:	4616      	mov	r6, r2
   1756a:	460d      	mov	r5, r1
   1756c:	4604      	mov	r4, r0
	link = mem_acquire(&_radio.link_rx_free);
   1756e:	488f      	ldr	r0, [pc, #572]	; (177ac <radio_connect_enable+0x25c>)
   17570:	f7f7 f8ff 	bl	e772 <mem_acquire>
	if (!link) {
   17574:	4681      	mov	r9, r0
   17576:	2800      	cmp	r0, #0
   17578:	f000 810f 	beq.w	1779a <radio_connect_enable+0x24a>
	conn = mem_acquire(&_radio.conn_free);
   1757c:	488c      	ldr	r0, [pc, #560]	; (177b0 <radio_connect_enable+0x260>)
   1757e:	f7f7 f8f8 	bl	e772 <mem_acquire>
   17582:	9001      	str	r0, [sp, #4]
	if (!conn) {
   17584:	2800      	cmp	r0, #0
   17586:	f000 8102 	beq.w	1778e <radio_connect_enable+0x23e>
	_radio.scanner.adv_addr_type = adv_addr_type;
   1758a:	f8df 821c 	ldr.w	r8, [pc, #540]	; 177a8 <radio_connect_enable+0x258>
   1758e:	f898 30dd 	ldrb.w	r3, [r8, #221]	; 0xdd
   17592:	f364 1386 	bfi	r3, r4, #6, #1
   17596:	f888 30dd 	strb.w	r3, [r8, #221]	; 0xdd
	memcpy(&_radio.scanner.adv_addr[0], adv_addr, BDADDR_SIZE);
   1759a:	2206      	movs	r2, #6
   1759c:	4629      	mov	r1, r5
   1759e:	f108 00e6 	add.w	r0, r8, #230	; 0xe6
   175a2:	f7e8 fe8d 	bl	2c0 <memcpy>
	_radio.scanner.conn_interval = interval;
   175a6:	f8a8 60f0 	strh.w	r6, [r8, #240]	; 0xf0
	_radio.scanner.conn_latency = latency;
   175aa:	f8a8 70f2 	strh.w	r7, [r8, #242]	; 0xf2
	_radio.scanner.conn_timeout = timeout;
   175ae:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   175b2:	f8a8 30f4 	strh.w	r3, [r8, #244]	; 0xf4
		TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
   175b6:	2100      	movs	r1, #0
   175b8:	4608      	mov	r0, r1
   175ba:	f7f7 fad7 	bl	eb6c <radio_tx_ready_delay_get>
   175be:	f200 4052 	addw	r0, r0, #1106	; 0x452
   175c2:	2400      	movs	r4, #0
   175c4:	a376      	add	r3, pc, #472	; (adr r3, 177a0 <radio_connect_enable+0x250>)
   175c6:	e9d3 2300 	ldrd	r2, r3, [r3]
   175ca:	497a      	ldr	r1, [pc, #488]	; (177b4 <radio_connect_enable+0x264>)
   175cc:	fba0 0101 	umull	r0, r1, r0, r1
   175d0:	f7e9 fd94 	bl	10fc <__aeabi_uldivmod>
   175d4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	_radio.scanner.ticks_conn_slot =
   175d8:	f8c8 00f8 	str.w	r0, [r8, #248]	; 0xf8
	conn->handle = 0xFFFF;
   175dc:	9b01      	ldr	r3, [sp, #4]
   175de:	f64f 72ff 	movw	r2, #65535	; 0xffff
   175e2:	841a      	strh	r2, [r3, #32]
	conn->llcp_features = RADIO_BLE_FEAT;
   175e4:	f502 4284 	add.w	r2, r2, #16896	; 0x4200
   175e8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	access_addr = access_addr_get();
   175ec:	f7fe fe84 	bl	162f8 <access_addr_get>
   175f0:	9000      	str	r0, [sp, #0]
	memcpy(&conn->access_addr[0], &access_addr, sizeof(conn->access_addr));
   175f2:	2204      	movs	r2, #4
   175f4:	4669      	mov	r1, sp
   175f6:	9801      	ldr	r0, [sp, #4]
   175f8:	3010      	adds	r0, #16
   175fa:	f7e8 fe61 	bl	2c0 <memcpy>
	memcpy(&conn->crc_init[0], &conn, 3);
   175fe:	a902      	add	r1, sp, #8
   17600:	f851 0d04 	ldr.w	r0, [r1, #-4]!
   17604:	2203      	movs	r2, #3
   17606:	3014      	adds	r0, #20
   17608:	f7e8 fe5a 	bl	2c0 <memcpy>
	memcpy(&conn->data_chan_map[0], &_radio.data_chan_map[0],
   1760c:	2205      	movs	r2, #5
   1760e:	f508 718b 	add.w	r1, r8, #278	; 0x116
   17612:	9801      	ldr	r0, [sp, #4]
   17614:	3017      	adds	r0, #23
   17616:	f7e8 fe53 	bl	2c0 <memcpy>
	conn->data_chan_count = _radio.data_chan_count;
   1761a:	9b01      	ldr	r3, [sp, #4]
   1761c:	f898 111b 	ldrb.w	r1, [r8, #283]	; 0x11b
   17620:	7f5a      	ldrb	r2, [r3, #29]
   17622:	f361 0205 	bfi	r2, r1, #0, #6
	conn->data_chan_sel = 0;
   17626:	f364 1286 	bfi	r2, r4, #6, #1
   1762a:	775a      	strb	r2, [r3, #29]
	conn->data_chan_hop = 6;
   1762c:	2506      	movs	r5, #6
   1762e:	779d      	strb	r5, [r3, #30]
	conn->data_chan_use = 0;
   17630:	77dc      	strb	r4, [r3, #31]
	conn->event_counter = 0;
   17632:	845c      	strh	r4, [r3, #34]	; 0x22
	conn->conn_interval = _radio.scanner.conn_interval;
   17634:	f8b8 20f0 	ldrh.w	r2, [r8, #240]	; 0xf0
   17638:	849a      	strh	r2, [r3, #36]	; 0x24
	conn->latency_prepare = 0;
   1763a:	851c      	strh	r4, [r3, #40]	; 0x28
	conn->latency_event = 0;
   1763c:	855c      	strh	r4, [r3, #42]	; 0x2a
	conn->latency = _radio.scanner.conn_latency;
   1763e:	f8b8 00f2 	ldrh.w	r0, [r8, #242]	; 0xf2
   17642:	84d8      	strh	r0, [r3, #38]	; 0x26
	conn->default_tx_octets = _radio.default_tx_octets;
   17644:	f8b8 211e 	ldrh.w	r2, [r8, #286]	; 0x11e
   17648:	859a      	strh	r2, [r3, #44]	; 0x2c
	conn->max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
   1764a:	221b      	movs	r2, #27
   1764c:	85da      	strh	r2, [r3, #46]	; 0x2e
	conn->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
   1764e:	861a      	strh	r2, [r3, #48]	; 0x30
	conn->default_tx_time = _radio.default_tx_time;
   17650:	f8b8 2120 	ldrh.w	r2, [r8, #288]	; 0x120
   17654:	865a      	strh	r2, [r3, #50]	; 0x32
	conn->max_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN, 0);
   17656:	f44f 72a4 	mov.w	r2, #328	; 0x148
   1765a:	869a      	strh	r2, [r3, #52]	; 0x34
	conn->max_rx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN, 0);
   1765c:	86da      	strh	r2, [r3, #54]	; 0x36
	conn->phy_pref_tx = _radio.default_phy_tx;
   1765e:	f898 1122 	ldrb.w	r1, [r8, #290]	; 0x122
   17662:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
   17666:	f361 0202 	bfi	r2, r1, #0, #3
	conn->phy_tx = BIT(0);
   1766a:	2101      	movs	r1, #1
   1766c:	f361 02c5 	bfi	r2, r1, #3, #3
	conn->phy_flags = 0;
   17670:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
   17674:	f364 12c7 	bfi	r2, r4, #7, #1
   17678:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	conn->phy_tx_time = BIT(0);
   1767c:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
   17680:	f361 0202 	bfi	r2, r1, #0, #3
   17684:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	conn->phy_pref_rx = _radio.default_phy_rx;
   17688:	f898 6124 	ldrb.w	r6, [r8, #292]	; 0x124
   1768c:	b2d2      	uxtb	r2, r2
   1768e:	f366 02c5 	bfi	r2, r6, #3, #3
   17692:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	conn->phy_rx = BIT(0);
   17696:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
   1769a:	f361 0202 	bfi	r2, r1, #0, #3
   1769e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	conn->role = 0;
   176a2:	7f5a      	ldrb	r2, [r3, #29]
   176a4:	f364 12c7 	bfi	r2, r4, #7, #1
   176a8:	775a      	strb	r2, [r3, #29]
	conn->connect_expire = 6;
   176aa:	879d      	strh	r5, [r3, #60]	; 0x3c
	conn->common.fex_valid = 0;
   176ac:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
	conn->master.terminate_ack = 0;
   176b0:	f002 02df 	and.w	r2, r2, #223	; 0xdf
   176b4:	f364 0200 	bfi	r2, r4, #0, #1
   176b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		(u32_t)_radio.scanner.conn_interval * 1250;
   176bc:	f8b8 10f0 	ldrh.w	r1, [r8, #240]	; 0xf0
	conn_interval_us =
   176c0:	f240 42e2 	movw	r2, #1250	; 0x4e2
   176c4:	fb02 f101 	mul.w	r1, r2, r1
		RADIO_CONN_EVENTS((_radio.scanner.conn_timeout * 10 * 1000),
   176c8:	f8b8 20f4 	ldrh.w	r2, [r8, #244]	; 0xf4
   176cc:	f242 7510 	movw	r5, #10000	; 0x2710
   176d0:	fb05 1202 	mla	r2, r5, r2, r1
   176d4:	3a01      	subs	r2, #1
   176d6:	fbb2 f2f1 	udiv	r2, r2, r1
	conn->supervision_reload =
   176da:	87da      	strh	r2, [r3, #62]	; 0x3e
	conn->supervision_expire = 0;
   176dc:	f8a3 4040 	strh.w	r4, [r3, #64]	; 0x40
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   176e0:	4a35      	ldr	r2, [pc, #212]	; (177b8 <radio_connect_enable+0x268>)
   176e2:	440a      	add	r2, r1
   176e4:	fbb2 f2f1 	udiv	r2, r2, r1
	conn->procedure_reload =
   176e8:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	conn->procedure_expire = 0;
   176ec:	f8a3 4044 	strh.w	r4, [r3, #68]	; 0x44
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   176f0:	4a32      	ldr	r2, [pc, #200]	; (177bc <radio_connect_enable+0x26c>)
   176f2:	440a      	add	r2, r1
   176f4:	fbb2 f2f1 	udiv	r2, r2, r1
   176f8:	b292      	uxth	r2, r2
   176fa:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   176fe:	1d81      	adds	r1, r0, #6
   17700:	428a      	cmp	r2, r1
   17702:	dd03      	ble.n	1770c <radio_connect_enable+0x1bc>
			     (conn->apto_reload - (conn->latency + 6)) :
   17704:	1a12      	subs	r2, r2, r0
   17706:	b292      	uxth	r2, r2
	conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   17708:	3a06      	subs	r2, #6
   1770a:	b292      	uxth	r2, r2
   1770c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
	conn->apto_expire = 0;
   17710:	2000      	movs	r0, #0
   17712:	f8a3 004c 	strh.w	r0, [r3, #76]	; 0x4c
	conn->appto_expire = 0;
   17716:	f8a3 0048 	strh.w	r0, [r3, #72]	; 0x48
	conn->llcp_req = 0;
   1771a:	f883 0074 	strb.w	r0, [r3, #116]	; 0x74
	conn->llcp_ack = 0;
   1771e:	f883 0075 	strb.w	r0, [r3, #117]	; 0x75
	conn->llcp_version.tx = 0;
   17722:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
	conn->llcp_version.rx = 0;
   17726:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
   1772a:	f360 0241 	bfi	r2, r0, #1, #1
   1772e:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	conn->llcp_terminate.req = 0;
   17732:	f883 00b0 	strb.w	r0, [r3, #176]	; 0xb0
	conn->llcp_terminate.ack = 0;
   17736:	f883 00b1 	strb.w	r0, [r3, #177]	; 0xb1
	conn->llcp_terminate.reason_peer = 0;
   1773a:	f883 00b3 	strb.w	r0, [r3, #179]	; 0xb3
	conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link = link;
   1773e:	f8c3 90b4 	str.w	r9, [r3, #180]	; 0xb4
	conn->llcp_conn_param.req = 0;
   17742:	f883 00c0 	strb.w	r0, [r3, #192]	; 0xc0
	conn->llcp_conn_param.ack = 0;
   17746:	f883 00c1 	strb.w	r0, [r3, #193]	; 0xc1
	conn->llcp_length.req = 0;
   1774a:	f883 00e8 	strb.w	r0, [r3, #232]	; 0xe8
	conn->llcp_length.ack = 0;
   1774e:	f883 00e9 	strb.w	r0, [r3, #233]	; 0xe9
	conn->llcp_phy.req = 0;
   17752:	f883 00f4 	strb.w	r0, [r3, #244]	; 0xf4
	conn->llcp_phy.ack = 0;
   17756:	f883 00f5 	strb.w	r0, [r3, #245]	; 0xf5
	conn->sn = 0;
   1775a:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
	conn->empty = 0;
   1775e:	f002 0280 	and.w	r2, r2, #128	; 0x80
   17762:	f360 12c7 	bfi	r2, r0, #7, #1
   17766:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
	conn->pkt_tx_head = NULL;
   1776a:	f8c3 013c 	str.w	r0, [r3, #316]	; 0x13c
	conn->pkt_tx_ctrl = NULL;
   1776e:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
	conn->pkt_tx_ctrl_last = NULL;
   17772:	f8c3 0144 	str.w	r0, [r3, #324]	; 0x144
	conn->pkt_tx_data = NULL;
   17776:	f8c3 0148 	str.w	r0, [r3, #328]	; 0x148
	conn->pkt_tx_last = NULL;
   1777a:	f8c3 014c 	str.w	r0, [r3, #332]	; 0x14c
	conn->packet_tx_head_len = 0;
   1777e:	f883 0150 	strb.w	r0, [r3, #336]	; 0x150
	conn->packet_tx_head_offset = 0;
   17782:	f883 0151 	strb.w	r0, [r3, #337]	; 0x151
	_radio.scanner.conn = conn;
   17786:	4a08      	ldr	r2, [pc, #32]	; (177a8 <radio_connect_enable+0x258>)
   17788:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
	return 0;
   1778c:	e6e8      	b.n	17560 <radio_connect_enable+0x10>
		mem_release(link, &_radio.link_rx_free);
   1778e:	4907      	ldr	r1, [pc, #28]	; (177ac <radio_connect_enable+0x25c>)
   17790:	4648      	mov	r0, r9
   17792:	f7f7 f80a 	bl	e7aa <mem_release>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   17796:	2007      	movs	r0, #7
   17798:	e6e2      	b.n	17560 <radio_connect_enable+0x10>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   1779a:	2007      	movs	r0, #7
   1779c:	e6e0      	b.n	17560 <radio_connect_enable+0x10>
   1779e:	bf00      	nop
   177a0:	1afd498d 	.word	0x1afd498d
   177a4:	00000007 	.word	0x00000007
   177a8:	20000e84 	.word	0x20000e84
   177ac:	20000fc8 	.word	0x20000fc8
   177b0:	20000f8c 	.word	0x20000f8c
   177b4:	3b9aca00 	.word	0x3b9aca00
   177b8:	026259ff 	.word	0x026259ff
   177bc:	01c9c37f 	.word	0x01c9c37f

000177c0 <ll_conn_update>:
{
   177c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   177c4:	460c      	mov	r4, r1
   177c6:	4690      	mov	r8, r2
   177c8:	461f      	mov	r7, r3
   177ca:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   177ce:	f8bd 501c 	ldrh.w	r5, [sp, #28]
	conn = connection_get(handle);
   177d2:	f7f9 fdb3 	bl	1133c <connection_get>
	if (!conn) {
   177d6:	2800      	cmp	r0, #0
   177d8:	d078      	beq.n	178cc <ll_conn_update+0x10c>
   177da:	4603      	mov	r3, r0
	if (!cmd) {
   177dc:	b984      	cbnz	r4, 17800 <ll_conn_update+0x40>
		if (conn->common.fex_valid &&
   177de:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
   177e2:	f012 0f20 	tst.w	r2, #32
   177e6:	d007      	beq.n	177f8 <ll_conn_update+0x38>
		    (conn->llcp_features &
   177e8:	f8d0 20a4 	ldr.w	r2, [r0, #164]	; 0xa4
		if (conn->common.fex_valid &&
   177ec:	f012 0f02 	tst.w	r2, #2
   177f0:	d002      	beq.n	177f8 <ll_conn_update+0x38>
			cmd++;
   177f2:	3401      	adds	r4, #1
   177f4:	b2e4      	uxtb	r4, r4
   177f6:	e003      	b.n	17800 <ll_conn_update+0x40>
		} else if (conn->role) {
   177f8:	f993 201d 	ldrsb.w	r2, [r3, #29]
   177fc:	2a00      	cmp	r2, #0
   177fe:	db68      	blt.n	178d2 <ll_conn_update+0x112>
	if (!cmd) {
   17800:	bb1c      	cbnz	r4, 1784a <ll_conn_update+0x8a>
		if (conn->llcp_req != conn->llcp_ack) {
   17802:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
   17806:	f893 1075 	ldrb.w	r1, [r3, #117]	; 0x75
   1780a:	428a      	cmp	r2, r1
   1780c:	d002      	beq.n	17814 <ll_conn_update+0x54>
			return 1;
   1780e:	2001      	movs	r0, #1
   17810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		conn->llcp.conn_upd.win_size = 1;
   17814:	2401      	movs	r4, #1
   17816:	f883 4088 	strb.w	r4, [r3, #136]	; 0x88
		conn->llcp.conn_upd.win_offset_us = 0;
   1781a:	2000      	movs	r0, #0
   1781c:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
		conn->llcp.conn_upd.interval = interval;
   17820:	f8a3 707a 	strh.w	r7, [r3, #122]	; 0x7a
		conn->llcp.conn_upd.latency = latency;
   17824:	f8a3 607c 	strh.w	r6, [r3, #124]	; 0x7c
		conn->llcp.conn_upd.timeout = timeout;
   17828:	f8a3 507e 	strh.w	r5, [r3, #126]	; 0x7e
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
   1782c:	f893 1078 	ldrb.w	r1, [r3, #120]	; 0x78
   17830:	f364 0101 	bfi	r1, r4, #0, #2
		conn->llcp.conn_upd.is_internal = 0;
   17834:	f360 0182 	bfi	r1, r0, #2, #1
   17838:	f883 1078 	strb.w	r1, [r3, #120]	; 0x78
		conn->llcp_type = LLCP_CONN_UPD;
   1783c:	f883 4076 	strb.w	r4, [r3, #118]	; 0x76
		conn->llcp_req++;
   17840:	4422      	add	r2, r4
   17842:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
   17846:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cmd--;
   1784a:	3c01      	subs	r4, #1
		if (cmd) {
   1784c:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   17850:	d01c      	beq.n	1788c <ll_conn_update+0xcc>
			if ((conn->llcp_conn_param.req ==
   17852:	f893 10c0 	ldrb.w	r1, [r3, #192]	; 0xc0
			     conn->llcp_conn_param.ack) ||
   17856:	f893 20c1 	ldrb.w	r2, [r3, #193]	; 0xc1
			if ((conn->llcp_conn_param.req ==
   1785a:	4291      	cmp	r1, r2
   1785c:	d03c      	beq.n	178d8 <ll_conn_update+0x118>
			    (conn->llcp_conn_param.state !=
   1785e:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
   17862:	f002 0207 	and.w	r2, r2, #7
			     conn->llcp_conn_param.ack) ||
   17866:	2a03      	cmp	r2, #3
   17868:	d002      	beq.n	17870 <ll_conn_update+0xb0>
				return 1;
   1786a:	2001      	movs	r0, #1
   1786c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			conn->llcp_conn_param.status = status;
   17870:	f883 80c3 	strb.w	r8, [r3, #195]	; 0xc3
			conn->llcp_conn_param.state = cmd;
   17874:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
   17878:	f364 0202 	bfi	r2, r4, #0, #3
			conn->llcp_conn_param.cmd = 1;
   1787c:	b2d2      	uxtb	r2, r2
   1787e:	f042 0208 	orr.w	r2, r2, #8
   17882:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
	return 0;
   17886:	2000      	movs	r0, #0
   17888:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (conn->llcp_conn_param.req !=
   1788c:	f893 20c0 	ldrb.w	r2, [r3, #192]	; 0xc0
			    conn->llcp_conn_param.ack) {
   17890:	f893 10c1 	ldrb.w	r1, [r3, #193]	; 0xc1
			if (conn->llcp_conn_param.req !=
   17894:	428a      	cmp	r2, r1
   17896:	d002      	beq.n	1789e <ll_conn_update+0xde>
				return 1;
   17898:	2001      	movs	r0, #1
}
   1789a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			conn->llcp_conn_param.status = 0;
   1789e:	2000      	movs	r0, #0
   178a0:	f883 00c3 	strb.w	r0, [r3, #195]	; 0xc3
			conn->llcp_conn_param.interval = interval;
   178a4:	f8a3 70c4 	strh.w	r7, [r3, #196]	; 0xc4
			conn->llcp_conn_param.latency = latency;
   178a8:	f8a3 60c6 	strh.w	r6, [r3, #198]	; 0xc6
			conn->llcp_conn_param.timeout = timeout;
   178ac:	f8a3 50c8 	strh.w	r5, [r3, #200]	; 0xc8
			conn->llcp_conn_param.state = cmd;
   178b0:	f893 10c2 	ldrb.w	r1, [r3, #194]	; 0xc2
   178b4:	f364 0102 	bfi	r1, r4, #0, #3
			conn->llcp_conn_param.cmd = 1;
   178b8:	b2c9      	uxtb	r1, r1
   178ba:	f041 0108 	orr.w	r1, r1, #8
   178be:	f883 10c2 	strb.w	r1, [r3, #194]	; 0xc2
			conn->llcp_conn_param.req++;
   178c2:	3201      	adds	r2, #1
   178c4:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
   178c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return 1;
   178cc:	2001      	movs	r0, #1
   178ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return 1;
   178d2:	2001      	movs	r0, #1
   178d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				return 1;
   178d8:	2001      	movs	r0, #1
   178da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000178e0 <ll_chm_update>:
{
   178e0:	b570      	push	{r4, r5, r6, lr}
   178e2:	4606      	mov	r6, r0
	memcpy(&_radio.data_chan_map[0], chm,
   178e4:	4c1c      	ldr	r4, [pc, #112]	; (17958 <ll_chm_update+0x78>)
   178e6:	f504 758b 	add.w	r5, r4, #278	; 0x116
   178ea:	2205      	movs	r2, #5
   178ec:	4601      	mov	r1, r0
   178ee:	4628      	mov	r0, r5
   178f0:	f7e8 fce6 	bl	2c0 <memcpy>
		util_ones_count_get(&_radio.data_chan_map[0],
   178f4:	2105      	movs	r1, #5
   178f6:	4628      	mov	r0, r5
   178f8:	f7f6 ffbf 	bl	e87a <util_ones_count_get>
	_radio.data_chan_count =
   178fc:	f884 011b 	strb.w	r0, [r4, #283]	; 0x11b
	instance = _radio.connection_count;
   17900:	f894 310c 	ldrb.w	r3, [r4, #268]	; 0x10c
	while (instance--) {
   17904:	e000      	b.n	17908 <ll_chm_update+0x28>
{
   17906:	462b      	mov	r3, r5
	while (instance--) {
   17908:	1e5d      	subs	r5, r3, #1
   1790a:	b2ed      	uxtb	r5, r5
   1790c:	b303      	cbz	r3, 17950 <ll_chm_update+0x70>
		conn = connection_get(instance);
   1790e:	4628      	mov	r0, r5
   17910:	f7f9 fd14 	bl	1133c <connection_get>
		if (!conn || conn->role) {
   17914:	4604      	mov	r4, r0
   17916:	2800      	cmp	r0, #0
   17918:	d0f5      	beq.n	17906 <ll_chm_update+0x26>
   1791a:	f990 301d 	ldrsb.w	r3, [r0, #29]
   1791e:	2b00      	cmp	r3, #0
   17920:	dbf1      	blt.n	17906 <ll_chm_update+0x26>
		if (conn->llcp_req != conn->llcp_ack) {
   17922:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   17926:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   1792a:	429a      	cmp	r2, r3
   1792c:	d112      	bne.n	17954 <ll_chm_update+0x74>
		memcpy(&conn->llcp.chan_map.chm[0], chm,
   1792e:	2205      	movs	r2, #5
   17930:	4631      	mov	r1, r6
   17932:	3079      	adds	r0, #121	; 0x79
   17934:	f7e8 fcc4 	bl	2c0 <memcpy>
		conn->llcp.chan_map.initiate = 1;
   17938:	2301      	movs	r3, #1
   1793a:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		conn->llcp_type = LLCP_CHAN_MAP;
   1793e:	2302      	movs	r3, #2
   17940:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
		conn->llcp_req++;
   17944:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   17948:	3301      	adds	r3, #1
   1794a:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
   1794e:	e7da      	b.n	17906 <ll_chm_update+0x26>
	return 0;
   17950:	2000      	movs	r0, #0
   17952:	bd70      	pop	{r4, r5, r6, pc}
			return 1;
   17954:	2001      	movs	r0, #1
}
   17956:	bd70      	pop	{r4, r5, r6, pc}
   17958:	20000e84 	.word	0x20000e84

0001795c <ll_chm_get>:
{
   1795c:	b538      	push	{r3, r4, r5, lr}
   1795e:	460d      	mov	r5, r1
	conn = connection_get(handle);
   17960:	f7f9 fcec 	bl	1133c <connection_get>
	if (!conn) {
   17964:	4604      	mov	r4, r0
   17966:	b160      	cbz	r0, 17982 <ll_chm_get+0x26>
		conn->chm_update = 0;
   17968:	2300      	movs	r3, #0
   1796a:	7723      	strb	r3, [r4, #28]
		memcpy(chm, conn->data_chan_map, sizeof(conn->data_chan_map));
   1796c:	2205      	movs	r2, #5
   1796e:	f104 0117 	add.w	r1, r4, #23
   17972:	4628      	mov	r0, r5
   17974:	f7e8 fca4 	bl	2c0 <memcpy>
	} while (conn->chm_update);
   17978:	7f23      	ldrb	r3, [r4, #28]
   1797a:	2b00      	cmp	r3, #0
   1797c:	d1f4      	bne.n	17968 <ll_chm_get+0xc>
	return 0;
   1797e:	2000      	movs	r0, #0
   17980:	bd38      	pop	{r3, r4, r5, pc}
		return 1;
   17982:	2001      	movs	r0, #1
}
   17984:	bd38      	pop	{r3, r4, r5, pc}

00017986 <ll_start_enc_req_send>:
{
   17986:	b570      	push	{r4, r5, r6, lr}
   17988:	460d      	mov	r5, r1
   1798a:	4616      	mov	r6, r2
	conn = connection_get(handle);
   1798c:	f7f9 fcd6 	bl	1133c <connection_get>
	if (!conn) {
   17990:	2800      	cmp	r0, #0
   17992:	d03e      	beq.n	17a12 <ll_start_enc_req_send+0x8c>
   17994:	4604      	mov	r4, r0
	if (error_code) {
   17996:	b32d      	cbz	r5, 179e4 <ll_start_enc_req_send+0x5e>
		if (conn->refresh == 0) {
   17998:	f890 30f8 	ldrb.w	r3, [r0, #248]	; 0xf8
   1799c:	f013 0f40 	tst.w	r3, #64	; 0x40
   179a0:	d111      	bne.n	179c6 <ll_start_enc_req_send+0x40>
			if (conn->llcp_req != conn->llcp_ack) {
   179a2:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
   179a6:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
   179aa:	4293      	cmp	r3, r2
   179ac:	d001      	beq.n	179b2 <ll_start_enc_req_send+0x2c>
				return 1;
   179ae:	2001      	movs	r0, #1
   179b0:	bd70      	pop	{r4, r5, r6, pc}
			conn->llcp.encryption.error_code = error_code;
   179b2:	f880 5078 	strb.w	r5, [r0, #120]	; 0x78
			conn->llcp_type = LLCP_ENCRYPTION;
   179b6:	2203      	movs	r2, #3
   179b8:	f880 2076 	strb.w	r2, [r0, #118]	; 0x76
			conn->llcp_req++;
   179bc:	3301      	adds	r3, #1
   179be:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
	return 0;
   179c2:	2000      	movs	r0, #0
   179c4:	bd70      	pop	{r4, r5, r6, pc}
			if (conn->llcp_terminate.ack !=
   179c6:	f890 20b1 	ldrb.w	r2, [r0, #177]	; 0xb1
			    conn->llcp_terminate.req) {
   179ca:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
			if (conn->llcp_terminate.ack !=
   179ce:	429a      	cmp	r2, r3
   179d0:	d001      	beq.n	179d6 <ll_start_enc_req_send+0x50>
				return 1;
   179d2:	2001      	movs	r0, #1
   179d4:	bd70      	pop	{r4, r5, r6, pc}
			conn->llcp_terminate.reason_own = error_code;
   179d6:	f880 50b2 	strb.w	r5, [r0, #178]	; 0xb2
			conn->llcp_terminate.req++;
   179da:	3301      	adds	r3, #1
   179dc:	f880 30b0 	strb.w	r3, [r0, #176]	; 0xb0
	return 0;
   179e0:	2000      	movs	r0, #0
   179e2:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(&conn->llcp.encryption.ltk[0], ltk,
   179e4:	2210      	movs	r2, #16
   179e6:	4631      	mov	r1, r6
   179e8:	3083      	adds	r0, #131	; 0x83
   179ea:	f7e8 fc69 	bl	2c0 <memcpy>
		if (conn->llcp_req != conn->llcp_ack) {
   179ee:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   179f2:	f894 2075 	ldrb.w	r2, [r4, #117]	; 0x75
   179f6:	4293      	cmp	r3, r2
   179f8:	d001      	beq.n	179fe <ll_start_enc_req_send+0x78>
			return 1;
   179fa:	2001      	movs	r0, #1
}
   179fc:	bd70      	pop	{r4, r5, r6, pc}
		conn->llcp.encryption.error_code = 0;
   179fe:	2000      	movs	r0, #0
   17a00:	f884 0078 	strb.w	r0, [r4, #120]	; 0x78
		conn->llcp_type = LLCP_ENCRYPTION;
   17a04:	2203      	movs	r2, #3
   17a06:	f884 2076 	strb.w	r2, [r4, #118]	; 0x76
		conn->llcp_req++;
   17a0a:	3301      	adds	r3, #1
   17a0c:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
   17a10:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
   17a12:	2001      	movs	r0, #1
   17a14:	bd70      	pop	{r4, r5, r6, pc}

00017a16 <ll_feature_req_send>:
{
   17a16:	b508      	push	{r3, lr}
	conn = connection_get(handle);
   17a18:	f7f9 fc90 	bl	1133c <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
   17a1c:	b178      	cbz	r0, 17a3e <ll_feature_req_send+0x28>
   17a1e:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   17a22:	f890 1075 	ldrb.w	r1, [r0, #117]	; 0x75
   17a26:	428a      	cmp	r2, r1
   17a28:	d001      	beq.n	17a2e <ll_feature_req_send+0x18>
		return 1;
   17a2a:	2001      	movs	r0, #1
}
   17a2c:	bd08      	pop	{r3, pc}
	conn->llcp_type = LLCP_FEATURE_EXCHANGE;
   17a2e:	2104      	movs	r1, #4
   17a30:	f880 1076 	strb.w	r1, [r0, #118]	; 0x76
	conn->llcp_req++;
   17a34:	3201      	adds	r2, #1
   17a36:	f880 2074 	strb.w	r2, [r0, #116]	; 0x74
	return 0;
   17a3a:	2000      	movs	r0, #0
   17a3c:	bd08      	pop	{r3, pc}
		return 1;
   17a3e:	2001      	movs	r0, #1
   17a40:	bd08      	pop	{r3, pc}

00017a42 <ll_version_ind_send>:
{
   17a42:	b508      	push	{r3, lr}
	conn = connection_get(handle);
   17a44:	f7f9 fc7a 	bl	1133c <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
   17a48:	b178      	cbz	r0, 17a6a <ll_version_ind_send+0x28>
   17a4a:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   17a4e:	f890 1075 	ldrb.w	r1, [r0, #117]	; 0x75
   17a52:	428a      	cmp	r2, r1
   17a54:	d001      	beq.n	17a5a <ll_version_ind_send+0x18>
		return 1;
   17a56:	2001      	movs	r0, #1
}
   17a58:	bd08      	pop	{r3, pc}
	conn->llcp_type = LLCP_VERSION_EXCHANGE;
   17a5a:	2105      	movs	r1, #5
   17a5c:	f880 1076 	strb.w	r1, [r0, #118]	; 0x76
	conn->llcp_req++;
   17a60:	3201      	adds	r2, #1
   17a62:	f880 2074 	strb.w	r2, [r0, #116]	; 0x74
	return 0;
   17a66:	2000      	movs	r0, #0
   17a68:	bd08      	pop	{r3, pc}
		return 1;
   17a6a:	2001      	movs	r0, #1
   17a6c:	bd08      	pop	{r3, pc}

00017a6e <ll_terminate_ind_send>:
{
   17a6e:	b510      	push	{r4, lr}
   17a70:	460c      	mov	r4, r1
	conn = connection_get(handle);
   17a72:	f7f9 fc63 	bl	1133c <connection_get>
	if (!conn || (conn->llcp_terminate.ack != conn->llcp_terminate.req)) {
   17a76:	b170      	cbz	r0, 17a96 <ll_terminate_ind_send+0x28>
   17a78:	f890 10b1 	ldrb.w	r1, [r0, #177]	; 0xb1
   17a7c:	f890 20b0 	ldrb.w	r2, [r0, #176]	; 0xb0
   17a80:	4291      	cmp	r1, r2
   17a82:	d001      	beq.n	17a88 <ll_terminate_ind_send+0x1a>
		return 1;
   17a84:	2001      	movs	r0, #1
}
   17a86:	bd10      	pop	{r4, pc}
	conn->llcp_terminate.reason_own = reason;
   17a88:	f880 40b2 	strb.w	r4, [r0, #178]	; 0xb2
	conn->llcp_terminate.req++;
   17a8c:	3201      	adds	r2, #1
   17a8e:	f880 20b0 	strb.w	r2, [r0, #176]	; 0xb0
	return 0;
   17a92:	2000      	movs	r0, #0
   17a94:	bd10      	pop	{r4, pc}
		return 1;
   17a96:	2001      	movs	r0, #1
   17a98:	bd10      	pop	{r4, pc}

00017a9a <ll_tx_power_level_get>:
{
   17a9a:	b510      	push	{r4, lr}
   17a9c:	4614      	mov	r4, r2
	conn = connection_get(handle);
   17a9e:	f7f9 fc4d 	bl	1133c <connection_get>
	if (!conn) {
   17aa2:	b110      	cbz	r0, 17aaa <ll_tx_power_level_get+0x10>
	*tx_power_level = 0;
   17aa4:	2000      	movs	r0, #0
   17aa6:	7020      	strb	r0, [r4, #0]
	return 0;
   17aa8:	bd10      	pop	{r4, pc}
		return 1;
   17aaa:	2001      	movs	r0, #1
}
   17aac:	bd10      	pop	{r4, pc}

00017aae <ll_tx_power_get>:
	*min = 0;
   17aae:	2300      	movs	r3, #0
   17ab0:	7003      	strb	r3, [r0, #0]
	*max = 0;
   17ab2:	700b      	strb	r3, [r1, #0]
   17ab4:	4770      	bx	lr
	...

00017ab8 <ll_apto_get>:
{
   17ab8:	b510      	push	{r4, lr}
   17aba:	460c      	mov	r4, r1
	conn = connection_get(handle);
   17abc:	f7f9 fc3e 	bl	1133c <connection_get>
	if (!conn) {
   17ac0:	b188      	cbz	r0, 17ae6 <ll_apto_get+0x2e>
	*apto = conn->apto_reload * conn->conn_interval * 125 / 1000;
   17ac2:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
   17ac6:	8c83      	ldrh	r3, [r0, #36]	; 0x24
   17ac8:	fb03 f301 	mul.w	r3, r3, r1
   17acc:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
   17ad0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   17ad4:	4a05      	ldr	r2, [pc, #20]	; (17aec <ll_apto_get+0x34>)
   17ad6:	fb82 1203 	smull	r1, r2, r2, r3
   17ada:	17db      	asrs	r3, r3, #31
   17adc:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
   17ae0:	8023      	strh	r3, [r4, #0]
	return 0;
   17ae2:	2000      	movs	r0, #0
   17ae4:	bd10      	pop	{r4, pc}
		return 1;
   17ae6:	2001      	movs	r0, #1
}
   17ae8:	bd10      	pop	{r4, pc}
   17aea:	bf00      	nop
   17aec:	10624dd3 	.word	0x10624dd3

00017af0 <ll_apto_set>:
{
   17af0:	b510      	push	{r4, lr}
   17af2:	460c      	mov	r4, r1
	conn = connection_get(handle);
   17af4:	f7f9 fc22 	bl	1133c <connection_get>
	if (!conn) {
   17af8:	b178      	cbz	r0, 17b1a <ll_apto_set+0x2a>
	conn->apto_reload = RADIO_CONN_EVENTS(apto * 10 * 1000,
   17afa:	8c81      	ldrh	r1, [r0, #36]	; 0x24
   17afc:	f240 43e2 	movw	r3, #1250	; 0x4e2
   17b00:	fb03 f301 	mul.w	r3, r3, r1
   17b04:	f242 7110 	movw	r1, #10000	; 0x2710
   17b08:	fb01 3404 	mla	r4, r1, r4, r3
   17b0c:	3c01      	subs	r4, #1
   17b0e:	fb94 f4f3 	sdiv	r4, r4, r3
   17b12:	f8a0 404a 	strh.w	r4, [r0, #74]	; 0x4a
	return 0;
   17b16:	2000      	movs	r0, #0
   17b18:	bd10      	pop	{r4, pc}
		return 1;
   17b1a:	2001      	movs	r0, #1
}
   17b1c:	bd10      	pop	{r4, pc}

00017b1e <ll_length_req_send>:
{
   17b1e:	b538      	push	{r3, r4, r5, lr}
   17b20:	460d      	mov	r5, r1
   17b22:	4614      	mov	r4, r2
	conn = connection_get(handle);
   17b24:	f7f9 fc0a 	bl	1133c <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   17b28:	b1f0      	cbz	r0, 17b68 <ll_length_req_send+0x4a>
   17b2a:	f890 1074 	ldrb.w	r1, [r0, #116]	; 0x74
   17b2e:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
   17b32:	4291      	cmp	r1, r2
   17b34:	d001      	beq.n	17b3a <ll_length_req_send+0x1c>
		return 1;
   17b36:	2001      	movs	r0, #1
   17b38:	bd38      	pop	{r3, r4, r5, pc}
	    (conn->llcp_length.req != conn->llcp_length.ack)) {
   17b3a:	f890 20e8 	ldrb.w	r2, [r0, #232]	; 0xe8
   17b3e:	f890 10e9 	ldrb.w	r1, [r0, #233]	; 0xe9
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   17b42:	428a      	cmp	r2, r1
   17b44:	d001      	beq.n	17b4a <ll_length_req_send+0x2c>
		return 1;
   17b46:	2001      	movs	r0, #1
}
   17b48:	bd38      	pop	{r3, r4, r5, pc}
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   17b4a:	f890 10ea 	ldrb.w	r1, [r0, #234]	; 0xea
   17b4e:	f36f 0101 	bfc	r1, #0, #2
   17b52:	f880 10ea 	strb.w	r1, [r0, #234]	; 0xea
	conn->llcp_length.tx_octets = tx_octets;
   17b56:	f8a0 50ee 	strh.w	r5, [r0, #238]	; 0xee
	conn->llcp_length.tx_time = tx_time;
   17b5a:	f8a0 40f2 	strh.w	r4, [r0, #242]	; 0xf2
	conn->llcp_length.req++;
   17b5e:	3201      	adds	r2, #1
   17b60:	f880 20e8 	strb.w	r2, [r0, #232]	; 0xe8
	return 0;
   17b64:	2000      	movs	r0, #0
   17b66:	bd38      	pop	{r3, r4, r5, pc}
		return 1;
   17b68:	2001      	movs	r0, #1
   17b6a:	bd38      	pop	{r3, r4, r5, pc}

00017b6c <ll_length_default_get>:
	*max_tx_octets = _radio.default_tx_octets;
   17b6c:	4b03      	ldr	r3, [pc, #12]	; (17b7c <ll_length_default_get+0x10>)
   17b6e:	f8b3 211e 	ldrh.w	r2, [r3, #286]	; 0x11e
   17b72:	8002      	strh	r2, [r0, #0]
	*max_tx_time = _radio.default_tx_time;
   17b74:	f8b3 3120 	ldrh.w	r3, [r3, #288]	; 0x120
   17b78:	800b      	strh	r3, [r1, #0]
   17b7a:	4770      	bx	lr
   17b7c:	20000e84 	.word	0x20000e84

00017b80 <ll_length_default_set>:
	_radio.default_tx_octets = max_tx_octets;
   17b80:	4b03      	ldr	r3, [pc, #12]	; (17b90 <ll_length_default_set+0x10>)
   17b82:	f8a3 011e 	strh.w	r0, [r3, #286]	; 0x11e
	_radio.default_tx_time = max_tx_time;
   17b86:	f8a3 1120 	strh.w	r1, [r3, #288]	; 0x120
}
   17b8a:	2000      	movs	r0, #0
   17b8c:	4770      	bx	lr
   17b8e:	bf00      	nop
   17b90:	20000e84 	.word	0x20000e84

00017b94 <ll_length_max_get>:
{
   17b94:	b410      	push	{r4}
	*max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
   17b96:	241b      	movs	r4, #27
   17b98:	8004      	strh	r4, [r0, #0]
	*max_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX, BIT(2));
   17b9a:	f44f 70a4 	mov.w	r0, #328	; 0x148
   17b9e:	8008      	strh	r0, [r1, #0]
	*max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
   17ba0:	8014      	strh	r4, [r2, #0]
	*max_rx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX, BIT(2));
   17ba2:	8018      	strh	r0, [r3, #0]
}
   17ba4:	bc10      	pop	{r4}
   17ba6:	4770      	bx	lr

00017ba8 <ll_phy_get>:
{
   17ba8:	b538      	push	{r3, r4, r5, lr}
   17baa:	460d      	mov	r5, r1
   17bac:	4614      	mov	r4, r2
	conn = connection_get(handle);
   17bae:	f7f9 fbc5 	bl	1133c <connection_get>
	if (!conn) {
   17bb2:	b158      	cbz	r0, 17bcc <ll_phy_get+0x24>
	*tx = conn->phy_tx;
   17bb4:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   17bb8:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   17bbc:	702b      	strb	r3, [r5, #0]
	*rx = conn->phy_rx;
   17bbe:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
   17bc2:	f3c3 0302 	ubfx	r3, r3, #0, #3
   17bc6:	7023      	strb	r3, [r4, #0]
	return 0;
   17bc8:	2000      	movs	r0, #0
   17bca:	bd38      	pop	{r3, r4, r5, pc}
		return 1;
   17bcc:	2001      	movs	r0, #1
}
   17bce:	bd38      	pop	{r3, r4, r5, pc}

00017bd0 <ll_phy_default_set>:
	_radio.default_phy_tx = tx;
   17bd0:	4b03      	ldr	r3, [pc, #12]	; (17be0 <ll_phy_default_set+0x10>)
   17bd2:	f8a3 0122 	strh.w	r0, [r3, #290]	; 0x122
	_radio.default_phy_rx = rx;
   17bd6:	f8a3 1124 	strh.w	r1, [r3, #292]	; 0x124
}
   17bda:	2000      	movs	r0, #0
   17bdc:	4770      	bx	lr
   17bde:	bf00      	nop
   17be0:	20000e84 	.word	0x20000e84

00017be4 <ll_phy_req_send>:
{
   17be4:	b570      	push	{r4, r5, r6, lr}
   17be6:	460e      	mov	r6, r1
   17be8:	4615      	mov	r5, r2
   17bea:	461c      	mov	r4, r3
	conn = connection_get(handle);
   17bec:	f7f9 fba6 	bl	1133c <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   17bf0:	b338      	cbz	r0, 17c42 <ll_phy_req_send+0x5e>
   17bf2:	4603      	mov	r3, r0
   17bf4:	f890 1074 	ldrb.w	r1, [r0, #116]	; 0x74
   17bf8:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
   17bfc:	4291      	cmp	r1, r2
   17bfe:	d001      	beq.n	17c04 <ll_phy_req_send+0x20>
		return 1;
   17c00:	2001      	movs	r0, #1
   17c02:	bd70      	pop	{r4, r5, r6, pc}
	    (conn->llcp_phy.req != conn->llcp_phy.ack)) {
   17c04:	f890 20f4 	ldrb.w	r2, [r0, #244]	; 0xf4
   17c08:	f890 10f5 	ldrb.w	r1, [r0, #245]	; 0xf5
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   17c0c:	428a      	cmp	r2, r1
   17c0e:	d001      	beq.n	17c14 <ll_phy_req_send+0x30>
		return 1;
   17c10:	2001      	movs	r0, #1
}
   17c12:	bd70      	pop	{r4, r5, r6, pc}
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   17c14:	f890 10f6 	ldrb.w	r1, [r0, #246]	; 0xf6
	conn->llcp_phy.cmd = 1;
   17c18:	f890 00f7 	ldrb.w	r0, [r0, #247]	; 0xf7
	conn->llcp_phy.tx = tx;
   17c1c:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
   17c20:	f366 0184 	bfi	r1, r6, #2, #3
	conn->llcp_phy.flags = flags;
   17c24:	f040 0002 	orr.w	r0, r0, #2
   17c28:	f365 0000 	bfi	r0, r5, #0, #1
   17c2c:	f883 00f7 	strb.w	r0, [r3, #247]	; 0xf7
	conn->llcp_phy.rx = rx;
   17c30:	f364 1147 	bfi	r1, r4, #5, #3
   17c34:	f883 10f6 	strb.w	r1, [r3, #246]	; 0xf6
	conn->llcp_phy.req++;
   17c38:	3201      	adds	r2, #1
   17c3a:	f883 20f4 	strb.w	r2, [r3, #244]	; 0xf4
	return 0;
   17c3e:	2000      	movs	r0, #0
   17c40:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
   17c42:	2001      	movs	r0, #1
   17c44:	bd70      	pop	{r4, r5, r6, pc}
	...

00017c48 <radio_rx_get>:
{
   17c48:	b5f0      	push	{r4, r5, r6, r7, lr}
   17c4a:	b083      	sub	sp, #12
   17c4c:	4606      	mov	r6, r0
   17c4e:	4608      	mov	r0, r1
	if (_radio.link_rx_head != _radio.link_rx_tail) {
   17c50:	4b1b      	ldr	r3, [pc, #108]	; (17cc0 <radio_rx_get+0x78>)
   17c52:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
   17c56:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
   17c5a:	429a      	cmp	r2, r3
   17c5c:	d024      	beq.n	17ca8 <radio_rx_get+0x60>
		_radio_pdu_node_rx = *((void **)_radio.link_rx_head + 1);
   17c5e:	6857      	ldr	r7, [r2, #4]
		cmplt = tx_cmplt_get(handle,
   17c60:	783a      	ldrb	r2, [r7, #0]
   17c62:	4918      	ldr	r1, [pc, #96]	; (17cc4 <radio_rx_get+0x7c>)
   17c64:	f7f9 fb0c 	bl	11280 <tx_cmplt_get>
		if (!cmplt) {
   17c68:	4605      	mov	r5, r0
   17c6a:	b9d0      	cbnz	r0, 17ca2 <radio_rx_get+0x5a>
			first = _radio.packet_release_first;
   17c6c:	4b14      	ldr	r3, [pc, #80]	; (17cc0 <radio_rx_get+0x78>)
   17c6e:	f893 3173 	ldrb.w	r3, [r3, #371]	; 0x173
   17c72:	f88d 3005 	strb.w	r3, [sp, #5]
			cmplt_curr = 0;
   17c76:	4604      	mov	r4, r0
   17c78:	e000      	b.n	17c7c <radio_rx_get+0x34>
   17c7a:	4604      	mov	r4, r0
				cmplt_curr = tx_cmplt_get(&handle, &first,
   17c7c:	4b10      	ldr	r3, [pc, #64]	; (17cc0 <radio_rx_get+0x78>)
   17c7e:	f893 2174 	ldrb.w	r2, [r3, #372]	; 0x174
   17c82:	f10d 0105 	add.w	r1, sp, #5
   17c86:	f10d 0006 	add.w	r0, sp, #6
   17c8a:	f7f9 faf9 	bl	11280 <tx_cmplt_get>
				 (cmplt_prev != cmplt_curr));
   17c8e:	2c00      	cmp	r4, #0
   17c90:	d1f3      	bne.n	17c7a <radio_rx_get+0x32>
			} while ((cmplt_prev != 0) ||
   17c92:	4284      	cmp	r4, r0
   17c94:	d001      	beq.n	17c9a <radio_rx_get+0x52>
   17c96:	4604      	mov	r4, r0
   17c98:	e7f0      	b.n	17c7c <radio_rx_get+0x34>
			*radio_pdu_node_rx = _radio_pdu_node_rx;
   17c9a:	6037      	str	r7, [r6, #0]
}
   17c9c:	4628      	mov	r0, r5
   17c9e:	b003      	add	sp, #12
   17ca0:	bdf0      	pop	{r4, r5, r6, r7, pc}
			*radio_pdu_node_rx = NULL;
   17ca2:	2300      	movs	r3, #0
   17ca4:	6033      	str	r3, [r6, #0]
   17ca6:	e7f9      	b.n	17c9c <radio_rx_get+0x54>
		cmplt = tx_cmplt_get(handle, &_radio.packet_release_first,
   17ca8:	4905      	ldr	r1, [pc, #20]	; (17cc0 <radio_rx_get+0x78>)
   17caa:	f891 2174 	ldrb.w	r2, [r1, #372]	; 0x174
   17cae:	f201 1173 	addw	r1, r1, #371	; 0x173
   17cb2:	f7f9 fae5 	bl	11280 <tx_cmplt_get>
   17cb6:	4605      	mov	r5, r0
		*radio_pdu_node_rx = NULL;
   17cb8:	2300      	movs	r3, #0
   17cba:	6033      	str	r3, [r6, #0]
   17cbc:	e7ee      	b.n	17c9c <radio_rx_get+0x54>
   17cbe:	bf00      	nop
   17cc0:	20000e84 	.word	0x20000e84
   17cc4:	20000ff7 	.word	0x20000ff7

00017cc8 <radio_rx_mem_release>:
{
   17cc8:	b570      	push	{r4, r5, r6, lr}
   17cca:	4606      	mov	r6, r0
	_radio_pdu_node_rx = *radio_pdu_node_rx;
   17ccc:	6800      	ldr	r0, [r0, #0]
	while (_radio_pdu_node_rx) {
   17cce:	e003      	b.n	17cd8 <radio_rx_mem_release+0x10>
			mem_release(_radio_pdu_node_rx_free,
   17cd0:	491e      	ldr	r1, [pc, #120]	; (17d4c <radio_rx_mem_release+0x84>)
   17cd2:	f7f6 fd6a 	bl	e7aa <mem_release>
{
   17cd6:	4620      	mov	r0, r4
	while (_radio_pdu_node_rx) {
   17cd8:	b398      	cbz	r0, 17d42 <radio_rx_mem_release+0x7a>
		_radio_pdu_node_rx = _radio_pdu_node_rx->hdr.onion.next;
   17cda:	6804      	ldr	r4, [r0, #0]
		switch (_radio_pdu_node_rx_free->hdr.type) {
   17cdc:	7903      	ldrb	r3, [r0, #4]
   17cde:	3b01      	subs	r3, #1
   17ce0:	2b0b      	cmp	r3, #11
   17ce2:	d828      	bhi.n	17d36 <radio_rx_mem_release+0x6e>
   17ce4:	a201      	add	r2, pc, #4	; (adr r2, 17cec <radio_rx_mem_release+0x24>)
   17ce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   17cea:	bf00      	nop
   17cec:	00017cd1 	.word	0x00017cd1
   17cf0:	00017cd1 	.word	0x00017cd1
   17cf4:	00017cd1 	.word	0x00017cd1
   17cf8:	00017cd1 	.word	0x00017cd1
   17cfc:	00017cd1 	.word	0x00017cd1
   17d00:	00017cd1 	.word	0x00017cd1
   17d04:	00017d1d 	.word	0x00017d1d
   17d08:	00017cd1 	.word	0x00017cd1
   17d0c:	00017cd1 	.word	0x00017cd1
   17d10:	00017cd1 	.word	0x00017cd1
   17d14:	00017cd1 	.word	0x00017cd1
   17d18:	00017cd1 	.word	0x00017cd1
			conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
   17d1c:	4d0c      	ldr	r5, [pc, #48]	; (17d50 <radio_rx_mem_release+0x88>)
   17d1e:	88c2      	ldrh	r2, [r0, #6]
   17d20:	f44f 71aa 	mov.w	r1, #340	; 0x154
   17d24:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
   17d28:	f7f6 fd60 	bl	e7ec <mem_get>
			mem_release(conn, &_radio.conn_free);
   17d2c:	f505 7184 	add.w	r1, r5, #264	; 0x108
   17d30:	f7f6 fd3b 	bl	e7aa <mem_release>
			break;
   17d34:	e7cf      	b.n	17cd6 <radio_rx_mem_release+0xe>
			LL_ASSERT(0);
   17d36:	4040      	eors	r0, r0
   17d38:	f380 8811 	msr	BASEPRI, r0
   17d3c:	f04f 0004 	mov.w	r0, #4
   17d40:	df02      	svc	2
	*radio_pdu_node_rx = _radio_pdu_node_rx;
   17d42:	6030      	str	r0, [r6, #0]
	packet_rx_allocate(0xff);
   17d44:	20ff      	movs	r0, #255	; 0xff
   17d46:	f7f9 fa4f 	bl	111e8 <packet_rx_allocate>
   17d4a:	bd70      	pop	{r4, r5, r6, pc}
   17d4c:	20000fb0 	.word	0x20000fb0
   17d50:	20000e84 	.word	0x20000e84

00017d54 <do_radio_rx_fc_set>:
	if (req == ack) {
   17d54:	4291      	cmp	r1, r2
   17d56:	d007      	beq.n	17d68 <do_radio_rx_fc_set+0x14>
	} else if (((req == 0) &&
   17d58:	bb41      	cbnz	r1, 17dac <do_radio_rx_fc_set+0x58>
		    (_radio.fc_handle[TRIPLE_BUFFER_SIZE - 1] != handle)) ||
   17d5a:	4b1c      	ldr	r3, [pc, #112]	; (17dcc <do_radio_rx_fc_set+0x78>)
   17d5c:	f8b3 317a 	ldrh.w	r3, [r3, #378]	; 0x17a
	} else if (((req == 0) &&
   17d60:	4298      	cmp	r0, r3
   17d62:	d023      	beq.n	17dac <do_radio_rx_fc_set+0x58>
		return 1;
   17d64:	2001      	movs	r0, #1
   17d66:	4770      	bx	lr
{
   17d68:	b430      	push	{r4, r5}
		if (_radio.link_rx_head == _radio.link_rx_tail) {
   17d6a:	4b18      	ldr	r3, [pc, #96]	; (17dcc <do_radio_rx_fc_set+0x78>)
   17d6c:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
   17d70:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
   17d74:	429c      	cmp	r4, r3
   17d76:	d002      	beq.n	17d7e <do_radio_rx_fc_set+0x2a>
			return 1;
   17d78:	2001      	movs	r0, #1
}
   17d7a:	bc30      	pop	{r4, r5}
   17d7c:	4770      	bx	lr
			if (ack1 == 0) {
   17d7e:	b19a      	cbz	r2, 17da8 <do_radio_rx_fc_set+0x54>
			u8_t ack1 = ack;
   17d80:	4613      	mov	r3, r2
			_radio.fc_handle[--ack1] = handle;
   17d82:	3b01      	subs	r3, #1
   17d84:	b2db      	uxtb	r3, r3
   17d86:	4c11      	ldr	r4, [pc, #68]	; (17dcc <do_radio_rx_fc_set+0x78>)
   17d88:	f103 05b8 	add.w	r5, r3, #184	; 0xb8
   17d8c:	eb04 0545 	add.w	r5, r4, r5, lsl #1
   17d90:	80e8      	strh	r0, [r5, #6]
			_radio.fc_ack = ack1;
   17d92:	f884 317d 	strb.w	r3, [r4, #381]	; 0x17d
			if (req != _radio.fc_req) {
   17d96:	f894 317c 	ldrb.w	r3, [r4, #380]	; 0x17c
   17d9a:	b2db      	uxtb	r3, r3
   17d9c:	4299      	cmp	r1, r3
   17d9e:	d00f      	beq.n	17dc0 <do_radio_rx_fc_set+0x6c>
				_radio.fc_ack = ack;
   17da0:	f884 217d 	strb.w	r2, [r4, #381]	; 0x17d
				return 1;
   17da4:	2001      	movs	r0, #1
   17da6:	e7e8      	b.n	17d7a <do_radio_rx_fc_set+0x26>
				ack1 = TRIPLE_BUFFER_SIZE;
   17da8:	2303      	movs	r3, #3
   17daa:	e7ea      	b.n	17d82 <do_radio_rx_fc_set+0x2e>
		    (_radio.fc_handle[TRIPLE_BUFFER_SIZE - 1] != handle)) ||
   17dac:	b151      	cbz	r1, 17dc4 <do_radio_rx_fc_set+0x70>
		   ((req != 0) && (_radio.fc_handle[req - 1] != handle))) {
   17dae:	31b7      	adds	r1, #183	; 0xb7
   17db0:	4b06      	ldr	r3, [pc, #24]	; (17dcc <do_radio_rx_fc_set+0x78>)
   17db2:	eb03 0141 	add.w	r1, r3, r1, lsl #1
   17db6:	88cb      	ldrh	r3, [r1, #6]
   17db8:	4298      	cmp	r0, r3
   17dba:	d005      	beq.n	17dc8 <do_radio_rx_fc_set+0x74>
		return 1;
   17dbc:	2001      	movs	r0, #1
   17dbe:	4770      	bx	lr
	return 0;
   17dc0:	2000      	movs	r0, #0
   17dc2:	e7da      	b.n	17d7a <do_radio_rx_fc_set+0x26>
   17dc4:	4608      	mov	r0, r1
   17dc6:	4770      	bx	lr
   17dc8:	2000      	movs	r0, #0
   17dca:	4770      	bx	lr
   17dcc:	20000e84 	.word	0x20000e84

00017dd0 <radio_rx_fc_set>:
{
   17dd0:	b538      	push	{r3, r4, r5, lr}
   17dd2:	4604      	mov	r4, r0
	if (_radio.fc_ena) {
   17dd4:	4b1b      	ldr	r3, [pc, #108]	; (17e44 <radio_rx_fc_set+0x74>)
   17dd6:	f893 017e 	ldrb.w	r0, [r3, #382]	; 0x17e
   17dda:	b338      	cbz	r0, 17e2c <radio_rx_fc_set+0x5c>
		u8_t req = _radio.fc_req;
   17ddc:	f893 217c 	ldrb.w	r2, [r3, #380]	; 0x17c
   17de0:	b2d5      	uxtb	r5, r2
		u8_t ack = _radio.fc_ack;
   17de2:	f893 217d 	ldrb.w	r2, [r3, #381]	; 0x17d
		if (fc) {
   17de6:	b141      	cbz	r1, 17dfa <radio_rx_fc_set+0x2a>
			if (handle != 0xffff) {
   17de8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   17dec:	429c      	cmp	r4, r3
   17dee:	d023      	beq.n	17e38 <radio_rx_fc_set+0x68>
   17df0:	4620      	mov	r0, r4
				return do_radio_rx_fc_set(handle, req, ack);
   17df2:	4629      	mov	r1, r5
   17df4:	f7ff ffae 	bl	17d54 <do_radio_rx_fc_set>
   17df8:	bd38      	pop	{r3, r4, r5, pc}
		} else if ((_radio.link_rx_head == _radio.link_rx_tail) &&
   17dfa:	4b12      	ldr	r3, [pc, #72]	; (17e44 <radio_rx_fc_set+0x74>)
   17dfc:	f8d3 0148 	ldr.w	r0, [r3, #328]	; 0x148
   17e00:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
   17e04:	4298      	cmp	r0, r3
   17e06:	d001      	beq.n	17e0c <radio_rx_fc_set+0x3c>
	return 0;
   17e08:	4608      	mov	r0, r1
   17e0a:	bd38      	pop	{r3, r4, r5, pc}
		} else if ((_radio.link_rx_head == _radio.link_rx_tail) &&
   17e0c:	4295      	cmp	r5, r2
   17e0e:	d015      	beq.n	17e3c <radio_rx_fc_set+0x6c>
			_radio.fc_ack = req;
   17e10:	4b0c      	ldr	r3, [pc, #48]	; (17e44 <radio_rx_fc_set+0x74>)
   17e12:	f883 517d 	strb.w	r5, [r3, #381]	; 0x17d
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
   17e16:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
   17e1a:	4298      	cmp	r0, r3
   17e1c:	d010      	beq.n	17e40 <radio_rx_fc_set+0x70>
			    (req == _radio.fc_req)) {
   17e1e:	4b09      	ldr	r3, [pc, #36]	; (17e44 <radio_rx_fc_set+0x74>)
   17e20:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
   17e24:	b2db      	uxtb	r3, r3
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
   17e26:	429d      	cmp	r5, r3
   17e28:	d001      	beq.n	17e2e <radio_rx_fc_set+0x5e>
	return 0;
   17e2a:	4608      	mov	r0, r1
}
   17e2c:	bd38      	pop	{r3, r4, r5, pc}
				_radio.fc_ack = ack;
   17e2e:	4b05      	ldr	r3, [pc, #20]	; (17e44 <radio_rx_fc_set+0x74>)
   17e30:	f883 217d 	strb.w	r2, [r3, #381]	; 0x17d
	return 0;
   17e34:	4608      	mov	r0, r1
   17e36:	bd38      	pop	{r3, r4, r5, pc}
   17e38:	2000      	movs	r0, #0
   17e3a:	bd38      	pop	{r3, r4, r5, pc}
   17e3c:	4608      	mov	r0, r1
   17e3e:	bd38      	pop	{r3, r4, r5, pc}
   17e40:	4608      	mov	r0, r1
   17e42:	bd38      	pop	{r3, r4, r5, pc}
   17e44:	20000e84 	.word	0x20000e84

00017e48 <radio_tx_mem_acquire>:
{
   17e48:	b508      	push	{r3, lr}
	return mem_acquire(&_radio.pkt_tx_data_free);
   17e4a:	4802      	ldr	r0, [pc, #8]	; (17e54 <radio_tx_mem_acquire+0xc>)
   17e4c:	f7f6 fc91 	bl	e772 <mem_acquire>
}
   17e50:	bd08      	pop	{r3, pc}
   17e52:	bf00      	nop
   17e54:	20000fe4 	.word	0x20000fe4

00017e58 <radio_tx_mem_release>:
{
   17e58:	b508      	push	{r3, lr}
	mem_release(node_tx, &_radio.pkt_tx_data_free);
   17e5a:	4902      	ldr	r1, [pc, #8]	; (17e64 <radio_tx_mem_release+0xc>)
   17e5c:	f7f6 fca5 	bl	e7aa <mem_release>
   17e60:	bd08      	pop	{r3, pc}
   17e62:	bf00      	nop
   17e64:	20000fe4 	.word	0x20000fe4

00017e68 <radio_tx_mem_enqueue>:
}

u32_t radio_tx_mem_enqueue(u16_t handle, struct radio_pdu_node_tx *node_tx)
{
   17e68:	b570      	push	{r4, r5, r6, lr}
   17e6a:	b088      	sub	sp, #32
   17e6c:	4605      	mov	r5, r0
   17e6e:	460e      	mov	r6, r1
	u8_t last;
	struct connection *conn;
	struct pdu_data *pdu_data;

	last = _radio.packet_tx_last + 1;
   17e70:	4b36      	ldr	r3, [pc, #216]	; (17f4c <radio_tx_mem_enqueue+0xe4>)
   17e72:	f893 4172 	ldrb.w	r4, [r3, #370]	; 0x172
   17e76:	3401      	adds	r4, #1
   17e78:	b2e4      	uxtb	r4, r4
	if (last == _radio.packet_tx_count) {
   17e7a:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
   17e7e:	429c      	cmp	r4, r3
   17e80:	d02a      	beq.n	17ed8 <radio_tx_mem_enqueue+0x70>
		last = 0;
	}

	pdu_data = (struct pdu_data *)node_tx->pdu_data;
	conn = connection_get(handle);
   17e82:	4628      	mov	r0, r5
   17e84:	f7f9 fa5a 	bl	1133c <connection_get>
	if (!conn || (last == _radio.packet_tx_first)) {
   17e88:	4601      	mov	r1, r0
   17e8a:	2800      	cmp	r0, #0
   17e8c:	d057      	beq.n	17f3e <radio_tx_mem_enqueue+0xd6>
   17e8e:	4b2f      	ldr	r3, [pc, #188]	; (17f4c <radio_tx_mem_enqueue+0xe4>)
   17e90:	f893 3171 	ldrb.w	r3, [r3, #369]	; 0x171
   17e94:	b2db      	uxtb	r3, r3
   17e96:	429c      	cmp	r4, r3
   17e98:	d053      	beq.n	17f42 <radio_tx_mem_enqueue+0xda>
		return 1;
	}

	LL_ASSERT(pdu_data->len <= (_radio.packet_tx_data_size -
   17e9a:	7972      	ldrb	r2, [r6, #5]
   17e9c:	4b2b      	ldr	r3, [pc, #172]	; (17f4c <radio_tx_mem_enqueue+0xe4>)
   17e9e:	f8b3 3164 	ldrh.w	r3, [r3, #356]	; 0x164
   17ea2:	3b07      	subs	r3, #7
   17ea4:	429a      	cmp	r2, r3
   17ea6:	d819      	bhi.n	17edc <radio_tx_mem_enqueue+0x74>
				    offsetof(struct radio_pdu_node_tx,
					     pdu_data) -
				    offsetof(struct pdu_data, payload)));

	_radio.pkt_tx[_radio.packet_tx_last].handle = handle;
   17ea8:	4b28      	ldr	r3, [pc, #160]	; (17f4c <radio_tx_mem_enqueue+0xe4>)
   17eaa:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
   17eae:	f893 0172 	ldrb.w	r0, [r3, #370]	; 0x172
   17eb2:	f822 5030 	strh.w	r5, [r2, r0, lsl #3]
	_radio.pkt_tx[_radio.packet_tx_last].  node_tx = node_tx;
   17eb6:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
   17eba:	f893 0172 	ldrb.w	r0, [r3, #370]	; 0x172
   17ebe:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
   17ec2:	6056      	str	r6, [r2, #4]
	_radio.packet_tx_last = last;
   17ec4:	f883 4172 	strb.w	r4, [r3, #370]	; 0x172

	/* break slave latency */
	if (conn->role && conn->latency_event && !conn->slave.latency_cancel) {
   17ec8:	f991 301d 	ldrsb.w	r3, [r1, #29]
   17ecc:	2b00      	cmp	r3, #0
   17ece:	db0b      	blt.n	17ee8 <radio_tx_mem_enqueue+0x80>
				 (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
			  (ticker_status == TICKER_STATUS_BUSY));
	}

	return 0;
   17ed0:	2300      	movs	r3, #0
}
   17ed2:	4618      	mov	r0, r3
   17ed4:	b008      	add	sp, #32
   17ed6:	bd70      	pop	{r4, r5, r6, pc}
		last = 0;
   17ed8:	2400      	movs	r4, #0
   17eda:	e7d2      	b.n	17e82 <radio_tx_mem_enqueue+0x1a>
	LL_ASSERT(pdu_data->len <= (_radio.packet_tx_data_size -
   17edc:	4040      	eors	r0, r0
   17ede:	f380 8811 	msr	BASEPRI, r0
   17ee2:	f04f 0004 	mov.w	r0, #4
   17ee6:	df02      	svc	2
	if (conn->role && conn->latency_event && !conn->slave.latency_cancel) {
   17ee8:	8d4b      	ldrh	r3, [r1, #42]	; 0x2a
   17eea:	b363      	cbz	r3, 17f46 <radio_tx_mem_enqueue+0xde>
   17eec:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
   17ef0:	f013 0f02 	tst.w	r3, #2
   17ef4:	d001      	beq.n	17efa <radio_tx_mem_enqueue+0x92>
	return 0;
   17ef6:	2300      	movs	r3, #0
   17ef8:	e7eb      	b.n	17ed2 <radio_tx_mem_enqueue+0x6a>
		conn->slave.latency_cancel = 1;
   17efa:	f043 0302 	orr.w	r3, r3, #2
   17efe:	f881 3050 	strb.w	r3, [r1, #80]	; 0x50
				 conn->handle, 0, 0, 0, 0, 1, 0,
   17f02:	8c0a      	ldrh	r2, [r1, #32]
		ticker_status = ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
   17f04:	3207      	adds	r2, #7
   17f06:	9106      	str	r1, [sp, #24]
   17f08:	4b11      	ldr	r3, [pc, #68]	; (17f50 <radio_tx_mem_enqueue+0xe8>)
   17f0a:	9305      	str	r3, [sp, #20]
   17f0c:	2000      	movs	r0, #0
   17f0e:	9004      	str	r0, [sp, #16]
   17f10:	2301      	movs	r3, #1
   17f12:	9303      	str	r3, [sp, #12]
   17f14:	9002      	str	r0, [sp, #8]
   17f16:	9001      	str	r0, [sp, #4]
   17f18:	9000      	str	r0, [sp, #0]
   17f1a:	4603      	mov	r3, r0
   17f1c:	b2d2      	uxtb	r2, r2
   17f1e:	2103      	movs	r1, #3
   17f20:	f7f8 f944 	bl	101ac <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   17f24:	4603      	mov	r3, r0
   17f26:	2800      	cmp	r0, #0
   17f28:	d0d3      	beq.n	17ed2 <radio_tx_mem_enqueue+0x6a>
   17f2a:	2802      	cmp	r0, #2
   17f2c:	d101      	bne.n	17f32 <radio_tx_mem_enqueue+0xca>
	return 0;
   17f2e:	2300      	movs	r3, #0
   17f30:	e7cf      	b.n	17ed2 <radio_tx_mem_enqueue+0x6a>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   17f32:	4040      	eors	r0, r0
   17f34:	f380 8811 	msr	BASEPRI, r0
   17f38:	f04f 0004 	mov.w	r0, #4
   17f3c:	df02      	svc	2
		return 1;
   17f3e:	2301      	movs	r3, #1
   17f40:	e7c7      	b.n	17ed2 <radio_tx_mem_enqueue+0x6a>
   17f42:	2301      	movs	r3, #1
   17f44:	e7c5      	b.n	17ed2 <radio_tx_mem_enqueue+0x6a>
	return 0;
   17f46:	2300      	movs	r3, #0
   17f48:	e7c3      	b.n	17ed2 <radio_tx_mem_enqueue+0x6a>
   17f4a:	bf00      	nop
   17f4c:	20000e84 	.word	0x20000e84
   17f50:	000111cd 	.word	0x000111cd

00017f54 <ll_enc_req_send>:
{
   17f54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   17f58:	4680      	mov	r8, r0
   17f5a:	4689      	mov	r9, r1
   17f5c:	4616      	mov	r6, r2
   17f5e:	461f      	mov	r7, r3
	conn = connection_get(handle);
   17f60:	f7f9 f9ec 	bl	1133c <connection_get>
	if (!conn) {
   17f64:	2800      	cmp	r0, #0
   17f66:	d055      	beq.n	18014 <ll_enc_req_send+0xc0>
   17f68:	4605      	mov	r5, r0
	node_tx = radio_tx_mem_acquire();
   17f6a:	f7ff ff6d 	bl	17e48 <radio_tx_mem_acquire>
	if (node_tx) {
   17f6e:	4604      	mov	r4, r0
   17f70:	2800      	cmp	r0, #0
   17f72:	d051      	beq.n	18018 <ll_enc_req_send+0xc4>
		memcpy(&conn->llcp.encryption.ltk[0], ltk,
   17f74:	2210      	movs	r2, #16
   17f76:	4639      	mov	r1, r7
   17f78:	f105 0083 	add.w	r0, r5, #131	; 0x83
   17f7c:	f7e8 f9a0 	bl	2c0 <memcpy>
		if ((conn->enc_rx == 0) && (conn->enc_tx == 0)) {
   17f80:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
   17f84:	f013 0330 	ands.w	r3, r3, #48	; 0x30
   17f88:	d008      	beq.n	17f9c <ll_enc_req_send+0x48>
		} else if ((conn->enc_rx != 0) && (conn->enc_tx != 0)) {
   17f8a:	2b30      	cmp	r3, #48	; 0x30
   17f8c:	d02d      	beq.n	17fea <ll_enc_req_send+0x96>
			radio_tx_mem_release(node_tx);
   17f8e:	4620      	mov	r0, r4
   17f90:	f7ff ff62 	bl	17e58 <radio_tx_mem_release>
			return 1;
   17f94:	2301      	movs	r3, #1
}
   17f96:	4618      	mov	r0, r3
   17f98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   17f9c:	7923      	ldrb	r3, [r4, #4]
   17f9e:	f043 0303 	orr.w	r3, r3, #3
   17fa2:	7123      	strb	r3, [r4, #4]
			pdu_data_tx->len = offsetof(struct pdu_data_llctrl,
   17fa4:	2317      	movs	r3, #23
   17fa6:	7163      	strb	r3, [r4, #5]
			pdu_data_tx->payload.llctrl.opcode =
   17fa8:	2303      	movs	r3, #3
   17faa:	71e3      	strb	r3, [r4, #7]
			memcpy(enc_req->rand, rand, sizeof(enc_req->rand));
   17fac:	2208      	movs	r2, #8
   17fae:	4649      	mov	r1, r9
   17fb0:	18a0      	adds	r0, r4, r2
   17fb2:	f7e8 f985 	bl	2c0 <memcpy>
			enc_req->ediv[0] = ediv[0];
   17fb6:	7833      	ldrb	r3, [r6, #0]
   17fb8:	7423      	strb	r3, [r4, #16]
			enc_req->ediv[1] = ediv[1];
   17fba:	7873      	ldrb	r3, [r6, #1]
   17fbc:	7463      	strb	r3, [r4, #17]
			bt_rand(enc_req->skdm, sizeof(enc_req->skdm));
   17fbe:	2108      	movs	r1, #8
   17fc0:	f104 0012 	add.w	r0, r4, #18
   17fc4:	f7f8 fd74 	bl	10ab0 <bt_rand>
			bt_rand(enc_req->ivm, sizeof(enc_req->ivm));
   17fc8:	2104      	movs	r1, #4
   17fca:	f104 001a 	add.w	r0, r4, #26
   17fce:	f7f8 fd6f 	bl	10ab0 <bt_rand>
		if (radio_tx_mem_enqueue(handle, node_tx)) {
   17fd2:	4621      	mov	r1, r4
   17fd4:	4640      	mov	r0, r8
   17fd6:	f7ff ff47 	bl	17e68 <radio_tx_mem_enqueue>
   17fda:	4603      	mov	r3, r0
   17fdc:	2800      	cmp	r0, #0
   17fde:	d0da      	beq.n	17f96 <ll_enc_req_send+0x42>
			radio_tx_mem_release(node_tx);
   17fe0:	4620      	mov	r0, r4
   17fe2:	f7ff ff39 	bl	17e58 <radio_tx_mem_release>
			return 1;
   17fe6:	2301      	movs	r3, #1
   17fe8:	e7d5      	b.n	17f96 <ll_enc_req_send+0x42>
			memcpy(&conn->llcp.encryption.rand[0], rand,
   17fea:	2208      	movs	r2, #8
   17fec:	4649      	mov	r1, r9
   17fee:	f105 0079 	add.w	r0, r5, #121	; 0x79
   17ff2:	f7e8 f965 	bl	2c0 <memcpy>
			conn->llcp.encryption.ediv[0] = ediv[0];
   17ff6:	7833      	ldrb	r3, [r6, #0]
   17ff8:	f885 3081 	strb.w	r3, [r5, #129]	; 0x81
			conn->llcp.encryption.ediv[1] = ediv[1];
   17ffc:	7873      	ldrb	r3, [r6, #1]
   17ffe:	f885 3082 	strb.w	r3, [r5, #130]	; 0x82
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   18002:	7923      	ldrb	r3, [r4, #4]
   18004:	f043 0303 	orr.w	r3, r3, #3
   18008:	7123      	strb	r3, [r4, #4]
			pdu_data_tx->len =
   1800a:	2301      	movs	r3, #1
   1800c:	7163      	strb	r3, [r4, #5]
			pdu_data_tx->payload.llctrl.opcode =
   1800e:	230a      	movs	r3, #10
   18010:	71e3      	strb	r3, [r4, #7]
   18012:	e7de      	b.n	17fd2 <ll_enc_req_send+0x7e>
		return 1;
   18014:	2301      	movs	r3, #1
   18016:	e7be      	b.n	17f96 <ll_enc_req_send+0x42>
	return 1;
   18018:	2301      	movs	r3, #1
   1801a:	e7bc      	b.n	17f96 <ll_enc_req_send+0x42>

void __weak ll_adv_scan_state_cb(u8_t bm)
{
   1801c:	4770      	bx	lr

0001801e <ll_adv_scan_state_cb>:

	k_delayed_work_cancel(&rpa_work);
}

void ll_adv_scan_state_cb(u8_t bm)
{
   1801e:	b508      	push	{r3, lr}
	if (bm) {
   18020:	b910      	cbnz	r0, 18028 <ll_adv_scan_state_cb+0xa>
		rpa_refresh_start();
	} else {
		rpa_refresh_stop();
   18022:	f000 fe5f 	bl	18ce4 <rpa_refresh_stop>
   18026:	bd08      	pop	{r3, pc}
		rpa_refresh_start();
   18028:	f000 fe48 	bl	18cbc <rpa_refresh_start>
   1802c:	bd08      	pop	{r3, pc}
	...

00018030 <radio_adv_enable>:
{
   18030:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   18034:	b08f      	sub	sp, #60	; 0x3c
   18036:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   1803a:	2202      	movs	r2, #2
   1803c:	920d      	str	r2, [sp, #52]	; 0x34
	if (_radio.advertiser.is_enabled) {
   1803e:	4aca      	ldr	r2, [pc, #808]	; (18368 <radio_adv_enable+0x338>)
   18040:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
   18044:	f012 0f01 	tst.w	r2, #1
   18048:	d003      	beq.n	18052 <radio_adv_enable+0x22>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1804a:	200c      	movs	r0, #12
}
   1804c:	b00f      	add	sp, #60	; 0x3c
   1804e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   18052:	461d      	mov	r5, r3
   18054:	460c      	mov	r4, r1
   18056:	4607      	mov	r7, r0
		&_radio.advertiser.adv_data.data[_radio.advertiser.adv_data.last][0];
   18058:	4bc3      	ldr	r3, [pc, #780]	; (18368 <radio_adv_enable+0x338>)
   1805a:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
	pdu_adv = (struct pdu_adv *)
   1805e:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   18062:	ebc2 02c1 	rsb	r2, r2, r1, lsl #3
   18066:	3220      	adds	r2, #32
   18068:	eb03 0802 	add.w	r8, r3, r2
	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
   1806c:	f898 3007 	ldrb.w	r3, [r8, #7]
   18070:	f003 030f 	and.w	r3, r3, #15
   18074:	2b01      	cmp	r3, #1
   18076:	d97f      	bls.n	18178 <radio_adv_enable+0x148>
		conn = NULL;
   18078:	2600      	movs	r6, #0
	_radio.advertiser.phy_p = phy_p;
   1807a:	4abb      	ldr	r2, [pc, #748]	; (18368 <radio_adv_enable+0x338>)
   1807c:	f892 3025 	ldrb.w	r3, [r2, #37]	; 0x25
   18080:	f367 0302 	bfi	r3, r7, #0, #3
	_radio.advertiser.chan_map = chan_map;
   18084:	a80e      	add	r0, sp, #56	; 0x38
   18086:	f810 1d09 	ldrb.w	r1, [r0, #-9]!
   1808a:	f361 03c5 	bfi	r3, r1, #3, #3
	_radio.advertiser.filter_policy = filter_policy;
   1808e:	f365 1387 	bfi	r3, r5, #6, #2
   18092:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
	_radio.advertiser.rl_idx = rl_idx;
   18096:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
   1809a:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
		_radio.ticks_active_to_start;
   1809e:	f8d2 3180 	ldr.w	r3, [r2, #384]	; 0x180
	_radio.advertiser.hdr.ticks_active_to_start =
   180a2:	6193      	str	r3, [r2, #24]
	_radio.advertiser.hdr.ticks_xtal_to_start =
   180a4:	2327      	movs	r3, #39	; 0x27
   180a6:	6153      	str	r3, [r2, #20]
	_radio.advertiser.hdr.ticks_preempt_to_start =
   180a8:	2300      	movs	r3, #0
   180aa:	61d3      	str	r3, [r2, #28]
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
   180ac:	2101      	movs	r1, #1
   180ae:	f7f6 fbe4 	bl	e87a <util_ones_count_get>
	if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
   180b2:	f898 5007 	ldrb.w	r5, [r8, #7]
   180b6:	f005 050f 	and.w	r5, r5, #15
   180ba:	2d01      	cmp	r5, #1
   180bc:	f000 8108 	beq.w	182d0 <radio_adv_enable+0x2a0>
	} else if (pdu_adv->type == PDU_ADV_TYPE_NONCONN_IND) {
   180c0:	2d02      	cmp	r5, #2
   180c2:	f000 8111 	beq.w	182e8 <radio_adv_enable+0x2b8>
			      152 + 376) * chan_cnt;
   180c6:	b280      	uxth	r0, r0
		ticks_slot = (RADIO_TICKER_START_PART_US + 376 + 152 + 176 +
   180c8:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   180cc:	ebc0 10c3 	rsb	r0, r0, r3, lsl #7
   180d0:	0080      	lsls	r0, r0, #2
   180d2:	b280      	uxth	r0, r0
	_radio.advertiser.hdr.ticks_slot = TICKER_US_TO_TICKS(ticks_slot);
   180d4:	a3a2      	add	r3, pc, #648	; (adr r3, 18360 <radio_adv_enable+0x330>)
   180d6:	e9d3 2300 	ldrd	r2, r3, [r3]
   180da:	49a4      	ldr	r1, [pc, #656]	; (1836c <radio_adv_enable+0x33c>)
   180dc:	fba0 0101 	umull	r0, r1, r0, r1
   180e0:	f7e9 f80c 	bl	10fc <__aeabi_uldivmod>
   180e4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   180e8:	4a9f      	ldr	r2, [pc, #636]	; (18368 <radio_adv_enable+0x338>)
   180ea:	6210      	str	r0, [r2, #32]
		_radio.advertiser.hdr.ticks_active_to_start;
   180ec:	6991      	ldr	r1, [r2, #24]
		_radio.advertiser.hdr.ticks_xtal_to_start :
   180ee:	6953      	ldr	r3, [r2, #20]
	ticks_slot_offset =
   180f0:	4299      	cmp	r1, r3
   180f2:	bf38      	it	cc
   180f4:	4619      	movcc	r1, r3
   180f6:	4688      	mov	r8, r1
	if ((pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
   180f8:	2d01      	cmp	r5, #1
   180fa:	f000 80ff 	beq.w	182fc <radio_adv_enable+0x2cc>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   180fe:	f7f8 f96f 	bl	103e0 <ticker_ticks_now_get>
   18102:	4607      	mov	r7, r0
				     TICKER_US_TO_TICKS((u64_t) interval * 625),
   18104:	b2a4      	uxth	r4, r4
   18106:	489a      	ldr	r0, [pc, #616]	; (18370 <radio_adv_enable+0x340>)
   18108:	fba4 0100 	umull	r0, r1, r4, r0
   1810c:	2391      	movs	r3, #145	; 0x91
   1810e:	fb03 1104 	mla	r1, r3, r4, r1
   18112:	a393      	add	r3, pc, #588	; (adr r3, 18360 <radio_adv_enable+0x330>)
   18114:	e9d3 2300 	ldrd	r2, r3, [r3]
   18118:	f7e8 fff0 	bl	10fc <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   1811c:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
				      _radio.advertiser.hdr.ticks_slot),
   18120:	4b91      	ldr	r3, [pc, #580]	; (18368 <radio_adv_enable+0x338>)
   18122:	6a1b      	ldr	r3, [r3, #32]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   18124:	4443      	add	r3, r8
   18126:	b29b      	uxth	r3, r3
		ret =
   18128:	a90d      	add	r1, sp, #52	; 0x34
   1812a:	9108      	str	r1, [sp, #32]
   1812c:	4991      	ldr	r1, [pc, #580]	; (18374 <radio_adv_enable+0x344>)
   1812e:	9107      	str	r1, [sp, #28]
   18130:	2000      	movs	r0, #0
   18132:	9006      	str	r0, [sp, #24]
   18134:	4990      	ldr	r1, [pc, #576]	; (18378 <radio_adv_enable+0x348>)
   18136:	9105      	str	r1, [sp, #20]
   18138:	9304      	str	r3, [sp, #16]
   1813a:	9003      	str	r0, [sp, #12]
   1813c:	9002      	str	r0, [sp, #8]
   1813e:	9201      	str	r2, [sp, #4]
   18140:	9000      	str	r0, [sp, #0]
   18142:	463b      	mov	r3, r7
   18144:	2205      	movs	r2, #5
   18146:	2103      	movs	r1, #3
   18148:	f7f7 ffe2 	bl	10110 <ticker_start>
	if (ret == TICKER_STATUS_BUSY) {
   1814c:	2802      	cmp	r0, #2
   1814e:	f000 813b 	beq.w	183c8 <radio_adv_enable+0x398>
	if (ret_cb == TICKER_STATUS_SUCCESS) {
   18152:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   18154:	2b00      	cmp	r3, #0
   18156:	f040 80f2 	bne.w	1833e <radio_adv_enable+0x30e>
		_radio.advertiser.is_enabled = 1;
   1815a:	4b83      	ldr	r3, [pc, #524]	; (18368 <radio_adv_enable+0x338>)
   1815c:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
   18160:	f042 0201 	orr.w	r2, r2, #1
   18164:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		if (!_radio.scanner.is_enabled) {
   18168:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
   1816c:	f013 0f01 	tst.w	r3, #1
   18170:	f000 812e 	beq.w	183d0 <radio_adv_enable+0x3a0>
		return 0;
   18174:	2000      	movs	r0, #0
   18176:	e769      	b.n	1804c <radio_adv_enable+0x1c>
		if (_radio.advertiser.conn) {
   18178:	4b7b      	ldr	r3, [pc, #492]	; (18368 <radio_adv_enable+0x338>)
   1817a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
   1817e:	b10b      	cbz	r3, 18184 <radio_adv_enable+0x154>
			return BT_HCI_ERR_CMD_DISALLOWED;
   18180:	200c      	movs	r0, #12
   18182:	e763      	b.n	1804c <radio_adv_enable+0x1c>
		link = mem_acquire(&_radio.link_rx_free);
   18184:	487d      	ldr	r0, [pc, #500]	; (1837c <radio_adv_enable+0x34c>)
   18186:	f7f6 faf4 	bl	e772 <mem_acquire>
		if (!link) {
   1818a:	4681      	mov	r9, r0
   1818c:	2800      	cmp	r0, #0
   1818e:	f000 8124 	beq.w	183da <radio_adv_enable+0x3aa>
		conn = mem_acquire(&_radio.conn_free);
   18192:	487b      	ldr	r0, [pc, #492]	; (18380 <radio_adv_enable+0x350>)
   18194:	f7f6 faed 	bl	e772 <mem_acquire>
		if (!conn) {
   18198:	4606      	mov	r6, r0
   1819a:	2800      	cmp	r0, #0
   1819c:	f000 8092 	beq.w	182c4 <radio_adv_enable+0x294>
		conn->handle = 0xFFFF;
   181a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
   181a4:	8403      	strh	r3, [r0, #32]
		conn->llcp_features = RADIO_BLE_FEAT;
   181a6:	f503 4384 	add.w	r3, r3, #16896	; 0x4200
   181aa:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
		conn->data_chan_sel = 0;
   181ae:	7f43      	ldrb	r3, [r0, #29]
   181b0:	f36f 1386 	bfc	r3, #6, #1
   181b4:	7743      	strb	r3, [r0, #29]
		conn->data_chan_use = 0;
   181b6:	2300      	movs	r3, #0
   181b8:	77c3      	strb	r3, [r0, #31]
		conn->event_counter = 0;
   181ba:	8443      	strh	r3, [r0, #34]	; 0x22
		conn->latency_prepare = 0;
   181bc:	8503      	strh	r3, [r0, #40]	; 0x28
		conn->latency_event = 0;
   181be:	8543      	strh	r3, [r0, #42]	; 0x2a
		conn->default_tx_octets = _radio.default_tx_octets;
   181c0:	4969      	ldr	r1, [pc, #420]	; (18368 <radio_adv_enable+0x338>)
   181c2:	f8b1 211e 	ldrh.w	r2, [r1, #286]	; 0x11e
   181c6:	8582      	strh	r2, [r0, #44]	; 0x2c
		conn->max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
   181c8:	221b      	movs	r2, #27
   181ca:	85c2      	strh	r2, [r0, #46]	; 0x2e
		conn->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
   181cc:	8602      	strh	r2, [r0, #48]	; 0x30
		conn->default_tx_time = _radio.default_tx_time;
   181ce:	f8b1 2120 	ldrh.w	r2, [r1, #288]	; 0x120
   181d2:	8642      	strh	r2, [r0, #50]	; 0x32
		conn->max_tx_time =
   181d4:	f44f 72a4 	mov.w	r2, #328	; 0x148
   181d8:	8682      	strh	r2, [r0, #52]	; 0x34
		conn->max_rx_time =
   181da:	86c2      	strh	r2, [r0, #54]	; 0x36
		conn->phy_pref_tx = _radio.default_phy_tx;
   181dc:	f891 0122 	ldrb.w	r0, [r1, #290]	; 0x122
   181e0:	f896 2038 	ldrb.w	r2, [r6, #56]	; 0x38
   181e4:	f360 0202 	bfi	r2, r0, #0, #3
		conn->phy_tx = BIT(0);
   181e8:	2001      	movs	r0, #1
   181ea:	f360 02c5 	bfi	r2, r0, #3, #3
		conn->phy_flags = 0;
   181ee:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
   181f2:	f363 12c7 	bfi	r2, r3, #7, #1
   181f6:	f886 2038 	strb.w	r2, [r6, #56]	; 0x38
		conn->phy_tx_time = BIT(0);
   181fa:	f896 2039 	ldrb.w	r2, [r6, #57]	; 0x39
   181fe:	f360 0202 	bfi	r2, r0, #0, #3
   18202:	f886 2039 	strb.w	r2, [r6, #57]	; 0x39
		conn->phy_pref_rx = _radio.default_phy_rx;
   18206:	f891 e124 	ldrb.w	lr, [r1, #292]	; 0x124
   1820a:	b2d2      	uxtb	r2, r2
   1820c:	f36e 02c5 	bfi	r2, lr, #3, #3
   18210:	f886 2039 	strb.w	r2, [r6, #57]	; 0x39
		conn->phy_rx = BIT(0);
   18214:	f896 203a 	ldrb.w	r2, [r6, #58]	; 0x3a
   18218:	f360 0202 	bfi	r2, r0, #0, #3
   1821c:	f886 203a 	strb.w	r2, [r6, #58]	; 0x3a
		conn->role = 1;
   18220:	7f72      	ldrb	r2, [r6, #29]
   18222:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   18226:	7772      	strb	r2, [r6, #29]
		conn->connect_expire = 6;
   18228:	2206      	movs	r2, #6
   1822a:	87b2      	strh	r2, [r6, #60]	; 0x3c
		conn->common.fex_valid = 0;
   1822c:	f896 2050 	ldrb.w	r2, [r6, #80]	; 0x50
		conn->slave.latency_cancel = 0;
   18230:	f002 02de 	and.w	r2, r2, #222	; 0xde
   18234:	f363 0241 	bfi	r2, r3, #1, #1
   18238:	f886 2050 	strb.w	r2, [r6, #80]	; 0x50
		conn->slave.window_widening_prepare_us = 0;
   1823c:	65f3      	str	r3, [r6, #92]	; 0x5c
		conn->slave.window_widening_event_us = 0;
   1823e:	6633      	str	r3, [r6, #96]	; 0x60
		conn->slave.ticks_to_offset = 0;
   18240:	6733      	str	r3, [r6, #112]	; 0x70
		conn->supervision_expire = 0;
   18242:	f8a6 3040 	strh.w	r3, [r6, #64]	; 0x40
		conn->procedure_expire = 0;
   18246:	f8a6 3044 	strh.w	r3, [r6, #68]	; 0x44
		conn->apto_expire = 0;
   1824a:	f8a6 304c 	strh.w	r3, [r6, #76]	; 0x4c
		conn->appto_expire = 0;
   1824e:	f8a6 3048 	strh.w	r3, [r6, #72]	; 0x48
		conn->llcp_req = 0;
   18252:	f886 3074 	strb.w	r3, [r6, #116]	; 0x74
		conn->llcp_ack = 0;
   18256:	f886 3075 	strb.w	r3, [r6, #117]	; 0x75
		conn->llcp_version.tx = 0;
   1825a:	f896 20a8 	ldrb.w	r2, [r6, #168]	; 0xa8
		conn->llcp_version.rx = 0;
   1825e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
   18262:	f363 0241 	bfi	r2, r3, #1, #1
   18266:	f886 20a8 	strb.w	r2, [r6, #168]	; 0xa8
		conn->llcp_terminate.req = 0;
   1826a:	f886 30b0 	strb.w	r3, [r6, #176]	; 0xb0
		conn->llcp_terminate.ack = 0;
   1826e:	f886 30b1 	strb.w	r3, [r6, #177]	; 0xb1
		conn->llcp_terminate.reason_peer = 0;
   18272:	f886 30b3 	strb.w	r3, [r6, #179]	; 0xb3
		conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link = link;
   18276:	f8c6 90b4 	str.w	r9, [r6, #180]	; 0xb4
		conn->llcp_conn_param.req = 0;
   1827a:	f886 30c0 	strb.w	r3, [r6, #192]	; 0xc0
		conn->llcp_conn_param.ack = 0;
   1827e:	f886 30c1 	strb.w	r3, [r6, #193]	; 0xc1
		conn->llcp_length.req = 0;
   18282:	f886 30e8 	strb.w	r3, [r6, #232]	; 0xe8
		conn->llcp_length.ack = 0;
   18286:	f886 30e9 	strb.w	r3, [r6, #233]	; 0xe9
		conn->llcp_phy.req = 0;
   1828a:	f886 30f4 	strb.w	r3, [r6, #244]	; 0xf4
		conn->llcp_phy.ack = 0;
   1828e:	f886 30f5 	strb.w	r3, [r6, #245]	; 0xf5
		conn->sn = 0;
   18292:	f896 20f8 	ldrb.w	r2, [r6, #248]	; 0xf8
		conn->empty = 0;
   18296:	f002 0280 	and.w	r2, r2, #128	; 0x80
   1829a:	f363 12c7 	bfi	r2, r3, #7, #1
   1829e:	f886 20f8 	strb.w	r2, [r6, #248]	; 0xf8
		conn->pkt_tx_head = NULL;
   182a2:	f8c6 313c 	str.w	r3, [r6, #316]	; 0x13c
		conn->pkt_tx_ctrl = NULL;
   182a6:	f8c6 3140 	str.w	r3, [r6, #320]	; 0x140
		conn->pkt_tx_ctrl_last = NULL;
   182aa:	f8c6 3144 	str.w	r3, [r6, #324]	; 0x144
		conn->pkt_tx_data = NULL;
   182ae:	f8c6 3148 	str.w	r3, [r6, #328]	; 0x148
		conn->pkt_tx_last = NULL;
   182b2:	f8c6 314c 	str.w	r3, [r6, #332]	; 0x14c
		conn->packet_tx_head_len = 0;
   182b6:	f886 3150 	strb.w	r3, [r6, #336]	; 0x150
		conn->packet_tx_head_offset = 0;
   182ba:	f886 3151 	strb.w	r3, [r6, #337]	; 0x151
		_radio.advertiser.conn = conn;
   182be:	f8c1 60c8 	str.w	r6, [r1, #200]	; 0xc8
   182c2:	e6da      	b.n	1807a <radio_adv_enable+0x4a>
			mem_release(link, &_radio.link_rx_free);
   182c4:	492d      	ldr	r1, [pc, #180]	; (1837c <radio_adv_enable+0x34c>)
   182c6:	4648      	mov	r0, r9
   182c8:	f7f6 fa6f 	bl	e7aa <mem_release>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   182cc:	2007      	movs	r0, #7
   182ce:	e6bd      	b.n	1804c <radio_adv_enable+0x1c>
		ticks_slot = ((RADIO_TICKER_START_PART_US + 176 + 152 + 40) *
   182d0:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   182d4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   182d8:	ebc0 00c3 	rsb	r0, r0, r3, lsl #3
   182dc:	0080      	lsls	r0, r0, #2
   182de:	b280      	uxth	r0, r0
   182e0:	f500 709c 	add.w	r0, r0, #312	; 0x138
   182e4:	b280      	uxth	r0, r0
   182e6:	e6f5      	b.n	180d4 <radio_adv_enable+0xa4>
		ticks_slot = (RADIO_TICKER_START_PART_US + 376) * chan_cnt;
   182e8:	b280      	uxth	r0, r0
   182ea:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   182ee:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   182f2:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   182f6:	0080      	lsls	r0, r0, #2
   182f8:	b280      	uxth	r0, r0
   182fa:	e6eb      	b.n	180d4 <radio_adv_enable+0xa4>
	if ((pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
   182fc:	2c00      	cmp	r4, #0
   182fe:	f47f aefe 	bne.w	180fe <radio_adv_enable+0xce>
		u32_t ticks_now = ticker_ticks_now_get();
   18302:	f7f8 f86d 	bl	103e0 <ticker_ticks_now_get>
   18306:	4604      	mov	r4, r0
				    _radio.advertiser.hdr.ticks_slot),
   18308:	4b17      	ldr	r3, [pc, #92]	; (18368 <radio_adv_enable+0x338>)
   1830a:	6a1b      	ldr	r3, [r3, #32]
		ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   1830c:	eb08 0203 	add.w	r2, r8, r3
   18310:	b293      	uxth	r3, r2
   18312:	a90d      	add	r1, sp, #52	; 0x34
   18314:	9108      	str	r1, [sp, #32]
   18316:	4917      	ldr	r1, [pc, #92]	; (18374 <radio_adv_enable+0x344>)
   18318:	9107      	str	r1, [sp, #28]
   1831a:	2000      	movs	r0, #0
   1831c:	9006      	str	r0, [sp, #24]
   1831e:	4916      	ldr	r1, [pc, #88]	; (18378 <radio_adv_enable+0x348>)
   18320:	9105      	str	r1, [sp, #20]
   18322:	9304      	str	r3, [sp, #16]
   18324:	9003      	str	r0, [sp, #12]
   18326:	9002      	str	r0, [sp, #8]
   18328:	9201      	str	r2, [sp, #4]
   1832a:	9000      	str	r0, [sp, #0]
   1832c:	4623      	mov	r3, r4
   1832e:	2205      	movs	r2, #5
   18330:	2103      	movs	r1, #3
   18332:	f7f7 feed 	bl	10110 <ticker_start>
		if (ret == TICKER_STATUS_BUSY) {
   18336:	2802      	cmp	r0, #2
   18338:	d027      	beq.n	1838a <radio_adv_enable+0x35a>
		if (ret_cb != TICKER_STATUS_SUCCESS) {
   1833a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1833c:	b34b      	cbz	r3, 18392 <radio_adv_enable+0x362>
	if (conn) {
   1833e:	2e00      	cmp	r6, #0
   18340:	d04d      	beq.n	183de <radio_adv_enable+0x3ae>
		mem_release(conn->llcp_terminate.radio_pdu_node_rx.hdr.
   18342:	4c09      	ldr	r4, [pc, #36]	; (18368 <radio_adv_enable+0x338>)
   18344:	f504 71a2 	add.w	r1, r4, #324	; 0x144
   18348:	f8d6 00b4 	ldr.w	r0, [r6, #180]	; 0xb4
   1834c:	f7f6 fa2d 	bl	e7aa <mem_release>
		mem_release(conn, &_radio.conn_free);
   18350:	f504 7184 	add.w	r1, r4, #264	; 0x108
   18354:	4630      	mov	r0, r6
   18356:	f7f6 fa28 	bl	e7aa <mem_release>
	return BT_HCI_ERR_CMD_DISALLOWED;
   1835a:	200c      	movs	r0, #12
   1835c:	e676      	b.n	1804c <radio_adv_enable+0x1c>
   1835e:	bf00      	nop
   18360:	1afd498d 	.word	0x1afd498d
   18364:	00000007 	.word	0x00000007
   18368:	20000e84 	.word	0x20000e84
   1836c:	3b9aca00 	.word	0x3b9aca00
   18370:	84e72a00 	.word	0x84e72a00
   18374:	00010af5 	.word	0x00010af5
   18378:	0001447d 	.word	0x0001447d
   1837c:	20000fc8 	.word	0x20000fc8
   18380:	20000f8c 	.word	0x20000f8c
   18384:	bf20      	wfe
  __ASM volatile ("sev");
   18386:	bf40      	sev
  __ASM volatile ("wfe");
   18388:	bf20      	wfe
			while (ret_cb == TICKER_STATUS_BUSY) {
   1838a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1838c:	2b02      	cmp	r3, #2
   1838e:	d0f9      	beq.n	18384 <radio_adv_enable+0x354>
   18390:	e7d3      	b.n	1833a <radio_adv_enable+0x30a>
		ret_cb = TICKER_STATUS_BUSY;
   18392:	ab0e      	add	r3, sp, #56	; 0x38
   18394:	2202      	movs	r2, #2
   18396:	f843 2d04 	str.w	r2, [r3, #-4]!
		ret =
   1839a:	9308      	str	r3, [sp, #32]
   1839c:	4b11      	ldr	r3, [pc, #68]	; (183e4 <radio_adv_enable+0x3b4>)
   1839e:	9307      	str	r3, [sp, #28]
   183a0:	2000      	movs	r0, #0
   183a2:	9006      	str	r0, [sp, #24]
   183a4:	4b10      	ldr	r3, [pc, #64]	; (183e8 <radio_adv_enable+0x3b8>)
   183a6:	9305      	str	r3, [sp, #20]
   183a8:	9004      	str	r0, [sp, #16]
   183aa:	9003      	str	r0, [sp, #12]
   183ac:	9002      	str	r0, [sp, #8]
   183ae:	9001      	str	r0, [sp, #4]
   183b0:	f24a 33fe 	movw	r3, #41982	; 0xa3fe
   183b4:	9300      	str	r3, [sp, #0]
   183b6:	4623      	mov	r3, r4
   183b8:	2203      	movs	r2, #3
   183ba:	4611      	mov	r1, r2
   183bc:	f7f7 fea8 	bl	10110 <ticker_start>
	    !interval) {
   183c0:	e6c4      	b.n	1814c <radio_adv_enable+0x11c>
   183c2:	bf20      	wfe
  __ASM volatile ("sev");
   183c4:	bf40      	sev
  __ASM volatile ("wfe");
   183c6:	bf20      	wfe
		while (ret_cb == TICKER_STATUS_BUSY) {
   183c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   183ca:	2b02      	cmp	r3, #2
   183cc:	d0f9      	beq.n	183c2 <radio_adv_enable+0x392>
   183ce:	e6c0      	b.n	18152 <radio_adv_enable+0x122>
			ll_adv_scan_state_cb(BIT(0));
   183d0:	2001      	movs	r0, #1
   183d2:	f7ff fe24 	bl	1801e <ll_adv_scan_state_cb>
		return 0;
   183d6:	2000      	movs	r0, #0
   183d8:	e638      	b.n	1804c <radio_adv_enable+0x1c>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   183da:	2007      	movs	r0, #7
   183dc:	e636      	b.n	1804c <radio_adv_enable+0x1c>
	return BT_HCI_ERR_CMD_DISALLOWED;
   183de:	200c      	movs	r0, #12
   183e0:	e634      	b.n	1804c <radio_adv_enable+0x1c>
   183e2:	bf00      	nop
   183e4:	00010af5 	.word	0x00010af5
   183e8:	00011671 	.word	0x00011671

000183ec <radio_adv_disable>:
{
   183ec:	b570      	push	{r4, r5, r6, lr}
	status = role_disable(RADIO_TICKER_ID_ADV,
   183ee:	2103      	movs	r1, #3
   183f0:	2005      	movs	r0, #5
   183f2:	f7f8 ffc1 	bl	11378 <role_disable>
	if (!status) {
   183f6:	4604      	mov	r4, r0
   183f8:	b9f0      	cbnz	r0, 18438 <radio_adv_disable+0x4c>
		_radio.advertiser.is_enabled = 0;
   183fa:	4b13      	ldr	r3, [pc, #76]	; (18448 <radio_adv_disable+0x5c>)
   183fc:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
   18400:	f36f 0200 	bfc	r2, #0, #1
   18404:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		if (!_radio.scanner.is_enabled) {
   18408:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
   1840c:	f013 0f01 	tst.w	r3, #1
   18410:	d016      	beq.n	18440 <radio_adv_disable+0x54>
		conn = _radio.advertiser.conn;
   18412:	4b0d      	ldr	r3, [pc, #52]	; (18448 <radio_adv_disable+0x5c>)
   18414:	f8d3 50c8 	ldr.w	r5, [r3, #200]	; 0xc8
		if (conn) {
   18418:	b175      	cbz	r5, 18438 <radio_adv_disable+0x4c>
			_radio.advertiser.conn = NULL;
   1841a:	461e      	mov	r6, r3
   1841c:	2300      	movs	r3, #0
   1841e:	f8c6 30c8 	str.w	r3, [r6, #200]	; 0xc8
			mem_release(conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link,
   18422:	f506 71a2 	add.w	r1, r6, #324	; 0x144
   18426:	f8d5 00b4 	ldr.w	r0, [r5, #180]	; 0xb4
   1842a:	f7f6 f9be 	bl	e7aa <mem_release>
			mem_release(conn, &_radio.conn_free);
   1842e:	f506 7184 	add.w	r1, r6, #264	; 0x108
   18432:	4628      	mov	r0, r5
   18434:	f7f6 f9b9 	bl	e7aa <mem_release>
	return status ? BT_HCI_ERR_CMD_DISALLOWED : 0;
   18438:	b104      	cbz	r4, 1843c <radio_adv_disable+0x50>
   1843a:	240c      	movs	r4, #12
}
   1843c:	4620      	mov	r0, r4
   1843e:	bd70      	pop	{r4, r5, r6, pc}
			ll_adv_scan_state_cb(0);
   18440:	f7ff fded 	bl	1801e <ll_adv_scan_state_cb>
   18444:	e7e5      	b.n	18412 <radio_adv_disable+0x26>
   18446:	bf00      	nop
   18448:	20000e84 	.word	0x20000e84
   1844c:	00000000 	.word	0x00000000

00018450 <radio_scan_enable>:
{
   18450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18454:	b08f      	sub	sp, #60	; 0x3c
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   18456:	2402      	movs	r4, #2
   18458:	940d      	str	r4, [sp, #52]	; 0x34
	if (_radio.scanner.is_enabled) {
   1845a:	4c77      	ldr	r4, [pc, #476]	; (18638 <radio_scan_enable+0x1e8>)
   1845c:	f894 40dc 	ldrb.w	r4, [r4, #220]	; 0xdc
   18460:	f014 0f01 	tst.w	r4, #1
   18464:	d003      	beq.n	1846e <radio_scan_enable+0x1e>
		return BT_HCI_ERR_CMD_DISALLOWED;
   18466:	200c      	movs	r0, #12
}
   18468:	b00f      	add	sp, #60	; 0x3c
   1846a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1846e:	461d      	mov	r5, r3
   18470:	4617      	mov	r7, r2
   18472:	460e      	mov	r6, r1
	_radio.scanner.type = type;
   18474:	4c70      	ldr	r4, [pc, #448]	; (18638 <radio_scan_enable+0x1e8>)
   18476:	f894 30dd 	ldrb.w	r3, [r4, #221]	; 0xdd
   1847a:	f360 03c3 	bfi	r3, r0, #3, #1
	_radio.scanner.phy = type >> 1;
   1847e:	f3c0 0042 	ubfx	r0, r0, #1, #3
   18482:	f360 0302 	bfi	r3, r0, #0, #3
	_radio.scanner.rpa_gen = rpa_gen;
   18486:	f894 20de 	ldrb.w	r2, [r4, #222]	; 0xde
   1848a:	f89d 1068 	ldrb.w	r1, [sp, #104]	; 0x68
   1848e:	f361 0200 	bfi	r2, r1, #0, #1
   18492:	f884 20de 	strb.w	r2, [r4, #222]	; 0xde
	_radio.scanner.rl_idx = rl_idx;
   18496:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
   1849a:	f884 20df 	strb.w	r2, [r4, #223]	; 0xdf
	_radio.scanner.init_addr_type = init_addr_type;
   1849e:	f366 13c7 	bfi	r3, r6, #7, #1
   184a2:	f884 30dd 	strb.w	r3, [r4, #221]	; 0xdd
	memcpy(&_radio.scanner.init_addr[0], init_addr, BDADDR_SIZE);
   184a6:	2206      	movs	r2, #6
   184a8:	4639      	mov	r1, r7
   184aa:	f104 00e0 	add.w	r0, r4, #224	; 0xe0
   184ae:	f7e7 ff07 	bl	2c0 <memcpy>
		TICKER_US_TO_TICKS((u64_t) window * 625);
   184b2:	f8bd 2060 	ldrh.w	r2, [sp, #96]	; 0x60
   184b6:	4e61      	ldr	r6, [pc, #388]	; (1863c <radio_scan_enable+0x1ec>)
   184b8:	f04f 0a91 	mov.w	sl, #145	; 0x91
   184bc:	fba2 0106 	umull	r0, r1, r2, r6
   184c0:	fb0a 1102 	mla	r1, sl, r2, r1
   184c4:	a35a      	add	r3, pc, #360	; (adr r3, 18630 <radio_scan_enable+0x1e0>)
   184c6:	e9d3 2300 	ldrd	r2, r3, [r3]
   184ca:	f7e8 fe17 	bl	10fc <__aeabi_uldivmod>
   184ce:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	_radio.scanner.ticks_window =
   184d2:	f8c4 00ec 	str.w	r0, [r4, #236]	; 0xec
	_radio.scanner.filter_policy = filter_policy;
   184d6:	f894 30dd 	ldrb.w	r3, [r4, #221]	; 0xdd
   184da:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
   184de:	f362 1305 	bfi	r3, r2, #4, #2
   184e2:	f884 30dd 	strb.w	r3, [r4, #221]	; 0xdd
		_radio.ticks_active_to_start;
   184e6:	f8d4 9180 	ldr.w	r9, [r4, #384]	; 0x180
	_radio.scanner.hdr.ticks_active_to_start =
   184ea:	f8c4 90d0 	str.w	r9, [r4, #208]	; 0xd0
	_radio.scanner.hdr.ticks_xtal_to_start =
   184ee:	2327      	movs	r3, #39	; 0x27
   184f0:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
	_radio.scanner.hdr.ticks_preempt_to_start =
   184f4:	2300      	movs	r3, #0
   184f6:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
		_radio.scanner.ticks_window +
   184fa:	f100 0809 	add.w	r8, r0, #9
	_radio.scanner.hdr.ticks_slot =
   184fe:	f8c4 80d8 	str.w	r8, [r4, #216]	; 0xd8
	ticks_interval = TICKER_US_TO_TICKS((u64_t) interval * 625);
   18502:	b2aa      	uxth	r2, r5
   18504:	fba2 6706 	umull	r6, r7, r2, r6
   18508:	fb0a 7702 	mla	r7, sl, r2, r7
   1850c:	a348      	add	r3, pc, #288	; (adr r3, 18630 <radio_scan_enable+0x1e0>)
   1850e:	e9d3 2300 	ldrd	r2, r3, [r3]
   18512:	4630      	mov	r0, r6
   18514:	4639      	mov	r1, r7
   18516:	f7e8 fdf1 	bl	10fc <__aeabi_uldivmod>
   1851a:	4604      	mov	r4, r0
   1851c:	f020 4a7f 	bic.w	sl, r0, #4278190080	; 0xff000000
	    (ticks_interval -
   18520:	f1aa 0327 	sub.w	r3, sl, #39	; 0x27
	if (_radio.scanner.hdr.ticks_slot >
   18524:	4598      	cmp	r8, r3
   18526:	d902      	bls.n	1852e <radio_scan_enable+0xde>
		_radio.scanner.hdr.ticks_slot =
   18528:	4a43      	ldr	r2, [pc, #268]	; (18638 <radio_scan_enable+0x1e8>)
   1852a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
	ticks_slot_offset =
   1852e:	f1b9 0f27 	cmp.w	r9, #39	; 0x27
   18532:	bf38      	it	cc
   18534:	f04f 0927 	movcc.w	r9, #39	; 0x27
	ticks_anchor = ticker_ticks_now_get();
   18538:	f7f7 ff52 	bl	103e0 <ticker_ticks_now_get>
   1853c:	4683      	mov	fp, r0
	if ((_radio.scanner.conn) ||
   1853e:	4b3e      	ldr	r3, [pc, #248]	; (18638 <radio_scan_enable+0x1e8>)
   18540:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
   18544:	2b00      	cmp	r3, #0
   18546:	d045      	beq.n	185d4 <radio_scan_enable+0x184>
		us_offset = 0;
   18548:	2300      	movs	r3, #0
   1854a:	930c      	str	r3, [sp, #48]	; 0x30
			   (ticks_anchor + TICKER_US_TO_TICKS(us_offset)), 0,
   1854c:	f04f 0800 	mov.w	r8, #0
   18550:	a337      	add	r3, pc, #220	; (adr r3, 18630 <radio_scan_enable+0x1e0>)
   18552:	e9d3 2300 	ldrd	r2, r3, [r3]
   18556:	493a      	ldr	r1, [pc, #232]	; (18640 <radio_scan_enable+0x1f0>)
   18558:	980c      	ldr	r0, [sp, #48]	; 0x30
   1855a:	fba0 0101 	umull	r0, r1, r0, r1
   1855e:	f7e8 fdcd 	bl	10fc <__aeabi_uldivmod>
   18562:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   18566:	4483      	add	fp, r0
			   TICKER_REMAINDER((u64_t) interval * 625),
   18568:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
   1856c:	2500      	movs	r5, #0
   1856e:	4835      	ldr	r0, [pc, #212]	; (18644 <radio_scan_enable+0x1f4>)
   18570:	2307      	movs	r3, #7
   18572:	fb03 f304 	mul.w	r3, r3, r4
   18576:	fb00 3305 	mla	r3, r0, r5, r3
   1857a:	fba4 0100 	umull	r0, r1, r4, r0
   1857e:	4419      	add	r1, r3
   18580:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   18584:	2300      	movs	r3, #0
   18586:	1a30      	subs	r0, r6, r0
   18588:	eb67 0101 	sbc.w	r1, r7, r1
   1858c:	f7e8 fdb6 	bl	10fc <__aeabi_uldivmod>
			    _radio.scanner.hdr.ticks_slot),
   18590:	4b29      	ldr	r3, [pc, #164]	; (18638 <radio_scan_enable+0x1e8>)
   18592:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   18596:	4499      	add	r9, r3
   18598:	fa1f f389 	uxth.w	r3, r9
   1859c:	aa0d      	add	r2, sp, #52	; 0x34
   1859e:	9208      	str	r2, [sp, #32]
   185a0:	4a29      	ldr	r2, [pc, #164]	; (18648 <radio_scan_enable+0x1f8>)
   185a2:	9207      	str	r2, [sp, #28]
   185a4:	f8cd 8018 	str.w	r8, [sp, #24]
   185a8:	4a28      	ldr	r2, [pc, #160]	; (1864c <radio_scan_enable+0x1fc>)
   185aa:	9205      	str	r2, [sp, #20]
   185ac:	9304      	str	r3, [sp, #16]
   185ae:	f8cd 800c 	str.w	r8, [sp, #12]
   185b2:	9002      	str	r0, [sp, #8]
   185b4:	f8cd a004 	str.w	sl, [sp, #4]
   185b8:	f8cd 8000 	str.w	r8, [sp]
   185bc:	465b      	mov	r3, fp
   185be:	2206      	movs	r2, #6
   185c0:	2103      	movs	r1, #3
   185c2:	4640      	mov	r0, r8
   185c4:	f7f7 fda4 	bl	10110 <ticker_start>
	if (ret == TICKER_STATUS_BUSY) {
   185c8:	2802      	cmp	r0, #2
   185ca:	d017      	beq.n	185fc <radio_scan_enable+0x1ac>
	if (ret_cb != TICKER_STATUS_SUCCESS) {
   185cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   185ce:	b1cb      	cbz	r3, 18604 <radio_scan_enable+0x1b4>
		return BT_HCI_ERR_CMD_DISALLOWED;
   185d0:	200c      	movs	r0, #12
   185d2:	e749      	b.n	18468 <radio_scan_enable+0x18>
		u32_t ticks_ref = 0;
   185d4:	2300      	movs	r3, #0
   185d6:	930b      	str	r3, [sp, #44]	; 0x2c
						_radio.scanner.hdr.ticks_slot),
   185d8:	4b17      	ldr	r3, [pc, #92]	; (18638 <radio_scan_enable+0x1e8>)
   185da:	f8d3 10d8 	ldr.w	r1, [r3, #216]	; 0xd8
		sched_after_mstr_free_slot_get(RADIO_TICKER_USER_ID_APP,
   185de:	ab0c      	add	r3, sp, #48	; 0x30
   185e0:	aa0b      	add	r2, sp, #44	; 0x2c
   185e2:	4449      	add	r1, r9
   185e4:	2003      	movs	r0, #3
   185e6:	f7f9 ff63 	bl	124b0 <sched_after_mstr_free_slot_get>
		if (us_offset) {
   185ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   185ec:	2b00      	cmp	r3, #0
   185ee:	d0ad      	beq.n	1854c <radio_scan_enable+0xfc>
			ticks_anchor = ticks_ref;
   185f0:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
   185f4:	e7aa      	b.n	1854c <radio_scan_enable+0xfc>
   185f6:	bf20      	wfe
  __ASM volatile ("sev");
   185f8:	bf40      	sev
  __ASM volatile ("wfe");
   185fa:	bf20      	wfe
		while (ret_cb == TICKER_STATUS_BUSY) {
   185fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   185fe:	2b02      	cmp	r3, #2
   18600:	d0f9      	beq.n	185f6 <radio_scan_enable+0x1a6>
   18602:	e7e3      	b.n	185cc <radio_scan_enable+0x17c>
	_radio.scanner.is_enabled = 1;
   18604:	4b0c      	ldr	r3, [pc, #48]	; (18638 <radio_scan_enable+0x1e8>)
   18606:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
   1860a:	f042 0201 	orr.w	r2, r2, #1
   1860e:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
	if (!_radio.advertiser.is_enabled) {
   18612:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   18616:	f013 0f01 	tst.w	r3, #1
   1861a:	d001      	beq.n	18620 <radio_scan_enable+0x1d0>
	return 0;
   1861c:	2000      	movs	r0, #0
   1861e:	e723      	b.n	18468 <radio_scan_enable+0x18>
		ll_adv_scan_state_cb(BIT(1));
   18620:	2002      	movs	r0, #2
   18622:	f7ff fcfc 	bl	1801e <ll_adv_scan_state_cb>
	return 0;
   18626:	2000      	movs	r0, #0
   18628:	e71e      	b.n	18468 <radio_scan_enable+0x18>
   1862a:	bf00      	nop
   1862c:	f3af 8000 	nop.w
   18630:	1afd498d 	.word	0x1afd498d
   18634:	00000007 	.word	0x00000007
   18638:	20000e84 	.word	0x20000e84
   1863c:	84e72a00 	.word	0x84e72a00
   18640:	3b9aca00 	.word	0x3b9aca00
   18644:	1afd498d 	.word	0x1afd498d
   18648:	00010af5 	.word	0x00010af5
   1864c:	00015a2d 	.word	0x00015a2d

00018650 <radio_scan_disable>:
{
   18650:	b570      	push	{r4, r5, r6, lr}
	status = role_disable(RADIO_TICKER_ID_SCAN,
   18652:	2104      	movs	r1, #4
   18654:	2006      	movs	r0, #6
   18656:	f7f8 fe8f 	bl	11378 <role_disable>
	if (!status) {
   1865a:	4604      	mov	r4, r0
   1865c:	b9f0      	cbnz	r0, 1869c <radio_scan_disable+0x4c>
		_radio.scanner.is_enabled = 0;
   1865e:	4b13      	ldr	r3, [pc, #76]	; (186ac <radio_scan_disable+0x5c>)
   18660:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
   18664:	f36f 0200 	bfc	r2, #0, #1
   18668:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
		if (!_radio.advertiser.is_enabled) {
   1866c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   18670:	f013 0f01 	tst.w	r3, #1
   18674:	d016      	beq.n	186a4 <radio_scan_disable+0x54>
		conn = _radio.scanner.conn;
   18676:	4b0d      	ldr	r3, [pc, #52]	; (186ac <radio_scan_disable+0x5c>)
   18678:	f8d3 50fc 	ldr.w	r5, [r3, #252]	; 0xfc
		if (conn) {
   1867c:	b175      	cbz	r5, 1869c <radio_scan_disable+0x4c>
			_radio.scanner.conn = NULL;
   1867e:	461e      	mov	r6, r3
   18680:	2300      	movs	r3, #0
   18682:	f8c6 30fc 	str.w	r3, [r6, #252]	; 0xfc
			mem_release(conn->llcp_terminate.
   18686:	f506 71a2 	add.w	r1, r6, #324	; 0x144
   1868a:	f8d5 00b4 	ldr.w	r0, [r5, #180]	; 0xb4
   1868e:	f7f6 f88c 	bl	e7aa <mem_release>
			mem_release(conn, &_radio.conn_free);
   18692:	f506 7184 	add.w	r1, r6, #264	; 0x108
   18696:	4628      	mov	r0, r5
   18698:	f7f6 f887 	bl	e7aa <mem_release>
	return status ? BT_HCI_ERR_CMD_DISALLOWED : 0;
   1869c:	b104      	cbz	r4, 186a0 <radio_scan_disable+0x50>
   1869e:	240c      	movs	r4, #12
}
   186a0:	4620      	mov	r0, r4
   186a2:	bd70      	pop	{r4, r5, r6, pc}
			ll_adv_scan_state_cb(0);
   186a4:	f7ff fcbb 	bl	1801e <ll_adv_scan_state_cb>
   186a8:	e7e5      	b.n	18676 <radio_scan_disable+0x26>
   186aa:	bf00      	nop
   186ac:	20000e84 	.word	0x20000e84

000186b0 <ll_connect_disable>:
{
   186b0:	b508      	push	{r3, lr}
	if (_radio.scanner.conn == 0) {
   186b2:	4b04      	ldr	r3, [pc, #16]	; (186c4 <ll_connect_disable+0x14>)
   186b4:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
   186b8:	b113      	cbz	r3, 186c0 <ll_connect_disable+0x10>
	status = radio_scan_disable();
   186ba:	f7ff ffc9 	bl	18650 <radio_scan_disable>
	return status;
   186be:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   186c0:	200c      	movs	r0, #12
}
   186c2:	bd08      	pop	{r3, pc}
   186c4:	20000e84 	.word	0x20000e84

000186c8 <radio_rx_dequeue>:
{
   186c8:	b530      	push	{r4, r5, lr}
   186ca:	b083      	sub	sp, #12
	struct radio_pdu_node_rx *radio_pdu_node_rx = NULL;
   186cc:	aa02      	add	r2, sp, #8
   186ce:	2300      	movs	r3, #0
   186d0:	f842 3d04 	str.w	r3, [r2, #-4]!
	link = memq_dequeue(_radio.link_rx_tail, &_radio.link_rx_head,
   186d4:	4947      	ldr	r1, [pc, #284]	; (187f4 <radio_rx_dequeue+0x12c>)
   186d6:	f8d1 014c 	ldr.w	r0, [r1, #332]	; 0x14c
   186da:	f501 71a4 	add.w	r1, r1, #328	; 0x148
   186de:	f7f6 f8c0 	bl	e862 <memq_dequeue>
	LL_ASSERT(link);
   186e2:	b178      	cbz	r0, 18704 <radio_rx_dequeue+0x3c>
	mem_release(link, &_radio.link_rx_free);
   186e4:	4944      	ldr	r1, [pc, #272]	; (187f8 <radio_rx_dequeue+0x130>)
   186e6:	f7f6 f860 	bl	e7aa <mem_release>
	switch (radio_pdu_node_rx->hdr.type) {
   186ea:	9a01      	ldr	r2, [sp, #4]
   186ec:	7913      	ldrb	r3, [r2, #4]
   186ee:	3b01      	subs	r3, #1
   186f0:	2b0b      	cmp	r3, #11
   186f2:	d824      	bhi.n	1873e <radio_rx_dequeue+0x76>
   186f4:	e8df f003 	tbb	[pc, r3]
   186f8:	0c0c0c0c 	.word	0x0c0c0c0c
   186fc:	0c180c0c 	.word	0x0c180c0c
   18700:	0c0c0c0c 	.word	0x0c0c0c0c
	LL_ASSERT(link);
   18704:	4040      	eors	r0, r0
   18706:	f380 8811 	msr	BASEPRI, r0
   1870a:	f04f 0004 	mov.w	r0, #4
   1870e:	df02      	svc	2
		LL_ASSERT(_radio.link_rx_data_quota <
   18710:	4938      	ldr	r1, [pc, #224]	; (187f4 <radio_rx_dequeue+0x12c>)
   18712:	f891 3150 	ldrb.w	r3, [r1, #336]	; 0x150
   18716:	f891 113c 	ldrb.w	r1, [r1, #316]	; 0x13c
   1871a:	3901      	subs	r1, #1
   1871c:	428b      	cmp	r3, r1
   1871e:	da08      	bge.n	18732 <radio_rx_dequeue+0x6a>
		_radio.link_rx_data_quota++;
   18720:	3301      	adds	r3, #1
   18722:	4934      	ldr	r1, [pc, #208]	; (187f4 <radio_rx_dequeue+0x12c>)
   18724:	f881 3150 	strb.w	r3, [r1, #336]	; 0x150
	if (radio_pdu_node_rx->hdr.type == NODE_RX_TYPE_CONNECTION) {
   18728:	7913      	ldrb	r3, [r2, #4]
   1872a:	2b06      	cmp	r3, #6
   1872c:	d00d      	beq.n	1874a <radio_rx_dequeue+0x82>
}
   1872e:	b003      	add	sp, #12
   18730:	bd30      	pop	{r4, r5, pc}
		LL_ASSERT(_radio.link_rx_data_quota <
   18732:	4040      	eors	r0, r0
   18734:	f380 8811 	msr	BASEPRI, r0
   18738:	f04f 0004 	mov.w	r0, #4
   1873c:	df02      	svc	2
		LL_ASSERT(0);
   1873e:	4040      	eors	r0, r0
   18740:	f380 8811 	msr	BASEPRI, r0
   18744:	f04f 0004 	mov.w	r0, #4
   18748:	df02      	svc	2
		if ((radio_le_conn_cmplt->status == 0x3c) ||
   1874a:	7ad3      	ldrb	r3, [r2, #11]
   1874c:	2b3c      	cmp	r3, #60	; 0x3c
   1874e:	d002      	beq.n	18756 <radio_rx_dequeue+0x8e>
		    radio_le_conn_cmplt->role) {
   18750:	7b12      	ldrb	r2, [r2, #12]
		if ((radio_le_conn_cmplt->status == 0x3c) ||
   18752:	2a00      	cmp	r2, #0
   18754:	d039      	beq.n	187ca <radio_rx_dequeue+0x102>
			if (radio_le_conn_cmplt->status == 0x3c) {
   18756:	2b3c      	cmp	r3, #60	; 0x3c
   18758:	d02a      	beq.n	187b0 <radio_rx_dequeue+0xe8>
		struct connection *conn = NULL;
   1875a:	2400      	movs	r4, #0
			LL_ASSERT(_radio.advertiser.is_enabled);
   1875c:	4b25      	ldr	r3, [pc, #148]	; (187f4 <radio_rx_dequeue+0x12c>)
   1875e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   18762:	f013 0f01 	tst.w	r3, #1
   18766:	d02a      	beq.n	187be <radio_rx_dequeue+0xf6>
			_radio.advertiser.is_enabled = 0;
   18768:	4b22      	ldr	r3, [pc, #136]	; (187f4 <radio_rx_dequeue+0x12c>)
   1876a:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
   1876e:	f36f 0200 	bfc	r2, #0, #1
   18772:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		if (conn) {
   18776:	b15c      	cbz	r4, 18790 <radio_rx_dequeue+0xc8>
			mem_release(node_rx->hdr.onion.link,
   18778:	4d1e      	ldr	r5, [pc, #120]	; (187f4 <radio_rx_dequeue+0x12c>)
   1877a:	f505 71a2 	add.w	r1, r5, #324	; 0x144
   1877e:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   18782:	f7f6 f812 	bl	e7aa <mem_release>
			mem_release(conn, &_radio.conn_free);
   18786:	f505 7184 	add.w	r1, r5, #264	; 0x108
   1878a:	4620      	mov	r0, r4
   1878c:	f7f6 f80d 	bl	e7aa <mem_release>
		bm = ((u8_t)_radio.scanner.is_enabled << 1) |
   18790:	4b18      	ldr	r3, [pc, #96]	; (187f4 <radio_rx_dequeue+0x12c>)
   18792:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
   18796:	f002 0201 	and.w	r2, r2, #1
		     _radio.advertiser.is_enabled;
   1879a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   1879e:	f003 0301 	and.w	r3, r3, #1
		if (!bm) {
   187a2:	ea53 0342 	orrs.w	r3, r3, r2, lsl #1
   187a6:	d1c2      	bne.n	1872e <radio_rx_dequeue+0x66>
			ll_adv_scan_state_cb(0);
   187a8:	2000      	movs	r0, #0
   187aa:	f7ff fc38 	bl	1801e <ll_adv_scan_state_cb>
}
   187ae:	e7be      	b.n	1872e <radio_rx_dequeue+0x66>
				conn = _radio.advertiser.conn;
   187b0:	4b10      	ldr	r3, [pc, #64]	; (187f4 <radio_rx_dequeue+0x12c>)
   187b2:	f8d3 40c8 	ldr.w	r4, [r3, #200]	; 0xc8
				_radio.advertiser.conn = NULL;
   187b6:	2200      	movs	r2, #0
   187b8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
   187bc:	e7ce      	b.n	1875c <radio_rx_dequeue+0x94>
			LL_ASSERT(_radio.advertiser.is_enabled);
   187be:	4040      	eors	r0, r0
   187c0:	f380 8811 	msr	BASEPRI, r0
   187c4:	f04f 0004 	mov.w	r0, #4
   187c8:	df02      	svc	2
			LL_ASSERT(_radio.scanner.is_enabled);
   187ca:	4b0a      	ldr	r3, [pc, #40]	; (187f4 <radio_rx_dequeue+0x12c>)
   187cc:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
   187d0:	f013 0f01 	tst.w	r3, #1
   187d4:	d008      	beq.n	187e8 <radio_rx_dequeue+0x120>
			_radio.scanner.is_enabled = 0;
   187d6:	4b07      	ldr	r3, [pc, #28]	; (187f4 <radio_rx_dequeue+0x12c>)
   187d8:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
   187dc:	f36f 0200 	bfc	r2, #0, #1
   187e0:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
		struct connection *conn = NULL;
   187e4:	2400      	movs	r4, #0
   187e6:	e7c6      	b.n	18776 <radio_rx_dequeue+0xae>
			LL_ASSERT(_radio.scanner.is_enabled);
   187e8:	4040      	eors	r0, r0
   187ea:	f380 8811 	msr	BASEPRI, r0
   187ee:	f04f 0004 	mov.w	r0, #4
   187f2:	df02      	svc	2
   187f4:	20000e84 	.word	0x20000e84
   187f8:	20000fc8 	.word	0x20000fc8

000187fc <radio_nrf5_isr>:
void radio_event_callback(void)
{
	k_sem_give(sem_recv);
}

ISR_DIRECT_DECLARE(radio_nrf5_isr)
   187fc:	4668      	mov	r0, sp
   187fe:	f020 0107 	bic.w	r1, r0, #7
   18802:	468d      	mov	sp, r1
   18804:	b501      	push	{r0, lr}
{
	isr_radio();
   18806:	f7f6 f8e3 	bl	e9d0 <isr_radio>

	ISR_DIRECT_PM();
   1880a:	f00e fb75 	bl	26ef8 <_arch_isr_direct_pm>
extern void _IntExit(void);

static inline void _arch_isr_direct_footer(int maybe_swap)
{
	if (maybe_swap) {
		_IntExit();
   1880e:	f00e f90f 	bl	26a30 <_ExcExit>
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   18812:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   18816:	4685      	mov	sp, r0
   18818:	4770      	bx	lr
	...

0001881c <rtc0_nrf5_isr>:
	return 1;
}

static void rtc0_nrf5_isr(void *arg)
{
   1881c:	b510      	push	{r4, lr}
	u32_t compare0, compare1;

	/* store interested events */
	compare0 = NRF_RTC0->EVENTS_COMPARE[0];
   1881e:	4b0c      	ldr	r3, [pc, #48]	; (18850 <rtc0_nrf5_isr+0x34>)
   18820:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
	compare1 = NRF_RTC0->EVENTS_COMPARE[1];
   18824:	f8d3 4144 	ldr.w	r4, [r3, #324]	; 0x144

	/* On compare0 run ticker worker instance0 */
	if (compare0) {
   18828:	b922      	cbnz	r2, 18834 <rtc0_nrf5_isr+0x18>

		ticker_trigger(0);
	}

	/* On compare1 run ticker worker instance1 */
	if (compare1) {
   1882a:	b94c      	cbnz	r4, 18840 <rtc0_nrf5_isr+0x24>
		NRF_RTC0->EVENTS_COMPARE[1] = 0;

		ticker_trigger(1);
	}

	mayfly_run(MAYFLY_CALL_ID_0);
   1882c:	2000      	movs	r0, #0
   1882e:	f7f5 fec1 	bl	e5b4 <mayfly_run>
   18832:	bd10      	pop	{r4, pc}
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
   18834:	2000      	movs	r0, #0
   18836:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		ticker_trigger(0);
   1883a:	f7f7 fc5b 	bl	100f4 <ticker_trigger>
   1883e:	e7f4      	b.n	1882a <rtc0_nrf5_isr+0xe>
		NRF_RTC0->EVENTS_COMPARE[1] = 0;
   18840:	2200      	movs	r2, #0
   18842:	4b03      	ldr	r3, [pc, #12]	; (18850 <rtc0_nrf5_isr+0x34>)
   18844:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
		ticker_trigger(1);
   18848:	2001      	movs	r0, #1
   1884a:	f7f7 fc53 	bl	100f4 <ticker_trigger>
   1884e:	e7ed      	b.n	1882c <rtc0_nrf5_isr+0x10>
   18850:	4000b000 	.word	0x4000b000

00018854 <swi4_nrf5_isr>:
{
	isr_rand(arg);
}

static void swi4_nrf5_isr(void *arg)
{
   18854:	b508      	push	{r3, lr}
	mayfly_run(MAYFLY_CALL_ID_1);
   18856:	2001      	movs	r0, #1
   18858:	f7f5 feac 	bl	e5b4 <mayfly_run>
   1885c:	bd08      	pop	{r3, pc}

0001885e <rng_nrf5_isr>:
{
   1885e:	b508      	push	{r3, lr}
	isr_rand(arg);
   18860:	f7f7 f9e2 	bl	fc28 <isr_rand>
   18864:	bd08      	pop	{r3, pc}

00018866 <mayfly_enable_cb>:
	LL_ASSERT(callee_id == MAYFLY_CALL_ID_1);
   18866:	2901      	cmp	r1, #1
   18868:	d105      	bne.n	18876 <mayfly_enable_cb+0x10>
{
   1886a:	b508      	push	{r3, lr}
	if (enable) {
   1886c:	b94a      	cbnz	r2, 18882 <mayfly_enable_cb+0x1c>
		irq_disable(SWI4_IRQn);
   1886e:	2018      	movs	r0, #24
   18870:	f00e fb0c 	bl	26e8c <_arch_irq_disable>
   18874:	bd08      	pop	{r3, pc}
	LL_ASSERT(callee_id == MAYFLY_CALL_ID_1);
   18876:	4040      	eors	r0, r0
   18878:	f380 8811 	msr	BASEPRI, r0
   1887c:	f04f 0004 	mov.w	r0, #4
   18880:	df02      	svc	2
		irq_enable(SWI4_IRQn);
   18882:	2018      	movs	r0, #24
   18884:	f00e faf4 	bl	26e70 <_arch_irq_enable>
   18888:	bd08      	pop	{r3, pc}

0001888a <mayfly_is_enabled>:
{
   1888a:	b508      	push	{r3, lr}
	if (callee_id == MAYFLY_CALL_ID_0) {
   1888c:	b129      	cbz	r1, 1889a <mayfly_is_enabled+0x10>
	} else if (callee_id == MAYFLY_CALL_ID_1) {
   1888e:	2901      	cmp	r1, #1
   18890:	d107      	bne.n	188a2 <mayfly_is_enabled+0x18>
		return irq_is_enabled(SWI4_IRQn);
   18892:	2018      	movs	r0, #24
   18894:	f00e fb08 	bl	26ea8 <_arch_irq_is_enabled>
   18898:	bd08      	pop	{r3, pc}
		return irq_is_enabled(RTC0_IRQn);
   1889a:	200b      	movs	r0, #11
   1889c:	f00e fb04 	bl	26ea8 <_arch_irq_is_enabled>
   188a0:	bd08      	pop	{r3, pc}
	LL_ASSERT(0);
   188a2:	4040      	eors	r0, r0
   188a4:	f380 8811 	msr	BASEPRI, r0
   188a8:	f04f 0004 	mov.w	r0, #4
   188ac:	df02      	svc	2

000188ae <mayfly_prio_is_equal>:
		(callee_id == MAYFLY_CALL_ID_1)) ||
   188ae:	4288      	cmp	r0, r1
   188b0:	d009      	beq.n	188c6 <mayfly_prio_is_equal+0x18>
	return (caller_id == callee_id) ||
   188b2:	b908      	cbnz	r0, 188b8 <mayfly_prio_is_equal+0xa>
	       ((caller_id == MAYFLY_CALL_ID_0) &&
   188b4:	2901      	cmp	r1, #1
   188b6:	d008      	beq.n	188ca <mayfly_prio_is_equal+0x1c>
		(callee_id == MAYFLY_CALL_ID_1)) ||
   188b8:	2801      	cmp	r0, #1
   188ba:	d001      	beq.n	188c0 <mayfly_prio_is_equal+0x12>
   188bc:	2000      	movs	r0, #0
   188be:	4770      	bx	lr
	       ((caller_id == MAYFLY_CALL_ID_1) &&
   188c0:	b129      	cbz	r1, 188ce <mayfly_prio_is_equal+0x20>
		(callee_id == MAYFLY_CALL_ID_1)) ||
   188c2:	2000      	movs	r0, #0
   188c4:	4770      	bx	lr
   188c6:	2001      	movs	r0, #1
   188c8:	4770      	bx	lr
   188ca:	2001      	movs	r0, #1
   188cc:	4770      	bx	lr
   188ce:	2001      	movs	r0, #1
}
   188d0:	4770      	bx	lr
	...

000188d4 <mayfly_pend>:
	switch (callee_id) {
   188d4:	b139      	cbz	r1, 188e6 <mayfly_pend+0x12>
   188d6:	2901      	cmp	r1, #1
   188d8:	d00b      	beq.n	188f2 <mayfly_pend+0x1e>
		LL_ASSERT(0);
   188da:	4040      	eors	r0, r0
   188dc:	f380 8811 	msr	BASEPRI, r0
   188e0:	f04f 0004 	mov.w	r0, #4
   188e4:	df02      	svc	2
  NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   188e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
   188ea:	4b05      	ldr	r3, [pc, #20]	; (18900 <mayfly_pend+0x2c>)
   188ec:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   188f0:	4770      	bx	lr
   188f2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   188f6:	4b02      	ldr	r3, [pc, #8]	; (18900 <mayfly_pend+0x2c>)
   188f8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   188fc:	4770      	bx	lr
   188fe:	bf00      	nop
   18900:	e000e100 	.word	0xe000e100

00018904 <radio_active_callback>:
{
   18904:	4770      	bx	lr
	...

00018908 <radio_event_callback>:
{
   18908:	b508      	push	{r3, lr}
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   1890a:	4b02      	ldr	r3, [pc, #8]	; (18914 <radio_event_callback+0xc>)
   1890c:	6818      	ldr	r0, [r3, #0]
   1890e:	f00f ff44 	bl	2879a <_impl_k_sem_give>
   18912:	bd08      	pop	{r3, pc}
   18914:	200017a8 	.word	0x200017a8

00018918 <ll_init>:
}

int ll_init(struct k_sem *sem_rx)
{
   18918:	b510      	push	{r4, lr}
   1891a:	b086      	sub	sp, #24
	struct device *clk_k32;
	struct device *clk_m16;
	u32_t err;

	sem_recv = sem_rx;
   1891c:	4b37      	ldr	r3, [pc, #220]	; (189fc <ll_init+0xe4>)
   1891e:	6018      	str	r0, [r3, #0]

	/* TODO: bind and use RNG driver */
	rand_init(rand_context, sizeof(rand_context), RAND_THREAD_THRESHOLD);
   18920:	2204      	movs	r2, #4
   18922:	2109      	movs	r1, #9
   18924:	4836      	ldr	r0, [pc, #216]	; (18a00 <ll_init+0xe8>)
   18926:	f7f7 f957 	bl	fbd8 <rand_init>
	rand_isr_init(rand_isr_context, sizeof(rand_isr_context),
   1892a:	220c      	movs	r2, #12
   1892c:	2111      	movs	r1, #17
   1892e:	4835      	ldr	r0, [pc, #212]	; (18a04 <ll_init+0xec>)
   18930:	f7f7 f95c 	bl	fbec <rand_isr_init>
		      RAND_ISR_THRESHOLD);

	clk_k32 = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
   18934:	4834      	ldr	r0, [pc, #208]	; (18a08 <ll_init+0xf0>)
   18936:	f00e fc69 	bl	2720c <device_get_binding>
	if (!clk_k32) {
   1893a:	2800      	cmp	r0, #0
   1893c:	d054      	beq.n	189e8 <ll_init+0xd0>
	const struct clock_control_driver_api *api = dev->driver_api;
   1893e:	6842      	ldr	r2, [r0, #4]
	return api->on(dev, sys);
   18940:	6812      	ldr	r2, [r2, #0]
   18942:	2101      	movs	r1, #1
   18944:	4790      	blx	r2
	}

	clock_control_on(clk_k32, (void *)CLOCK_CONTROL_NRF5_K32SRC);

	/* TODO: bind and use counter driver */
	cntr_init();
   18946:	f7f5 ffad 	bl	e8a4 <cntr_init>

	mayfly_init();
   1894a:	f7f5 fd67 	bl	e41c <mayfly_init>

	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
   1894e:	4b2f      	ldr	r3, [pc, #188]	; (18a0c <ll_init+0xf4>)
   18950:	2108      	movs	r1, #8
   18952:	7019      	strb	r1, [r3, #0]
	_ticker_users[MAYFLY_CALL_ID_1][0] = RADIO_TICKER_USER_JOB_OPS;
   18954:	2203      	movs	r2, #3
   18956:	721a      	strb	r2, [r3, #8]
	_ticker_users[MAYFLY_CALL_ID_2][0] = 0;
   18958:	2000      	movs	r0, #0
   1895a:	7418      	strb	r0, [r3, #16]
	_ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_APP_OPS;
   1895c:	2202      	movs	r2, #2
   1895e:	761a      	strb	r2, [r3, #24]

	ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO, TICKER_NODES,
   18960:	4a2b      	ldr	r2, [pc, #172]	; (18a10 <ll_init+0xf8>)
   18962:	9202      	str	r2, [sp, #8]
   18964:	220d      	movs	r2, #13
   18966:	9201      	str	r2, [sp, #4]
   18968:	9300      	str	r3, [sp, #0]
   1896a:	2304      	movs	r3, #4
   1896c:	4a29      	ldr	r2, [pc, #164]	; (18a14 <ll_init+0xfc>)
   1896e:	f7f7 fb67 	bl	10040 <ticker_init>
		    &_ticker_nodes[0], MAYFLY_CALLER_COUNT, &_ticker_users[0],
		    TICKER_USER_OPS, &_ticker_user_ops[0]);

	clk_m16 = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_M16SRC_DRV_NAME);
   18972:	4829      	ldr	r0, [pc, #164]	; (18a18 <ll_init+0x100>)
   18974:	f00e fc4a 	bl	2720c <device_get_binding>
	if (!clk_m16) {
   18978:	2800      	cmp	r0, #0
   1897a:	d038      	beq.n	189ee <ll_init+0xd6>
		return -ENODEV;
	}

	err = radio_init(clk_m16, CLOCK_CONTROL_NRF5_K32SRC_ACCURACY,
   1897c:	f44f 7357 	mov.w	r3, #860	; 0x35c
   18980:	9304      	str	r3, [sp, #16]
   18982:	4b26      	ldr	r3, [pc, #152]	; (18a1c <ll_init+0x104>)
   18984:	9303      	str	r3, [sp, #12]
   18986:	231b      	movs	r3, #27
   18988:	9302      	str	r3, [sp, #8]
   1898a:	9301      	str	r3, [sp, #4]
   1898c:	2302      	movs	r3, #2
   1898e:	9300      	str	r3, [sp, #0]
   18990:	2301      	movs	r3, #1
   18992:	461a      	mov	r2, r3
   18994:	2107      	movs	r1, #7
   18996:	f7fe fccb 	bl	17330 <radio_init>
			 RADIO_CONNECTION_CONTEXT_MAX,
			 RADIO_PACKET_COUNT_RX_MAX,
			 RADIO_PACKET_COUNT_TX_MAX,
			 RADIO_LL_LENGTH_OCTETS_RX_MAX,
			 RADIO_PACKET_TX_DATA_SIZE, &_radio[0], sizeof(_radio));
	if (err) {
   1899a:	bb58      	cbnz	r0, 189f4 <ll_init+0xdc>
		BT_ERR("Required RAM size: %d, supplied: %u.", err,
		       sizeof(_radio));
		return -ENOMEM;
	}

	ll_filter_reset(true);
   1899c:	2001      	movs	r0, #1
   1899e:	f000 ffff 	bl	199a0 <ll_filter_reset>

	IRQ_DIRECT_CONNECT(NRF5_IRQ_RADIO_IRQn, CONFIG_BT_CTLR_WORKER_PRIO,
   189a2:	2200      	movs	r2, #0
   189a4:	4611      	mov	r1, r2
   189a6:	2001      	movs	r0, #1
   189a8:	f00e fa8c 	bl	26ec4 <_irq_priority_set>
			   radio_nrf5_isr, 0);
	IRQ_CONNECT(NRF5_IRQ_RTC0_IRQn, CONFIG_BT_CTLR_WORKER_PRIO,
   189ac:	2200      	movs	r2, #0
   189ae:	4611      	mov	r1, r2
   189b0:	200b      	movs	r0, #11
   189b2:	f00e fa87 	bl	26ec4 <_irq_priority_set>
		    rtc0_nrf5_isr, NULL, 0);
	IRQ_CONNECT(NRF5_IRQ_SWI4_IRQn, CONFIG_BT_CTLR_JOB_PRIO, swi4_nrf5_isr,
   189b6:	2200      	movs	r2, #0
   189b8:	4611      	mov	r1, r2
   189ba:	2018      	movs	r0, #24
   189bc:	f00e fa82 	bl	26ec4 <_irq_priority_set>
		    NULL, 0);
	IRQ_CONNECT(NRF5_IRQ_RNG_IRQn, 1, rng_nrf5_isr, NULL, 0);
   189c0:	2200      	movs	r2, #0
   189c2:	2101      	movs	r1, #1
   189c4:	200d      	movs	r0, #13
   189c6:	f00e fa7d 	bl	26ec4 <_irq_priority_set>

	irq_enable(NRF5_IRQ_RADIO_IRQn);
   189ca:	2001      	movs	r0, #1
   189cc:	f00e fa50 	bl	26e70 <_arch_irq_enable>
	irq_enable(NRF5_IRQ_RTC0_IRQn);
   189d0:	200b      	movs	r0, #11
   189d2:	f00e fa4d 	bl	26e70 <_arch_irq_enable>
	irq_enable(NRF5_IRQ_SWI4_IRQn);
   189d6:	2018      	movs	r0, #24
   189d8:	f00e fa4a 	bl	26e70 <_arch_irq_enable>
	irq_enable(NRF5_IRQ_RNG_IRQn);
   189dc:	200d      	movs	r0, #13
   189de:	f00e fa47 	bl	26e70 <_arch_irq_enable>

	return 0;
   189e2:	2000      	movs	r0, #0
}
   189e4:	b006      	add	sp, #24
   189e6:	bd10      	pop	{r4, pc}
		return -ENODEV;
   189e8:	f06f 0012 	mvn.w	r0, #18
   189ec:	e7fa      	b.n	189e4 <ll_init+0xcc>
		return -ENODEV;
   189ee:	f06f 0012 	mvn.w	r0, #18
   189f2:	e7f7      	b.n	189e4 <ll_init+0xcc>
		return -ENOMEM;
   189f4:	f06f 000b 	mvn.w	r0, #11
   189f8:	e7f4      	b.n	189e4 <ll_init+0xcc>
   189fa:	bf00      	nop
   189fc:	200017a8 	.word	0x200017a8
   18a00:	20001788 	.word	0x20001788
   18a04:	20001794 	.word	0x20001794
   18a08:	0002f0a8 	.word	0x0002f0a8
   18a0c:	20001768 	.word	0x20001768
   18a10:	2000152c 	.word	0x2000152c
   18a14:	2000140c 	.word	0x2000140c
   18a18:	0002f0b4 	.word	0x0002f0b4
   18a1c:	2000100c 	.word	0x2000100c

00018a20 <ll_addr_get>:
	*instance_index = RADIO_TICKER_INSTANCE_ID_RADIO;
}

u8_t *ll_addr_get(u8_t addr_type, u8_t *bdaddr)
{
	if (addr_type > 1) {
   18a20:	2801      	cmp	r0, #1
   18a22:	d814      	bhi.n	18a4e <ll_addr_get+0x2e>
{
   18a24:	b538      	push	{r3, r4, r5, lr}
   18a26:	460c      	mov	r4, r1
		return NULL;
	}

	if (addr_type) {
   18a28:	b140      	cbz	r0, 18a3c <ll_addr_get+0x1c>
		if (bdaddr) {
   18a2a:	b191      	cbz	r1, 18a52 <ll_addr_get+0x32>
			memcpy(bdaddr, _ll_context.rnd_addr, BDADDR_SIZE);
   18a2c:	4d0b      	ldr	r5, [pc, #44]	; (18a5c <ll_addr_get+0x3c>)
   18a2e:	2206      	movs	r2, #6
   18a30:	4629      	mov	r1, r5
   18a32:	4620      	mov	r0, r4
   18a34:	f7e7 fc44 	bl	2c0 <memcpy>
		}

		return _ll_context.rnd_addr;
   18a38:	4628      	mov	r0, r5
   18a3a:	bd38      	pop	{r3, r4, r5, pc}
	}

	if (bdaddr) {
   18a3c:	b159      	cbz	r1, 18a56 <ll_addr_get+0x36>
		memcpy(bdaddr, _ll_context.pub_addr, BDADDR_SIZE);
   18a3e:	4d08      	ldr	r5, [pc, #32]	; (18a60 <ll_addr_get+0x40>)
   18a40:	2206      	movs	r2, #6
   18a42:	4629      	mov	r1, r5
   18a44:	4620      	mov	r0, r4
   18a46:	f7e7 fc3b 	bl	2c0 <memcpy>
	}

	return _ll_context.pub_addr;
   18a4a:	4628      	mov	r0, r5
   18a4c:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
   18a4e:	2000      	movs	r0, #0
   18a50:	4770      	bx	lr
		return _ll_context.rnd_addr;
   18a52:	4802      	ldr	r0, [pc, #8]	; (18a5c <ll_addr_get+0x3c>)
   18a54:	bd38      	pop	{r3, r4, r5, pc}
	return _ll_context.pub_addr;
   18a56:	4802      	ldr	r0, [pc, #8]	; (18a60 <ll_addr_get+0x40>)
}
   18a58:	bd38      	pop	{r3, r4, r5, pc}
   18a5a:	bf00      	nop
   18a5c:	20001406 	.word	0x20001406
   18a60:	20001400 	.word	0x20001400

00018a64 <ll_addr_set>:

void ll_addr_set(u8_t addr_type, u8_t const *const bdaddr)
{
   18a64:	b508      	push	{r3, lr}
	if (addr_type) {
   18a66:	b920      	cbnz	r0, 18a72 <ll_addr_set+0xe>
		memcpy(_ll_context.rnd_addr, bdaddr, BDADDR_SIZE);
	} else {
		memcpy(_ll_context.pub_addr, bdaddr, BDADDR_SIZE);
   18a68:	2206      	movs	r2, #6
   18a6a:	4804      	ldr	r0, [pc, #16]	; (18a7c <ll_addr_set+0x18>)
   18a6c:	f7e7 fc28 	bl	2c0 <memcpy>
   18a70:	bd08      	pop	{r3, pc}
		memcpy(_ll_context.rnd_addr, bdaddr, BDADDR_SIZE);
   18a72:	2206      	movs	r2, #6
   18a74:	4802      	ldr	r0, [pc, #8]	; (18a80 <ll_addr_set+0x1c>)
   18a76:	f7e7 fc23 	bl	2c0 <memcpy>
   18a7a:	bd08      	pop	{r3, pc}
   18a7c:	20001400 	.word	0x20001400
   18a80:	20001406 	.word	0x20001406

00018a84 <wl_clear>:
	for (int i = 0; i < WL_SIZE; i++) {
   18a84:	2300      	movs	r3, #0
   18a86:	e007      	b.n	18a98 <wl_clear+0x14>
		wl[i].taken = 0;
   18a88:	4a05      	ldr	r2, [pc, #20]	; (18aa0 <wl_clear+0x1c>)
   18a8a:	f812 1033 	ldrb.w	r1, [r2, r3, lsl #3]
   18a8e:	f36f 0100 	bfc	r1, #0, #1
   18a92:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
	for (int i = 0; i < WL_SIZE; i++) {
   18a96:	3301      	adds	r3, #1
   18a98:	2b07      	cmp	r3, #7
   18a9a:	ddf5      	ble.n	18a88 <wl_clear+0x4>
}
   18a9c:	4770      	bx	lr
   18a9e:	bf00      	nop
   18aa0:	200019e0 	.word	0x200019e0

00018aa4 <filter_clear>:
	filter->enable_bitmask = 0;
   18aa4:	2300      	movs	r3, #0
   18aa6:	7003      	strb	r3, [r0, #0]
	filter->addr_type_bitmask = 0;
   18aa8:	7043      	strb	r3, [r0, #1]
   18aaa:	4770      	bx	lr

00018aac <rl_clear>:
	for (u8_t i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   18aac:	2300      	movs	r3, #0
   18aae:	e009      	b.n	18ac4 <rl_clear+0x18>
		rl[i].taken = 0;
   18ab0:	4907      	ldr	r1, [pc, #28]	; (18ad0 <rl_clear+0x24>)
   18ab2:	eb03 0083 	add.w	r0, r3, r3, lsl #2
   18ab6:	00c2      	lsls	r2, r0, #3
   18ab8:	5c88      	ldrb	r0, [r1, r2]
   18aba:	f36f 0000 	bfc	r0, #0, #1
   18abe:	5488      	strb	r0, [r1, r2]
	for (u8_t i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   18ac0:	3301      	adds	r3, #1
   18ac2:	b2db      	uxtb	r3, r3
   18ac4:	2b07      	cmp	r3, #7
   18ac6:	d9f3      	bls.n	18ab0 <rl_clear+0x4>
	peer_irk_count = 0;
   18ac8:	2200      	movs	r2, #0
   18aca:	4b02      	ldr	r3, [pc, #8]	; (18ad4 <rl_clear+0x28>)
   18acc:	701a      	strb	r2, [r3, #0]
   18ace:	4770      	bx	lr
   18ad0:	20001868 	.word	0x20001868
   18ad4:	200017dc 	.word	0x200017dc

00018ad8 <wl_find>:
{
   18ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18ada:	4606      	mov	r6, r0
   18adc:	460f      	mov	r7, r1
	if (free) {
   18ade:	4615      	mov	r5, r2
   18ae0:	b10a      	cbz	r2, 18ae6 <wl_find+0xe>
		*free = FILTER_IDX_NONE;
   18ae2:	23ff      	movs	r3, #255	; 0xff
   18ae4:	7013      	strb	r3, [r2, #0]
{
   18ae6:	2400      	movs	r4, #0
   18ae8:	e00c      	b.n	18b04 <wl_find+0x2c>
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   18aea:	4816      	ldr	r0, [pc, #88]	; (18b44 <wl_find+0x6c>)
   18aec:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   18af0:	2206      	movs	r2, #6
   18af2:	4639      	mov	r1, r7
   18af4:	3002      	adds	r0, #2
   18af6:	f011 ff31 	bl	2a95c <memcmp>
   18afa:	b9a0      	cbnz	r0, 18b26 <wl_find+0x4e>
			return i;
   18afc:	b2e0      	uxtb	r0, r4
   18afe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			*free = i;
   18b00:	702c      	strb	r4, [r5, #0]
	for (i = 0; i < WL_SIZE; i++) {
   18b02:	3401      	adds	r4, #1
   18b04:	2c07      	cmp	r4, #7
   18b06:	dc1a      	bgt.n	18b3e <wl_find+0x66>
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   18b08:	4b0e      	ldr	r3, [pc, #56]	; (18b44 <wl_find+0x6c>)
   18b0a:	f813 3034 	ldrb.w	r3, [r3, r4, lsl #3]
   18b0e:	f013 0f01 	tst.w	r3, #1
   18b12:	d008      	beq.n	18b26 <wl_find+0x4e>
   18b14:	4b0b      	ldr	r3, [pc, #44]	; (18b44 <wl_find+0x6c>)
   18b16:	f813 3034 	ldrb.w	r3, [r3, r4, lsl #3]
   18b1a:	f3c3 0340 	ubfx	r3, r3, #1, #1
   18b1e:	f006 0201 	and.w	r2, r6, #1
   18b22:	4293      	cmp	r3, r2
   18b24:	d0e1      	beq.n	18aea <wl_find+0x12>
		} else if (free && !wl[i].taken && (*free == FILTER_IDX_NONE)) {
   18b26:	2d00      	cmp	r5, #0
   18b28:	d0eb      	beq.n	18b02 <wl_find+0x2a>
   18b2a:	4b06      	ldr	r3, [pc, #24]	; (18b44 <wl_find+0x6c>)
   18b2c:	f813 3034 	ldrb.w	r3, [r3, r4, lsl #3]
   18b30:	f013 0f01 	tst.w	r3, #1
   18b34:	d1e5      	bne.n	18b02 <wl_find+0x2a>
   18b36:	782b      	ldrb	r3, [r5, #0]
   18b38:	2bff      	cmp	r3, #255	; 0xff
   18b3a:	d1e2      	bne.n	18b02 <wl_find+0x2a>
   18b3c:	e7e0      	b.n	18b00 <wl_find+0x28>
	return FILTER_IDX_NONE;
   18b3e:	20ff      	movs	r0, #255	; 0xff
}
   18b40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18b42:	bf00      	nop
   18b44:	200019e0 	.word	0x200019e0

00018b48 <wl_remove>:
{
   18b48:	b508      	push	{r3, lr}
	u8_t i = wl_find(id_addr->type, id_addr->a.val, NULL);
   18b4a:	4601      	mov	r1, r0
   18b4c:	f811 0b01 	ldrb.w	r0, [r1], #1
   18b50:	2200      	movs	r2, #0
   18b52:	f7ff ffc1 	bl	18ad8 <wl_find>
	if (i < ARRAY_SIZE(wl)) {
   18b56:	2807      	cmp	r0, #7
   18b58:	d901      	bls.n	18b5e <wl_remove+0x16>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   18b5a:	2002      	movs	r0, #2
}
   18b5c:	bd08      	pop	{r3, pc}
		u8_t j = wl[i].rl_idx;
   18b5e:	4b0b      	ldr	r3, [pc, #44]	; (18b8c <wl_remove+0x44>)
   18b60:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
   18b64:	785b      	ldrb	r3, [r3, #1]
		if (j < ARRAY_SIZE(rl)) {
   18b66:	2b07      	cmp	r3, #7
   18b68:	d807      	bhi.n	18b7a <wl_remove+0x32>
			rl[j].wl = 0;
   18b6a:	4909      	ldr	r1, [pc, #36]	; (18b90 <wl_remove+0x48>)
   18b6c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   18b70:	00da      	lsls	r2, r3, #3
   18b72:	5c8b      	ldrb	r3, [r1, r2]
   18b74:	f36f 1345 	bfc	r3, #5, #1
   18b78:	548b      	strb	r3, [r1, r2]
		wl[i].taken = 0;
   18b7a:	4b04      	ldr	r3, [pc, #16]	; (18b8c <wl_remove+0x44>)
   18b7c:	f813 2030 	ldrb.w	r2, [r3, r0, lsl #3]
   18b80:	f36f 0200 	bfc	r2, #0, #1
   18b84:	f803 2030 	strb.w	r2, [r3, r0, lsl #3]
		return 0;
   18b88:	2000      	movs	r0, #0
   18b8a:	bd08      	pop	{r3, pc}
   18b8c:	200019e0 	.word	0x200019e0
   18b90:	20001868 	.word	0x20001868

00018b94 <filter_insert>:
{
   18b94:	b538      	push	{r3, r4, r5, lr}
	filter->enable_bitmask |= BIT(index);
   18b96:	2401      	movs	r4, #1
   18b98:	fa04 f501 	lsl.w	r5, r4, r1
   18b9c:	7804      	ldrb	r4, [r0, #0]
   18b9e:	432c      	orrs	r4, r5
   18ba0:	7004      	strb	r4, [r0, #0]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   18ba2:	f002 0201 	and.w	r2, r2, #1
   18ba6:	fa02 f401 	lsl.w	r4, r2, r1
   18baa:	7842      	ldrb	r2, [r0, #1]
   18bac:	4322      	orrs	r2, r4
   18bae:	7042      	strb	r2, [r0, #1]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   18bb0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   18bb4:	004a      	lsls	r2, r1, #1
   18bb6:	4410      	add	r0, r2
   18bb8:	2206      	movs	r2, #6
   18bba:	4619      	mov	r1, r3
   18bbc:	3002      	adds	r0, #2
   18bbe:	f7e7 fb7f 	bl	2c0 <memcpy>
   18bc2:	bd38      	pop	{r3, r4, r5, pc}

00018bc4 <filter_wl_update>:
{
   18bc4:	b510      	push	{r4, lr}
	filter_clear(&wl_filter);
   18bc6:	481b      	ldr	r0, [pc, #108]	; (18c34 <filter_wl_update+0x70>)
   18bc8:	f7ff ff6c 	bl	18aa4 <filter_clear>
	for (i = 0; i < WL_SIZE; i++) {
   18bcc:	2400      	movs	r4, #0
   18bce:	e00c      	b.n	18bea <filter_wl_update+0x26>
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
   18bd0:	4b19      	ldr	r3, [pc, #100]	; (18c38 <filter_wl_update+0x74>)
   18bd2:	f813 2031 	ldrb.w	r2, [r3, r1, lsl #3]
				      wl[i].id_addr.val);
   18bd6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
   18bda:	3302      	adds	r3, #2
   18bdc:	f3c2 0240 	ubfx	r2, r2, #1, #1
   18be0:	4814      	ldr	r0, [pc, #80]	; (18c34 <filter_wl_update+0x70>)
   18be2:	f7ff ffd7 	bl	18b94 <filter_insert>
	for (i = 0; i < WL_SIZE; i++) {
   18be6:	3401      	adds	r4, #1
   18be8:	b2e4      	uxtb	r4, r4
   18bea:	2c07      	cmp	r4, #7
   18bec:	d820      	bhi.n	18c30 <filter_wl_update+0x6c>
		if (!wl[i].taken) {
   18bee:	4621      	mov	r1, r4
   18bf0:	4b11      	ldr	r3, [pc, #68]	; (18c38 <filter_wl_update+0x74>)
   18bf2:	f813 3034 	ldrb.w	r3, [r3, r4, lsl #3]
   18bf6:	f013 0f01 	tst.w	r3, #1
   18bfa:	d0f4      	beq.n	18be6 <filter_wl_update+0x22>
		j = wl[i].rl_idx;
   18bfc:	4b0e      	ldr	r3, [pc, #56]	; (18c38 <filter_wl_update+0x74>)
   18bfe:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   18c02:	785b      	ldrb	r3, [r3, #1]
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   18c04:	4a0d      	ldr	r2, [pc, #52]	; (18c3c <filter_wl_update+0x78>)
   18c06:	7812      	ldrb	r2, [r2, #0]
   18c08:	2a00      	cmp	r2, #0
   18c0a:	d0e1      	beq.n	18bd0 <filter_wl_update+0xc>
   18c0c:	2b07      	cmp	r3, #7
   18c0e:	d8df      	bhi.n	18bd0 <filter_wl_update+0xc>
   18c10:	eb03 0083 	add.w	r0, r3, r3, lsl #2
   18c14:	00c2      	lsls	r2, r0, #3
   18c16:	480a      	ldr	r0, [pc, #40]	; (18c40 <filter_wl_update+0x7c>)
   18c18:	5c82      	ldrb	r2, [r0, r2]
   18c1a:	f012 0f04 	tst.w	r2, #4
   18c1e:	d0d7      	beq.n	18bd0 <filter_wl_update+0xc>
		    rl[j].dev) {
   18c20:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   18c24:	00da      	lsls	r2, r3, #3
   18c26:	5c83      	ldrb	r3, [r0, r2]
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   18c28:	f013 0f10 	tst.w	r3, #16
   18c2c:	d0db      	beq.n	18be6 <filter_wl_update+0x22>
   18c2e:	e7cf      	b.n	18bd0 <filter_wl_update+0xc>
}
   18c30:	bd10      	pop	{r4, pc}
   18c32:	bf00      	nop
   18c34:	20001a20 	.word	0x20001a20
   18c38:	200019e0 	.word	0x200019e0
   18c3c:	200019a8 	.word	0x200019a8
   18c40:	20001868 	.word	0x20001868

00018c44 <filter_rl_update>:
{
   18c44:	b510      	push	{r4, lr}
	filter_clear(&rl_filter);
   18c46:	4810      	ldr	r0, [pc, #64]	; (18c88 <filter_rl_update+0x44>)
   18c48:	f7ff ff2c 	bl	18aa4 <filter_clear>
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   18c4c:	2400      	movs	r4, #0
   18c4e:	e001      	b.n	18c54 <filter_rl_update+0x10>
   18c50:	3401      	adds	r4, #1
   18c52:	b2e4      	uxtb	r4, r4
   18c54:	2c07      	cmp	r4, #7
   18c56:	d815      	bhi.n	18c84 <filter_rl_update+0x40>
		if (rl[i].taken) {
   18c58:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   18c5c:	00d3      	lsls	r3, r2, #3
   18c5e:	4a0b      	ldr	r2, [pc, #44]	; (18c8c <filter_rl_update+0x48>)
   18c60:	5cd3      	ldrb	r3, [r2, r3]
   18c62:	f013 0f01 	tst.w	r3, #1
   18c66:	d0f3      	beq.n	18c50 <filter_rl_update+0xc>
			filter_insert(&rl_filter, i, rl[i].id_addr_type,
   18c68:	4611      	mov	r1, r2
   18c6a:	00a3      	lsls	r3, r4, #2
   18c6c:	4423      	add	r3, r4
   18c6e:	00da      	lsls	r2, r3, #3
   18c70:	188b      	adds	r3, r1, r2
   18c72:	5c8a      	ldrb	r2, [r1, r2]
   18c74:	3301      	adds	r3, #1
   18c76:	f3c2 1280 	ubfx	r2, r2, #6, #1
   18c7a:	4621      	mov	r1, r4
   18c7c:	4802      	ldr	r0, [pc, #8]	; (18c88 <filter_rl_update+0x44>)
   18c7e:	f7ff ff89 	bl	18b94 <filter_insert>
   18c82:	e7e5      	b.n	18c50 <filter_rl_update+0xc>
}
   18c84:	bd10      	pop	{r4, pc}
   18c86:	bf00      	nop
   18c88:	200019ac 	.word	0x200019ac
   18c8c:	20001868 	.word	0x20001868

00018c90 <rl_access_check>:
{
   18c90:	b508      	push	{r3, lr}
	if (check_ar) {
   18c92:	b110      	cbz	r0, 18c9a <rl_access_check+0xa>
		if (!rl_enable) {
   18c94:	4b08      	ldr	r3, [pc, #32]	; (18cb8 <rl_access_check+0x28>)
   18c96:	781b      	ldrb	r3, [r3, #0]
   18c98:	b15b      	cbz	r3, 18cb2 <rl_access_check+0x22>
	return (radio_adv_is_enabled() || radio_scan_is_enabled()) ? 0 : 1;
   18c9a:	f7fe fc27 	bl	174ec <radio_adv_is_enabled>
   18c9e:	b108      	cbz	r0, 18ca4 <rl_access_check+0x14>
   18ca0:	2000      	movs	r0, #0
   18ca2:	bd08      	pop	{r3, pc}
   18ca4:	f7fe fc3a 	bl	1751c <radio_scan_is_enabled>
   18ca8:	b108      	cbz	r0, 18cae <rl_access_check+0x1e>
   18caa:	2000      	movs	r0, #0
}
   18cac:	bd08      	pop	{r3, pc}
	return (radio_adv_is_enabled() || radio_scan_is_enabled()) ? 0 : 1;
   18cae:	2001      	movs	r0, #1
   18cb0:	bd08      	pop	{r3, pc}
			return -1;
   18cb2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18cb6:	bd08      	pop	{r3, pc}
   18cb8:	200019a8 	.word	0x200019a8

00018cbc <rpa_refresh_start>:
{
   18cbc:	b508      	push	{r3, lr}
	if (!rl_enable) {
   18cbe:	4b05      	ldr	r3, [pc, #20]	; (18cd4 <rpa_refresh_start+0x18>)
   18cc0:	781b      	ldrb	r3, [r3, #0]
   18cc2:	b903      	cbnz	r3, 18cc6 <rpa_refresh_start+0xa>
   18cc4:	bd08      	pop	{r3, pc}
   18cc6:	4b04      	ldr	r3, [pc, #16]	; (18cd8 <rpa_refresh_start+0x1c>)
   18cc8:	681a      	ldr	r2, [r3, #0]
   18cca:	4904      	ldr	r1, [pc, #16]	; (18cdc <rpa_refresh_start+0x20>)
   18ccc:	4804      	ldr	r0, [pc, #16]	; (18ce0 <rpa_refresh_start+0x24>)
   18cce:	f010 fbad 	bl	2942c <k_delayed_work_submit_to_queue>
   18cd2:	e7f7      	b.n	18cc4 <rpa_refresh_start+0x8>
   18cd4:	200019a8 	.word	0x200019a8
   18cd8:	20002af4 	.word	0x20002af4
   18cdc:	200029c0 	.word	0x200029c0
   18ce0:	20002b08 	.word	0x20002b08

00018ce4 <rpa_refresh_stop>:
{
   18ce4:	b508      	push	{r3, lr}
	if (!rl_enable) {
   18ce6:	4b04      	ldr	r3, [pc, #16]	; (18cf8 <rpa_refresh_stop+0x14>)
   18ce8:	781b      	ldrb	r3, [r3, #0]
   18cea:	b903      	cbnz	r3, 18cee <rpa_refresh_stop+0xa>
   18cec:	bd08      	pop	{r3, pc}
	k_delayed_work_cancel(&rpa_work);
   18cee:	4803      	ldr	r0, [pc, #12]	; (18cfc <rpa_refresh_stop+0x18>)
   18cf0:	f010 fb42 	bl	29378 <k_delayed_work_cancel>
   18cf4:	e7fa      	b.n	18cec <rpa_refresh_stop+0x8>
   18cf6:	bf00      	nop
   18cf8:	200019a8 	.word	0x200019a8
   18cfc:	200029c0 	.word	0x200029c0

00018d00 <ctrl_lrpa_get>:
	if ((rl_idx >= ARRAY_SIZE(rl)) || !rl[rl_idx].lirk ||
   18d00:	2807      	cmp	r0, #7
   18d02:	d816      	bhi.n	18d32 <ctrl_lrpa_get+0x32>
   18d04:	eb00 0280 	add.w	r2, r0, r0, lsl #2
   18d08:	00d3      	lsls	r3, r2, #3
   18d0a:	4a0d      	ldr	r2, [pc, #52]	; (18d40 <ctrl_lrpa_get+0x40>)
   18d0c:	5cd3      	ldrb	r3, [r2, r3]
   18d0e:	f013 0f08 	tst.w	r3, #8
   18d12:	d010      	beq.n	18d36 <ctrl_lrpa_get+0x36>
	    !rl[rl_idx].rpas_ready) {
   18d14:	eb00 0280 	add.w	r2, r0, r0, lsl #2
   18d18:	00d3      	lsls	r3, r2, #3
   18d1a:	4a09      	ldr	r2, [pc, #36]	; (18d40 <ctrl_lrpa_get+0x40>)
   18d1c:	5cd3      	ldrb	r3, [r2, r3]
	if ((rl_idx >= ARRAY_SIZE(rl)) || !rl[rl_idx].lirk ||
   18d1e:	f013 0f02 	tst.w	r3, #2
   18d22:	d00a      	beq.n	18d3a <ctrl_lrpa_get+0x3a>
	return rl[rl_idx].local_rpa;
   18d24:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   18d28:	00c2      	lsls	r2, r0, #3
   18d2a:	4b05      	ldr	r3, [pc, #20]	; (18d40 <ctrl_lrpa_get+0x40>)
   18d2c:	4413      	add	r3, r2
   18d2e:	6a58      	ldr	r0, [r3, #36]	; 0x24
   18d30:	4770      	bx	lr
		return NULL;
   18d32:	2000      	movs	r0, #0
   18d34:	4770      	bx	lr
   18d36:	2000      	movs	r0, #0
   18d38:	4770      	bx	lr
   18d3a:	2000      	movs	r0, #0
}
   18d3c:	4770      	bx	lr
   18d3e:	bf00      	nop
   18d40:	20001868 	.word	0x20001868

00018d44 <ctrl_irks_get>:
	*count = peer_irk_count;
   18d44:	4b02      	ldr	r3, [pc, #8]	; (18d50 <ctrl_irks_get+0xc>)
   18d46:	781b      	ldrb	r3, [r3, #0]
   18d48:	7003      	strb	r3, [r0, #0]
}
   18d4a:	4802      	ldr	r0, [pc, #8]	; (18d54 <ctrl_irks_get+0x10>)
   18d4c:	4770      	bx	lr
   18d4e:	bf00      	nop
   18d50:	200017dc 	.word	0x200017dc
   18d54:	200017e8 	.word	0x200017e8

00018d58 <ctrl_rl_idx>:
	if (whitelist) {
   18d58:	b1c8      	cbz	r0, 18d8e <ctrl_rl_idx+0x36>
		LL_ASSERT(devmatch_id < ARRAY_SIZE(wl));
   18d5a:	2907      	cmp	r1, #7
   18d5c:	d80b      	bhi.n	18d76 <ctrl_rl_idx+0x1e>
		LL_ASSERT(wl[devmatch_id].taken);
   18d5e:	4b17      	ldr	r3, [pc, #92]	; (18dbc <ctrl_rl_idx+0x64>)
   18d60:	f813 3031 	ldrb.w	r3, [r3, r1, lsl #3]
   18d64:	f013 0f01 	tst.w	r3, #1
   18d68:	d00b      	beq.n	18d82 <ctrl_rl_idx+0x2a>
		i = wl[devmatch_id].rl_idx;
   18d6a:	4b14      	ldr	r3, [pc, #80]	; (18dbc <ctrl_rl_idx+0x64>)
   18d6c:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   18d70:	7849      	ldrb	r1, [r1, #1]
}
   18d72:	4608      	mov	r0, r1
   18d74:	4770      	bx	lr
		LL_ASSERT(devmatch_id < ARRAY_SIZE(wl));
   18d76:	4040      	eors	r0, r0
   18d78:	f380 8811 	msr	BASEPRI, r0
   18d7c:	f04f 0004 	mov.w	r0, #4
   18d80:	df02      	svc	2
		LL_ASSERT(wl[devmatch_id].taken);
   18d82:	4040      	eors	r0, r0
   18d84:	f380 8811 	msr	BASEPRI, r0
   18d88:	f04f 0004 	mov.w	r0, #4
   18d8c:	df02      	svc	2
		LL_ASSERT(devmatch_id < ARRAY_SIZE(rl));
   18d8e:	2907      	cmp	r1, #7
   18d90:	d80d      	bhi.n	18dae <ctrl_rl_idx+0x56>
		LL_ASSERT(rl[i].taken);
   18d92:	eb01 0281 	add.w	r2, r1, r1, lsl #2
   18d96:	00d3      	lsls	r3, r2, #3
   18d98:	4a09      	ldr	r2, [pc, #36]	; (18dc0 <ctrl_rl_idx+0x68>)
   18d9a:	5cd3      	ldrb	r3, [r2, r3]
   18d9c:	f013 0f01 	tst.w	r3, #1
   18da0:	d1e7      	bne.n	18d72 <ctrl_rl_idx+0x1a>
   18da2:	4040      	eors	r0, r0
   18da4:	f380 8811 	msr	BASEPRI, r0
   18da8:	f04f 0004 	mov.w	r0, #4
   18dac:	df02      	svc	2
		LL_ASSERT(devmatch_id < ARRAY_SIZE(rl));
   18dae:	4040      	eors	r0, r0
   18db0:	f380 8811 	msr	BASEPRI, r0
   18db4:	f04f 0004 	mov.w	r0, #4
   18db8:	df02      	svc	2
   18dba:	bf00      	nop
   18dbc:	200019e0 	.word	0x200019e0
   18dc0:	20001868 	.word	0x20001868

00018dc4 <ctrl_rl_irk_idx>:
	LL_ASSERT(irkmatch_id < peer_irk_count);
   18dc4:	4b11      	ldr	r3, [pc, #68]	; (18e0c <ctrl_rl_irk_idx+0x48>)
   18dc6:	781b      	ldrb	r3, [r3, #0]
   18dc8:	4283      	cmp	r3, r0
   18dca:	d90c      	bls.n	18de6 <ctrl_rl_irk_idx+0x22>
	i = peer_irk_rl_ids[irkmatch_id];
   18dcc:	4b10      	ldr	r3, [pc, #64]	; (18e10 <ctrl_rl_irk_idx+0x4c>)
   18dce:	5c18      	ldrb	r0, [r3, r0]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   18dd0:	2807      	cmp	r0, #7
   18dd2:	d80e      	bhi.n	18df2 <ctrl_rl_irk_idx+0x2e>
	LL_ASSERT(rl[i].taken);
   18dd4:	eb00 0280 	add.w	r2, r0, r0, lsl #2
   18dd8:	00d3      	lsls	r3, r2, #3
   18dda:	4a0e      	ldr	r2, [pc, #56]	; (18e14 <ctrl_rl_irk_idx+0x50>)
   18ddc:	5cd3      	ldrb	r3, [r2, r3]
   18dde:	f013 0f01 	tst.w	r3, #1
   18de2:	d00c      	beq.n	18dfe <ctrl_rl_irk_idx+0x3a>
}
   18de4:	4770      	bx	lr
	LL_ASSERT(irkmatch_id < peer_irk_count);
   18de6:	4040      	eors	r0, r0
   18de8:	f380 8811 	msr	BASEPRI, r0
   18dec:	f04f 0004 	mov.w	r0, #4
   18df0:	df02      	svc	2
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   18df2:	4040      	eors	r0, r0
   18df4:	f380 8811 	msr	BASEPRI, r0
   18df8:	f04f 0004 	mov.w	r0, #4
   18dfc:	df02      	svc	2
	LL_ASSERT(rl[i].taken);
   18dfe:	4040      	eors	r0, r0
   18e00:	f380 8811 	msr	BASEPRI, r0
   18e04:	f04f 0004 	mov.w	r0, #4
   18e08:	df02      	svc	2
   18e0a:	bf00      	nop
   18e0c:	200017dc 	.word	0x200017dc
   18e10:	200017e0 	.word	0x200017e0
   18e14:	20001868 	.word	0x20001868

00018e18 <ctrl_irk_whitelisted>:
	if (rl_idx >= ARRAY_SIZE(rl)) {
   18e18:	2807      	cmp	r0, #7
   18e1a:	d815      	bhi.n	18e48 <ctrl_irk_whitelisted+0x30>
	LL_ASSERT(rl[rl_idx].taken);
   18e1c:	eb00 0280 	add.w	r2, r0, r0, lsl #2
   18e20:	00d3      	lsls	r3, r2, #3
   18e22:	4a0a      	ldr	r2, [pc, #40]	; (18e4c <ctrl_irk_whitelisted+0x34>)
   18e24:	5cd3      	ldrb	r3, [r2, r3]
   18e26:	f013 0f01 	tst.w	r3, #1
   18e2a:	d007      	beq.n	18e3c <ctrl_irk_whitelisted+0x24>
	return rl[rl_idx].wl;
   18e2c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   18e30:	00c3      	lsls	r3, r0, #3
   18e32:	4a06      	ldr	r2, [pc, #24]	; (18e4c <ctrl_irk_whitelisted+0x34>)
   18e34:	5cd0      	ldrb	r0, [r2, r3]
   18e36:	f3c0 1040 	ubfx	r0, r0, #5, #1
   18e3a:	4770      	bx	lr
	LL_ASSERT(rl[rl_idx].taken);
   18e3c:	4040      	eors	r0, r0
   18e3e:	f380 8811 	msr	BASEPRI, r0
   18e42:	f04f 0004 	mov.w	r0, #4
   18e46:	df02      	svc	2
		return false;
   18e48:	2000      	movs	r0, #0
}
   18e4a:	4770      	bx	lr
   18e4c:	20001868 	.word	0x20001868

00018e50 <ctrl_filter_get>:
	if (whitelist) {
   18e50:	b908      	cbnz	r0, 18e56 <ctrl_filter_get+0x6>
	return &rl_filter;
   18e52:	4802      	ldr	r0, [pc, #8]	; (18e5c <ctrl_filter_get+0xc>)
}
   18e54:	4770      	bx	lr
		return &wl_filter;
   18e56:	4802      	ldr	r0, [pc, #8]	; (18e60 <ctrl_filter_get+0x10>)
   18e58:	4770      	bx	lr
   18e5a:	bf00      	nop
   18e5c:	200019ac 	.word	0x200019ac
   18e60:	20001a20 	.word	0x20001a20

00018e64 <ll_wl_size_get>:
}
   18e64:	2008      	movs	r0, #8
   18e66:	4770      	bx	lr

00018e68 <ll_wl_clear>:
{
   18e68:	b510      	push	{r4, lr}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   18e6a:	f7fe fb47 	bl	174fc <radio_adv_filter_pol_get>
   18e6e:	b110      	cbz	r0, 18e76 <ll_wl_clear+0xe>
		return BT_HCI_ERR_CMD_DISALLOWED;
   18e70:	240c      	movs	r4, #12
}
   18e72:	4620      	mov	r0, r4
   18e74:	bd10      	pop	{r4, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   18e76:	f7fe fb59 	bl	1752c <radio_scan_filter_pol_get>
   18e7a:	f010 0401 	ands.w	r4, r0, #1
   18e7e:	d001      	beq.n	18e84 <ll_wl_clear+0x1c>
		return BT_HCI_ERR_CMD_DISALLOWED;
   18e80:	240c      	movs	r4, #12
   18e82:	e7f6      	b.n	18e72 <ll_wl_clear+0xa>
	wl_clear();
   18e84:	f7ff fdfe 	bl	18a84 <wl_clear>
	wl_anon = 0;
   18e88:	2200      	movs	r2, #0
   18e8a:	4b01      	ldr	r3, [pc, #4]	; (18e90 <ll_wl_clear+0x28>)
   18e8c:	701a      	strb	r2, [r3, #0]
	return 0;
   18e8e:	e7f0      	b.n	18e72 <ll_wl_clear+0xa>
   18e90:	20002950 	.word	0x20002950

00018e94 <ll_wl_remove>:
{
   18e94:	b510      	push	{r4, lr}
   18e96:	4604      	mov	r4, r0
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   18e98:	f7fe fb30 	bl	174fc <radio_adv_filter_pol_get>
   18e9c:	b108      	cbz	r0, 18ea2 <ll_wl_remove+0xe>
		return BT_HCI_ERR_CMD_DISALLOWED;
   18e9e:	200c      	movs	r0, #12
   18ea0:	bd10      	pop	{r4, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   18ea2:	f7fe fb43 	bl	1752c <radio_scan_filter_pol_get>
   18ea6:	f010 0001 	ands.w	r0, r0, #1
   18eaa:	d001      	beq.n	18eb0 <ll_wl_remove+0x1c>
		return BT_HCI_ERR_CMD_DISALLOWED;
   18eac:	200c      	movs	r0, #12
}
   18eae:	bd10      	pop	{r4, pc}
	if (addr->type == ADDR_TYPE_ANON) {
   18eb0:	7823      	ldrb	r3, [r4, #0]
   18eb2:	2bff      	cmp	r3, #255	; 0xff
   18eb4:	d003      	beq.n	18ebe <ll_wl_remove+0x2a>
	return wl_remove(addr);
   18eb6:	4620      	mov	r0, r4
   18eb8:	f7ff fe46 	bl	18b48 <wl_remove>
   18ebc:	bd10      	pop	{r4, pc}
		wl_anon = 0;
   18ebe:	2200      	movs	r2, #0
   18ec0:	4b01      	ldr	r3, [pc, #4]	; (18ec8 <ll_wl_remove+0x34>)
   18ec2:	701a      	strb	r2, [r3, #0]
		return 0;
   18ec4:	bd10      	pop	{r4, pc}
   18ec6:	bf00      	nop
   18ec8:	20002950 	.word	0x20002950

00018ecc <ll_filters_adv_update>:
{
   18ecc:	b508      	push	{r3, lr}
	if (adv_fp && !(radio_scan_filter_pol_get() & 0x1)) {
   18ece:	b918      	cbnz	r0, 18ed8 <ll_filters_adv_update+0xc>
	if (rl_enable && !radio_scan_is_enabled()) {
   18ed0:	4b09      	ldr	r3, [pc, #36]	; (18ef8 <ll_filters_adv_update+0x2c>)
   18ed2:	781b      	ldrb	r3, [r3, #0]
   18ed4:	b943      	cbnz	r3, 18ee8 <ll_filters_adv_update+0x1c>
   18ed6:	bd08      	pop	{r3, pc}
	if (adv_fp && !(radio_scan_filter_pol_get() & 0x1)) {
   18ed8:	f7fe fb28 	bl	1752c <radio_scan_filter_pol_get>
   18edc:	f010 0f01 	tst.w	r0, #1
   18ee0:	d1f6      	bne.n	18ed0 <ll_filters_adv_update+0x4>
		filter_wl_update();
   18ee2:	f7ff fe6f 	bl	18bc4 <filter_wl_update>
   18ee6:	e7f3      	b.n	18ed0 <ll_filters_adv_update+0x4>
	if (rl_enable && !radio_scan_is_enabled()) {
   18ee8:	f7fe fb18 	bl	1751c <radio_scan_is_enabled>
   18eec:	2800      	cmp	r0, #0
   18eee:	d1f2      	bne.n	18ed6 <ll_filters_adv_update+0xa>
		filter_rl_update();
   18ef0:	f7ff fea8 	bl	18c44 <filter_rl_update>
}
   18ef4:	e7ef      	b.n	18ed6 <ll_filters_adv_update+0xa>
   18ef6:	bf00      	nop
   18ef8:	200019a8 	.word	0x200019a8

00018efc <ll_filters_scan_update>:
{
   18efc:	b508      	push	{r3, lr}
	if ((scan_fp & 0x1) && !radio_adv_filter_pol_get()) {
   18efe:	f010 0f01 	tst.w	r0, #1
   18f02:	d103      	bne.n	18f0c <ll_filters_scan_update+0x10>
	if (rl_enable && !radio_adv_is_enabled()) {
   18f04:	4b08      	ldr	r3, [pc, #32]	; (18f28 <ll_filters_scan_update+0x2c>)
   18f06:	781b      	ldrb	r3, [r3, #0]
   18f08:	b93b      	cbnz	r3, 18f1a <ll_filters_scan_update+0x1e>
   18f0a:	bd08      	pop	{r3, pc}
	if ((scan_fp & 0x1) && !radio_adv_filter_pol_get()) {
   18f0c:	f7fe faf6 	bl	174fc <radio_adv_filter_pol_get>
   18f10:	2800      	cmp	r0, #0
   18f12:	d1f7      	bne.n	18f04 <ll_filters_scan_update+0x8>
		filter_wl_update();
   18f14:	f7ff fe56 	bl	18bc4 <filter_wl_update>
   18f18:	e7f4      	b.n	18f04 <ll_filters_scan_update+0x8>
	if (rl_enable && !radio_adv_is_enabled()) {
   18f1a:	f7fe fae7 	bl	174ec <radio_adv_is_enabled>
   18f1e:	2800      	cmp	r0, #0
   18f20:	d1f3      	bne.n	18f0a <ll_filters_scan_update+0xe>
		filter_rl_update();
   18f22:	f7ff fe8f 	bl	18c44 <filter_rl_update>
}
   18f26:	e7f0      	b.n	18f0a <ll_filters_scan_update+0xe>
   18f28:	200019a8 	.word	0x200019a8

00018f2c <ll_rl_find>:
{
   18f2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18f30:	4607      	mov	r7, r0
   18f32:	4688      	mov	r8, r1
	if (free) {
   18f34:	4616      	mov	r6, r2
   18f36:	b10a      	cbz	r2, 18f3c <ll_rl_find+0x10>
		*free = FILTER_IDX_NONE;
   18f38:	23ff      	movs	r3, #255	; 0xff
   18f3a:	7013      	strb	r3, [r2, #0]
{
   18f3c:	2400      	movs	r4, #0
   18f3e:	e00e      	b.n	18f5e <ll_rl_find+0x32>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   18f40:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   18f44:	00d3      	lsls	r3, r2, #3
   18f46:	481a      	ldr	r0, [pc, #104]	; (18fb0 <ll_rl_find+0x84>)
   18f48:	4418      	add	r0, r3
   18f4a:	2206      	movs	r2, #6
   18f4c:	4641      	mov	r1, r8
   18f4e:	3001      	adds	r0, #1
   18f50:	f011 fd04 	bl	2a95c <memcmp>
   18f54:	b9c8      	cbnz	r0, 18f8a <ll_rl_find+0x5e>
   18f56:	e027      	b.n	18fa8 <ll_rl_find+0x7c>
			*free = i;
   18f58:	7034      	strb	r4, [r6, #0]
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   18f5a:	3401      	adds	r4, #1
   18f5c:	b2e4      	uxtb	r4, r4
   18f5e:	2c07      	cmp	r4, #7
   18f60:	d821      	bhi.n	18fa6 <ll_rl_find+0x7a>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   18f62:	4625      	mov	r5, r4
   18f64:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   18f68:	00d3      	lsls	r3, r2, #3
   18f6a:	4a11      	ldr	r2, [pc, #68]	; (18fb0 <ll_rl_find+0x84>)
   18f6c:	5cd3      	ldrb	r3, [r2, r3]
   18f6e:	f013 0f01 	tst.w	r3, #1
   18f72:	d00a      	beq.n	18f8a <ll_rl_find+0x5e>
   18f74:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   18f78:	00d3      	lsls	r3, r2, #3
   18f7a:	4a0d      	ldr	r2, [pc, #52]	; (18fb0 <ll_rl_find+0x84>)
   18f7c:	5cd3      	ldrb	r3, [r2, r3]
   18f7e:	f3c3 1380 	ubfx	r3, r3, #6, #1
   18f82:	f007 0201 	and.w	r2, r7, #1
   18f86:	4293      	cmp	r3, r2
   18f88:	d0da      	beq.n	18f40 <ll_rl_find+0x14>
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
   18f8a:	2e00      	cmp	r6, #0
   18f8c:	d0e5      	beq.n	18f5a <ll_rl_find+0x2e>
   18f8e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   18f92:	00eb      	lsls	r3, r5, #3
   18f94:	4a06      	ldr	r2, [pc, #24]	; (18fb0 <ll_rl_find+0x84>)
   18f96:	5cd3      	ldrb	r3, [r2, r3]
   18f98:	f013 0f01 	tst.w	r3, #1
   18f9c:	d1dd      	bne.n	18f5a <ll_rl_find+0x2e>
   18f9e:	7833      	ldrb	r3, [r6, #0]
   18fa0:	2bff      	cmp	r3, #255	; 0xff
   18fa2:	d1da      	bne.n	18f5a <ll_rl_find+0x2e>
   18fa4:	e7d8      	b.n	18f58 <ll_rl_find+0x2c>
	return FILTER_IDX_NONE;
   18fa6:	24ff      	movs	r4, #255	; 0xff
}
   18fa8:	4620      	mov	r0, r4
   18faa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18fae:	bf00      	nop
   18fb0:	20001868 	.word	0x20001868

00018fb4 <wl_add>:
{
   18fb4:	b570      	push	{r4, r5, r6, lr}
   18fb6:	b082      	sub	sp, #8
   18fb8:	4605      	mov	r5, r0
	i = wl_find(id_addr->type, id_addr->a.val, &j);
   18fba:	4604      	mov	r4, r0
   18fbc:	f814 0b01 	ldrb.w	r0, [r4], #1
   18fc0:	f10d 0207 	add.w	r2, sp, #7
   18fc4:	4621      	mov	r1, r4
   18fc6:	f7ff fd87 	bl	18ad8 <wl_find>
	if (i < ARRAY_SIZE(wl)) {
   18fca:	2807      	cmp	r0, #7
   18fcc:	d802      	bhi.n	18fd4 <wl_add+0x20>
		return BT_HCI_ERR_INVALID_PARAM;
   18fce:	2012      	movs	r0, #18
}
   18fd0:	b002      	add	sp, #8
   18fd2:	bd70      	pop	{r4, r5, r6, pc}
	} else if (j >= ARRAY_SIZE(wl)) {
   18fd4:	f89d 6007 	ldrb.w	r6, [sp, #7]
   18fd8:	2e07      	cmp	r6, #7
   18fda:	d901      	bls.n	18fe0 <wl_add+0x2c>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   18fdc:	2007      	movs	r0, #7
   18fde:	e7f7      	b.n	18fd0 <wl_add+0x1c>
	wl[i].id_addr_type = id_addr->type & 0x1;
   18fe0:	4629      	mov	r1, r5
   18fe2:	f811 2b01 	ldrb.w	r2, [r1], #1
   18fe6:	4817      	ldr	r0, [pc, #92]	; (19044 <wl_add+0x90>)
   18fe8:	f810 3036 	ldrb.w	r3, [r0, r6, lsl #3]
   18fec:	f362 0341 	bfi	r3, r2, #1, #1
   18ff0:	f800 3036 	strb.w	r3, [r0, r6, lsl #3]
	bt_addr_copy(&wl[i].id_addr, &id_addr->a);
   18ff4:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
	memcpy(dst, src, sizeof(*dst));
   18ff8:	2206      	movs	r2, #6
   18ffa:	3002      	adds	r0, #2
   18ffc:	f7e7 f960 	bl	2c0 <memcpy>
	j = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   19000:	2200      	movs	r2, #0
   19002:	4621      	mov	r1, r4
   19004:	7828      	ldrb	r0, [r5, #0]
   19006:	f7ff ff91 	bl	18f2c <ll_rl_find>
	if (j < ARRAY_SIZE(rl)) {
   1900a:	2807      	cmp	r0, #7
   1900c:	d814      	bhi.n	19038 <wl_add+0x84>
		wl[i].rl_idx = j;
   1900e:	4b0d      	ldr	r3, [pc, #52]	; (19044 <wl_add+0x90>)
   19010:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
   19014:	7058      	strb	r0, [r3, #1]
		rl[j].wl = 1;
   19016:	490c      	ldr	r1, [pc, #48]	; (19048 <wl_add+0x94>)
   19018:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1901c:	00c3      	lsls	r3, r0, #3
   1901e:	5cca      	ldrb	r2, [r1, r3]
   19020:	f042 0220 	orr.w	r2, r2, #32
   19024:	54ca      	strb	r2, [r1, r3]
	wl[i].taken = 1;
   19026:	4a07      	ldr	r2, [pc, #28]	; (19044 <wl_add+0x90>)
   19028:	f812 3036 	ldrb.w	r3, [r2, r6, lsl #3]
   1902c:	f043 0301 	orr.w	r3, r3, #1
   19030:	f802 3036 	strb.w	r3, [r2, r6, lsl #3]
	return 0;
   19034:	2000      	movs	r0, #0
   19036:	e7cb      	b.n	18fd0 <wl_add+0x1c>
		wl[i].rl_idx = FILTER_IDX_NONE;
   19038:	4b02      	ldr	r3, [pc, #8]	; (19044 <wl_add+0x90>)
   1903a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
   1903e:	22ff      	movs	r2, #255	; 0xff
   19040:	705a      	strb	r2, [r3, #1]
   19042:	e7f0      	b.n	19026 <wl_add+0x72>
   19044:	200019e0 	.word	0x200019e0
   19048:	20001868 	.word	0x20001868

0001904c <ll_wl_add>:
{
   1904c:	b510      	push	{r4, lr}
   1904e:	4604      	mov	r4, r0
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   19050:	f7fe fa54 	bl	174fc <radio_adv_filter_pol_get>
   19054:	b108      	cbz	r0, 1905a <ll_wl_add+0xe>
		return BT_HCI_ERR_CMD_DISALLOWED;
   19056:	200c      	movs	r0, #12
   19058:	bd10      	pop	{r4, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   1905a:	f7fe fa67 	bl	1752c <radio_scan_filter_pol_get>
   1905e:	f010 0001 	ands.w	r0, r0, #1
   19062:	d001      	beq.n	19068 <ll_wl_add+0x1c>
		return BT_HCI_ERR_CMD_DISALLOWED;
   19064:	200c      	movs	r0, #12
}
   19066:	bd10      	pop	{r4, pc}
	if (addr->type == ADDR_TYPE_ANON) {
   19068:	7823      	ldrb	r3, [r4, #0]
   1906a:	2bff      	cmp	r3, #255	; 0xff
   1906c:	d003      	beq.n	19076 <ll_wl_add+0x2a>
	return wl_add(addr);
   1906e:	4620      	mov	r0, r4
   19070:	f7ff ffa0 	bl	18fb4 <wl_add>
   19074:	bd10      	pop	{r4, pc}
		wl_anon = 1;
   19076:	2201      	movs	r2, #1
   19078:	4b01      	ldr	r3, [pc, #4]	; (19080 <ll_wl_add+0x34>)
   1907a:	701a      	strb	r2, [r3, #0]
		return 0;
   1907c:	bd10      	pop	{r4, pc}
   1907e:	bf00      	nop
   19080:	20002950 	.word	0x20002950

00019084 <ctrl_rl_idx_allowed>:
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || irkmatch_ok) {
   19084:	4b17      	ldr	r3, [pc, #92]	; (190e4 <ctrl_rl_idx_allowed+0x60>)
   19086:	781b      	ldrb	r3, [r3, #0]
   19088:	b32b      	cbz	r3, 190d6 <ctrl_rl_idx_allowed+0x52>
   1908a:	2907      	cmp	r1, #7
   1908c:	d825      	bhi.n	190da <ctrl_rl_idx_allowed+0x56>
   1908e:	bb30      	cbnz	r0, 190de <ctrl_rl_idx_allowed+0x5a>
	LL_ASSERT(rl[rl_idx].taken);
   19090:	eb01 0281 	add.w	r2, r1, r1, lsl #2
   19094:	00d3      	lsls	r3, r2, #3
   19096:	4a14      	ldr	r2, [pc, #80]	; (190e8 <ctrl_rl_idx_allowed+0x64>)
   19098:	5cd3      	ldrb	r3, [r2, r3]
   1909a:	f013 0f01 	tst.w	r3, #1
   1909e:	d010      	beq.n	190c2 <ctrl_rl_idx_allowed+0x3e>
	return !rl[rl_idx].pirk || rl[rl_idx].dev;
   190a0:	eb01 0281 	add.w	r2, r1, r1, lsl #2
   190a4:	00d3      	lsls	r3, r2, #3
   190a6:	4a10      	ldr	r2, [pc, #64]	; (190e8 <ctrl_rl_idx_allowed+0x64>)
   190a8:	5cd3      	ldrb	r3, [r2, r3]
   190aa:	f013 0f04 	tst.w	r3, #4
   190ae:	d00e      	beq.n	190ce <ctrl_rl_idx_allowed+0x4a>
   190b0:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   190b4:	00cb      	lsls	r3, r1, #3
   190b6:	5cd3      	ldrb	r3, [r2, r3]
   190b8:	f013 0f10 	tst.w	r3, #16
   190bc:	d009      	beq.n	190d2 <ctrl_rl_idx_allowed+0x4e>
   190be:	2001      	movs	r0, #1
   190c0:	4770      	bx	lr
	LL_ASSERT(rl[rl_idx].taken);
   190c2:	4040      	eors	r0, r0
   190c4:	f380 8811 	msr	BASEPRI, r0
   190c8:	f04f 0004 	mov.w	r0, #4
   190cc:	df02      	svc	2
	return !rl[rl_idx].pirk || rl[rl_idx].dev;
   190ce:	2001      	movs	r0, #1
   190d0:	4770      	bx	lr
   190d2:	2000      	movs	r0, #0
   190d4:	4770      	bx	lr
		return true;
   190d6:	2001      	movs	r0, #1
   190d8:	4770      	bx	lr
   190da:	2001      	movs	r0, #1
   190dc:	4770      	bx	lr
   190de:	2001      	movs	r0, #1
}
   190e0:	4770      	bx	lr
   190e2:	bf00      	nop
   190e4:	200019a8 	.word	0x200019a8
   190e8:	20001868 	.word	0x20001868

000190ec <ll_rl_id_addr_get>:
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   190ec:	2807      	cmp	r0, #7
   190ee:	d81a      	bhi.n	19126 <ll_rl_id_addr_get+0x3a>
{
   190f0:	b570      	push	{r4, r5, r6, lr}
   190f2:	4603      	mov	r3, r0
	LL_ASSERT(rl[rl_idx].taken);
   190f4:	eb00 0580 	add.w	r5, r0, r0, lsl #2
   190f8:	00ec      	lsls	r4, r5, #3
   190fa:	4811      	ldr	r0, [pc, #68]	; (19140 <ll_rl_id_addr_get+0x54>)
   190fc:	5d00      	ldrb	r0, [r0, r4]
   190fe:	f010 0f01 	tst.w	r0, #1
   19102:	d016      	beq.n	19132 <ll_rl_id_addr_get+0x46>
   19104:	4610      	mov	r0, r2
	*id_addr_type = rl[rl_idx].id_addr_type;
   19106:	4d0e      	ldr	r5, [pc, #56]	; (19140 <ll_rl_id_addr_get+0x54>)
   19108:	009c      	lsls	r4, r3, #2
   1910a:	18e6      	adds	r6, r4, r3
   1910c:	00f2      	lsls	r2, r6, #3
   1910e:	4616      	mov	r6, r2
   19110:	5caa      	ldrb	r2, [r5, r2]
   19112:	f3c2 1280 	ubfx	r2, r2, #6, #1
   19116:	700a      	strb	r2, [r1, #0]
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   19118:	4631      	mov	r1, r6
   1911a:	4429      	add	r1, r5
   1911c:	2206      	movs	r2, #6
   1911e:	3101      	adds	r1, #1
   19120:	f7e7 f8ce 	bl	2c0 <memcpy>
   19124:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   19126:	4040      	eors	r0, r0
   19128:	f380 8811 	msr	BASEPRI, r0
   1912c:	f04f 0004 	mov.w	r0, #4
   19130:	df02      	svc	2
	LL_ASSERT(rl[rl_idx].taken);
   19132:	4040      	eors	r0, r0
   19134:	f380 8811 	msr	BASEPRI, r0
   19138:	f04f 0004 	mov.w	r0, #4
   1913c:	df02      	svc	2
   1913e:	bf00      	nop
   19140:	20001868 	.word	0x20001868

00019144 <ctrl_rl_addr_allowed>:
	if (!rl_enable || *rl_idx != FILTER_IDX_NONE) {
   19144:	4b29      	ldr	r3, [pc, #164]	; (191ec <ctrl_rl_addr_allowed+0xa8>)
   19146:	781b      	ldrb	r3, [r3, #0]
   19148:	2b00      	cmp	r3, #0
   1914a:	d04a      	beq.n	191e2 <ctrl_rl_addr_allowed+0x9e>
   1914c:	7813      	ldrb	r3, [r2, #0]
   1914e:	2bff      	cmp	r3, #255	; 0xff
   19150:	d001      	beq.n	19156 <ctrl_rl_addr_allowed+0x12>
		return true;
   19152:	2001      	movs	r0, #1
   19154:	4770      	bx	lr
   19156:	2300      	movs	r3, #0
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   19158:	2b07      	cmp	r3, #7
   1915a:	d844      	bhi.n	191e6 <ctrl_rl_addr_allowed+0xa2>
{
   1915c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1915e:	e005      	b.n	1916c <ctrl_rl_addr_allowed+0x28>
			if (j == BDADDR_SIZE) {
   19160:	2c06      	cmp	r4, #6
   19162:	d026      	beq.n	191b2 <ctrl_rl_addr_allowed+0x6e>
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   19164:	3301      	adds	r3, #1
   19166:	b2db      	uxtb	r3, r3
   19168:	2b07      	cmp	r3, #7
   1916a:	d838      	bhi.n	191de <ctrl_rl_addr_allowed+0x9a>
		if (rl[i].taken && (rl[i].id_addr_type == id_addr_type)) {
   1916c:	461e      	mov	r6, r3
   1916e:	eb03 0583 	add.w	r5, r3, r3, lsl #2
   19172:	00ec      	lsls	r4, r5, #3
   19174:	4d1e      	ldr	r5, [pc, #120]	; (191f0 <ctrl_rl_addr_allowed+0xac>)
   19176:	5d2c      	ldrb	r4, [r5, r4]
   19178:	f014 0f01 	tst.w	r4, #1
   1917c:	d0f2      	beq.n	19164 <ctrl_rl_addr_allowed+0x20>
   1917e:	eb03 0583 	add.w	r5, r3, r3, lsl #2
   19182:	00ec      	lsls	r4, r5, #3
   19184:	4d1a      	ldr	r5, [pc, #104]	; (191f0 <ctrl_rl_addr_allowed+0xac>)
   19186:	5d2c      	ldrb	r4, [r5, r4]
   19188:	f3c4 1480 	ubfx	r4, r4, #6, #1
   1918c:	4284      	cmp	r4, r0
   1918e:	d1e9      	bne.n	19164 <ctrl_rl_addr_allowed+0x20>
			u8_t *addr = rl[i].id_addr.val;
   19190:	eb03 0583 	add.w	r5, r3, r3, lsl #2
   19194:	00ec      	lsls	r4, r5, #3
   19196:	4d16      	ldr	r5, [pc, #88]	; (191f0 <ctrl_rl_addr_allowed+0xac>)
   19198:	4425      	add	r5, r4
   1919a:	3501      	adds	r5, #1
			for (j = 0; j < BDADDR_SIZE; j++) {
   1919c:	2400      	movs	r4, #0
   1919e:	2c05      	cmp	r4, #5
   191a0:	d8de      	bhi.n	19160 <ctrl_rl_addr_allowed+0x1c>
				if (addr[j] != id_addr[j]) {
   191a2:	f815 e004 	ldrb.w	lr, [r5, r4]
   191a6:	5d0f      	ldrb	r7, [r1, r4]
   191a8:	45be      	cmp	lr, r7
   191aa:	d1d9      	bne.n	19160 <ctrl_rl_addr_allowed+0x1c>
			for (j = 0; j < BDADDR_SIZE; j++) {
   191ac:	3401      	adds	r4, #1
   191ae:	b2e4      	uxtb	r4, r4
   191b0:	e7f5      	b.n	1919e <ctrl_rl_addr_allowed+0x5a>
				*rl_idx = i;
   191b2:	7013      	strb	r3, [r2, #0]
				return !rl[i].pirk || rl[i].dev;
   191b4:	eb06 0286 	add.w	r2, r6, r6, lsl #2
   191b8:	00d3      	lsls	r3, r2, #3
   191ba:	4a0d      	ldr	r2, [pc, #52]	; (191f0 <ctrl_rl_addr_allowed+0xac>)
   191bc:	5cd3      	ldrb	r3, [r2, r3]
   191be:	f013 0f04 	tst.w	r3, #4
   191c2:	d00a      	beq.n	191da <ctrl_rl_addr_allowed+0x96>
   191c4:	eb06 0686 	add.w	r6, r6, r6, lsl #2
   191c8:	00f3      	lsls	r3, r6, #3
   191ca:	5cd3      	ldrb	r3, [r2, r3]
   191cc:	f013 0f10 	tst.w	r3, #16
   191d0:	d101      	bne.n	191d6 <ctrl_rl_addr_allowed+0x92>
   191d2:	2000      	movs	r0, #0
   191d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   191d6:	2001      	movs	r0, #1
   191d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   191da:	2001      	movs	r0, #1
   191dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return true;
   191de:	2001      	movs	r0, #1
   191e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return true;
   191e2:	2001      	movs	r0, #1
   191e4:	4770      	bx	lr
	return true;
   191e6:	2001      	movs	r0, #1
}
   191e8:	4770      	bx	lr
   191ea:	bf00      	nop
   191ec:	200019a8 	.word	0x200019a8
   191f0:	20001868 	.word	0x20001868

000191f4 <ctrl_rl_addr_resolve>:
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || !rl[rl_idx].lirk) {
   191f4:	4b13      	ldr	r3, [pc, #76]	; (19244 <ctrl_rl_addr_resolve+0x50>)
   191f6:	781b      	ldrb	r3, [r3, #0]
   191f8:	b1db      	cbz	r3, 19232 <ctrl_rl_addr_resolve+0x3e>
   191fa:	2a07      	cmp	r2, #7
   191fc:	d81b      	bhi.n	19236 <ctrl_rl_addr_resolve+0x42>
{
   191fe:	b510      	push	{r4, lr}
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || !rl[rl_idx].lirk) {
   19200:	eb02 0482 	add.w	r4, r2, r2, lsl #2
   19204:	00e3      	lsls	r3, r4, #3
   19206:	4c10      	ldr	r4, [pc, #64]	; (19248 <ctrl_rl_addr_resolve+0x54>)
   19208:	5ce3      	ldrb	r3, [r4, r3]
   1920a:	f013 0f08 	tst.w	r3, #8
   1920e:	d014      	beq.n	1923a <ctrl_rl_addr_resolve+0x46>
	if ((id_addr_type != 0) && ((id_addr[5] & 0xc0) == 0x40)) {
   19210:	b1a8      	cbz	r0, 1923e <ctrl_rl_addr_resolve+0x4a>
   19212:	794b      	ldrb	r3, [r1, #5]
   19214:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   19218:	2b40      	cmp	r3, #64	; 0x40
   1921a:	d001      	beq.n	19220 <ctrl_rl_addr_resolve+0x2c>
	return false;
   1921c:	2000      	movs	r0, #0
}
   1921e:	bd10      	pop	{r4, pc}
		return bt_rpa_irk_matches(rl[rl_idx].local_irk,
   19220:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   19224:	00d3      	lsls	r3, r2, #3
   19226:	4620      	mov	r0, r4
   19228:	4418      	add	r0, r3
   1922a:	3007      	adds	r0, #7
   1922c:	f7ea fbc8 	bl	39c0 <bt_rpa_irk_matches>
   19230:	bd10      	pop	{r4, pc}
		return false;
   19232:	2000      	movs	r0, #0
   19234:	4770      	bx	lr
   19236:	2000      	movs	r0, #0
   19238:	4770      	bx	lr
   1923a:	2000      	movs	r0, #0
   1923c:	bd10      	pop	{r4, pc}
	return false;
   1923e:	2000      	movs	r0, #0
   19240:	bd10      	pop	{r4, pc}
   19242:	bf00      	nop
   19244:	200019a8 	.word	0x200019a8
   19248:	20001868 	.word	0x20001868

0001924c <ctrl_rl_enabled>:
	return rl_enable;
   1924c:	4b02      	ldr	r3, [pc, #8]	; (19258 <ctrl_rl_enabled+0xc>)
   1924e:	7818      	ldrb	r0, [r3, #0]
}
   19250:	3000      	adds	r0, #0
   19252:	bf18      	it	ne
   19254:	2001      	movne	r0, #1
   19256:	4770      	bx	lr
   19258:	200019a8 	.word	0x200019a8

0001925c <ll_rl_pdu_adv_update>:
{
   1925c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1925e:	4605      	mov	r5, r0
   19260:	460c      	mov	r4, r1
	u8_t *adva = pdu->type == PDU_ADV_TYPE_SCAN_RSP ?
   19262:	780b      	ldrb	r3, [r1, #0]
   19264:	f003 030f 	and.w	r3, r3, #15
				  &pdu->payload.scan_rsp.addr[0] :
   19268:	2b04      	cmp	r3, #4
   1926a:	d024      	beq.n	192b6 <ll_rl_pdu_adv_update+0x5a>
   1926c:	1c8f      	adds	r7, r1, #2
	struct ll_adv_set *ll_adv = ll_adv_set_get();
   1926e:	f000 fbc5 	bl	199fc <ll_adv_set_get>
   19272:	4606      	mov	r6, r0
	if (idx < ARRAY_SIZE(rl) && rl[idx].lirk) {
   19274:	2d07      	cmp	r5, #7
   19276:	d826      	bhi.n	192c6 <ll_rl_pdu_adv_update+0x6a>
   19278:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   1927c:	00d3      	lsls	r3, r2, #3
   1927e:	4a30      	ldr	r2, [pc, #192]	; (19340 <ll_rl_pdu_adv_update+0xe4>)
   19280:	5cd3      	ldrb	r3, [r2, r3]
   19282:	f013 0f08 	tst.w	r3, #8
   19286:	d01e      	beq.n	192c6 <ll_rl_pdu_adv_update+0x6a>
		LL_ASSERT(rl[idx].rpas_ready);
   19288:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   1928c:	00d3      	lsls	r3, r2, #3
   1928e:	4a2c      	ldr	r2, [pc, #176]	; (19340 <ll_rl_pdu_adv_update+0xe4>)
   19290:	5cd3      	ldrb	r3, [r2, r3]
   19292:	f013 0f02 	tst.w	r3, #2
   19296:	d010      	beq.n	192ba <ll_rl_pdu_adv_update+0x5e>
		pdu->tx_addr = 1;
   19298:	7823      	ldrb	r3, [r4, #0]
   1929a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1929e:	7023      	strb	r3, [r4, #0]
		memcpy(adva, rl[idx].local_rpa->val, BDADDR_SIZE);
   192a0:	eb05 0385 	add.w	r3, r5, r5, lsl #2
   192a4:	00da      	lsls	r2, r3, #3
   192a6:	4b26      	ldr	r3, [pc, #152]	; (19340 <ll_rl_pdu_adv_update+0xe4>)
   192a8:	4413      	add	r3, r2
   192aa:	2206      	movs	r2, #6
   192ac:	6a59      	ldr	r1, [r3, #36]	; 0x24
   192ae:	4638      	mov	r0, r7
   192b0:	f7e7 f806 	bl	2c0 <memcpy>
   192b4:	e014      	b.n	192e0 <ll_rl_pdu_adv_update+0x84>
				  &pdu->payload.scan_rsp.addr[0] :
   192b6:	1c8f      	adds	r7, r1, #2
   192b8:	e7d9      	b.n	1926e <ll_rl_pdu_adv_update+0x12>
		LL_ASSERT(rl[idx].rpas_ready);
   192ba:	4040      	eors	r0, r0
   192bc:	f380 8811 	msr	BASEPRI, r0
   192c0:	f04f 0004 	mov.w	r0, #4
   192c4:	df02      	svc	2
		pdu->tx_addr = ll_adv->own_addr_type & 0x1;
   192c6:	7833      	ldrb	r3, [r6, #0]
   192c8:	f3c3 1340 	ubfx	r3, r3, #5, #1
   192cc:	7822      	ldrb	r2, [r4, #0]
   192ce:	f363 1286 	bfi	r2, r3, #6, #1
   192d2:	7022      	strb	r2, [r4, #0]
		ll_addr_get(ll_adv->own_addr_type & 0x1, adva);
   192d4:	7830      	ldrb	r0, [r6, #0]
   192d6:	4639      	mov	r1, r7
   192d8:	f3c0 1040 	ubfx	r0, r0, #5, #1
   192dc:	f7ff fba0 	bl	18a20 <ll_addr_get>
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   192e0:	7823      	ldrb	r3, [r4, #0]
   192e2:	f003 030f 	and.w	r3, r3, #15
   192e6:	2b01      	cmp	r3, #1
   192e8:	d000      	beq.n	192ec <ll_rl_pdu_adv_update+0x90>
   192ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (idx < ARRAY_SIZE(rl) && rl[idx].pirk) {
   192ec:	2d07      	cmp	r5, #7
   192ee:	d807      	bhi.n	19300 <ll_rl_pdu_adv_update+0xa4>
   192f0:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   192f4:	00d3      	lsls	r3, r2, #3
   192f6:	4a12      	ldr	r2, [pc, #72]	; (19340 <ll_rl_pdu_adv_update+0xe4>)
   192f8:	5cd3      	ldrb	r3, [r2, r3]
   192fa:	f013 0f04 	tst.w	r3, #4
   192fe:	d10d      	bne.n	1931c <ll_rl_pdu_adv_update+0xc0>
			pdu->rx_addr = ll_adv->id_addr_type;
   19300:	4631      	mov	r1, r6
   19302:	f811 3b02 	ldrb.w	r3, [r1], #2
   19306:	09db      	lsrs	r3, r3, #7
   19308:	7822      	ldrb	r2, [r4, #0]
   1930a:	f363 12c7 	bfi	r2, r3, #7, #1
   1930e:	4620      	mov	r0, r4
   19310:	f800 2b08 	strb.w	r2, [r0], #8
			memcpy(&pdu->payload.direct_ind.tgt_addr[0],
   19314:	2206      	movs	r2, #6
   19316:	f7e6 ffd3 	bl	2c0 <memcpy>
}
   1931a:	e7e6      	b.n	192ea <ll_rl_pdu_adv_update+0x8e>
			pdu->rx_addr = 1;
   1931c:	7823      	ldrb	r3, [r4, #0]
   1931e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   19322:	4620      	mov	r0, r4
   19324:	f800 3b08 	strb.w	r3, [r0], #8
			       rl[idx].peer_rpa.val, BDADDR_SIZE);
   19328:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   1932c:	00eb      	lsls	r3, r5, #3
   1932e:	3318      	adds	r3, #24
   19330:	4611      	mov	r1, r2
   19332:	4419      	add	r1, r3
			memcpy(&pdu->payload.direct_ind.tgt_addr[0],
   19334:	2206      	movs	r2, #6
   19336:	4411      	add	r1, r2
   19338:	f7e6 ffc2 	bl	2c0 <memcpy>
   1933c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1933e:	bf00      	nop
   19340:	20001868 	.word	0x20001868

00019344 <rpa_adv_refresh>:
{
   19344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	ll_adv = ll_adv_set_get();
   19348:	f000 fb58 	bl	199fc <ll_adv_set_get>
   1934c:	4606      	mov	r6, r0
	if (ll_adv->own_addr_type != BT_ADDR_LE_PUBLIC_ID &&
   1934e:	7803      	ldrb	r3, [r0, #0]
   19350:	f003 0360 	and.w	r3, r3, #96	; 0x60
   19354:	2b40      	cmp	r3, #64	; 0x40
   19356:	d003      	beq.n	19360 <rpa_adv_refresh+0x1c>
   19358:	2b60      	cmp	r3, #96	; 0x60
   1935a:	d001      	beq.n	19360 <rpa_adv_refresh+0x1c>
   1935c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	radio_adv_data = radio_adv_data_get();
   19360:	f7fe f8bc 	bl	174dc <radio_adv_data_get>
   19364:	4604      	mov	r4, r0
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   19366:	f890 504f 	ldrb.w	r5, [r0, #79]	; 0x4f
   1936a:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   1936e:	ebc5 02c2 	rsb	r2, r5, r2, lsl #3
   19372:	1887      	adds	r7, r0, r2
	if (radio_adv_data->first == radio_adv_data->last) {
   19374:	f890 304e 	ldrb.w	r3, [r0, #78]	; 0x4e
   19378:	429d      	cmp	r5, r3
   1937a:	d02d      	beq.n	193d8 <rpa_adv_refresh+0x94>
	pdu = (struct pdu_adv *)&radio_adv_data->data[last][0];
   1937c:	eb05 0385 	add.w	r3, r5, r5, lsl #2
   19380:	ebc5 03c3 	rsb	r3, r5, r3, lsl #3
   19384:	eb04 0803 	add.w	r8, r4, r3
	pdu->type = prev->type;
   19388:	5ca0      	ldrb	r0, [r4, r2]
   1938a:	5ce1      	ldrb	r1, [r4, r3]
   1938c:	f360 0103 	bfi	r1, r0, #0, #4
	pdu->rfu = 0;
   19390:	f36f 1104 	bfc	r1, #4, #1
   19394:	54e1      	strb	r1, [r4, r3]
		pdu->chan_sel = prev->chan_sel;
   19396:	5ca2      	ldrb	r2, [r4, r2]
   19398:	f3c2 1240 	ubfx	r2, r2, #5, #1
   1939c:	b2c9      	uxtb	r1, r1
   1939e:	f362 1145 	bfi	r1, r2, #5, #1
   193a2:	54e1      	strb	r1, [r4, r3]
	idx = ll_rl_find(ll_adv->id_addr_type, ll_adv->id_addr, NULL);
   193a4:	4631      	mov	r1, r6
   193a6:	f811 0b02 	ldrb.w	r0, [r1], #2
   193aa:	2200      	movs	r2, #0
   193ac:	09c0      	lsrs	r0, r0, #7
   193ae:	f7ff fdbd 	bl	18f2c <ll_rl_find>
	LL_ASSERT(idx < ARRAY_SIZE(rl));
   193b2:	2807      	cmp	r0, #7
   193b4:	d816      	bhi.n	193e4 <rpa_adv_refresh+0xa0>
	ll_rl_pdu_adv_update(idx, pdu);
   193b6:	4641      	mov	r1, r8
   193b8:	f7ff ff50 	bl	1925c <ll_rl_pdu_adv_update>
	       prev->len - BDADDR_SIZE);
   193bc:	787a      	ldrb	r2, [r7, #1]
	memcpy(&pdu->payload.adv_ind.data[0], &prev->payload.adv_ind.data[0],
   193be:	3a06      	subs	r2, #6
   193c0:	f107 0108 	add.w	r1, r7, #8
   193c4:	f108 0008 	add.w	r0, r8, #8
   193c8:	f7e6 ff7a 	bl	2c0 <memcpy>
	pdu->len = prev->len;
   193cc:	787b      	ldrb	r3, [r7, #1]
   193ce:	f888 3001 	strb.w	r3, [r8, #1]
	radio_adv_data->last = last;
   193d2:	f884 504f 	strb.w	r5, [r4, #79]	; 0x4f
   193d6:	e7c1      	b.n	1935c <rpa_adv_refresh+0x18>
		last = radio_adv_data->last + 1;
   193d8:	3501      	adds	r5, #1
   193da:	b2ed      	uxtb	r5, r5
		if (last == DOUBLE_BUFFER_SIZE) {
   193dc:	2d02      	cmp	r5, #2
   193de:	d1cd      	bne.n	1937c <rpa_adv_refresh+0x38>
			last = 0;
   193e0:	2500      	movs	r5, #0
   193e2:	e7cb      	b.n	1937c <rpa_adv_refresh+0x38>
	LL_ASSERT(idx < ARRAY_SIZE(rl));
   193e4:	4040      	eors	r0, r0
   193e6:	f380 8811 	msr	BASEPRI, r0
   193ea:	f04f 0004 	mov.w	r0, #4
   193ee:	df02      	svc	2

000193f0 <ll_rl_rpa_update>:
{
   193f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   193f4:	b085      	sub	sp, #20
   193f6:	4681      	mov	r9, r0
K_SYSCALL_DECLARE0_RET64(K_SYSCALL_K_UPTIME_GET, k_uptime_get, s64_t);
   193f8:	f00f fa44 	bl	28884 <_impl_k_uptime_get>
   193fc:	4606      	mov	r6, r0
   193fe:	460f      	mov	r7, r1
	bool all = timeout || (rpa_last_ms == -1) ||
   19400:	f1b9 0f00 	cmp.w	r9, #0
   19404:	d115      	bne.n	19432 <ll_rl_rpa_update+0x42>
   19406:	4b57      	ldr	r3, [pc, #348]	; (19564 <ll_rl_rpa_update+0x174>)
   19408:	e9d3 0100 	ldrd	r0, r1, [r3]
   1940c:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   19410:	bf08      	it	eq
   19412:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
   19416:	d010      	beq.n	1943a <ll_rl_rpa_update+0x4a>
		   (now - rpa_last_ms >= rpa_timeout_ms);
   19418:	1a30      	subs	r0, r6, r0
   1941a:	eb67 0101 	sbc.w	r1, r7, r1
   1941e:	4b52      	ldr	r3, [pc, #328]	; (19568 <ll_rl_rpa_update+0x178>)
   19420:	681a      	ldr	r2, [r3, #0]
   19422:	2300      	movs	r3, #0
	bool all = timeout || (rpa_last_ms == -1) ||
   19424:	4290      	cmp	r0, r2
   19426:	eb71 0303 	sbcs.w	r3, r1, r3
   1942a:	db09      	blt.n	19440 <ll_rl_rpa_update+0x50>
   1942c:	f04f 0801 	mov.w	r8, #1
   19430:	e001      	b.n	19436 <ll_rl_rpa_update+0x46>
   19432:	f04f 0801 	mov.w	r8, #1
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   19436:	2400      	movs	r4, #0
   19438:	e02a      	b.n	19490 <ll_rl_rpa_update+0xa0>
	bool all = timeout || (rpa_last_ms == -1) ||
   1943a:	f04f 0801 	mov.w	r8, #1
   1943e:	e7fa      	b.n	19436 <ll_rl_rpa_update+0x46>
   19440:	f04f 0800 	mov.w	r8, #0
   19444:	e7f7      	b.n	19436 <ll_rl_rpa_update+0x46>
		*((u8_t *)dst++) = *((u8_t *)src--);
   19446:	7818      	ldrb	r0, [r3, #0]
   19448:	7008      	strb	r0, [r1, #0]
	for (; length > 0; length--) {
   1944a:	3a01      	subs	r2, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
   1944c:	3b01      	subs	r3, #1
   1944e:	3101      	adds	r1, #1
	for (; length > 0; length--) {
   19450:	2a00      	cmp	r2, #0
   19452:	d1f8      	bne.n	19446 <ll_rl_rpa_update+0x56>
				err = bt_rpa_create(irk, &rl[i].peer_rpa);
   19454:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   19458:	00d3      	lsls	r3, r2, #3
   1945a:	3318      	adds	r3, #24
   1945c:	4943      	ldr	r1, [pc, #268]	; (1956c <ll_rl_rpa_update+0x17c>)
   1945e:	4419      	add	r1, r3
   19460:	3106      	adds	r1, #6
   19462:	4668      	mov	r0, sp
   19464:	f7ea fac0 	bl	39e8 <bt_rpa_create>
				LL_ASSERT(!err);
   19468:	2800      	cmp	r0, #0
   1946a:	d13c      	bne.n	194e6 <ll_rl_rpa_update+0xf6>
			if (rl[i].lirk) {
   1946c:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   19470:	00d3      	lsls	r3, r2, #3
   19472:	4a3e      	ldr	r2, [pc, #248]	; (1956c <ll_rl_rpa_update+0x17c>)
   19474:	5cd3      	ldrb	r3, [r2, r3]
   19476:	f013 0f08 	tst.w	r3, #8
   1947a:	d13a      	bne.n	194f2 <ll_rl_rpa_update+0x102>
			rl[i].rpas_ready = 1;
   1947c:	493b      	ldr	r1, [pc, #236]	; (1956c <ll_rl_rpa_update+0x17c>)
   1947e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   19482:	00eb      	lsls	r3, r5, #3
   19484:	5cca      	ldrb	r2, [r1, r3]
   19486:	f042 0202 	orr.w	r2, r2, #2
   1948a:	54ca      	strb	r2, [r1, r3]
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1948c:	3401      	adds	r4, #1
   1948e:	b2e4      	uxtb	r4, r4
   19490:	2c07      	cmp	r4, #7
   19492:	d854      	bhi.n	1953e <ll_rl_rpa_update+0x14e>
		if ((rl[i].taken) && (all || !rl[i].rpas_ready)) {
   19494:	4625      	mov	r5, r4
   19496:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   1949a:	00d3      	lsls	r3, r2, #3
   1949c:	4a33      	ldr	r2, [pc, #204]	; (1956c <ll_rl_rpa_update+0x17c>)
   1949e:	5cd3      	ldrb	r3, [r2, r3]
   194a0:	f013 0f01 	tst.w	r3, #1
   194a4:	d0f2      	beq.n	1948c <ll_rl_rpa_update+0x9c>
   194a6:	f1b8 0f00 	cmp.w	r8, #0
   194aa:	d107      	bne.n	194bc <ll_rl_rpa_update+0xcc>
   194ac:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   194b0:	00d3      	lsls	r3, r2, #3
   194b2:	4a2e      	ldr	r2, [pc, #184]	; (1956c <ll_rl_rpa_update+0x17c>)
   194b4:	5cd3      	ldrb	r3, [r2, r3]
   194b6:	f013 0f02 	tst.w	r3, #2
   194ba:	d1e7      	bne.n	1948c <ll_rl_rpa_update+0x9c>
			if (rl[i].pirk) {
   194bc:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   194c0:	00d3      	lsls	r3, r2, #3
   194c2:	4a2a      	ldr	r2, [pc, #168]	; (1956c <ll_rl_rpa_update+0x17c>)
   194c4:	5cd3      	ldrb	r3, [r2, r3]
   194c6:	f013 0f04 	tst.w	r3, #4
   194ca:	d0cf      	beq.n	1946c <ll_rl_rpa_update+0x7c>
				sys_memcpy_swap(irk, peer_irks[rl[i].pirk_idx],
   194cc:	eb05 0385 	add.w	r3, r5, r5, lsl #2
   194d0:	00da      	lsls	r2, r3, #3
   194d2:	4b26      	ldr	r3, [pc, #152]	; (1956c <ll_rl_rpa_update+0x17c>)
   194d4:	4413      	add	r3, r2
   194d6:	7dda      	ldrb	r2, [r3, #23]
   194d8:	4b25      	ldr	r3, [pc, #148]	; (19570 <ll_rl_rpa_update+0x180>)
   194da:	eb03 1302 	add.w	r3, r3, r2, lsl #4
	src += length - 1;
   194de:	330f      	adds	r3, #15
   194e0:	2210      	movs	r2, #16
   194e2:	4669      	mov	r1, sp
   194e4:	e7b4      	b.n	19450 <ll_rl_rpa_update+0x60>
				LL_ASSERT(!err);
   194e6:	4040      	eors	r0, r0
   194e8:	f380 8811 	msr	BASEPRI, r0
   194ec:	f04f 0004 	mov.w	r0, #4
   194f0:	df02      	svc	2
				err = bt_rpa_create(rl[i].local_irk, &rpa);
   194f2:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   194f6:	00d3      	lsls	r3, r2, #3
   194f8:	481c      	ldr	r0, [pc, #112]	; (1956c <ll_rl_rpa_update+0x17c>)
   194fa:	4418      	add	r0, r3
   194fc:	4669      	mov	r1, sp
   194fe:	3007      	adds	r0, #7
   19500:	f7ea fa72 	bl	39e8 <bt_rpa_create>
				LL_ASSERT(!err);
   19504:	b9a8      	cbnz	r0, 19532 <ll_rl_rpa_update+0x142>
				rl[i].local_rpa = &rpa;
   19506:	00ab      	lsls	r3, r5, #2
   19508:	442b      	add	r3, r5
   1950a:	00da      	lsls	r2, r3, #3
   1950c:	4b17      	ldr	r3, [pc, #92]	; (1956c <ll_rl_rpa_update+0x17c>)
   1950e:	eb03 0a02 	add.w	sl, r3, r2
   19512:	f8ca d024 	str.w	sp, [sl, #36]	; 0x24
				bt_addr_copy(&local_rpas[i], &rpa);
   19516:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   1951a:	ea4f 0b43 	mov.w	fp, r3, lsl #1
   1951e:	4b15      	ldr	r3, [pc, #84]	; (19574 <ll_rl_rpa_update+0x184>)
   19520:	449b      	add	fp, r3
   19522:	2206      	movs	r2, #6
   19524:	4669      	mov	r1, sp
   19526:	4658      	mov	r0, fp
   19528:	f7e6 feca 	bl	2c0 <memcpy>
				rl[i].local_rpa = &local_rpas[i];
   1952c:	f8ca b024 	str.w	fp, [sl, #36]	; 0x24
   19530:	e7a4      	b.n	1947c <ll_rl_rpa_update+0x8c>
				LL_ASSERT(!err);
   19532:	4040      	eors	r0, r0
   19534:	f380 8811 	msr	BASEPRI, r0
   19538:	f04f 0004 	mov.w	r0, #4
   1953c:	df02      	svc	2
	if (all) {
   1953e:	f1b8 0f00 	cmp.w	r8, #0
   19542:	d002      	beq.n	1954a <ll_rl_rpa_update+0x15a>
		rpa_last_ms = now;
   19544:	4b07      	ldr	r3, [pc, #28]	; (19564 <ll_rl_rpa_update+0x174>)
   19546:	e9c3 6700 	strd	r6, r7, [r3]
	if (timeout) {
   1954a:	f1b9 0f00 	cmp.w	r9, #0
   1954e:	d102      	bne.n	19556 <ll_rl_rpa_update+0x166>
}
   19550:	b005      	add	sp, #20
   19552:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (radio_adv_is_enabled()) {
   19556:	f7fd ffc9 	bl	174ec <radio_adv_is_enabled>
   1955a:	2800      	cmp	r0, #0
   1955c:	d0f8      	beq.n	19550 <ll_rl_rpa_update+0x160>
			rpa_adv_refresh();
   1955e:	f7ff fef1 	bl	19344 <rpa_adv_refresh>
}
   19562:	e7f5      	b.n	19550 <ll_rl_rpa_update+0x160>
   19564:	20002948 	.word	0x20002948
   19568:	20002af4 	.word	0x20002af4
   1956c:	20001868 	.word	0x20001868
   19570:	200017e8 	.word	0x200017e8
   19574:	200017ac 	.word	0x200017ac

00019578 <rpa_timeout>:
{
   19578:	b508      	push	{r3, lr}
	ll_rl_rpa_update(true);
   1957a:	2001      	movs	r0, #1
   1957c:	f7ff ff38 	bl	193f0 <ll_rl_rpa_update>
   19580:	4b03      	ldr	r3, [pc, #12]	; (19590 <rpa_timeout+0x18>)
   19582:	681a      	ldr	r2, [r3, #0]
   19584:	4903      	ldr	r1, [pc, #12]	; (19594 <rpa_timeout+0x1c>)
   19586:	4804      	ldr	r0, [pc, #16]	; (19598 <rpa_timeout+0x20>)
   19588:	f00f ff50 	bl	2942c <k_delayed_work_submit_to_queue>
   1958c:	bd08      	pop	{r3, pc}
   1958e:	bf00      	nop
   19590:	20002af4 	.word	0x20002af4
   19594:	200029c0 	.word	0x200029c0
   19598:	20002b08 	.word	0x20002b08

0001959c <ll_rl_size_get>:
}

u32_t ll_rl_size_get(void)
{
	return CONFIG_BT_CTLR_RL_SIZE;
}
   1959c:	2008      	movs	r0, #8
   1959e:	4770      	bx	lr

000195a0 <ll_rl_clear>:

u32_t ll_rl_clear(void)
{
   195a0:	b508      	push	{r3, lr}
	if (!rl_access_check(false)) {
   195a2:	2000      	movs	r0, #0
   195a4:	f7ff fb74 	bl	18c90 <rl_access_check>
   195a8:	b908      	cbnz	r0, 195ae <ll_rl_clear+0xe>
		return BT_HCI_ERR_CMD_DISALLOWED;
   195aa:	200c      	movs	r0, #12
	}

	rl_clear();

	return 0;
}
   195ac:	bd08      	pop	{r3, pc}
	rl_clear();
   195ae:	f7ff fa7d 	bl	18aac <rl_clear>
	return 0;
   195b2:	2000      	movs	r0, #0
   195b4:	bd08      	pop	{r3, pc}
	...

000195b8 <ll_rl_add>:

u32_t ll_rl_add(bt_addr_le_t *id_addr, const u8_t pirk[16],
		const u8_t lirk[16])
{
   195b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   195bc:	b082      	sub	sp, #8
   195be:	4605      	mov	r5, r0
   195c0:	460c      	mov	r4, r1
   195c2:	4616      	mov	r6, r2
	u8_t i, j;

	if (!rl_access_check(false)) {
   195c4:	2000      	movs	r0, #0
   195c6:	f7ff fb63 	bl	18c90 <rl_access_check>
   195ca:	b918      	cbnz	r0, 195d4 <ll_rl_add+0x1c>
		return BT_HCI_ERR_CMD_DISALLOWED;
   195cc:	200c      	movs	r0, #12
		rl[i].wl = 0;
	}
	rl[i].taken = 1;

	return 0;
}
   195ce:	b002      	add	sp, #8
   195d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	i = ll_rl_find(id_addr->type, id_addr->a.val, &j);
   195d4:	462f      	mov	r7, r5
   195d6:	f817 0b01 	ldrb.w	r0, [r7], #1
   195da:	f10d 0207 	add.w	r2, sp, #7
   195de:	4639      	mov	r1, r7
   195e0:	f7ff fca4 	bl	18f2c <ll_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   195e4:	2807      	cmp	r0, #7
   195e6:	d801      	bhi.n	195ec <ll_rl_add+0x34>
		return BT_HCI_ERR_INVALID_PARAM;
   195e8:	2012      	movs	r0, #18
   195ea:	e7f0      	b.n	195ce <ll_rl_add+0x16>
	} else if (j >= ARRAY_SIZE(rl)) {
   195ec:	f89d 8007 	ldrb.w	r8, [sp, #7]
   195f0:	f1b8 0f07 	cmp.w	r8, #7
   195f4:	d901      	bls.n	195fa <ll_rl_add+0x42>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   195f6:	2007      	movs	r0, #7
   195f8:	e7e9      	b.n	195ce <ll_rl_add+0x16>
	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
   195fa:	f8df a130 	ldr.w	sl, [pc, #304]	; 1972c <ll_rl_add+0x174>
   195fe:	ea4f 0388 	mov.w	r3, r8, lsl #2
   19602:	4443      	add	r3, r8
   19604:	ea4f 09c3 	mov.w	r9, r3, lsl #3
   19608:	eb0a 0009 	add.w	r0, sl, r9
   1960c:	2206      	movs	r2, #6
   1960e:	4639      	mov	r1, r7
   19610:	3001      	adds	r0, #1
   19612:	f7e6 fe55 	bl	2c0 <memcpy>
	rl[i].id_addr_type = id_addr->type & 0x1;
   19616:	782a      	ldrb	r2, [r5, #0]
   19618:	f81a 3009 	ldrb.w	r3, [sl, r9]
   1961c:	f362 1386 	bfi	r3, r2, #6, #1
   19620:	f80a 3009 	strb.w	r3, [sl, r9]
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
   19624:	2110      	movs	r1, #16
   19626:	4620      	mov	r0, r4
   19628:	f7f5 f8f4 	bl	e814 <mem_nz>
   1962c:	f81a 3009 	ldrb.w	r3, [sl, r9]
   19630:	f360 0382 	bfi	r3, r0, #2, #1
   19634:	f80a 3009 	strb.w	r3, [sl, r9]
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   19638:	2110      	movs	r1, #16
   1963a:	4630      	mov	r0, r6
   1963c:	f7f5 f8ea 	bl	e814 <mem_nz>
   19640:	f81a 3009 	ldrb.w	r3, [sl, r9]
   19644:	f360 03c3 	bfi	r3, r0, #3, #1
   19648:	f80a 3009 	strb.w	r3, [sl, r9]
	if (rl[i].pirk) {
   1964c:	f013 0f04 	tst.w	r3, #4
   19650:	d016      	beq.n	19680 <ll_rl_add+0xc8>
		rl[i].pirk_idx = peer_irk_count;
   19652:	4933      	ldr	r1, [pc, #204]	; (19720 <ll_rl_add+0x168>)
   19654:	780a      	ldrb	r2, [r1, #0]
   19656:	4653      	mov	r3, sl
   19658:	444b      	add	r3, r9
   1965a:	75da      	strb	r2, [r3, #23]
		peer_irk_rl_ids[peer_irk_count] = i;
   1965c:	4b31      	ldr	r3, [pc, #196]	; (19724 <ll_rl_add+0x16c>)
   1965e:	f803 8002 	strb.w	r8, [r3, r2]
		sys_memcpy_swap(peer_irks[peer_irk_count++], pirk, 16);
   19662:	1c53      	adds	r3, r2, #1
   19664:	700b      	strb	r3, [r1, #0]
   19666:	340f      	adds	r4, #15
   19668:	4b2f      	ldr	r3, [pc, #188]	; (19728 <ll_rl_add+0x170>)
   1966a:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   1966e:	2210      	movs	r2, #16
   19670:	e004      	b.n	1967c <ll_rl_add+0xc4>
		*((u8_t *)dst++) = *((u8_t *)src--);
   19672:	7821      	ldrb	r1, [r4, #0]
   19674:	7019      	strb	r1, [r3, #0]
	for (; length > 0; length--) {
   19676:	3a01      	subs	r2, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
   19678:	3c01      	subs	r4, #1
   1967a:	3301      	adds	r3, #1
	for (; length > 0; length--) {
   1967c:	2a00      	cmp	r2, #0
   1967e:	d1f8      	bne.n	19672 <ll_rl_add+0xba>
	if (rl[i].lirk) {
   19680:	eb08 0288 	add.w	r2, r8, r8, lsl #2
   19684:	00d3      	lsls	r3, r2, #3
   19686:	4a29      	ldr	r2, [pc, #164]	; (1972c <ll_rl_add+0x174>)
   19688:	5cd3      	ldrb	r3, [r2, r3]
   1968a:	f013 0f08 	tst.w	r3, #8
   1968e:	d12f      	bne.n	196f0 <ll_rl_add+0x138>
	memset(rl[i].curr_rpa.val, 0x00, sizeof(rl[i].curr_rpa));
   19690:	4e26      	ldr	r6, [pc, #152]	; (1972c <ll_rl_add+0x174>)
   19692:	ea4f 0488 	mov.w	r4, r8, lsl #2
   19696:	eb04 0208 	add.w	r2, r4, r8
   1969a:	00d3      	lsls	r3, r2, #3
   1969c:	3318      	adds	r3, #24
   1969e:	2206      	movs	r2, #6
   196a0:	2100      	movs	r1, #0
   196a2:	18f0      	adds	r0, r6, r3
   196a4:	f011 f9ee 	bl	2aa84 <memset>
	rl[i].rpas_ready = 0;
   196a8:	4444      	add	r4, r8
   196aa:	00e2      	lsls	r2, r4, #3
   196ac:	5cb3      	ldrb	r3, [r6, r2]
	rl[i].dev = 0;
   196ae:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
   196b2:	f36f 1304 	bfc	r3, #4, #1
   196b6:	54b3      	strb	r3, [r6, r2]
	j = wl_find(id_addr->type, id_addr->a.val, NULL);
   196b8:	2200      	movs	r2, #0
   196ba:	4639      	mov	r1, r7
   196bc:	7828      	ldrb	r0, [r5, #0]
   196be:	f7ff fa0b 	bl	18ad8 <wl_find>
	if (j < ARRAY_SIZE(wl)) {
   196c2:	2807      	cmp	r0, #7
   196c4:	d822      	bhi.n	1970c <ll_rl_add+0x154>
		wl[j].rl_idx = i;
   196c6:	4b1a      	ldr	r3, [pc, #104]	; (19730 <ll_rl_add+0x178>)
   196c8:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   196cc:	f880 8001 	strb.w	r8, [r0, #1]
		rl[i].wl = 1;
   196d0:	00e3      	lsls	r3, r4, #3
   196d2:	5cf2      	ldrb	r2, [r6, r3]
   196d4:	f042 0220 	orr.w	r2, r2, #32
   196d8:	54f2      	strb	r2, [r6, r3]
	rl[i].taken = 1;
   196da:	4914      	ldr	r1, [pc, #80]	; (1972c <ll_rl_add+0x174>)
   196dc:	eb08 0888 	add.w	r8, r8, r8, lsl #2
   196e0:	ea4f 03c8 	mov.w	r3, r8, lsl #3
   196e4:	5cca      	ldrb	r2, [r1, r3]
   196e6:	f042 0201 	orr.w	r2, r2, #1
   196ea:	54ca      	strb	r2, [r1, r3]
	return 0;
   196ec:	2000      	movs	r0, #0
   196ee:	e76e      	b.n	195ce <ll_rl_add+0x16>
		memcpy(rl[i].local_irk, lirk, 16);
   196f0:	ea4f 0388 	mov.w	r3, r8, lsl #2
   196f4:	4443      	add	r3, r8
   196f6:	00da      	lsls	r2, r3, #3
   196f8:	4c0c      	ldr	r4, [pc, #48]	; (1972c <ll_rl_add+0x174>)
   196fa:	4414      	add	r4, r2
   196fc:	2210      	movs	r2, #16
   196fe:	4631      	mov	r1, r6
   19700:	1de0      	adds	r0, r4, #7
   19702:	f7e6 fddd 	bl	2c0 <memcpy>
		rl[i].local_rpa = NULL;
   19706:	2300      	movs	r3, #0
   19708:	6263      	str	r3, [r4, #36]	; 0x24
   1970a:	e7c1      	b.n	19690 <ll_rl_add+0xd8>
		rl[i].wl = 0;
   1970c:	4a07      	ldr	r2, [pc, #28]	; (1972c <ll_rl_add+0x174>)
   1970e:	eb08 0188 	add.w	r1, r8, r8, lsl #2
   19712:	00cb      	lsls	r3, r1, #3
   19714:	5cd1      	ldrb	r1, [r2, r3]
   19716:	f36f 1145 	bfc	r1, #5, #1
   1971a:	54d1      	strb	r1, [r2, r3]
   1971c:	e7dd      	b.n	196da <ll_rl_add+0x122>
   1971e:	bf00      	nop
   19720:	200017dc 	.word	0x200017dc
   19724:	200017e0 	.word	0x200017e0
   19728:	200017e8 	.word	0x200017e8
   1972c:	20001868 	.word	0x20001868
   19730:	200019e0 	.word	0x200019e0

00019734 <ll_rl_remove>:

u32_t ll_rl_remove(bt_addr_le_t *id_addr)
{
   19734:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19738:	4604      	mov	r4, r0
	u8_t i;

	if (!rl_access_check(false)) {
   1973a:	2000      	movs	r0, #0
   1973c:	f7ff faa8 	bl	18c90 <rl_access_check>
   19740:	b910      	cbnz	r0, 19748 <ll_rl_remove+0x14>
		return BT_HCI_ERR_CMD_DISALLOWED;
   19742:	200c      	movs	r0, #12
   19744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	/* find the device and mark it as empty */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   19748:	4626      	mov	r6, r4
   1974a:	f816 0b01 	ldrb.w	r0, [r6], #1
   1974e:	2200      	movs	r2, #0
   19750:	4631      	mov	r1, r6
   19752:	f7ff fbeb 	bl	18f2c <ll_rl_find>
   19756:	4605      	mov	r5, r0
	if (i < ARRAY_SIZE(rl)) {
   19758:	2807      	cmp	r0, #7
   1975a:	d902      	bls.n	19762 <ll_rl_remove+0x2e>
		}
		rl[i].taken = 0;
		return 0;
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1975c:	2002      	movs	r0, #2
}
   1975e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (rl[i].pirk) {
   19762:	eb00 0280 	add.w	r2, r0, r0, lsl #2
   19766:	00d3      	lsls	r3, r2, #3
   19768:	4a2d      	ldr	r2, [pc, #180]	; (19820 <ll_rl_remove+0xec>)
   1976a:	5cd3      	ldrb	r3, [r2, r3]
   1976c:	f013 0f04 	tst.w	r3, #4
   19770:	d03e      	beq.n	197f0 <ll_rl_remove+0xbc>
			u8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   19772:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   19776:	00da      	lsls	r2, r3, #3
   19778:	4b29      	ldr	r3, [pc, #164]	; (19820 <ll_rl_remove+0xec>)
   1977a:	4413      	add	r3, r2
   1977c:	7ddf      	ldrb	r7, [r3, #23]
   1977e:	4b29      	ldr	r3, [pc, #164]	; (19824 <ll_rl_remove+0xf0>)
   19780:	781b      	ldrb	r3, [r3, #0]
   19782:	3b01      	subs	r3, #1
			if (pj && pi != pj) {
   19784:	f013 08ff 	ands.w	r8, r3, #255	; 0xff
   19788:	d02e      	beq.n	197e8 <ll_rl_remove+0xb4>
   1978a:	4547      	cmp	r7, r8
   1978c:	d02c      	beq.n	197e8 <ll_rl_remove+0xb4>
				memcpy(peer_irks[pi], peer_irks[pj], 16);
   1978e:	4826      	ldr	r0, [pc, #152]	; (19828 <ll_rl_remove+0xf4>)
   19790:	2210      	movs	r2, #16
   19792:	eb00 1108 	add.w	r1, r0, r8, lsl #4
   19796:	eb00 1007 	add.w	r0, r0, r7, lsl #4
   1979a:	f7e6 fd91 	bl	2c0 <memcpy>
				for (k = 0;
   1979e:	2300      	movs	r3, #0
   197a0:	e001      	b.n	197a6 <ll_rl_remove+0x72>
				     k++) {
   197a2:	3301      	adds	r3, #1
   197a4:	b2db      	uxtb	r3, r3
				for (k = 0;
   197a6:	2b07      	cmp	r3, #7
   197a8:	d81e      	bhi.n	197e8 <ll_rl_remove+0xb4>
					if (rl[k].taken && rl[k].pirk &&
   197aa:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   197ae:	00ca      	lsls	r2, r1, #3
   197b0:	491b      	ldr	r1, [pc, #108]	; (19820 <ll_rl_remove+0xec>)
   197b2:	5c8a      	ldrb	r2, [r1, r2]
   197b4:	f012 0f01 	tst.w	r2, #1
   197b8:	d0f3      	beq.n	197a2 <ll_rl_remove+0x6e>
   197ba:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   197be:	00ca      	lsls	r2, r1, #3
   197c0:	4917      	ldr	r1, [pc, #92]	; (19820 <ll_rl_remove+0xec>)
   197c2:	5c8a      	ldrb	r2, [r1, r2]
   197c4:	f012 0f04 	tst.w	r2, #4
   197c8:	d0eb      	beq.n	197a2 <ll_rl_remove+0x6e>
					    rl[k].pirk_idx == pj) {
   197ca:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   197ce:	00d1      	lsls	r1, r2, #3
   197d0:	4a13      	ldr	r2, [pc, #76]	; (19820 <ll_rl_remove+0xec>)
   197d2:	440a      	add	r2, r1
   197d4:	7dd2      	ldrb	r2, [r2, #23]
					if (rl[k].taken && rl[k].pirk &&
   197d6:	4590      	cmp	r8, r2
   197d8:	d1e3      	bne.n	197a2 <ll_rl_remove+0x6e>
						rl[k].pirk_idx = pi;
   197da:	2128      	movs	r1, #40	; 0x28
   197dc:	4a10      	ldr	r2, [pc, #64]	; (19820 <ll_rl_remove+0xec>)
   197de:	fb01 2003 	mla	r0, r1, r3, r2
   197e2:	75c7      	strb	r7, [r0, #23]
						peer_irk_rl_ids[pi] = k;
   197e4:	4a11      	ldr	r2, [pc, #68]	; (1982c <ll_rl_remove+0xf8>)
   197e6:	55d3      	strb	r3, [r2, r7]
			peer_irk_count--;
   197e8:	4a0e      	ldr	r2, [pc, #56]	; (19824 <ll_rl_remove+0xf0>)
   197ea:	7813      	ldrb	r3, [r2, #0]
   197ec:	3b01      	subs	r3, #1
   197ee:	7013      	strb	r3, [r2, #0]
		j = wl_find(id_addr->type, id_addr->a.val, NULL);
   197f0:	2200      	movs	r2, #0
   197f2:	4631      	mov	r1, r6
   197f4:	7820      	ldrb	r0, [r4, #0]
   197f6:	f7ff f96f 	bl	18ad8 <wl_find>
		if (j < ARRAY_SIZE(wl)) {
   197fa:	2807      	cmp	r0, #7
   197fc:	d804      	bhi.n	19808 <ll_rl_remove+0xd4>
			wl[j].rl_idx = FILTER_IDX_NONE;
   197fe:	4b0c      	ldr	r3, [pc, #48]	; (19830 <ll_rl_remove+0xfc>)
   19800:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   19804:	23ff      	movs	r3, #255	; 0xff
   19806:	7043      	strb	r3, [r0, #1]
		rl[i].taken = 0;
   19808:	4a05      	ldr	r2, [pc, #20]	; (19820 <ll_rl_remove+0xec>)
   1980a:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   1980e:	00eb      	lsls	r3, r5, #3
   19810:	5cd1      	ldrb	r1, [r2, r3]
   19812:	f36f 0100 	bfc	r1, #0, #1
   19816:	54d1      	strb	r1, [r2, r3]
		return 0;
   19818:	2000      	movs	r0, #0
   1981a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1981e:	bf00      	nop
   19820:	20001868 	.word	0x20001868
   19824:	200017dc 	.word	0x200017dc
   19828:	200017e8 	.word	0x200017e8
   1982c:	200017e0 	.word	0x200017e0
   19830:	200019e0 	.word	0x200019e0

00019834 <ll_rl_crpa_set>:

void ll_rl_crpa_set(u8_t id_addr_type, u8_t *id_addr, u8_t rl_idx, u8_t *crpa)
{
   19834:	b510      	push	{r4, lr}
   19836:	461c      	mov	r4, r3
	if ((crpa[5] & 0xc0) == 0x40) {
   19838:	795b      	ldrb	r3, [r3, #5]
   1983a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1983e:	2b40      	cmp	r3, #64	; 0x40
   19840:	d000      	beq.n	19844 <ll_rl_crpa_set+0x10>
   19842:	bd10      	pop	{r4, pc}

		if (id_addr) {
   19844:	b119      	cbz	r1, 1984e <ll_rl_crpa_set+0x1a>
			/* find the device and return its RPA */
			rl_idx = ll_rl_find(id_addr_type, id_addr, NULL);
   19846:	2200      	movs	r2, #0
   19848:	f7ff fb70 	bl	18f2c <ll_rl_find>
   1984c:	4602      	mov	r2, r0
		}

		if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].taken) {
   1984e:	2a07      	cmp	r2, #7
   19850:	d8f7      	bhi.n	19842 <ll_rl_crpa_set+0xe>
   19852:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   19856:	00cb      	lsls	r3, r1, #3
   19858:	4907      	ldr	r1, [pc, #28]	; (19878 <ll_rl_crpa_set+0x44>)
   1985a:	5ccb      	ldrb	r3, [r1, r3]
   1985c:	f013 0f01 	tst.w	r3, #1
   19860:	d0ef      	beq.n	19842 <ll_rl_crpa_set+0xe>
				memcpy(rl[rl_idx].curr_rpa.val, crpa,
   19862:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   19866:	00d0      	lsls	r0, r2, #3
   19868:	3018      	adds	r0, #24
   1986a:	2206      	movs	r2, #6
   1986c:	4621      	mov	r1, r4
   1986e:	4b02      	ldr	r3, [pc, #8]	; (19878 <ll_rl_crpa_set+0x44>)
   19870:	4418      	add	r0, r3
   19872:	f7e6 fd25 	bl	2c0 <memcpy>
				       sizeof(bt_addr_t));
		}
	}
}
   19876:	e7e4      	b.n	19842 <ll_rl_crpa_set+0xe>
   19878:	20001868 	.word	0x20001868

0001987c <ll_rl_crpa_get>:

u32_t ll_rl_crpa_get(bt_addr_le_t *id_addr, bt_addr_t *crpa)
{
   1987c:	b538      	push	{r3, r4, r5, lr}
   1987e:	460d      	mov	r5, r1
	u8_t i;

	/* find the device and return its RPA */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   19880:	4601      	mov	r1, r0
   19882:	f811 0b01 	ldrb.w	r0, [r1], #1
   19886:	2200      	movs	r2, #0
   19888:	f7ff fb50 	bl	18f2c <ll_rl_find>
	if (i < ARRAY_SIZE(rl) &&
   1988c:	2807      	cmp	r0, #7
   1988e:	d901      	bls.n	19894 <ll_rl_crpa_get+0x18>
	    mem_nz(rl[i].curr_rpa.val, sizeof(rl[i].curr_rpa.val))) {
			bt_addr_copy(crpa, &rl[i].curr_rpa);
			return 0;
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   19890:	2002      	movs	r0, #2
   19892:	bd38      	pop	{r3, r4, r5, pc}
   19894:	4604      	mov	r4, r0
	    mem_nz(rl[i].curr_rpa.val, sizeof(rl[i].curr_rpa.val))) {
   19896:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   1989a:	00d8      	lsls	r0, r3, #3
   1989c:	3018      	adds	r0, #24
   1989e:	2106      	movs	r1, #6
   198a0:	4b09      	ldr	r3, [pc, #36]	; (198c8 <ll_rl_crpa_get+0x4c>)
   198a2:	4418      	add	r0, r3
   198a4:	f7f4 ffb6 	bl	e814 <mem_nz>
	if (i < ARRAY_SIZE(rl) &&
   198a8:	b908      	cbnz	r0, 198ae <ll_rl_crpa_get+0x32>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   198aa:	2002      	movs	r0, #2
}
   198ac:	bd38      	pop	{r3, r4, r5, pc}
			bt_addr_copy(crpa, &rl[i].curr_rpa);
   198ae:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   198b2:	00e1      	lsls	r1, r4, #3
   198b4:	3118      	adds	r1, #24
   198b6:	2206      	movs	r2, #6
   198b8:	4b03      	ldr	r3, [pc, #12]	; (198c8 <ll_rl_crpa_get+0x4c>)
   198ba:	4419      	add	r1, r3
   198bc:	4628      	mov	r0, r5
   198be:	f7e6 fcff 	bl	2c0 <memcpy>
			return 0;
   198c2:	2000      	movs	r0, #0
   198c4:	bd38      	pop	{r3, r4, r5, pc}
   198c6:	bf00      	nop
   198c8:	20001868 	.word	0x20001868

000198cc <ll_rl_lrpa_get>:

u32_t ll_rl_lrpa_get(bt_addr_le_t *id_addr, bt_addr_t *lrpa)
{
   198cc:	b510      	push	{r4, lr}
   198ce:	460c      	mov	r4, r1
	u8_t i;

	/* find the device and return the local RPA */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   198d0:	4601      	mov	r1, r0
   198d2:	f811 0b01 	ldrb.w	r0, [r1], #1
   198d6:	2200      	movs	r2, #0
   198d8:	f7ff fb28 	bl	18f2c <ll_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   198dc:	2807      	cmp	r0, #7
   198de:	d901      	bls.n	198e4 <ll_rl_lrpa_get+0x18>
		bt_addr_copy(lrpa, rl[i].local_rpa);
		return 0;
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   198e0:	2002      	movs	r0, #2
}
   198e2:	bd10      	pop	{r4, pc}
		bt_addr_copy(lrpa, rl[i].local_rpa);
   198e4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   198e8:	00c2      	lsls	r2, r0, #3
   198ea:	4b04      	ldr	r3, [pc, #16]	; (198fc <ll_rl_lrpa_get+0x30>)
   198ec:	4413      	add	r3, r2
   198ee:	2206      	movs	r2, #6
   198f0:	6a59      	ldr	r1, [r3, #36]	; 0x24
   198f2:	4620      	mov	r0, r4
   198f4:	f7e6 fce4 	bl	2c0 <memcpy>
		return 0;
   198f8:	2000      	movs	r0, #0
   198fa:	bd10      	pop	{r4, pc}
   198fc:	20001868 	.word	0x20001868

00019900 <ll_rl_enable>:

u32_t ll_rl_enable(u8_t enable)
{
   19900:	b510      	push	{r4, lr}
   19902:	4604      	mov	r4, r0
	if (!rl_access_check(false)) {
   19904:	2000      	movs	r0, #0
   19906:	f7ff f9c3 	bl	18c90 <rl_access_check>
   1990a:	b908      	cbnz	r0, 19910 <ll_rl_enable+0x10>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1990c:	200c      	movs	r0, #12
   1990e:	bd10      	pop	{r4, pc}
	}

	switch (enable) {
   19910:	b11c      	cbz	r4, 1991a <ll_rl_enable+0x1a>
   19912:	2c01      	cmp	r4, #1
   19914:	d005      	beq.n	19922 <ll_rl_enable+0x22>
		break;
	case BT_HCI_ADDR_RES_ENABLE:
		rl_enable = 1;
		break;
	default:
		return BT_HCI_ERR_INVALID_PARAM;
   19916:	2012      	movs	r0, #18
	}

	return 0;
}
   19918:	bd10      	pop	{r4, pc}
		rl_enable = 0;
   1991a:	2000      	movs	r0, #0
   1991c:	4b03      	ldr	r3, [pc, #12]	; (1992c <ll_rl_enable+0x2c>)
   1991e:	7018      	strb	r0, [r3, #0]
		break;
   19920:	bd10      	pop	{r4, pc}
		rl_enable = 1;
   19922:	2201      	movs	r2, #1
   19924:	4b01      	ldr	r3, [pc, #4]	; (1992c <ll_rl_enable+0x2c>)
   19926:	701a      	strb	r2, [r3, #0]
	return 0;
   19928:	2000      	movs	r0, #0
		break;
   1992a:	bd10      	pop	{r4, pc}
   1992c:	200019a8 	.word	0x200019a8

00019930 <ll_rl_timeout_set>:

void ll_rl_timeout_set(u16_t timeout)
{
	rpa_timeout_ms = timeout * 1000;
   19930:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   19934:	fb03 f000 	mul.w	r0, r3, r0
   19938:	4b01      	ldr	r3, [pc, #4]	; (19940 <ll_rl_timeout_set+0x10>)
   1993a:	6018      	str	r0, [r3, #0]
   1993c:	4770      	bx	lr
   1993e:	bf00      	nop
   19940:	20002af4 	.word	0x20002af4

00019944 <ll_priv_mode_set>:
}

u32_t ll_priv_mode_set(bt_addr_le_t *id_addr, u8_t mode)
{
   19944:	b538      	push	{r3, r4, r5, lr}
   19946:	4604      	mov	r4, r0
   19948:	460d      	mov	r5, r1
	u8_t i;

	if (!rl_access_check(false)) {
   1994a:	2000      	movs	r0, #0
   1994c:	f7ff f9a0 	bl	18c90 <rl_access_check>
   19950:	b908      	cbnz	r0, 19956 <ll_priv_mode_set+0x12>
		return BT_HCI_ERR_CMD_DISALLOWED;
   19952:	200c      	movs	r0, #12
   19954:	bd38      	pop	{r3, r4, r5, pc}
	}

	/* find the device and mark it as empty */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   19956:	4621      	mov	r1, r4
   19958:	f811 0b01 	ldrb.w	r0, [r1], #1
   1995c:	2200      	movs	r2, #0
   1995e:	f7ff fae5 	bl	18f2c <ll_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   19962:	2807      	cmp	r0, #7
   19964:	d901      	bls.n	1996a <ll_priv_mode_set+0x26>
			break;
		default:
			return BT_HCI_ERR_INVALID_PARAM;
		}
	} else {
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   19966:	2002      	movs	r0, #2
   19968:	bd38      	pop	{r3, r4, r5, pc}
		switch (mode) {
   1996a:	b11d      	cbz	r5, 19974 <ll_priv_mode_set+0x30>
   1996c:	2d01      	cmp	r5, #1
   1996e:	d00b      	beq.n	19988 <ll_priv_mode_set+0x44>
			return BT_HCI_ERR_INVALID_PARAM;
   19970:	2012      	movs	r0, #18
	}

	return 0;
}
   19972:	bd38      	pop	{r3, r4, r5, pc}
			rl[i].dev = 0;
   19974:	4a09      	ldr	r2, [pc, #36]	; (1999c <ll_priv_mode_set+0x58>)
   19976:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1997a:	00c3      	lsls	r3, r0, #3
   1997c:	5cd1      	ldrb	r1, [r2, r3]
   1997e:	f36f 1104 	bfc	r1, #4, #1
   19982:	54d1      	strb	r1, [r2, r3]
	return 0;
   19984:	2000      	movs	r0, #0
			break;
   19986:	bd38      	pop	{r3, r4, r5, pc}
			rl[i].dev = 1;
   19988:	4904      	ldr	r1, [pc, #16]	; (1999c <ll_priv_mode_set+0x58>)
   1998a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1998e:	00c3      	lsls	r3, r0, #3
   19990:	5cca      	ldrb	r2, [r1, r3]
   19992:	f042 0210 	orr.w	r2, r2, #16
   19996:	54ca      	strb	r2, [r1, r3]
	return 0;
   19998:	2000      	movs	r0, #0
			break;
   1999a:	bd38      	pop	{r3, r4, r5, pc}
   1999c:	20001868 	.word	0x20001868

000199a0 <ll_filter_reset>:

#endif /* CONFIG_BT_CTLR_PRIVACY */

void ll_filter_reset(bool init)
{
   199a0:	b538      	push	{r3, r4, r5, lr}
   199a2:	4605      	mov	r5, r0
	wl_anon = 0;
   199a4:	2400      	movs	r4, #0
   199a6:	4b0e      	ldr	r3, [pc, #56]	; (199e0 <ll_filter_reset+0x40>)
   199a8:	701c      	strb	r4, [r3, #0]

#if defined(CONFIG_BT_CTLR_PRIVACY)
	wl_clear();
   199aa:	f7ff f86b 	bl	18a84 <wl_clear>

	rl_enable = 0;
   199ae:	4b0d      	ldr	r3, [pc, #52]	; (199e4 <ll_filter_reset+0x44>)
   199b0:	701c      	strb	r4, [r3, #0]
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   199b2:	4a0d      	ldr	r2, [pc, #52]	; (199e8 <ll_filter_reset+0x48>)
   199b4:	4b0d      	ldr	r3, [pc, #52]	; (199ec <ll_filter_reset+0x4c>)
   199b6:	601a      	str	r2, [r3, #0]
	rpa_last_ms = -1;
   199b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   199bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   199c0:	4b0b      	ldr	r3, [pc, #44]	; (199f0 <ll_filter_reset+0x50>)
   199c2:	e9c3 0100 	strd	r0, r1, [r3]
	rl_clear();
   199c6:	f7ff f871 	bl	18aac <rl_clear>
	if (init) {
   199ca:	b91d      	cbnz	r5, 199d4 <ll_filter_reset+0x34>
		k_delayed_work_init(&rpa_work, rpa_timeout);
	} else {
		k_delayed_work_cancel(&rpa_work);
   199cc:	4809      	ldr	r0, [pc, #36]	; (199f4 <ll_filter_reset+0x54>)
   199ce:	f00f fcd3 	bl	29378 <k_delayed_work_cancel>
   199d2:	bd38      	pop	{r3, r4, r5, pc}
		k_delayed_work_init(&rpa_work, rpa_timeout);
   199d4:	4908      	ldr	r1, [pc, #32]	; (199f8 <ll_filter_reset+0x58>)
   199d6:	4807      	ldr	r0, [pc, #28]	; (199f4 <ll_filter_reset+0x54>)
   199d8:	f00f fcb0 	bl	2933c <k_delayed_work_init>
   199dc:	bd38      	pop	{r3, r4, r5, pc}
   199de:	bf00      	nop
   199e0:	20002950 	.word	0x20002950
   199e4:	200019a8 	.word	0x200019a8
   199e8:	000dbba0 	.word	0x000dbba0
   199ec:	20002af4 	.word	0x20002af4
   199f0:	20002948 	.word	0x20002948
   199f4:	200029c0 	.word	0x200029c0
   199f8:	00019579 	.word	0x00019579

000199fc <ll_adv_set_get>:
static struct ll_adv_set ll_adv;

struct ll_adv_set *ll_adv_set_get(void)
{
	return &ll_adv;
}
   199fc:	4800      	ldr	r0, [pc, #0]	; (19a00 <ll_adv_set_get+0x4>)
   199fe:	4770      	bx	lr
   19a00:	20001a54 	.word	0x20001a54

00019a04 <ll_adv_params_set>:
u32_t ll_adv_params_set(u8_t handle, u16_t evt_prop, u32_t interval,
			u8_t adv_type, u8_t own_addr_type,
			u8_t direct_addr_type, u8_t const *const direct_addr,
			u8_t chan_map, u8_t filter_policy, u8_t *tx_pwr,
			u8_t phy_p, u8_t skip, u8_t phy_s, u8_t sid, u8_t sreq)
{
   19a04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19a08:	b087      	sub	sp, #28
   19a0a:	4689      	mov	r9, r1
   19a0c:	4614      	mov	r4, r2
   19a0e:	461e      	mov	r6, r3
   19a10:	f89d 8040 	ldrb.w	r8, [sp, #64]	; 0x40
   19a14:	f89d b044 	ldrb.w	fp, [sp, #68]	; 0x44
   19a18:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
	u8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   19a1c:	4b89      	ldr	r3, [pc, #548]	; (19c44 <ll_adv_params_set+0x240>)
   19a1e:	e893 0003 	ldmia.w	r3, {r0, r1}
   19a22:	9004      	str	r0, [sp, #16]
   19a24:	f8ad 1014 	strh.w	r1, [sp, #20]
#endif /* !CONFIG_BT_CTLR_ADV_EXT */

	struct radio_adv_data *radio_adv_data;
	struct pdu_adv *pdu;

	if (radio_adv_is_enabled()) {
   19a28:	f7fd fd60 	bl	174ec <radio_adv_is_enabled>
   19a2c:	9001      	str	r0, [sp, #4]
   19a2e:	b128      	cbz	r0, 19a3c <ll_adv_params_set+0x38>
		return BT_HCI_ERR_CMD_DISALLOWED;
   19a30:	230c      	movs	r3, #12
   19a32:	9301      	str	r3, [sp, #4]
	if (pdu->len == 0) {
		pdu->len = BDADDR_SIZE;
	}

	return 0;
}
   19a34:	9801      	ldr	r0, [sp, #4]
   19a36:	b007      	add	sp, #28
   19a38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ll_adv.phy_p = BIT(0);
   19a3c:	4b82      	ldr	r3, [pc, #520]	; (19c48 <ll_adv_params_set+0x244>)
   19a3e:	7a1a      	ldrb	r2, [r3, #8]
   19a40:	2101      	movs	r1, #1
   19a42:	f361 0202 	bfi	r2, r1, #0, #3
   19a46:	721a      	strb	r2, [r3, #8]
	if (adv_type > 0x04) {
   19a48:	2e04      	cmp	r6, #4
   19a4a:	d90f      	bls.n	19a6c <ll_adv_params_set+0x68>
		if (evt_prop & BIT(4)) {
   19a4c:	f019 0f10 	tst.w	r9, #16
   19a50:	d071      	beq.n	19b36 <ll_adv_params_set+0x132>
			u8_t const leg_adv_type[] = { 0x03, 0x04, 0x02, 0x00};
   19a52:	4b7c      	ldr	r3, [pc, #496]	; (19c44 <ll_adv_params_set+0x240>)
   19a54:	689b      	ldr	r3, [r3, #8]
   19a56:	9303      	str	r3, [sp, #12]
			adv_type = leg_adv_type[evt_prop & 0x03];
   19a58:	f009 0303 	and.w	r3, r9, #3
   19a5c:	aa06      	add	r2, sp, #24
   19a5e:	4413      	add	r3, r2
   19a60:	f813 6c0c 	ldrb.w	r6, [r3, #-12]
			if (evt_prop & BIT(3)) {
   19a64:	f019 0f08 	tst.w	r9, #8
   19a68:	d000      	beq.n	19a6c <ll_adv_params_set+0x68>
				adv_type = 0x01;
   19a6a:	460e      	mov	r6, r1
	if (adv_type != 0x01) {
   19a6c:	2e01      	cmp	r6, #1
   19a6e:	d071      	beq.n	19b54 <ll_adv_params_set+0x150>
		ll_adv.interval = interval;
   19a70:	4b75      	ldr	r3, [pc, #468]	; (19c48 <ll_adv_params_set+0x244>)
   19a72:	60dc      	str	r4, [r3, #12]
	ll_adv.chan_map = chan_map;
   19a74:	4a74      	ldr	r2, [pc, #464]	; (19c48 <ll_adv_params_set+0x244>)
   19a76:	7813      	ldrb	r3, [r2, #0]
   19a78:	f89d 104c 	ldrb.w	r1, [sp, #76]	; 0x4c
   19a7c:	f361 0302 	bfi	r3, r1, #0, #3
	ll_adv.filter_policy = filter_policy;
   19a80:	f89d 1050 	ldrb.w	r1, [sp, #80]	; 0x50
   19a84:	f361 03c4 	bfi	r3, r1, #3, #2
   19a88:	7013      	strb	r3, [r2, #0]
	radio_adv_data = radio_adv_data_get();
   19a8a:	f7fd fd27 	bl	174dc <radio_adv_data_get>
   19a8e:	4607      	mov	r7, r0
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   19a90:	f890 404f 	ldrb.w	r4, [r0, #79]	; 0x4f
   19a94:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   19a98:	ebc4 04c3 	rsb	r4, r4, r3, lsl #3
   19a9c:	eb00 0a04 	add.w	sl, r0, r4
	pdu->type = pdu_adv_type[adv_type];
   19aa0:	ab06      	add	r3, sp, #24
   19aa2:	441e      	add	r6, r3
   19aa4:	f816 2c08 	ldrb.w	r2, [r6, #-8]
   19aa8:	5d03      	ldrb	r3, [r0, r4]
   19aaa:	f362 0303 	bfi	r3, r2, #0, #4
	pdu->rfu = 0;
   19aae:	f36f 1304 	bfc	r3, #4, #1
   19ab2:	5503      	strb	r3, [r0, r4]
	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
   19ab4:	f003 030f 	and.w	r3, r3, #15
   19ab8:	2b01      	cmp	r3, #1
   19aba:	d94f      	bls.n	19b5c <ll_adv_params_set+0x158>
		pdu->chan_sel = 0;
   19abc:	5d03      	ldrb	r3, [r0, r4]
   19abe:	f36f 1345 	bfc	r3, #5, #1
   19ac2:	5503      	strb	r3, [r0, r4]
	ll_adv.own_addr_type = own_addr_type;
   19ac4:	4a60      	ldr	r2, [pc, #384]	; (19c48 <ll_adv_params_set+0x244>)
   19ac6:	7813      	ldrb	r3, [r2, #0]
   19ac8:	f368 1346 	bfi	r3, r8, #5, #2
   19acc:	7013      	strb	r3, [r2, #0]
	if (ll_adv.own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   19ace:	f003 0360 	and.w	r3, r3, #96	; 0x60
   19ad2:	2b40      	cmp	r3, #64	; 0x40
   19ad4:	d047      	beq.n	19b66 <ll_adv_params_set+0x162>
   19ad6:	2b60      	cmp	r3, #96	; 0x60
   19ad8:	d045      	beq.n	19b66 <ll_adv_params_set+0x162>
	pdu->tx_addr = own_addr_type & 0x1;
   19ada:	f008 0801 	and.w	r8, r8, #1
   19ade:	5d3b      	ldrb	r3, [r7, r4]
   19ae0:	f368 1386 	bfi	r3, r8, #6, #1
	pdu->rx_addr = 0;
   19ae4:	f36f 13c7 	bfc	r3, #7, #1
   19ae8:	553b      	strb	r3, [r7, r4]
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   19aea:	f003 030f 	and.w	r3, r3, #15
   19aee:	2b01      	cmp	r3, #1
   19af0:	d044      	beq.n	19b7c <ll_adv_params_set+0x178>
	} else if (pdu->type == PDU_ADV_TYPE_EXT_IND) {
   19af2:	2b07      	cmp	r3, #7
   19af4:	d050      	beq.n	19b98 <ll_adv_params_set+0x194>
	} else if (pdu->len == 0) {
   19af6:	f89a 3001 	ldrb.w	r3, [sl, #1]
   19afa:	b913      	cbnz	r3, 19b02 <ll_adv_params_set+0xfe>
		pdu->len = BDADDR_SIZE;
   19afc:	2306      	movs	r3, #6
   19afe:	f88a 3001 	strb.w	r3, [sl, #1]
	radio_adv_data = radio_scan_data_get();
   19b02:	f7fd fcef 	bl	174e4 <radio_scan_data_get>
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   19b06:	f890 204f 	ldrb.w	r2, [r0, #79]	; 0x4f
   19b0a:	eb02 0382 	add.w	r3, r2, r2, lsl #2
   19b0e:	ebc2 02c3 	rsb	r2, r2, r3, lsl #3
   19b12:	1881      	adds	r1, r0, r2
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   19b14:	5c83      	ldrb	r3, [r0, r2]
   19b16:	2404      	movs	r4, #4
   19b18:	f364 0303 	bfi	r3, r4, #0, #4
	pdu->tx_addr = own_addr_type & 0x1;
   19b1c:	f003 03cf 	and.w	r3, r3, #207	; 0xcf
   19b20:	f368 1386 	bfi	r3, r8, #6, #1
	pdu->rx_addr = 0;
   19b24:	f36f 13c7 	bfc	r3, #7, #1
   19b28:	5483      	strb	r3, [r0, r2]
	if (pdu->len == 0) {
   19b2a:	784b      	ldrb	r3, [r1, #1]
   19b2c:	2b00      	cmp	r3, #0
   19b2e:	d181      	bne.n	19a34 <ll_adv_params_set+0x30>
		pdu->len = BDADDR_SIZE;
   19b30:	2306      	movs	r3, #6
   19b32:	704b      	strb	r3, [r1, #1]
   19b34:	e77e      	b.n	19a34 <ll_adv_params_set+0x30>
			if (((evt_prop & 0x03) == 0x03) ||
   19b36:	f009 0303 	and.w	r3, r9, #3
   19b3a:	2b03      	cmp	r3, #3
   19b3c:	d07c      	beq.n	19c38 <ll_adv_params_set+0x234>
   19b3e:	f009 030c 	and.w	r3, r9, #12
   19b42:	2b0c      	cmp	r3, #12
   19b44:	d07b      	beq.n	19c3e <ll_adv_params_set+0x23a>
			ll_adv.phy_p = phy_p;
   19b46:	4b40      	ldr	r3, [pc, #256]	; (19c48 <ll_adv_params_set+0x244>)
   19b48:	7a1a      	ldrb	r2, [r3, #8]
   19b4a:	f365 0202 	bfi	r2, r5, #0, #3
   19b4e:	721a      	strb	r2, [r3, #8]
			adv_type = 0x05; /* PDU_ADV_TYPE_EXT_IND */
   19b50:	2605      	movs	r6, #5
   19b52:	e78b      	b.n	19a6c <ll_adv_params_set+0x68>
		ll_adv.interval = 0;
   19b54:	2200      	movs	r2, #0
   19b56:	4b3c      	ldr	r3, [pc, #240]	; (19c48 <ll_adv_params_set+0x244>)
   19b58:	60da      	str	r2, [r3, #12]
   19b5a:	e78b      	b.n	19a74 <ll_adv_params_set+0x70>
		pdu->chan_sel = 1;
   19b5c:	5d03      	ldrb	r3, [r0, r4]
   19b5e:	f043 0320 	orr.w	r3, r3, #32
   19b62:	5503      	strb	r3, [r0, r4]
   19b64:	e7ae      	b.n	19ac4 <ll_adv_params_set+0xc0>
		ll_adv.id_addr_type = direct_addr_type;
   19b66:	4838      	ldr	r0, [pc, #224]	; (19c48 <ll_adv_params_set+0x244>)
   19b68:	7803      	ldrb	r3, [r0, #0]
   19b6a:	f36b 13c7 	bfi	r3, fp, #7, #1
   19b6e:	f800 3b02 	strb.w	r3, [r0], #2
		memcpy(&ll_adv.id_addr, direct_addr, BDADDR_SIZE);
   19b72:	2206      	movs	r2, #6
   19b74:	9912      	ldr	r1, [sp, #72]	; 0x48
   19b76:	f7e6 fba3 	bl	2c0 <memcpy>
   19b7a:	e7ae      	b.n	19ada <ll_adv_params_set+0xd6>
		pdu->rx_addr = direct_addr_type;
   19b7c:	5d3b      	ldrb	r3, [r7, r4]
   19b7e:	f36b 13c7 	bfi	r3, fp, #7, #1
   19b82:	553b      	strb	r3, [r7, r4]
		memcpy(&pdu->payload.direct_ind.tgt_addr[0], direct_addr,
   19b84:	2206      	movs	r2, #6
   19b86:	9912      	ldr	r1, [sp, #72]	; 0x48
   19b88:	f10a 0008 	add.w	r0, sl, #8
   19b8c:	f7e6 fb98 	bl	2c0 <memcpy>
		pdu->len = sizeof(struct pdu_adv_payload_direct_ind);
   19b90:	230c      	movs	r3, #12
   19b92:	f88a 3001 	strb.w	r3, [sl, #1]
   19b96:	e7b4      	b.n	19b02 <ll_adv_params_set+0xfe>
		p = (void *)&pdu->payload.adv_ext_ind;
   19b98:	f10a 0302 	add.w	r3, sl, #2
		ptr = (u8_t *)h + sizeof(*h);
   19b9c:	f10a 0104 	add.w	r1, sl, #4
		p->ext_hdr_len = 0;
   19ba0:	f89a 2002 	ldrb.w	r2, [sl, #2]
		p->adv_mode = evt_prop & 0x03;
   19ba4:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   19ba8:	f369 1287 	bfi	r2, r9, #6, #2
   19bac:	f88a 2002 	strb.w	r2, [sl, #2]
		*(u8_t *)h = 0;
   19bb0:	2200      	movs	r2, #0
   19bb2:	f88a 2003 	strb.w	r2, [sl, #3]
		if (!(evt_prop & BIT(5)) && !p->adv_mode && (phy_p != BIT(2))) {
   19bb6:	f019 0f20 	tst.w	r9, #32
   19bba:	d10e      	bne.n	19bda <ll_adv_params_set+0x1d6>
   19bbc:	f89a 2002 	ldrb.w	r2, [sl, #2]
   19bc0:	f012 0fc0 	tst.w	r2, #192	; 0xc0
   19bc4:	d109      	bne.n	19bda <ll_adv_params_set+0x1d6>
   19bc6:	2d04      	cmp	r5, #4
   19bc8:	d007      	beq.n	19bda <ll_adv_params_set+0x1d6>
			h->adv_addr = 1;
   19bca:	f89a 2003 	ldrb.w	r2, [sl, #3]
   19bce:	f042 0201 	orr.w	r2, r2, #1
   19bd2:	f88a 2003 	strb.w	r2, [sl, #3]
			ptr += BDADDR_SIZE;
   19bd6:	f10a 010a 	add.w	r1, sl, #10
		if (evt_prop & BIT(6)) {
   19bda:	f019 0f40 	tst.w	r9, #64	; 0x40
   19bde:	d006      	beq.n	19bee <ll_adv_params_set+0x1ea>
			h->tx_pwr = 1;
   19be0:	f89a 2003 	ldrb.w	r2, [sl, #3]
   19be4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   19be8:	f88a 2003 	strb.w	r2, [sl, #3]
			ptr++;
   19bec:	3101      	adds	r1, #1
		len = ptr - (u8_t *)p;
   19bee:	1acb      	subs	r3, r1, r3
   19bf0:	b2db      	uxtb	r3, r3
		if (len > (offsetof(struct pdu_adv_payload_com_ext_adv,
   19bf2:	2b02      	cmp	r3, #2
   19bf4:	d916      	bls.n	19c24 <ll_adv_params_set+0x220>
			p->ext_hdr_len = len -
   19bf6:	1e58      	subs	r0, r3, #1
   19bf8:	f89a 2002 	ldrb.w	r2, [sl, #2]
   19bfc:	f360 0205 	bfi	r2, r0, #0, #6
   19c00:	f88a 2002 	strb.w	r2, [sl, #2]
			pdu->len = len;
   19c04:	f88a 3001 	strb.w	r3, [sl, #1]
		if (h->tx_pwr) {
   19c08:	f89a 3003 	ldrb.w	r3, [sl, #3]
   19c0c:	f013 0f40 	tst.w	r3, #64	; 0x40
   19c10:	f43f af77 	beq.w	19b02 <ll_adv_params_set+0xfe>
			if (tx_pwr) {
   19c14:	9b15      	ldr	r3, [sp, #84]	; 0x54
   19c16:	b16b      	cbz	r3, 19c34 <ll_adv_params_set+0x230>
				if (*tx_pwr != 0x7F) {
   19c18:	781b      	ldrb	r3, [r3, #0]
   19c1a:	2b7f      	cmp	r3, #127	; 0x7f
   19c1c:	d006      	beq.n	19c2c <ll_adv_params_set+0x228>
			*ptr = _tx_pwr;
   19c1e:	f801 3c01 	strb.w	r3, [r1, #-1]
   19c22:	e76e      	b.n	19b02 <ll_adv_params_set+0xfe>
			pdu->len = offsetof(struct pdu_adv_payload_com_ext_adv,
   19c24:	2301      	movs	r3, #1
   19c26:	f88a 3001 	strb.w	r3, [sl, #1]
   19c2a:	e7ed      	b.n	19c08 <ll_adv_params_set+0x204>
					*tx_pwr = _tx_pwr;
   19c2c:	2300      	movs	r3, #0
   19c2e:	9a15      	ldr	r2, [sp, #84]	; 0x54
   19c30:	7013      	strb	r3, [r2, #0]
   19c32:	e7f4      	b.n	19c1e <ll_adv_params_set+0x21a>
			_tx_pwr = 0;
   19c34:	2300      	movs	r3, #0
   19c36:	e7f2      	b.n	19c1e <ll_adv_params_set+0x21a>
				return 0x12; /* invalid HCI cmd param */
   19c38:	2312      	movs	r3, #18
   19c3a:	9301      	str	r3, [sp, #4]
   19c3c:	e6fa      	b.n	19a34 <ll_adv_params_set+0x30>
   19c3e:	2312      	movs	r3, #18
   19c40:	9301      	str	r3, [sp, #4]
   19c42:	e6f7      	b.n	19a34 <ll_adv_params_set+0x30>
   19c44:	0002ee48 	.word	0x0002ee48
   19c48:	20001a54 	.word	0x20001a54

00019c4c <ll_adv_data_set>:

void ll_adv_data_set(u8_t len, u8_t const *const data)
{
   19c4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19c50:	4606      	mov	r6, r0
   19c52:	460f      	mov	r7, r1
	struct pdu_adv *prev;
	struct pdu_adv *pdu;
	u8_t last;

	/* Dont update data if directed or extended advertising. */
	radio_adv_data = radio_adv_data_get();
   19c54:	f7fd fc42 	bl	174dc <radio_adv_data_get>
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   19c58:	f890 504f 	ldrb.w	r5, [r0, #79]	; 0x4f
   19c5c:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   19c60:	ebc5 02c2 	rsb	r2, r5, r2, lsl #3
   19c64:	1881      	adds	r1, r0, r2
	if ((prev->type == PDU_ADV_TYPE_DIRECT_IND) ||
   19c66:	5c83      	ldrb	r3, [r0, r2]
   19c68:	f003 030f 	and.w	r3, r3, #15
   19c6c:	2b01      	cmp	r3, #1
   19c6e:	d03e      	beq.n	19cee <ll_adv_data_set+0xa2>
   19c70:	4604      	mov	r4, r0
   19c72:	2b07      	cmp	r3, #7
   19c74:	d03b      	beq.n	19cee <ll_adv_data_set+0xa2>
		 */
		return;
	}

	/* use the last index in double buffer, */
	if (radio_adv_data->first == radio_adv_data->last) {
   19c76:	f890 304e 	ldrb.w	r3, [r0, #78]	; 0x4e
   19c7a:	429d      	cmp	r5, r3
   19c7c:	d039      	beq.n	19cf2 <ll_adv_data_set+0xa6>
	} else {
		last = radio_adv_data->last;
	}

	/* update adv pdu fields. */
	pdu = (struct pdu_adv *)&radio_adv_data->data[last][0];
   19c7e:	eb05 0385 	add.w	r3, r5, r5, lsl #2
   19c82:	ebc5 03c3 	rsb	r3, r5, r3, lsl #3
   19c86:	eb04 0803 	add.w	r8, r4, r3
	pdu->type = prev->type;
   19c8a:	f814 e002 	ldrb.w	lr, [r4, r2]
   19c8e:	5ce0      	ldrb	r0, [r4, r3]
   19c90:	f36e 0003 	bfi	r0, lr, #0, #4
	pdu->rfu = 0;
   19c94:	f36f 1004 	bfc	r0, #4, #1
   19c98:	54e0      	strb	r0, [r4, r3]

	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2)) {
		pdu->chan_sel = prev->chan_sel;
   19c9a:	5ca0      	ldrb	r0, [r4, r2]
   19c9c:	f3c0 1040 	ubfx	r0, r0, #5, #1
   19ca0:	f814 e003 	ldrb.w	lr, [r4, r3]
   19ca4:	f360 1e45 	bfi	lr, r0, #5, #1
   19ca8:	f804 e003 	strb.w	lr, [r4, r3]
	} else {
		pdu->chan_sel = 0;
	}

	pdu->tx_addr = prev->tx_addr;
   19cac:	5ca0      	ldrb	r0, [r4, r2]
   19cae:	f3c0 1080 	ubfx	r0, r0, #6, #1
   19cb2:	fa5f fe8e 	uxtb.w	lr, lr
   19cb6:	f360 1e86 	bfi	lr, r0, #6, #1
   19cba:	f804 e003 	strb.w	lr, [r4, r3]
	pdu->rx_addr = prev->rx_addr;
   19cbe:	5ca2      	ldrb	r2, [r4, r2]
   19cc0:	09d2      	lsrs	r2, r2, #7
   19cc2:	fa5f f08e 	uxtb.w	r0, lr
   19cc6:	f362 10c7 	bfi	r0, r2, #7, #1
   19cca:	54e0      	strb	r0, [r4, r3]
	memcpy(&pdu->payload.adv_ind.addr[0],
   19ccc:	2206      	movs	r2, #6
   19cce:	3102      	adds	r1, #2
   19cd0:	f108 0002 	add.w	r0, r8, #2
   19cd4:	f7e6 faf4 	bl	2c0 <memcpy>
	       &prev->payload.adv_ind.addr[0], BDADDR_SIZE);
	memcpy(&pdu->payload.adv_ind.data[0], data, len);
   19cd8:	4632      	mov	r2, r6
   19cda:	4639      	mov	r1, r7
   19cdc:	f108 0008 	add.w	r0, r8, #8
   19ce0:	f7e6 faee 	bl	2c0 <memcpy>
	pdu->len = BDADDR_SIZE + len;
   19ce4:	3606      	adds	r6, #6
   19ce6:	f888 6001 	strb.w	r6, [r8, #1]

	/* commit the update so controller picks it. */
	radio_adv_data->last = last;
   19cea:	f884 504f 	strb.w	r5, [r4, #79]	; 0x4f
   19cee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		last = radio_adv_data->last + 1;
   19cf2:	3501      	adds	r5, #1
   19cf4:	b2ed      	uxtb	r5, r5
		if (last == DOUBLE_BUFFER_SIZE) {
   19cf6:	2d02      	cmp	r5, #2
   19cf8:	d1c1      	bne.n	19c7e <ll_adv_data_set+0x32>
			last = 0;
   19cfa:	2500      	movs	r5, #0
   19cfc:	e7bf      	b.n	19c7e <ll_adv_data_set+0x32>

00019cfe <ll_scan_data_set>:
}

void ll_scan_data_set(u8_t len, u8_t const *const data)
{
   19cfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19d02:	4606      	mov	r6, r0
   19d04:	460f      	mov	r7, r1
	struct pdu_adv *prev;
	struct pdu_adv *pdu;
	u8_t last;

	/* use the last index in double buffer, */
	radio_scan_data = radio_scan_data_get();
   19d06:	f7fd fbed 	bl	174e4 <radio_scan_data_get>
   19d0a:	4604      	mov	r4, r0
	if (radio_scan_data->first == radio_scan_data->last) {
   19d0c:	f890 204e 	ldrb.w	r2, [r0, #78]	; 0x4e
   19d10:	f890 304f 	ldrb.w	r3, [r0, #79]	; 0x4f
   19d14:	429a      	cmp	r2, r3
   19d16:	d031      	beq.n	19d7c <ll_scan_data_set+0x7e>
		last = radio_scan_data->last + 1;
		if (last == DOUBLE_BUFFER_SIZE) {
			last = 0;
		}
	} else {
		last = radio_scan_data->last;
   19d18:	461d      	mov	r5, r3
	}

	/* update scan pdu fields. */
	prev = (struct pdu_adv *)
   19d1a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   19d1e:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
   19d22:	18e1      	adds	r1, r4, r3
	       &radio_scan_data->data[radio_scan_data->last][0];
	pdu = (struct pdu_adv *)&radio_scan_data->data[last][0];
   19d24:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   19d28:	ebc5 02c2 	rsb	r2, r5, r2, lsl #3
   19d2c:	eb04 0802 	add.w	r8, r4, r2
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   19d30:	5ca0      	ldrb	r0, [r4, r2]
   19d32:	f04f 0e04 	mov.w	lr, #4
   19d36:	f36e 0003 	bfi	r0, lr, #0, #4
	pdu->rfu = 0;
	pdu->chan_sel = 0;
   19d3a:	f000 00ef 	and.w	r0, r0, #239	; 0xef
   19d3e:	f36f 1045 	bfc	r0, #5, #1
   19d42:	54a0      	strb	r0, [r4, r2]
	pdu->tx_addr = prev->tx_addr;
   19d44:	5ce0      	ldrb	r0, [r4, r3]
   19d46:	f3c0 1080 	ubfx	r0, r0, #6, #1
   19d4a:	5ca3      	ldrb	r3, [r4, r2]
   19d4c:	f360 1386 	bfi	r3, r0, #6, #1
	pdu->rx_addr = 0;
   19d50:	f36f 13c7 	bfc	r3, #7, #1
   19d54:	54a3      	strb	r3, [r4, r2]
	pdu->len = BDADDR_SIZE + len;
   19d56:	1db3      	adds	r3, r6, #6
   19d58:	f888 3001 	strb.w	r3, [r8, #1]
	memcpy(&pdu->payload.scan_rsp.addr[0],
   19d5c:	2206      	movs	r2, #6
   19d5e:	3102      	adds	r1, #2
   19d60:	f108 0002 	add.w	r0, r8, #2
   19d64:	f7e6 faac 	bl	2c0 <memcpy>
	       &prev->payload.scan_rsp.addr[0], BDADDR_SIZE);
	memcpy(&pdu->payload.scan_rsp.data[0], data, len);
   19d68:	4632      	mov	r2, r6
   19d6a:	4639      	mov	r1, r7
   19d6c:	f108 0008 	add.w	r0, r8, #8
   19d70:	f7e6 faa6 	bl	2c0 <memcpy>

	/* commit the update so controller picks it. */
	radio_scan_data->last = last;
   19d74:	f884 504f 	strb.w	r5, [r4, #79]	; 0x4f
   19d78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		last = radio_scan_data->last + 1;
   19d7c:	1c5d      	adds	r5, r3, #1
   19d7e:	b2ed      	uxtb	r5, r5
		if (last == DOUBLE_BUFFER_SIZE) {
   19d80:	2d02      	cmp	r5, #2
   19d82:	d1ca      	bne.n	19d1a <ll_scan_data_set+0x1c>
			last = 0;
   19d84:	2500      	movs	r5, #0
   19d86:	e7c8      	b.n	19d1a <ll_scan_data_set+0x1c>

00019d88 <ll_adv_enable>:
}

u32_t ll_adv_enable(u8_t enable)
{
   19d88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19d8c:	b082      	sub	sp, #8
	u8_t   rl_idx = FILTER_IDX_NONE;
	struct pdu_adv *pdu_scan;
	struct pdu_adv *pdu_adv;
	u32_t status;

	if (!enable) {
   19d8e:	b120      	cbz	r0, 19d9a <ll_adv_enable+0x12>
		return radio_adv_disable();
	} else if (radio_adv_is_enabled()) {
   19d90:	f7fd fbac 	bl	174ec <radio_adv_is_enabled>
   19d94:	b130      	cbz	r0, 19da4 <ll_adv_enable+0x1c>
		return 0;
   19d96:	2000      	movs	r0, #0
   19d98:	e001      	b.n	19d9e <ll_adv_enable+0x16>
		return radio_adv_disable();
   19d9a:	f7fe fb27 	bl	183ec <radio_adv_disable>
	status = radio_adv_enable(ll_adv.interval, ll_adv.chan_map,
				  ll_adv.filter_policy, rl_idx);
#endif /* !CONFIG_BT_CTLR_ADV_EXT */

	return status;
}
   19d9e:	b002      	add	sp, #8
   19da0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	radio_adv_data = radio_adv_data_get();
   19da4:	f7fd fb9a 	bl	174dc <radio_adv_data_get>
   19da8:	4605      	mov	r5, r0
	radio_scan_data = radio_scan_data_get();
   19daa:	f7fd fb9b 	bl	174e4 <radio_scan_data_get>
			[radio_adv_data->last][0];
   19dae:	f895 204f 	ldrb.w	r2, [r5, #79]	; 0x4f
	pdu_adv = (struct pdu_adv *)&radio_adv_data->data
   19db2:	eb02 0482 	add.w	r4, r2, r2, lsl #2
   19db6:	ebc2 04c4 	rsb	r4, r2, r4, lsl #3
   19dba:	192e      	adds	r6, r5, r4
			[radio_scan_data->last][0];
   19dbc:	f890 304f 	ldrb.w	r3, [r0, #79]	; 0x4f
	pdu_scan = (struct pdu_adv *)&radio_scan_data->data
   19dc0:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   19dc4:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
   19dc8:	18c7      	adds	r7, r0, r3
	} else if (pdu_adv->type == PDU_ADV_TYPE_EXT_IND) {
   19dca:	5d2b      	ldrb	r3, [r5, r4]
   19dcc:	f003 030f 	and.w	r3, r3, #15
   19dd0:	2b07      	cmp	r3, #7
   19dd2:	d023      	beq.n	19e1c <ll_adv_enable+0x94>
		ll_filters_adv_update(ll_adv.filter_policy);
   19dd4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 19ea8 <ll_adv_enable+0x120>
   19dd8:	f898 0000 	ldrb.w	r0, [r8]
   19ddc:	f3c0 00c1 	ubfx	r0, r0, #3, #2
   19de0:	f7ff f874 	bl	18ecc <ll_filters_adv_update>
		if (ll_adv.own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   19de4:	f898 3000 	ldrb.w	r3, [r8]
   19de8:	f003 0360 	and.w	r3, r3, #96	; 0x60
   19dec:	2b40      	cmp	r3, #64	; 0x40
   19dee:	d02b      	beq.n	19e48 <ll_adv_enable+0xc0>
   19df0:	2b60      	cmp	r3, #96	; 0x60
   19df2:	d029      	beq.n	19e48 <ll_adv_enable+0xc0>
		bool priv = false;
   19df4:	2300      	movs	r3, #0
	u8_t   rl_idx = FILTER_IDX_NONE;
   19df6:	f04f 08ff 	mov.w	r8, #255	; 0xff
		if (!priv) {
   19dfa:	2b00      	cmp	r3, #0
   19dfc:	d03b      	beq.n	19e76 <ll_adv_enable+0xee>
	status = radio_adv_enable(ll_adv.phy_p, ll_adv.interval,
   19dfe:	4b2a      	ldr	r3, [pc, #168]	; (19ea8 <ll_adv_enable+0x120>)
   19e00:	7a18      	ldrb	r0, [r3, #8]
   19e02:	8999      	ldrh	r1, [r3, #12]
				  ll_adv.chan_map, ll_adv.filter_policy,
   19e04:	781a      	ldrb	r2, [r3, #0]
	status = radio_adv_enable(ll_adv.phy_p, ll_adv.interval,
   19e06:	f8cd 8000 	str.w	r8, [sp]
   19e0a:	f3c2 03c1 	ubfx	r3, r2, #3, #2
   19e0e:	f002 0207 	and.w	r2, r2, #7
   19e12:	f000 0007 	and.w	r0, r0, #7
   19e16:	f7fe f90b 	bl	18030 <radio_adv_enable>
	return status;
   19e1a:	e7c0      	b.n	19d9e <ll_adv_enable+0x16>
		ptr = (u8_t *)h + sizeof(*h);
   19e1c:	1d37      	adds	r7, r6, #4
		if (h->adv_addr) {
   19e1e:	78f3      	ldrb	r3, [r6, #3]
   19e20:	f013 0f01 	tst.w	r3, #1
   19e24:	d102      	bne.n	19e2c <ll_adv_enable+0xa4>
	u8_t   rl_idx = FILTER_IDX_NONE;
   19e26:	f04f 08ff 	mov.w	r8, #255	; 0xff
   19e2a:	e7e8      	b.n	19dfe <ll_adv_enable+0x76>
			memcpy(ptr, ll_addr_get(pdu_adv->tx_addr, NULL),
   19e2c:	5d28      	ldrb	r0, [r5, r4]
   19e2e:	2100      	movs	r1, #0
   19e30:	f3c0 1080 	ubfx	r0, r0, #6, #1
   19e34:	f7fe fdf4 	bl	18a20 <ll_addr_get>
   19e38:	2206      	movs	r2, #6
   19e3a:	4601      	mov	r1, r0
   19e3c:	4638      	mov	r0, r7
   19e3e:	f7e6 fa3f 	bl	2c0 <memcpy>
	u8_t   rl_idx = FILTER_IDX_NONE;
   19e42:	f04f 08ff 	mov.w	r8, #255	; 0xff
   19e46:	e7da      	b.n	19dfe <ll_adv_enable+0x76>
			rl_idx = ll_rl_find(ll_adv.id_addr_type,
   19e48:	4917      	ldr	r1, [pc, #92]	; (19ea8 <ll_adv_enable+0x120>)
   19e4a:	f811 0b02 	ldrb.w	r0, [r1], #2
   19e4e:	2200      	movs	r2, #0
   19e50:	09c0      	lsrs	r0, r0, #7
   19e52:	f7ff f86b 	bl	18f2c <ll_rl_find>
   19e56:	4680      	mov	r8, r0
			if (rl_idx != FILTER_IDX_NONE) {
   19e58:	28ff      	cmp	r0, #255	; 0xff
   19e5a:	d002      	beq.n	19e62 <ll_adv_enable+0xda>
				ll_rl_rpa_update(false);
   19e5c:	2000      	movs	r0, #0
   19e5e:	f7ff fac7 	bl	193f0 <ll_rl_rpa_update>
			ll_rl_pdu_adv_update(rl_idx, pdu_adv);
   19e62:	4631      	mov	r1, r6
   19e64:	4640      	mov	r0, r8
   19e66:	f7ff f9f9 	bl	1925c <ll_rl_pdu_adv_update>
			ll_rl_pdu_adv_update(rl_idx, pdu_scan);
   19e6a:	4639      	mov	r1, r7
   19e6c:	4640      	mov	r0, r8
   19e6e:	f7ff f9f5 	bl	1925c <ll_rl_pdu_adv_update>
			priv = true;
   19e72:	2301      	movs	r3, #1
   19e74:	e7c1      	b.n	19dfa <ll_adv_enable+0x72>
			memcpy(&pdu_adv->payload.adv_ind.addr[0],
   19e76:	3602      	adds	r6, #2
			       ll_addr_get(pdu_adv->tx_addr, NULL), BDADDR_SIZE);
   19e78:	5d28      	ldrb	r0, [r5, r4]
   19e7a:	2100      	movs	r1, #0
   19e7c:	f3c0 1080 	ubfx	r0, r0, #6, #1
   19e80:	f7fe fdce 	bl	18a20 <ll_addr_get>
			memcpy(&pdu_adv->payload.adv_ind.addr[0],
   19e84:	2206      	movs	r2, #6
   19e86:	4601      	mov	r1, r0
   19e88:	4630      	mov	r0, r6
   19e8a:	f7e6 fa19 	bl	2c0 <memcpy>
			memcpy(&pdu_scan->payload.scan_rsp.addr[0],
   19e8e:	3702      	adds	r7, #2
			       ll_addr_get(pdu_adv->tx_addr, NULL), BDADDR_SIZE);
   19e90:	5d28      	ldrb	r0, [r5, r4]
   19e92:	2100      	movs	r1, #0
   19e94:	f3c0 1080 	ubfx	r0, r0, #6, #1
   19e98:	f7fe fdc2 	bl	18a20 <ll_addr_get>
			memcpy(&pdu_scan->payload.scan_rsp.addr[0],
   19e9c:	2206      	movs	r2, #6
   19e9e:	4601      	mov	r1, r0
   19ea0:	4638      	mov	r0, r7
   19ea2:	f7e6 fa0d 	bl	2c0 <memcpy>
   19ea6:	e7aa      	b.n	19dfe <ll_adv_enable+0x76>
   19ea8:	20001a54 	.word	0x20001a54

00019eac <ll_scan_params_set>:
	u8_t  filter_policy:2;
} ll_scan;

u32_t ll_scan_params_set(u8_t type, u16_t interval, u16_t window,
			 u8_t own_addr_type, u8_t filter_policy)
{
   19eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19eae:	4607      	mov	r7, r0
   19eb0:	460e      	mov	r6, r1
   19eb2:	4615      	mov	r5, r2
   19eb4:	461c      	mov	r4, r3
	if (radio_scan_is_enabled()) {
   19eb6:	f7fd fb31 	bl	1751c <radio_scan_is_enabled>
   19eba:	b110      	cbz	r0, 19ec2 <ll_scan_params_set+0x16>
		return BT_HCI_ERR_CMD_DISALLOWED;
   19ebc:	220c      	movs	r2, #12
	ll_scan.window = window;
	ll_scan.own_addr_type = own_addr_type;
	ll_scan.filter_policy = filter_policy;

	return 0;
}
   19ebe:	4610      	mov	r0, r2
   19ec0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19ec2:	4602      	mov	r2, r0
	ll_scan.type = type;
   19ec4:	4906      	ldr	r1, [pc, #24]	; (19ee0 <ll_scan_params_set+0x34>)
   19ec6:	790b      	ldrb	r3, [r1, #4]
   19ec8:	f367 0303 	bfi	r3, r7, #0, #4
	ll_scan.interval = interval;
   19ecc:	800e      	strh	r6, [r1, #0]
	ll_scan.window = window;
   19ece:	804d      	strh	r5, [r1, #2]
	ll_scan.own_addr_type = own_addr_type;
   19ed0:	f364 1305 	bfi	r3, r4, #4, #2
	ll_scan.filter_policy = filter_policy;
   19ed4:	f89d 0018 	ldrb.w	r0, [sp, #24]
   19ed8:	f360 1387 	bfi	r3, r0, #6, #2
   19edc:	710b      	strb	r3, [r1, #4]
	return 0;
   19ede:	e7ee      	b.n	19ebe <ll_scan_params_set+0x12>
   19ee0:	20001a64 	.word	0x20001a64

00019ee4 <ll_scan_enable>:

u32_t ll_scan_enable(u8_t enable)
{
   19ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
   19ee6:	b085      	sub	sp, #20
	u32_t status;
	u8_t  rpa_gen = 0;

	if (!enable) {
   19ee8:	b120      	cbz	r0, 19ef4 <ll_scan_enable+0x10>
		return radio_scan_disable();
	} else if (radio_scan_is_enabled()) {
   19eea:	f7fd fb17 	bl	1751c <radio_scan_is_enabled>
   19eee:	b128      	cbz	r0, 19efc <ll_scan_enable+0x18>
		/* Duplicate filtering is processed in the HCI layer */
		return 0;
   19ef0:	2000      	movs	r0, #0
   19ef2:	e001      	b.n	19ef8 <ll_scan_enable+0x14>
		return radio_scan_disable();
   19ef4:	f7fe fbac 	bl	18650 <radio_scan_disable>
				   ll_scan.interval, ll_scan.window,
				   ll_scan.filter_policy, rpa_gen,
				   FILTER_IDX_NONE);

	return status;
}
   19ef8:	b005      	add	sp, #20
   19efa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ll_filters_scan_update(ll_scan.filter_policy);
   19efc:	4c18      	ldr	r4, [pc, #96]	; (19f60 <ll_scan_enable+0x7c>)
   19efe:	7920      	ldrb	r0, [r4, #4]
   19f00:	0980      	lsrs	r0, r0, #6
   19f02:	f7fe fffb 	bl	18efc <ll_filters_scan_update>
	if ((ll_scan.type & 0x1) &&
   19f06:	7923      	ldrb	r3, [r4, #4]
   19f08:	f013 0f01 	tst.w	r3, #1
   19f0c:	d00d      	beq.n	19f2a <ll_scan_enable+0x46>
	    (ll_scan.own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   19f0e:	7923      	ldrb	r3, [r4, #4]
   19f10:	f003 0330 	and.w	r3, r3, #48	; 0x30
	if ((ll_scan.type & 0x1) &&
   19f14:	2b20      	cmp	r3, #32
   19f16:	d003      	beq.n	19f20 <ll_scan_enable+0x3c>
	    (ll_scan.own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   19f18:	2b30      	cmp	r3, #48	; 0x30
   19f1a:	d001      	beq.n	19f20 <ll_scan_enable+0x3c>
	u8_t  rpa_gen = 0;
   19f1c:	2700      	movs	r7, #0
   19f1e:	e005      	b.n	19f2c <ll_scan_enable+0x48>
		ll_rl_rpa_update(false);
   19f20:	2000      	movs	r0, #0
   19f22:	f7ff fa65 	bl	193f0 <ll_rl_rpa_update>
		rpa_gen = 1;
   19f26:	2701      	movs	r7, #1
   19f28:	e000      	b.n	19f2c <ll_scan_enable+0x48>
	u8_t  rpa_gen = 0;
   19f2a:	2700      	movs	r7, #0
	status = radio_scan_enable(ll_scan.type, ll_scan.own_addr_type & 0x1,
   19f2c:	4d0c      	ldr	r5, [pc, #48]	; (19f60 <ll_scan_enable+0x7c>)
   19f2e:	792c      	ldrb	r4, [r5, #4]
   19f30:	f004 060f 	and.w	r6, r4, #15
   19f34:	f3c4 1400 	ubfx	r4, r4, #4, #1
   19f38:	2100      	movs	r1, #0
   19f3a:	4620      	mov	r0, r4
   19f3c:	f7fe fd70 	bl	18a20 <ll_addr_get>
   19f40:	882b      	ldrh	r3, [r5, #0]
   19f42:	8869      	ldrh	r1, [r5, #2]
				   ll_scan.filter_policy, rpa_gen,
   19f44:	792a      	ldrb	r2, [r5, #4]
   19f46:	0992      	lsrs	r2, r2, #6
	status = radio_scan_enable(ll_scan.type, ll_scan.own_addr_type & 0x1,
   19f48:	25ff      	movs	r5, #255	; 0xff
   19f4a:	9503      	str	r5, [sp, #12]
   19f4c:	9702      	str	r7, [sp, #8]
   19f4e:	9201      	str	r2, [sp, #4]
   19f50:	9100      	str	r1, [sp, #0]
   19f52:	4602      	mov	r2, r0
   19f54:	4621      	mov	r1, r4
   19f56:	4630      	mov	r0, r6
   19f58:	f7fe fa7a 	bl	18450 <radio_scan_enable>
	return status;
   19f5c:	e7cc      	b.n	19ef8 <ll_scan_enable+0x14>
   19f5e:	bf00      	nop
   19f60:	20001a64 	.word	0x20001a64

00019f64 <ll_create_connection>:
u32_t ll_create_connection(u16_t scan_interval, u16_t scan_window,
			   u8_t filter_policy, u8_t peer_addr_type,
			   u8_t *peer_addr, u8_t own_addr_type,
			   u16_t interval, u16_t latency,
			   u16_t timeout)
{
   19f64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   19f68:	b085      	sub	sp, #20
   19f6a:	4607      	mov	r7, r0
   19f6c:	4688      	mov	r8, r1
   19f6e:	4615      	mov	r5, r2
   19f70:	461e      	mov	r6, r3
   19f72:	f89d 4034 	ldrb.w	r4, [sp, #52]	; 0x34
	u32_t status;
	u8_t  rpa_gen = 0;
	u8_t  rl_idx = FILTER_IDX_NONE;

	if (radio_scan_is_enabled()) {
   19f76:	f7fd fad1 	bl	1751c <radio_scan_is_enabled>
   19f7a:	b120      	cbz	r0, 19f86 <ll_create_connection+0x22>
		return BT_HCI_ERR_CMD_DISALLOWED;
   19f7c:	230c      	movs	r3, #12
#endif
	return radio_scan_enable(0, own_addr_type,
				 ll_addr_get(own_addr_type, NULL),
				 scan_interval, scan_window,
				 filter_policy, rpa_gen, rl_idx);
}
   19f7e:	4618      	mov	r0, r3
   19f80:	b005      	add	sp, #20
   19f82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	status = radio_connect_enable(peer_addr_type, peer_addr, interval,
   19f86:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
   19f8a:	9300      	str	r3, [sp, #0]
   19f8c:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
   19f90:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
   19f94:	990c      	ldr	r1, [sp, #48]	; 0x30
   19f96:	4630      	mov	r0, r6
   19f98:	f7fd fada 	bl	17550 <radio_connect_enable>
	if (status) {
   19f9c:	4603      	mov	r3, r0
   19f9e:	2800      	cmp	r0, #0
   19fa0:	d1ed      	bne.n	19f7e <ll_create_connection+0x1a>
	ll_filters_scan_update(filter_policy);
   19fa2:	4628      	mov	r0, r5
   19fa4:	f7fe ffaa 	bl	18efc <ll_filters_scan_update>
	if (!filter_policy && ctrl_rl_enabled()) {
   19fa8:	b1c5      	cbz	r5, 19fdc <ll_create_connection+0x78>
	u8_t  rl_idx = FILTER_IDX_NONE;
   19faa:	f04f 09ff 	mov.w	r9, #255	; 0xff
	if (own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   19fae:	1ea3      	subs	r3, r4, #2
   19fb0:	b2db      	uxtb	r3, r3
   19fb2:	2b01      	cmp	r3, #1
   19fb4:	d91f      	bls.n	19ff6 <ll_create_connection+0x92>
	u8_t  rpa_gen = 0;
   19fb6:	2600      	movs	r6, #0
	return radio_scan_enable(0, own_addr_type,
   19fb8:	2100      	movs	r1, #0
   19fba:	4620      	mov	r0, r4
   19fbc:	f7fe fd30 	bl	18a20 <ll_addr_get>
   19fc0:	f8cd 900c 	str.w	r9, [sp, #12]
   19fc4:	9602      	str	r6, [sp, #8]
   19fc6:	9501      	str	r5, [sp, #4]
   19fc8:	f8cd 8000 	str.w	r8, [sp]
   19fcc:	463b      	mov	r3, r7
   19fce:	4602      	mov	r2, r0
   19fd0:	4621      	mov	r1, r4
   19fd2:	2000      	movs	r0, #0
   19fd4:	f7fe fa3c 	bl	18450 <radio_scan_enable>
   19fd8:	4603      	mov	r3, r0
   19fda:	e7d0      	b.n	19f7e <ll_create_connection+0x1a>
	if (!filter_policy && ctrl_rl_enabled()) {
   19fdc:	f7ff f936 	bl	1924c <ctrl_rl_enabled>
   19fe0:	b910      	cbnz	r0, 19fe8 <ll_create_connection+0x84>
	u8_t  rl_idx = FILTER_IDX_NONE;
   19fe2:	f04f 09ff 	mov.w	r9, #255	; 0xff
   19fe6:	e7e2      	b.n	19fae <ll_create_connection+0x4a>
		rl_idx = ll_rl_find(peer_addr_type, peer_addr, NULL);
   19fe8:	2200      	movs	r2, #0
   19fea:	990c      	ldr	r1, [sp, #48]	; 0x30
   19fec:	4630      	mov	r0, r6
   19fee:	f7fe ff9d 	bl	18f2c <ll_rl_find>
   19ff2:	4681      	mov	r9, r0
   19ff4:	e7db      	b.n	19fae <ll_create_connection+0x4a>
		ll_rl_rpa_update(false);
   19ff6:	2000      	movs	r0, #0
   19ff8:	f7ff f9fa 	bl	193f0 <ll_rl_rpa_update>
		own_addr_type &= 0x1;
   19ffc:	f004 0401 	and.w	r4, r4, #1
		rpa_gen = 1;
   1a000:	2601      	movs	r6, #1
   1a002:	e7d9      	b.n	19fb8 <ll_create_connection+0x54>

0001a004 <pool_id>:
	return &_net_buf_pool_list[id];
}

static int pool_id(struct net_buf_pool *pool)
{
	return pool - _net_buf_pool_list;
   1a004:	4b01      	ldr	r3, [pc, #4]	; (1a00c <pool_id+0x8>)
   1a006:	1ac0      	subs	r0, r0, r3
}
   1a008:	1140      	asrs	r0, r0, #5
   1a00a:	4770      	bx	lr
   1a00c:	2000d084 	.word	0x2000d084

0001a010 <net_buf_pool_get>:
}
   1a010:	4b01      	ldr	r3, [pc, #4]	; (1a018 <net_buf_pool_get+0x8>)
   1a012:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   1a016:	4770      	bx	lr
   1a018:	2000d084 	.word	0x2000d084

0001a01c <net_buf_reset>:
void net_buf_reset(struct net_buf *buf)
{
	NET_BUF_ASSERT(buf->flags == 0);
	NET_BUF_ASSERT(buf->frags == NULL);

	buf->len   = 0;
   1a01c:	2300      	movs	r3, #0
   1a01e:	8183      	strh	r3, [r0, #12]
	buf->data  = buf->__buf;
   1a020:	f100 0310 	add.w	r3, r0, #16
   1a024:	6083      	str	r3, [r0, #8]
   1a026:	4770      	bx	lr

0001a028 <net_buf_alloc>:
struct net_buf *net_buf_alloc_debug(struct net_buf_pool *pool, s32_t timeout,
				    const char *func, int line)
#else
struct net_buf *net_buf_alloc(struct net_buf_pool *pool, s32_t timeout)
#endif
{
   1a028:	b570      	push	{r4, r5, r6, lr}
   1a02a:	4605      	mov	r5, r0
	__asm__ volatile(
   1a02c:	f04f 0320 	mov.w	r3, #32
   1a030:	f3ef 8611 	mrs	r6, BASEPRI
   1a034:	f383 8811 	msr	BASEPRI, r3
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   1a038:	8a43      	ldrh	r3, [r0, #18]
   1a03a:	b373      	cbz	r3, 1a09a <net_buf_alloc+0x72>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   1a03c:	8a02      	ldrh	r2, [r0, #16]
   1a03e:	4293      	cmp	r3, r2
   1a040:	d207      	bcs.n	1a052 <net_buf_alloc+0x2a>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
   1a042:	2100      	movs	r1, #0
   1a044:	f00e f83a 	bl	280bc <k_queue_get>
			if (buf) {
   1a048:	4604      	mov	r4, r0
   1a04a:	b110      	cbz	r0, 1a052 <net_buf_alloc+0x2a>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   1a04c:	f386 8811 	msr	BASEPRI, r6
   1a050:	e019      	b.n	1a086 <net_buf_alloc+0x5e>
				irq_unlock(key);
				goto success;
			}
		}

		uninit_count = pool->uninit_count--;
   1a052:	8a6b      	ldrh	r3, [r5, #18]
   1a054:	1e5a      	subs	r2, r3, #1
   1a056:	826a      	strh	r2, [r5, #18]
   1a058:	f386 8811 	msr	BASEPRI, r6
	buf = UNINIT_BUF(pool, pool->buf_count - uninit_count);
   1a05c:	69ea      	ldr	r2, [r5, #28]
   1a05e:	8a2c      	ldrh	r4, [r5, #16]
   1a060:	1ae4      	subs	r4, r4, r3
   1a062:	8aab      	ldrh	r3, [r5, #20]
   1a064:	3303      	adds	r3, #3
   1a066:	f023 0303 	bic.w	r3, r3, #3
   1a06a:	8ae9      	ldrh	r1, [r5, #22]
   1a06c:	3103      	adds	r1, #3
   1a06e:	f021 0103 	bic.w	r1, r1, #3
   1a072:	440b      	add	r3, r1
   1a074:	3310      	adds	r3, #16
   1a076:	fb03 2404 	mla	r4, r3, r4, r2
	buf->pool_id = pool_id(pool);
   1a07a:	4628      	mov	r0, r5
   1a07c:	f7ff ffc2 	bl	1a004 <pool_id>
   1a080:	71a0      	strb	r0, [r4, #6]
	buf->size = pool->buf_size;
   1a082:	8aab      	ldrh	r3, [r5, #20]
   1a084:	81e3      	strh	r3, [r4, #14]
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	buf->ref   = 1;
   1a086:	2301      	movs	r3, #1
   1a088:	7123      	strb	r3, [r4, #4]
	buf->flags = 0;
   1a08a:	2300      	movs	r3, #0
   1a08c:	7163      	strb	r3, [r4, #5]
	buf->frags = NULL;
   1a08e:	6023      	str	r3, [r4, #0]
	net_buf_reset(buf);
   1a090:	4620      	mov	r0, r4
   1a092:	f7ff ffc3 	bl	1a01c <net_buf_reset>
	pool->avail_count--;
	NET_BUF_ASSERT(pool->avail_count >= 0);
#endif

	return buf;
}
   1a096:	4620      	mov	r0, r4
   1a098:	bd70      	pop	{r4, r5, r6, pc}
   1a09a:	f386 8811 	msr	BASEPRI, r6
	buf = k_lifo_get(&pool->free, timeout);
   1a09e:	f00e f80d 	bl	280bc <k_queue_get>
	if (!buf) {
   1a0a2:	4604      	mov	r4, r0
   1a0a4:	2800      	cmp	r0, #0
   1a0a6:	d1ee      	bne.n	1a086 <net_buf_alloc+0x5e>
   1a0a8:	e7f5      	b.n	1a096 <net_buf_alloc+0x6e>

0001a0aa <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, s32_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, s32_t timeout)
#endif
{
   1a0aa:	b570      	push	{r4, r5, r6, lr}
   1a0ac:	4605      	mov	r5, r0
	struct net_buf *buf, *frag;

	NET_BUF_DBG("%s():%d: fifo %p timeout %d", func, line, fifo, timeout);

	buf = k_fifo_get(fifo, timeout);
   1a0ae:	f00e f805 	bl	280bc <k_queue_get>
	if (!buf) {
   1a0b2:	4606      	mov	r6, r0
   1a0b4:	b188      	cbz	r0, 1a0da <net_buf_get+0x30>
   1a0b6:	4604      	mov	r4, r0
   1a0b8:	e009      	b.n	1a0ce <net_buf_get+0x24>

	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   1a0ba:	2100      	movs	r1, #0
   1a0bc:	4628      	mov	r0, r5
   1a0be:	f00d fffd 	bl	280bc <k_queue_get>
   1a0c2:	6020      	str	r0, [r4, #0]
		NET_BUF_ASSERT(frag->frags);

		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
   1a0c4:	7963      	ldrb	r3, [r4, #5]
   1a0c6:	f023 0301 	bic.w	r3, r3, #1
   1a0ca:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1a0cc:	4604      	mov	r4, r0
   1a0ce:	7963      	ldrb	r3, [r4, #5]
   1a0d0:	f013 0f01 	tst.w	r3, #1
   1a0d4:	d1f1      	bne.n	1a0ba <net_buf_get+0x10>
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
   1a0d6:	2300      	movs	r3, #0
   1a0d8:	6023      	str	r3, [r4, #0]

	return buf;
}
   1a0da:	4630      	mov	r0, r6
   1a0dc:	bd70      	pop	{r4, r5, r6, pc}

0001a0de <net_buf_reserve>:
{
	NET_BUF_ASSERT(buf);
	NET_BUF_ASSERT(buf->len == 0);
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   1a0de:	f100 0310 	add.w	r3, r0, #16
   1a0e2:	4419      	add	r1, r3
   1a0e4:	6081      	str	r1, [r0, #8]
   1a0e6:	4770      	bx	lr

0001a0e8 <net_buf_put>:
}

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   1a0e8:	b510      	push	{r4, lr}
	struct net_buf *tail;

	NET_BUF_ASSERT(fifo);
	NET_BUF_ASSERT(buf);

	for (tail = buf; tail->frags; tail = tail->frags) {
   1a0ea:	460a      	mov	r2, r1
   1a0ec:	e004      	b.n	1a0f8 <net_buf_put+0x10>
		tail->flags |= NET_BUF_FRAGS;
   1a0ee:	7953      	ldrb	r3, [r2, #5]
   1a0f0:	f043 0301 	orr.w	r3, r3, #1
   1a0f4:	7153      	strb	r3, [r2, #5]
	for (tail = buf; tail->frags; tail = tail->frags) {
   1a0f6:	4622      	mov	r2, r4
   1a0f8:	6814      	ldr	r4, [r2, #0]
   1a0fa:	2c00      	cmp	r4, #0
   1a0fc:	d1f7      	bne.n	1a0ee <net_buf_put+0x6>
	}

	k_fifo_put_list(fifo, buf, tail);
   1a0fe:	f00d ffc1 	bl	28084 <k_queue_append_list>
   1a102:	bd10      	pop	{r4, pc}

0001a104 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   1a104:	b538      	push	{r3, r4, r5, lr}
   1a106:	4604      	mov	r4, r0
	NET_BUF_ASSERT(buf);

	while (buf) {
   1a108:	e006      	b.n	1a118 <net_buf_unref+0x14>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1a10a:	79a0      	ldrb	r0, [r4, #6]
   1a10c:	f7ff ff80 	bl	1a010 <net_buf_pool_get>
	k_lifo_put(&pool->free, buf);
   1a110:	4621      	mov	r1, r4
   1a112:	f00d ffb1 	bl	28078 <k_queue_prepend>
{
   1a116:	462c      	mov	r4, r5
	while (buf) {
   1a118:	b17c      	cbz	r4, 1a13a <net_buf_unref+0x36>
		struct net_buf *frags = buf->frags;
   1a11a:	6825      	ldr	r5, [r4, #0]
		}
#endif
		NET_BUF_DBG("buf %p ref %u pool_id %u frags %p", buf, buf->ref,
			    buf->pool_id, buf->frags);

		if (--buf->ref > 0) {
   1a11c:	7923      	ldrb	r3, [r4, #4]
   1a11e:	3b01      	subs	r3, #1
   1a120:	b2db      	uxtb	r3, r3
   1a122:	7123      	strb	r3, [r4, #4]
   1a124:	b94b      	cbnz	r3, 1a13a <net_buf_unref+0x36>
			return;
		}

		buf->frags = NULL;
   1a126:	6023      	str	r3, [r4, #0]

		pool = net_buf_pool_get(buf->pool_id);
   1a128:	79a0      	ldrb	r0, [r4, #6]
   1a12a:	f7ff ff71 	bl	1a010 <net_buf_pool_get>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		pool->avail_count++;
		NET_BUF_ASSERT(pool->avail_count <= pool->buf_count);
#endif

		if (pool->destroy) {
   1a12e:	6983      	ldr	r3, [r0, #24]
   1a130:	2b00      	cmp	r3, #0
   1a132:	d0ea      	beq.n	1a10a <net_buf_unref+0x6>
			pool->destroy(buf);
   1a134:	4620      	mov	r0, r4
   1a136:	4798      	blx	r3
   1a138:	e7ed      	b.n	1a116 <net_buf_unref+0x12>
   1a13a:	bd38      	pop	{r3, r4, r5, pc}

0001a13c <net_buf_ref>:
{
	NET_BUF_ASSERT(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   1a13c:	7903      	ldrb	r3, [r0, #4]
   1a13e:	3301      	adds	r3, #1
   1a140:	7103      	strb	r3, [r0, #4]
	return buf;
}
   1a142:	4770      	bx	lr

0001a144 <net_buf_frag_last>:

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
	NET_BUF_ASSERT(buf);

	while (buf->frags) {
   1a144:	e000      	b.n	1a148 <net_buf_frag_last+0x4>
		buf = buf->frags;
   1a146:	4618      	mov	r0, r3
	while (buf->frags) {
   1a148:	6803      	ldr	r3, [r0, #0]
   1a14a:	2b00      	cmp	r3, #0
   1a14c:	d1fb      	bne.n	1a146 <net_buf_frag_last+0x2>
	}

	return buf;
}
   1a14e:	4770      	bx	lr

0001a150 <net_buf_frag_insert>:

void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
   1a150:	b570      	push	{r4, r5, r6, lr}
   1a152:	4604      	mov	r4, r0
   1a154:	460d      	mov	r5, r1
	NET_BUF_ASSERT(parent);
	NET_BUF_ASSERT(frag);

	if (parent->frags) {
   1a156:	6806      	ldr	r6, [r0, #0]
   1a158:	b11e      	cbz	r6, 1a162 <net_buf_frag_insert+0x12>
		net_buf_frag_last(frag)->frags = parent->frags;
   1a15a:	4608      	mov	r0, r1
   1a15c:	f7ff fff2 	bl	1a144 <net_buf_frag_last>
   1a160:	6006      	str	r6, [r0, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   1a162:	6025      	str	r5, [r4, #0]
   1a164:	bd70      	pop	{r4, r5, r6, pc}

0001a166 <net_buf_frag_add>:
}

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   1a166:	b538      	push	{r3, r4, r5, lr}
   1a168:	460d      	mov	r5, r1
	NET_BUF_ASSERT(frag);

	if (!head) {
   1a16a:	b138      	cbz	r0, 1a17c <net_buf_frag_add+0x16>
   1a16c:	4604      	mov	r4, r0
		return net_buf_ref(frag);
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);
   1a16e:	f7ff ffe9 	bl	1a144 <net_buf_frag_last>
   1a172:	4629      	mov	r1, r5
   1a174:	f7ff ffec 	bl	1a150 <net_buf_frag_insert>

	return head;
   1a178:	4620      	mov	r0, r4
}
   1a17a:	bd38      	pop	{r3, r4, r5, pc}
		return net_buf_ref(frag);
   1a17c:	4608      	mov	r0, r1
   1a17e:	f7ff ffdd 	bl	1a13c <net_buf_ref>
   1a182:	bd38      	pop	{r3, r4, r5, pc}

0001a184 <net_buf_frag_del>:
				       struct net_buf *frag,
				       const char *func, int line)
#else
struct net_buf *net_buf_frag_del(struct net_buf *parent, struct net_buf *frag)
#endif
{
   1a184:	b510      	push	{r4, lr}
	struct net_buf *next_frag;

	NET_BUF_ASSERT(frag);

	if (parent) {
   1a186:	b108      	cbz	r0, 1a18c <net_buf_frag_del+0x8>
		NET_BUF_ASSERT(parent->frags);
		NET_BUF_ASSERT(parent->frags == frag);
		parent->frags = frag->frags;
   1a188:	680a      	ldr	r2, [r1, #0]
   1a18a:	6002      	str	r2, [r0, #0]
	}

	next_frag = frag->frags;
   1a18c:	680c      	ldr	r4, [r1, #0]

	frag->frags = NULL;
   1a18e:	2300      	movs	r3, #0
   1a190:	600b      	str	r3, [r1, #0]

#if defined(CONFIG_NET_BUF_LOG)
	net_buf_unref_debug(frag, func, line);
#else
	net_buf_unref(frag);
   1a192:	4608      	mov	r0, r1
   1a194:	f7ff ffb6 	bl	1a104 <net_buf_unref>
#endif

	return next_frag;
}
   1a198:	4620      	mov	r0, r4
   1a19a:	bd10      	pop	{r4, pc}

0001a19c <net_buf_simple_add>:
	return buf->data + buf->len;
   1a19c:	6802      	ldr	r2, [r0, #0]
   1a19e:	8883      	ldrh	r3, [r0, #4]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   1a1a0:	4419      	add	r1, r3
   1a1a2:	8081      	strh	r1, [r0, #4]
	return tail;
}
   1a1a4:	18d0      	adds	r0, r2, r3
   1a1a6:	4770      	bx	lr

0001a1a8 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   1a1a8:	b538      	push	{r3, r4, r5, lr}
   1a1aa:	460d      	mov	r5, r1
   1a1ac:	4614      	mov	r4, r2
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   1a1ae:	4611      	mov	r1, r2
   1a1b0:	f7ff fff4 	bl	1a19c <net_buf_simple_add>
   1a1b4:	4622      	mov	r2, r4
   1a1b6:	4629      	mov	r1, r5
   1a1b8:	f7e6 f882 	bl	2c0 <memcpy>
}
   1a1bc:	bd38      	pop	{r3, r4, r5, pc}

0001a1be <net_buf_simple_add_u8>:

u8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, u8_t val)
{
   1a1be:	b510      	push	{r4, lr}
   1a1c0:	460c      	mov	r4, r1
	u8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
   1a1c2:	2101      	movs	r1, #1
   1a1c4:	f7ff ffea 	bl	1a19c <net_buf_simple_add>
	*u8 = val;
   1a1c8:	7004      	strb	r4, [r0, #0]

	return u8;
}
   1a1ca:	bd10      	pop	{r4, pc}

0001a1cc <net_buf_simple_add_le16>:

void net_buf_simple_add_le16(struct net_buf_simple *buf, u16_t val)
{
   1a1cc:	b510      	push	{r4, lr}
   1a1ce:	b082      	sub	sp, #8
   1a1d0:	ac02      	add	r4, sp, #8
   1a1d2:	f824 1d02 	strh.w	r1, [r4, #-2]!
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	val = sys_cpu_to_le16(val);
	memcpy(net_buf_simple_add(buf, sizeof(val)), &val, sizeof(val));
   1a1d6:	2102      	movs	r1, #2
   1a1d8:	f7ff ffe0 	bl	1a19c <net_buf_simple_add>
   1a1dc:	2202      	movs	r2, #2
   1a1de:	4621      	mov	r1, r4
   1a1e0:	f7e6 f86e 	bl	2c0 <memcpy>
}
   1a1e4:	b002      	add	sp, #8
   1a1e6:	bd10      	pop	{r4, pc}

0001a1e8 <net_buf_simple_add_be16>:

void net_buf_simple_add_be16(struct net_buf_simple *buf, u16_t val)
{
   1a1e8:	b510      	push	{r4, lr}
   1a1ea:	b082      	sub	sp, #8
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	val = sys_cpu_to_be16(val);
   1a1ec:	0a0b      	lsrs	r3, r1, #8
   1a1ee:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
   1a1f2:	ac02      	add	r4, sp, #8
   1a1f4:	f824 1d02 	strh.w	r1, [r4, #-2]!
	memcpy(net_buf_simple_add(buf, sizeof(val)), &val, sizeof(val));
   1a1f8:	2102      	movs	r1, #2
   1a1fa:	f7ff ffcf 	bl	1a19c <net_buf_simple_add>
   1a1fe:	2202      	movs	r2, #2
   1a200:	4621      	mov	r1, r4
   1a202:	f7e6 f85d 	bl	2c0 <memcpy>
}
   1a206:	b002      	add	sp, #8
   1a208:	bd10      	pop	{r4, pc}

0001a20a <net_buf_simple_push>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   1a20a:	6803      	ldr	r3, [r0, #0]
   1a20c:	1a5b      	subs	r3, r3, r1
   1a20e:	6003      	str	r3, [r0, #0]
	buf->len += len;
   1a210:	8882      	ldrh	r2, [r0, #4]
   1a212:	4411      	add	r1, r2
   1a214:	8081      	strh	r1, [r0, #4]
	return buf->data;
}
   1a216:	4618      	mov	r0, r3
   1a218:	4770      	bx	lr

0001a21a <net_buf_simple_push_le16>:

void net_buf_simple_push_le16(struct net_buf_simple *buf, u16_t val)
{
   1a21a:	b510      	push	{r4, lr}
   1a21c:	b082      	sub	sp, #8
   1a21e:	ac02      	add	r4, sp, #8
   1a220:	f824 1d02 	strh.w	r1, [r4, #-2]!
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	val = sys_cpu_to_le16(val);
	memcpy(net_buf_simple_push(buf, sizeof(val)), &val, sizeof(val));
   1a224:	2102      	movs	r1, #2
   1a226:	f7ff fff0 	bl	1a20a <net_buf_simple_push>
   1a22a:	2202      	movs	r2, #2
   1a22c:	4621      	mov	r1, r4
   1a22e:	f7e6 f847 	bl	2c0 <memcpy>
}
   1a232:	b002      	add	sp, #8
   1a234:	bd10      	pop	{r4, pc}

0001a236 <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(buf->len >= len);

	buf->len -= len;
   1a236:	8883      	ldrh	r3, [r0, #4]
   1a238:	1a5b      	subs	r3, r3, r1
   1a23a:	8083      	strh	r3, [r0, #4]
	return buf->data += len;
   1a23c:	6803      	ldr	r3, [r0, #0]
   1a23e:	4419      	add	r1, r3
   1a240:	6001      	str	r1, [r0, #0]
}
   1a242:	4608      	mov	r0, r1
   1a244:	4770      	bx	lr

0001a246 <net_buf_simple_pull_u8>:

u8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
   1a246:	b510      	push	{r4, lr}
	u8_t val;

	val = buf->data[0];
   1a248:	6803      	ldr	r3, [r0, #0]
   1a24a:	781c      	ldrb	r4, [r3, #0]
	net_buf_simple_pull(buf, 1);
   1a24c:	2101      	movs	r1, #1
   1a24e:	f7ff fff2 	bl	1a236 <net_buf_simple_pull>

	return val;
}
   1a252:	4620      	mov	r0, r4
   1a254:	bd10      	pop	{r4, pc}

0001a256 <net_buf_simple_pull_le16>:

u16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   1a256:	b510      	push	{r4, lr}
	u16_t val;

	val = UNALIGNED_GET((u16_t *)buf->data);
   1a258:	6803      	ldr	r3, [r0, #0]
   1a25a:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   1a25c:	2102      	movs	r1, #2
   1a25e:	f7ff ffea 	bl	1a236 <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   1a262:	4620      	mov	r0, r4
   1a264:	bd10      	pop	{r4, pc}

0001a266 <net_buf_simple_headroom>:
	return sys_be32_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   1a266:	f850 3b08 	ldr.w	r3, [r0], #8
}
   1a26a:	1a18      	subs	r0, r3, r0
   1a26c:	4770      	bx	lr

0001a26e <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
   1a26e:	b538      	push	{r3, r4, r5, lr}
   1a270:	4605      	mov	r5, r0
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   1a272:	88c4      	ldrh	r4, [r0, #6]
   1a274:	f7ff fff7 	bl	1a266 <net_buf_simple_headroom>
   1a278:	1a20      	subs	r0, r4, r0
   1a27a:	88ab      	ldrh	r3, [r5, #4]
}
   1a27c:	1ac0      	subs	r0, r0, r3
   1a27e:	bd38      	pop	{r3, r4, r5, pc}

0001a280 <processing_data>:

	return NET_DROP;
}

static void processing_data(struct net_pkt *pkt, bool is_loopback)
{
   1a280:	b510      	push	{r4, lr}
   1a282:	4604      	mov	r4, r0
	if (!pkt->frags) {
   1a284:	6883      	ldr	r3, [r0, #8]
   1a286:	b18b      	cbz	r3, 1a2ac <processing_data+0x2c>
	if (!is_loopback && !locally_routed) {
   1a288:	b1b1      	cbz	r1, 1a2b8 <processing_data+0x38>
	return net_buf_frags_len(pkt->frags);
}

static inline u8_t *net_pkt_ip_data(struct net_pkt *pkt)
{
	return pkt->frags->data;
   1a28a:	68a3      	ldr	r3, [r4, #8]
   1a28c:	689b      	ldr	r3, [r3, #8]
	switch (NET_IPV6_HDR(pkt)->vtc & 0xf0) {
   1a28e:	781b      	ldrb	r3, [r3, #0]
   1a290:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   1a294:	2b60      	cmp	r3, #96	; 0x60
   1a296:	d01d      	beq.n	1a2d4 <processing_data+0x54>
	net_stats.processing_error++;
}

static inline void net_stats_update_ip_errors_protoerr(void)
{
	net_stats.ip_errors.protoerr++;
   1a298:	4b18      	ldr	r3, [pc, #96]	; (1a2fc <processing_data+0x7c>)
   1a29a:	6a1a      	ldr	r2, [r3, #32]
   1a29c:	3201      	adds	r2, #1
   1a29e:	621a      	str	r2, [r3, #32]
}

static inline void net_stats_update_ip_errors_vhlerr(void)
{
	net_stats.ip_errors.vhlerr++;
   1a2a0:	68da      	ldr	r2, [r3, #12]
   1a2a2:	3201      	adds	r2, #1
   1a2a4:	60da      	str	r2, [r3, #12]
	return NET_DROP;
   1a2a6:	2002      	movs	r0, #2
	switch (process_data(pkt, is_loopback)) {
   1a2a8:	bb18      	cbnz	r0, 1a2f2 <processing_data+0x72>
   1a2aa:	bd10      	pop	{r4, pc}
	net_stats.processing_error++;
   1a2ac:	4a13      	ldr	r2, [pc, #76]	; (1a2fc <processing_data+0x7c>)
   1a2ae:	6813      	ldr	r3, [r2, #0]
   1a2b0:	3301      	adds	r3, #1
   1a2b2:	6013      	str	r3, [r2, #0]
		return NET_DROP;
   1a2b4:	2002      	movs	r0, #2
   1a2b6:	e7f7      	b.n	1a2a8 <processing_data+0x28>
	return pkt->iface;
   1a2b8:	6940      	ldr	r0, [r0, #20]
 * @return verdict about the packet
 */
static inline enum net_verdict net_if_recv_data(struct net_if *iface,
						struct net_pkt *pkt)
{
	return iface->l2->recv(iface, pkt);
   1a2ba:	6843      	ldr	r3, [r0, #4]
   1a2bc:	681b      	ldr	r3, [r3, #0]
   1a2be:	4621      	mov	r1, r4
   1a2c0:	4798      	blx	r3
		if (ret != NET_CONTINUE) {
   1a2c2:	2801      	cmp	r0, #1
   1a2c4:	d0e1      	beq.n	1a28a <processing_data+0xa>
			if (ret == NET_DROP) {
   1a2c6:	2802      	cmp	r0, #2
   1a2c8:	d1ee      	bne.n	1a2a8 <processing_data+0x28>
   1a2ca:	4a0c      	ldr	r2, [pc, #48]	; (1a2fc <processing_data+0x7c>)
   1a2cc:	6813      	ldr	r3, [r2, #0]
   1a2ce:	3301      	adds	r3, #1
   1a2d0:	6013      	str	r3, [r2, #0]
   1a2d2:	e7e9      	b.n	1a2a8 <processing_data+0x28>
	net_stats.ipv6.sent++;
}

static inline void net_stats_update_ipv6_recv(void)
{
	net_stats.ipv6.recv++;
   1a2d4:	4a09      	ldr	r2, [pc, #36]	; (1a2fc <processing_data+0x7c>)
   1a2d6:	6a53      	ldr	r3, [r2, #36]	; 0x24
   1a2d8:	3301      	adds	r3, #1
   1a2da:	6253      	str	r3, [r2, #36]	; 0x24
	pkt->family = family;
   1a2dc:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   1a2e0:	220a      	movs	r2, #10
   1a2e2:	f362 03c6 	bfi	r3, r2, #3, #4
   1a2e6:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
		return net_ipv6_process_pkt(pkt);
   1a2ea:	4620      	mov	r0, r4
   1a2ec:	f006 fd1e 	bl	20d2c <net_ipv6_process_pkt>
   1a2f0:	e7da      	b.n	1a2a8 <processing_data+0x28>
		NET_DBG("Consumed pkt %p", pkt);
		break;
	case NET_DROP:
	default:
		NET_DBG("Dropping pkt %p", pkt);
		net_pkt_unref(pkt);
   1a2f2:	4620      	mov	r0, r4
   1a2f4:	f002 fc75 	bl	1cbe2 <net_pkt_unref>
		break;
	}
}
   1a2f8:	e7d7      	b.n	1a2aa <processing_data+0x2a>
   1a2fa:	bf00      	nop
   1a2fc:	200029e8 	.word	0x200029e8

0001a300 <net_rx_thread>:

static void net_rx_thread(void)
{
   1a300:	b510      	push	{r4, lr}
	 * can only be started when RX side is ready to receive packets.
	 * We synchronize the startup of the device so that both RX and TX
	 * are only started fully when both are ready to receive or send
	 * data.
	 */
	net_if_init(&startup_sync);
   1a302:	4c16      	ldr	r4, [pc, #88]	; (1a35c <net_rx_thread+0x5c>)
   1a304:	4620      	mov	r0, r4
   1a306:	f001 faaf 	bl	1b868 <net_if_init>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   1a30a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1a30e:	4620      	mov	r0, r4
   1a310:	f00e fa56 	bl	287c0 <_impl_k_sem_take>

	k_sem_take(&startup_sync, K_FOREVER);

	/* This will take the interface up and start everything. */
	net_if_post_init();
   1a314:	f001 faee 	bl	1b8f4 <net_if_post_init>
   1a318:	e010      	b.n	1a33c <net_rx_thread+0x3c>
	return net_buf_frags_len(pkt->frags);
   1a31a:	6883      	ldr	r3, [r0, #8]
	size_t bytes = 0;
   1a31c:	2200      	movs	r2, #0
   1a31e:	e002      	b.n	1a326 <net_rx_thread+0x26>
		bytes += buf->len;
   1a320:	8999      	ldrh	r1, [r3, #12]
   1a322:	440a      	add	r2, r1
		buf = buf->frags;
   1a324:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   1a326:	2b00      	cmp	r3, #0
   1a328:	d1fa      	bne.n	1a320 <net_rx_thread+0x20>
	net_stats.bytes.received += bytes;
   1a32a:	490d      	ldr	r1, [pc, #52]	; (1a360 <net_rx_thread+0x60>)
   1a32c:	688b      	ldr	r3, [r1, #8]
   1a32e:	441a      	add	r2, r3
   1a330:	608a      	str	r2, [r1, #8]
#endif
		NET_DBG("Received pkt %p len %zu", pkt, pkt_len);

		net_stats_update_bytes_recv(pkt_len);

		processing_data(pkt, false);
   1a332:	2100      	movs	r1, #0
   1a334:	f7ff ffa4 	bl	1a280 <processing_data>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
   1a338:	f00e f8d6 	bl	284e8 <_impl_k_yield>
		pkt = k_fifo_get(&rx_queue, K_FOREVER);
   1a33c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1a340:	4808      	ldr	r0, [pc, #32]	; (1a364 <net_rx_thread+0x64>)
   1a342:	f00d febb 	bl	280bc <k_queue_get>
	for (i = 0; i < size; i++) {
   1a346:	2300      	movs	r3, #0
   1a348:	f240 52db 	movw	r2, #1499	; 0x5db
   1a34c:	4293      	cmp	r3, r2
   1a34e:	d8e4      	bhi.n	1a31a <net_rx_thread+0x1a>
		if ((unsigned char)stack[i] == 0xaa) {
   1a350:	4a05      	ldr	r2, [pc, #20]	; (1a368 <net_rx_thread+0x68>)
   1a352:	5cd2      	ldrb	r2, [r2, r3]
   1a354:	2aaa      	cmp	r2, #170	; 0xaa
   1a356:	d1e0      	bne.n	1a31a <net_rx_thread+0x1a>
	for (i = 0; i < size; i++) {
   1a358:	3301      	adds	r3, #1
   1a35a:	e7f5      	b.n	1a348 <net_rx_thread+0x48>
   1a35c:	2000d01c 	.word	0x2000d01c
   1a360:	200029e8 	.word	0x200029e8
   1a364:	20001a6c 	.word	0x20001a6c
   1a368:	200046f0 	.word	0x200046f0

0001a36c <init_rx_queue>:
		k_yield();
	}
}

static void init_rx_queue(void)
{
   1a36c:	b500      	push	{lr}
   1a36e:	b087      	sub	sp, #28
	k_fifo_init(&rx_queue);
   1a370:	480b      	ldr	r0, [pc, #44]	; (1a3a0 <init_rx_queue+0x34>)
   1a372:	f00d fe48 	bl	28006 <k_queue_init>
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay);
   1a376:	2300      	movs	r3, #0
   1a378:	9305      	str	r3, [sp, #20]
   1a37a:	2201      	movs	r2, #1
   1a37c:	9204      	str	r2, [sp, #16]
   1a37e:	f06f 0207 	mvn.w	r2, #7
   1a382:	9203      	str	r2, [sp, #12]
   1a384:	9302      	str	r3, [sp, #8]
   1a386:	9301      	str	r3, [sp, #4]
   1a388:	9300      	str	r3, [sp, #0]
   1a38a:	4b06      	ldr	r3, [pc, #24]	; (1a3a4 <init_rx_queue+0x38>)
   1a38c:	f240 52dc 	movw	r2, #1500	; 0x5dc
   1a390:	4905      	ldr	r1, [pc, #20]	; (1a3a8 <init_rx_queue+0x3c>)
   1a392:	4806      	ldr	r0, [pc, #24]	; (1a3ac <init_rx_queue+0x40>)
   1a394:	f00e fc80 	bl	28c98 <_impl_k_thread_create>
	rx_tid = k_thread_create(&rx_thread_data, rx_stack,
				 K_THREAD_STACK_SIZEOF(rx_stack),
				 (k_thread_entry_t)net_rx_thread,
				 NULL, NULL, NULL, K_PRIO_COOP(8),
				 K_ESSENTIAL, K_NO_WAIT);
}
   1a398:	b007      	add	sp, #28
   1a39a:	f85d fb04 	ldr.w	pc, [sp], #4
   1a39e:	bf00      	nop
   1a3a0:	20001a6c 	.word	0x20001a6c
   1a3a4:	0001a301 	.word	0x0001a301
   1a3a8:	200046f0 	.word	0x200046f0
   1a3ac:	20001a7c 	.word	0x20001a7c

0001a3b0 <net_init>:

	NET_DBG("Network L2 init done");
}

static int net_init(struct device *unused)
{
   1a3b0:	b508      	push	{r3, lr}

	net_hostname_init();

	NET_DBG("Priority %d", CONFIG_NET_INIT_PRIO);

	net_pkt_init();
   1a3b2:	f002 ffb2 	bl	1d31a <net_pkt_init>

	net_context_init();
   1a3b6:	f002 faf1 	bl	1c99c <net_context_init>
	net_icmpv6_init();
   1a3ba:	f004 fa0b 	bl	1e7d4 <net_icmpv6_init>
	net_ipv6_init();
   1a3be:	f006 fe89 	bl	210d4 <net_ipv6_init>
	net_conn_init();
   1a3c2:	f00a fb55 	bl	24a70 <net_conn_init>
	net_udp_init();
   1a3c6:	f008 fa6b 	bl	228a0 <net_udp_init>
	net_tcp_init();
   1a3ca:	f008 fc4f 	bl	22c6c <net_tcp_init>
	net_route_init();
   1a3ce:	f007 ffca 	bl	22366 <net_route_init>

	l2_init();
	l3_init();

	net_mgmt_event_init();
   1a3d2:	f008 f8b3 	bl	2253c <net_mgmt_event_init>

	init_rx_queue();
   1a3d6:	f7ff ffc9 	bl	1a36c <init_rx_queue>
		return status;
	}
#endif

	return status;
}
   1a3da:	2000      	movs	r0, #0
   1a3dc:	bd08      	pop	{r3, pc}
	...

0001a3e0 <net_send_data>:
	if (!pkt || !pkt->frags) {
   1a3e0:	2800      	cmp	r0, #0
   1a3e2:	f000 80bc 	beq.w	1a55e <net_send_data+0x17e>
{
   1a3e6:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a3e8:	b091      	sub	sp, #68	; 0x44
   1a3ea:	4604      	mov	r4, r0
	if (!pkt || !pkt->frags) {
   1a3ec:	6883      	ldr	r3, [r0, #8]
   1a3ee:	2b00      	cmp	r3, #0
   1a3f0:	f000 80b8 	beq.w	1a564 <net_send_data+0x184>
	return pkt->iface;
   1a3f4:	6943      	ldr	r3, [r0, #20]
	if (!net_pkt_iface(pkt)) {
   1a3f6:	2b00      	cmp	r3, #0
   1a3f8:	f000 80b7 	beq.w	1a56a <net_send_data+0x18a>
	return pkt->family;
   1a3fc:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   1a400:	f3c3 03c3 	ubfx	r3, r3, #3, #4
	switch (net_pkt_family(pkt)) {
   1a404:	2b0a      	cmp	r3, #10
   1a406:	d103      	bne.n	1a410 <net_send_data+0x30>
	net_stats.ipv6.sent++;
   1a408:	4a59      	ldr	r2, [pc, #356]	; (1a570 <net_send_data+0x190>)
   1a40a:	6a93      	ldr	r3, [r2, #40]	; 0x28
   1a40c:	3301      	adds	r3, #1
   1a40e:	6293      	str	r3, [r2, #40]	; 0x28
   1a410:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   1a414:	f3c3 03c3 	ubfx	r3, r3, #3, #4
	if (net_pkt_family(pkt) == AF_INET6) {
   1a418:	2b0a      	cmp	r3, #10
   1a41a:	d00b      	beq.n	1a434 <net_send_data+0x54>
	return 0;
   1a41c:	2000      	movs	r0, #0
	if (status < 0) {
   1a41e:	2800      	cmp	r0, #0
   1a420:	db06      	blt.n	1a430 <net_send_data+0x50>
	} else if (status > 0) {
   1a422:	f340 8091 	ble.w	1a548 <net_send_data+0x168>
		processing_data(pkt, true);
   1a426:	2101      	movs	r1, #1
   1a428:	4620      	mov	r0, r4
   1a42a:	f7ff ff29 	bl	1a280 <processing_data>
		return 0;
   1a42e:	2000      	movs	r0, #0
}
   1a430:	b011      	add	sp, #68	; 0x44
   1a432:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return pkt->frags->data;
   1a434:	68a3      	ldr	r3, [r4, #8]
   1a436:	689d      	ldr	r5, [r3, #8]
		if (net_ipv6_addr_cmp(&NET_IPV6_HDR(pkt)->dst,
   1a438:	3518      	adds	r5, #24
   1a43a:	f004 fd93 	bl	1ef64 <net_ipv6_unspecified_address>
 *  @return True if the addresses are the same, false otherwise.
 */
static inline bool net_ipv6_addr_cmp(const struct in6_addr *addr1,
				     const struct in6_addr *addr2)
{
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   1a43e:	2210      	movs	r2, #16
   1a440:	4601      	mov	r1, r0
   1a442:	4628      	mov	r0, r5
   1a444:	f010 fa8a 	bl	2a95c <memcmp>
   1a448:	2800      	cmp	r0, #0
   1a44a:	d07a      	beq.n	1a542 <net_send_data+0x162>
   1a44c:	68a3      	ldr	r3, [r4, #8]
		if (net_is_ipv6_addr_loopback(&NET_IPV6_HDR(pkt)->dst) ||
   1a44e:	6898      	ldr	r0, [r3, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1a450:	f850 3f18 	ldr.w	r3, [r0, #24]!
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1a454:	b9ab      	cbnz	r3, 1a482 <net_send_data+0xa2>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1a456:	6843      	ldr	r3, [r0, #4]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1a458:	2b00      	cmp	r3, #0
   1a45a:	d141      	bne.n	1a4e0 <net_send_data+0x100>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1a45c:	6883      	ldr	r3, [r0, #8]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1a45e:	2b00      	cmp	r3, #0
   1a460:	d140      	bne.n	1a4e4 <net_send_data+0x104>
		ntohl(UNALIGNED_GET(&addr->s6_addr32[3])) == 1;
   1a462:	68c2      	ldr	r2, [r0, #12]
   1a464:	0a13      	lsrs	r3, r2, #8
   1a466:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
   1a46a:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   1a46e:	0211      	lsls	r1, r2, #8
   1a470:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
   1a474:	430b      	orrs	r3, r1
   1a476:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1a47a:	2b01      	cmp	r3, #1
   1a47c:	d034      	beq.n	1a4e8 <net_send_data+0x108>
   1a47e:	2300      	movs	r3, #0
   1a480:	e000      	b.n	1a484 <net_send_data+0xa4>
   1a482:	2300      	movs	r3, #0
   1a484:	b393      	cbz	r3, 1a4ec <net_send_data+0x10c>
   1a486:	68a3      	ldr	r3, [r4, #8]
   1a488:	f8d3 e008 	ldr.w	lr, [r3, #8]
			net_ipaddr_copy(&addr, &NET_IPV6_HDR(pkt)->src);
   1a48c:	ae0c      	add	r6, sp, #48	; 0x30
   1a48e:	4675      	mov	r5, lr
   1a490:	f855 0f08 	ldr.w	r0, [r5, #8]!
   1a494:	6869      	ldr	r1, [r5, #4]
   1a496:	68aa      	ldr	r2, [r5, #8]
   1a498:	68eb      	ldr	r3, [r5, #12]
   1a49a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   1a49c:	ab10      	add	r3, sp, #64	; 0x40
   1a49e:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
   1a4a2:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
			net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   1a4a6:	af08      	add	r7, sp, #32
   1a4a8:	4673      	mov	r3, lr
   1a4aa:	f853 0f18 	ldr.w	r0, [r3, #24]!
   1a4ae:	6859      	ldr	r1, [r3, #4]
   1a4b0:	689a      	ldr	r2, [r3, #8]
   1a4b2:	68db      	ldr	r3, [r3, #12]
   1a4b4:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   1a4b6:	af08      	add	r7, sp, #32
   1a4b8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   1a4ba:	f8ce 0008 	str.w	r0, [lr, #8]
   1a4be:	6069      	str	r1, [r5, #4]
   1a4c0:	60aa      	str	r2, [r5, #8]
   1a4c2:	60eb      	str	r3, [r5, #12]
   1a4c4:	68a3      	ldr	r3, [r4, #8]
   1a4c6:	689f      	ldr	r7, [r3, #8]
			net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst, &addr);
   1a4c8:	ad04      	add	r5, sp, #16
   1a4ca:	e89d 000f 	ldmia.w	sp, {r0, r1, r2, r3}
   1a4ce:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
   1a4d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1a4d4:	61b8      	str	r0, [r7, #24]
   1a4d6:	61f9      	str	r1, [r7, #28]
   1a4d8:	623a      	str	r2, [r7, #32]
   1a4da:	627b      	str	r3, [r7, #36]	; 0x24
			return 1;
   1a4dc:	2001      	movs	r0, #1
   1a4de:	e79e      	b.n	1a41e <net_send_data+0x3e>
   1a4e0:	2300      	movs	r3, #0
   1a4e2:	e7cf      	b.n	1a484 <net_send_data+0xa4>
   1a4e4:	2300      	movs	r3, #0
   1a4e6:	e7cd      	b.n	1a484 <net_send_data+0xa4>
   1a4e8:	2301      	movs	r3, #1
   1a4ea:	e7cb      	b.n	1a484 <net_send_data+0xa4>
	return net_if_ipv6_addr_lookup(addr, NULL) != NULL;
   1a4ec:	2100      	movs	r1, #0
   1a4ee:	f000 f9c5 	bl	1a87c <net_if_ipv6_addr_lookup>
		if (net_is_ipv6_addr_loopback(&NET_IPV6_HDR(pkt)->dst) ||
   1a4f2:	2800      	cmp	r0, #0
   1a4f4:	d1c7      	bne.n	1a486 <net_send_data+0xa6>
   1a4f6:	68a3      	ldr	r3, [r4, #8]
		if (net_is_ipv6_addr_loopback(&NET_IPV6_HDR(pkt)->src)) {
   1a4f8:	689b      	ldr	r3, [r3, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1a4fa:	f853 2f08 	ldr.w	r2, [r3, #8]!
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1a4fe:	b99a      	cbnz	r2, 1a528 <net_send_data+0x148>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1a500:	685a      	ldr	r2, [r3, #4]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1a502:	b9aa      	cbnz	r2, 1a530 <net_send_data+0x150>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1a504:	689a      	ldr	r2, [r3, #8]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1a506:	b9aa      	cbnz	r2, 1a534 <net_send_data+0x154>
		ntohl(UNALIGNED_GET(&addr->s6_addr32[3])) == 1;
   1a508:	68da      	ldr	r2, [r3, #12]
   1a50a:	0a13      	lsrs	r3, r2, #8
   1a50c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
   1a510:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   1a514:	0211      	lsls	r1, r2, #8
   1a516:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
   1a51a:	430b      	orrs	r3, r1
   1a51c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1a520:	2b01      	cmp	r3, #1
   1a522:	d009      	beq.n	1a538 <net_send_data+0x158>
   1a524:	2300      	movs	r3, #0
   1a526:	e000      	b.n	1a52a <net_send_data+0x14a>
   1a528:	2300      	movs	r3, #0
   1a52a:	b93b      	cbnz	r3, 1a53c <net_send_data+0x15c>
	return 0;
   1a52c:	2000      	movs	r0, #0
   1a52e:	e776      	b.n	1a41e <net_send_data+0x3e>
   1a530:	2300      	movs	r3, #0
   1a532:	e7fa      	b.n	1a52a <net_send_data+0x14a>
   1a534:	2300      	movs	r3, #0
   1a536:	e7f8      	b.n	1a52a <net_send_data+0x14a>
   1a538:	2301      	movs	r3, #1
   1a53a:	e7f6      	b.n	1a52a <net_send_data+0x14a>
			return -EADDRNOTAVAIL;
   1a53c:	f06f 007c 	mvn.w	r0, #124	; 0x7c
   1a540:	e76d      	b.n	1a41e <net_send_data+0x3e>
			return -EADDRNOTAVAIL;
   1a542:	f06f 007c 	mvn.w	r0, #124	; 0x7c
   1a546:	e76a      	b.n	1a41e <net_send_data+0x3e>
	if (net_if_send_data(net_pkt_iface(pkt), pkt) == NET_DROP) {
   1a548:	4621      	mov	r1, r4
   1a54a:	6960      	ldr	r0, [r4, #20]
   1a54c:	f000 ffe0 	bl	1b510 <net_if_send_data>
   1a550:	2802      	cmp	r0, #2
   1a552:	d001      	beq.n	1a558 <net_send_data+0x178>
	return 0;
   1a554:	2000      	movs	r0, #0
   1a556:	e76b      	b.n	1a430 <net_send_data+0x50>
		return -EIO;
   1a558:	f06f 0004 	mvn.w	r0, #4
   1a55c:	e768      	b.n	1a430 <net_send_data+0x50>
		return -ENODATA;
   1a55e:	f06f 003c 	mvn.w	r0, #60	; 0x3c
   1a562:	4770      	bx	lr
   1a564:	f06f 003c 	mvn.w	r0, #60	; 0x3c
   1a568:	e762      	b.n	1a430 <net_send_data+0x50>
		return -EINVAL;
   1a56a:	f06f 0015 	mvn.w	r0, #21
   1a56e:	e75f      	b.n	1a430 <net_send_data+0x50>
   1a570:	200029e8 	.word	0x200029e8

0001a574 <net_recv_data>:
{
   1a574:	b508      	push	{r3, lr}
	if (!pkt->frags) {
   1a576:	688b      	ldr	r3, [r1, #8]
   1a578:	b19b      	cbz	r3, 1a5a2 <net_recv_data+0x2e>
   1a57a:	f3bf 8f5b 	dmb	ish
   1a57e:	68c3      	ldr	r3, [r0, #12]
   1a580:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(iface->flags, NET_IF_UP)) {
   1a584:	f013 0f01 	tst.w	r3, #1
   1a588:	d00e      	beq.n	1a5a8 <net_recv_data+0x34>
	pkt->iface = iface;
   1a58a:	6148      	str	r0, [r1, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   1a58c:	7d43      	ldrb	r3, [r0, #21]
   1a58e:	f881 3025 	strb.w	r3, [r1, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   1a592:	7d43      	ldrb	r3, [r0, #21]
   1a594:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
	k_fifo_put(&rx_queue, pkt);
   1a598:	4805      	ldr	r0, [pc, #20]	; (1a5b0 <net_recv_data+0x3c>)
   1a59a:	f00d fd67 	bl	2806c <k_queue_append>
	return 0;
   1a59e:	2000      	movs	r0, #0
   1a5a0:	bd08      	pop	{r3, pc}
		return -ENODATA;
   1a5a2:	f06f 003c 	mvn.w	r0, #60	; 0x3c
   1a5a6:	bd08      	pop	{r3, pc}
		return -ENETDOWN;
   1a5a8:	f06f 0072 	mvn.w	r0, #114	; 0x72
}
   1a5ac:	bd08      	pop	{r3, pc}
   1a5ae:	bf00      	nop
   1a5b0:	20001a6c 	.word	0x20001a6c

0001a5b4 <ipv6_addr_expired>:
						  lifetime);

	NET_DBG("IPv6 address %s is deprecated",
		net_sprint_ipv6_addr(&ifaddr->address.in6_addr));

	ifaddr->addr_state = NET_ADDR_DEPRECATED;
   1a5b4:	2302      	movs	r3, #2
   1a5b6:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
   1a5ba:	4770      	bx	lr

0001a5bc <prefix_lf_timeout>:
		CONTAINER_OF(work, struct net_if_ipv6_prefix, lifetime);

	NET_DBG("Prefix %s/%d expired",
		net_sprint_ipv6_addr(&prefix->prefix), prefix->len);

	prefix->is_used = false;
   1a5bc:	2300      	movs	r3, #0
   1a5be:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
   1a5c2:	4770      	bx	lr

0001a5c4 <ipv6_router_expired>:
						    lifetime);

	NET_DBG("IPv6 router %s is expired",
		net_sprint_ipv6_addr(&router->address.in6_addr));

	router->is_used = false;
   1a5c4:	2300      	movs	r3, #0
   1a5c6:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
   1a5ca:	4770      	bx	lr

0001a5cc <ipv6_addr_find>:
{
   1a5cc:	b570      	push	{r4, r5, r6, lr}
   1a5ce:	4605      	mov	r5, r0
   1a5d0:	460e      	mov	r6, r1
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1a5d2:	2400      	movs	r4, #0
   1a5d4:	e000      	b.n	1a5d8 <ipv6_addr_find+0xc>
   1a5d6:	3401      	adds	r4, #1
   1a5d8:	2c02      	cmp	r4, #2
   1a5da:	dc19      	bgt.n	1a610 <ipv6_addr_find+0x44>
		if (!iface->ipv6.unicast[i].is_used) {
   1a5dc:	236c      	movs	r3, #108	; 0x6c
   1a5de:	fb03 5304 	mla	r3, r3, r4, r5
   1a5e2:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
   1a5e6:	2b00      	cmp	r3, #0
   1a5e8:	d0f5      	beq.n	1a5d6 <ipv6_addr_find+0xa>
				&iface->ipv6.unicast[i].address.in6_addr)) {
   1a5ea:	216c      	movs	r1, #108	; 0x6c
   1a5ec:	fb01 f104 	mul.w	r1, r1, r4
   1a5f0:	3120      	adds	r1, #32
   1a5f2:	4429      	add	r1, r5
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   1a5f4:	2210      	movs	r2, #16
   1a5f6:	4411      	add	r1, r2
   1a5f8:	4630      	mov	r0, r6
   1a5fa:	f010 f9af 	bl	2a95c <memcmp>
		if (net_ipv6_addr_cmp(addr,
   1a5fe:	2800      	cmp	r0, #0
   1a600:	d1e9      	bne.n	1a5d6 <ipv6_addr_find+0xa>
			return &iface->ipv6.unicast[i];
   1a602:	206c      	movs	r0, #108	; 0x6c
   1a604:	fb00 f004 	mul.w	r0, r0, r4
   1a608:	3020      	adds	r0, #32
   1a60a:	4428      	add	r0, r5
   1a60c:	300c      	adds	r0, #12
   1a60e:	bd70      	pop	{r4, r5, r6, pc}
	return NULL;
   1a610:	2000      	movs	r0, #0
}
   1a612:	bd70      	pop	{r4, r5, r6, pc}

0001a614 <ipv6_prefix_find>:
{
   1a614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a616:	4605      	mov	r5, r0
   1a618:	460e      	mov	r6, r1
   1a61a:	4617      	mov	r7, r2
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
   1a61c:	2400      	movs	r4, #0
   1a61e:	e000      	b.n	1a622 <ipv6_prefix_find+0xe>
   1a620:	3401      	adds	r4, #1
   1a622:	2c01      	cmp	r4, #1
   1a624:	dc21      	bgt.n	1a66a <ipv6_prefix_find+0x56>
		if (!iface->ipv6.unicast[i].is_used) {
   1a626:	236c      	movs	r3, #108	; 0x6c
   1a628:	fb03 5304 	mla	r3, r3, r4, r5
   1a62c:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
   1a630:	2b00      	cmp	r3, #0
   1a632:	d0f5      	beq.n	1a620 <ipv6_prefix_find+0xc>
		if (net_ipv6_addr_cmp(prefix, &iface->ipv6.prefix[i].prefix) &&
   1a634:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   1a638:	0099      	lsls	r1, r3, #2
   1a63a:	f501 7100 	add.w	r1, r1, #512	; 0x200
   1a63e:	4429      	add	r1, r5
   1a640:	2210      	movs	r2, #16
   1a642:	4411      	add	r1, r2
   1a644:	4630      	mov	r0, r6
   1a646:	f010 f989 	bl	2a95c <memcmp>
   1a64a:	2800      	cmp	r0, #0
   1a64c:	d1e8      	bne.n	1a620 <ipv6_prefix_find+0xc>
		    prefix_len == iface->ipv6.prefix[i].len) {
   1a64e:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   1a652:	0093      	lsls	r3, r2, #2
   1a654:	461a      	mov	r2, r3
   1a656:	442b      	add	r3, r5
   1a658:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
		if (net_ipv6_addr_cmp(prefix, &iface->ipv6.prefix[i].prefix) &&
   1a65c:	42bb      	cmp	r3, r7
   1a65e:	d1df      	bne.n	1a620 <ipv6_prefix_find+0xc>
			return &iface->ipv6.prefix[i];
   1a660:	f502 70ec 	add.w	r0, r2, #472	; 0x1d8
   1a664:	4428      	add	r0, r5
   1a666:	3010      	adds	r0, #16
   1a668:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return NULL;
   1a66a:	2000      	movs	r0, #0
}
   1a66c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0001a670 <net_if_ipv6_start_dad>:
	ifaddr->addr_state = NET_ADDR_TENTATIVE;
   1a670:	2300      	movs	r3, #0
   1a672:	f881 3065 	strb.w	r3, [r1, #101]	; 0x65
   1a676:	f3bf 8f5b 	dmb	ish
   1a67a:	68c3      	ldr	r3, [r0, #12]
   1a67c:	f3bf 8f5b 	dmb	ish
	if (net_if_is_up(iface)) {
   1a680:	f013 0f01 	tst.w	r3, #1
   1a684:	d100      	bne.n	1a688 <net_if_ipv6_start_dad+0x18>
   1a686:	4770      	bx	lr
{
   1a688:	b510      	push	{r4, lr}
   1a68a:	460c      	mov	r4, r1
		ifaddr->dad_count = 1;
   1a68c:	2301      	movs	r3, #1
   1a68e:	f881 3066 	strb.w	r3, [r1, #102]	; 0x66
		if (!net_ipv6_start_dad(iface, ifaddr)) {
   1a692:	f006 f969 	bl	20968 <net_ipv6_start_dad>
   1a696:	b100      	cbz	r0, 1a69a <net_if_ipv6_start_dad+0x2a>
   1a698:	bd10      	pop	{r4, pc}
   1a69a:	2264      	movs	r2, #100	; 0x64
   1a69c:	f104 013c 	add.w	r1, r4, #60	; 0x3c
   1a6a0:	4801      	ldr	r0, [pc, #4]	; (1a6a8 <net_if_ipv6_start_dad+0x38>)
   1a6a2:	f00e fec3 	bl	2942c <k_delayed_work_submit_to_queue>
}
   1a6a6:	e7f7      	b.n	1a698 <net_if_ipv6_start_dad+0x28>
   1a6a8:	20002b08 	.word	0x20002b08

0001a6ac <net_if_ipv6_prefix_init>:
{
   1a6ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a6ae:	b085      	sub	sp, #20
   1a6b0:	4605      	mov	r5, r0
   1a6b2:	460e      	mov	r6, r1
   1a6b4:	461f      	mov	r7, r3
	prefix->is_used = true;
   1a6b6:	2301      	movs	r3, #1
   1a6b8:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
	prefix->len = len;
   1a6bc:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
	net_ipaddr_copy(&prefix->prefix, addr);
   1a6c0:	466c      	mov	r4, sp
   1a6c2:	6808      	ldr	r0, [r1, #0]
   1a6c4:	6849      	ldr	r1, [r1, #4]
   1a6c6:	68b2      	ldr	r2, [r6, #8]
   1a6c8:	68f3      	ldr	r3, [r6, #12]
   1a6ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1a6cc:	466c      	mov	r4, sp
   1a6ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   1a6d0:	62a8      	str	r0, [r5, #40]	; 0x28
   1a6d2:	62e9      	str	r1, [r5, #44]	; 0x2c
   1a6d4:	632a      	str	r2, [r5, #48]	; 0x30
   1a6d6:	636b      	str	r3, [r5, #52]	; 0x34
	k_delayed_work_init(&prefix->lifetime, prefix_lf_timeout);
   1a6d8:	4907      	ldr	r1, [pc, #28]	; (1a6f8 <net_if_ipv6_prefix_init+0x4c>)
   1a6da:	4628      	mov	r0, r5
   1a6dc:	f00e fe2e 	bl	2933c <k_delayed_work_init>
	if (lifetime == NET_IPV6_ND_INFINITE_LIFETIME) {
   1a6e0:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
   1a6e4:	d004      	beq.n	1a6f0 <net_if_ipv6_prefix_init+0x44>
		prefix->is_infinite = false;
   1a6e6:	2300      	movs	r3, #0
   1a6e8:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
}
   1a6ec:	b005      	add	sp, #20
   1a6ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
		prefix->is_infinite = true;
   1a6f0:	2301      	movs	r3, #1
   1a6f2:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
   1a6f6:	e7f9      	b.n	1a6ec <net_if_ipv6_prefix_init+0x40>
   1a6f8:	0001a5bd 	.word	0x0001a5bd

0001a6fc <join_mcast_allnodes>:
{
   1a6fc:	b500      	push	{lr}
   1a6fe:	b085      	sub	sp, #20
					u16_t addr0, u16_t addr1,
					u16_t addr2, u16_t addr3,
					u16_t addr4, u16_t addr5,
					u16_t addr6, u16_t addr7)
{
	UNALIGNED_PUT(htons(addr0), &addr->s6_addr16[0]);
   1a700:	f240 23ff 	movw	r3, #767	; 0x2ff
   1a704:	f8ad 3000 	strh.w	r3, [sp]
	UNALIGNED_PUT(htons(addr1), &addr->s6_addr16[1]);
   1a708:	2300      	movs	r3, #0
   1a70a:	f8ad 3002 	strh.w	r3, [sp, #2]
	UNALIGNED_PUT(htons(addr2), &addr->s6_addr16[2]);
   1a70e:	f8ad 3004 	strh.w	r3, [sp, #4]
	UNALIGNED_PUT(htons(addr3), &addr->s6_addr16[3]);
   1a712:	f8ad 3006 	strh.w	r3, [sp, #6]
	UNALIGNED_PUT(htons(addr4), &addr->s6_addr16[4]);
   1a716:	f8ad 3008 	strh.w	r3, [sp, #8]
	UNALIGNED_PUT(htons(addr5), &addr->s6_addr16[5]);
   1a71a:	f8ad 300a 	strh.w	r3, [sp, #10]
	UNALIGNED_PUT(htons(addr6), &addr->s6_addr16[6]);
   1a71e:	f8ad 300c 	strh.w	r3, [sp, #12]
	UNALIGNED_PUT(htons(addr7), &addr->s6_addr16[7]);
   1a722:	f44f 7380 	mov.w	r3, #256	; 0x100
   1a726:	f8ad 300e 	strh.w	r3, [sp, #14]
	ret = net_ipv6_mld_join(iface, &addr);
   1a72a:	4669      	mov	r1, sp
   1a72c:	f006 faa4 	bl	20c78 <net_ipv6_mld_join>
}
   1a730:	b005      	add	sp, #20
   1a732:	f85d fb04 	ldr.w	pc, [sp], #4

0001a736 <join_mcast_solicit_node>:
{
   1a736:	b500      	push	{lr}
   1a738:	b085      	sub	sp, #20
	dst->s6_addr[0]   = 0xFF;
   1a73a:	22ff      	movs	r2, #255	; 0xff
   1a73c:	f88d 2000 	strb.w	r2, [sp]
	dst->s6_addr[1]   = 0x02;
   1a740:	2302      	movs	r3, #2
   1a742:	f88d 3001 	strb.w	r3, [sp, #1]
	UNALIGNED_PUT(0, &dst->s6_addr16[1]);
   1a746:	2300      	movs	r3, #0
   1a748:	f8ad 3002 	strh.w	r3, [sp, #2]
	UNALIGNED_PUT(0, &dst->s6_addr16[2]);
   1a74c:	f8ad 3004 	strh.w	r3, [sp, #4]
	UNALIGNED_PUT(0, &dst->s6_addr16[3]);
   1a750:	f8ad 3006 	strh.w	r3, [sp, #6]
	UNALIGNED_PUT(0, &dst->s6_addr16[4]);
   1a754:	f8ad 3008 	strh.w	r3, [sp, #8]
	dst->s6_addr[10]  = 0;
   1a758:	f88d 300a 	strb.w	r3, [sp, #10]
	dst->s6_addr[11]  = 0x01;
   1a75c:	2301      	movs	r3, #1
   1a75e:	f88d 300b 	strb.w	r3, [sp, #11]
	dst->s6_addr[12]  = 0xFF;
   1a762:	f88d 200c 	strb.w	r2, [sp, #12]
	dst->s6_addr[13]  = src->s6_addr[13];
   1a766:	7b4b      	ldrb	r3, [r1, #13]
   1a768:	f88d 300d 	strb.w	r3, [sp, #13]
	UNALIGNED_PUT(UNALIGNED_GET(&src->s6_addr16[7]), &dst->s6_addr16[7]);
   1a76c:	89cb      	ldrh	r3, [r1, #14]
   1a76e:	f8ad 300e 	strh.w	r3, [sp, #14]
	ret = net_ipv6_mld_join(iface, &addr);
   1a772:	4669      	mov	r1, sp
   1a774:	f006 fa80 	bl	20c78 <net_ipv6_mld_join>
}
   1a778:	b005      	add	sp, #20
   1a77a:	f85d fb04 	ldr.w	pc, [sp], #4

0001a77e <leave_mcast_all>:
{
   1a77e:	b538      	push	{r3, r4, r5, lr}
   1a780:	4605      	mov	r5, r0
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   1a782:	2400      	movs	r4, #0
   1a784:	e000      	b.n	1a788 <leave_mcast_all+0xa>
   1a786:	3401      	adds	r4, #1
   1a788:	2c04      	cmp	r4, #4
   1a78a:	dc1a      	bgt.n	1a7c2 <leave_mcast_all+0x44>
		if (!iface->ipv6.mcast[i].is_used ||
   1a78c:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1a790:	00d3      	lsls	r3, r2, #3
   1a792:	442b      	add	r3, r5
   1a794:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
   1a798:	f013 0f01 	tst.w	r3, #1
   1a79c:	d0f3      	beq.n	1a786 <leave_mcast_all+0x8>
		    !iface->ipv6.mcast[i].is_joined) {
   1a79e:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1a7a2:	00d3      	lsls	r3, r2, #3
   1a7a4:	461a      	mov	r2, r3
   1a7a6:	442b      	add	r3, r5
   1a7a8:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
		if (!iface->ipv6.mcast[i].is_used ||
   1a7ac:	f013 0f02 	tst.w	r3, #2
   1a7b0:	d0e9      	beq.n	1a786 <leave_mcast_all+0x8>
				   &iface->ipv6.mcast[i].address.in6_addr);
   1a7b2:	f502 71b0 	add.w	r1, r2, #352	; 0x160
   1a7b6:	4429      	add	r1, r5
		net_ipv6_mld_leave(iface,
   1a7b8:	3118      	adds	r1, #24
   1a7ba:	4628      	mov	r0, r5
   1a7bc:	f006 fa96 	bl	20cec <net_ipv6_mld_leave>
   1a7c0:	e7e1      	b.n	1a786 <leave_mcast_all+0x8>
}
   1a7c2:	bd38      	pop	{r3, r4, r5, pc}

0001a7c4 <net_if_prepare_events>:
{
   1a7c4:	b570      	push	{r4, r5, r6, lr}
	int ev_count = 0;
   1a7c6:	2400      	movs	r4, #0
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1a7c8:	4d0a      	ldr	r5, [pc, #40]	; (1a7f4 <net_if_prepare_events+0x30>)
   1a7ca:	e00d      	b.n	1a7e8 <net_if_prepare_events+0x24>
		k_poll_event_init(&__net_if_event_start[ev_count],
   1a7cc:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1a7d0:	0098      	lsls	r0, r3, #2
   1a7d2:	f105 0318 	add.w	r3, r5, #24
   1a7d6:	2200      	movs	r2, #0
   1a7d8:	2104      	movs	r1, #4
   1a7da:	4e07      	ldr	r6, [pc, #28]	; (1a7f8 <net_if_prepare_events+0x34>)
   1a7dc:	4430      	add	r0, r6
   1a7de:	f00d f927 	bl	27a30 <k_poll_event_init>
		ev_count++;
   1a7e2:	3401      	adds	r4, #1
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1a7e4:	f505 7528 	add.w	r5, r5, #672	; 0x2a0
   1a7e8:	4b04      	ldr	r3, [pc, #16]	; (1a7fc <net_if_prepare_events+0x38>)
   1a7ea:	429d      	cmp	r5, r3
   1a7ec:	d1ee      	bne.n	1a7cc <net_if_prepare_events+0x8>
}
   1a7ee:	4620      	mov	r0, r4
   1a7f0:	bd70      	pop	{r4, r5, r6, pc}
   1a7f2:	bf00      	nop
   1a7f4:	2000d160 	.word	0x2000d160
   1a7f8:	2000d400 	.word	0x2000d400
   1a7fc:	2000d400 	.word	0x2000d400

0001a800 <net_if_lookup_by_dev>:
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1a800:	4b06      	ldr	r3, [pc, #24]	; (1a81c <net_if_lookup_by_dev+0x1c>)
   1a802:	4a07      	ldr	r2, [pc, #28]	; (1a820 <net_if_lookup_by_dev+0x20>)
   1a804:	4293      	cmp	r3, r2
   1a806:	d005      	beq.n	1a814 <net_if_lookup_by_dev+0x14>
		if (iface->dev == dev) {
   1a808:	681a      	ldr	r2, [r3, #0]
   1a80a:	4282      	cmp	r2, r0
   1a80c:	d003      	beq.n	1a816 <net_if_lookup_by_dev+0x16>
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1a80e:	f503 7328 	add.w	r3, r3, #672	; 0x2a0
   1a812:	e7f6      	b.n	1a802 <net_if_lookup_by_dev+0x2>
	return NULL;
   1a814:	2300      	movs	r3, #0
}
   1a816:	4618      	mov	r0, r3
   1a818:	4770      	bx	lr
   1a81a:	bf00      	nop
   1a81c:	2000d160 	.word	0x2000d160
   1a820:	2000d400 	.word	0x2000d400

0001a824 <net_if_get_default>:
	if (__net_if_start == __net_if_end) {
   1a824:	4b03      	ldr	r3, [pc, #12]	; (1a834 <net_if_get_default+0x10>)
   1a826:	4a04      	ldr	r2, [pc, #16]	; (1a838 <net_if_get_default+0x14>)
   1a828:	429a      	cmp	r2, r3
   1a82a:	d001      	beq.n	1a830 <net_if_get_default+0xc>
	return __net_if_start;
   1a82c:	4802      	ldr	r0, [pc, #8]	; (1a838 <net_if_get_default+0x14>)
}
   1a82e:	4770      	bx	lr
		return NULL;
   1a830:	2000      	movs	r0, #0
   1a832:	4770      	bx	lr
   1a834:	2000d400 	.word	0x2000d400
   1a838:	2000d160 	.word	0x2000d160

0001a83c <net_if_start_rs>:
{
   1a83c:	b510      	push	{r4, lr}
   1a83e:	4604      	mov	r4, r0
	if (!net_ipv6_start_rs(iface)) {
   1a840:	f006 fa16 	bl	20c70 <net_ipv6_start_rs>
   1a844:	b100      	cbz	r0, 1a848 <net_if_start_rs+0xc>
   1a846:	bd10      	pop	{r4, pc}
   1a848:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1a84c:	f504 7118 	add.w	r1, r4, #608	; 0x260
   1a850:	4801      	ldr	r0, [pc, #4]	; (1a858 <net_if_start_rs+0x1c>)
   1a852:	f00e fdeb 	bl	2942c <k_delayed_work_submit_to_queue>
}
   1a856:	e7f6      	b.n	1a846 <net_if_start_rs+0xa>
   1a858:	20002b08 	.word	0x20002b08

0001a85c <rs_timeout>:
{
   1a85c:	b508      	push	{r3, lr}
	struct net_if *iface = CONTAINER_OF(work, struct net_if, ipv6.rs_timer);
   1a85e:	f5a0 7018 	sub.w	r0, r0, #608	; 0x260
	iface->ipv6.rs_count++;
   1a862:	f890 3296 	ldrb.w	r3, [r0, #662]	; 0x296
   1a866:	3301      	adds	r3, #1
   1a868:	b2db      	uxtb	r3, r3
   1a86a:	f880 3296 	strb.w	r3, [r0, #662]	; 0x296
	if (iface->ipv6.rs_count < RS_COUNT) {
   1a86e:	2b02      	cmp	r3, #2
   1a870:	d900      	bls.n	1a874 <rs_timeout+0x18>
   1a872:	bd08      	pop	{r3, pc}
		net_if_start_rs(iface);
   1a874:	f7ff ffe2 	bl	1a83c <net_if_start_rs>
}
   1a878:	e7fb      	b.n	1a872 <rs_timeout+0x16>
	...

0001a87c <net_if_ipv6_addr_lookup>:
{
   1a87c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a880:	4607      	mov	r7, r0
   1a882:	4688      	mov	r8, r1
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1a884:	4d1b      	ldr	r5, [pc, #108]	; (1a8f4 <net_if_ipv6_addr_lookup+0x78>)
   1a886:	e02d      	b.n	1a8e4 <net_if_ipv6_addr_lookup+0x68>
			if (net_is_ipv6_prefix(addr->s6_addr,
   1a888:	b9ee      	cbnz	r6, 1a8c6 <net_if_ipv6_addr_lookup+0x4a>
		for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1a88a:	3401      	adds	r4, #1
   1a88c:	2c02      	cmp	r4, #2
   1a88e:	dc27      	bgt.n	1a8e0 <net_if_ipv6_addr_lookup+0x64>
			if (!iface->ipv6.unicast[i].is_used ||
   1a890:	236c      	movs	r3, #108	; 0x6c
   1a892:	fb03 5304 	mla	r3, r3, r4, r5
   1a896:	f893 6094 	ldrb.w	r6, [r3, #148]	; 0x94
   1a89a:	2e00      	cmp	r6, #0
   1a89c:	d0f5      	beq.n	1a88a <net_if_ipv6_addr_lookup+0xe>
			    iface->ipv6.unicast[i].address.family != AF_INET6) {
   1a89e:	236c      	movs	r3, #108	; 0x6c
   1a8a0:	fb03 5304 	mla	r3, r3, r4, r5
   1a8a4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
			if (!iface->ipv6.unicast[i].is_used ||
   1a8a6:	2b0a      	cmp	r3, #10
   1a8a8:	d1ef      	bne.n	1a88a <net_if_ipv6_addr_lookup+0xe>
				iface->ipv6.unicast[i].address.in6_addr.s6_addr,
   1a8aa:	216c      	movs	r1, #108	; 0x6c
   1a8ac:	fb01 f104 	mul.w	r1, r1, r4
   1a8b0:	3120      	adds	r1, #32
   1a8b2:	4429      	add	r1, r5
	if (memcmp(addr1, addr2, bytes)) {
   1a8b4:	2210      	movs	r2, #16
   1a8b6:	4411      	add	r1, r2
   1a8b8:	4638      	mov	r0, r7
   1a8ba:	f010 f84f 	bl	2a95c <memcmp>
   1a8be:	2800      	cmp	r0, #0
   1a8c0:	d0e2      	beq.n	1a888 <net_if_ipv6_addr_lookup+0xc>
		return false;
   1a8c2:	2600      	movs	r6, #0
   1a8c4:	e7e0      	b.n	1a888 <net_if_ipv6_addr_lookup+0xc>
				if (ret) {
   1a8c6:	f1b8 0f00 	cmp.w	r8, #0
   1a8ca:	d001      	beq.n	1a8d0 <net_if_ipv6_addr_lookup+0x54>
					*ret = iface;
   1a8cc:	f8c8 5000 	str.w	r5, [r8]
				return &iface->ipv6.unicast[i];
   1a8d0:	206c      	movs	r0, #108	; 0x6c
   1a8d2:	fb00 f004 	mul.w	r0, r0, r4
   1a8d6:	3020      	adds	r0, #32
   1a8d8:	4428      	add	r0, r5
   1a8da:	300c      	adds	r0, #12
   1a8dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1a8e0:	f505 7528 	add.w	r5, r5, #672	; 0x2a0
   1a8e4:	4b04      	ldr	r3, [pc, #16]	; (1a8f8 <net_if_ipv6_addr_lookup+0x7c>)
   1a8e6:	429d      	cmp	r5, r3
   1a8e8:	d001      	beq.n	1a8ee <net_if_ipv6_addr_lookup+0x72>
   1a8ea:	2400      	movs	r4, #0
   1a8ec:	e7ce      	b.n	1a88c <net_if_ipv6_addr_lookup+0x10>
	return NULL;
   1a8ee:	2000      	movs	r0, #0
}
   1a8f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a8f4:	2000d160 	.word	0x2000d160
   1a8f8:	2000d400 	.word	0x2000d400

0001a8fc <dad_timeout>:
{
   1a8fc:	b530      	push	{r4, r5, lr}
   1a8fe:	b083      	sub	sp, #12
	struct net_if_addr *tmp, *ifaddr = CONTAINER_OF(work,
   1a900:	f1a0 053c 	sub.w	r5, r0, #60	; 0x3c
	struct net_if *iface = NULL;
   1a904:	a902      	add	r1, sp, #8
   1a906:	2300      	movs	r3, #0
   1a908:	f841 3d04 	str.w	r3, [r1, #-4]!
	ifaddr->addr_state = NET_ADDR_PREFERRED;
   1a90c:	2301      	movs	r3, #1
   1a90e:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
	tmp = net_if_ipv6_addr_lookup(&ifaddr->address.in6_addr, &iface);
   1a912:	f1a0 0438 	sub.w	r4, r0, #56	; 0x38
   1a916:	4620      	mov	r0, r4
   1a918:	f7ff ffb0 	bl	1a87c <net_if_ipv6_addr_lookup>
	if (tmp == ifaddr) {
   1a91c:	4285      	cmp	r5, r0
   1a91e:	d001      	beq.n	1a924 <dad_timeout+0x28>
}
   1a920:	b003      	add	sp, #12
   1a922:	bd30      	pop	{r4, r5, pc}
void net_mgmt_event_notify_with_info(u32_t mgmt_event, struct net_if *iface,
				     void *info, size_t length);

static inline void net_mgmt_event_notify(u32_t mgmt_event, struct net_if *iface)
{
	net_mgmt_event_notify_with_info(mgmt_event, iface, NULL, 0);
   1a924:	2300      	movs	r3, #0
   1a926:	461a      	mov	r2, r3
   1a928:	9901      	ldr	r1, [sp, #4]
   1a92a:	4807      	ldr	r0, [pc, #28]	; (1a948 <dad_timeout+0x4c>)
   1a92c:	f007 fdcc 	bl	224c8 <net_mgmt_event_notify_with_info>
		net_ipv6_nbr_rm(iface, &ifaddr->address.in6_addr);
   1a930:	4621      	mov	r1, r4
   1a932:	9801      	ldr	r0, [sp, #4]
   1a934:	f004 faf6 	bl	1ef24 <net_ipv6_nbr_rm>
		join_mcast_allnodes(iface);
   1a938:	9801      	ldr	r0, [sp, #4]
   1a93a:	f7ff fedf 	bl	1a6fc <join_mcast_allnodes>
		join_mcast_solicit_node(iface, &ifaddr->address.in6_addr);
   1a93e:	4621      	mov	r1, r4
   1a940:	9801      	ldr	r0, [sp, #4]
   1a942:	f7ff fef8 	bl	1a736 <join_mcast_solicit_node>
}
   1a946:	e7eb      	b.n	1a920 <dad_timeout+0x24>
   1a948:	f060000d 	.word	0xf060000d

0001a94c <net_if_ipv6_addr_update_lifetime>:
{
   1a94c:	b508      	push	{r3, lr}
   1a94e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1a952:	fb02 f201 	mul.w	r2, r2, r1
   1a956:	f100 0114 	add.w	r1, r0, #20
   1a95a:	4802      	ldr	r0, [pc, #8]	; (1a964 <net_if_ipv6_addr_update_lifetime+0x18>)
   1a95c:	f00e fd66 	bl	2942c <k_delayed_work_submit_to_queue>
   1a960:	bd08      	pop	{r3, pc}
   1a962:	bf00      	nop
   1a964:	20002b08 	.word	0x20002b08

0001a968 <net_if_ipv6_addr_add>:
{
   1a968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a96c:	b084      	sub	sp, #16
   1a96e:	4605      	mov	r5, r0
   1a970:	460e      	mov	r6, r1
   1a972:	4690      	mov	r8, r2
   1a974:	461f      	mov	r7, r3
	ifaddr = ipv6_addr_find(iface, addr);
   1a976:	f7ff fe29 	bl	1a5cc <ipv6_addr_find>
	if (ifaddr) {
   1a97a:	4604      	mov	r4, r0
   1a97c:	b118      	cbz	r0, 1a986 <net_if_ipv6_addr_add+0x1e>
}
   1a97e:	4620      	mov	r0, r4
   1a980:	b004      	add	sp, #16
   1a982:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a986:	2300      	movs	r3, #0
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1a988:	2b02      	cmp	r3, #2
   1a98a:	dcf8      	bgt.n	1a97e <net_if_ipv6_addr_add+0x16>
		if (iface->ipv6.unicast[i].is_used) {
   1a98c:	226c      	movs	r2, #108	; 0x6c
   1a98e:	fb02 5203 	mla	r2, r2, r3, r5
   1a992:	f892 2094 	ldrb.w	r2, [r2, #148]	; 0x94
   1a996:	b10a      	cbz	r2, 1a99c <net_if_ipv6_addr_add+0x34>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1a998:	3301      	adds	r3, #1
   1a99a:	e7f5      	b.n	1a988 <net_if_ipv6_addr_add+0x20>
		net_if_addr_init(&iface->ipv6.unicast[i], addr, addr_type,
   1a99c:	f04f 0e6c 	mov.w	lr, #108	; 0x6c
   1a9a0:	fb0e fe03 	mul.w	lr, lr, r3
   1a9a4:	f10e 0e20 	add.w	lr, lr, #32
   1a9a8:	44ae      	add	lr, r5
   1a9aa:	f10e 040c 	add.w	r4, lr, #12
	ifaddr->is_used = true;
   1a9ae:	2301      	movs	r3, #1
   1a9b0:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
	ifaddr->address.family = AF_INET6;
   1a9b4:	230a      	movs	r3, #10
   1a9b6:	f8ae 300c 	strh.w	r3, [lr, #12]
	ifaddr->addr_type = addr_type;
   1a9ba:	f884 8064 	strb.w	r8, [r4, #100]	; 0x64
	net_ipaddr_copy(&ifaddr->address.in6_addr, addr);
   1a9be:	46ec      	mov	ip, sp
   1a9c0:	6830      	ldr	r0, [r6, #0]
   1a9c2:	6871      	ldr	r1, [r6, #4]
   1a9c4:	68b2      	ldr	r2, [r6, #8]
   1a9c6:	68f3      	ldr	r3, [r6, #12]
   1a9c8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   1a9cc:	466e      	mov	r6, sp
   1a9ce:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1a9d0:	f8ce 0010 	str.w	r0, [lr, #16]
   1a9d4:	f8ce 1014 	str.w	r1, [lr, #20]
   1a9d8:	f8ce 2018 	str.w	r2, [lr, #24]
   1a9dc:	f8ce 301c 	str.w	r3, [lr, #28]
	k_delayed_work_init(&ifaddr->dad_timer, dad_timeout);
   1a9e0:	4910      	ldr	r1, [pc, #64]	; (1aa24 <net_if_ipv6_addr_add+0xbc>)
   1a9e2:	f10e 0048 	add.w	r0, lr, #72	; 0x48
   1a9e6:	f00e fca9 	bl	2933c <k_delayed_work_init>
	if (vlifetime) {
   1a9ea:	b96f      	cbnz	r7, 1aa08 <net_if_ipv6_addr_add+0xa0>
		ifaddr->is_infinite = true;
   1a9ec:	2301      	movs	r3, #1
   1a9ee:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
		net_if_ipv6_start_dad(iface, &iface->ipv6.unicast[i]);
   1a9f2:	4621      	mov	r1, r4
   1a9f4:	4628      	mov	r0, r5
   1a9f6:	f7ff fe3b 	bl	1a670 <net_if_ipv6_start_dad>
   1a9fa:	2300      	movs	r3, #0
   1a9fc:	461a      	mov	r2, r3
   1a9fe:	4629      	mov	r1, r5
   1aa00:	4809      	ldr	r0, [pc, #36]	; (1aa28 <net_if_ipv6_addr_add+0xc0>)
   1aa02:	f007 fd61 	bl	224c8 <net_mgmt_event_notify_with_info>
		return &iface->ipv6.unicast[i];
   1aa06:	e7ba      	b.n	1a97e <net_if_ipv6_addr_add+0x16>
		ifaddr->is_infinite = false;
   1aa08:	2300      	movs	r3, #0
   1aa0a:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
		k_delayed_work_init(&ifaddr->lifetime, ipv6_addr_expired);
   1aa0e:	4907      	ldr	r1, [pc, #28]	; (1aa2c <net_if_ipv6_addr_add+0xc4>)
   1aa10:	f104 0014 	add.w	r0, r4, #20
   1aa14:	f00e fc92 	bl	2933c <k_delayed_work_init>
		net_if_ipv6_addr_update_lifetime(ifaddr, vlifetime);
   1aa18:	4639      	mov	r1, r7
   1aa1a:	4620      	mov	r0, r4
   1aa1c:	f7ff ff96 	bl	1a94c <net_if_ipv6_addr_update_lifetime>
   1aa20:	e7e7      	b.n	1a9f2 <net_if_ipv6_addr_add+0x8a>
   1aa22:	bf00      	nop
   1aa24:	0001a8fd 	.word	0x0001a8fd
   1aa28:	f0600001 	.word	0xf0600001
   1aa2c:	0001a5b5 	.word	0x0001a5b5

0001aa30 <net_if_start_dad>:
{
   1aa30:	b570      	push	{r4, r5, r6, lr}
   1aa32:	b084      	sub	sp, #16
   1aa34:	4605      	mov	r5, r0
	struct in6_addr addr = { };
   1aa36:	2300      	movs	r3, #0
   1aa38:	9302      	str	r3, [sp, #8]
   1aa3a:	9303      	str	r3, [sp, #12]
	net_ipv6_addr_create_iid(&addr, &iface->link_addr);
   1aa3c:	f100 0410 	add.w	r4, r0, #16
 *  @param lladdr Link local address
 */
static inline void net_ipv6_addr_create_iid(struct in6_addr *addr,
					    struct net_linkaddr *lladdr)
{
	addr->s6_addr[0] = 0xfe;
   1aa40:	22fe      	movs	r2, #254	; 0xfe
   1aa42:	f88d 2000 	strb.w	r2, [sp]
	addr->s6_addr[1] = 0x80;
   1aa46:	2280      	movs	r2, #128	; 0x80
   1aa48:	f88d 2001 	strb.w	r2, [sp, #1]
	UNALIGNED_PUT(0, &addr->s6_addr16[1]);
   1aa4c:	f8ad 3002 	strh.w	r3, [sp, #2]
	UNALIGNED_PUT(0, &addr->s6_addr32[1]);
   1aa50:	9301      	str	r3, [sp, #4]

	switch (lladdr->len) {
   1aa52:	7922      	ldrb	r2, [r4, #4]
   1aa54:	2a06      	cmp	r2, #6
   1aa56:	d020      	beq.n	1aa9a <net_if_start_dad+0x6a>
   1aa58:	2a08      	cmp	r2, #8
   1aa5a:	d044      	beq.n	1aae6 <net_if_start_dad+0xb6>
   1aa5c:	2a02      	cmp	r2, #2
   1aa5e:	d008      	beq.n	1aa72 <net_if_start_dad+0x42>
	ifaddr = net_if_ipv6_addr_add(iface, &addr, NET_ADDR_AUTOCONF, 0);
   1aa60:	2300      	movs	r3, #0
   1aa62:	2201      	movs	r2, #1
   1aa64:	4669      	mov	r1, sp
   1aa66:	4628      	mov	r0, r5
   1aa68:	f7ff ff7e 	bl	1a968 <net_if_ipv6_addr_add>
   1aa6c:	4606      	mov	r6, r0
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1aa6e:	2400      	movs	r4, #0
   1aa70:	e045      	b.n	1aafe <net_if_start_dad+0xce>
	case 2:
		/* The generated IPv6 shall not toggle the
		 * Universal/Local bit. RFC 6282 ch 3.2.2
		 */
		if (lladdr->type == NET_LINK_IEEE802154) {
   1aa72:	7963      	ldrb	r3, [r4, #5]
   1aa74:	2b01      	cmp	r3, #1
   1aa76:	d1f3      	bne.n	1aa60 <net_if_start_dad+0x30>
			UNALIGNED_PUT(0, &addr->s6_addr32[2]);
   1aa78:	2300      	movs	r3, #0
			addr->s6_addr[11] = 0xff;
   1aa7a:	22ff      	movs	r2, #255	; 0xff
   1aa7c:	f88d 200b 	strb.w	r2, [sp, #11]
			addr->s6_addr[12] = 0xfe;
   1aa80:	22fe      	movs	r2, #254	; 0xfe
   1aa82:	f88d 200c 	strb.w	r2, [sp, #12]
			addr->s6_addr[13] = 0;
   1aa86:	f88d 300d 	strb.w	r3, [sp, #13]
			addr->s6_addr[14] = lladdr->addr[0];
   1aa8a:	6903      	ldr	r3, [r0, #16]
   1aa8c:	781a      	ldrb	r2, [r3, #0]
   1aa8e:	f88d 200e 	strb.w	r2, [sp, #14]
			addr->s6_addr[15] = lladdr->addr[1];
   1aa92:	785b      	ldrb	r3, [r3, #1]
   1aa94:	f88d 300f 	strb.w	r3, [sp, #15]
   1aa98:	e7e2      	b.n	1aa60 <net_if_start_dad+0x30>
		break;
	case 6:
		/* We do not toggle the Universal/Local bit
		 * in Bluetooth. See RFC 7668 ch 3.2.2
		 */
		memcpy(&addr->s6_addr[8], lladdr->addr, 3);
   1aa9a:	2203      	movs	r2, #3
   1aa9c:	6901      	ldr	r1, [r0, #16]
   1aa9e:	a802      	add	r0, sp, #8
   1aaa0:	f7e5 fc0e 	bl	2c0 <memcpy>
		addr->s6_addr[11] = 0xff;
   1aaa4:	23ff      	movs	r3, #255	; 0xff
   1aaa6:	f88d 300b 	strb.w	r3, [sp, #11]
		addr->s6_addr[12] = 0xfe;
   1aaaa:	23fe      	movs	r3, #254	; 0xfe
   1aaac:	f88d 300c 	strb.w	r3, [sp, #12]
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   1aab0:	6929      	ldr	r1, [r5, #16]
   1aab2:	2203      	movs	r2, #3
   1aab4:	4411      	add	r1, r2
   1aab6:	f10d 000d 	add.w	r0, sp, #13
   1aaba:	f7e5 fc01 	bl	2c0 <memcpy>

#if defined(CONFIG_NET_L2_BT_ZEP1656)
		/* Workaround against older Linux kernel BT IPSP code.
		 * This will be removed eventually.
		 */
		if (lladdr->type == NET_LINK_BLUETOOTH) {
   1aabe:	7963      	ldrb	r3, [r4, #5]
   1aac0:	2b02      	cmp	r3, #2
   1aac2:	d009      	beq.n	1aad8 <net_if_start_dad+0xa8>
			addr->s6_addr[8] ^= 0x02;
		}
#endif

		if (lladdr->type == NET_LINK_ETHERNET) {
   1aac4:	7963      	ldrb	r3, [r4, #5]
   1aac6:	2b03      	cmp	r3, #3
   1aac8:	d1ca      	bne.n	1aa60 <net_if_start_dad+0x30>
			addr->s6_addr[8] ^= 0x02;
   1aaca:	f89d 3008 	ldrb.w	r3, [sp, #8]
   1aace:	f083 0302 	eor.w	r3, r3, #2
   1aad2:	f88d 3008 	strb.w	r3, [sp, #8]
   1aad6:	e7c3      	b.n	1aa60 <net_if_start_dad+0x30>
			addr->s6_addr[8] ^= 0x02;
   1aad8:	f89d 3008 	ldrb.w	r3, [sp, #8]
   1aadc:	f083 0302 	eor.w	r3, r3, #2
   1aae0:	f88d 3008 	strb.w	r3, [sp, #8]
   1aae4:	e7ee      	b.n	1aac4 <net_if_start_dad+0x94>
		}

		break;
	case 8:
		memcpy(&addr->s6_addr[8], lladdr->addr, lladdr->len);
   1aae6:	6901      	ldr	r1, [r0, #16]
   1aae8:	a802      	add	r0, sp, #8
   1aaea:	f7e5 fbe9 	bl	2c0 <memcpy>
		addr->s6_addr[8] ^= 0x02;
   1aaee:	f89d 3008 	ldrb.w	r3, [sp, #8]
   1aaf2:	f083 0302 	eor.w	r3, r3, #2
   1aaf6:	f88d 3008 	strb.w	r3, [sp, #8]
   1aafa:	e7b1      	b.n	1aa60 <net_if_start_dad+0x30>
   1aafc:	3401      	adds	r4, #1
   1aafe:	2c02      	cmp	r4, #2
   1ab00:	dc18      	bgt.n	1ab34 <net_if_start_dad+0x104>
		if (!iface->ipv6.unicast[i].is_used ||
   1ab02:	236c      	movs	r3, #108	; 0x6c
   1ab04:	fb03 5304 	mla	r3, r3, r4, r5
   1ab08:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
   1ab0c:	2b00      	cmp	r3, #0
   1ab0e:	d0f5      	beq.n	1aafc <net_if_start_dad+0xcc>
		    iface->ipv6.unicast[i].address.family != AF_INET6 ||
   1ab10:	236c      	movs	r3, #108	; 0x6c
   1ab12:	fb03 5304 	mla	r3, r3, r4, r5
   1ab16:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
		if (!iface->ipv6.unicast[i].is_used ||
   1ab18:	2b0a      	cmp	r3, #10
   1ab1a:	d1ef      	bne.n	1aafc <net_if_start_dad+0xcc>
		    &iface->ipv6.unicast[i] == ifaddr) {
   1ab1c:	216c      	movs	r1, #108	; 0x6c
   1ab1e:	fb01 f104 	mul.w	r1, r1, r4
   1ab22:	3120      	adds	r1, #32
   1ab24:	4429      	add	r1, r5
   1ab26:	310c      	adds	r1, #12
		    iface->ipv6.unicast[i].address.family != AF_INET6 ||
   1ab28:	428e      	cmp	r6, r1
   1ab2a:	d0e7      	beq.n	1aafc <net_if_start_dad+0xcc>
		net_if_ipv6_start_dad(iface, &iface->ipv6.unicast[i]);
   1ab2c:	4628      	mov	r0, r5
   1ab2e:	f7ff fd9f 	bl	1a670 <net_if_ipv6_start_dad>
   1ab32:	e7e3      	b.n	1aafc <net_if_start_dad+0xcc>
}
   1ab34:	b004      	add	sp, #16
   1ab36:	bd70      	pop	{r4, r5, r6, pc}

0001ab38 <net_if_ipv6_maddr_add>:
	return addr->s6_addr[0] == 0xFF;
   1ab38:	780b      	ldrb	r3, [r1, #0]
	if (!net_is_ipv6_addr_mcast(addr)) {
   1ab3a:	2bff      	cmp	r3, #255	; 0xff
   1ab3c:	d134      	bne.n	1aba8 <net_if_ipv6_maddr_add+0x70>
{
   1ab3e:	b570      	push	{r4, r5, r6, lr}
   1ab40:	2400      	movs	r4, #0
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   1ab42:	2c04      	cmp	r4, #4
   1ab44:	dc2e      	bgt.n	1aba4 <net_if_ipv6_maddr_add+0x6c>
		if (iface->ipv6.mcast[i].is_used) {
   1ab46:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1ab4a:	00d3      	lsls	r3, r2, #3
   1ab4c:	4403      	add	r3, r0
   1ab4e:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
   1ab52:	f013 0f01 	tst.w	r3, #1
   1ab56:	d001      	beq.n	1ab5c <net_if_ipv6_maddr_add+0x24>
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   1ab58:	3401      	adds	r4, #1
   1ab5a:	e7f2      	b.n	1ab42 <net_if_ipv6_maddr_add+0xa>
   1ab5c:	4605      	mov	r5, r0
		iface->ipv6.mcast[i].is_used = true;
   1ab5e:	0066      	lsls	r6, r4, #1
   1ab60:	1932      	adds	r2, r6, r4
   1ab62:	00d3      	lsls	r3, r2, #3
   1ab64:	4403      	add	r3, r0
   1ab66:	f893 2170 	ldrb.w	r2, [r3, #368]	; 0x170
   1ab6a:	f042 0201 	orr.w	r2, r2, #1
   1ab6e:	f883 2170 	strb.w	r2, [r3, #368]	; 0x170
		iface->ipv6.mcast[i].address.family = AF_INET6;
   1ab72:	220a      	movs	r2, #10
   1ab74:	f8a3 2174 	strh.w	r2, [r3, #372]	; 0x174
		memcpy(&iface->ipv6.mcast[i].address.in6_addr, addr, 16);
   1ab78:	1933      	adds	r3, r6, r4
   1ab7a:	00d8      	lsls	r0, r3, #3
   1ab7c:	f500 70b0 	add.w	r0, r0, #352	; 0x160
   1ab80:	4428      	add	r0, r5
   1ab82:	2210      	movs	r2, #16
   1ab84:	3018      	adds	r0, #24
   1ab86:	f7e5 fb9b 	bl	2c0 <memcpy>
   1ab8a:	2300      	movs	r3, #0
   1ab8c:	461a      	mov	r2, r3
   1ab8e:	4629      	mov	r1, r5
   1ab90:	4806      	ldr	r0, [pc, #24]	; (1abac <net_if_ipv6_maddr_add+0x74>)
   1ab92:	f007 fc99 	bl	224c8 <net_mgmt_event_notify_with_info>
		return &iface->ipv6.mcast[i];
   1ab96:	4434      	add	r4, r6
   1ab98:	00e0      	lsls	r0, r4, #3
   1ab9a:	f500 70b0 	add.w	r0, r0, #352	; 0x160
   1ab9e:	4428      	add	r0, r5
   1aba0:	3010      	adds	r0, #16
   1aba2:	bd70      	pop	{r4, r5, r6, pc}
	return NULL;
   1aba4:	2000      	movs	r0, #0
   1aba6:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   1aba8:	2000      	movs	r0, #0
   1abaa:	4770      	bx	lr
   1abac:	f0600003 	.word	0xf0600003

0001abb0 <net_if_ipv6_maddr_rm>:
{
   1abb0:	b570      	push	{r4, r5, r6, lr}
   1abb2:	4605      	mov	r5, r0
   1abb4:	460e      	mov	r6, r1
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   1abb6:	2400      	movs	r4, #0
   1abb8:	e000      	b.n	1abbc <net_if_ipv6_maddr_rm+0xc>
   1abba:	3401      	adds	r4, #1
   1abbc:	2c04      	cmp	r4, #4
   1abbe:	dc25      	bgt.n	1ac0c <net_if_ipv6_maddr_rm+0x5c>
		if (!iface->ipv6.mcast[i].is_used) {
   1abc0:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1abc4:	00d3      	lsls	r3, r2, #3
   1abc6:	461a      	mov	r2, r3
   1abc8:	442b      	add	r3, r5
   1abca:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
   1abce:	f013 0f01 	tst.w	r3, #1
   1abd2:	d0f2      	beq.n	1abba <net_if_ipv6_maddr_rm+0xa>
			    &iface->ipv6.mcast[i].address.in6_addr,
   1abd4:	f502 70b0 	add.w	r0, r2, #352	; 0x160
   1abd8:	4428      	add	r0, r5
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   1abda:	2210      	movs	r2, #16
   1abdc:	4631      	mov	r1, r6
   1abde:	3018      	adds	r0, #24
   1abe0:	f00f febc 	bl	2a95c <memcmp>
		if (!net_ipv6_addr_cmp(
   1abe4:	2800      	cmp	r0, #0
   1abe6:	d1e8      	bne.n	1abba <net_if_ipv6_maddr_rm+0xa>
		iface->ipv6.mcast[i].is_used = false;
   1abe8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   1abec:	00e3      	lsls	r3, r4, #3
   1abee:	442b      	add	r3, r5
   1abf0:	f893 2170 	ldrb.w	r2, [r3, #368]	; 0x170
   1abf4:	f36f 0200 	bfc	r2, #0, #1
   1abf8:	f883 2170 	strb.w	r2, [r3, #368]	; 0x170
   1abfc:	2300      	movs	r3, #0
   1abfe:	461a      	mov	r2, r3
   1ac00:	4629      	mov	r1, r5
   1ac02:	4803      	ldr	r0, [pc, #12]	; (1ac10 <net_if_ipv6_maddr_rm+0x60>)
   1ac04:	f007 fc60 	bl	224c8 <net_mgmt_event_notify_with_info>
		return true;
   1ac08:	2001      	movs	r0, #1
   1ac0a:	bd70      	pop	{r4, r5, r6, pc}
	return false;
   1ac0c:	2000      	movs	r0, #0
}
   1ac0e:	bd70      	pop	{r4, r5, r6, pc}
   1ac10:	f0600004 	.word	0xf0600004

0001ac14 <net_if_ipv6_addr_rm>:
{
   1ac14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ac18:	b084      	sub	sp, #16
   1ac1a:	4606      	mov	r6, r0
   1ac1c:	460f      	mov	r7, r1
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1ac1e:	2400      	movs	r4, #0
   1ac20:	e009      	b.n	1ac36 <net_if_ipv6_addr_rm+0x22>
			k_delayed_work_cancel(&iface->ipv6.unicast[i].lifetime);
   1ac22:	206c      	movs	r0, #108	; 0x6c
   1ac24:	fb00 f004 	mul.w	r0, r0, r4
   1ac28:	3030      	adds	r0, #48	; 0x30
   1ac2a:	4430      	add	r0, r6
   1ac2c:	3010      	adds	r0, #16
   1ac2e:	f00e fba3 	bl	29378 <k_delayed_work_cancel>
   1ac32:	e01c      	b.n	1ac6e <net_if_ipv6_addr_rm+0x5a>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1ac34:	3401      	adds	r4, #1
   1ac36:	2c02      	cmp	r4, #2
   1ac38:	dc46      	bgt.n	1acc8 <net_if_ipv6_addr_rm+0xb4>
		if (!iface->ipv6.unicast[i].is_used) {
   1ac3a:	236c      	movs	r3, #108	; 0x6c
   1ac3c:	fb03 6304 	mla	r3, r3, r4, r6
   1ac40:	f893 5094 	ldrb.w	r5, [r3, #148]	; 0x94
   1ac44:	2d00      	cmp	r5, #0
   1ac46:	d0f5      	beq.n	1ac34 <net_if_ipv6_addr_rm+0x20>
			    &iface->ipv6.unicast[i].address.in6_addr,
   1ac48:	206c      	movs	r0, #108	; 0x6c
   1ac4a:	fb00 f004 	mul.w	r0, r0, r4
   1ac4e:	3020      	adds	r0, #32
   1ac50:	4430      	add	r0, r6
   1ac52:	2210      	movs	r2, #16
   1ac54:	4639      	mov	r1, r7
   1ac56:	4410      	add	r0, r2
   1ac58:	f00f fe80 	bl	2a95c <memcmp>
		if (!net_ipv6_addr_cmp(
   1ac5c:	2800      	cmp	r0, #0
   1ac5e:	d1e9      	bne.n	1ac34 <net_if_ipv6_addr_rm+0x20>
		if (!iface->ipv6.unicast[i].is_infinite) {
   1ac60:	236c      	movs	r3, #108	; 0x6c
   1ac62:	fb03 6304 	mla	r3, r3, r4, r6
   1ac66:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
   1ac6a:	2b00      	cmp	r3, #0
   1ac6c:	d0d9      	beq.n	1ac22 <net_if_ipv6_addr_rm+0xe>
		iface->ipv6.unicast[i].is_used = false;
   1ac6e:	236c      	movs	r3, #108	; 0x6c
   1ac70:	fb03 6404 	mla	r4, r3, r4, r6
   1ac74:	f04f 0800 	mov.w	r8, #0
   1ac78:	f884 8094 	strb.w	r8, [r4, #148]	; 0x94
	dst->s6_addr[0]   = 0xFF;
   1ac7c:	23ff      	movs	r3, #255	; 0xff
   1ac7e:	f88d 3000 	strb.w	r3, [sp]
	dst->s6_addr[1]   = 0x02;
   1ac82:	2202      	movs	r2, #2
   1ac84:	f88d 2001 	strb.w	r2, [sp, #1]
	UNALIGNED_PUT(0, &dst->s6_addr16[1]);
   1ac88:	f8ad 8002 	strh.w	r8, [sp, #2]
	UNALIGNED_PUT(0, &dst->s6_addr16[2]);
   1ac8c:	f8ad 8004 	strh.w	r8, [sp, #4]
	UNALIGNED_PUT(0, &dst->s6_addr16[3]);
   1ac90:	f8ad 8006 	strh.w	r8, [sp, #6]
	UNALIGNED_PUT(0, &dst->s6_addr16[4]);
   1ac94:	f8ad 8008 	strh.w	r8, [sp, #8]
	dst->s6_addr[10]  = 0;
   1ac98:	f88d 800a 	strb.w	r8, [sp, #10]
	dst->s6_addr[11]  = 0x01;
   1ac9c:	2201      	movs	r2, #1
   1ac9e:	f88d 200b 	strb.w	r2, [sp, #11]
	dst->s6_addr[12]  = 0xFF;
   1aca2:	f88d 300c 	strb.w	r3, [sp, #12]
	dst->s6_addr[13]  = src->s6_addr[13];
   1aca6:	7b7b      	ldrb	r3, [r7, #13]
   1aca8:	f88d 300d 	strb.w	r3, [sp, #13]
	UNALIGNED_PUT(UNALIGNED_GET(&src->s6_addr16[7]), &dst->s6_addr16[7]);
   1acac:	89fb      	ldrh	r3, [r7, #14]
   1acae:	f8ad 300e 	strh.w	r3, [sp, #14]
		net_if_ipv6_maddr_rm(iface, &maddr);
   1acb2:	4669      	mov	r1, sp
   1acb4:	4630      	mov	r0, r6
   1acb6:	f7ff ff7b 	bl	1abb0 <net_if_ipv6_maddr_rm>
   1acba:	4643      	mov	r3, r8
   1acbc:	4642      	mov	r2, r8
   1acbe:	4631      	mov	r1, r6
   1acc0:	4804      	ldr	r0, [pc, #16]	; (1acd4 <net_if_ipv6_addr_rm+0xc0>)
   1acc2:	f007 fc01 	bl	224c8 <net_mgmt_event_notify_with_info>
   1acc6:	e000      	b.n	1acca <net_if_ipv6_addr_rm+0xb6>
	return false;
   1acc8:	2500      	movs	r5, #0
}
   1acca:	4628      	mov	r0, r5
   1accc:	b004      	add	sp, #16
   1acce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1acd2:	bf00      	nop
   1acd4:	f0600002 	.word	0xf0600002

0001acd8 <net_if_ipv6_dad_failed>:
{
   1acd8:	b510      	push	{r4, lr}
   1acda:	b082      	sub	sp, #8
   1acdc:	ab02      	add	r3, sp, #8
   1acde:	f843 0d04 	str.w	r0, [r3, #-4]!
   1ace2:	460c      	mov	r4, r1
	ifaddr = net_if_ipv6_addr_lookup(addr, &iface);
   1ace4:	4619      	mov	r1, r3
   1ace6:	4620      	mov	r0, r4
   1ace8:	f7ff fdc8 	bl	1a87c <net_if_ipv6_addr_lookup>
	if (!ifaddr) {
   1acec:	b160      	cbz	r0, 1ad08 <net_if_ipv6_dad_failed+0x30>
	k_delayed_work_cancel(&ifaddr->dad_timer);
   1acee:	303c      	adds	r0, #60	; 0x3c
   1acf0:	f00e fb42 	bl	29378 <k_delayed_work_cancel>
   1acf4:	2300      	movs	r3, #0
   1acf6:	461a      	mov	r2, r3
   1acf8:	9901      	ldr	r1, [sp, #4]
   1acfa:	4804      	ldr	r0, [pc, #16]	; (1ad0c <net_if_ipv6_dad_failed+0x34>)
   1acfc:	f007 fbe4 	bl	224c8 <net_mgmt_event_notify_with_info>
	net_if_ipv6_addr_rm(iface, addr);
   1ad00:	4621      	mov	r1, r4
   1ad02:	9801      	ldr	r0, [sp, #4]
   1ad04:	f7ff ff86 	bl	1ac14 <net_if_ipv6_addr_rm>
}
   1ad08:	b002      	add	sp, #8
   1ad0a:	bd10      	pop	{r4, pc}
   1ad0c:	f060000e 	.word	0xf060000e

0001ad10 <net_if_ipv6_maddr_lookup>:
{
   1ad10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ad12:	4607      	mov	r7, r0
   1ad14:	460e      	mov	r6, r1
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1ad16:	4d22      	ldr	r5, [pc, #136]	; (1ada0 <net_if_ipv6_maddr_lookup+0x90>)
   1ad18:	e034      	b.n	1ad84 <net_if_ipv6_maddr_lookup+0x74>
		return false;
   1ad1a:	2300      	movs	r3, #0
			if (net_is_ipv6_prefix(maddr->s6_addr,
   1ad1c:	bb13      	cbnz	r3, 1ad64 <net_if_ipv6_maddr_lookup+0x54>
		for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   1ad1e:	3401      	adds	r4, #1
   1ad20:	2c04      	cmp	r4, #4
   1ad22:	dc2d      	bgt.n	1ad80 <net_if_ipv6_maddr_lookup+0x70>
			if (!iface->ipv6.mcast[i].is_used ||
   1ad24:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1ad28:	00d3      	lsls	r3, r2, #3
   1ad2a:	442b      	add	r3, r5
   1ad2c:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
   1ad30:	f013 0f01 	tst.w	r3, #1
   1ad34:	d0f3      	beq.n	1ad1e <net_if_ipv6_maddr_lookup+0xe>
			    iface->ipv6.mcast[i].address.family != AF_INET6) {
   1ad36:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1ad3a:	00d3      	lsls	r3, r2, #3
   1ad3c:	442b      	add	r3, r5
   1ad3e:	f8b3 3174 	ldrh.w	r3, [r3, #372]	; 0x174
			if (!iface->ipv6.mcast[i].is_used ||
   1ad42:	2b0a      	cmp	r3, #10
   1ad44:	d1eb      	bne.n	1ad1e <net_if_ipv6_maddr_lookup+0xe>
				iface->ipv6.mcast[i].address.in6_addr.s6_addr,
   1ad46:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1ad4a:	00d3      	lsls	r3, r2, #3
   1ad4c:	f503 73b0 	add.w	r3, r3, #352	; 0x160
   1ad50:	18e9      	adds	r1, r5, r3
	if (memcmp(addr1, addr2, bytes)) {
   1ad52:	2210      	movs	r2, #16
   1ad54:	3118      	adds	r1, #24
   1ad56:	4638      	mov	r0, r7
   1ad58:	f00f fe00 	bl	2a95c <memcmp>
   1ad5c:	2800      	cmp	r0, #0
   1ad5e:	d1dc      	bne.n	1ad1a <net_if_ipv6_maddr_lookup+0xa>
		return true;
   1ad60:	2301      	movs	r3, #1
   1ad62:	e7db      	b.n	1ad1c <net_if_ipv6_maddr_lookup+0xc>
				if (ret) {
   1ad64:	b106      	cbz	r6, 1ad68 <net_if_ipv6_maddr_lookup+0x58>
					*ret = iface;
   1ad66:	6035      	str	r5, [r6, #0]
				return &iface->ipv6.mcast[i];
   1ad68:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   1ad6c:	00e3      	lsls	r3, r4, #3
   1ad6e:	f503 70b0 	add.w	r0, r3, #352	; 0x160
   1ad72:	4428      	add	r0, r5
   1ad74:	3010      	adds	r0, #16
   1ad76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1ad78:	2400      	movs	r4, #0
   1ad7a:	e7d1      	b.n	1ad20 <net_if_ipv6_maddr_lookup+0x10>
   1ad7c:	2400      	movs	r4, #0
   1ad7e:	e7cf      	b.n	1ad20 <net_if_ipv6_maddr_lookup+0x10>
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1ad80:	f505 7528 	add.w	r5, r5, #672	; 0x2a0
   1ad84:	4b07      	ldr	r3, [pc, #28]	; (1ada4 <net_if_ipv6_maddr_lookup+0x94>)
   1ad86:	429d      	cmp	r5, r3
   1ad88:	d008      	beq.n	1ad9c <net_if_ipv6_maddr_lookup+0x8c>
		if (ret && *ret && iface != *ret) {
   1ad8a:	2e00      	cmp	r6, #0
   1ad8c:	d0f4      	beq.n	1ad78 <net_if_ipv6_maddr_lookup+0x68>
   1ad8e:	6833      	ldr	r3, [r6, #0]
   1ad90:	2b00      	cmp	r3, #0
   1ad92:	d0f3      	beq.n	1ad7c <net_if_ipv6_maddr_lookup+0x6c>
   1ad94:	429d      	cmp	r5, r3
   1ad96:	d1f3      	bne.n	1ad80 <net_if_ipv6_maddr_lookup+0x70>
   1ad98:	2400      	movs	r4, #0
   1ad9a:	e7c1      	b.n	1ad20 <net_if_ipv6_maddr_lookup+0x10>
	return NULL;
   1ad9c:	2000      	movs	r0, #0
}
   1ad9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1ada0:	2000d160 	.word	0x2000d160
   1ada4:	2000d400 	.word	0x2000d400

0001ada8 <net_if_mcast_monitor>:
{
   1ada8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1adaa:	4605      	mov	r5, r0
   1adac:	460e      	mov	r6, r1
   1adae:	4617      	mov	r7, r2
	return list->head;
   1adb0:	4b13      	ldr	r3, [pc, #76]	; (1ae00 <net_if_mcast_monitor+0x58>)
   1adb2:	681b      	ldr	r3, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&mcast_monitor_callbacks,
   1adb4:	b11b      	cbz	r3, 1adbe <net_if_mcast_monitor+0x16>
   1adb6:	461c      	mov	r4, r3
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   1adb8:	b173      	cbz	r3, 1add8 <net_if_mcast_monitor+0x30>
	return node->next;
   1adba:	681c      	ldr	r4, [r3, #0]
   1adbc:	e00c      	b.n	1add8 <net_if_mcast_monitor+0x30>
   1adbe:	461c      	mov	r4, r3
   1adc0:	e00a      	b.n	1add8 <net_if_mcast_monitor+0x30>
			mon->cb(iface, addr, is_joined);
   1adc2:	689b      	ldr	r3, [r3, #8]
   1adc4:	463a      	mov	r2, r7
   1adc6:	4631      	mov	r1, r6
   1adc8:	4628      	mov	r0, r5
   1adca:	4798      	blx	r3
   1adcc:	e008      	b.n	1ade0 <net_if_mcast_monitor+0x38>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   1adce:	4623      	mov	r3, r4
   1add0:	e00c      	b.n	1adec <net_if_mcast_monitor+0x44>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&mcast_monitor_callbacks,
   1add2:	4622      	mov	r2, r4
   1add4:	4623      	mov	r3, r4
   1add6:	4614      	mov	r4, r2
   1add8:	b183      	cbz	r3, 1adfc <net_if_mcast_monitor+0x54>
		if (iface == mon->iface) {
   1adda:	685a      	ldr	r2, [r3, #4]
   1addc:	42aa      	cmp	r2, r5
   1adde:	d0f0      	beq.n	1adc2 <net_if_mcast_monitor+0x1a>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&mcast_monitor_callbacks,
   1ade0:	2c00      	cmp	r4, #0
   1ade2:	d0f6      	beq.n	1add2 <net_if_mcast_monitor+0x2a>
   1ade4:	4622      	mov	r2, r4
   1ade6:	2c00      	cmp	r4, #0
   1ade8:	d0f1      	beq.n	1adce <net_if_mcast_monitor+0x26>
	return node->next;
   1adea:	6823      	ldr	r3, [r4, #0]
   1adec:	b113      	cbz	r3, 1adf4 <net_if_mcast_monitor+0x4c>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   1adee:	b11a      	cbz	r2, 1adf8 <net_if_mcast_monitor+0x50>
	return node->next;
   1adf0:	6822      	ldr	r2, [r4, #0]
   1adf2:	e7ef      	b.n	1add4 <net_if_mcast_monitor+0x2c>
   1adf4:	2200      	movs	r2, #0
   1adf6:	e7ed      	b.n	1add4 <net_if_mcast_monitor+0x2c>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   1adf8:	2200      	movs	r2, #0
   1adfa:	e7eb      	b.n	1add4 <net_if_mcast_monitor+0x2c>
}
   1adfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1adfe:	bf00      	nop
   1ae00:	20001aec 	.word	0x20001aec

0001ae04 <net_if_ipv6_prefix_add>:
{
   1ae04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ae08:	4605      	mov	r5, r0
   1ae0a:	460e      	mov	r6, r1
   1ae0c:	4617      	mov	r7, r2
   1ae0e:	4698      	mov	r8, r3
	if_prefix = ipv6_prefix_find(iface, prefix, len);
   1ae10:	f7ff fc00 	bl	1a614 <ipv6_prefix_find>
	if (if_prefix) {
   1ae14:	4604      	mov	r4, r0
   1ae16:	b110      	cbz	r0, 1ae1e <net_if_ipv6_prefix_add+0x1a>
}
   1ae18:	4620      	mov	r0, r4
   1ae1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ae1e:	2300      	movs	r3, #0
   1ae20:	e000      	b.n	1ae24 <net_if_ipv6_prefix_add+0x20>
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
   1ae22:	3301      	adds	r3, #1
   1ae24:	2b01      	cmp	r3, #1
   1ae26:	dcf7      	bgt.n	1ae18 <net_if_ipv6_prefix_add+0x14>
		if (iface->ipv6.prefix[i].is_used) {
   1ae28:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
   1ae2c:	008a      	lsls	r2, r1, #2
   1ae2e:	442a      	add	r2, r5
   1ae30:	f892 2222 	ldrb.w	r2, [r2, #546]	; 0x222
   1ae34:	2a00      	cmp	r2, #0
   1ae36:	d1f4      	bne.n	1ae22 <net_if_ipv6_prefix_add+0x1e>
		net_if_ipv6_prefix_init(&iface->ipv6.prefix[i], prefix, len,
   1ae38:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
   1ae3c:	009a      	lsls	r2, r3, #2
   1ae3e:	f502 74ec 	add.w	r4, r2, #472	; 0x1d8
   1ae42:	442c      	add	r4, r5
   1ae44:	3410      	adds	r4, #16
   1ae46:	4643      	mov	r3, r8
   1ae48:	463a      	mov	r2, r7
   1ae4a:	4631      	mov	r1, r6
   1ae4c:	4620      	mov	r0, r4
   1ae4e:	f7ff fc2d 	bl	1a6ac <net_if_ipv6_prefix_init>
   1ae52:	2300      	movs	r3, #0
   1ae54:	461a      	mov	r2, r3
   1ae56:	4629      	mov	r1, r5
   1ae58:	4801      	ldr	r0, [pc, #4]	; (1ae60 <net_if_ipv6_prefix_add+0x5c>)
   1ae5a:	f007 fb35 	bl	224c8 <net_mgmt_event_notify_with_info>
		return &iface->ipv6.prefix[i];
   1ae5e:	e7db      	b.n	1ae18 <net_if_ipv6_prefix_add+0x14>
   1ae60:	f0600005 	.word	0xf0600005

0001ae64 <net_if_ipv6_prefix_lookup>:
{
   1ae64:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ae68:	4605      	mov	r5, r0
   1ae6a:	4688      	mov	r8, r1
   1ae6c:	4617      	mov	r7, r2
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
   1ae6e:	2400      	movs	r4, #0
   1ae70:	e01d      	b.n	1aeae <net_if_ipv6_prefix_lookup+0x4a>
	if (memcmp(addr1, addr2, bytes)) {
   1ae72:	4652      	mov	r2, sl
   1ae74:	4641      	mov	r1, r8
   1ae76:	4648      	mov	r0, r9
   1ae78:	f00f fd70 	bl	2a95c <memcmp>
   1ae7c:	b9a0      	cbnz	r0, 1aea8 <net_if_ipv6_prefix_lookup+0x44>
	if (!remain) {
   1ae7e:	f1bb 0f00 	cmp.w	fp, #0
   1ae82:	d012      	beq.n	1aeaa <net_if_ipv6_prefix_lookup+0x46>
	mask = ((0xff << (8 - remain)) ^ 0xff) << remain;
   1ae84:	f1cb 0208 	rsb	r2, fp, #8
   1ae88:	23ff      	movs	r3, #255	; 0xff
   1ae8a:	4093      	lsls	r3, r2
   1ae8c:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
   1ae90:	fa03 f30b 	lsl.w	r3, r3, fp
	return (addr1[bytes] & mask) == (addr2[bytes] & mask);
   1ae94:	f819 200a 	ldrb.w	r2, [r9, sl]
   1ae98:	f818 100a 	ldrb.w	r1, [r8, sl]
   1ae9c:	404a      	eors	r2, r1
   1ae9e:	4213      	tst	r3, r2
   1aea0:	bf0c      	ite	eq
   1aea2:	2601      	moveq	r6, #1
   1aea4:	2600      	movne	r6, #0
   1aea6:	e000      	b.n	1aeaa <net_if_ipv6_prefix_lookup+0x46>
		return false;
   1aea8:	2600      	movs	r6, #0
		if (net_is_ipv6_prefix(iface->ipv6.prefix[i].prefix.s6_addr,
   1aeaa:	b9e6      	cbnz	r6, 1aee6 <net_if_ipv6_prefix_lookup+0x82>
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
   1aeac:	3401      	adds	r4, #1
   1aeae:	2c01      	cmp	r4, #1
   1aeb0:	dc22      	bgt.n	1aef8 <net_if_ipv6_prefix_lookup+0x94>
		if (!iface->ipv6.prefix[i].is_used) {
   1aeb2:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   1aeb6:	0093      	lsls	r3, r2, #2
   1aeb8:	442b      	add	r3, r5
   1aeba:	f893 6222 	ldrb.w	r6, [r3, #546]	; 0x222
   1aebe:	2e00      	cmp	r6, #0
   1aec0:	d0f4      	beq.n	1aeac <net_if_ipv6_prefix_lookup+0x48>
		if (net_is_ipv6_prefix(iface->ipv6.prefix[i].prefix.s6_addr,
   1aec2:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   1aec6:	0093      	lsls	r3, r2, #2
   1aec8:	f503 7300 	add.w	r3, r3, #512	; 0x200
   1aecc:	442b      	add	r3, r5
   1aece:	f103 0910 	add.w	r9, r3, #16
	u8_t bits = 128 - length;
   1aed2:	f1c7 0380 	rsb	r3, r7, #128	; 0x80
	u8_t bytes = length / 8;
   1aed6:	ea4f 0ad7 	mov.w	sl, r7, lsr #3
	u8_t remain = bits % 8;
   1aeda:	f003 0b07 	and.w	fp, r3, #7
	if (length > 128) {
   1aede:	2f80      	cmp	r7, #128	; 0x80
   1aee0:	d9c7      	bls.n	1ae72 <net_if_ipv6_prefix_lookup+0xe>
		return false;
   1aee2:	2600      	movs	r6, #0
   1aee4:	e7e1      	b.n	1aeaa <net_if_ipv6_prefix_lookup+0x46>
			return &iface->ipv6.prefix[i];
   1aee6:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
   1aeea:	00a3      	lsls	r3, r4, #2
   1aeec:	f503 70ec 	add.w	r0, r3, #472	; 0x1d8
   1aef0:	4428      	add	r0, r5
   1aef2:	3010      	adds	r0, #16
   1aef4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return NULL;
   1aef8:	2000      	movs	r0, #0
}
   1aefa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0001af00 <net_if_ipv6_addr_onlink>:
{
   1af00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1af04:	4606      	mov	r6, r0
   1af06:	4688      	mov	r8, r1
	for (tmp = __net_if_start; tmp != __net_if_end; tmp++) {
   1af08:	4d2d      	ldr	r5, [pc, #180]	; (1afc0 <net_if_ipv6_addr_onlink+0xc0>)
   1af0a:	e048      	b.n	1af9e <net_if_ipv6_addr_onlink+0x9e>
	if (memcmp(addr1, addr2, bytes)) {
   1af0c:	465a      	mov	r2, fp
   1af0e:	4641      	mov	r1, r8
   1af10:	4648      	mov	r0, r9
   1af12:	f00f fd23 	bl	2a95c <memcmp>
   1af16:	b9a8      	cbnz	r0, 1af44 <net_if_ipv6_addr_onlink+0x44>
	if (!remain) {
   1af18:	f1ba 0f00 	cmp.w	sl, #0
   1af1c:	d013      	beq.n	1af46 <net_if_ipv6_addr_onlink+0x46>
	mask = ((0xff << (8 - remain)) ^ 0xff) << remain;
   1af1e:	f1ca 0208 	rsb	r2, sl, #8
   1af22:	23ff      	movs	r3, #255	; 0xff
   1af24:	4093      	lsls	r3, r2
   1af26:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
   1af2a:	fa03 fa0a 	lsl.w	sl, r3, sl
	return (addr1[bytes] & mask) == (addr2[bytes] & mask);
   1af2e:	f819 300b 	ldrb.w	r3, [r9, fp]
   1af32:	f818 200b 	ldrb.w	r2, [r8, fp]
   1af36:	4053      	eors	r3, r2
   1af38:	ea1a 0f03 	tst.w	sl, r3
   1af3c:	bf0c      	ite	eq
   1af3e:	2701      	moveq	r7, #1
   1af40:	2700      	movne	r7, #0
   1af42:	e000      	b.n	1af46 <net_if_ipv6_addr_onlink+0x46>
		return false;
   1af44:	2700      	movs	r7, #0
			if (tmp->ipv6.prefix[i].is_used &&
   1af46:	bb0f      	cbnz	r7, 1af8c <net_if_ipv6_addr_onlink+0x8c>
		for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
   1af48:	3401      	adds	r4, #1
   1af4a:	2c01      	cmp	r4, #1
   1af4c:	dc25      	bgt.n	1af9a <net_if_ipv6_addr_onlink+0x9a>
			if (tmp->ipv6.prefix[i].is_used &&
   1af4e:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   1af52:	0093      	lsls	r3, r2, #2
   1af54:	442b      	add	r3, r5
   1af56:	f893 7222 	ldrb.w	r7, [r3, #546]	; 0x222
   1af5a:	2f00      	cmp	r7, #0
   1af5c:	d0f4      	beq.n	1af48 <net_if_ipv6_addr_onlink+0x48>
			    net_is_ipv6_prefix(tmp->ipv6.prefix[i].prefix.
   1af5e:	0122      	lsls	r2, r4, #4
   1af60:	1b11      	subs	r1, r2, r4
   1af62:	008b      	lsls	r3, r1, #2
   1af64:	4619      	mov	r1, r3
   1af66:	f503 7300 	add.w	r3, r3, #512	; 0x200
   1af6a:	442b      	add	r3, r5
   1af6c:	f103 0910 	add.w	r9, r3, #16
   1af70:	460a      	mov	r2, r1
   1af72:	442a      	add	r2, r5
   1af74:	f892 3220 	ldrb.w	r3, [r2, #544]	; 0x220
	u8_t bits = 128 - length;
   1af78:	f1c3 0a80 	rsb	sl, r3, #128	; 0x80
	u8_t bytes = length / 8;
   1af7c:	ea4f 0bd3 	mov.w	fp, r3, lsr #3
	u8_t remain = bits % 8;
   1af80:	f00a 0a07 	and.w	sl, sl, #7
	if (length > 128) {
   1af84:	2b80      	cmp	r3, #128	; 0x80
   1af86:	d9c1      	bls.n	1af0c <net_if_ipv6_addr_onlink+0xc>
		return false;
   1af88:	2700      	movs	r7, #0
   1af8a:	e7dc      	b.n	1af46 <net_if_ipv6_addr_onlink+0x46>
				if (iface) {
   1af8c:	b1a6      	cbz	r6, 1afb8 <net_if_ipv6_addr_onlink+0xb8>
					*iface = tmp;
   1af8e:	6035      	str	r5, [r6, #0]
   1af90:	e012      	b.n	1afb8 <net_if_ipv6_addr_onlink+0xb8>
   1af92:	2400      	movs	r4, #0
   1af94:	e7d9      	b.n	1af4a <net_if_ipv6_addr_onlink+0x4a>
   1af96:	2400      	movs	r4, #0
   1af98:	e7d7      	b.n	1af4a <net_if_ipv6_addr_onlink+0x4a>
	for (tmp = __net_if_start; tmp != __net_if_end; tmp++) {
   1af9a:	f505 7528 	add.w	r5, r5, #672	; 0x2a0
   1af9e:	4b09      	ldr	r3, [pc, #36]	; (1afc4 <net_if_ipv6_addr_onlink+0xc4>)
   1afa0:	429d      	cmp	r5, r3
   1afa2:	d008      	beq.n	1afb6 <net_if_ipv6_addr_onlink+0xb6>
		if (iface && *iface && *iface != tmp) {
   1afa4:	2e00      	cmp	r6, #0
   1afa6:	d0f4      	beq.n	1af92 <net_if_ipv6_addr_onlink+0x92>
   1afa8:	6833      	ldr	r3, [r6, #0]
   1afaa:	2b00      	cmp	r3, #0
   1afac:	d0f3      	beq.n	1af96 <net_if_ipv6_addr_onlink+0x96>
   1afae:	429d      	cmp	r5, r3
   1afb0:	d1f3      	bne.n	1af9a <net_if_ipv6_addr_onlink+0x9a>
   1afb2:	2400      	movs	r4, #0
   1afb4:	e7c9      	b.n	1af4a <net_if_ipv6_addr_onlink+0x4a>
	return false;
   1afb6:	2700      	movs	r7, #0
}
   1afb8:	4638      	mov	r0, r7
   1afba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1afbe:	bf00      	nop
   1afc0:	2000d160 	.word	0x2000d160
   1afc4:	2000d400 	.word	0x2000d400

0001afc8 <net_if_ipv6_prefix_set_timer>:
{
   1afc8:	b508      	push	{r3, lr}
	u32_t timeout = lifetime * MSEC_PER_SEC;
   1afca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1afce:	fb02 f201 	mul.w	r2, r2, r1
	if (lifetime > (0xfffffffe / MSEC_PER_SEC)) {
   1afd2:	4b05      	ldr	r3, [pc, #20]	; (1afe8 <net_if_ipv6_prefix_set_timer+0x20>)
   1afd4:	4299      	cmp	r1, r3
   1afd6:	d901      	bls.n	1afdc <net_if_ipv6_prefix_set_timer+0x14>
		timeout = 0xfffffffe;
   1afd8:	f06f 0201 	mvn.w	r2, #1
   1afdc:	4601      	mov	r1, r0
   1afde:	4803      	ldr	r0, [pc, #12]	; (1afec <net_if_ipv6_prefix_set_timer+0x24>)
   1afe0:	f00e fa24 	bl	2942c <k_delayed_work_submit_to_queue>
   1afe4:	bd08      	pop	{r3, pc}
   1afe6:	bf00      	nop
   1afe8:	00418937 	.word	0x00418937
   1afec:	20002b08 	.word	0x20002b08

0001aff0 <net_if_ipv6_prefix_unset_timer>:
{
   1aff0:	b508      	push	{r3, lr}
	if (!prefix->is_used) {
   1aff2:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
   1aff6:	b903      	cbnz	r3, 1affa <net_if_ipv6_prefix_unset_timer+0xa>
   1aff8:	bd08      	pop	{r3, pc}
	k_delayed_work_cancel(&prefix->lifetime);
   1affa:	f00e f9bd 	bl	29378 <k_delayed_work_cancel>
   1affe:	e7fb      	b.n	1aff8 <net_if_ipv6_prefix_unset_timer+0x8>

0001b000 <net_if_ipv6_prefix_rm>:
{
   1b000:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b004:	4606      	mov	r6, r0
   1b006:	460f      	mov	r7, r1
   1b008:	4690      	mov	r8, r2
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
   1b00a:	2400      	movs	r4, #0
   1b00c:	e000      	b.n	1b010 <net_if_ipv6_prefix_rm+0x10>
   1b00e:	3401      	adds	r4, #1
   1b010:	2c01      	cmp	r4, #1
   1b012:	dc2f      	bgt.n	1b074 <net_if_ipv6_prefix_rm+0x74>
		if (!iface->ipv6.prefix[i].is_used) {
   1b014:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   1b018:	0093      	lsls	r3, r2, #2
   1b01a:	461a      	mov	r2, r3
   1b01c:	4433      	add	r3, r6
   1b01e:	f893 5222 	ldrb.w	r5, [r3, #546]	; 0x222
   1b022:	2d00      	cmp	r5, #0
   1b024:	d0f3      	beq.n	1b00e <net_if_ipv6_prefix_rm+0xe>
		if (!net_ipv6_addr_cmp(&iface->ipv6.prefix[i].prefix, addr) ||
   1b026:	f502 7000 	add.w	r0, r2, #512	; 0x200
   1b02a:	4430      	add	r0, r6
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   1b02c:	2210      	movs	r2, #16
   1b02e:	4639      	mov	r1, r7
   1b030:	4410      	add	r0, r2
   1b032:	f00f fc93 	bl	2a95c <memcmp>
   1b036:	2800      	cmp	r0, #0
   1b038:	d1e9      	bne.n	1b00e <net_if_ipv6_prefix_rm+0xe>
		    iface->ipv6.prefix[i].len != len) {
   1b03a:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   1b03e:	0093      	lsls	r3, r2, #2
   1b040:	4433      	add	r3, r6
   1b042:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
		if (!net_ipv6_addr_cmp(&iface->ipv6.prefix[i].prefix, addr) ||
   1b046:	4543      	cmp	r3, r8
   1b048:	d1e1      	bne.n	1b00e <net_if_ipv6_prefix_rm+0xe>
		net_if_ipv6_prefix_unset_timer(&iface->ipv6.prefix[i]);
   1b04a:	0127      	lsls	r7, r4, #4
   1b04c:	1b3a      	subs	r2, r7, r4
   1b04e:	0093      	lsls	r3, r2, #2
   1b050:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
   1b054:	18f0      	adds	r0, r6, r3
   1b056:	3010      	adds	r0, #16
   1b058:	f7ff ffca 	bl	1aff0 <net_if_ipv6_prefix_unset_timer>
		iface->ipv6.prefix[i].is_used = false;
   1b05c:	1b3c      	subs	r4, r7, r4
   1b05e:	00a3      	lsls	r3, r4, #2
   1b060:	4433      	add	r3, r6
   1b062:	2200      	movs	r2, #0
   1b064:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
   1b068:	4613      	mov	r3, r2
   1b06a:	4631      	mov	r1, r6
   1b06c:	4803      	ldr	r0, [pc, #12]	; (1b07c <net_if_ipv6_prefix_rm+0x7c>)
   1b06e:	f007 fa2b 	bl	224c8 <net_mgmt_event_notify_with_info>
		return true;
   1b072:	e000      	b.n	1b076 <net_if_ipv6_prefix_rm+0x76>
	return false;
   1b074:	2500      	movs	r5, #0
}
   1b076:	4628      	mov	r0, r5
   1b078:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b07c:	f0600006 	.word	0xf0600006

0001b080 <net_if_ipv6_router_lookup>:
{
   1b080:	b570      	push	{r4, r5, r6, lr}
   1b082:	4605      	mov	r5, r0
   1b084:	460e      	mov	r6, r1
	for (i = 0; i < CONFIG_NET_MAX_ROUTERS; i++) {
   1b086:	2400      	movs	r4, #0
   1b088:	2c00      	cmp	r4, #0
   1b08a:	dd01      	ble.n	1b090 <net_if_ipv6_router_lookup+0x10>
	return NULL;
   1b08c:	2000      	movs	r0, #0
}
   1b08e:	bd70      	pop	{r4, r5, r6, pc}
		if (!routers[i].is_used ||
   1b090:	eb04 1304 	add.w	r3, r4, r4, lsl #4
   1b094:	009a      	lsls	r2, r3, #2
   1b096:	4b11      	ldr	r3, [pc, #68]	; (1b0dc <net_if_ipv6_router_lookup+0x5c>)
   1b098:	4413      	add	r3, r2
   1b09a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
   1b09e:	b123      	cbz	r3, 1b0aa <net_if_ipv6_router_lookup+0x2a>
		    routers[i].address.family != AF_INET6 ||
   1b0a0:	4b0e      	ldr	r3, [pc, #56]	; (1b0dc <net_if_ipv6_router_lookup+0x5c>)
   1b0a2:	4413      	add	r3, r2
   1b0a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
		if (!routers[i].is_used ||
   1b0a6:	2b0a      	cmp	r3, #10
   1b0a8:	d001      	beq.n	1b0ae <net_if_ipv6_router_lookup+0x2e>
	for (i = 0; i < CONFIG_NET_MAX_ROUTERS; i++) {
   1b0aa:	3401      	adds	r4, #1
   1b0ac:	e7ec      	b.n	1b088 <net_if_ipv6_router_lookup+0x8>
		    routers[i].iface != iface) {
   1b0ae:	4b0b      	ldr	r3, [pc, #44]	; (1b0dc <net_if_ipv6_router_lookup+0x5c>)
   1b0b0:	4413      	add	r3, r2
   1b0b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
		    routers[i].address.family != AF_INET6 ||
   1b0b4:	42ab      	cmp	r3, r5
   1b0b6:	d1f8      	bne.n	1b0aa <net_if_ipv6_router_lookup+0x2a>
		if (net_ipv6_addr_cmp(&routers[i].address.in6_addr, addr)) {
   1b0b8:	eb04 1204 	add.w	r2, r4, r4, lsl #4
   1b0bc:	0093      	lsls	r3, r2, #2
   1b0be:	3328      	adds	r3, #40	; 0x28
   1b0c0:	4a06      	ldr	r2, [pc, #24]	; (1b0dc <net_if_ipv6_router_lookup+0x5c>)
   1b0c2:	4413      	add	r3, r2
   1b0c4:	2210      	movs	r2, #16
   1b0c6:	4631      	mov	r1, r6
   1b0c8:	1d18      	adds	r0, r3, #4
   1b0ca:	f00f fc47 	bl	2a95c <memcmp>
   1b0ce:	2800      	cmp	r0, #0
   1b0d0:	d1eb      	bne.n	1b0aa <net_if_ipv6_router_lookup+0x2a>
			return &routers[i];
   1b0d2:	2344      	movs	r3, #68	; 0x44
   1b0d4:	4801      	ldr	r0, [pc, #4]	; (1b0dc <net_if_ipv6_router_lookup+0x5c>)
   1b0d6:	fb03 0004 	mla	r0, r3, r4, r0
   1b0da:	bd70      	pop	{r4, r5, r6, pc}
   1b0dc:	20001af4 	.word	0x20001af4

0001b0e0 <net_if_ipv6_router_find_default>:
	for (i = 0; i < CONFIG_NET_MAX_ROUTERS; i++) {
   1b0e0:	2300      	movs	r3, #0
   1b0e2:	2b00      	cmp	r3, #0
   1b0e4:	dd01      	ble.n	1b0ea <net_if_ipv6_router_find_default+0xa>
	return NULL;
   1b0e6:	2000      	movs	r0, #0
}
   1b0e8:	4770      	bx	lr
		if (!routers[i].is_used ||
   1b0ea:	eb03 1203 	add.w	r2, r3, r3, lsl #4
   1b0ee:	0091      	lsls	r1, r2, #2
   1b0f0:	4a0e      	ldr	r2, [pc, #56]	; (1b12c <net_if_ipv6_router_find_default+0x4c>)
   1b0f2:	440a      	add	r2, r1
   1b0f4:	f892 2040 	ldrb.w	r2, [r2, #64]	; 0x40
   1b0f8:	b14a      	cbz	r2, 1b10e <net_if_ipv6_router_find_default+0x2e>
		    !routers[i].is_default ||
   1b0fa:	4a0c      	ldr	r2, [pc, #48]	; (1b12c <net_if_ipv6_router_find_default+0x4c>)
   1b0fc:	440a      	add	r2, r1
   1b0fe:	f892 2041 	ldrb.w	r2, [r2, #65]	; 0x41
		if (!routers[i].is_used ||
   1b102:	b122      	cbz	r2, 1b10e <net_if_ipv6_router_find_default+0x2e>
		    routers[i].address.family != AF_INET6) {
   1b104:	4a09      	ldr	r2, [pc, #36]	; (1b12c <net_if_ipv6_router_find_default+0x4c>)
   1b106:	440a      	add	r2, r1
   1b108:	8d12      	ldrh	r2, [r2, #40]	; 0x28
		    !routers[i].is_default ||
   1b10a:	2a0a      	cmp	r2, #10
   1b10c:	d001      	beq.n	1b112 <net_if_ipv6_router_find_default+0x32>
	for (i = 0; i < CONFIG_NET_MAX_ROUTERS; i++) {
   1b10e:	3301      	adds	r3, #1
   1b110:	e7e7      	b.n	1b0e2 <net_if_ipv6_router_find_default+0x2>
		if (iface && iface != routers[i].iface) {
   1b112:	b120      	cbz	r0, 1b11e <net_if_ipv6_router_find_default+0x3e>
   1b114:	4a05      	ldr	r2, [pc, #20]	; (1b12c <net_if_ipv6_router_find_default+0x4c>)
   1b116:	440a      	add	r2, r1
   1b118:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
   1b11a:	4290      	cmp	r0, r2
   1b11c:	d1f7      	bne.n	1b10e <net_if_ipv6_router_find_default+0x2e>
		return &routers[i];
   1b11e:	eb03 1303 	add.w	r3, r3, r3, lsl #4
   1b122:	009a      	lsls	r2, r3, #2
   1b124:	4801      	ldr	r0, [pc, #4]	; (1b12c <net_if_ipv6_router_find_default+0x4c>)
   1b126:	4410      	add	r0, r2
   1b128:	4770      	bx	lr
   1b12a:	bf00      	nop
   1b12c:	20001af4 	.word	0x20001af4

0001b130 <net_if_ipv6_router_update_lifetime>:
}

void net_if_ipv6_router_update_lifetime(struct net_if_router *router,
					u32_t lifetime)
{
   1b130:	b508      	push	{r3, lr}
   1b132:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1b136:	fb02 f201 	mul.w	r2, r2, r1
   1b13a:	4601      	mov	r1, r0
   1b13c:	4801      	ldr	r0, [pc, #4]	; (1b144 <net_if_ipv6_router_update_lifetime+0x14>)
   1b13e:	f00e f975 	bl	2942c <k_delayed_work_submit_to_queue>
   1b142:	bd08      	pop	{r3, pc}
   1b144:	20002b08 	.word	0x20002b08

0001b148 <net_if_ipv6_router_add>:
}

struct net_if_router *net_if_ipv6_router_add(struct net_if *iface,
					     struct in6_addr *addr,
					     u16_t lifetime)
{
   1b148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b14c:	b084      	sub	sp, #16
	int i;

	for (i = 0; i < CONFIG_NET_MAX_ROUTERS; i++) {
   1b14e:	2300      	movs	r3, #0
   1b150:	2b00      	cmp	r3, #0
   1b152:	dd04      	ble.n	1b15e <net_if_ipv6_router_add+0x16>
		net_mgmt_event_notify(NET_EVENT_IPV6_ROUTER_ADD, iface);

		return &routers[i];
	}

	return NULL;
   1b154:	2400      	movs	r4, #0
}
   1b156:	4620      	mov	r0, r4
   1b158:	b004      	add	sp, #16
   1b15a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (routers[i].is_used) {
   1b15e:	eb03 1403 	add.w	r4, r3, r3, lsl #4
   1b162:	00a5      	lsls	r5, r4, #2
   1b164:	4c20      	ldr	r4, [pc, #128]	; (1b1e8 <net_if_ipv6_router_add+0xa0>)
   1b166:	442c      	add	r4, r5
   1b168:	f894 4040 	ldrb.w	r4, [r4, #64]	; 0x40
   1b16c:	b10c      	cbz	r4, 1b172 <net_if_ipv6_router_add+0x2a>
	for (i = 0; i < CONFIG_NET_MAX_ROUTERS; i++) {
   1b16e:	3301      	adds	r3, #1
   1b170:	e7ee      	b.n	1b150 <net_if_ipv6_router_add+0x8>
   1b172:	4616      	mov	r6, r2
   1b174:	460f      	mov	r7, r1
   1b176:	4680      	mov	r8, r0
		net_if_router_init(&routers[i], iface, addr, lifetime);
   1b178:	eb03 1303 	add.w	r3, r3, r3, lsl #4
   1b17c:	009a      	lsls	r2, r3, #2
   1b17e:	4c1a      	ldr	r4, [pc, #104]	; (1b1e8 <net_if_ipv6_router_add+0xa0>)
   1b180:	4414      	add	r4, r2
	router->is_used = true;
   1b182:	2301      	movs	r3, #1
   1b184:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
	router->iface = iface;
   1b188:	63e0      	str	r0, [r4, #60]	; 0x3c
	router->address.family = AF_INET6;
   1b18a:	230a      	movs	r3, #10
   1b18c:	8523      	strh	r3, [r4, #40]	; 0x28
	net_ipaddr_copy(&router->address.in6_addr, addr);
   1b18e:	466d      	mov	r5, sp
   1b190:	6808      	ldr	r0, [r1, #0]
   1b192:	6849      	ldr	r1, [r1, #4]
   1b194:	68ba      	ldr	r2, [r7, #8]
   1b196:	68fb      	ldr	r3, [r7, #12]
   1b198:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1b19a:	466d      	mov	r5, sp
   1b19c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1b19e:	62e0      	str	r0, [r4, #44]	; 0x2c
   1b1a0:	6321      	str	r1, [r4, #48]	; 0x30
   1b1a2:	6362      	str	r2, [r4, #52]	; 0x34
   1b1a4:	63a3      	str	r3, [r4, #56]	; 0x38
	if (lifetime) {
   1b1a6:	b966      	cbnz	r6, 1b1c2 <net_if_ipv6_router_add+0x7a>
		router->is_default = false;
   1b1a8:	2300      	movs	r3, #0
   1b1aa:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
		router->is_infinite = true;
   1b1ae:	2301      	movs	r3, #1
   1b1b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   1b1b4:	2300      	movs	r3, #0
   1b1b6:	461a      	mov	r2, r3
   1b1b8:	4641      	mov	r1, r8
   1b1ba:	480c      	ldr	r0, [pc, #48]	; (1b1ec <net_if_ipv6_router_add+0xa4>)
   1b1bc:	f007 f984 	bl	224c8 <net_mgmt_event_notify_with_info>
		return &routers[i];
   1b1c0:	e7c9      	b.n	1b156 <net_if_ipv6_router_add+0xe>
		router->is_default = true;
   1b1c2:	2301      	movs	r3, #1
   1b1c4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
		router->is_infinite = false;
   1b1c8:	2300      	movs	r3, #0
   1b1ca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
		k_delayed_work_init(&router->lifetime, ipv6_router_expired);
   1b1ce:	4908      	ldr	r1, [pc, #32]	; (1b1f0 <net_if_ipv6_router_add+0xa8>)
   1b1d0:	4620      	mov	r0, r4
   1b1d2:	f00e f8b3 	bl	2933c <k_delayed_work_init>
   1b1d6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1b1da:	fb02 f206 	mul.w	r2, r2, r6
   1b1de:	4621      	mov	r1, r4
   1b1e0:	4804      	ldr	r0, [pc, #16]	; (1b1f4 <net_if_ipv6_router_add+0xac>)
   1b1e2:	f00e f923 	bl	2942c <k_delayed_work_submit_to_queue>
   1b1e6:	e7e5      	b.n	1b1b4 <net_if_ipv6_router_add+0x6c>
   1b1e8:	20001af4 	.word	0x20001af4
   1b1ec:	f0600009 	.word	0xf0600009
   1b1f0:	0001a5c5 	.word	0x0001a5c5
   1b1f4:	20002b08 	.word	0x20002b08

0001b1f8 <net_if_ipv6_router_rm>:

bool net_if_ipv6_router_rm(struct net_if_router *router)
{
   1b1f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int i;

	for (i = 0; i < CONFIG_NET_MAX_ROUTERS; i++) {
   1b1fc:	2400      	movs	r4, #0
   1b1fe:	2c00      	cmp	r4, #0
   1b200:	dd03      	ble.n	1b20a <net_if_ipv6_router_rm+0x12>
			i, net_sprint_ipv6_addr(&routers[i].address.in6_addr));

		return true;
	}

	return false;
   1b202:	2500      	movs	r5, #0
}
   1b204:	4628      	mov	r0, r5
   1b206:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!routers[i].is_used) {
   1b20a:	eb04 1304 	add.w	r3, r4, r4, lsl #4
   1b20e:	009a      	lsls	r2, r3, #2
   1b210:	4b0d      	ldr	r3, [pc, #52]	; (1b248 <net_if_ipv6_router_rm+0x50>)
   1b212:	4413      	add	r3, r2
   1b214:	f893 5040 	ldrb.w	r5, [r3, #64]	; 0x40
   1b218:	b11d      	cbz	r5, 1b222 <net_if_ipv6_router_rm+0x2a>
		if (&routers[i] != router) {
   1b21a:	4b0b      	ldr	r3, [pc, #44]	; (1b248 <net_if_ipv6_router_rm+0x50>)
   1b21c:	4413      	add	r3, r2
   1b21e:	4283      	cmp	r3, r0
   1b220:	d001      	beq.n	1b226 <net_if_ipv6_router_rm+0x2e>
	for (i = 0; i < CONFIG_NET_MAX_ROUTERS; i++) {
   1b222:	3401      	adds	r4, #1
   1b224:	e7eb      	b.n	1b1fe <net_if_ipv6_router_rm+0x6>
		k_delayed_work_cancel(&routers[i].lifetime);
   1b226:	f8df 8020 	ldr.w	r8, [pc, #32]	; 1b248 <net_if_ipv6_router_rm+0x50>
   1b22a:	4617      	mov	r7, r2
   1b22c:	4447      	add	r7, r8
   1b22e:	4638      	mov	r0, r7
   1b230:	f00e f8a2 	bl	29378 <k_delayed_work_cancel>
		routers[i].is_used = false;
   1b234:	2200      	movs	r2, #0
   1b236:	f887 2040 	strb.w	r2, [r7, #64]	; 0x40
   1b23a:	4613      	mov	r3, r2
   1b23c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   1b23e:	4803      	ldr	r0, [pc, #12]	; (1b24c <net_if_ipv6_router_rm+0x54>)
   1b240:	f007 f942 	bl	224c8 <net_mgmt_event_notify_with_info>
		return true;
   1b244:	e7de      	b.n	1b204 <net_if_ipv6_router_rm+0xc>
   1b246:	bf00      	nop
   1b248:	20001af4 	.word	0x20001af4
   1b24c:	f060000a 	.word	0xf060000a

0001b250 <net_if_ipv6_get_ll>:

struct in6_addr *net_if_ipv6_get_ll(struct net_if *iface,
				    enum net_addr_state addr_state)
{
   1b250:	b430      	push	{r4, r5}
   1b252:	4604      	mov	r4, r0
	int i;

	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1b254:	2300      	movs	r3, #0
   1b256:	e006      	b.n	1b266 <net_if_ipv6_get_ll+0x16>
		if (!iface->ipv6.unicast[i].is_used ||
		    (addr_state != NET_ADDR_ANY_STATE &&
		     iface->ipv6.unicast[i].addr_state != addr_state) ||
		    iface->ipv6.unicast[i].address.family != AF_INET6) {
   1b258:	226c      	movs	r2, #108	; 0x6c
   1b25a:	fb02 4203 	mla	r2, r2, r3, r4
   1b25e:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
		     iface->ipv6.unicast[i].addr_state != addr_state) ||
   1b260:	2a0a      	cmp	r2, #10
   1b262:	d014      	beq.n	1b28e <net_if_ipv6_get_ll+0x3e>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1b264:	3301      	adds	r3, #1
   1b266:	2b02      	cmp	r3, #2
   1b268:	dc1d      	bgt.n	1b2a6 <net_if_ipv6_get_ll+0x56>
		if (!iface->ipv6.unicast[i].is_used ||
   1b26a:	226c      	movs	r2, #108	; 0x6c
   1b26c:	fb02 4203 	mla	r2, r2, r3, r4
   1b270:	f892 2094 	ldrb.w	r2, [r2, #148]	; 0x94
   1b274:	2a00      	cmp	r2, #0
   1b276:	d0f5      	beq.n	1b264 <net_if_ipv6_get_ll+0x14>
   1b278:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   1b27c:	d0ec      	beq.n	1b258 <net_if_ipv6_get_ll+0x8>
		     iface->ipv6.unicast[i].addr_state != addr_state) ||
   1b27e:	226c      	movs	r2, #108	; 0x6c
   1b280:	fb02 4203 	mla	r2, r2, r3, r4
   1b284:	f992 2091 	ldrsb.w	r2, [r2, #145]	; 0x91
		    (addr_state != NET_ADDR_ANY_STATE &&
   1b288:	4291      	cmp	r1, r2
   1b28a:	d1eb      	bne.n	1b264 <net_if_ipv6_get_ll+0x14>
   1b28c:	e7e4      	b.n	1b258 <net_if_ipv6_get_ll+0x8>
			continue;
		}
		if (net_is_ipv6_ll_addr(&iface->ipv6.unicast[i].address.in6_addr)) {
   1b28e:	206c      	movs	r0, #108	; 0x6c
   1b290:	fb00 f003 	mul.w	r0, r0, r3
   1b294:	3020      	adds	r0, #32
   1b296:	4420      	add	r0, r4
	return UNALIGNED_GET(&addr->s6_addr16[0]) == htons(0xFE80);
   1b298:	f830 5f10 	ldrh.w	r5, [r0, #16]!
   1b29c:	f248 02fe 	movw	r2, #33022	; 0x80fe
   1b2a0:	4295      	cmp	r5, r2
   1b2a2:	d1df      	bne.n	1b264 <net_if_ipv6_get_ll+0x14>
   1b2a4:	e000      	b.n	1b2a8 <net_if_ipv6_get_ll+0x58>
			return &iface->ipv6.unicast[i].address.in6_addr;
		}
	}

	return NULL;
   1b2a6:	2000      	movs	r0, #0
}
   1b2a8:	bc30      	pop	{r4, r5}
   1b2aa:	4770      	bx	lr

0001b2ac <net_if_ipv6_select_src_addr>:
	return src;
}

const struct in6_addr *net_if_ipv6_select_src_addr(struct net_if *dst_iface,
						   struct in6_addr *dst)
{
   1b2ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1b2b0:	4607      	mov	r7, r0
   1b2b2:	880a      	ldrh	r2, [r1, #0]
	struct in6_addr *src = NULL;
	u8_t best_match = 0;
	struct net_if *iface;

	if (!net_is_ipv6_ll_addr(dst) && !net_is_ipv6_addr_mcast(dst)) {
   1b2b4:	f248 03fe 	movw	r3, #33022	; 0x80fe
   1b2b8:	429a      	cmp	r2, r3
   1b2ba:	f000 80d7 	beq.w	1b46c <net_if_ipv6_select_src_addr+0x1c0>
	return addr->s6_addr[0] == 0xFF;
   1b2be:	780b      	ldrb	r3, [r1, #0]
   1b2c0:	2bff      	cmp	r3, #255	; 0xff
   1b2c2:	d004      	beq.n	1b2ce <net_if_ipv6_select_src_addr+0x22>
	u8_t best_match = 0;
   1b2c4:	f04f 0900 	mov.w	r9, #0
   1b2c8:	4e74      	ldr	r6, [pc, #464]	; (1b49c <net_if_ipv6_select_src_addr+0x1f0>)
   1b2ca:	46c8      	mov	r8, r9
   1b2cc:	e05b      	b.n	1b386 <net_if_ipv6_select_src_addr+0xda>
   1b2ce:	4c73      	ldr	r4, [pc, #460]	; (1b49c <net_if_ipv6_select_src_addr+0x1f0>)
   1b2d0:	e0c0      	b.n	1b454 <net_if_ipv6_select_src_addr+0x1a8>
	    addr->address.family == AF_INET6 &&
   1b2d2:	246c      	movs	r4, #108	; 0x6c
   1b2d4:	fb04 640e 	mla	r4, r4, lr, r6
   1b2d8:	8da4      	ldrh	r4, [r4, #44]	; 0x2c
	if (addr->is_used && addr->addr_state == NET_ADDR_PREFERRED &&
   1b2da:	2c0a      	cmp	r4, #10
   1b2dc:	d01e      	beq.n	1b31c <net_if_ipv6_select_src_addr+0x70>
	return false;
   1b2de:	2300      	movs	r3, #0
		if (!is_proper_ipv6_address(&iface->ipv6.unicast[i])) {
   1b2e0:	bb8b      	cbnz	r3, 1b346 <net_if_ipv6_select_src_addr+0x9a>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1b2e2:	f10e 0e01 	add.w	lr, lr, #1
   1b2e6:	fa5f fe8e 	uxtb.w	lr, lr
   1b2ea:	f1be 0f02 	cmp.w	lr, #2
   1b2ee:	d846      	bhi.n	1b37e <net_if_ipv6_select_src_addr+0xd2>
		if (!is_proper_ipv6_address(&iface->ipv6.unicast[i])) {
   1b2f0:	46f4      	mov	ip, lr
   1b2f2:	236c      	movs	r3, #108	; 0x6c
   1b2f4:	fb03 f30e 	mul.w	r3, r3, lr
   1b2f8:	f103 0220 	add.w	r2, r3, #32
   1b2fc:	4432      	add	r2, r6
   1b2fe:	320c      	adds	r2, #12
	if (addr->is_used && addr->addr_state == NET_ADDR_PREFERRED &&
   1b300:	4433      	add	r3, r6
   1b302:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
   1b306:	2b00      	cmp	r3, #0
   1b308:	d0ea      	beq.n	1b2e0 <net_if_ipv6_select_src_addr+0x34>
   1b30a:	246c      	movs	r4, #108	; 0x6c
   1b30c:	fb04 640e 	mla	r4, r4, lr, r6
   1b310:	f994 4091 	ldrsb.w	r4, [r4, #145]	; 0x91
   1b314:	2c01      	cmp	r4, #1
   1b316:	d0dc      	beq.n	1b2d2 <net_if_ipv6_select_src_addr+0x26>
	return false;
   1b318:	2300      	movs	r3, #0
   1b31a:	e7e1      	b.n	1b2e0 <net_if_ipv6_select_src_addr+0x34>
	return UNALIGNED_GET(&addr->s6_addr16[0]) == htons(0xFE80);
   1b31c:	8894      	ldrh	r4, [r2, #4]
	    addr->address.family == AF_INET6 &&
   1b31e:	f248 02fe 	movw	r2, #33022	; 0x80fe
   1b322:	4294      	cmp	r4, r2
   1b324:	d1dc      	bne.n	1b2e0 <net_if_ipv6_select_src_addr+0x34>
	return false;
   1b326:	2300      	movs	r3, #0
   1b328:	e7da      	b.n	1b2e0 <net_if_ipv6_select_src_addr+0x34>
			xor = src->s6_addr[j] ^ dst->s6_addr[j];
   1b32a:	4055      	eors	r5, r2
			for (k = 0; k < 8; k++) {
   1b32c:	2300      	movs	r3, #0
   1b32e:	2b07      	cmp	r3, #7
   1b330:	d81b      	bhi.n	1b36a <net_if_ipv6_select_src_addr+0xbe>
				if (!(xor & 0x80)) {
   1b332:	f015 0f80 	tst.w	r5, #128	; 0x80
   1b336:	d118      	bne.n	1b36a <net_if_ipv6_select_src_addr+0xbe>
					len++;
   1b338:	3401      	adds	r4, #1
   1b33a:	b2e4      	uxtb	r4, r4
					xor <<= 1;
   1b33c:	006d      	lsls	r5, r5, #1
   1b33e:	b2ed      	uxtb	r5, r5
			for (k = 0; k < 8; k++) {
   1b340:	3301      	adds	r3, #1
   1b342:	b2db      	uxtb	r3, r3
   1b344:	e7f3      	b.n	1b32e <net_if_ipv6_select_src_addr+0x82>
		if (!is_proper_ipv6_address(&iface->ipv6.unicast[i])) {
   1b346:	2400      	movs	r4, #0
   1b348:	4623      	mov	r3, r4
	for (j = 0; j < 16; j++) {
   1b34a:	2b0f      	cmp	r3, #15
   1b34c:	d80d      	bhi.n	1b36a <net_if_ipv6_select_src_addr+0xbe>
		if (src->s6_addr[j] == dst->s6_addr[j]) {
   1b34e:	5ccd      	ldrb	r5, [r1, r3]
   1b350:	226c      	movs	r2, #108	; 0x6c
   1b352:	fb02 620c 	mla	r2, r2, ip, r6
   1b356:	441a      	add	r2, r3
   1b358:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
   1b35c:	4295      	cmp	r5, r2
   1b35e:	d1e4      	bne.n	1b32a <net_if_ipv6_select_src_addr+0x7e>
			len += 8;
   1b360:	3408      	adds	r4, #8
   1b362:	b2e4      	uxtb	r4, r4
	for (j = 0; j < 16; j++) {
   1b364:	3301      	adds	r3, #1
   1b366:	b2db      	uxtb	r3, r3
   1b368:	e7ef      	b.n	1b34a <net_if_ipv6_select_src_addr+0x9e>
		if (len >= *best_so_far) {
   1b36a:	454c      	cmp	r4, r9
   1b36c:	d3b9      	bcc.n	1b2e2 <net_if_ipv6_select_src_addr+0x36>
			src = &iface->ipv6.unicast[i].address.in6_addr;
   1b36e:	206c      	movs	r0, #108	; 0x6c
   1b370:	fb00 f00c 	mul.w	r0, r0, ip
   1b374:	3020      	adds	r0, #32
   1b376:	4430      	add	r0, r6
   1b378:	3010      	adds	r0, #16
			*best_so_far = len;
   1b37a:	46a1      	mov	r9, r4
   1b37c:	e7b1      	b.n	1b2e2 <net_if_ipv6_select_src_addr+0x36>
		     iface++) {
			struct in6_addr *addr;

			addr = net_if_ipv6_get_best_match(iface, dst,
							  &best_match);
			if (addr) {
   1b37e:	b150      	cbz	r0, 1b396 <net_if_ipv6_select_src_addr+0xea>
		     iface++) {
   1b380:	f506 7628 	add.w	r6, r6, #672	; 0x2a0
   1b384:	4680      	mov	r8, r0
		for (iface = __net_if_start;
   1b386:	b947      	cbnz	r7, 1b39a <net_if_ipv6_select_src_addr+0xee>
		     !dst_iface && iface != __net_if_end;
   1b388:	4b45      	ldr	r3, [pc, #276]	; (1b4a0 <net_if_ipv6_select_src_addr+0x1f4>)
   1b38a:	429e      	cmp	r6, r3
   1b38c:	d005      	beq.n	1b39a <net_if_ipv6_select_src_addr+0xee>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1b38e:	f04f 0e00 	mov.w	lr, #0
	struct in6_addr *src = NULL;
   1b392:	4670      	mov	r0, lr
   1b394:	e7a9      	b.n	1b2ea <net_if_ipv6_select_src_addr+0x3e>
			if (addr) {
   1b396:	4640      	mov	r0, r8
   1b398:	e7f2      	b.n	1b380 <net_if_ipv6_select_src_addr+0xd4>
				src = addr;
			}
		}

		/* If caller has supplied interface, then use that */
		if (dst_iface) {
   1b39a:	2f00      	cmp	r7, #0
   1b39c:	d073      	beq.n	1b486 <net_if_ipv6_select_src_addr+0x1da>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1b39e:	2500      	movs	r5, #0
	struct in6_addr *src = NULL;
   1b3a0:	46a8      	mov	r8, r5
   1b3a2:	e009      	b.n	1b3b8 <net_if_ipv6_select_src_addr+0x10c>
	    addr->address.family == AF_INET6 &&
   1b3a4:	206c      	movs	r0, #108	; 0x6c
   1b3a6:	fb00 7005 	mla	r0, r0, r5, r7
   1b3aa:	8d80      	ldrh	r0, [r0, #44]	; 0x2c
	if (addr->is_used && addr->addr_state == NET_ADDR_PREFERRED &&
   1b3ac:	280a      	cmp	r0, #10
   1b3ae:	d01b      	beq.n	1b3e8 <net_if_ipv6_select_src_addr+0x13c>
	return false;
   1b3b0:	2300      	movs	r3, #0
		if (!is_proper_ipv6_address(&iface->ipv6.unicast[i])) {
   1b3b2:	bb73      	cbnz	r3, 1b412 <net_if_ipv6_select_src_addr+0x166>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1b3b4:	3501      	adds	r5, #1
   1b3b6:	b2ed      	uxtb	r5, r5
   1b3b8:	2d02      	cmp	r5, #2
   1b3ba:	d864      	bhi.n	1b486 <net_if_ipv6_select_src_addr+0x1da>
		if (!is_proper_ipv6_address(&iface->ipv6.unicast[i])) {
   1b3bc:	462e      	mov	r6, r5
   1b3be:	236c      	movs	r3, #108	; 0x6c
   1b3c0:	fb03 f305 	mul.w	r3, r3, r5
   1b3c4:	f103 0220 	add.w	r2, r3, #32
   1b3c8:	443a      	add	r2, r7
   1b3ca:	320c      	adds	r2, #12
	if (addr->is_used && addr->addr_state == NET_ADDR_PREFERRED &&
   1b3cc:	443b      	add	r3, r7
   1b3ce:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
   1b3d2:	2b00      	cmp	r3, #0
   1b3d4:	d0ed      	beq.n	1b3b2 <net_if_ipv6_select_src_addr+0x106>
   1b3d6:	206c      	movs	r0, #108	; 0x6c
   1b3d8:	fb00 7005 	mla	r0, r0, r5, r7
   1b3dc:	f990 0091 	ldrsb.w	r0, [r0, #145]	; 0x91
   1b3e0:	2801      	cmp	r0, #1
   1b3e2:	d0df      	beq.n	1b3a4 <net_if_ipv6_select_src_addr+0xf8>
	return false;
   1b3e4:	2300      	movs	r3, #0
   1b3e6:	e7e4      	b.n	1b3b2 <net_if_ipv6_select_src_addr+0x106>
   1b3e8:	8890      	ldrh	r0, [r2, #4]
	    addr->address.family == AF_INET6 &&
   1b3ea:	f248 02fe 	movw	r2, #33022	; 0x80fe
   1b3ee:	4290      	cmp	r0, r2
   1b3f0:	d1df      	bne.n	1b3b2 <net_if_ipv6_select_src_addr+0x106>
	return false;
   1b3f2:	2300      	movs	r3, #0
   1b3f4:	e7dd      	b.n	1b3b2 <net_if_ipv6_select_src_addr+0x106>
			xor = src->s6_addr[j] ^ dst->s6_addr[j];
   1b3f6:	4054      	eors	r4, r2
			for (k = 0; k < 8; k++) {
   1b3f8:	2300      	movs	r3, #0
   1b3fa:	2b07      	cmp	r3, #7
   1b3fc:	d81b      	bhi.n	1b436 <net_if_ipv6_select_src_addr+0x18a>
				if (!(xor & 0x80)) {
   1b3fe:	f014 0f80 	tst.w	r4, #128	; 0x80
   1b402:	d118      	bne.n	1b436 <net_if_ipv6_select_src_addr+0x18a>
					len++;
   1b404:	3001      	adds	r0, #1
   1b406:	b2c0      	uxtb	r0, r0
					xor <<= 1;
   1b408:	0064      	lsls	r4, r4, #1
   1b40a:	b2e4      	uxtb	r4, r4
			for (k = 0; k < 8; k++) {
   1b40c:	3301      	adds	r3, #1
   1b40e:	b2db      	uxtb	r3, r3
   1b410:	e7f3      	b.n	1b3fa <net_if_ipv6_select_src_addr+0x14e>
		if (!is_proper_ipv6_address(&iface->ipv6.unicast[i])) {
   1b412:	2000      	movs	r0, #0
   1b414:	4603      	mov	r3, r0
	for (j = 0; j < 16; j++) {
   1b416:	2b0f      	cmp	r3, #15
   1b418:	d80d      	bhi.n	1b436 <net_if_ipv6_select_src_addr+0x18a>
		if (src->s6_addr[j] == dst->s6_addr[j]) {
   1b41a:	5ccc      	ldrb	r4, [r1, r3]
   1b41c:	226c      	movs	r2, #108	; 0x6c
   1b41e:	fb02 7206 	mla	r2, r2, r6, r7
   1b422:	441a      	add	r2, r3
   1b424:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
   1b428:	4294      	cmp	r4, r2
   1b42a:	d1e4      	bne.n	1b3f6 <net_if_ipv6_select_src_addr+0x14a>
			len += 8;
   1b42c:	3008      	adds	r0, #8
   1b42e:	b2c0      	uxtb	r0, r0
	for (j = 0; j < 16; j++) {
   1b430:	3301      	adds	r3, #1
   1b432:	b2db      	uxtb	r3, r3
   1b434:	e7ef      	b.n	1b416 <net_if_ipv6_select_src_addr+0x16a>
		if (len >= *best_so_far) {
   1b436:	4548      	cmp	r0, r9
   1b438:	d3bc      	bcc.n	1b3b4 <net_if_ipv6_select_src_addr+0x108>
			src = &iface->ipv6.unicast[i].address.in6_addr;
   1b43a:	f04f 086c 	mov.w	r8, #108	; 0x6c
   1b43e:	fb08 f806 	mul.w	r8, r8, r6
   1b442:	f108 0820 	add.w	r8, r8, #32
   1b446:	44b8      	add	r8, r7
   1b448:	f108 0810 	add.w	r8, r8, #16
			*best_so_far = len;
   1b44c:	4681      	mov	r9, r0
   1b44e:	e7b1      	b.n	1b3b4 <net_if_ipv6_select_src_addr+0x108>
		}

	} else {
		for (iface = __net_if_start;
		     !dst_iface && iface != __net_if_end;
		     iface++) {
   1b450:	f504 7428 	add.w	r4, r4, #672	; 0x2a0
		for (iface = __net_if_start;
   1b454:	b97f      	cbnz	r7, 1b476 <net_if_ipv6_select_src_addr+0x1ca>
		     !dst_iface && iface != __net_if_end;
   1b456:	4b12      	ldr	r3, [pc, #72]	; (1b4a0 <net_if_ipv6_select_src_addr+0x1f4>)
   1b458:	429c      	cmp	r4, r3
   1b45a:	d009      	beq.n	1b470 <net_if_ipv6_select_src_addr+0x1c4>
			struct in6_addr *addr;

			addr = net_if_ipv6_get_ll(iface, NET_ADDR_PREFERRED);
   1b45c:	2101      	movs	r1, #1
   1b45e:	4620      	mov	r0, r4
   1b460:	f7ff fef6 	bl	1b250 <net_if_ipv6_get_ll>
			if (addr) {
   1b464:	4680      	mov	r8, r0
   1b466:	2800      	cmp	r0, #0
   1b468:	d0f2      	beq.n	1b450 <net_if_ipv6_select_src_addr+0x1a4>
   1b46a:	e006      	b.n	1b47a <net_if_ipv6_select_src_addr+0x1ce>
   1b46c:	4c0b      	ldr	r4, [pc, #44]	; (1b49c <net_if_ipv6_select_src_addr+0x1f0>)
   1b46e:	e7f1      	b.n	1b454 <net_if_ipv6_select_src_addr+0x1a8>
	struct in6_addr *src = NULL;
   1b470:	f04f 0800 	mov.w	r8, #0
   1b474:	e001      	b.n	1b47a <net_if_ipv6_select_src_addr+0x1ce>
   1b476:	f04f 0800 	mov.w	r8, #0
				src = addr;
				break;
			}
		}

		if (dst_iface) {
   1b47a:	b127      	cbz	r7, 1b486 <net_if_ipv6_select_src_addr+0x1da>
			src = net_if_ipv6_get_ll(dst_iface, NET_ADDR_PREFERRED);
   1b47c:	2101      	movs	r1, #1
   1b47e:	4638      	mov	r0, r7
   1b480:	f7ff fee6 	bl	1b250 <net_if_ipv6_get_ll>
   1b484:	4680      	mov	r8, r0
		}
	}

	if (!src) {
   1b486:	f1b8 0f00 	cmp.w	r8, #0
   1b48a:	d002      	beq.n	1b492 <net_if_ipv6_select_src_addr+0x1e6>
		return net_ipv6_unspecified_address();
	}

	return src;
   1b48c:	4640      	mov	r0, r8
}
   1b48e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return net_ipv6_unspecified_address();
   1b492:	f003 fd67 	bl	1ef64 <net_ipv6_unspecified_address>
   1b496:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1b49a:	bf00      	nop
   1b49c:	2000d160 	.word	0x2000d160
   1b4a0:	2000d400 	.word	0x2000d400

0001b4a4 <net_if_ipv6_calc_reachable_time>:

u32_t net_if_ipv6_calc_reachable_time(struct net_if *iface)
{
   1b4a4:	b510      	push	{r4, lr}
   1b4a6:	4604      	mov	r4, r0
	return MIN_RANDOM_FACTOR * iface->ipv6.base_reachable_time +
		sys_rand32_get() %
   1b4a8:	f7e6 fdb4 	bl	2014 <sys_rand32_get>
		(MAX_RANDOM_FACTOR * iface->ipv6.base_reachable_time -
   1b4ac:	f8d4 3288 	ldr.w	r3, [r4, #648]	; 0x288
	return MIN_RANDOM_FACTOR * iface->ipv6.base_reachable_time +
   1b4b0:	fbb0 f2f3 	udiv	r2, r0, r3
		 MIN_RANDOM_FACTOR * iface->ipv6.base_reachable_time);
}
   1b4b4:	fb03 0012 	mls	r0, r3, r2, r0
   1b4b8:	bd10      	pop	{r4, pc}
	...

0001b4bc <net_if_call_link_cb>:
	sys_slist_find_and_remove(&link_callbacks, &link->node);
}

void net_if_call_link_cb(struct net_if *iface, struct net_linkaddr *lladdr,
			 int status)
{
   1b4bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b4be:	4605      	mov	r5, r0
   1b4c0:	460e      	mov	r6, r1
   1b4c2:	4617      	mov	r7, r2
	return list->head;
   1b4c4:	4b11      	ldr	r3, [pc, #68]	; (1b50c <net_if_call_link_cb+0x50>)
   1b4c6:	681b      	ldr	r3, [r3, #0]
	struct net_if_link_cb *link, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&link_callbacks, link, tmp, node) {
   1b4c8:	b11b      	cbz	r3, 1b4d2 <net_if_call_link_cb+0x16>
   1b4ca:	461c      	mov	r4, r3
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   1b4cc:	b143      	cbz	r3, 1b4e0 <net_if_call_link_cb+0x24>
	return node->next;
   1b4ce:	681c      	ldr	r4, [r3, #0]
   1b4d0:	e006      	b.n	1b4e0 <net_if_call_link_cb+0x24>
   1b4d2:	461c      	mov	r4, r3
   1b4d4:	e004      	b.n	1b4e0 <net_if_call_link_cb+0x24>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   1b4d6:	4623      	mov	r3, r4
   1b4d8:	e00e      	b.n	1b4f8 <net_if_call_link_cb+0x3c>
   1b4da:	4622      	mov	r2, r4
   1b4dc:	4623      	mov	r3, r4
   1b4de:	4614      	mov	r4, r2
   1b4e0:	b193      	cbz	r3, 1b508 <net_if_call_link_cb+0x4c>
		link->cb(iface, lladdr, status);
   1b4e2:	685b      	ldr	r3, [r3, #4]
   1b4e4:	463a      	mov	r2, r7
   1b4e6:	4631      	mov	r1, r6
   1b4e8:	4628      	mov	r0, r5
   1b4ea:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&link_callbacks, link, tmp, node) {
   1b4ec:	2c00      	cmp	r4, #0
   1b4ee:	d0f4      	beq.n	1b4da <net_if_call_link_cb+0x1e>
   1b4f0:	4622      	mov	r2, r4
   1b4f2:	2c00      	cmp	r4, #0
   1b4f4:	d0ef      	beq.n	1b4d6 <net_if_call_link_cb+0x1a>
	return node->next;
   1b4f6:	6823      	ldr	r3, [r4, #0]
   1b4f8:	b113      	cbz	r3, 1b500 <net_if_call_link_cb+0x44>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   1b4fa:	b11a      	cbz	r2, 1b504 <net_if_call_link_cb+0x48>
	return node->next;
   1b4fc:	6822      	ldr	r2, [r4, #0]
   1b4fe:	e7ed      	b.n	1b4dc <net_if_call_link_cb+0x20>
   1b500:	2200      	movs	r2, #0
   1b502:	e7eb      	b.n	1b4dc <net_if_call_link_cb+0x20>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   1b504:	2200      	movs	r2, #0
   1b506:	e7e9      	b.n	1b4dc <net_if_call_link_cb+0x20>
	}
}
   1b508:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b50a:	bf00      	nop
   1b50c:	20001ae4 	.word	0x20001ae4

0001b510 <net_if_send_data>:
{
   1b510:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b514:	4606      	mov	r6, r0
   1b516:	460c      	mov	r4, r1
	return pkt->context;
   1b518:	68cf      	ldr	r7, [r1, #12]
	return &pkt->lladdr_src;
}

static inline struct net_linkaddr *net_pkt_ll_dst(struct net_pkt *pkt)
{
	return &pkt->lladdr_dst;
   1b51a:	f101 0928 	add.w	r9, r1, #40	; 0x28
	return pkt->token;
   1b51e:	f8d1 a010 	ldr.w	sl, [r1, #16]
   1b522:	f3bf 8f5b 	dmb	ish
   1b526:	68c3      	ldr	r3, [r0, #12]
   1b528:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(iface->flags, NET_IF_UP)) {
   1b52c:	f013 0f01 	tst.w	r3, #1
   1b530:	d10a      	bne.n	1b548 <net_if_send_data+0x38>
		status = -ENETDOWN;
   1b532:	f06f 0872 	mvn.w	r8, #114	; 0x72
		verdict = NET_DROP;
   1b536:	2502      	movs	r5, #2
	if (context && verdict == NET_DROP) {
   1b538:	b10f      	cbz	r7, 1b53e <net_if_send_data+0x2e>
   1b53a:	2d02      	cmp	r5, #2
   1b53c:	d02e      	beq.n	1b59c <net_if_send_data+0x8c>
	if (verdict == NET_DROP && dst->addr) {
   1b53e:	2d02      	cmp	r5, #2
   1b540:	d050      	beq.n	1b5e4 <net_if_send_data+0xd4>
}
   1b542:	4628      	mov	r0, r5
   1b544:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b548:	f3bf 8f5b 	dmb	ish
   1b54c:	68c3      	ldr	r3, [r0, #12]
   1b54e:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(iface->flags, NET_IF_POINTOPOINT) &&
   1b552:	f013 0f02 	tst.w	r3, #2
   1b556:	d101      	bne.n	1b55c <net_if_send_data+0x4c>
	    !net_pkt_ll_src(pkt)->addr) {
   1b558:	6a0b      	ldr	r3, [r1, #32]
	if (!atomic_test_bit(iface->flags, NET_IF_POINTOPOINT) &&
   1b55a:	b173      	cbz	r3, 1b57a <net_if_send_data+0x6a>
	return pkt->family;
   1b55c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   1b560:	f3c3 03c3 	ubfx	r3, r3, #3, #4
	if (net_pkt_family(pkt) == AF_INET6) {
   1b564:	2b0a      	cmp	r3, #10
   1b566:	d00f      	beq.n	1b588 <net_if_send_data+0x78>
   1b568:	4621      	mov	r1, r4
	verdict = iface->l2->send(iface, pkt);
   1b56a:	6873      	ldr	r3, [r6, #4]
   1b56c:	685b      	ldr	r3, [r3, #4]
   1b56e:	4630      	mov	r0, r6
   1b570:	4798      	blx	r3
   1b572:	4605      	mov	r5, r0
	int status = -EIO;
   1b574:	f06f 0804 	mvn.w	r8, #4
   1b578:	e7de      	b.n	1b538 <net_if_send_data+0x28>
	return net_if_get_link_addr(pkt->iface);
   1b57a:	694b      	ldr	r3, [r1, #20]
		net_pkt_ll_src(pkt)->addr = net_pkt_ll_if(pkt)->addr;
   1b57c:	691a      	ldr	r2, [r3, #16]
   1b57e:	620a      	str	r2, [r1, #32]
		net_pkt_ll_src(pkt)->len = net_pkt_ll_if(pkt)->len;
   1b580:	7d1b      	ldrb	r3, [r3, #20]
   1b582:	f881 3024 	strb.w	r3, [r1, #36]	; 0x24
   1b586:	e7e9      	b.n	1b55c <net_if_send_data+0x4c>
		pkt = net_ipv6_prepare_for_send(pkt);
   1b588:	4620      	mov	r0, r4
   1b58a:	f005 f9fb 	bl	20984 <net_ipv6_prepare_for_send>
		if (!pkt) {
   1b58e:	4601      	mov	r1, r0
   1b590:	2800      	cmp	r0, #0
   1b592:	d1ea      	bne.n	1b56a <net_if_send_data+0x5a>
	int status = -EIO;
   1b594:	f06f 0804 	mvn.w	r8, #4
			verdict = NET_CONTINUE;
   1b598:	2501      	movs	r5, #1
   1b59a:	e7cd      	b.n	1b538 <net_if_send_data+0x28>
	if (!context) {
   1b59c:	2f00      	cmp	r7, #0
   1b59e:	d0ce      	beq.n	1b53e <net_if_send_data+0x2e>
	if (context->send_cb) {
   1b5a0:	f8d7 b034 	ldr.w	fp, [r7, #52]	; 0x34
   1b5a4:	f1bb 0f00 	cmp.w	fp, #0
   1b5a8:	d004      	beq.n	1b5b4 <net_if_send_data+0xa4>
		context->send_cb(context, status, token, context->user_data);
   1b5aa:	683b      	ldr	r3, [r7, #0]
   1b5ac:	4652      	mov	r2, sl
   1b5ae:	4641      	mov	r1, r8
   1b5b0:	4638      	mov	r0, r7
   1b5b2:	47d8      	blx	fp
static inline
enum net_ip_protocol net_context_get_ip_proto(struct net_context *context)
{
	NET_ASSERT(context);

	if (context->flags & NET_CONTEXT_PROTO) {
   1b5b4:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
   1b5b8:	f013 0f40 	tst.w	r3, #64	; 0x40
   1b5bc:	d009      	beq.n	1b5d2 <net_if_send_data+0xc2>
		return IPPROTO_TCP;
   1b5be:	2306      	movs	r3, #6
	if (net_context_get_ip_proto(context) == IPPROTO_UDP) {
   1b5c0:	2b11      	cmp	r3, #17
   1b5c2:	d008      	beq.n	1b5d6 <net_if_send_data+0xc6>
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
   1b5c4:	2b06      	cmp	r3, #6
   1b5c6:	d1ba      	bne.n	1b53e <net_if_send_data+0x2e>
	net_stats.tcp.resent += bytes;
}

static inline void net_stats_update_tcp_seg_sent(void)
{
	net_stats.tcp.sent++;
   1b5c8:	4a0b      	ldr	r2, [pc, #44]	; (1b5f8 <net_if_send_data+0xe8>)
   1b5ca:	6d93      	ldr	r3, [r2, #88]	; 0x58
   1b5cc:	3301      	adds	r3, #1
   1b5ce:	6593      	str	r3, [r2, #88]	; 0x58
   1b5d0:	e7b5      	b.n	1b53e <net_if_send_data+0x2e>
	}

	return IPPROTO_UDP;
   1b5d2:	2311      	movs	r3, #17
   1b5d4:	e7f4      	b.n	1b5c0 <net_if_send_data+0xb0>
	net_stats.udp.sent++;
   1b5d6:	4a08      	ldr	r2, [pc, #32]	; (1b5f8 <net_if_send_data+0xe8>)
   1b5d8:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
   1b5dc:	3301      	adds	r3, #1
   1b5de:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
   1b5e2:	e7ac      	b.n	1b53e <net_if_send_data+0x2e>
	if (verdict == NET_DROP && dst->addr) {
   1b5e4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1b5e6:	2b00      	cmp	r3, #0
   1b5e8:	d0ab      	beq.n	1b542 <net_if_send_data+0x32>
		net_if_call_link_cb(iface, dst, status);
   1b5ea:	4642      	mov	r2, r8
   1b5ec:	4649      	mov	r1, r9
   1b5ee:	4630      	mov	r0, r6
   1b5f0:	f7ff ff64 	bl	1b4bc <net_if_call_link_cb>
   1b5f4:	e7a5      	b.n	1b542 <net_if_send_data+0x32>
   1b5f6:	bf00      	nop
   1b5f8:	200029e8 	.word	0x200029e8

0001b5fc <net_if_tx>:
{
   1b5fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1b600:	4606      	mov	r6, r0
	const struct net_if_api *api = iface->dev->driver_api;
   1b602:	f850 3b18 	ldr.w	r3, [r0], #24
   1b606:	f8d3 9004 	ldr.w	r9, [r3, #4]
	pkt = k_fifo_get(&iface->tx_queue, K_NO_WAIT);
   1b60a:	2100      	movs	r1, #0
   1b60c:	f00c fd56 	bl	280bc <k_queue_get>
	if (!pkt) {
   1b610:	2800      	cmp	r0, #0
   1b612:	d062      	beq.n	1b6da <net_if_tx+0xde>
   1b614:	4605      	mov	r5, r0
	return &pkt->lladdr_dst;
   1b616:	f100 0828 	add.w	r8, r0, #40	; 0x28
	return pkt->context;
   1b61a:	68c7      	ldr	r7, [r0, #12]
	return pkt->token;
   1b61c:	f8d0 a010 	ldr.w	sl, [r0, #16]
   1b620:	f3bf 8f5b 	dmb	ish
   1b624:	68f3      	ldr	r3, [r6, #12]
   1b626:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(iface->flags, NET_IF_UP)) {
   1b62a:	f013 0f01 	tst.w	r3, #1
   1b62e:	d039      	beq.n	1b6a4 <net_if_tx+0xa8>
	return net_buf_frags_len(pkt->frags);
   1b630:	6883      	ldr	r3, [r0, #8]
	size_t bytes = 0;
   1b632:	2400      	movs	r4, #0
   1b634:	e002      	b.n	1b63c <net_if_tx+0x40>
		bytes += buf->len;
   1b636:	899a      	ldrh	r2, [r3, #12]
   1b638:	4414      	add	r4, r2
		buf = buf->frags;
   1b63a:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   1b63c:	2b00      	cmp	r3, #0
   1b63e:	d1fa      	bne.n	1b636 <net_if_tx+0x3a>
	pkt->sent_or_eof = sent;
   1b640:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
	pkt->pkt_queued = send;
   1b644:	f043 0301 	orr.w	r3, r3, #1
   1b648:	f36f 0341 	bfc	r3, #1, #1
   1b64c:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
		status = api->send(iface, pkt);
   1b650:	f8d9 3004 	ldr.w	r3, [r9, #4]
   1b654:	4629      	mov	r1, r5
   1b656:	4630      	mov	r0, r6
   1b658:	4798      	blx	r3
   1b65a:	4681      	mov	r9, r0
	if (status < 0) {
   1b65c:	f1b9 0f00 	cmp.w	r9, #0
   1b660:	db23      	blt.n	1b6aa <net_if_tx+0xae>
	net_stats.bytes.sent += bytes;
   1b662:	4a21      	ldr	r2, [pc, #132]	; (1b6e8 <net_if_tx+0xec>)
   1b664:	6853      	ldr	r3, [r2, #4]
   1b666:	441c      	add	r4, r3
   1b668:	6054      	str	r4, [r2, #4]
	if (context) {
   1b66a:	b18f      	cbz	r7, 1b690 <net_if_tx+0x94>
	if (!context) {
   1b66c:	b187      	cbz	r7, 1b690 <net_if_tx+0x94>
	if (context->send_cb) {
   1b66e:	6b7c      	ldr	r4, [r7, #52]	; 0x34
   1b670:	b124      	cbz	r4, 1b67c <net_if_tx+0x80>
		context->send_cb(context, status, token, context->user_data);
   1b672:	683b      	ldr	r3, [r7, #0]
   1b674:	4652      	mov	r2, sl
   1b676:	4649      	mov	r1, r9
   1b678:	4638      	mov	r0, r7
   1b67a:	47a0      	blx	r4
	if (context->flags & NET_CONTEXT_PROTO) {
   1b67c:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
   1b680:	f013 0f40 	tst.w	r3, #64	; 0x40
   1b684:	d01b      	beq.n	1b6be <net_if_tx+0xc2>
		return IPPROTO_TCP;
   1b686:	2306      	movs	r3, #6
	if (net_context_get_ip_proto(context) == IPPROTO_UDP) {
   1b688:	2b11      	cmp	r3, #17
   1b68a:	d01a      	beq.n	1b6c2 <net_if_tx+0xc6>
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
   1b68c:	2b06      	cmp	r3, #6
   1b68e:	d01f      	beq.n	1b6d0 <net_if_tx+0xd4>
	if (dst->addr) {
   1b690:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1b692:	b32b      	cbz	r3, 1b6e0 <net_if_tx+0xe4>
		net_if_call_link_cb(iface, dst, status);
   1b694:	464a      	mov	r2, r9
   1b696:	4641      	mov	r1, r8
   1b698:	4630      	mov	r0, r6
   1b69a:	f7ff ff0f 	bl	1b4bc <net_if_call_link_cb>
	return true;
   1b69e:	2001      	movs	r0, #1
   1b6a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		status = -ENETDOWN;
   1b6a4:	f06f 0972 	mvn.w	r9, #114	; 0x72
   1b6a8:	e7d8      	b.n	1b65c <net_if_tx+0x60>
	pkt->sent_or_eof = sent;
   1b6aa:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
   1b6ae:	f36f 0300 	bfc	r3, #0, #1
   1b6b2:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
		net_pkt_unref(pkt);
   1b6b6:	4628      	mov	r0, r5
   1b6b8:	f001 fa93 	bl	1cbe2 <net_pkt_unref>
   1b6bc:	e7d5      	b.n	1b66a <net_if_tx+0x6e>
	return IPPROTO_UDP;
   1b6be:	2311      	movs	r3, #17
   1b6c0:	e7e2      	b.n	1b688 <net_if_tx+0x8c>
	net_stats.udp.sent++;
   1b6c2:	4a09      	ldr	r2, [pc, #36]	; (1b6e8 <net_if_tx+0xec>)
   1b6c4:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
   1b6c8:	3301      	adds	r3, #1
   1b6ca:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
   1b6ce:	e7df      	b.n	1b690 <net_if_tx+0x94>
	net_stats.tcp.sent++;
   1b6d0:	4a05      	ldr	r2, [pc, #20]	; (1b6e8 <net_if_tx+0xec>)
   1b6d2:	6d93      	ldr	r3, [r2, #88]	; 0x58
   1b6d4:	3301      	adds	r3, #1
   1b6d6:	6593      	str	r3, [r2, #88]	; 0x58
   1b6d8:	e7da      	b.n	1b690 <net_if_tx+0x94>
		return false;
   1b6da:	2000      	movs	r0, #0
   1b6dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return true;
   1b6e0:	2001      	movs	r0, #1
}
   1b6e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1b6e6:	bf00      	nop
   1b6e8:	200029e8 	.word	0x200029e8

0001b6ec <net_if_flush_tx>:
	return (!list->head);
   1b6ec:	6983      	ldr	r3, [r0, #24]
	if (k_fifo_is_empty(&iface->tx_queue)) {
   1b6ee:	b14b      	cbz	r3, 1b704 <net_if_flush_tx+0x18>
{
   1b6f0:	b510      	push	{r4, lr}
   1b6f2:	4604      	mov	r4, r0
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
   1b6f4:	f00c fef8 	bl	284e8 <_impl_k_yield>
		if (!net_if_tx(iface)) {
   1b6f8:	4620      	mov	r0, r4
   1b6fa:	f7ff ff7f 	bl	1b5fc <net_if_tx>
   1b6fe:	2800      	cmp	r0, #0
   1b700:	d1fa      	bne.n	1b6f8 <net_if_flush_tx+0xc>
   1b702:	bd10      	pop	{r4, pc}
   1b704:	4770      	bx	lr

0001b706 <net_if_process_events>:
{
   1b706:	b538      	push	{r3, r4, r5, lr}
   1b708:	4604      	mov	r4, r0
   1b70a:	460d      	mov	r5, r1
	for (; ev_count; event++, ev_count--) {
   1b70c:	e001      	b.n	1b712 <net_if_process_events+0xc>
   1b70e:	3414      	adds	r4, #20
   1b710:	3d01      	subs	r5, #1
   1b712:	b145      	cbz	r5, 1b726 <net_if_process_events+0x20>
		switch (event->state) {
   1b714:	7b63      	ldrb	r3, [r4, #13]
   1b716:	091b      	lsrs	r3, r3, #4
   1b718:	2b04      	cmp	r3, #4
   1b71a:	d1f8      	bne.n	1b70e <net_if_process_events+0x8>
			iface = CONTAINER_OF(event->fifo, struct net_if,
   1b71c:	6920      	ldr	r0, [r4, #16]
			net_if_tx(iface);
   1b71e:	3818      	subs	r0, #24
   1b720:	f7ff ff6c 	bl	1b5fc <net_if_tx>
			break;
   1b724:	e7f3      	b.n	1b70e <net_if_process_events+0x8>
}
   1b726:	bd38      	pop	{r3, r4, r5, pc}

0001b728 <net_if_tx_thread>:
{
   1b728:	b538      	push	{r3, r4, r5, lr}
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   1b72a:	f00d f836 	bl	2879a <_impl_k_sem_give>
		ev_count = net_if_prepare_events();
   1b72e:	f7ff f849 	bl	1a7c4 <net_if_prepare_events>
   1b732:	4605      	mov	r5, r0
		ret = k_poll(__net_if_event_start, ev_count, K_FOREVER);
   1b734:	4c06      	ldr	r4, [pc, #24]	; (1b750 <net_if_tx_thread+0x28>)
   1b736:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1b73a:	4601      	mov	r1, r0
   1b73c:	4620      	mov	r0, r4
   1b73e:	f00c f98b 	bl	27a58 <k_poll>
		net_if_process_events(__net_if_event_start, ev_count);
   1b742:	4629      	mov	r1, r5
   1b744:	4620      	mov	r0, r4
   1b746:	f7ff ffde 	bl	1b706 <net_if_process_events>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
   1b74a:	f00c fecd 	bl	284e8 <_impl_k_yield>
   1b74e:	e7ee      	b.n	1b72e <net_if_tx_thread+0x6>
   1b750:	2000d400 	.word	0x2000d400

0001b754 <net_if_get_by_index>:

struct net_if *net_if_get_by_index(u8_t index)
{
	if (&__net_if_start[index] >= __net_if_end) {
   1b754:	4a05      	ldr	r2, [pc, #20]	; (1b76c <net_if_get_by_index+0x18>)
   1b756:	f44f 7328 	mov.w	r3, #672	; 0x2a0
   1b75a:	fb03 2000 	mla	r0, r3, r0, r2
   1b75e:	4b04      	ldr	r3, [pc, #16]	; (1b770 <net_if_get_by_index+0x1c>)
   1b760:	4298      	cmp	r0, r3
   1b762:	d200      	bcs.n	1b766 <net_if_get_by_index+0x12>
		NET_DBG("Index %d is too large", index);
		return NULL;
	}

	return &__net_if_start[index];
}
   1b764:	4770      	bx	lr
		return NULL;
   1b766:	2000      	movs	r0, #0
   1b768:	e7fc      	b.n	1b764 <net_if_get_by_index+0x10>
   1b76a:	bf00      	nop
   1b76c:	2000d160 	.word	0x2000d160
   1b770:	2000d400 	.word	0x2000d400

0001b774 <net_if_get_by_iface>:

u8_t net_if_get_by_iface(struct net_if *iface)
{
	NET_ASSERT(iface >= __net_if_start && iface < __net_if_end);

	return iface - __net_if_start;
   1b774:	4b03      	ldr	r3, [pc, #12]	; (1b784 <net_if_get_by_iface+0x10>)
   1b776:	1ac0      	subs	r0, r0, r3
   1b778:	1140      	asrs	r0, r0, #5
   1b77a:	4b03      	ldr	r3, [pc, #12]	; (1b788 <net_if_get_by_iface+0x14>)
   1b77c:	fb03 f000 	mul.w	r0, r3, r0
}
   1b780:	b2c0      	uxtb	r0, r0
   1b782:	4770      	bx	lr
   1b784:	2000d160 	.word	0x2000d160
   1b788:	3cf3cf3d 	.word	0x3cf3cf3d

0001b78c <net_if_foreach>:

void net_if_foreach(net_if_cb_t cb, void *user_data)
{
   1b78c:	b570      	push	{r4, r5, r6, lr}
   1b78e:	4606      	mov	r6, r0
   1b790:	460d      	mov	r5, r1
	struct net_if *iface;

	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1b792:	4c05      	ldr	r4, [pc, #20]	; (1b7a8 <net_if_foreach+0x1c>)
   1b794:	e004      	b.n	1b7a0 <net_if_foreach+0x14>
		cb(iface, user_data);
   1b796:	4629      	mov	r1, r5
   1b798:	4620      	mov	r0, r4
   1b79a:	47b0      	blx	r6
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1b79c:	f504 7428 	add.w	r4, r4, #672	; 0x2a0
   1b7a0:	4b02      	ldr	r3, [pc, #8]	; (1b7ac <net_if_foreach+0x20>)
   1b7a2:	429c      	cmp	r4, r3
   1b7a4:	d1f7      	bne.n	1b796 <net_if_foreach+0xa>
	}
}
   1b7a6:	bd70      	pop	{r4, r5, r6, pc}
   1b7a8:	2000d160 	.word	0x2000d160
   1b7ac:	2000d400 	.word	0x2000d400

0001b7b0 <net_if_up>:

int net_if_up(struct net_if *iface)
{
   1b7b0:	b570      	push	{r4, r5, r6, lr}
   1b7b2:	f3bf 8f5b 	dmb	ish
   1b7b6:	68c5      	ldr	r5, [r0, #12]
   1b7b8:	f3bf 8f5b 	dmb	ish
	int status;

	NET_DBG("iface %p", iface);

	if (atomic_test_bit(iface->flags, NET_IF_UP)) {
   1b7bc:	f015 0501 	ands.w	r5, r5, #1
   1b7c0:	d123      	bne.n	1b80a <net_if_up+0x5a>
   1b7c2:	f100 060c 	add.w	r6, r0, #12
   1b7c6:	4604      	mov	r4, r0
		return 0;
	}

	/* If the L2 does not support enable just set the flag */
	if (!iface->l2->enable) {
   1b7c8:	6843      	ldr	r3, [r0, #4]
   1b7ca:	68db      	ldr	r3, [r3, #12]
   1b7cc:	b11b      	cbz	r3, 1b7d6 <net_if_up+0x26>
		goto done;
	}

	/* Notify L2 to enable the interface */
	status = iface->l2->enable(iface, true);
   1b7ce:	2101      	movs	r1, #1
   1b7d0:	4798      	blx	r3
	if (status < 0) {
   1b7d2:	2800      	cmp	r0, #0
   1b7d4:	db1b      	blt.n	1b80e <net_if_up+0x5e>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1b7d6:	f3bf 8f5b 	dmb	ish
   1b7da:	e856 3f00 	ldrex	r3, [r6]
   1b7de:	f043 0301 	orr.w	r3, r3, #1
   1b7e2:	e846 3200 	strex	r2, r3, [r6]
   1b7e6:	2a00      	cmp	r2, #0
   1b7e8:	d1f7      	bne.n	1b7da <net_if_up+0x2a>
   1b7ea:	f3bf 8f5b 	dmb	ish
done:
	atomic_set_bit(iface->flags, NET_IF_UP);

#if defined(CONFIG_NET_IPV6_DAD)
	NET_DBG("Starting DAD for iface %p", iface);
	net_if_start_dad(iface);
   1b7ee:	4620      	mov	r0, r4
   1b7f0:	f7ff f91e 	bl	1aa30 <net_if_start_dad>
	join_mcast_solicit_node(iface, &iface->ipv6.mcast[0].address.in6_addr);
#endif

#if defined(CONFIG_NET_IPV6_ND)
	NET_DBG("Starting ND/RS for iface %p", iface);
	net_if_start_rs(iface);
   1b7f4:	4620      	mov	r0, r4
   1b7f6:	f7ff f821 	bl	1a83c <net_if_start_rs>
   1b7fa:	2300      	movs	r3, #0
   1b7fc:	461a      	mov	r2, r3
   1b7fe:	4621      	mov	r1, r4
   1b800:	4804      	ldr	r0, [pc, #16]	; (1b814 <net_if_up+0x64>)
   1b802:	f006 fe61 	bl	224c8 <net_mgmt_event_notify_with_info>
#endif

	net_mgmt_event_notify(NET_EVENT_IF_UP, iface);

	return 0;
}
   1b806:	4628      	mov	r0, r5
   1b808:	bd70      	pop	{r4, r5, r6, pc}
		return 0;
   1b80a:	2500      	movs	r5, #0
   1b80c:	e7fb      	b.n	1b806 <net_if_up+0x56>
		return status;
   1b80e:	4605      	mov	r5, r0
   1b810:	e7f9      	b.n	1b806 <net_if_up+0x56>
   1b812:	bf00      	nop
   1b814:	d0010002 	.word	0xd0010002

0001b818 <net_if_down>:

int net_if_down(struct net_if *iface)
{
   1b818:	b510      	push	{r4, lr}
   1b81a:	4604      	mov	r4, r0
	int status;

	NET_DBG("iface %p", iface);

	leave_mcast_all(iface);
   1b81c:	f7fe ffaf 	bl	1a77e <leave_mcast_all>

	net_if_flush_tx(iface);
   1b820:	4620      	mov	r0, r4
   1b822:	f7ff ff63 	bl	1b6ec <net_if_flush_tx>

	/* If the L2 does not support enable just clear the flag */
	if (!iface->l2->enable) {
   1b826:	6863      	ldr	r3, [r4, #4]
   1b828:	68db      	ldr	r3, [r3, #12]
   1b82a:	b123      	cbz	r3, 1b836 <net_if_down+0x1e>
		goto done;
	}

	/* Notify L2 to disable the interface */
	status = iface->l2->enable(iface, false);
   1b82c:	2100      	movs	r1, #0
   1b82e:	4620      	mov	r0, r4
   1b830:	4798      	blx	r3
	if (status < 0) {
   1b832:	2800      	cmp	r0, #0
   1b834:	db14      	blt.n	1b860 <net_if_down+0x48>
		return status;
	}

done:
	atomic_clear_bit(iface->flags, NET_IF_UP);
   1b836:	f104 030c 	add.w	r3, r4, #12
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1b83a:	f3bf 8f5b 	dmb	ish
   1b83e:	e853 2f00 	ldrex	r2, [r3]
   1b842:	f022 0201 	bic.w	r2, r2, #1
   1b846:	e843 2100 	strex	r1, r2, [r3]
   1b84a:	2900      	cmp	r1, #0
   1b84c:	d1f7      	bne.n	1b83e <net_if_down+0x26>
   1b84e:	f3bf 8f5b 	dmb	ish
   1b852:	2300      	movs	r3, #0
   1b854:	461a      	mov	r2, r3
   1b856:	4621      	mov	r1, r4
   1b858:	4802      	ldr	r0, [pc, #8]	; (1b864 <net_if_down+0x4c>)
   1b85a:	f006 fe35 	bl	224c8 <net_mgmt_event_notify_with_info>

	net_mgmt_event_notify(NET_EVENT_IF_DOWN, iface);

	return 0;
   1b85e:	2000      	movs	r0, #0
}
   1b860:	bd10      	pop	{r4, pc}
   1b862:	bf00      	nop
   1b864:	d0010001 	.word	0xd0010001

0001b868 <net_if_init>:

void net_if_init(struct k_sem *startup_sync)
{
   1b868:	b570      	push	{r4, r5, r6, lr}
   1b86a:	b086      	sub	sp, #24
   1b86c:	4606      	mov	r6, r0
	struct net_if *iface;

	NET_DBG("");

	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1b86e:	4c1b      	ldr	r4, [pc, #108]	; (1b8dc <net_if_init+0x74>)
   1b870:	e01b      	b.n	1b8aa <net_if_init+0x42>
	const struct net_if_api *api = iface->dev->driver_api;
   1b872:	4620      	mov	r0, r4
   1b874:	f850 3b18 	ldr.w	r3, [r0], #24
   1b878:	685d      	ldr	r5, [r3, #4]
	k_fifo_init(&iface->tx_queue);
   1b87a:	f00c fbc4 	bl	28006 <k_queue_init>
	api->init(iface);
   1b87e:	682b      	ldr	r3, [r5, #0]
   1b880:	4620      	mov	r0, r4
   1b882:	4798      	blx	r3
#if defined(CONFIG_NET_IPV4)
		iface->ipv4.ttl = CONFIG_NET_INITIAL_TTL;
#endif

#if defined(CONFIG_NET_IPV6)
		iface->ipv6.hop_limit = CONFIG_NET_INITIAL_HOP_LIMIT;
   1b884:	2340      	movs	r3, #64	; 0x40
   1b886:	f884 3294 	strb.w	r3, [r4, #660]	; 0x294
		iface->ipv6.base_reachable_time = REACHABLE_TIME;
   1b88a:	f247 5330 	movw	r3, #30000	; 0x7530
   1b88e:	f8c4 3288 	str.w	r3, [r4, #648]	; 0x288
 *
 * @param iface Network interface
 */
static inline void net_if_ipv6_set_reachable_time(struct net_if *iface)
{
	iface->ipv6.reachable_time = net_if_ipv6_calc_reachable_time(iface);
   1b892:	4620      	mov	r0, r4
   1b894:	f7ff fe06 	bl	1b4a4 <net_if_ipv6_calc_reachable_time>
   1b898:	f8c4 028c 	str.w	r0, [r4, #652]	; 0x28c

		net_if_ipv6_set_reachable_time(iface);

#if defined(CONFIG_NET_IPV6_ND)
		k_delayed_work_init(&iface->ipv6.rs_timer, rs_timeout);
   1b89c:	4910      	ldr	r1, [pc, #64]	; (1b8e0 <net_if_init+0x78>)
   1b89e:	f504 7018 	add.w	r0, r4, #608	; 0x260
   1b8a2:	f00d fd4b 	bl	2933c <k_delayed_work_init>
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1b8a6:	f504 7428 	add.w	r4, r4, #672	; 0x2a0
   1b8aa:	4b0e      	ldr	r3, [pc, #56]	; (1b8e4 <net_if_init+0x7c>)
   1b8ac:	429c      	cmp	r4, r3
   1b8ae:	d1e0      	bne.n	1b872 <net_if_init+0xa>
#endif
#endif
	}

	if (iface == __net_if_start) {
   1b8b0:	4b0a      	ldr	r3, [pc, #40]	; (1b8dc <net_if_init+0x74>)
   1b8b2:	429c      	cmp	r4, r3
   1b8b4:	d010      	beq.n	1b8d8 <net_if_init+0x70>
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay);
   1b8b6:	2300      	movs	r3, #0
   1b8b8:	9305      	str	r3, [sp, #20]
   1b8ba:	2201      	movs	r2, #1
   1b8bc:	9204      	str	r2, [sp, #16]
   1b8be:	f06f 0208 	mvn.w	r2, #8
   1b8c2:	9203      	str	r2, [sp, #12]
   1b8c4:	9302      	str	r3, [sp, #8]
   1b8c6:	9301      	str	r3, [sp, #4]
   1b8c8:	9600      	str	r6, [sp, #0]
   1b8ca:	4b07      	ldr	r3, [pc, #28]	; (1b8e8 <net_if_init+0x80>)
   1b8cc:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
   1b8d0:	4906      	ldr	r1, [pc, #24]	; (1b8ec <net_if_init+0x84>)
   1b8d2:	4807      	ldr	r0, [pc, #28]	; (1b8f0 <net_if_init+0x88>)
   1b8d4:	f00d f9e0 	bl	28c98 <_impl_k_thread_create>
	k_thread_create(&tx_thread_data, tx_stack,
			K_THREAD_STACK_SIZEOF(tx_stack),
			(k_thread_entry_t)net_if_tx_thread,
			startup_sync, NULL, NULL, K_PRIO_COOP(7),
			K_ESSENTIAL, K_NO_WAIT);
}
   1b8d8:	b006      	add	sp, #24
   1b8da:	bd70      	pop	{r4, r5, r6, pc}
   1b8dc:	2000d160 	.word	0x2000d160
   1b8e0:	0001a85d 	.word	0x0001a85d
   1b8e4:	2000d400 	.word	0x2000d400
   1b8e8:	0001b729 	.word	0x0001b729
   1b8ec:	20004cd0 	.word	0x20004cd0
   1b8f0:	20000324 	.word	0x20000324

0001b8f4 <net_if_post_init>:

void net_if_post_init(void)
{
   1b8f4:	b510      	push	{r4, lr}
	struct net_if *iface;

	NET_DBG("");

	/* After TX is running, attempt to bring the interface up */
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1b8f6:	4c05      	ldr	r4, [pc, #20]	; (1b90c <net_if_post_init+0x18>)
   1b8f8:	e004      	b.n	1b904 <net_if_post_init+0x10>
		net_if_up(iface);
   1b8fa:	4620      	mov	r0, r4
   1b8fc:	f7ff ff58 	bl	1b7b0 <net_if_up>
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1b900:	f504 7428 	add.w	r4, r4, #672	; 0x2a0
   1b904:	4b02      	ldr	r3, [pc, #8]	; (1b910 <net_if_post_init+0x1c>)
   1b906:	429c      	cmp	r4, r3
   1b908:	d1f7      	bne.n	1b8fa <net_if_post_init+0x6>

	/* RPL init must be done after the network interface is up
	 * as the RPL code wants to add multicast address to interface.
	 */
	net_rpl_init();
}
   1b90a:	bd10      	pop	{r4, pc}
   1b90c:	2000d160 	.word	0x2000d160
   1b910:	2000d400 	.word	0x2000d400

0001b914 <check_used_port>:

static int check_used_port(enum net_ip_protocol ip_proto,
			   u16_t local_port,
			   const struct sockaddr *local_addr)

{
   1b914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b916:	4605      	mov	r5, r0
   1b918:	460e      	mov	r6, r1
   1b91a:	4617      	mov	r7, r2
	int i;

	for (i = 0; i < NET_MAX_CONTEXT; i++) {
   1b91c:	2400      	movs	r4, #0
   1b91e:	e003      	b.n	1b928 <check_used_port+0x14>
   1b920:	2311      	movs	r3, #17
		if (!net_context_is_used(&contexts[i])) {
			continue;
		}

		if (!(net_context_get_ip_proto(&contexts[i]) == ip_proto &&
   1b922:	42ab      	cmp	r3, r5
   1b924:	d010      	beq.n	1b948 <check_used_port+0x34>
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
   1b926:	3401      	adds	r4, #1
   1b928:	2c05      	cmp	r4, #5
   1b92a:	dc2b      	bgt.n	1b984 <check_used_port+0x70>
	return context->flags & NET_CONTEXT_IN_USE;
   1b92c:	2368      	movs	r3, #104	; 0x68
   1b92e:	4a16      	ldr	r2, [pc, #88]	; (1b988 <check_used_port+0x74>)
   1b930:	fb03 2304 	mla	r3, r3, r4, r2
   1b934:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
		if (!net_context_is_used(&contexts[i])) {
   1b938:	f013 0f01 	tst.w	r3, #1
   1b93c:	d0f3      	beq.n	1b926 <check_used_port+0x12>
	if (context->flags & NET_CONTEXT_PROTO) {
   1b93e:	f013 0f40 	tst.w	r3, #64	; 0x40
   1b942:	d0ed      	beq.n	1b920 <check_used_port+0xc>
		return IPPROTO_TCP;
   1b944:	2306      	movs	r3, #6
   1b946:	e7ec      	b.n	1b922 <check_used_port+0xe>
		      net_sin((struct sockaddr *)&
   1b948:	2368      	movs	r3, #104	; 0x68
   1b94a:	fb03 f304 	mul.w	r3, r3, r4
   1b94e:	3308      	adds	r3, #8
   1b950:	4a0d      	ldr	r2, [pc, #52]	; (1b988 <check_used_port+0x74>)
   1b952:	4413      	add	r3, r2
			      contexts[i].local)->sin_port == local_port)) {
   1b954:	885a      	ldrh	r2, [r3, #2]
		if (!(net_context_get_ip_proto(&contexts[i]) == ip_proto &&
   1b956:	42b2      	cmp	r2, r6
   1b958:	d1e5      	bne.n	1b926 <check_used_port+0x12>
			continue;
		}

		if (local_addr->sa_family == AF_INET6) {
   1b95a:	883a      	ldrh	r2, [r7, #0]
   1b95c:	2a0a      	cmp	r2, #10
   1b95e:	d007      	beq.n	1b970 <check_used_port+0x5c>
				      local_addr)->sin6_addr)) {
				return -EEXIST;
			}
		} else {
			if (net_ipv4_addr_cmp(
				    net_sin_ptr(&contexts[i].local)->
   1b960:	685b      	ldr	r3, [r3, #4]
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
   1b962:	681a      	ldr	r2, [r3, #0]
   1b964:	687b      	ldr	r3, [r7, #4]
			if (net_ipv4_addr_cmp(
   1b966:	429a      	cmp	r2, r3
   1b968:	d1dd      	bne.n	1b926 <check_used_port+0x12>
							      sin_addr,
				    &((struct sockaddr_in *)
				      local_addr)->sin_addr)) {
				return -EEXIST;
   1b96a:	f06f 0010 	mvn.w	r0, #16
			}
		}
	}

	return 0;
}
   1b96e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   1b970:	2210      	movs	r2, #16
   1b972:	1d39      	adds	r1, r7, #4
   1b974:	6858      	ldr	r0, [r3, #4]
   1b976:	f00e fff1 	bl	2a95c <memcmp>
			if (net_ipv6_addr_cmp(
   1b97a:	2800      	cmp	r0, #0
   1b97c:	d1d3      	bne.n	1b926 <check_used_port+0x12>
				return -EEXIST;
   1b97e:	f06f 0010 	mvn.w	r0, #16
   1b982:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return 0;
   1b984:	2000      	movs	r0, #0
   1b986:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b988:	20001b38 	.word	0x20001b38

0001b98c <find_available_port>:

static u16_t find_available_port(struct net_context *context,
				    const struct sockaddr *addr)
{
   1b98c:	b570      	push	{r4, r5, r6, lr}
   1b98e:	4606      	mov	r6, r0
   1b990:	460d      	mov	r5, r1
	if (!net_sin(addr)->sin_port) {
   1b992:	884c      	ldrh	r4, [r1, #2]
   1b994:	b16c      	cbz	r4, 1b9b2 <find_available_port+0x26>

		return htons(local_port);
	}

	return net_sin(addr)->sin_port;
}
   1b996:	4620      	mov	r0, r4
   1b998:	bd70      	pop	{r4, r5, r6, pc}
	return IPPROTO_UDP;
   1b99a:	2011      	movs	r0, #17
				 htons(local_port), addr) == -EEXIST);
   1b99c:	0a1c      	lsrs	r4, r3, #8
   1b99e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
		} while (check_used_port(
   1b9a2:	b29c      	uxth	r4, r3
   1b9a4:	462a      	mov	r2, r5
   1b9a6:	4621      	mov	r1, r4
   1b9a8:	f7ff ffb4 	bl	1b914 <check_used_port>
				 htons(local_port), addr) == -EEXIST);
   1b9ac:	f110 0f11 	cmn.w	r0, #17
   1b9b0:	d1f1      	bne.n	1b996 <find_available_port+0xa>
			local_port = sys_rand32_get() | 0x8000;
   1b9b2:	f7e6 fb2f 	bl	2014 <sys_rand32_get>
   1b9b6:	ea6f 4040 	mvn.w	r0, r0, lsl #17
   1b9ba:	ea6f 4050 	mvn.w	r0, r0, lsr #17
   1b9be:	b283      	uxth	r3, r0
	if (context->flags & NET_CONTEXT_PROTO) {
   1b9c0:	f896 205d 	ldrb.w	r2, [r6, #93]	; 0x5d
   1b9c4:	f012 0f40 	tst.w	r2, #64	; 0x40
   1b9c8:	d0e7      	beq.n	1b99a <find_available_port+0xe>
		return IPPROTO_TCP;
   1b9ca:	2006      	movs	r0, #6
   1b9cc:	e7e6      	b.n	1b99c <find_available_port+0x10>

0001b9ce <queue_fin>:
	return ret;
}

#if defined(CONFIG_NET_TCP)
static void queue_fin(struct net_context *ctx)
{
   1b9ce:	b500      	push	{lr}
   1b9d0:	b087      	sub	sp, #28
   1b9d2:	4603      	mov	r3, r0
	struct net_pkt *pkt = NULL;
   1b9d4:	2200      	movs	r2, #0
   1b9d6:	a906      	add	r1, sp, #24
   1b9d8:	f841 2d04 	str.w	r2, [r1, #-4]!
	int ret;

	ret = net_tcp_prepare_segment(ctx->tcp, NET_TCP_FIN, NULL, 0,
   1b9dc:	6e00      	ldr	r0, [r0, #96]	; 0x60
				      NULL, &ctx->remote, &pkt);
   1b9de:	3314      	adds	r3, #20
	ret = net_tcp_prepare_segment(ctx->tcp, NET_TCP_FIN, NULL, 0,
   1b9e0:	9102      	str	r1, [sp, #8]
   1b9e2:	9301      	str	r3, [sp, #4]
   1b9e4:	9200      	str	r2, [sp, #0]
   1b9e6:	4613      	mov	r3, r2
   1b9e8:	2101      	movs	r1, #1
   1b9ea:	f007 f9dd 	bl	22da8 <net_tcp_prepare_segment>
	if (ret || !pkt) {
   1b9ee:	b928      	cbnz	r0, 1b9fc <queue_fin+0x2e>
   1b9f0:	9805      	ldr	r0, [sp, #20]
   1b9f2:	b118      	cbz	r0, 1b9fc <queue_fin+0x2e>
		return;
	}

	ret = net_tcp_send_pkt(pkt);
   1b9f4:	f007 fcdc 	bl	233b0 <net_tcp_send_pkt>
	if (ret < 0) {
   1b9f8:	2800      	cmp	r0, #0
   1b9fa:	db02      	blt.n	1ba02 <queue_fin+0x34>
		net_pkt_unref(pkt);
	}
}
   1b9fc:	b007      	add	sp, #28
   1b9fe:	f85d fb04 	ldr.w	pc, [sp], #4
		net_pkt_unref(pkt);
   1ba02:	9805      	ldr	r0, [sp, #20]
   1ba04:	f001 f8ed 	bl	1cbe2 <net_pkt_unref>
   1ba08:	e7f8      	b.n	1b9fc <queue_fin+0x2e>

0001ba0a <tcp_hdr_len>:

	return ret;
}

static int tcp_hdr_len(struct net_pkt *pkt)
{
   1ba0a:	b500      	push	{lr}
   1ba0c:	b087      	sub	sp, #28
	struct net_tcp_hdr hdr, *tcp_hdr;

	/* "Offset": 4-bit field in high nibble, units of dwords */
	tcp_hdr = net_tcp_get_hdr(pkt, &hdr);
   1ba0e:	a901      	add	r1, sp, #4
   1ba10:	f007 fb1c 	bl	2304c <net_tcp_get_hdr>
	if (tcp_hdr) {
   1ba14:	b128      	cbz	r0, 1ba22 <tcp_hdr_len+0x18>
		return 4 * (tcp_hdr->offset >> 4);
   1ba16:	7b00      	ldrb	r0, [r0, #12]
   1ba18:	0900      	lsrs	r0, r0, #4
   1ba1a:	0080      	lsls	r0, r0, #2
	}

	return 0;
}
   1ba1c:	b007      	add	sp, #28
   1ba1e:	f85d fb04 	ldr.w	pc, [sp], #4
	return 0;
   1ba22:	2000      	movs	r0, #0
   1ba24:	e7fa      	b.n	1ba1c <tcp_hdr_len+0x12>

0001ba26 <set_appdata_values>:

	return sendto(pkt, dst_addr, addrlen, cb, timeout, token, user_data);
}

static void set_appdata_values(struct net_pkt *pkt, enum net_ip_protocol proto)
{
   1ba26:	b570      	push	{r4, r5, r6, lr}
   1ba28:	b082      	sub	sp, #8
   1ba2a:	4605      	mov	r5, r0
	return net_buf_frags_len(pkt->frags);
   1ba2c:	6883      	ldr	r3, [r0, #8]
	size_t bytes = 0;
   1ba2e:	2400      	movs	r4, #0
   1ba30:	e002      	b.n	1ba38 <set_appdata_values+0x12>
		bytes += buf->len;
   1ba32:	899a      	ldrh	r2, [r3, #12]
   1ba34:	4414      	add	r4, r2
		buf = buf->frags;
   1ba36:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   1ba38:	2b00      	cmp	r3, #0
   1ba3a:	d1fa      	bne.n	1ba32 <set_appdata_values+0xc>
	u16_t proto_len = 0;
	struct net_buf *frag;
	u16_t offset;

#if defined(CONFIG_NET_UDP)
	if (proto == IPPROTO_UDP) {
   1ba3c:	2911      	cmp	r1, #17
   1ba3e:	d020      	beq.n	1ba82 <set_appdata_values+0x5c>
	u16_t proto_len = 0;
   1ba40:	2600      	movs	r6, #0
		proto_len = sizeof(struct net_udp_hdr);
	}
#endif /* CONFIG_NET_UDP */

#if defined(CONFIG_NET_TCP)
	if (proto == IPPROTO_TCP) {
   1ba42:	2906      	cmp	r1, #6
   1ba44:	d01f      	beq.n	1ba86 <set_appdata_values+0x60>
		proto_len = tcp_hdr_len(pkt);
	}
#endif /* CONFIG_NET_TCP */

	frag = net_frag_get_pos(pkt, net_pkt_ip_hdr_len(pkt) +
   1ba46:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
				net_pkt_ipv6_ext_len(pkt) +
   1ba4a:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
	frag = net_frag_get_pos(pkt, net_pkt_ip_hdr_len(pkt) +
   1ba4e:	4419      	add	r1, r3
   1ba50:	4431      	add	r1, r6
   1ba52:	f10d 0206 	add.w	r2, sp, #6
   1ba56:	b289      	uxth	r1, r1
   1ba58:	4628      	mov	r0, r5
   1ba5a:	f001 fb91 	bl	1d180 <net_frag_get_pos>
				proto_len,
				&offset);
	if (frag) {
   1ba5e:	b120      	cbz	r0, 1ba6a <set_appdata_values+0x44>
		net_pkt_set_appdata(pkt, frag->data + offset);
   1ba60:	6883      	ldr	r3, [r0, #8]
   1ba62:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   1ba66:	4413      	add	r3, r2
	pkt->appdata = data;
   1ba68:	61ab      	str	r3, [r5, #24]
	}

	net_pkt_set_appdatalen(pkt, total_len - net_pkt_ip_hdr_len(pkt) -
   1ba6a:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
   1ba6e:	1ae3      	subs	r3, r4, r3
   1ba70:	b29b      	uxth	r3, r3
			       net_pkt_ipv6_ext_len(pkt) - proto_len);
   1ba72:	f895 403b 	ldrb.w	r4, [r5, #59]	; 0x3b
	net_pkt_set_appdatalen(pkt, total_len - net_pkt_ip_hdr_len(pkt) -
   1ba76:	1b1b      	subs	r3, r3, r4
   1ba78:	b29b      	uxth	r3, r3
   1ba7a:	1b9b      	subs	r3, r3, r6
	pkt->appdatalen = len;
   1ba7c:	862b      	strh	r3, [r5, #48]	; 0x30

	NET_ASSERT_INFO(net_pkt_appdatalen(pkt) < total_len,
			"Wrong appdatalen %u, total %zu",
			net_pkt_appdatalen(pkt), total_len);
}
   1ba7e:	b002      	add	sp, #8
   1ba80:	bd70      	pop	{r4, r5, r6, pc}
		proto_len = sizeof(struct net_udp_hdr);
   1ba82:	2608      	movs	r6, #8
   1ba84:	e7dd      	b.n	1ba42 <set_appdata_values+0x1c>
		proto_len = tcp_hdr_len(pkt);
   1ba86:	4628      	mov	r0, r5
   1ba88:	f7ff ffbf 	bl	1ba0a <tcp_hdr_len>
   1ba8c:	b286      	uxth	r6, r0
   1ba8e:	e7da      	b.n	1ba46 <set_appdata_values+0x20>

0001ba90 <packet_received>:

static enum net_verdict packet_received(struct net_conn *conn,
					struct net_pkt *pkt,
					void *user_data)
{
   1ba90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ba92:	460d      	mov	r5, r1
   1ba94:	4616      	mov	r6, r2
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
   1ba96:	2300      	movs	r3, #0
   1ba98:	e000      	b.n	1ba9c <packet_received+0xc>
   1ba9a:	3301      	adds	r3, #1
   1ba9c:	2b05      	cmp	r3, #5
   1ba9e:	dc12      	bgt.n	1bac6 <packet_received+0x36>
	return context->flags & NET_CONTEXT_IN_USE;
   1baa0:	2268      	movs	r2, #104	; 0x68
   1baa2:	4926      	ldr	r1, [pc, #152]	; (1bb3c <packet_received+0xac>)
   1baa4:	fb02 1203 	mla	r2, r2, r3, r1
   1baa8:	f892 205d 	ldrb.w	r2, [r2, #93]	; 0x5d
		if (!net_context_is_used(&contexts[i])) {
   1baac:	f012 0f01 	tst.w	r2, #1
   1bab0:	d0f3      	beq.n	1ba9a <packet_received+0xa>
		if (contexts[i].conn_handler == conn_handler) {
   1bab2:	2268      	movs	r2, #104	; 0x68
   1bab4:	fb02 1203 	mla	r2, r2, r3, r1
   1bab8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
   1baba:	4290      	cmp	r0, r2
   1babc:	d1ed      	bne.n	1ba9a <packet_received+0xa>
			return &contexts[i];
   1babe:	2268      	movs	r2, #104	; 0x68
   1bac0:	fb02 1403 	mla	r4, r2, r3, r1
   1bac4:	e000      	b.n	1bac8 <packet_received+0x38>
	return NULL;
   1bac6:	2400      	movs	r4, #0
static inline void net_context_set_iface(struct net_context *context,
					 struct net_if *iface)
{
	NET_ASSERT(iface);

	context->iface = net_if_get_by_iface(iface);
   1bac8:	6968      	ldr	r0, [r5, #20]
   1baca:	f7ff fe53 	bl	1b774 <net_if_get_by_iface>
   1bace:	f884 005c 	strb.w	r0, [r4, #92]	; 0x5c
	pkt->context = ctx;
   1bad2:	60ec      	str	r4, [r5, #12]

	/* If there is no callback registered, then we can only drop
	 * the packet.
	 */

	if (!context->recv_cb) {
   1bad4:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1bad6:	b373      	cbz	r3, 1bb36 <packet_received+0xa6>
	if (context->flags & NET_CONTEXT_PROTO) {
   1bad8:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
   1badc:	f013 0f40 	tst.w	r3, #64	; 0x40
   1bae0:	d017      	beq.n	1bb12 <packet_received+0x82>
		return IPPROTO_TCP;
   1bae2:	2206      	movs	r2, #6
		return NET_DROP;
	}

	if (net_context_get_ip_proto(context) != IPPROTO_TCP) {
   1bae4:	2a06      	cmp	r2, #6
   1bae6:	d016      	beq.n	1bb16 <packet_received+0x86>
		/* TCP packets get appdata earlier in tcp_established(). */
		set_appdata_values(pkt, IPPROTO_UDP);
   1bae8:	2111      	movs	r1, #17
   1baea:	4628      	mov	r0, r5
   1baec:	f7ff ff9b 	bl	1ba26 <set_appdata_values>
	return pkt->appdatalen;
   1baf0:	8e29      	ldrh	r1, [r5, #48]	; 0x30
	net_stats.tcp.bytes.received += bytes;
   1baf2:	4a13      	ldr	r2, [pc, #76]	; (1bb40 <packet_received+0xb0>)
   1baf4:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
   1baf6:	440b      	add	r3, r1
   1baf8:	64d3      	str	r3, [r2, #76]	; 0x4c
		net_pkt_appdata(pkt), net_pkt_appdatalen(pkt),
		net_pkt_get_len(pkt));

	net_stats_update_tcp_recv(net_pkt_appdatalen(pkt));

	context->recv_cb(context, pkt, 0, user_data);
   1bafa:	6b27      	ldr	r7, [r4, #48]	; 0x30
   1bafc:	4633      	mov	r3, r6
   1bafe:	2200      	movs	r2, #0
   1bb00:	4629      	mov	r1, r5
   1bb02:	4620      	mov	r0, r4
   1bb04:	47b8      	blx	r7
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   1bb06:	f104 0044 	add.w	r0, r4, #68	; 0x44
   1bb0a:	f00c fe46 	bl	2879a <_impl_k_sem_give>

#if defined(CONFIG_NET_CONTEXT_SYNC_RECV)
	k_sem_give(&context->recv_data_wait);
#endif /* CONFIG_NET_CONTEXT_SYNC_RECV */

	return NET_OK;
   1bb0e:	2000      	movs	r0, #0
   1bb10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return IPPROTO_UDP;
   1bb12:	2211      	movs	r2, #17
   1bb14:	e7e6      	b.n	1bae4 <packet_received+0x54>
	if (context->flags & NET_CONTEXT_TYPE) {
   1bb16:	f013 0f20 	tst.w	r3, #32
   1bb1a:	d00a      	beq.n	1bb32 <packet_received+0xa2>
		return SOCK_STREAM;
   1bb1c:	2301      	movs	r3, #1
	else if (net_context_get_type(context) == SOCK_STREAM) {
   1bb1e:	2b01      	cmp	r3, #1
   1bb20:	d1e6      	bne.n	1baf0 <packet_received+0x60>
   1bb22:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
		if (net_pkt_appdatalen(pkt) == 0) {
   1bb24:	2b00      	cmp	r3, #0
   1bb26:	d1e3      	bne.n	1baf0 <packet_received+0x60>
			net_pkt_unref(pkt);
   1bb28:	4628      	mov	r0, r5
   1bb2a:	f001 f85a 	bl	1cbe2 <net_pkt_unref>
			return NET_OK;
   1bb2e:	2000      	movs	r0, #0
   1bb30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return SOCK_DGRAM;
   1bb32:	2302      	movs	r3, #2
   1bb34:	e7f3      	b.n	1bb1e <packet_received+0x8e>
		return NET_DROP;
   1bb36:	2002      	movs	r0, #2
}
   1bb38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1bb3a:	bf00      	nop
   1bb3c:	20001b38 	.word	0x20001b38
   1bb40:	200029e8 	.word	0x200029e8

0001bb44 <send_reset>:
{
   1bb44:	b510      	push	{r4, lr}
   1bb46:	b082      	sub	sp, #8
	struct net_pkt *pkt = NULL;
   1bb48:	aa02      	add	r2, sp, #8
   1bb4a:	2300      	movs	r3, #0
   1bb4c:	f842 3d04 	str.w	r3, [r2, #-4]!
	ret = net_tcp_prepare_reset(context->tcp, remote, &pkt);
   1bb50:	6e00      	ldr	r0, [r0, #96]	; 0x60
   1bb52:	f007 f85a 	bl	22c0a <net_tcp_prepare_reset>
	if (ret || !pkt) {
   1bb56:	4604      	mov	r4, r0
   1bb58:	b928      	cbnz	r0, 1bb66 <send_reset+0x22>
   1bb5a:	9801      	ldr	r0, [sp, #4]
   1bb5c:	b118      	cbz	r0, 1bb66 <send_reset+0x22>
	ret = net_send_data(pkt);
   1bb5e:	f7fe fc3f 	bl	1a3e0 <net_send_data>
	if (ret < 0) {
   1bb62:	1e04      	subs	r4, r0, #0
   1bb64:	db02      	blt.n	1bb6c <send_reset+0x28>
}
   1bb66:	4620      	mov	r0, r4
   1bb68:	b002      	add	sp, #8
   1bb6a:	bd10      	pop	{r4, pc}
		net_pkt_unref(pkt);
   1bb6c:	9801      	ldr	r0, [sp, #4]
   1bb6e:	f001 f838 	bl	1cbe2 <net_pkt_unref>
   1bb72:	e7f8      	b.n	1bb66 <send_reset+0x22>

0001bb74 <send_ack>:
{
   1bb74:	b510      	push	{r4, lr}
   1bb76:	b082      	sub	sp, #8
	struct net_pkt *pkt = NULL;
   1bb78:	2300      	movs	r3, #0
   1bb7a:	9301      	str	r3, [sp, #4]
	if (!force && context->tcp->send_ack == context->tcp->sent_ack) {
   1bb7c:	b932      	cbnz	r2, 1bb8c <send_ack+0x18>
   1bb7e:	6e03      	ldr	r3, [r0, #96]	; 0x60
   1bb80:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
   1bb84:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
   1bb88:	429a      	cmp	r2, r3
   1bb8a:	d011      	beq.n	1bbb0 <send_ack+0x3c>
	ret = net_tcp_prepare_ack(context->tcp, remote, &pkt);
   1bb8c:	aa01      	add	r2, sp, #4
   1bb8e:	6e00      	ldr	r0, [r0, #96]	; 0x60
   1bb90:	f007 f99c 	bl	22ecc <net_tcp_prepare_ack>
	if (ret) {
   1bb94:	4604      	mov	r4, r0
   1bb96:	b110      	cbz	r0, 1bb9e <send_ack+0x2a>
}
   1bb98:	4620      	mov	r0, r4
   1bb9a:	b002      	add	sp, #8
   1bb9c:	bd10      	pop	{r4, pc}
	ret = net_tcp_send_pkt(pkt);
   1bb9e:	9801      	ldr	r0, [sp, #4]
   1bba0:	f007 fc06 	bl	233b0 <net_tcp_send_pkt>
	if (ret < 0) {
   1bba4:	1e04      	subs	r4, r0, #0
   1bba6:	daf7      	bge.n	1bb98 <send_ack+0x24>
		net_pkt_unref(pkt);
   1bba8:	9801      	ldr	r0, [sp, #4]
   1bbaa:	f001 f81a 	bl	1cbe2 <net_pkt_unref>
   1bbae:	e7f3      	b.n	1bb98 <send_ack+0x24>
		return 0;
   1bbb0:	2400      	movs	r4, #0
   1bbb2:	e7f1      	b.n	1bb98 <send_ack+0x24>

0001bbb4 <_tcp_synack_received>:
	switch (net_tcp_get_state(context->tcp)) {
   1bbb4:	6e13      	ldr	r3, [r2, #96]	; 0x60
 *
 * @param tcp TCP context
 */
static inline enum net_tcp_state net_tcp_get_state(const struct net_tcp *tcp)
{
	return (enum net_tcp_state)tcp->state;
   1bbb6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
   1bbba:	f3c3 3343 	ubfx	r3, r3, #13, #4
   1bbbe:	2b02      	cmp	r3, #2
   1bbc0:	d001      	beq.n	1bbc6 <_tcp_synack_received+0x12>
}
   1bbc2:	2002      	movs	r0, #2
   1bbc4:	4770      	bx	lr
{
   1bbc6:	b5f0      	push	{r4, r5, r6, r7, lr}
   1bbc8:	b09f      	sub	sp, #124	; 0x7c
   1bbca:	4615      	mov	r5, r2
   1bbcc:	460c      	mov	r4, r1
	context->iface = net_if_get_by_iface(iface);
   1bbce:	6948      	ldr	r0, [r1, #20]
   1bbd0:	f7ff fdd0 	bl	1b774 <net_if_get_by_iface>
   1bbd4:	f885 005c 	strb.w	r0, [r5, #92]	; 0x5c
	pkt->context = ctx;
   1bbd8:	60e5      	str	r5, [r4, #12]
	tcp_hdr = net_tcp_get_hdr(pkt, &hdr);
   1bbda:	a911      	add	r1, sp, #68	; 0x44
   1bbdc:	4620      	mov	r0, r4
   1bbde:	f007 fa35 	bl	2304c <net_tcp_get_hdr>
	if (!tcp_hdr) {
   1bbe2:	4606      	mov	r6, r0
   1bbe4:	b1f8      	cbz	r0, 1bc26 <_tcp_synack_received+0x72>
	if (NET_TCP_FLAGS(tcp_hdr) & NET_TCP_RST) {
   1bbe6:	7b43      	ldrb	r3, [r0, #13]
   1bbe8:	f013 0f04 	tst.w	r3, #4
   1bbec:	d11e      	bne.n	1bc2c <_tcp_synack_received+0x78>
	if (NET_TCP_FLAGS(tcp_hdr) & NET_TCP_SYN) {
   1bbee:	f013 0f02 	tst.w	r3, #2
   1bbf2:	d013      	beq.n	1bc1c <_tcp_synack_received+0x68>
		context->tcp->send_ack =
   1bbf4:	6e2a      	ldr	r2, [r5, #96]	; 0x60
	return ((u16_t)src[0] << 8) | src[1];
   1bbf6:	7901      	ldrb	r1, [r0, #4]
   1bbf8:	7943      	ldrb	r3, [r0, #5]
   1bbfa:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
   1bbfe:	7980      	ldrb	r0, [r0, #6]
   1bc00:	79f3      	ldrb	r3, [r6, #7]
   1bc02:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
	return ((u32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
   1bc06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
			sys_get_be32(tcp_hdr->seq) + 1;
   1bc0a:	3301      	adds	r3, #1
		context->tcp->send_ack =
   1bc0c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
		context->tcp->recv_max_ack = context->tcp->send_seq + 1;
   1bc10:	6e2a      	ldr	r2, [r5, #96]	; 0x60
   1bc12:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
   1bc16:	3301      	adds	r3, #1
   1bc18:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
	if (NET_TCP_FLAGS(tcp_hdr) == (NET_TCP_SYN | NET_TCP_ACK)) {
   1bc1c:	7b73      	ldrb	r3, [r6, #13]
   1bc1e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1bc22:	2b12      	cmp	r3, #18
   1bc24:	d019      	beq.n	1bc5a <_tcp_synack_received+0xa6>
}
   1bc26:	2002      	movs	r0, #2
   1bc28:	b01f      	add	sp, #124	; 0x7c
   1bc2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (!net_tcp_validate_seq(context->tcp, pkt)) {
   1bc2c:	4621      	mov	r1, r4
   1bc2e:	6e28      	ldr	r0, [r5, #96]	; 0x60
   1bc30:	f007 fa87 	bl	23142 <net_tcp_validate_seq>
   1bc34:	b160      	cbz	r0, 1bc50 <_tcp_synack_received+0x9c>
	net_stats.tcp.drop++;
}

static inline void net_stats_update_tcp_seg_rst(void)
{
	net_stats.tcp.rst++;
   1bc36:	4a40      	ldr	r2, [pc, #256]	; (1bd38 <_tcp_synack_received+0x184>)
   1bc38:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
   1bc3a:	3301      	adds	r3, #1
   1bc3c:	66d3      	str	r3, [r2, #108]	; 0x6c
		if (context->connect_cb) {
   1bc3e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   1bc40:	2b00      	cmp	r3, #0
   1bc42:	d0f0      	beq.n	1bc26 <_tcp_synack_received+0x72>
			context->connect_cb(context, -ECONNREFUSED,
   1bc44:	682a      	ldr	r2, [r5, #0]
   1bc46:	f06f 016e 	mvn.w	r1, #110	; 0x6e
   1bc4a:	4628      	mov	r0, r5
   1bc4c:	4798      	blx	r3
   1bc4e:	e7ea      	b.n	1bc26 <_tcp_synack_received+0x72>
	net_stats.tcp.ackerr++;
}

static inline void net_stats_update_tcp_seg_rsterr(void)
{
	net_stats.tcp.rsterr++;
   1bc50:	4a39      	ldr	r2, [pc, #228]	; (1bd38 <_tcp_synack_received+0x184>)
   1bc52:	6e93      	ldr	r3, [r2, #104]	; 0x68
   1bc54:	3301      	adds	r3, #1
   1bc56:	6693      	str	r3, [r2, #104]	; 0x68
			return NET_DROP;
   1bc58:	e7e5      	b.n	1bc26 <_tcp_synack_received+0x72>
	return pkt->family;
   1bc5a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   1bc5e:	f3c3 03c3 	ubfx	r3, r3, #3, #4
		if (net_pkt_family(pkt) == AF_INET6) {
   1bc62:	2b0a      	cmp	r3, #10
   1bc64:	d1df      	bne.n	1bc26 <_tcp_synack_received+0x72>
			r6addr.sin6_family = AF_INET6;
   1bc66:	f04f 0e0a 	mov.w	lr, #10
   1bc6a:	f8ad e014 	strh.w	lr, [sp, #20]
			r6addr.sin6_port = tcp_hdr->src_port;
   1bc6e:	8833      	ldrh	r3, [r6, #0]
   1bc70:	f8ad 3016 	strh.w	r3, [sp, #22]
	return pkt->frags->data;
   1bc74:	68a7      	ldr	r7, [r4, #8]
			net_ipaddr_copy(&r6addr.sin6_addr,
   1bc76:	ac16      	add	r4, sp, #88	; 0x58
   1bc78:	68bb      	ldr	r3, [r7, #8]
   1bc7a:	f853 0f08 	ldr.w	r0, [r3, #8]!
   1bc7e:	6859      	ldr	r1, [r3, #4]
   1bc80:	689a      	ldr	r2, [r3, #8]
   1bc82:	68db      	ldr	r3, [r3, #12]
   1bc84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1bc86:	ac06      	add	r4, sp, #24
   1bc88:	ab16      	add	r3, sp, #88	; 0x58
   1bc8a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1bc8c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			l6addr.sin6_family = AF_INET6;
   1bc90:	f8ad e02c 	strh.w	lr, [sp, #44]	; 0x2c
			l6addr.sin6_port = htons(tcp_hdr->dst_port);
   1bc94:	8872      	ldrh	r2, [r6, #2]
   1bc96:	0a13      	lsrs	r3, r2, #8
   1bc98:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1bc9c:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
			net_ipaddr_copy(&l6addr.sin6_addr,
   1bca0:	ac1a      	add	r4, sp, #104	; 0x68
   1bca2:	68bb      	ldr	r3, [r7, #8]
   1bca4:	f853 0f18 	ldr.w	r0, [r3, #24]!
   1bca8:	6859      	ldr	r1, [r3, #4]
   1bcaa:	689a      	ldr	r2, [r3, #8]
   1bcac:	68db      	ldr	r3, [r3, #12]
   1bcae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1bcb0:	ac0c      	add	r4, sp, #48	; 0x30
   1bcb2:	ab1e      	add	r3, sp, #120	; 0x78
   1bcb4:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
   1bcb8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		net_tcp_unregister(context->conn_handler);
   1bcbc:	462c      	mov	r4, r5
	return net_conn_unregister(handle);
   1bcbe:	f854 0f2c 	ldr.w	r0, [r4, #44]!
   1bcc2:	f008 fcdb 	bl	2467c <net_conn_unregister>
				       ntohs(tcp_hdr->src_port),
   1bcc6:	8832      	ldrh	r2, [r6, #0]
   1bcc8:	0a13      	lsrs	r3, r2, #8
   1bcca:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
				       ntohs(tcp_hdr->dst_port),
   1bcce:	8871      	ldrh	r1, [r6, #2]
   1bcd0:	0a0a      	lsrs	r2, r1, #8
   1bcd2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
		ret = net_tcp_register(raddr,
   1bcd6:	b292      	uxth	r2, r2
	return net_conn_register(IPPROTO_TCP, remote_addr, local_addr,
   1bcd8:	9403      	str	r4, [sp, #12]
   1bcda:	9502      	str	r5, [sp, #8]
   1bcdc:	4917      	ldr	r1, [pc, #92]	; (1bd3c <_tcp_synack_received+0x188>)
   1bcde:	9101      	str	r1, [sp, #4]
   1bce0:	9200      	str	r2, [sp, #0]
   1bce2:	b29b      	uxth	r3, r3
   1bce4:	aa0b      	add	r2, sp, #44	; 0x2c
   1bce6:	a905      	add	r1, sp, #20
   1bce8:	2006      	movs	r0, #6
   1bcea:	f008 fce5 	bl	246b8 <net_conn_register>
		if (ret < 0) {
   1bcee:	2800      	cmp	r0, #0
   1bcf0:	db1c      	blt.n	1bd2c <_tcp_synack_received+0x178>
		net_tcp_change_state(context->tcp, NET_TCP_ESTABLISHED);
   1bcf2:	2104      	movs	r1, #4
   1bcf4:	6e28      	ldr	r0, [r5, #96]	; 0x60
   1bcf6:	f006 ffba 	bl	22c6e <net_tcp_change_state>
	context->flags &= ~(NET_CONTEXT_STATE_MASK << NET_CONTEXT_STATE_SHIFT);
   1bcfa:	f895 305d 	ldrb.w	r3, [r5, #93]	; 0x5d
   1bcfe:	f003 03f9 	and.w	r3, r3, #249	; 0xf9
	context->flags |= ((state & NET_CONTEXT_STATE_MASK) <<
   1bd02:	f043 0304 	orr.w	r3, r3, #4
   1bd06:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
		send_ack(context, raddr, false);
   1bd0a:	2200      	movs	r2, #0
   1bd0c:	a905      	add	r1, sp, #20
   1bd0e:	4628      	mov	r0, r5
   1bd10:	f7ff ff30 	bl	1bb74 <send_ack>
		k_sem_give(&context->tcp->connect_wait);
   1bd14:	6e28      	ldr	r0, [r5, #96]	; 0x60
   1bd16:	30ac      	adds	r0, #172	; 0xac
   1bd18:	f00c fd3f 	bl	2879a <_impl_k_sem_give>
		if (context->connect_cb) {
   1bd1c:	6bab      	ldr	r3, [r5, #56]	; 0x38
   1bd1e:	2b00      	cmp	r3, #0
   1bd20:	d081      	beq.n	1bc26 <_tcp_synack_received+0x72>
			context->connect_cb(context, 0, context->user_data);
   1bd22:	682a      	ldr	r2, [r5, #0]
   1bd24:	2100      	movs	r1, #0
   1bd26:	4628      	mov	r0, r5
   1bd28:	4798      	blx	r3
   1bd2a:	e77c      	b.n	1bc26 <_tcp_synack_received+0x72>
			send_reset(context, raddr);
   1bd2c:	a905      	add	r1, sp, #20
   1bd2e:	4628      	mov	r0, r5
   1bd30:	f7ff ff08 	bl	1bb44 <send_reset>
			return NET_DROP;
   1bd34:	e777      	b.n	1bc26 <_tcp_synack_received+0x72>
   1bd36:	bf00      	nop
   1bd38:	200029e8 	.word	0x200029e8
   1bd3c:	0001c295 	.word	0x0001c295

0001bd40 <create_udp_packet>:
{
   1bd40:	b570      	push	{r4, r5, r6, lr}
	return pkt->family;
   1bd42:	f891 4038 	ldrb.w	r4, [r1, #56]	; 0x38
   1bd46:	f3c4 04c3 	ubfx	r4, r4, #3, #4
	if (net_pkt_family(pkt) == AF_INET6) {
   1bd4a:	2c0a      	cmp	r4, #10
   1bd4c:	d118      	bne.n	1bd80 <create_udp_packet+0x40>
   1bd4e:	461e      	mov	r6, r3
   1bd50:	4615      	mov	r5, r2
   1bd52:	4604      	mov	r4, r0
		pkt = net_ipv6_create(context, pkt, NULL, &addr6->sin6_addr);
   1bd54:	1d13      	adds	r3, r2, #4
   1bd56:	2200      	movs	r2, #0
   1bd58:	f003 f9a4 	bl	1f0a4 <net_ipv6_create>
   1bd5c:	4601      	mov	r1, r0
				     net_pkt_ip_hdr_len(pkt) +
   1bd5e:	f890 0033 	ldrb.w	r0, [r0, #51]	; 0x33
				     net_pkt_ipv6_ext_len(pkt),
   1bd62:	f891 203b 	ldrb.w	r2, [r1, #59]	; 0x3b
		tmp = net_udp_insert(context, pkt,
   1bd66:	886b      	ldrh	r3, [r5, #2]
   1bd68:	4402      	add	r2, r0
   1bd6a:	4620      	mov	r0, r4
   1bd6c:	f006 fd90 	bl	22890 <net_udp_insert>
		if (!tmp) {
   1bd70:	4605      	mov	r5, r0
   1bd72:	b140      	cbz	r0, 1bd86 <create_udp_packet+0x46>
		r = net_ipv6_finalize(context, pkt);
   1bd74:	4601      	mov	r1, r0
   1bd76:	4620      	mov	r0, r4
   1bd78:	f003 fbf0 	bl	1f55c <net_ipv6_finalize>
	*out_pkt = pkt;
   1bd7c:	6035      	str	r5, [r6, #0]
	return r;
   1bd7e:	bd70      	pop	{r4, r5, r6, pc}
		return -EPROTONOSUPPORT;
   1bd80:	f06f 007a 	mvn.w	r0, #122	; 0x7a
   1bd84:	bd70      	pop	{r4, r5, r6, pc}
			return -ENOMEM;
   1bd86:	f06f 000b 	mvn.w	r0, #11
}
   1bd8a:	bd70      	pop	{r4, r5, r6, pc}

0001bd8c <send_data>:
{
   1bd8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bd90:	4604      	mov	r4, r0
   1bd92:	4615      	mov	r5, r2
   1bd94:	9e06      	ldr	r6, [sp, #24]
   1bd96:	9f07      	ldr	r7, [sp, #28]
	context->send_cb = cb;
   1bd98:	6342      	str	r2, [r0, #52]	; 0x34
	context->user_data = user_data;
   1bd9a:	6007      	str	r7, [r0, #0]
	pkt->token = token;
   1bd9c:	610e      	str	r6, [r1, #16]
	if (context->flags & NET_CONTEXT_PROTO) {
   1bd9e:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
   1bda2:	f013 0f40 	tst.w	r3, #64	; 0x40
   1bda6:	d011      	beq.n	1bdcc <send_data+0x40>
		return IPPROTO_TCP;
   1bda8:	2306      	movs	r3, #6
	if (net_context_get_ip_proto(context) == IPPROTO_UDP) {
   1bdaa:	2b11      	cmp	r3, #17
   1bdac:	d010      	beq.n	1bdd0 <send_data+0x44>
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
   1bdae:	2b06      	cmp	r3, #6
   1bdb0:	d113      	bne.n	1bdda <send_data+0x4e>
		int ret = net_tcp_send_data(context);
   1bdb2:	4620      	mov	r0, r4
   1bdb4:	f007 fbf8 	bl	235a8 <net_tcp_send_data>
   1bdb8:	4680      	mov	r8, r0
		if (cb) {
   1bdba:	b125      	cbz	r5, 1bdc6 <send_data+0x3a>
			cb(context, ret, token, user_data);
   1bdbc:	463b      	mov	r3, r7
   1bdbe:	4632      	mov	r2, r6
   1bdc0:	4601      	mov	r1, r0
   1bdc2:	4620      	mov	r0, r4
   1bdc4:	47a8      	blx	r5
}
   1bdc6:	4640      	mov	r0, r8
   1bdc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return IPPROTO_UDP;
   1bdcc:	2311      	movs	r3, #17
   1bdce:	e7ec      	b.n	1bdaa <send_data+0x1e>
		return net_send_data(pkt);
   1bdd0:	4608      	mov	r0, r1
   1bdd2:	f7fe fb05 	bl	1a3e0 <net_send_data>
   1bdd6:	4680      	mov	r8, r0
   1bdd8:	e7f5      	b.n	1bdc6 <send_data+0x3a>
	return -EPROTONOSUPPORT;
   1bdda:	f06f 087a 	mvn.w	r8, #122	; 0x7a
   1bdde:	e7f2      	b.n	1bdc6 <send_data+0x3a>

0001bde0 <net_context_get>:
{
   1bde0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (family == AF_INET) {
   1bde4:	2802      	cmp	r0, #2
   1bde6:	f000 80e9 	beq.w	1bfbc <net_context_get+0x1dc>
	if (family != AF_INET && family != AF_INET6) {
   1bdea:	280a      	cmp	r0, #10
   1bdec:	f040 80e9 	bne.w	1bfc2 <net_context_get+0x1e2>
	if (type != SOCK_DGRAM && type != SOCK_STREAM) {
   1bdf0:	1e4c      	subs	r4, r1, #1
   1bdf2:	b2e4      	uxtb	r4, r4
   1bdf4:	2c01      	cmp	r4, #1
   1bdf6:	f200 80e7 	bhi.w	1bfc8 <net_context_get+0x1e8>
	if (ip_proto != IPPROTO_UDP && ip_proto != IPPROTO_TCP) {
   1bdfa:	2a11      	cmp	r2, #17
   1bdfc:	d002      	beq.n	1be04 <net_context_get+0x24>
   1bdfe:	2a06      	cmp	r2, #6
   1be00:	f040 80e5 	bne.w	1bfce <net_context_get+0x1ee>
	if ((type == SOCK_STREAM && ip_proto == IPPROTO_UDP) ||
   1be04:	2901      	cmp	r1, #1
   1be06:	d01c      	beq.n	1be42 <net_context_get+0x62>
   1be08:	2902      	cmp	r1, #2
   1be0a:	d01f      	beq.n	1be4c <net_context_get+0x6c>
	if (!context) {
   1be0c:	2b00      	cmp	r3, #0
   1be0e:	f000 80e1 	beq.w	1bfd4 <net_context_get+0x1f4>
   1be12:	461f      	mov	r7, r3
   1be14:	4690      	mov	r8, r2
   1be16:	460e      	mov	r6, r1
   1be18:	4681      	mov	r9, r0
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   1be1a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1be1e:	4870      	ldr	r0, [pc, #448]	; (1bfe0 <net_context_get+0x200>)
   1be20:	f00c fcce 	bl	287c0 <_impl_k_sem_take>
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
   1be24:	2400      	movs	r4, #0
   1be26:	2c05      	cmp	r4, #5
   1be28:	f300 80c5 	bgt.w	1bfb6 <net_context_get+0x1d6>
	return context->flags & NET_CONTEXT_IN_USE;
   1be2c:	2568      	movs	r5, #104	; 0x68
   1be2e:	4b6d      	ldr	r3, [pc, #436]	; (1bfe4 <net_context_get+0x204>)
   1be30:	fb05 3504 	mla	r5, r5, r4, r3
   1be34:	f895 305d 	ldrb.w	r3, [r5, #93]	; 0x5d
		if (net_context_is_used(&contexts[i])) {
   1be38:	f013 0f01 	tst.w	r3, #1
   1be3c:	d00b      	beq.n	1be56 <net_context_get+0x76>
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
   1be3e:	3401      	adds	r4, #1
   1be40:	e7f1      	b.n	1be26 <net_context_get+0x46>
	if ((type == SOCK_STREAM && ip_proto == IPPROTO_UDP) ||
   1be42:	2a11      	cmp	r2, #17
   1be44:	d1e0      	bne.n	1be08 <net_context_get+0x28>
		return -EOPNOTSUPP;
   1be46:	f06f 045e 	mvn.w	r4, #94	; 0x5e
   1be4a:	e076      	b.n	1bf3a <net_context_get+0x15a>
	    (type == SOCK_DGRAM && ip_proto == IPPROTO_TCP)) {
   1be4c:	2a06      	cmp	r2, #6
   1be4e:	d1dd      	bne.n	1be0c <net_context_get+0x2c>
		return -EOPNOTSUPP;
   1be50:	f06f 045e 	mvn.w	r4, #94	; 0x5e
   1be54:	e071      	b.n	1bf3a <net_context_get+0x15a>
		if (ip_proto == IPPROTO_TCP) {
   1be56:	f1b8 0f06 	cmp.w	r8, #6
   1be5a:	d071      	beq.n	1bf40 <net_context_get+0x160>
		contexts[i].flags = 0;
   1be5c:	f04f 0a68 	mov.w	sl, #104	; 0x68
   1be60:	4b60      	ldr	r3, [pc, #384]	; (1bfe4 <net_context_get+0x204>)
   1be62:	fb0a 3a04 	mla	sl, sl, r4, r3
   1be66:	2300      	movs	r3, #0
   1be68:	f88a 305d 	strb.w	r3, [sl, #93]	; 0x5d
		atomic_set(&contexts[i].refcount, 1);
   1be6c:	f10a 0304 	add.w	r3, sl, #4
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1be70:	2201      	movs	r2, #1
   1be72:	f3bf 8f5b 	dmb	ish
   1be76:	e853 1f00 	ldrex	r1, [r3]
   1be7a:	e843 2000 	strex	r0, r2, [r3]
   1be7e:	2800      	cmp	r0, #0
   1be80:	d1f9      	bne.n	1be76 <net_context_get+0x96>
   1be82:	f3bf 8f5b 	dmb	ish
	if (family == AF_INET6) {
   1be86:	f1b9 0f0a 	cmp.w	r9, #10
   1be8a:	d06d      	beq.n	1bf68 <net_context_get+0x188>
	context->flags &= ~NET_CONTEXT_FAMILY;
   1be8c:	2368      	movs	r3, #104	; 0x68
   1be8e:	4a55      	ldr	r2, [pc, #340]	; (1bfe4 <net_context_get+0x204>)
   1be90:	fb03 2304 	mla	r3, r3, r4, r2
   1be94:	f893 205d 	ldrb.w	r2, [r3, #93]	; 0x5d
   1be98:	f022 0210 	bic.w	r2, r2, #16
   1be9c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
	if (type == SOCK_STREAM) {
   1bea0:	2e01      	cmp	r6, #1
   1bea2:	d068      	beq.n	1bf76 <net_context_get+0x196>
	context->flags &= ~NET_CONTEXT_TYPE;
   1bea4:	2368      	movs	r3, #104	; 0x68
   1bea6:	4a4f      	ldr	r2, [pc, #316]	; (1bfe4 <net_context_get+0x204>)
   1bea8:	fb03 2304 	mla	r3, r3, r4, r2
   1beac:	f893 205d 	ldrb.w	r2, [r3, #93]	; 0x5d
   1beb0:	f022 0220 	bic.w	r2, r2, #32
   1beb4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
	if (ip_proto == IPPROTO_TCP) {
   1beb8:	f1b8 0f06 	cmp.w	r8, #6
   1bebc:	d066      	beq.n	1bf8c <net_context_get+0x1ac>
	context->flags &= ~NET_CONTEXT_PROTO;
   1bebe:	2368      	movs	r3, #104	; 0x68
   1bec0:	4a48      	ldr	r2, [pc, #288]	; (1bfe4 <net_context_get+0x204>)
   1bec2:	fb03 2304 	mla	r3, r3, r4, r2
   1bec6:	f893 205d 	ldrb.w	r2, [r3, #93]	; 0x5d
   1beca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   1bece:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
		contexts[i].flags |= NET_CONTEXT_IN_USE;
   1bed2:	f8df 8110 	ldr.w	r8, [pc, #272]	; 1bfe4 <net_context_get+0x204>
   1bed6:	2568      	movs	r5, #104	; 0x68
   1bed8:	fb05 f504 	mul.w	r5, r5, r4
   1bedc:	eb08 0305 	add.w	r3, r8, r5
   1bee0:	f893 205d 	ldrb.w	r2, [r3, #93]	; 0x5d
   1bee4:	f042 0201 	orr.w	r2, r2, #1
   1bee8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
		contexts[i].iface = 0;
   1beec:	2600      	movs	r6, #0
   1beee:	f883 605c 	strb.w	r6, [r3, #92]	; 0x5c
		memset(&contexts[i].remote, 0, sizeof(struct sockaddr));
   1bef2:	f105 0010 	add.w	r0, r5, #16
   1bef6:	4440      	add	r0, r8
   1bef8:	2218      	movs	r2, #24
   1befa:	4631      	mov	r1, r6
   1befc:	3004      	adds	r0, #4
   1befe:	f00e fdc1 	bl	2aa84 <memset>
		memset(&contexts[i].local, 0, sizeof(struct sockaddr_ptr));
   1bf02:	3508      	adds	r5, #8
   1bf04:	4445      	add	r5, r8
   1bf06:	220c      	movs	r2, #12
   1bf08:	4631      	mov	r1, r6
   1bf0a:	4628      	mov	r0, r5
   1bf0c:	f00e fdba 	bl	2aa84 <memset>
		if (family == AF_INET6) {
   1bf10:	f1b9 0f0a 	cmp.w	r9, #10
   1bf14:	d045      	beq.n	1bfa2 <net_context_get+0x1c2>
		k_sem_init(&contexts[i].recv_data_wait, 1, UINT_MAX);
   1bf16:	2068      	movs	r0, #104	; 0x68
   1bf18:	fb00 f404 	mul.w	r4, r0, r4
   1bf1c:	3440      	adds	r4, #64	; 0x40
   1bf1e:	4831      	ldr	r0, [pc, #196]	; (1bfe4 <net_context_get+0x204>)
   1bf20:	4420      	add	r0, r4
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
   1bf22:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1bf26:	2101      	movs	r1, #1
   1bf28:	3004      	adds	r0, #4
   1bf2a:	f00c fc2d 	bl	28788 <_impl_k_sem_init>
		*context = &contexts[i];
   1bf2e:	f8c7 a000 	str.w	sl, [r7]
		ret = 0;
   1bf32:	2400      	movs	r4, #0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   1bf34:	482a      	ldr	r0, [pc, #168]	; (1bfe0 <net_context_get+0x200>)
   1bf36:	f00c fc30 	bl	2879a <_impl_k_sem_give>
}
   1bf3a:	4620      	mov	r0, r4
   1bf3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			contexts[i].tcp = net_tcp_alloc(&contexts[i]);
   1bf40:	2568      	movs	r5, #104	; 0x68
   1bf42:	4b28      	ldr	r3, [pc, #160]	; (1bfe4 <net_context_get+0x204>)
   1bf44:	fb05 3504 	mla	r5, r5, r4, r3
   1bf48:	4628      	mov	r0, r5
   1bf4a:	f006 fdab 	bl	22aa4 <net_tcp_alloc>
   1bf4e:	6628      	str	r0, [r5, #96]	; 0x60
			if (!contexts[i].tcp) {
   1bf50:	2800      	cmp	r0, #0
   1bf52:	d042      	beq.n	1bfda <net_context_get+0x1fa>
			k_delayed_work_init(&contexts[i].tcp->ack_timer,
   1bf54:	4924      	ldr	r1, [pc, #144]	; (1bfe8 <net_context_get+0x208>)
   1bf56:	3008      	adds	r0, #8
   1bf58:	f00d f9f0 	bl	2933c <k_delayed_work_init>
			k_delayed_work_init(&contexts[i].tcp->fin_timer,
   1bf5c:	6e28      	ldr	r0, [r5, #96]	; 0x60
   1bf5e:	4923      	ldr	r1, [pc, #140]	; (1bfec <net_context_get+0x20c>)
   1bf60:	3030      	adds	r0, #48	; 0x30
   1bf62:	f00d f9eb 	bl	2933c <k_delayed_work_init>
   1bf66:	e779      	b.n	1be5c <net_context_get+0x7c>
		context->flags |= NET_CONTEXT_FAMILY;
   1bf68:	f89a 205d 	ldrb.w	r2, [sl, #93]	; 0x5d
   1bf6c:	f042 0210 	orr.w	r2, r2, #16
   1bf70:	f88a 205d 	strb.w	r2, [sl, #93]	; 0x5d
   1bf74:	e794      	b.n	1bea0 <net_context_get+0xc0>
		context->flags |= NET_CONTEXT_TYPE;
   1bf76:	2368      	movs	r3, #104	; 0x68
   1bf78:	4a1a      	ldr	r2, [pc, #104]	; (1bfe4 <net_context_get+0x204>)
   1bf7a:	fb03 2304 	mla	r3, r3, r4, r2
   1bf7e:	f893 205d 	ldrb.w	r2, [r3, #93]	; 0x5d
   1bf82:	f042 0220 	orr.w	r2, r2, #32
   1bf86:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
   1bf8a:	e795      	b.n	1beb8 <net_context_get+0xd8>
		context->flags |= NET_CONTEXT_PROTO;
   1bf8c:	2368      	movs	r3, #104	; 0x68
   1bf8e:	4a15      	ldr	r2, [pc, #84]	; (1bfe4 <net_context_get+0x204>)
   1bf90:	fb03 2304 	mla	r3, r3, r4, r2
   1bf94:	f893 205d 	ldrb.w	r2, [r3, #93]	; 0x5d
   1bf98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   1bf9c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
   1bfa0:	e797      	b.n	1bed2 <net_context_get+0xf2>
			addr6->sin6_port = find_available_port(&contexts[i],
   1bfa2:	4629      	mov	r1, r5
   1bfa4:	4650      	mov	r0, sl
   1bfa6:	f7ff fcf1 	bl	1b98c <find_available_port>
   1bfaa:	8068      	strh	r0, [r5, #2]
			if (!addr6->sin6_port) {
   1bfac:	2800      	cmp	r0, #0
   1bfae:	d1b2      	bne.n	1bf16 <net_context_get+0x136>
				return -EADDRINUSE;
   1bfb0:	f06f 046f 	mvn.w	r4, #111	; 0x6f
   1bfb4:	e7c1      	b.n	1bf3a <net_context_get+0x15a>
	int i, ret = -ENOENT;
   1bfb6:	f06f 0401 	mvn.w	r4, #1
   1bfba:	e7bb      	b.n	1bf34 <net_context_get+0x154>
		return -EPFNOSUPPORT;
   1bfbc:	f06f 045f 	mvn.w	r4, #95	; 0x5f
   1bfc0:	e7bb      	b.n	1bf3a <net_context_get+0x15a>
		return -EAFNOSUPPORT;
   1bfc2:	f06f 0469 	mvn.w	r4, #105	; 0x69
   1bfc6:	e7b8      	b.n	1bf3a <net_context_get+0x15a>
		return -EPROTOTYPE;
   1bfc8:	f06f 046a 	mvn.w	r4, #106	; 0x6a
   1bfcc:	e7b5      	b.n	1bf3a <net_context_get+0x15a>
		return -EPROTONOSUPPORT;
   1bfce:	f06f 047a 	mvn.w	r4, #122	; 0x7a
   1bfd2:	e7b2      	b.n	1bf3a <net_context_get+0x15a>
		return -EINVAL;
   1bfd4:	f06f 0415 	mvn.w	r4, #21
   1bfd8:	e7af      	b.n	1bf3a <net_context_get+0x15a>
				return -ENOBUFS;
   1bfda:	f06f 0468 	mvn.w	r4, #104	; 0x68
   1bfde:	e7ac      	b.n	1bf3a <net_context_get+0x15a>
   1bfe0:	20001da8 	.word	0x20001da8
   1bfe4:	20001b38 	.word	0x20001b38
   1bfe8:	0001c0b9 	.word	0x0001c0b9
   1bfec:	0001c0ad 	.word	0x0001c0ad

0001bff0 <net_context_ref>:
	int old_rc = atomic_inc(&context->refcount);
   1bff0:	1d03      	adds	r3, r0, #4
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1bff2:	f3bf 8f5b 	dmb	ish
   1bff6:	e853 0f00 	ldrex	r0, [r3]
   1bffa:	1c42      	adds	r2, r0, #1
   1bffc:	e843 2100 	strex	r1, r2, [r3]
   1c000:	2900      	cmp	r1, #0
   1c002:	d1f8      	bne.n	1bff6 <net_context_ref+0x6>
   1c004:	f3bf 8f5b 	dmb	ish
}
   1c008:	3001      	adds	r0, #1
   1c00a:	4770      	bx	lr

0001c00c <net_context_unref>:
{
   1c00c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int old_rc = atomic_dec(&context->refcount);
   1c00e:	1d02      	adds	r2, r0, #4
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1c010:	f3bf 8f5b 	dmb	ish
   1c014:	e852 3f00 	ldrex	r3, [r2]
   1c018:	1e59      	subs	r1, r3, #1
   1c01a:	e842 1400 	strex	r4, r1, [r2]
   1c01e:	2c00      	cmp	r4, #0
   1c020:	d1f8      	bne.n	1c014 <net_context_unref+0x8>
   1c022:	f3bf 8f5b 	dmb	ish
	if (old_rc != 1) {
   1c026:	2b01      	cmp	r3, #1
   1c028:	d001      	beq.n	1c02e <net_context_unref+0x22>
		return old_rc - 1;
   1c02a:	1e58      	subs	r0, r3, #1
   1c02c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1c02e:	4604      	mov	r4, r0
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   1c030:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1c034:	481b      	ldr	r0, [pc, #108]	; (1c0a4 <net_context_unref+0x98>)
   1c036:	f00c fbc3 	bl	287c0 <_impl_k_sem_take>
	if (context->tcp) {
   1c03a:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1c03c:	b13b      	cbz	r3, 1c04e <net_context_unref+0x42>
   1c03e:	2500      	movs	r5, #0
		for (i = 0; i < CONFIG_NET_TCP_BACKLOG_SIZE; i++) {
   1c040:	2d00      	cmp	r5, #0
   1c042:	dd15      	ble.n	1c070 <net_context_unref+0x64>
		net_tcp_release(context->tcp);
   1c044:	6e20      	ldr	r0, [r4, #96]	; 0x60
   1c046:	f006 fe3d 	bl	22cc4 <net_tcp_release>
		context->tcp = NULL;
   1c04a:	2300      	movs	r3, #0
   1c04c:	6623      	str	r3, [r4, #96]	; 0x60
	if (context->conn_handler) {
   1c04e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   1c050:	b118      	cbz	r0, 1c05a <net_context_unref+0x4e>
		net_conn_unregister(context->conn_handler);
   1c052:	f008 fb13 	bl	2467c <net_conn_unregister>
		context->conn_handler = NULL;
   1c056:	2300      	movs	r3, #0
   1c058:	62e3      	str	r3, [r4, #44]	; 0x2c
	context->flags &= ~(NET_CONTEXT_STATE_MASK << NET_CONTEXT_STATE_SHIFT);
   1c05a:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
	context->flags &= ~NET_CONTEXT_IN_USE;
   1c05e:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
   1c062:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   1c066:	480f      	ldr	r0, [pc, #60]	; (1c0a4 <net_context_unref+0x98>)
   1c068:	f00c fb97 	bl	2879a <_impl_k_sem_give>
	return 0;
   1c06c:	2000      	movs	r0, #0
}
   1c06e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (tcp_backlog[i].tcp != context->tcp) {
   1c070:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   1c074:	0113      	lsls	r3, r2, #4
   1c076:	4a0c      	ldr	r2, [pc, #48]	; (1c0a8 <net_context_unref+0x9c>)
   1c078:	58d2      	ldr	r2, [r2, r3]
   1c07a:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1c07c:	429a      	cmp	r2, r3
   1c07e:	d001      	beq.n	1c084 <net_context_unref+0x78>
		for (i = 0; i < CONFIG_NET_TCP_BACKLOG_SIZE; i++) {
   1c080:	3501      	adds	r5, #1
   1c082:	e7dd      	b.n	1c040 <net_context_unref+0x34>
			k_delayed_work_cancel(&tcp_backlog[i].ack_timer);
   1c084:	4f08      	ldr	r7, [pc, #32]	; (1c0a8 <net_context_unref+0x9c>)
   1c086:	00ae      	lsls	r6, r5, #2
   1c088:	1972      	adds	r2, r6, r5
   1c08a:	0113      	lsls	r3, r2, #4
   1c08c:	3328      	adds	r3, #40	; 0x28
   1c08e:	18f8      	adds	r0, r7, r3
   1c090:	f00d f972 	bl	29378 <k_delayed_work_cancel>
			memset(&tcp_backlog[i], 0, sizeof(tcp_backlog[i]));
   1c094:	442e      	add	r6, r5
   1c096:	0130      	lsls	r0, r6, #4
   1c098:	2250      	movs	r2, #80	; 0x50
   1c09a:	2100      	movs	r1, #0
   1c09c:	4438      	add	r0, r7
   1c09e:	f00e fcf1 	bl	2aa84 <memset>
   1c0a2:	e7ed      	b.n	1c080 <net_context_unref+0x74>
   1c0a4:	20001da8 	.word	0x20001da8
   1c0a8:	20001dc0 	.word	0x20001dc0

0001c0ac <handle_fin_timeout>:
{
   1c0ac:	b508      	push	{r3, lr}
	net_context_unref(tcp->context);
   1c0ae:	f850 0c30 	ldr.w	r0, [r0, #-48]
   1c0b2:	f7ff ffab 	bl	1c00c <net_context_unref>
   1c0b6:	bd08      	pop	{r3, pc}

0001c0b8 <handle_ack_timeout>:
	return (enum net_tcp_state)tcp->state;
   1c0b8:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
   1c0bc:	f3c3 3343 	ubfx	r3, r3, #13, #4
	if (net_tcp_get_state(tcp) == NET_TCP_LAST_ACK) {
   1c0c0:	2b06      	cmp	r3, #6
   1c0c2:	d000      	beq.n	1c0c6 <handle_ack_timeout+0xe>
   1c0c4:	4770      	bx	lr
{
   1c0c6:	b510      	push	{r4, lr}
   1c0c8:	f1a0 0208 	sub.w	r2, r0, #8
   1c0cc:	4604      	mov	r4, r0
		net_tcp_change_state(tcp, NET_TCP_CLOSED);
   1c0ce:	2100      	movs	r1, #0
   1c0d0:	4610      	mov	r0, r2
   1c0d2:	f006 fdcc 	bl	22c6e <net_tcp_change_state>
		net_context_unref(tcp->context);
   1c0d6:	f854 0c08 	ldr.w	r0, [r4, #-8]
   1c0da:	f7ff ff97 	bl	1c00c <net_context_unref>
   1c0de:	bd10      	pop	{r4, pc}

0001c0e0 <tcp_synack_received>:
NET_CONN_CB(tcp_synack_received)
   1c0e0:	b570      	push	{r4, r5, r6, lr}
   1c0e2:	4605      	mov	r5, r0
   1c0e4:	460e      	mov	r6, r1
   1c0e6:	4614      	mov	r4, r2
   1c0e8:	4610      	mov	r0, r2
   1c0ea:	f7ff ff81 	bl	1bff0 <net_context_ref>
   1c0ee:	4622      	mov	r2, r4
   1c0f0:	4631      	mov	r1, r6
   1c0f2:	4628      	mov	r0, r5
   1c0f4:	f7ff fd5e 	bl	1bbb4 <_tcp_synack_received>
   1c0f8:	4605      	mov	r5, r0
   1c0fa:	4620      	mov	r0, r4
   1c0fc:	f7ff ff86 	bl	1c00c <net_context_unref>
   1c100:	4628      	mov	r0, r5
   1c102:	bd70      	pop	{r4, r5, r6, pc}

0001c104 <_tcp_established>:
{
   1c104:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1c108:	b087      	sub	sp, #28
   1c10a:	4607      	mov	r7, r0
   1c10c:	460e      	mov	r6, r1
   1c10e:	4614      	mov	r4, r2
	tcp_hdr = net_tcp_get_hdr(pkt, &hdr);
   1c110:	a901      	add	r1, sp, #4
   1c112:	4630      	mov	r0, r6
   1c114:	f006 ff9a 	bl	2304c <net_tcp_get_hdr>
	if (!tcp_hdr) {
   1c118:	2800      	cmp	r0, #0
   1c11a:	f000 80b5 	beq.w	1c288 <_tcp_established+0x184>
   1c11e:	4605      	mov	r5, r0
	if (net_tcp_get_state(context->tcp) < NET_TCP_ESTABLISHED) {
   1c120:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1c122:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
   1c126:	f3c3 3343 	ubfx	r3, r3, #13, #4
   1c12a:	2b03      	cmp	r3, #3
   1c12c:	d804      	bhi.n	1c138 <_tcp_established+0x34>
		return NET_DROP;
   1c12e:	2502      	movs	r5, #2
}
   1c130:	4628      	mov	r0, r5
   1c132:	b007      	add	sp, #28
   1c134:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	tcp_flags = NET_TCP_FLAGS(tcp_hdr);
   1c138:	f890 800d 	ldrb.w	r8, [r0, #13]
	if (tcp_flags & NET_TCP_ACK) {
   1c13c:	f018 0f10 	tst.w	r8, #16
   1c140:	d116      	bne.n	1c170 <_tcp_established+0x6c>
	if (tcp_flags & NET_TCP_RST) {
   1c142:	f018 0f04 	tst.w	r8, #4
   1c146:	d121      	bne.n	1c18c <_tcp_established+0x88>
	return ((u16_t)src[0] << 8) | src[1];
   1c148:	792a      	ldrb	r2, [r5, #4]
   1c14a:	796b      	ldrb	r3, [r5, #5]
   1c14c:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
   1c150:	79a9      	ldrb	r1, [r5, #6]
   1c152:	79eb      	ldrb	r3, [r5, #7]
   1c154:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	return ((u32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
   1c158:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
			    context->tcp->send_ack) < 0) {
   1c15c:	6e22      	ldr	r2, [r4, #96]	; 0x60
	if (net_tcp_seq_cmp(sys_get_be32(tcp_hdr->seq),
   1c15e:	f8d2 209c 	ldr.w	r2, [r2, #156]	; 0x9c
 *
 * @return < 0 if seq1 < seq2, 0 if seq1 == seq2, > 0 if seq > seq2
 */
static inline s32_t net_tcp_seq_cmp(u32_t seq1, u32_t seq2)
{
	return (s32_t)(seq1 - seq2);
   1c162:	1a99      	subs	r1, r3, r2
   1c164:	2900      	cmp	r1, #0
   1c166:	db2e      	blt.n	1c1c6 <_tcp_established+0xc2>
	if (sys_get_be32(tcp_hdr->seq) - context->tcp->send_ack) {
   1c168:	429a      	cmp	r2, r3
   1c16a:	d033      	beq.n	1c1d4 <_tcp_established+0xd0>
		return NET_DROP;
   1c16c:	2502      	movs	r5, #2
   1c16e:	e7df      	b.n	1c130 <_tcp_established+0x2c>
	return ((u16_t)src[0] << 8) | src[1];
   1c170:	7a03      	ldrb	r3, [r0, #8]
   1c172:	7a41      	ldrb	r1, [r0, #9]
   1c174:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
   1c178:	7a82      	ldrb	r2, [r0, #10]
   1c17a:	7ac3      	ldrb	r3, [r0, #11]
   1c17c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		net_tcp_ack_received(context,
   1c180:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   1c184:	4620      	mov	r0, r4
   1c186:	f007 fa49 	bl	2361c <net_tcp_ack_received>
   1c18a:	e7da      	b.n	1c142 <_tcp_established+0x3e>
		if (!net_tcp_validate_seq(context->tcp, pkt)) {
   1c18c:	4631      	mov	r1, r6
   1c18e:	6e20      	ldr	r0, [r4, #96]	; 0x60
   1c190:	f006 ffd7 	bl	23142 <net_tcp_validate_seq>
   1c194:	b928      	cbnz	r0, 1c1a2 <_tcp_established+0x9e>
   1c196:	4a3d      	ldr	r2, [pc, #244]	; (1c28c <_tcp_established+0x188>)
   1c198:	6e93      	ldr	r3, [r2, #104]	; 0x68
   1c19a:	3301      	adds	r3, #1
   1c19c:	6693      	str	r3, [r2, #104]	; 0x68
			return NET_DROP;
   1c19e:	2502      	movs	r5, #2
   1c1a0:	e7c6      	b.n	1c130 <_tcp_established+0x2c>
	net_stats.tcp.rst++;
   1c1a2:	4a3a      	ldr	r2, [pc, #232]	; (1c28c <_tcp_established+0x188>)
   1c1a4:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
   1c1a6:	3301      	adds	r3, #1
   1c1a8:	66d3      	str	r3, [r2, #108]	; 0x6c
		if (context->recv_cb) {
   1c1aa:	6b25      	ldr	r5, [r4, #48]	; 0x30
   1c1ac:	b135      	cbz	r5, 1c1bc <_tcp_established+0xb8>
					 context->tcp->recv_user_data);
   1c1ae:	6e23      	ldr	r3, [r4, #96]	; 0x60
			context->recv_cb(context, NULL, -ECONNRESET,
   1c1b0:	685b      	ldr	r3, [r3, #4]
   1c1b2:	f06f 0267 	mvn.w	r2, #103	; 0x67
   1c1b6:	2100      	movs	r1, #0
   1c1b8:	4620      	mov	r0, r4
   1c1ba:	47a8      	blx	r5
		net_context_unref(context);
   1c1bc:	4620      	mov	r0, r4
   1c1be:	f7ff ff25 	bl	1c00c <net_context_unref>
		return NET_DROP;
   1c1c2:	2502      	movs	r5, #2
   1c1c4:	e7b4      	b.n	1c130 <_tcp_established+0x2c>
		send_ack(context, &conn->remote_addr, true);
   1c1c6:	2201      	movs	r2, #1
   1c1c8:	4639      	mov	r1, r7
   1c1ca:	4620      	mov	r0, r4
   1c1cc:	f7ff fcd2 	bl	1bb74 <send_ack>
		return NET_DROP;
   1c1d0:	2502      	movs	r5, #2
   1c1d2:	e7ad      	b.n	1c130 <_tcp_established+0x2c>
	set_appdata_values(pkt, IPPROTO_TCP);
   1c1d4:	2106      	movs	r1, #6
   1c1d6:	4630      	mov	r0, r6
   1c1d8:	f7ff fc25 	bl	1ba26 <set_appdata_values>
	return pkt->appdatalen;
   1c1dc:	f8b6 9030 	ldrh.w	r9, [r6, #48]	; 0x30
	if (data_len > net_tcp_get_recv_wnd(context->tcp)) {
   1c1e0:	6e20      	ldr	r0, [r4, #96]	; 0x60
   1c1e2:	f006 fcc5 	bl	22b70 <net_tcp_get_recv_wnd>
   1c1e6:	4581      	cmp	r9, r0
   1c1e8:	d901      	bls.n	1c1ee <_tcp_established+0xea>
		return NET_DROP;
   1c1ea:	2502      	movs	r5, #2
   1c1ec:	e7a0      	b.n	1c130 <_tcp_established+0x2c>
	ret = packet_received(conn, pkt, context->tcp->recv_user_data);
   1c1ee:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1c1f0:	685a      	ldr	r2, [r3, #4]
   1c1f2:	4631      	mov	r1, r6
   1c1f4:	4638      	mov	r0, r7
   1c1f6:	f7ff fc4b 	bl	1ba90 <packet_received>
   1c1fa:	4605      	mov	r5, r0
	context->tcp->send_ack += data_len;
   1c1fc:	6e22      	ldr	r2, [r4, #96]	; 0x60
   1c1fe:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
   1c202:	444b      	add	r3, r9
   1c204:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
	if (tcp_flags & NET_TCP_FIN) {
   1c208:	f018 0f01 	tst.w	r8, #1
   1c20c:	d022      	beq.n	1c254 <_tcp_established+0x150>
		context->tcp->fin_rcvd = 1;
   1c20e:	6e22      	ldr	r2, [r4, #96]	; 0x60
   1c210:	f892 30a6 	ldrb.w	r3, [r2, #166]	; 0xa6
   1c214:	f043 0304 	orr.w	r3, r3, #4
   1c218:	f882 30a6 	strb.w	r3, [r2, #166]	; 0xa6
		if (net_tcp_get_state(context->tcp) == NET_TCP_ESTABLISHED) {
   1c21c:	6e20      	ldr	r0, [r4, #96]	; 0x60
   1c21e:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
   1c222:	f3c3 3343 	ubfx	r3, r3, #13, #4
   1c226:	2b04      	cmp	r3, #4
   1c228:	d02a      	beq.n	1c280 <_tcp_established+0x17c>
		context->tcp->send_ack += 1;
   1c22a:	6e22      	ldr	r2, [r4, #96]	; 0x60
   1c22c:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
   1c230:	3301      	adds	r3, #1
   1c232:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
		if (context->recv_cb) {
   1c236:	6b26      	ldr	r6, [r4, #48]	; 0x30
   1c238:	b12e      	cbz	r6, 1c246 <_tcp_established+0x142>
					 context->tcp->recv_user_data);
   1c23a:	6e23      	ldr	r3, [r4, #96]	; 0x60
			context->recv_cb(context, NULL, 0,
   1c23c:	685b      	ldr	r3, [r3, #4]
   1c23e:	2200      	movs	r2, #0
   1c240:	4611      	mov	r1, r2
   1c242:	4620      	mov	r0, r4
   1c244:	47b0      	blx	r6
		k_delayed_work_submit(&context->tcp->ack_timer, ACK_TIMEOUT);
   1c246:	6e21      	ldr	r1, [r4, #96]	; 0x60
   1c248:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1c24c:	3108      	adds	r1, #8
   1c24e:	4810      	ldr	r0, [pc, #64]	; (1c290 <_tcp_established+0x18c>)
   1c250:	f00d f8ec 	bl	2942c <k_delayed_work_submit_to_queue>
	send_ack(context, &conn->remote_addr, false);
   1c254:	2200      	movs	r2, #0
   1c256:	4639      	mov	r1, r7
   1c258:	4620      	mov	r0, r4
   1c25a:	f7ff fc8b 	bl	1bb74 <send_ack>
	if (sys_slist_is_empty(&context->tcp->sent_list)
   1c25e:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1c260:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
   1c264:	2a00      	cmp	r2, #0
   1c266:	f47f af63 	bne.w	1c130 <_tcp_established+0x2c>
	    && context->tcp->fin_sent) {
   1c26a:	f893 30a6 	ldrb.w	r3, [r3, #166]	; 0xa6
   1c26e:	f003 0306 	and.w	r3, r3, #6
   1c272:	2b06      	cmp	r3, #6
   1c274:	f47f af5c 	bne.w	1c130 <_tcp_established+0x2c>
		net_context_unref(context);
   1c278:	4620      	mov	r0, r4
   1c27a:	f7ff fec7 	bl	1c00c <net_context_unref>
   1c27e:	e757      	b.n	1c130 <_tcp_established+0x2c>
			net_tcp_change_state(context->tcp, NET_TCP_CLOSE_WAIT);
   1c280:	2105      	movs	r1, #5
   1c282:	f006 fcf4 	bl	22c6e <net_tcp_change_state>
   1c286:	e7d0      	b.n	1c22a <_tcp_established+0x126>
		return NET_DROP;
   1c288:	2502      	movs	r5, #2
   1c28a:	e751      	b.n	1c130 <_tcp_established+0x2c>
   1c28c:	200029e8 	.word	0x200029e8
   1c290:	20002b08 	.word	0x20002b08

0001c294 <tcp_established>:
NET_CONN_CB(tcp_established)
   1c294:	b570      	push	{r4, r5, r6, lr}
   1c296:	4605      	mov	r5, r0
   1c298:	460e      	mov	r6, r1
   1c29a:	4614      	mov	r4, r2
   1c29c:	4610      	mov	r0, r2
   1c29e:	f7ff fea7 	bl	1bff0 <net_context_ref>
   1c2a2:	4622      	mov	r2, r4
   1c2a4:	4631      	mov	r1, r6
   1c2a6:	4628      	mov	r0, r5
   1c2a8:	f7ff ff2c 	bl	1c104 <_tcp_established>
   1c2ac:	4605      	mov	r5, r0
   1c2ae:	4620      	mov	r0, r4
   1c2b0:	f7ff feac 	bl	1c00c <net_context_unref>
   1c2b4:	4628      	mov	r0, r5
   1c2b6:	bd70      	pop	{r4, r5, r6, pc}

0001c2b8 <net_context_put>:
	if (!PART_OF_ARRAY(contexts, context)) {
   1c2b8:	b390      	cbz	r0, 1c320 <net_context_put+0x68>
{
   1c2ba:	b510      	push	{r4, lr}
   1c2bc:	4604      	mov	r4, r0
	if (!PART_OF_ARRAY(contexts, context)) {
   1c2be:	4a1d      	ldr	r2, [pc, #116]	; (1c334 <net_context_put+0x7c>)
   1c2c0:	4290      	cmp	r0, r2
   1c2c2:	d330      	bcc.n	1c326 <net_context_put+0x6e>
   1c2c4:	f502 721c 	add.w	r2, r2, #624	; 0x270
   1c2c8:	4290      	cmp	r0, r2
   1c2ca:	d22f      	bcs.n	1c32c <net_context_put+0x74>
	context->connect_cb = NULL;
   1c2cc:	2200      	movs	r2, #0
   1c2ce:	6382      	str	r2, [r0, #56]	; 0x38
	context->recv_cb = NULL;
   1c2d0:	6302      	str	r2, [r0, #48]	; 0x30
	context->send_cb = NULL;
   1c2d2:	6342      	str	r2, [r0, #52]	; 0x34
	if (context->flags & NET_CONTEXT_PROTO) {
   1c2d4:	f890 205d 	ldrb.w	r2, [r0, #93]	; 0x5d
   1c2d8:	f012 0f40 	tst.w	r2, #64	; 0x40
   1c2dc:	d007      	beq.n	1c2ee <net_context_put+0x36>
		return IPPROTO_TCP;
   1c2de:	2106      	movs	r1, #6
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
   1c2e0:	2906      	cmp	r1, #6
   1c2e2:	d006      	beq.n	1c2f2 <net_context_put+0x3a>
	net_context_unref(context);
   1c2e4:	4620      	mov	r0, r4
   1c2e6:	f7ff fe91 	bl	1c00c <net_context_unref>
	return 0;
   1c2ea:	2000      	movs	r0, #0
   1c2ec:	bd10      	pop	{r4, pc}
	return IPPROTO_UDP;
   1c2ee:	2111      	movs	r1, #17
   1c2f0:	e7f6      	b.n	1c2e0 <net_context_put+0x28>
	return (context->flags >> NET_CONTEXT_STATE_SHIFT) &
   1c2f2:	f3c2 0241 	ubfx	r2, r2, #1, #2
		if ((net_context_get_state(context) == NET_CONTEXT_CONNECTED ||
   1c2f6:	2a02      	cmp	r2, #2
   1c2f8:	d001      	beq.n	1c2fe <net_context_put+0x46>
   1c2fa:	2a03      	cmp	r2, #3
   1c2fc:	d1f2      	bne.n	1c2e4 <net_context_put+0x2c>
		    && !context->tcp->fin_rcvd) {
   1c2fe:	6e21      	ldr	r1, [r4, #96]	; 0x60
   1c300:	f891 30a6 	ldrb.w	r3, [r1, #166]	; 0xa6
   1c304:	f013 0f04 	tst.w	r3, #4
   1c308:	d1ec      	bne.n	1c2e4 <net_context_put+0x2c>
   1c30a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1c30e:	3130      	adds	r1, #48	; 0x30
   1c310:	4809      	ldr	r0, [pc, #36]	; (1c338 <net_context_put+0x80>)
   1c312:	f00d f88b 	bl	2942c <k_delayed_work_submit_to_queue>
			queue_fin(context);
   1c316:	4620      	mov	r0, r4
   1c318:	f7ff fb59 	bl	1b9ce <queue_fin>
			return 0;
   1c31c:	2000      	movs	r0, #0
   1c31e:	bd10      	pop	{r4, pc}
		return -EINVAL;
   1c320:	f06f 0015 	mvn.w	r0, #21
   1c324:	4770      	bx	lr
   1c326:	f06f 0015 	mvn.w	r0, #21
   1c32a:	bd10      	pop	{r4, pc}
   1c32c:	f06f 0015 	mvn.w	r0, #21
}
   1c330:	bd10      	pop	{r4, pc}
   1c332:	bf00      	nop
   1c334:	20001b38 	.word	0x20001b38
   1c338:	20002b08 	.word	0x20002b08

0001c33c <net_context_bind>:
	if (context->conn_handler) {
   1c33c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   1c33e:	2b00      	cmp	r3, #0
   1c340:	d15c      	bne.n	1c3fc <net_context_bind+0xc0>
	if (addr->sa_family == AF_INET6) {
   1c342:	880b      	ldrh	r3, [r1, #0]
   1c344:	2b0a      	cmp	r3, #10
   1c346:	d15d      	bne.n	1c404 <net_context_bind+0xc8>
{
   1c348:	b570      	push	{r4, r5, r6, lr}
   1c34a:	b082      	sub	sp, #8
		struct net_if *iface = NULL;
   1c34c:	2300      	movs	r3, #0
   1c34e:	9301      	str	r3, [sp, #4]
		if (addrlen < sizeof(struct sockaddr_in6)) {
   1c350:	2a17      	cmp	r2, #23
   1c352:	d945      	bls.n	1c3e0 <net_context_bind+0xa4>
   1c354:	460d      	mov	r5, r1
   1c356:	4604      	mov	r4, r0
	return addr->s6_addr[0] == 0xFF;
   1c358:	790b      	ldrb	r3, [r1, #4]
		if (net_is_ipv6_addr_mcast(&addr6->sin6_addr)) {
   1c35a:	2bff      	cmp	r3, #255	; 0xff
   1c35c:	d009      	beq.n	1c372 <net_context_bind+0x36>
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1c35e:	684b      	ldr	r3, [r1, #4]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1c360:	b983      	cbnz	r3, 1c384 <net_context_bind+0x48>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1c362:	688b      	ldr	r3, [r1, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1c364:	bb2b      	cbnz	r3, 1c3b2 <net_context_bind+0x76>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1c366:	68cb      	ldr	r3, [r1, #12]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1c368:	bb2b      	cbnz	r3, 1c3b6 <net_context_bind+0x7a>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   1c36a:	690b      	ldr	r3, [r1, #16]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1c36c:	b32b      	cbz	r3, 1c3ba <net_context_bind+0x7e>
   1c36e:	2300      	movs	r3, #0
   1c370:	e009      	b.n	1c386 <net_context_bind+0x4a>
			maddr = net_if_ipv6_maddr_lookup(&addr6->sin6_addr,
   1c372:	a901      	add	r1, sp, #4
   1c374:	1d28      	adds	r0, r5, #4
   1c376:	f7fe fccb 	bl	1ad10 <net_if_ipv6_maddr_lookup>
			if (!maddr) {
   1c37a:	4606      	mov	r6, r0
   1c37c:	2800      	cmp	r0, #0
   1c37e:	d034      	beq.n	1c3ea <net_context_bind+0xae>
			ptr = &maddr->address.in6_addr;
   1c380:	3608      	adds	r6, #8
   1c382:	e007      	b.n	1c394 <net_context_bind+0x58>
   1c384:	2300      	movs	r3, #0
		} else if (net_is_ipv6_addr_unspecified(&addr6->sin6_addr)) {
   1c386:	b1d3      	cbz	r3, 1c3be <net_context_bind+0x82>
			iface = net_if_get_default();
   1c388:	f7fe fa4c 	bl	1a824 <net_if_get_default>
   1c38c:	9001      	str	r0, [sp, #4]
			ptr = (struct in6_addr *)net_ipv6_unspecified_address();
   1c38e:	f002 fde9 	bl	1ef64 <net_ipv6_unspecified_address>
   1c392:	4606      	mov	r6, r0
		if (!iface) {
   1c394:	9801      	ldr	r0, [sp, #4]
   1c396:	b370      	cbz	r0, 1c3f6 <net_context_bind+0xba>
	context->iface = net_if_get_by_iface(iface);
   1c398:	f7ff f9ec 	bl	1b774 <net_if_get_by_iface>
   1c39c:	f884 005c 	strb.w	r0, [r4, #92]	; 0x5c
		net_sin6_ptr(&context->local)->sin6_family = AF_INET6;
   1c3a0:	230a      	movs	r3, #10
   1c3a2:	8123      	strh	r3, [r4, #8]
		net_sin6_ptr(&context->local)->sin6_addr = ptr;
   1c3a4:	60e6      	str	r6, [r4, #12]
		if (addr6->sin6_port) {
   1c3a6:	8869      	ldrh	r1, [r5, #2]
   1c3a8:	b989      	cbnz	r1, 1c3ce <net_context_bind+0x92>
				net_sin6_ptr(&context->local)->sin6_port;
   1c3aa:	8963      	ldrh	r3, [r4, #10]
			addr6->sin6_port =
   1c3ac:	806b      	strh	r3, [r5, #2]
		return 0;
   1c3ae:	2300      	movs	r3, #0
   1c3b0:	e018      	b.n	1c3e4 <net_context_bind+0xa8>
   1c3b2:	2300      	movs	r3, #0
   1c3b4:	e7e7      	b.n	1c386 <net_context_bind+0x4a>
   1c3b6:	2300      	movs	r3, #0
   1c3b8:	e7e5      	b.n	1c386 <net_context_bind+0x4a>
   1c3ba:	2301      	movs	r3, #1
   1c3bc:	e7e3      	b.n	1c386 <net_context_bind+0x4a>
			ifaddr = net_if_ipv6_addr_lookup(&addr6->sin6_addr,
   1c3be:	a901      	add	r1, sp, #4
   1c3c0:	1d28      	adds	r0, r5, #4
   1c3c2:	f7fe fa5b 	bl	1a87c <net_if_ipv6_addr_lookup>
			if (!ifaddr) {
   1c3c6:	4606      	mov	r6, r0
   1c3c8:	b190      	cbz	r0, 1c3f0 <net_context_bind+0xb4>
			ptr = &ifaddr->address.in6_addr;
   1c3ca:	3604      	adds	r6, #4
   1c3cc:	e7e2      	b.n	1c394 <net_context_bind+0x58>
			ret = check_used_port(AF_INET6, addr6->sin6_port,
   1c3ce:	462a      	mov	r2, r5
   1c3d0:	4618      	mov	r0, r3
   1c3d2:	f7ff fa9f 	bl	1b914 <check_used_port>
			if (!ret) {
   1c3d6:	4603      	mov	r3, r0
   1c3d8:	b920      	cbnz	r0, 1c3e4 <net_context_bind+0xa8>
					addr6->sin6_port;
   1c3da:	886a      	ldrh	r2, [r5, #2]
				net_sin6_ptr(&context->local)->sin6_port =
   1c3dc:	8162      	strh	r2, [r4, #10]
   1c3de:	e001      	b.n	1c3e4 <net_context_bind+0xa8>
			return -EINVAL;
   1c3e0:	f06f 0315 	mvn.w	r3, #21
}
   1c3e4:	4618      	mov	r0, r3
   1c3e6:	b002      	add	sp, #8
   1c3e8:	bd70      	pop	{r4, r5, r6, pc}
				return -ENOENT;
   1c3ea:	f06f 0301 	mvn.w	r3, #1
   1c3ee:	e7f9      	b.n	1c3e4 <net_context_bind+0xa8>
				return -ENOENT;
   1c3f0:	f06f 0301 	mvn.w	r3, #1
   1c3f4:	e7f6      	b.n	1c3e4 <net_context_bind+0xa8>
			return -EADDRNOTAVAIL;
   1c3f6:	f06f 037c 	mvn.w	r3, #124	; 0x7c
   1c3fa:	e7f3      	b.n	1c3e4 <net_context_bind+0xa8>
		return -EISCONN;
   1c3fc:	f06f 037e 	mvn.w	r3, #126	; 0x7e
}
   1c400:	4618      	mov	r0, r3
   1c402:	4770      	bx	lr
	return -EINVAL;
   1c404:	f06f 0315 	mvn.w	r3, #21
   1c408:	e7fa      	b.n	1c400 <net_context_bind+0xc4>

0001c40a <bind_default>:
	if (context->flags & NET_CONTEXT_FAMILY) {
   1c40a:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
   1c40e:	f013 0f10 	tst.w	r3, #16
   1c412:	d006      	beq.n	1c422 <bind_default+0x18>
		return AF_INET6;
   1c414:	230a      	movs	r3, #10
	if (family == AF_INET6) {
   1c416:	2b0a      	cmp	r3, #10
   1c418:	d120      	bne.n	1c45c <bind_default+0x52>
		if (net_sin6_ptr(&context->local)->sin6_addr) {
   1c41a:	68c3      	ldr	r3, [r0, #12]
   1c41c:	b11b      	cbz	r3, 1c426 <bind_default+0x1c>
			return 0;
   1c41e:	2000      	movs	r0, #0
   1c420:	4770      	bx	lr
	return AF_INET;
   1c422:	2302      	movs	r3, #2
   1c424:	e7f7      	b.n	1c416 <bind_default+0xc>
{
   1c426:	b530      	push	{r4, r5, lr}
   1c428:	b087      	sub	sp, #28
   1c42a:	4604      	mov	r4, r0
		addr6.sin6_family = AF_INET6;
   1c42c:	ad06      	add	r5, sp, #24
   1c42e:	230a      	movs	r3, #10
   1c430:	f825 3d18 	strh.w	r3, [r5, #-24]!
		memcpy(&addr6.sin6_addr, net_ipv6_unspecified_address(),
   1c434:	f002 fd96 	bl	1ef64 <net_ipv6_unspecified_address>
   1c438:	2210      	movs	r2, #16
   1c43a:	4601      	mov	r1, r0
   1c43c:	a801      	add	r0, sp, #4
   1c43e:	f7e3 ff3f 	bl	2c0 <memcpy>
			find_available_port(context,
   1c442:	4629      	mov	r1, r5
   1c444:	4620      	mov	r0, r4
   1c446:	f7ff faa1 	bl	1b98c <find_available_port>
		addr6.sin6_port =
   1c44a:	f8ad 0002 	strh.w	r0, [sp, #2]
		return net_context_bind(context, (struct sockaddr *)&addr6,
   1c44e:	2218      	movs	r2, #24
   1c450:	4629      	mov	r1, r5
   1c452:	4620      	mov	r0, r4
   1c454:	f7ff ff72 	bl	1c33c <net_context_bind>
}
   1c458:	b007      	add	sp, #28
   1c45a:	bd30      	pop	{r4, r5, pc}
	return -EINVAL;
   1c45c:	f06f 0015 	mvn.w	r0, #21
   1c460:	4770      	bx	lr

0001c462 <sendto>:
{
   1c462:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c464:	b085      	sub	sp, #20
   1c466:	9003      	str	r0, [sp, #12]
	return pkt->context;
   1c468:	68c5      	ldr	r5, [r0, #12]
	return context->flags & NET_CONTEXT_IN_USE;
   1c46a:	f895 005d 	ldrb.w	r0, [r5, #93]	; 0x5d
	if (!net_context_is_used(context)) {
   1c46e:	f010 0f01 	tst.w	r0, #1
   1c472:	d072      	beq.n	1c55a <sendto+0xf8>
	if (context->flags & NET_CONTEXT_PROTO) {
   1c474:	f010 0f40 	tst.w	r0, #64	; 0x40
   1c478:	d01f      	beq.n	1c4ba <sendto+0x58>
		return IPPROTO_TCP;
   1c47a:	f04f 0e06 	mov.w	lr, #6
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
   1c47e:	f1be 0f06 	cmp.w	lr, #6
   1c482:	d01d      	beq.n	1c4c0 <sendto+0x5e>
   1c484:	461f      	mov	r7, r3
   1c486:	4616      	mov	r6, r2
   1c488:	460c      	mov	r4, r1
	if (net_context_get_ip_proto(context) == IPPROTO_UDP) {
   1c48a:	f1be 0f11 	cmp.w	lr, #17
   1c48e:	d024      	beq.n	1c4da <sendto+0x78>
	if (!dst_addr) {
   1c490:	2c00      	cmp	r4, #0
   1c492:	d068      	beq.n	1c566 <sendto+0x104>
	if (net_pkt_family(pkt) == AF_INET6) {
   1c494:	9903      	ldr	r1, [sp, #12]
	return pkt->family;
   1c496:	f891 3038 	ldrb.w	r3, [r1, #56]	; 0x38
   1c49a:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   1c49e:	2b0a      	cmp	r3, #10
   1c4a0:	d164      	bne.n	1c56c <sendto+0x10a>
		if (addrlen < sizeof(struct sockaddr_in6)) {
   1c4a2:	2e17      	cmp	r6, #23
   1c4a4:	d965      	bls.n	1c572 <sendto+0x110>
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1c4a6:	6863      	ldr	r3, [r4, #4]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1c4a8:	b9f3      	cbnz	r3, 1c4e8 <sendto+0x86>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1c4aa:	68a3      	ldr	r3, [r4, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1c4ac:	bb63      	cbnz	r3, 1c508 <sendto+0xa6>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1c4ae:	68e3      	ldr	r3, [r4, #12]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1c4b0:	bb63      	cbnz	r3, 1c50c <sendto+0xaa>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   1c4b2:	6923      	ldr	r3, [r4, #16]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1c4b4:	b363      	cbz	r3, 1c510 <sendto+0xae>
   1c4b6:	2300      	movs	r3, #0
   1c4b8:	e017      	b.n	1c4ea <sendto+0x88>
	return IPPROTO_UDP;
   1c4ba:	f04f 0e11 	mov.w	lr, #17
   1c4be:	e7de      	b.n	1c47e <sendto+0x1c>
	return (context->flags >> NET_CONTEXT_STATE_SHIFT) &
   1c4c0:	f3c0 0041 	ubfx	r0, r0, #1, #2
		if (net_context_get_state(context) != NET_CONTEXT_CONNECTED) {
   1c4c4:	2802      	cmp	r0, #2
   1c4c6:	d14b      	bne.n	1c560 <sendto+0xfe>
		if (context->tcp->flags & NET_TCP_IS_SHUTDOWN) {
   1c4c8:	6e28      	ldr	r0, [r5, #96]	; 0x60
   1c4ca:	f8b0 00a4 	ldrh.w	r0, [r0, #164]	; 0xa4
   1c4ce:	f410 7f80 	tst.w	r0, #256	; 0x100
   1c4d2:	d0d7      	beq.n	1c484 <sendto+0x22>
			return -ESHUTDOWN;
   1c4d4:	f06f 036d 	mvn.w	r3, #109	; 0x6d
   1c4d8:	e03c      	b.n	1c554 <sendto+0xf2>
		ret = bind_default(context);
   1c4da:	4628      	mov	r0, r5
   1c4dc:	f7ff ff95 	bl	1c40a <bind_default>
		if (ret) {
   1c4e0:	4603      	mov	r3, r0
   1c4e2:	2800      	cmp	r0, #0
   1c4e4:	d0d4      	beq.n	1c490 <sendto+0x2e>
   1c4e6:	e035      	b.n	1c554 <sendto+0xf2>
   1c4e8:	2300      	movs	r3, #0
		if (net_is_ipv6_addr_unspecified(&addr6->sin6_addr)) {
   1c4ea:	2b00      	cmp	r3, #0
   1c4ec:	d144      	bne.n	1c578 <sendto+0x116>
	if (context->flags & NET_CONTEXT_PROTO) {
   1c4ee:	f895 305d 	ldrb.w	r3, [r5, #93]	; 0x5d
   1c4f2:	f013 0f40 	tst.w	r3, #64	; 0x40
   1c4f6:	d00d      	beq.n	1c514 <sendto+0xb2>
		return IPPROTO_TCP;
   1c4f8:	2306      	movs	r3, #6
	if (net_context_get_ip_proto(context) == IPPROTO_UDP) {
   1c4fa:	2b11      	cmp	r3, #17
   1c4fc:	d00c      	beq.n	1c518 <sendto+0xb6>
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
   1c4fe:	2b06      	cmp	r3, #6
   1c500:	d13d      	bne.n	1c57e <sendto+0x11c>
	return net_buf_frags_len(pkt->frags);
   1c502:	688a      	ldr	r2, [r1, #8]
	size_t bytes = 0;
   1c504:	2000      	movs	r0, #0
   1c506:	e011      	b.n	1c52c <sendto+0xca>
   1c508:	2300      	movs	r3, #0
   1c50a:	e7ee      	b.n	1c4ea <sendto+0x88>
   1c50c:	2300      	movs	r3, #0
   1c50e:	e7ec      	b.n	1c4ea <sendto+0x88>
   1c510:	2301      	movs	r3, #1
   1c512:	e7ea      	b.n	1c4ea <sendto+0x88>
	return IPPROTO_UDP;
   1c514:	2311      	movs	r3, #17
   1c516:	e7f0      	b.n	1c4fa <sendto+0x98>
		ret = create_udp_packet(context, pkt, dst_addr, &pkt);
   1c518:	ab03      	add	r3, sp, #12
   1c51a:	4622      	mov	r2, r4
   1c51c:	4628      	mov	r0, r5
   1c51e:	f7ff fc0f 	bl	1bd40 <create_udp_packet>
   1c522:	4603      	mov	r3, r0
   1c524:	e009      	b.n	1c53a <sendto+0xd8>
		bytes += buf->len;
   1c526:	8994      	ldrh	r4, [r2, #12]
   1c528:	4420      	add	r0, r4
		buf = buf->frags;
   1c52a:	6812      	ldr	r2, [r2, #0]
	while (buf) {
   1c52c:	2a00      	cmp	r2, #0
   1c52e:	d1fa      	bne.n	1c526 <sendto+0xc4>
	pkt->appdatalen = len;
   1c530:	8608      	strh	r0, [r1, #48]	; 0x30
		ret = net_tcp_queue_data(context, pkt);
   1c532:	4628      	mov	r0, r5
   1c534:	f006 fd08 	bl	22f48 <net_tcp_queue_data>
   1c538:	4603      	mov	r3, r0
	if (ret < 0) {
   1c53a:	2b00      	cmp	r3, #0
   1c53c:	db0a      	blt.n	1c554 <sendto+0xf2>
	return send_data(context, pkt, cb, timeout, token, user_data);
   1c53e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1c540:	9301      	str	r3, [sp, #4]
   1c542:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1c544:	9300      	str	r3, [sp, #0]
   1c546:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1c548:	463a      	mov	r2, r7
   1c54a:	9903      	ldr	r1, [sp, #12]
   1c54c:	4628      	mov	r0, r5
   1c54e:	f7ff fc1d 	bl	1bd8c <send_data>
   1c552:	4603      	mov	r3, r0
}
   1c554:	4618      	mov	r0, r3
   1c556:	b005      	add	sp, #20
   1c558:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -EBADF;
   1c55a:	f06f 0308 	mvn.w	r3, #8
   1c55e:	e7f9      	b.n	1c554 <sendto+0xf2>
			return -ENOTCONN;
   1c560:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   1c564:	e7f6      	b.n	1c554 <sendto+0xf2>
		return -EDESTADDRREQ;
   1c566:	f06f 0378 	mvn.w	r3, #120	; 0x78
   1c56a:	e7f3      	b.n	1c554 <sendto+0xf2>
		return -EINVAL;
   1c56c:	f06f 0315 	mvn.w	r3, #21
   1c570:	e7f0      	b.n	1c554 <sendto+0xf2>
			return -EINVAL;
   1c572:	f06f 0315 	mvn.w	r3, #21
   1c576:	e7ed      	b.n	1c554 <sendto+0xf2>
			return -EDESTADDRREQ;
   1c578:	f06f 0378 	mvn.w	r3, #120	; 0x78
   1c57c:	e7ea      	b.n	1c554 <sendto+0xf2>
		return -EPROTONOSUPPORT;
   1c57e:	f06f 037a 	mvn.w	r3, #122	; 0x7a
   1c582:	e7e7      	b.n	1c554 <sendto+0xf2>

0001c584 <recv_udp>:
#if defined(CONFIG_NET_UDP)
static int recv_udp(struct net_context *context,
		    net_context_recv_cb_t cb,
		    s32_t timeout,
		    void *user_data)
{
   1c584:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c586:	b08f      	sub	sp, #60	; 0x3c
   1c588:	4604      	mov	r4, r0
   1c58a:	460d      	mov	r5, r1
   1c58c:	461e      	mov	r6, r3
	struct sockaddr local_addr = {
   1c58e:	2300      	movs	r3, #0
   1c590:	9304      	str	r3, [sp, #16]
   1c592:	9305      	str	r3, [sp, #20]
   1c594:	9306      	str	r3, [sp, #24]
   1c596:	9307      	str	r3, [sp, #28]
   1c598:	9308      	str	r3, [sp, #32]
   1c59a:	9309      	str	r3, [sp, #36]	; 0x24
	if (context->flags & NET_CONTEXT_FAMILY) {
   1c59c:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
   1c5a0:	f013 0f10 	tst.w	r3, #16
   1c5a4:	d037      	beq.n	1c616 <recv_udp+0x92>
		return AF_INET6;
   1c5a6:	230a      	movs	r3, #10
   1c5a8:	f8ad 3010 	strh.w	r3, [sp, #16]
	u16_t lport = 0;
	int ret;

	ARG_UNUSED(timeout);

	if (context->conn_handler) {
   1c5ac:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   1c5ae:	b118      	cbz	r0, 1c5b8 <recv_udp+0x34>
		net_conn_unregister(context->conn_handler);
   1c5b0:	f008 f864 	bl	2467c <net_conn_unregister>
		context->conn_handler = NULL;
   1c5b4:	2300      	movs	r3, #0
   1c5b6:	62e3      	str	r3, [r4, #44]	; 0x2c
	}

	ret = bind_default(context);
   1c5b8:	4620      	mov	r0, r4
   1c5ba:	f7ff ff26 	bl	1c40a <bind_default>
	if (ret) {
   1c5be:	4603      	mov	r3, r0
   1c5c0:	bb30      	cbnz	r0, 1c610 <recv_udp+0x8c>
	if (context->flags & NET_CONTEXT_FAMILY) {
   1c5c2:	f894 705d 	ldrb.w	r7, [r4, #93]	; 0x5d
   1c5c6:	f017 0f10 	tst.w	r7, #16
   1c5ca:	d026      	beq.n	1c61a <recv_udp+0x96>
		return AF_INET6;
   1c5cc:	230a      	movs	r3, #10
		return ret;
	}

#if defined(CONFIG_NET_IPV6)
	if (net_context_get_family(context) == AF_INET6) {
   1c5ce:	2b0a      	cmp	r3, #10
   1c5d0:	d025      	beq.n	1c61e <recv_udp+0x9a>
	u16_t lport = 0;
   1c5d2:	f04f 0e00 	mov.w	lr, #0
	struct sockaddr *laddr = NULL;
   1c5d6:	4672      	mov	r2, lr

		lport = net_sin((struct sockaddr *)&context->local)->sin_port;
	}
#endif /* CONFIG_NET_IPV4 */

	context->recv_cb = cb;
   1c5d8:	6325      	str	r5, [r4, #48]	; 0x30
	if (context->flags & NET_CONTEXT_PROTO) {
   1c5da:	f017 0f40 	tst.w	r7, #64	; 0x40
   1c5de:	d037      	beq.n	1c650 <recv_udp+0xcc>
		return IPPROTO_TCP;
   1c5e0:	2006      	movs	r0, #6

	ret = net_conn_register(net_context_get_ip_proto(context),
   1c5e2:	f017 0f80 	tst.w	r7, #128	; 0x80
   1c5e6:	d135      	bne.n	1c654 <recv_udp+0xd0>
   1c5e8:	2100      	movs	r1, #0
				context->flags & NET_CONTEXT_REMOTE_ADDR_SET ?
							&context->remote : NULL,
				laddr,
				ntohs(net_sin(&context->remote)->sin_port),
   1c5ea:	8ae5      	ldrh	r5, [r4, #22]
   1c5ec:	022b      	lsls	r3, r5, #8
   1c5ee:	ea43 2315 	orr.w	r3, r3, r5, lsr #8
				ntohs(lport),
   1c5f2:	ea4f 251e 	mov.w	r5, lr, lsr #8
   1c5f6:	ea45 250e 	orr.w	r5, r5, lr, lsl #8
	ret = net_conn_register(net_context_get_ip_proto(context),
   1c5fa:	b2ad      	uxth	r5, r5
   1c5fc:	342c      	adds	r4, #44	; 0x2c
   1c5fe:	9403      	str	r4, [sp, #12]
   1c600:	9602      	str	r6, [sp, #8]
   1c602:	4c16      	ldr	r4, [pc, #88]	; (1c65c <recv_udp+0xd8>)
   1c604:	9401      	str	r4, [sp, #4]
   1c606:	9500      	str	r5, [sp, #0]
   1c608:	b29b      	uxth	r3, r3
   1c60a:	f008 f855 	bl	246b8 <net_conn_register>
   1c60e:	4603      	mov	r3, r0
				packet_received,
				user_data,
				&context->conn_handler);

	return ret;
}
   1c610:	4618      	mov	r0, r3
   1c612:	b00f      	add	sp, #60	; 0x3c
   1c614:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return AF_INET;
   1c616:	2302      	movs	r3, #2
   1c618:	e7c6      	b.n	1c5a8 <recv_udp+0x24>
   1c61a:	2302      	movs	r3, #2
   1c61c:	e7d7      	b.n	1c5ce <recv_udp+0x4a>
		if (net_sin6_ptr(&context->local)->sin6_addr) {
   1c61e:	68e3      	ldr	r3, [r4, #12]
   1c620:	b1a3      	cbz	r3, 1c64c <recv_udp+0xc8>
			net_ipaddr_copy(&net_sin6(&local_addr)->sin6_addr,
   1c622:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
   1c626:	6818      	ldr	r0, [r3, #0]
   1c628:	6859      	ldr	r1, [r3, #4]
   1c62a:	689a      	ldr	r2, [r3, #8]
   1c62c:	68db      	ldr	r3, [r3, #12]
   1c62e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   1c632:	f10d 0e14 	add.w	lr, sp, #20
   1c636:	ab0e      	add	r3, sp, #56	; 0x38
   1c638:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
   1c63c:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
			laddr = &local_addr;
   1c640:	aa04      	add	r2, sp, #16
			net_sin6((struct sockaddr *)&context->local)->sin6_port;
   1c642:	f8b4 e00a 	ldrh.w	lr, [r4, #10]
		net_sin6(&local_addr)->sin6_port =
   1c646:	f8ad e012 	strh.w	lr, [sp, #18]
   1c64a:	e7c5      	b.n	1c5d8 <recv_udp+0x54>
	struct sockaddr *laddr = NULL;
   1c64c:	2200      	movs	r2, #0
   1c64e:	e7f8      	b.n	1c642 <recv_udp+0xbe>
	return IPPROTO_UDP;
   1c650:	2011      	movs	r0, #17
   1c652:	e7c6      	b.n	1c5e2 <recv_udp+0x5e>
	ret = net_conn_register(net_context_get_ip_proto(context),
   1c654:	f104 0114 	add.w	r1, r4, #20
   1c658:	e7c7      	b.n	1c5ea <recv_udp+0x66>
   1c65a:	bf00      	nop
   1c65c:	0001ba91 	.word	0x0001ba91

0001c660 <net_context_connect>:
{
   1c660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c664:	b090      	sub	sp, #64	; 0x40
	return context->flags & NET_CONTEXT_IN_USE;
   1c666:	f890 405d 	ldrb.w	r4, [r0, #93]	; 0x5d
	if (!net_context_is_used(context)) {
   1c66a:	f014 0f01 	tst.w	r4, #1
   1c66e:	f000 80c9 	beq.w	1c804 <net_context_connect+0x1a4>
   1c672:	461f      	mov	r7, r3
   1c674:	4615      	mov	r5, r2
   1c676:	460e      	mov	r6, r1
   1c678:	4604      	mov	r4, r0
	ret = bind_default(context);
   1c67a:	f7ff fec6 	bl	1c40a <bind_default>
	if (ret) {
   1c67e:	4680      	mov	r8, r0
   1c680:	2800      	cmp	r0, #0
   1c682:	f040 80c1 	bne.w	1c808 <net_context_connect+0x1a8>
	if (addr->sa_family != net_context_get_family(context)) {
   1c686:	8831      	ldrh	r1, [r6, #0]
	if (context->flags & NET_CONTEXT_FAMILY) {
   1c688:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
   1c68c:	f013 0f10 	tst.w	r3, #16
   1c690:	d02b      	beq.n	1c6ea <net_context_connect+0x8a>
		return AF_INET6;
   1c692:	220a      	movs	r2, #10
   1c694:	4291      	cmp	r1, r2
   1c696:	f040 80bb 	bne.w	1c810 <net_context_connect+0x1b0>
	return (context->flags >> NET_CONTEXT_STATE_SHIFT) &
   1c69a:	f3c3 0341 	ubfx	r3, r3, #1, #2
	if (net_context_get_state(context) == NET_CONTEXT_LISTENING) {
   1c69e:	2b03      	cmp	r3, #3
   1c6a0:	f000 80b9 	beq.w	1c816 <net_context_connect+0x1b6>
	if (net_context_get_family(context) == AF_INET6) {
   1c6a4:	2a0a      	cmp	r2, #10
   1c6a6:	f040 80b9 	bne.w	1c81c <net_context_connect+0x1bc>
		if (addrlen < sizeof(struct sockaddr_in6)) {
   1c6aa:	2d17      	cmp	r5, #23
   1c6ac:	f240 80b9 	bls.w	1c822 <net_context_connect+0x1c2>
	return addr->s6_addr[0] == 0xFF;
   1c6b0:	7e23      	ldrb	r3, [r4, #24]
		if (net_is_ipv6_addr_mcast(&addr6->sin6_addr)) {
   1c6b2:	2bff      	cmp	r3, #255	; 0xff
   1c6b4:	f000 80b8 	beq.w	1c828 <net_context_connect+0x1c8>
		memcpy(&addr6->sin6_addr, &net_sin6(addr)->sin6_addr,
   1c6b8:	2210      	movs	r2, #16
   1c6ba:	1d31      	adds	r1, r6, #4
   1c6bc:	f104 0018 	add.w	r0, r4, #24
   1c6c0:	f7e3 fdfe 	bl	2c0 <memcpy>
		addr6->sin6_port = net_sin6(addr)->sin6_port;
   1c6c4:	f8b6 c002 	ldrh.w	ip, [r6, #2]
   1c6c8:	f8a4 c016 	strh.w	ip, [r4, #22]
		addr6->sin6_family = AF_INET6;
   1c6cc:	230a      	movs	r3, #10
   1c6ce:	82a3      	strh	r3, [r4, #20]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1c6d0:	69a3      	ldr	r3, [r4, #24]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1c6d2:	b963      	cbnz	r3, 1c6ee <net_context_connect+0x8e>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1c6d4:	69e3      	ldr	r3, [r4, #28]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1c6d6:	2b00      	cmp	r3, #0
   1c6d8:	d174      	bne.n	1c7c4 <net_context_connect+0x164>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1c6da:	6a23      	ldr	r3, [r4, #32]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1c6dc:	2b00      	cmp	r3, #0
   1c6de:	d173      	bne.n	1c7c8 <net_context_connect+0x168>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   1c6e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1c6e2:	2b00      	cmp	r3, #0
   1c6e4:	d072      	beq.n	1c7cc <net_context_connect+0x16c>
   1c6e6:	4643      	mov	r3, r8
   1c6e8:	e002      	b.n	1c6f0 <net_context_connect+0x90>
	return AF_INET;
   1c6ea:	2202      	movs	r2, #2
   1c6ec:	e7d2      	b.n	1c694 <net_context_connect+0x34>
   1c6ee:	4643      	mov	r3, r8
		if (!net_is_ipv6_addr_unspecified(&addr6->sin6_addr)) {
   1c6f0:	f013 0f01 	tst.w	r3, #1
   1c6f4:	d16c      	bne.n	1c7d0 <net_context_connect+0x170>
			context->flags |= NET_CONTEXT_REMOTE_ADDR_SET;
   1c6f6:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
   1c6fa:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1c6fe:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
		net_sin6_ptr(&context->local)->sin6_family = AF_INET6;
   1c702:	230a      	movs	r3, #10
   1c704:	8123      	strh	r3, [r4, #8]
		net_sin6(&local_addr)->sin6_family = AF_INET6;
   1c706:	f8ad 3018 	strh.w	r3, [sp, #24]
		net_sin6(&local_addr)->sin6_port = lport =
   1c70a:	f8b4 e00a 	ldrh.w	lr, [r4, #10]
   1c70e:	f8ad e01a 	strh.w	lr, [sp, #26]
		if (net_sin6_ptr(&context->local)->sin6_addr) {
   1c712:	68e3      	ldr	r3, [r4, #12]
   1c714:	2b00      	cmp	r3, #0
   1c716:	d062      	beq.n	1c7de <net_context_connect+0x17e>
			net_ipaddr_copy(&net_sin6(&local_addr)->sin6_addr,
   1c718:	ad0c      	add	r5, sp, #48	; 0x30
   1c71a:	6818      	ldr	r0, [r3, #0]
   1c71c:	6859      	ldr	r1, [r3, #4]
   1c71e:	689a      	ldr	r2, [r3, #8]
   1c720:	68db      	ldr	r3, [r3, #12]
   1c722:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1c724:	ad07      	add	r5, sp, #28
   1c726:	ab10      	add	r3, sp, #64	; 0x40
   1c728:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
   1c72c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
			laddr = &local_addr;
   1c730:	aa06      	add	r2, sp, #24
	if (context->flags & NET_CONTEXT_TYPE) {
   1c732:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
   1c736:	f013 0f20 	tst.w	r3, #32
   1c73a:	d052      	beq.n	1c7e2 <net_context_connect+0x182>
		return SOCK_STREAM;
   1c73c:	2301      	movs	r3, #1
	if (net_context_get_type(context) == SOCK_DGRAM) {
   1c73e:	2b02      	cmp	r3, #2
   1c740:	d051      	beq.n	1c7e6 <net_context_connect+0x186>
	if (net_context_get_type(context) != SOCK_STREAM) {
   1c742:	2b01      	cmp	r3, #1
   1c744:	d173      	bne.n	1c82e <net_context_connect+0x1ce>
			       ntohs(rport),
   1c746:	ea4f 231c 	mov.w	r3, ip, lsr #8
   1c74a:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
			       ntohs(lport),
   1c74e:	ea4f 211e 	mov.w	r1, lr, lsr #8
   1c752:	ea41 210e 	orr.w	r1, r1, lr, lsl #8
	ret = net_tcp_register(addr,
   1c756:	b289      	uxth	r1, r1
   1c758:	f104 002c 	add.w	r0, r4, #44	; 0x2c
	return net_conn_register(IPPROTO_TCP, remote_addr, local_addr,
   1c75c:	9003      	str	r0, [sp, #12]
   1c75e:	9402      	str	r4, [sp, #8]
   1c760:	4835      	ldr	r0, [pc, #212]	; (1c838 <net_context_connect+0x1d8>)
   1c762:	9001      	str	r0, [sp, #4]
   1c764:	9100      	str	r1, [sp, #0]
   1c766:	b29b      	uxth	r3, r3
   1c768:	4631      	mov	r1, r6
   1c76a:	2006      	movs	r0, #6
   1c76c:	f007 ffa4 	bl	246b8 <net_conn_register>
	if (ret < 0) {
   1c770:	2800      	cmp	r0, #0
   1c772:	db5f      	blt.n	1c834 <net_context_connect+0x1d4>
	context->connect_cb = cb;
   1c774:	63a7      	str	r7, [r4, #56]	; 0x38
	context->user_data = user_data;
   1c776:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1c778:	6023      	str	r3, [r4, #0]
	context->flags &= ~(NET_CONTEXT_STATE_MASK << NET_CONTEXT_STATE_SHIFT);
   1c77a:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
   1c77e:	f003 03f9 	and.w	r3, r3, #249	; 0xf9
	context->flags |= ((state & NET_CONTEXT_STATE_MASK) <<
   1c782:	f043 0302 	orr.w	r3, r3, #2
   1c786:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
	net_tcp_change_state(context->tcp, NET_TCP_SYN_SENT);
   1c78a:	2102      	movs	r1, #2
   1c78c:	6e20      	ldr	r0, [r4, #96]	; 0x60
   1c78e:	f006 fa6e 	bl	22c6e <net_tcp_change_state>
	struct net_pkt *pkt = NULL;
   1c792:	2200      	movs	r2, #0
   1c794:	ab10      	add	r3, sp, #64	; 0x40
   1c796:	f843 2d2c 	str.w	r2, [r3, #-44]!
	ret = net_tcp_prepare_segment(context->tcp, flags, NULL, 0,
   1c79a:	9302      	str	r3, [sp, #8]
   1c79c:	9601      	str	r6, [sp, #4]
   1c79e:	9200      	str	r2, [sp, #0]
   1c7a0:	4613      	mov	r3, r2
   1c7a2:	2102      	movs	r1, #2
   1c7a4:	6e20      	ldr	r0, [r4, #96]	; 0x60
   1c7a6:	f006 faff 	bl	22da8 <net_tcp_prepare_segment>
	if (ret) {
   1c7aa:	b310      	cbz	r0, 1c7f2 <net_context_connect+0x192>
	if (timeout != 0 && k_sem_take(&context->tcp->connect_wait, timeout)) {
   1c7ac:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1c7ae:	b35b      	cbz	r3, 1c808 <net_context_connect+0x1a8>
   1c7b0:	6e20      	ldr	r0, [r4, #96]	; 0x60
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   1c7b2:	4619      	mov	r1, r3
   1c7b4:	30ac      	adds	r0, #172	; 0xac
   1c7b6:	f00c f803 	bl	287c0 <_impl_k_sem_take>
   1c7ba:	4680      	mov	r8, r0
   1c7bc:	b320      	cbz	r0, 1c808 <net_context_connect+0x1a8>
		return -ETIMEDOUT;
   1c7be:	f06f 0873 	mvn.w	r8, #115	; 0x73
   1c7c2:	e021      	b.n	1c808 <net_context_connect+0x1a8>
   1c7c4:	4643      	mov	r3, r8
   1c7c6:	e793      	b.n	1c6f0 <net_context_connect+0x90>
   1c7c8:	4643      	mov	r3, r8
   1c7ca:	e791      	b.n	1c6f0 <net_context_connect+0x90>
   1c7cc:	2301      	movs	r3, #1
   1c7ce:	e78f      	b.n	1c6f0 <net_context_connect+0x90>
			context->flags &= ~NET_CONTEXT_REMOTE_ADDR_SET;
   1c7d0:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
   1c7d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1c7d8:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
   1c7dc:	e791      	b.n	1c702 <net_context_connect+0xa2>
	struct sockaddr *laddr = NULL;
   1c7de:	2200      	movs	r2, #0
   1c7e0:	e7a7      	b.n	1c732 <net_context_connect+0xd2>
	return SOCK_DGRAM;
   1c7e2:	2302      	movs	r3, #2
   1c7e4:	e7ab      	b.n	1c73e <net_context_connect+0xde>
		if (cb) {
   1c7e6:	b17f      	cbz	r7, 1c808 <net_context_connect+0x1a8>
			cb(context, 0, user_data);
   1c7e8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   1c7ea:	2100      	movs	r1, #0
   1c7ec:	4620      	mov	r0, r4
   1c7ee:	47b8      	blx	r7
   1c7f0:	e00a      	b.n	1c808 <net_context_connect+0x1a8>
	ret = net_send_data(pkt);
   1c7f2:	9805      	ldr	r0, [sp, #20]
   1c7f4:	f7fd fdf4 	bl	1a3e0 <net_send_data>
	if (ret < 0) {
   1c7f8:	2800      	cmp	r0, #0
   1c7fa:	dad7      	bge.n	1c7ac <net_context_connect+0x14c>
		net_pkt_unref(pkt);
   1c7fc:	9805      	ldr	r0, [sp, #20]
   1c7fe:	f000 f9f0 	bl	1cbe2 <net_pkt_unref>
   1c802:	e7d3      	b.n	1c7ac <net_context_connect+0x14c>
		return -EBADF;
   1c804:	f06f 0808 	mvn.w	r8, #8
}
   1c808:	4640      	mov	r0, r8
   1c80a:	b010      	add	sp, #64	; 0x40
   1c80c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EINVAL;
   1c810:	f06f 0815 	mvn.w	r8, #21
   1c814:	e7f8      	b.n	1c808 <net_context_connect+0x1a8>
		return -EOPNOTSUPP;
   1c816:	f06f 085e 	mvn.w	r8, #94	; 0x5e
   1c81a:	e7f5      	b.n	1c808 <net_context_connect+0x1a8>
		return -EINVAL; /* Not IPv4 or IPv6 */
   1c81c:	f06f 0815 	mvn.w	r8, #21
   1c820:	e7f2      	b.n	1c808 <net_context_connect+0x1a8>
			return -EINVAL;
   1c822:	f06f 0815 	mvn.w	r8, #21
   1c826:	e7ef      	b.n	1c808 <net_context_connect+0x1a8>
			return -EADDRNOTAVAIL;
   1c828:	f06f 087c 	mvn.w	r8, #124	; 0x7c
   1c82c:	e7ec      	b.n	1c808 <net_context_connect+0x1a8>
		return -ENOTSUP;
   1c82e:	f06f 0885 	mvn.w	r8, #133	; 0x85
   1c832:	e7e9      	b.n	1c808 <net_context_connect+0x1a8>
		return ret;
   1c834:	4680      	mov	r8, r0
   1c836:	e7e7      	b.n	1c808 <net_context_connect+0x1a8>
   1c838:	0001c0e1 	.word	0x0001c0e1

0001c83c <net_context_send>:
{
   1c83c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c83e:	b085      	sub	sp, #20
	return pkt->context;
   1c840:	68c4      	ldr	r4, [r0, #12]
	if (!(context->flags & NET_CONTEXT_REMOTE_ADDR_SET) ||
   1c842:	f994 505d 	ldrsb.w	r5, [r4, #93]	; 0x5d
   1c846:	2d00      	cmp	r5, #0
   1c848:	da17      	bge.n	1c87a <net_context_send+0x3e>
	    !net_sin(&context->remote)->sin_port) {
   1c84a:	8ae5      	ldrh	r5, [r4, #22]
	if (!(context->flags & NET_CONTEXT_REMOTE_ADDR_SET) ||
   1c84c:	b1c5      	cbz	r5, 1c880 <net_context_send+0x44>
	return pkt->family;
   1c84e:	f890 5038 	ldrb.w	r5, [r0, #56]	; 0x38
   1c852:	f3c5 05c3 	ubfx	r5, r5, #3, #4
	if (net_pkt_family(pkt) == AF_INET6) {
   1c856:	2d0a      	cmp	r5, #10
   1c858:	d00d      	beq.n	1c876 <net_context_send+0x3a>
		addrlen = 0;
   1c85a:	2700      	movs	r7, #0
   1c85c:	461e      	mov	r6, r3
   1c85e:	460b      	mov	r3, r1
	return sendto(pkt, &context->remote, addrlen, cb, timeout, token,
   1c860:	990a      	ldr	r1, [sp, #40]	; 0x28
   1c862:	9102      	str	r1, [sp, #8]
   1c864:	9601      	str	r6, [sp, #4]
   1c866:	9200      	str	r2, [sp, #0]
   1c868:	463a      	mov	r2, r7
   1c86a:	f104 0114 	add.w	r1, r4, #20
   1c86e:	f7ff fdf8 	bl	1c462 <sendto>
}
   1c872:	b005      	add	sp, #20
   1c874:	bdf0      	pop	{r4, r5, r6, r7, pc}
		addrlen = sizeof(struct sockaddr_in6);
   1c876:	2718      	movs	r7, #24
   1c878:	e7f0      	b.n	1c85c <net_context_send+0x20>
		return -EDESTADDRREQ;
   1c87a:	f06f 0078 	mvn.w	r0, #120	; 0x78
   1c87e:	e7f8      	b.n	1c872 <net_context_send+0x36>
   1c880:	f06f 0078 	mvn.w	r0, #120	; 0x78
   1c884:	e7f5      	b.n	1c872 <net_context_send+0x36>

0001c886 <net_context_sendto>:
{
   1c886:	b510      	push	{r4, lr}
   1c888:	b084      	sub	sp, #16
   1c88a:	461c      	mov	r4, r3
	return pkt->context;
   1c88c:	68c3      	ldr	r3, [r0, #12]
	if (context->flags & NET_CONTEXT_PROTO) {
   1c88e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
   1c892:	f013 0f40 	tst.w	r3, #64	; 0x40
   1c896:	d00d      	beq.n	1c8b4 <net_context_sendto+0x2e>
		return IPPROTO_TCP;
   1c898:	2306      	movs	r3, #6
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
   1c89a:	2b06      	cmp	r3, #6
   1c89c:	d00c      	beq.n	1c8b8 <net_context_sendto+0x32>
	return sendto(pkt, dst_addr, addrlen, cb, timeout, token, user_data);
   1c89e:	9b08      	ldr	r3, [sp, #32]
   1c8a0:	9302      	str	r3, [sp, #8]
   1c8a2:	9b07      	ldr	r3, [sp, #28]
   1c8a4:	9301      	str	r3, [sp, #4]
   1c8a6:	9b06      	ldr	r3, [sp, #24]
   1c8a8:	9300      	str	r3, [sp, #0]
   1c8aa:	4623      	mov	r3, r4
   1c8ac:	f7ff fdd9 	bl	1c462 <sendto>
}
   1c8b0:	b004      	add	sp, #16
   1c8b2:	bd10      	pop	{r4, pc}
	return IPPROTO_UDP;
   1c8b4:	2311      	movs	r3, #17
   1c8b6:	e7f0      	b.n	1c89a <net_context_sendto+0x14>
		return net_context_send(pkt, cb, timeout, token, user_data);
   1c8b8:	9b08      	ldr	r3, [sp, #32]
   1c8ba:	9300      	str	r3, [sp, #0]
   1c8bc:	9b07      	ldr	r3, [sp, #28]
   1c8be:	9a06      	ldr	r2, [sp, #24]
   1c8c0:	4621      	mov	r1, r4
   1c8c2:	f7ff ffbb 	bl	1c83c <net_context_send>
   1c8c6:	e7f3      	b.n	1c8b0 <net_context_sendto+0x2a>

0001c8c8 <net_context_recv>:

int net_context_recv(struct net_context *context,
		     net_context_recv_cb_t cb,
		     s32_t timeout,
		     void *user_data)
{
   1c8c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return context->flags & NET_CONTEXT_IN_USE;
   1c8ca:	f890 405d 	ldrb.w	r4, [r0, #93]	; 0x5d
	NET_ASSERT(context);

	if (!net_context_is_used(context)) {
   1c8ce:	f014 0f01 	tst.w	r4, #1
   1c8d2:	d030      	beq.n	1c936 <net_context_recv+0x6e>
	if (context->flags & NET_CONTEXT_PROTO) {
   1c8d4:	f014 0f40 	tst.w	r4, #64	; 0x40
   1c8d8:	d023      	beq.n	1c922 <net_context_recv+0x5a>
		return IPPROTO_TCP;
   1c8da:	2606      	movs	r6, #6
   1c8dc:	4617      	mov	r7, r2
   1c8de:	4605      	mov	r5, r0
			context, cb, timeout, user_data);
	}
#endif /* CONFIG_NET_OFFLOAD */

#if defined(CONFIG_NET_UDP)
	if (net_context_get_ip_proto(context) == IPPROTO_UDP) {
   1c8e0:	2e11      	cmp	r6, #17
   1c8e2:	d020      	beq.n	1c926 <net_context_recv+0x5e>
		}
	} else
#endif /* CONFIG_NET_UDP */

#if defined(CONFIG_NET_TCP)
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
   1c8e4:	2e06      	cmp	r6, #6
   1c8e6:	d129      	bne.n	1c93c <net_context_recv+0x74>
		NET_ASSERT(context->tcp);

		if (context->tcp->flags & NET_TCP_IS_SHUTDOWN) {
   1c8e8:	6e02      	ldr	r2, [r0, #96]	; 0x60
   1c8ea:	f8b2 00a4 	ldrh.w	r0, [r2, #164]	; 0xa4
   1c8ee:	f410 7f80 	tst.w	r0, #256	; 0x100
   1c8f2:	d126      	bne.n	1c942 <net_context_recv+0x7a>
	return (context->flags >> NET_CONTEXT_STATE_SHIFT) &
   1c8f4:	f3c4 0441 	ubfx	r4, r4, #1, #2
			return -ESHUTDOWN;
		} else if (net_context_get_state(context)
   1c8f8:	2c02      	cmp	r4, #2
   1c8fa:	d125      	bne.n	1c948 <net_context_recv+0x80>
			   != NET_CONTEXT_CONNECTED) {
			return -ENOTCONN;
		}

		context->recv_cb = cb;
   1c8fc:	6329      	str	r1, [r5, #48]	; 0x30
		context->tcp->recv_user_data = user_data;
   1c8fe:	6053      	str	r3, [r2, #4]
	{
		return -EPROTOTYPE;
	}

#if defined(CONFIG_NET_CONTEXT_SYNC_RECV)
	if (timeout) {
   1c900:	b32f      	cbz	r7, 1c94e <net_context_recv+0x86>
		/* Make sure we have the lock, then the packet_received()
		 * callback will release the semaphore when data has been
		 * received.
		 */
		while (k_sem_take(&context->recv_data_wait, K_NO_WAIT)) {
   1c902:	f105 0444 	add.w	r4, r5, #68	; 0x44
   1c906:	2100      	movs	r1, #0
   1c908:	4620      	mov	r0, r4
   1c90a:	f00b ff59 	bl	287c0 <_impl_k_sem_take>
   1c90e:	4606      	mov	r6, r0
   1c910:	2800      	cmp	r0, #0
   1c912:	d1f6      	bne.n	1c902 <net_context_recv+0x3a>
   1c914:	4639      	mov	r1, r7
   1c916:	4620      	mov	r0, r4
   1c918:	f00b ff52 	bl	287c0 <_impl_k_sem_take>
			;
		}

		if (!k_sem_take(&context->recv_data_wait, timeout)) {
   1c91c:	b140      	cbz	r0, 1c930 <net_context_recv+0x68>
		}
	}
#endif /* CONFIG_NET_CONTEXT_SYNC_RECV */

	return 0;
}
   1c91e:	4630      	mov	r0, r6
   1c920:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return IPPROTO_UDP;
   1c922:	2611      	movs	r6, #17
   1c924:	e7da      	b.n	1c8dc <net_context_recv+0x14>
		int ret = recv_udp(context, cb, timeout, user_data);
   1c926:	f7ff fe2d 	bl	1c584 <recv_udp>
		if (ret < 0) {
   1c92a:	1e06      	subs	r6, r0, #0
   1c92c:	dae8      	bge.n	1c900 <net_context_recv+0x38>
   1c92e:	e7f6      	b.n	1c91e <net_context_recv+0x56>
			return -ETIMEDOUT;
   1c930:	f06f 0673 	mvn.w	r6, #115	; 0x73
   1c934:	e7f3      	b.n	1c91e <net_context_recv+0x56>
		return -EBADF;
   1c936:	f06f 0608 	mvn.w	r6, #8
   1c93a:	e7f0      	b.n	1c91e <net_context_recv+0x56>
		return -EPROTOTYPE;
   1c93c:	f06f 066a 	mvn.w	r6, #106	; 0x6a
   1c940:	e7ed      	b.n	1c91e <net_context_recv+0x56>
			return -ESHUTDOWN;
   1c942:	f06f 066d 	mvn.w	r6, #109	; 0x6d
   1c946:	e7ea      	b.n	1c91e <net_context_recv+0x56>
			return -ENOTCONN;
   1c948:	f06f 067f 	mvn.w	r6, #127	; 0x7f
   1c94c:	e7e7      	b.n	1c91e <net_context_recv+0x56>
	return 0;
   1c94e:	2600      	movs	r6, #0
   1c950:	e7e5      	b.n	1c91e <net_context_recv+0x56>
	...

0001c954 <net_context_foreach>:
#else
	return -EPROTOTYPE;
#endif
}
void net_context_foreach(net_context_cb_t cb, void *user_data)
{
   1c954:	b570      	push	{r4, r5, r6, lr}
   1c956:	4606      	mov	r6, r0
   1c958:	460d      	mov	r5, r1
   1c95a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1c95e:	480d      	ldr	r0, [pc, #52]	; (1c994 <net_context_foreach+0x40>)
   1c960:	f00b ff2e 	bl	287c0 <_impl_k_sem_take>
	int i;

	k_sem_take(&contexts_lock, K_FOREVER);

	for (i = 0; i < NET_MAX_CONTEXT; i++) {
   1c964:	2400      	movs	r4, #0
   1c966:	e000      	b.n	1c96a <net_context_foreach+0x16>
   1c968:	3401      	adds	r4, #1
   1c96a:	2c05      	cmp	r4, #5
   1c96c:	dc0e      	bgt.n	1c98c <net_context_foreach+0x38>
	return context->flags & NET_CONTEXT_IN_USE;
   1c96e:	2368      	movs	r3, #104	; 0x68
   1c970:	4a09      	ldr	r2, [pc, #36]	; (1c998 <net_context_foreach+0x44>)
   1c972:	fb03 2304 	mla	r3, r3, r4, r2
   1c976:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
		if (!net_context_is_used(&contexts[i])) {
   1c97a:	f013 0f01 	tst.w	r3, #1
   1c97e:	d0f3      	beq.n	1c968 <net_context_foreach+0x14>
			continue;
		}

		cb(&contexts[i], user_data);
   1c980:	4629      	mov	r1, r5
   1c982:	2068      	movs	r0, #104	; 0x68
   1c984:	fb00 2004 	mla	r0, r0, r4, r2
   1c988:	47b0      	blx	r6
   1c98a:	e7ed      	b.n	1c968 <net_context_foreach+0x14>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   1c98c:	4801      	ldr	r0, [pc, #4]	; (1c994 <net_context_foreach+0x40>)
   1c98e:	f00b ff04 	bl	2879a <_impl_k_sem_give>
   1c992:	bd70      	pop	{r4, r5, r6, pc}
   1c994:	20001da8 	.word	0x20001da8
   1c998:	20001b38 	.word	0x20001b38

0001c99c <net_context_init>:

	k_sem_give(&contexts_lock);
}

void net_context_init(void)
{
   1c99c:	b508      	push	{r3, lr}
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
   1c99e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1c9a2:	2101      	movs	r1, #1
   1c9a4:	4801      	ldr	r0, [pc, #4]	; (1c9ac <net_context_init+0x10>)
   1c9a6:	f00b feef 	bl	28788 <_impl_k_sem_init>
   1c9aa:	bd08      	pop	{r3, pc}
   1c9ac:	20001da8 	.word	0x20001da8

0001c9b0 <net_pkt_get_reserve>:
#else /* CONFIG_NET_DEBUG_NET_PKT */
struct net_pkt *net_pkt_get_reserve(struct k_mem_slab *slab,
				    u16_t reserve_head,
				    s32_t timeout)
#endif /* CONFIG_NET_DEBUG_NET_PKT */
{
   1c9b0:	b570      	push	{r4, r5, r6, lr}
   1c9b2:	b082      	sub	sp, #8
   1c9b4:	4604      	mov	r4, r0
   1c9b6:	460d      	mov	r5, r1
   1c9b8:	4616      	mov	r6, r2
	struct net_pkt *pkt;
	int ret;

	if (k_is_in_isr()) {
   1c9ba:	f00c f863 	bl	28a84 <k_is_in_isr>
   1c9be:	b198      	cbz	r0, 1c9e8 <net_pkt_get_reserve+0x38>
		ret = k_mem_slab_alloc(slab, (void **)&pkt, K_NO_WAIT);
   1c9c0:	2200      	movs	r2, #0
   1c9c2:	a901      	add	r1, sp, #4
   1c9c4:	4620      	mov	r0, r4
   1c9c6:	f00a fde9 	bl	2759c <k_mem_slab_alloc>
	} else {
		ret = k_mem_slab_alloc(slab, (void **)&pkt, timeout);
	}

	if (ret) {
   1c9ca:	b998      	cbnz	r0, 1c9f4 <net_pkt_get_reserve+0x44>
		return NULL;
	}

	memset(pkt, 0, sizeof(struct net_pkt));
   1c9cc:	2244      	movs	r2, #68	; 0x44
   1c9ce:	2100      	movs	r1, #0
   1c9d0:	9801      	ldr	r0, [sp, #4]
   1c9d2:	f00e f857 	bl	2aa84 <memset>

	net_pkt_set_ll_reserve(pkt, reserve_head);
   1c9d6:	9801      	ldr	r0, [sp, #4]
	pkt->ll_reserve = len;
   1c9d8:	f880 5032 	strb.w	r5, [r0, #50]	; 0x32

	pkt->ref = 1;
   1c9dc:	2301      	movs	r3, #1
   1c9de:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
	pkt->slab = slab;
   1c9e2:	6044      	str	r4, [r0, #4]
	NET_DBG("%s [%u] pkt %p reserve %u ref %d (%s():%d)",
		slab2str(slab), k_mem_slab_num_free_get(slab),
		pkt, reserve_head, pkt->ref, caller, line);
#endif
	return pkt;
}
   1c9e4:	b002      	add	sp, #8
   1c9e6:	bd70      	pop	{r4, r5, r6, pc}
		ret = k_mem_slab_alloc(slab, (void **)&pkt, timeout);
   1c9e8:	4632      	mov	r2, r6
   1c9ea:	a901      	add	r1, sp, #4
   1c9ec:	4620      	mov	r0, r4
   1c9ee:	f00a fdd5 	bl	2759c <k_mem_slab_alloc>
   1c9f2:	e7ea      	b.n	1c9ca <net_pkt_get_reserve+0x1a>
		return NULL;
   1c9f4:	2000      	movs	r0, #0
   1c9f6:	e7f5      	b.n	1c9e4 <net_pkt_get_reserve+0x34>

0001c9f8 <net_pkt_get>:
#else
static struct net_pkt *net_pkt_get(struct k_mem_slab *slab,
				   struct net_context *context,
				   s32_t timeout)
#endif /* CONFIG_NET_DEBUG_NET_PKT */
{
   1c9f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct in6_addr *addr6 = NULL;
	struct net_if *iface;
	struct net_pkt *pkt;

	if (!context) {
   1c9fa:	2900      	cmp	r1, #0
   1c9fc:	d038      	beq.n	1ca70 <net_pkt_get+0x78>
   1c9fe:	460c      	mov	r4, r1
   1ca00:	4617      	mov	r7, r2
   1ca02:	4606      	mov	r6, r0
	return net_if_get_by_index(context->iface);
   1ca04:	f891 005c 	ldrb.w	r0, [r1, #92]	; 0x5c
   1ca08:	f7fe fea4 	bl	1b754 <net_if_get_by_index>
   1ca0c:	4605      	mov	r5, r0
	if (context->flags & NET_CONTEXT_FAMILY) {
   1ca0e:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
   1ca12:	f013 0f10 	tst.w	r3, #16
   1ca16:	d024      	beq.n	1ca62 <net_pkt_get+0x6a>
		return AF_INET6;
   1ca18:	230a      	movs	r3, #10

	iface = net_context_get_iface(context);

	NET_ASSERT(iface);

	if (net_context_get_family(context) == AF_INET6) {
   1ca1a:	2b0a      	cmp	r3, #10
   1ca1c:	d023      	beq.n	1ca66 <net_pkt_get+0x6e>
	struct in6_addr *addr6 = NULL;
   1ca1e:	2100      	movs	r1, #0
	return iface->l2->reserve(iface, (void *)dst_ip6);
   1ca20:	686b      	ldr	r3, [r5, #4]
   1ca22:	689b      	ldr	r3, [r3, #8]
   1ca24:	4628      	mov	r0, r5
   1ca26:	4798      	blx	r3
#if defined(CONFIG_NET_DEBUG_NET_PKT)
	pkt = net_pkt_get_reserve_debug(slab,
					net_if_get_ll_reserve(iface, addr6),
					timeout, caller, line);
#else
	pkt = net_pkt_get_reserve(slab, net_if_get_ll_reserve(iface, addr6),
   1ca28:	463a      	mov	r2, r7
   1ca2a:	4601      	mov	r1, r0
   1ca2c:	4630      	mov	r0, r6
   1ca2e:	f7ff ffbf 	bl	1c9b0 <net_pkt_get_reserve>
				  timeout);
#endif
	if (pkt) {
   1ca32:	4603      	mov	r3, r0
   1ca34:	b198      	cbz	r0, 1ca5e <net_pkt_get+0x66>
	pkt->context = ctx;
   1ca36:	60c4      	str	r4, [r0, #12]
	pkt->iface = iface;
   1ca38:	6145      	str	r5, [r0, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   1ca3a:	7d6a      	ldrb	r2, [r5, #21]
   1ca3c:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   1ca40:	7d6a      	ldrb	r2, [r5, #21]
   1ca42:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
	if (context->flags & NET_CONTEXT_FAMILY) {
   1ca46:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
   1ca4a:	f012 0f10 	tst.w	r2, #16
   1ca4e:	d00d      	beq.n	1ca6c <net_pkt_get+0x74>
		return AF_INET6;
   1ca50:	210a      	movs	r1, #10
	pkt->family = family;
   1ca52:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
   1ca56:	f361 02c6 	bfi	r2, r1, #3, #4
   1ca5a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
					   net_context_get_family(context));
		}
	}

	return pkt;
}
   1ca5e:	4618      	mov	r0, r3
   1ca60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return AF_INET;
   1ca62:	2302      	movs	r3, #2
   1ca64:	e7d9      	b.n	1ca1a <net_pkt_get+0x22>
		addr6 = &((struct sockaddr_in6 *) &context->remote)->sin6_addr;
   1ca66:	f104 0118 	add.w	r1, r4, #24
   1ca6a:	e7d9      	b.n	1ca20 <net_pkt_get+0x28>
   1ca6c:	2102      	movs	r1, #2
   1ca6e:	e7f0      	b.n	1ca52 <net_pkt_get+0x5a>
		return NULL;
   1ca70:	2300      	movs	r3, #0
   1ca72:	e7f4      	b.n	1ca5e <net_pkt_get+0x66>

0001ca74 <net_pkt_get_reserve_data>:
{
   1ca74:	b570      	push	{r4, r5, r6, lr}
   1ca76:	4604      	mov	r4, r0
   1ca78:	460d      	mov	r5, r1
   1ca7a:	4616      	mov	r6, r2
	if (k_is_in_isr()) {
   1ca7c:	f00c f802 	bl	28a84 <k_is_in_isr>
   1ca80:	b158      	cbz	r0, 1ca9a <net_pkt_get_reserve_data+0x26>
		frag = net_buf_alloc(pool, K_NO_WAIT);
   1ca82:	2100      	movs	r1, #0
   1ca84:	4620      	mov	r0, r4
   1ca86:	f7fd facf 	bl	1a028 <net_buf_alloc>
   1ca8a:	4604      	mov	r4, r0
	if (!frag) {
   1ca8c:	b11c      	cbz	r4, 1ca96 <net_pkt_get_reserve_data+0x22>
	net_buf_reserve(frag, reserve_head);
   1ca8e:	4629      	mov	r1, r5
   1ca90:	4620      	mov	r0, r4
   1ca92:	f7fd fb24 	bl	1a0de <net_buf_reserve>
}
   1ca96:	4620      	mov	r0, r4
   1ca98:	bd70      	pop	{r4, r5, r6, pc}
		frag = net_buf_alloc(pool, timeout);
   1ca9a:	4631      	mov	r1, r6
   1ca9c:	4620      	mov	r0, r4
   1ca9e:	f7fd fac3 	bl	1a028 <net_buf_alloc>
   1caa2:	4604      	mov	r4, r0
   1caa4:	e7f2      	b.n	1ca8c <net_pkt_get_reserve_data+0x18>

0001caa6 <_pkt_get_data>:
{
	struct in6_addr *addr6 = NULL;
	struct net_if *iface;
	struct net_buf *frag;

	if (!context) {
   1caa6:	b1f1      	cbz	r1, 1cae6 <_pkt_get_data+0x40>
{
   1caa8:	b570      	push	{r4, r5, r6, lr}
   1caaa:	460c      	mov	r4, r1
   1caac:	4616      	mov	r6, r2
   1caae:	4605      	mov	r5, r0
	return net_if_get_by_index(context->iface);
   1cab0:	f891 005c 	ldrb.w	r0, [r1, #92]	; 0x5c
   1cab4:	f7fe fe4e 	bl	1b754 <net_if_get_by_index>
	if (context->flags & NET_CONTEXT_FAMILY) {
   1cab8:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
   1cabc:	f013 0f10 	tst.w	r3, #16
   1cac0:	d00c      	beq.n	1cadc <_pkt_get_data+0x36>
		return AF_INET6;
   1cac2:	230a      	movs	r3, #10

	iface = net_context_get_iface(context);

	NET_ASSERT(iface);

	if (net_context_get_family(context) == AF_INET6) {
   1cac4:	2b0a      	cmp	r3, #10
   1cac6:	d00b      	beq.n	1cae0 <_pkt_get_data+0x3a>
	struct in6_addr *addr6 = NULL;
   1cac8:	2100      	movs	r1, #0
   1caca:	6843      	ldr	r3, [r0, #4]
   1cacc:	689b      	ldr	r3, [r3, #8]
   1cace:	4798      	blx	r3
	frag = net_pkt_get_reserve_data_debug(pool,
					      net_if_get_ll_reserve(iface,
								    addr6),
					      timeout, caller, line);
#else
	frag = net_pkt_get_reserve_data(pool,
   1cad0:	4632      	mov	r2, r6
   1cad2:	4601      	mov	r1, r0
   1cad4:	4628      	mov	r0, r5
   1cad6:	f7ff ffcd 	bl	1ca74 <net_pkt_get_reserve_data>
					net_if_get_ll_reserve(iface, addr6),
					timeout);
#endif
	return frag;
   1cada:	bd70      	pop	{r4, r5, r6, pc}
	return AF_INET;
   1cadc:	2302      	movs	r3, #2
   1cade:	e7f1      	b.n	1cac4 <_pkt_get_data+0x1e>
		addr6 = &((struct sockaddr_in6 *) &context->remote)->sin6_addr;
   1cae0:	f104 0118 	add.w	r1, r4, #24
   1cae4:	e7f1      	b.n	1caca <_pkt_get_data+0x24>
		return NULL;
   1cae6:	2000      	movs	r0, #0
   1cae8:	4770      	bx	lr
	...

0001caec <net_pkt_get_reserve_rx>:
{
   1caec:	b508      	push	{r3, lr}
	return net_pkt_get_reserve(&rx_pkts, reserve_head, timeout);
   1caee:	460a      	mov	r2, r1
   1caf0:	4601      	mov	r1, r0
   1caf2:	4802      	ldr	r0, [pc, #8]	; (1cafc <net_pkt_get_reserve_rx+0x10>)
   1caf4:	f7ff ff5c 	bl	1c9b0 <net_pkt_get_reserve>
}
   1caf8:	bd08      	pop	{r3, pc}
   1cafa:	bf00      	nop
   1cafc:	2000cf84 	.word	0x2000cf84

0001cb00 <net_pkt_get_reserve_tx>:
{
   1cb00:	b508      	push	{r3, lr}
	return net_pkt_get_reserve(&tx_pkts, reserve_head, timeout);
   1cb02:	460a      	mov	r2, r1
   1cb04:	4601      	mov	r1, r0
   1cb06:	4802      	ldr	r0, [pc, #8]	; (1cb10 <net_pkt_get_reserve_tx+0x10>)
   1cb08:	f7ff ff52 	bl	1c9b0 <net_pkt_get_reserve>
}
   1cb0c:	bd08      	pop	{r3, pc}
   1cb0e:	bf00      	nop
   1cb10:	2000cfa0 	.word	0x2000cfa0

0001cb14 <net_pkt_get_reserve_rx_data>:
{
   1cb14:	b508      	push	{r3, lr}
	return net_pkt_get_reserve_data(&rx_bufs, reserve_head, timeout);
   1cb16:	460a      	mov	r2, r1
   1cb18:	4601      	mov	r1, r0
   1cb1a:	4802      	ldr	r0, [pc, #8]	; (1cb24 <net_pkt_get_reserve_rx_data+0x10>)
   1cb1c:	f7ff ffaa 	bl	1ca74 <net_pkt_get_reserve_data>
}
   1cb20:	bd08      	pop	{r3, pc}
   1cb22:	bf00      	nop
   1cb24:	2000d104 	.word	0x2000d104

0001cb28 <net_pkt_get_reserve_tx_data>:
{
   1cb28:	b508      	push	{r3, lr}
	return net_pkt_get_reserve_data(&tx_bufs, reserve_head, timeout);
   1cb2a:	460a      	mov	r2, r1
   1cb2c:	4601      	mov	r1, r0
   1cb2e:	4802      	ldr	r0, [pc, #8]	; (1cb38 <net_pkt_get_reserve_tx_data+0x10>)
   1cb30:	f7ff ffa0 	bl	1ca74 <net_pkt_get_reserve_data>
}
   1cb34:	bd08      	pop	{r3, pc}
   1cb36:	bf00      	nop
   1cb38:	2000d124 	.word	0x2000d124

0001cb3c <net_pkt_get_frag>:
{
   1cb3c:	b538      	push	{r3, r4, r5, lr}
   1cb3e:	4604      	mov	r4, r0
   1cb40:	460d      	mov	r5, r1
	return pkt->context;
   1cb42:	68c3      	ldr	r3, [r0, #12]
	if (context && context->data_pool) {
   1cb44:	b143      	cbz	r3, 1cb58 <net_pkt_get_frag+0x1c>
   1cb46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1cb48:	b133      	cbz	r3, 1cb58 <net_pkt_get_frag+0x1c>
		return net_pkt_get_reserve_data(context->data_pool(),
   1cb4a:	4798      	blx	r3
   1cb4c:	462a      	mov	r2, r5
   1cb4e:	f894 1032 	ldrb.w	r1, [r4, #50]	; 0x32
   1cb52:	f7ff ff8f 	bl	1ca74 <net_pkt_get_reserve_data>
   1cb56:	bd38      	pop	{r3, r4, r5, pc}
	if (pkt->slab == &rx_pkts) {
   1cb58:	6862      	ldr	r2, [r4, #4]
   1cb5a:	4b07      	ldr	r3, [pc, #28]	; (1cb78 <net_pkt_get_frag+0x3c>)
   1cb5c:	429a      	cmp	r2, r3
   1cb5e:	d005      	beq.n	1cb6c <net_pkt_get_frag+0x30>
	return net_pkt_get_reserve_tx_data(net_pkt_ll_reserve(pkt),
   1cb60:	4629      	mov	r1, r5
   1cb62:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
   1cb66:	f7ff ffdf 	bl	1cb28 <net_pkt_get_reserve_tx_data>
}
   1cb6a:	bd38      	pop	{r3, r4, r5, pc}
		return net_pkt_get_reserve_rx_data(net_pkt_ll_reserve(pkt),
   1cb6c:	4629      	mov	r1, r5
   1cb6e:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
   1cb72:	f7ff ffcf 	bl	1cb14 <net_pkt_get_reserve_rx_data>
   1cb76:	bd38      	pop	{r3, r4, r5, pc}
   1cb78:	2000cf84 	.word	0x2000cf84

0001cb7c <net_pkt_get_tx>:

	return net_pkt_get(&rx_pkts, context, timeout);
}

struct net_pkt *net_pkt_get_tx(struct net_context *context, s32_t timeout)
{
   1cb7c:	b538      	push	{r3, r4, r5, lr}
   1cb7e:	4604      	mov	r4, r0
   1cb80:	460d      	mov	r5, r1
	if (context->tx_slab) {
   1cb82:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
   1cb84:	b133      	cbz	r3, 1cb94 <net_pkt_get_tx+0x18>
		return context->tx_slab();
   1cb86:	4798      	blx	r3

	NET_ASSERT_INFO(context, "TX context not set");

	slab = get_tx_slab(context);

	return net_pkt_get(slab ? slab : &tx_pkts, context, timeout);
   1cb88:	b130      	cbz	r0, 1cb98 <net_pkt_get_tx+0x1c>
   1cb8a:	462a      	mov	r2, r5
   1cb8c:	4621      	mov	r1, r4
   1cb8e:	f7ff ff33 	bl	1c9f8 <net_pkt_get>
}
   1cb92:	bd38      	pop	{r3, r4, r5, pc}
	return NULL;
   1cb94:	2000      	movs	r0, #0
   1cb96:	e7f7      	b.n	1cb88 <net_pkt_get_tx+0xc>
	return net_pkt_get(slab ? slab : &tx_pkts, context, timeout);
   1cb98:	4800      	ldr	r0, [pc, #0]	; (1cb9c <net_pkt_get_tx+0x20>)
   1cb9a:	e7f6      	b.n	1cb8a <net_pkt_get_tx+0xe>
   1cb9c:	2000cfa0 	.word	0x2000cfa0

0001cba0 <net_pkt_get_data>:

struct net_buf *net_pkt_get_data(struct net_context *context, s32_t timeout)
{
   1cba0:	b538      	push	{r3, r4, r5, lr}
   1cba2:	4604      	mov	r4, r0
   1cba4:	460d      	mov	r5, r1
	if (context->data_pool) {
   1cba6:	6c03      	ldr	r3, [r0, #64]	; 0x40
   1cba8:	b133      	cbz	r3, 1cbb8 <net_pkt_get_data+0x18>
		return context->data_pool();
   1cbaa:	4798      	blx	r3
	pool = get_data_pool(context);

	/* The context is not known in RX path so we can only have TX
	 * data here.
	 */
	return _pkt_get_data(pool ? pool : &tx_bufs, context, timeout);
   1cbac:	b130      	cbz	r0, 1cbbc <net_pkt_get_data+0x1c>
   1cbae:	462a      	mov	r2, r5
   1cbb0:	4621      	mov	r1, r4
   1cbb2:	f7ff ff78 	bl	1caa6 <_pkt_get_data>
}
   1cbb6:	bd38      	pop	{r3, r4, r5, pc}
	return NULL;
   1cbb8:	2000      	movs	r0, #0
   1cbba:	e7f7      	b.n	1cbac <net_pkt_get_data+0xc>
	return _pkt_get_data(pool ? pool : &tx_bufs, context, timeout);
   1cbbc:	4800      	ldr	r0, [pc, #0]	; (1cbc0 <net_pkt_get_data+0x20>)
   1cbbe:	e7f6      	b.n	1cbae <net_pkt_get_data+0xe>
   1cbc0:	2000d124 	.word	0x2000d124

0001cbc4 <net_pkt_ref>:
				  int line)
#else
struct net_pkt *net_pkt_ref(struct net_pkt *pkt)
#endif /* CONFIG_NET_DEBUG_NET_PKT */
{
	if (!pkt) {
   1cbc4:	4603      	mov	r3, r0
   1cbc6:	b120      	cbz	r0, 1cbd2 <net_pkt_ref+0xe>
	NET_DBG("%s [%d] pkt %p ref %d (%s():%d)",
		slab2str(pkt->slab), k_mem_slab_num_free_get(pkt->slab),
		pkt, pkt->ref + 1, caller, line);
#endif

	pkt->ref++;
   1cbc8:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
   1cbcc:	3201      	adds	r2, #1
   1cbce:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40

	return pkt;
}
   1cbd2:	4618      	mov	r0, r3
   1cbd4:	4770      	bx	lr

0001cbd6 <net_pkt_frag_unref>:
			      const char *caller, int line)
#else
void net_pkt_frag_unref(struct net_buf *frag)
#endif /* CONFIG_NET_DEBUG_NET_PKT */
{
	if (!frag) {
   1cbd6:	b118      	cbz	r0, 1cbe0 <net_pkt_frag_unref+0xa>
{
   1cbd8:	b508      	push	{r3, lr}

	if (frag->ref == 1) {
		net_pkt_alloc_del(frag, caller, line);
	}
#endif
	net_buf_unref(frag);
   1cbda:	f7fd fa93 	bl	1a104 <net_buf_unref>
   1cbde:	bd08      	pop	{r3, pc}
   1cbe0:	4770      	bx	lr

0001cbe2 <net_pkt_unref>:
{
   1cbe2:	b500      	push	{lr}
   1cbe4:	b083      	sub	sp, #12
   1cbe6:	9001      	str	r0, [sp, #4]
	if (!pkt) {
   1cbe8:	b188      	cbz	r0, 1cc0e <net_pkt_unref+0x2c>
	if (!pkt->ref) {
   1cbea:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
   1cbee:	b173      	cbz	r3, 1cc0e <net_pkt_unref+0x2c>
	if (--pkt->ref > 0) {
   1cbf0:	3b01      	subs	r3, #1
   1cbf2:	b2db      	uxtb	r3, r3
   1cbf4:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
   1cbf8:	b94b      	cbnz	r3, 1cc0e <net_pkt_unref+0x2c>
	if (pkt->frags) {
   1cbfa:	6880      	ldr	r0, [r0, #8]
   1cbfc:	b108      	cbz	r0, 1cc02 <net_pkt_unref+0x20>
		net_pkt_frag_unref(pkt->frags);
   1cbfe:	f7ff ffea 	bl	1cbd6 <net_pkt_frag_unref>
	k_mem_slab_free(pkt->slab, (void **)&pkt);
   1cc02:	a902      	add	r1, sp, #8
   1cc04:	f851 3d04 	ldr.w	r3, [r1, #-4]!
   1cc08:	6858      	ldr	r0, [r3, #4]
   1cc0a:	f00a fcf5 	bl	275f8 <k_mem_slab_free>
}
   1cc0e:	b003      	add	sp, #12
   1cc10:	f85d fb04 	ldr.w	pc, [sp], #4

0001cc14 <net_pkt_frag_del>:
#else
struct net_buf *net_pkt_frag_del(struct net_pkt *pkt,
				 struct net_buf *parent,
				 struct net_buf *frag)
#endif
{
   1cc14:	b510      	push	{r4, lr}
   1cc16:	4604      	mov	r4, r0
   1cc18:	4608      	mov	r0, r1
	if (frag->ref == 1) {
		net_pkt_alloc_del(frag, caller, line);
	}
#endif

	if (pkt->frags == frag && !parent) {
   1cc1a:	68a3      	ldr	r3, [r4, #8]
   1cc1c:	4293      	cmp	r3, r2
   1cc1e:	d003      	beq.n	1cc28 <net_pkt_frag_del+0x14>
		pkt->frags = tmp;

		return tmp;
	}

	return net_buf_frag_del(parent, frag);
   1cc20:	4611      	mov	r1, r2
   1cc22:	f7fd faaf 	bl	1a184 <net_buf_frag_del>
}
   1cc26:	bd10      	pop	{r4, pc}
	if (pkt->frags == frag && !parent) {
   1cc28:	2900      	cmp	r1, #0
   1cc2a:	d1f9      	bne.n	1cc20 <net_pkt_frag_del+0xc>
		tmp = net_buf_frag_del(NULL, frag);
   1cc2c:	4611      	mov	r1, r2
   1cc2e:	f7fd faa9 	bl	1a184 <net_buf_frag_del>
		pkt->frags = tmp;
   1cc32:	60a0      	str	r0, [r4, #8]
		return tmp;
   1cc34:	bd10      	pop	{r4, pc}

0001cc36 <net_pkt_frag_add>:
	NET_DBG("pkt %p frag %p (%s:%d)", pkt, frag, caller, line);

	/* We do not use net_buf_frag_add() as this one will refcount
	 * the frag once more if !pkt->frags
	 */
	if (!pkt->frags) {
   1cc36:	6883      	ldr	r3, [r0, #8]
   1cc38:	b143      	cbz	r3, 1cc4c <net_pkt_frag_add+0x16>
{
   1cc3a:	b510      	push	{r4, lr}
   1cc3c:	460c      	mov	r4, r1
		pkt->frags = frag;
		return;
	}

	net_buf_frag_insert(net_buf_frag_last(pkt->frags), frag);
   1cc3e:	4618      	mov	r0, r3
   1cc40:	f7fd fa80 	bl	1a144 <net_buf_frag_last>
   1cc44:	4621      	mov	r1, r4
   1cc46:	f7fd fa83 	bl	1a150 <net_buf_frag_insert>
   1cc4a:	bd10      	pop	{r4, pc}
		pkt->frags = frag;
   1cc4c:	6081      	str	r1, [r0, #8]
		return;
   1cc4e:	4770      	bx	lr

0001cc50 <net_pkt_frag_insert>:
void net_pkt_frag_insert_debug(struct net_pkt *pkt, struct net_buf *frag,
			       const char *caller, int line)
#else
void net_pkt_frag_insert(struct net_pkt *pkt, struct net_buf *frag)
#endif
{
   1cc50:	b538      	push	{r3, r4, r5, lr}
   1cc52:	4604      	mov	r4, r0
   1cc54:	460d      	mov	r5, r1
	NET_DBG("pkt %p frag %p (%s:%d)", pkt, frag, caller, line);

	net_buf_frag_last(frag)->frags = pkt->frags;
   1cc56:	4608      	mov	r0, r1
   1cc58:	f7fd fa74 	bl	1a144 <net_buf_frag_last>
   1cc5c:	68a3      	ldr	r3, [r4, #8]
   1cc5e:	6003      	str	r3, [r0, #0]
	pkt->frags = frag;
   1cc60:	60a5      	str	r5, [r4, #8]
   1cc62:	bd38      	pop	{r3, r4, r5, pc}

0001cc64 <net_pkt_copy>:
}

struct net_buf *net_pkt_copy(struct net_pkt *pkt, size_t amount,
			     size_t reserve, s32_t timeout)
{
   1cc64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cc68:	b085      	sub	sp, #20
   1cc6a:	9002      	str	r0, [sp, #8]
   1cc6c:	460d      	mov	r5, r1
   1cc6e:	4614      	mov	r4, r2
   1cc70:	9303      	str	r3, [sp, #12]
	struct net_buf *frag, *first, *orig;
	u8_t *orig_data;
	size_t orig_len;

	orig = pkt->frags;
   1cc72:	f8d0 a008 	ldr.w	sl, [r0, #8]

	frag = net_pkt_get_frag(pkt, timeout);
   1cc76:	4619      	mov	r1, r3
   1cc78:	f7ff ff60 	bl	1cb3c <net_pkt_get_frag>
	if (!frag) {
   1cc7c:	9001      	str	r0, [sp, #4]
   1cc7e:	b1b8      	cbz	r0, 1ccb0 <net_pkt_copy+0x4c>
		return NULL;
	}

	if (reserve > net_buf_tailroom(frag)) {
   1cc80:	f100 0608 	add.w	r6, r0, #8
   1cc84:	4630      	mov	r0, r6
   1cc86:	f7fd faf2 	bl	1a26e <net_buf_simple_tailroom>
   1cc8a:	42a0      	cmp	r0, r4
   1cc8c:	d30b      	bcc.n	1cca6 <net_pkt_copy+0x42>
			reserve, net_buf_tailroom(frag));
		net_pkt_frag_unref(frag);
		return NULL;
	}

	net_buf_add(frag, reserve);
   1cc8e:	4621      	mov	r1, r4
   1cc90:	4630      	mov	r0, r6
   1cc92:	f7fd fa83 	bl	1a19c <net_buf_simple_add>
	first = frag;

	NET_DBG("Copying frag %p with %zu bytes and reserving %zu bytes",
		first, amount, reserve);

	if (!orig->len) {
   1cc96:	f8ba 700c 	ldrh.w	r7, [sl, #12]
   1cc9a:	b14f      	cbz	r7, 1ccb0 <net_pkt_copy+0x4c>
		NET_DBG("Original fragment empty!");
		return frag;
	}

	orig_len = orig->len;
	orig_data = orig->data;
   1cc9c:	f8da 9008 	ldr.w	r9, [sl, #8]
	frag = net_pkt_get_frag(pkt, timeout);
   1cca0:	f8dd b004 	ldr.w	fp, [sp, #4]

	while (orig && amount) {
   1cca4:	e01c      	b.n	1cce0 <net_pkt_copy+0x7c>
		net_pkt_frag_unref(frag);
   1cca6:	9801      	ldr	r0, [sp, #4]
   1cca8:	f7ff ff95 	bl	1cbd6 <net_pkt_frag_unref>
		return NULL;
   1ccac:	2300      	movs	r3, #0
   1ccae:	9301      	str	r3, [sp, #4]
			orig_data = orig->data;
		}
	}

	return first;
}
   1ccb0:	9801      	ldr	r0, [sp, #4]
   1ccb2:	b005      	add	sp, #20
   1ccb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			copy_len = amount;
   1ccb8:	46a8      	mov	r8, r5
		if ((copy_len - left_len) >= 0) {
   1ccba:	eba8 0304 	sub.w	r3, r8, r4
   1ccbe:	2b00      	cmp	r3, #0
   1ccc0:	db2e      	blt.n	1cd20 <net_pkt_copy+0xbc>
			amount -= left_len;
   1ccc2:	1b2d      	subs	r5, r5, r4
			memcpy(net_buf_add(frag, left_len), orig_data,
   1ccc4:	4621      	mov	r1, r4
   1ccc6:	4630      	mov	r0, r6
   1ccc8:	f7fd fa68 	bl	1a19c <net_buf_simple_add>
   1cccc:	4622      	mov	r2, r4
   1ccce:	4649      	mov	r1, r9
   1ccd0:	f7e3 faf6 	bl	2c0 <memcpy>
			if (!net_buf_tailroom(frag)) {
   1ccd4:	4630      	mov	r0, r6
   1ccd6:	f7fd faca 	bl	1a26e <net_buf_simple_tailroom>
   1ccda:	b180      	cbz	r0, 1ccfe <net_pkt_copy+0x9a>
			orig_len -= left_len;
   1ccdc:	1b3f      	subs	r7, r7, r4
			orig_data += left_len;
   1ccde:	44a1      	add	r9, r4
	while (orig && amount) {
   1cce0:	f1ba 0f00 	cmp.w	sl, #0
   1cce4:	d0e4      	beq.n	1ccb0 <net_pkt_copy+0x4c>
   1cce6:	2d00      	cmp	r5, #0
   1cce8:	d0e2      	beq.n	1ccb0 <net_pkt_copy+0x4c>
		int left_len = net_buf_tailroom(frag);
   1ccea:	f10b 0608 	add.w	r6, fp, #8
   1ccee:	4630      	mov	r0, r6
   1ccf0:	f7fd fabd 	bl	1a26e <net_buf_simple_tailroom>
   1ccf4:	4604      	mov	r4, r0
		if (amount > orig_len) {
   1ccf6:	42bd      	cmp	r5, r7
   1ccf8:	d9de      	bls.n	1ccb8 <net_pkt_copy+0x54>
			copy_len = orig_len;
   1ccfa:	46b8      	mov	r8, r7
   1ccfc:	e7dd      	b.n	1ccba <net_pkt_copy+0x56>
				struct net_buf *new_frag =
   1ccfe:	9903      	ldr	r1, [sp, #12]
   1cd00:	9802      	ldr	r0, [sp, #8]
   1cd02:	f7ff ff1b 	bl	1cb3c <net_pkt_get_frag>
				if (!new_frag) {
   1cd06:	4606      	mov	r6, r0
   1cd08:	b128      	cbz	r0, 1cd16 <net_pkt_copy+0xb2>
				net_buf_frag_add(frag, new_frag);
   1cd0a:	4601      	mov	r1, r0
   1cd0c:	4658      	mov	r0, fp
   1cd0e:	f7fd fa2a 	bl	1a166 <net_buf_frag_add>
				frag = new_frag;
   1cd12:	46b3      	mov	fp, r6
   1cd14:	e7e2      	b.n	1ccdc <net_pkt_copy+0x78>
					net_pkt_frag_unref(first);
   1cd16:	9801      	ldr	r0, [sp, #4]
   1cd18:	f7ff ff5d 	bl	1cbd6 <net_pkt_frag_unref>
					return NULL;
   1cd1c:	9601      	str	r6, [sp, #4]
   1cd1e:	e7c7      	b.n	1ccb0 <net_pkt_copy+0x4c>
			amount -= copy_len;
   1cd20:	eba5 0508 	sub.w	r5, r5, r8
			memcpy(net_buf_add(frag, copy_len), orig_data,
   1cd24:	4641      	mov	r1, r8
   1cd26:	4630      	mov	r0, r6
   1cd28:	f7fd fa38 	bl	1a19c <net_buf_simple_add>
   1cd2c:	4642      	mov	r2, r8
   1cd2e:	4649      	mov	r1, r9
   1cd30:	f7e3 fac6 	bl	2c0 <memcpy>
		orig = orig->frags;
   1cd34:	f8da a000 	ldr.w	sl, [sl]
		if (orig) {
   1cd38:	f1ba 0f00 	cmp.w	sl, #0
   1cd3c:	d0d0      	beq.n	1cce0 <net_pkt_copy+0x7c>
			orig_len = orig->len;
   1cd3e:	f8ba 700c 	ldrh.w	r7, [sl, #12]
			orig_data = orig->data;
   1cd42:	f8da 9008 	ldr.w	r9, [sl, #8]
   1cd46:	e7cb      	b.n	1cce0 <net_pkt_copy+0x7c>

0001cd48 <net_frag_linear_copy>:

int net_frag_linear_copy(struct net_buf *dst, struct net_buf *src,
			 u16_t offset, u16_t len)
{
   1cd48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1cd4c:	4680      	mov	r8, r0
   1cd4e:	460e      	mov	r6, r1
   1cd50:	4615      	mov	r5, r2
   1cd52:	4699      	mov	r9, r3
	u16_t to_copy;
	u16_t copied;

	if (dst->size < len) {
   1cd54:	89c3      	ldrh	r3, [r0, #14]
   1cd56:	454b      	cmp	r3, r9
   1cd58:	d206      	bcs.n	1cd68 <net_frag_linear_copy+0x20>
		return -ENOMEM;
   1cd5a:	f06f 000b 	mvn.w	r0, #11
   1cd5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	}

	/* find the right fragment to start copying from */
	while (src && offset >= src->len) {
		offset -= src->len;
   1cd62:	1a6d      	subs	r5, r5, r1
   1cd64:	b2ad      	uxth	r5, r5
		src = src->frags;
   1cd66:	6836      	ldr	r6, [r6, #0]
	while (src && offset >= src->len) {
   1cd68:	b336      	cbz	r6, 1cdb8 <net_frag_linear_copy+0x70>
   1cd6a:	89b1      	ldrh	r1, [r6, #12]
   1cd6c:	428d      	cmp	r5, r1
   1cd6e:	d2f8      	bcs.n	1cd62 <net_frag_linear_copy+0x1a>
   1cd70:	2700      	movs	r7, #0
   1cd72:	e015      	b.n	1cda0 <net_frag_linear_copy+0x58>
	}

	/* traverse the fragment chain until len bytes are copied */
	copied = 0;
	while (src && len > 0) {
		to_copy = min(len, src->len - offset);
   1cd74:	89b4      	ldrh	r4, [r6, #12]
   1cd76:	1b64      	subs	r4, r4, r5
   1cd78:	454c      	cmp	r4, r9
   1cd7a:	bfa8      	it	ge
   1cd7c:	464c      	movge	r4, r9
   1cd7e:	b2a4      	uxth	r4, r4
		memcpy(dst->data + copied, src->data + offset, to_copy);
   1cd80:	f8d8 0008 	ldr.w	r0, [r8, #8]
   1cd84:	68b1      	ldr	r1, [r6, #8]
   1cd86:	4622      	mov	r2, r4
   1cd88:	4429      	add	r1, r5
   1cd8a:	4438      	add	r0, r7
   1cd8c:	f7e3 fa98 	bl	2c0 <memcpy>

		copied += to_copy;
   1cd90:	4427      	add	r7, r4
   1cd92:	b2bf      	uxth	r7, r7
		/* to_copy is always <= len */
		len -= to_copy;
   1cd94:	eba9 0404 	sub.w	r4, r9, r4
   1cd98:	fa1f f984 	uxth.w	r9, r4
		src = src->frags;
   1cd9c:	6836      	ldr	r6, [r6, #0]
		/* after the first iteration, this value will be 0 */
		offset = 0;
   1cd9e:	2500      	movs	r5, #0
	while (src && len > 0) {
   1cda0:	b116      	cbz	r6, 1cda8 <net_frag_linear_copy+0x60>
   1cda2:	f1b9 0f00 	cmp.w	r9, #0
   1cda6:	d1e5      	bne.n	1cd74 <net_frag_linear_copy+0x2c>
	}

	if (len > 0) {
   1cda8:	f1b9 0f00 	cmp.w	r9, #0
   1cdac:	d106      	bne.n	1cdbc <net_frag_linear_copy+0x74>
		return -ENOMEM;
	}

	dst->len = copied;
   1cdae:	f8a8 700c 	strh.w	r7, [r8, #12]

	return 0;
   1cdb2:	2000      	movs	r0, #0
   1cdb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1cdb8:	2700      	movs	r7, #0
   1cdba:	e7f1      	b.n	1cda0 <net_frag_linear_copy+0x58>
		return -ENOMEM;
   1cdbc:	f06f 000b 	mvn.w	r0, #11
}
   1cdc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001cdc4 <net_pkt_compact>:

	return copied;
}

bool net_pkt_compact(struct net_pkt *pkt)
{
   1cdc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cdc8:	4680      	mov	r8, r0
	struct net_buf *frag, *prev;

	NET_DBG("Compacting data in pkt %p", pkt);

	frag = pkt->frags;
   1cdca:	6884      	ldr	r4, [r0, #8]
	prev = NULL;
   1cdcc:	2700      	movs	r7, #0

	while (frag) {
   1cdce:	e009      	b.n	1cde4 <net_pkt_compact+0x20>
			 */
			size_t copy_len;

			copy_len = frag->frags->len;
			if (copy_len > net_buf_tailroom(frag)) {
				copy_len = net_buf_tailroom(frag);
   1cdd0:	4630      	mov	r0, r6
   1cdd2:	f7fd fa4c 	bl	1a26e <net_buf_simple_tailroom>
   1cdd6:	4605      	mov	r5, r0
   1cdd8:	e011      	b.n	1cdfe <net_pkt_compact+0x3a>

				/* Then check next fragment */
				continue;
			}
		} else {
			if (!frag->len) {
   1cdda:	89a3      	ldrh	r3, [r4, #12]
   1cddc:	2b00      	cmp	r3, #0
   1cdde:	d030      	beq.n	1ce42 <net_pkt_compact+0x7e>

				break;
			}
		}

		prev = frag;
   1cde0:	4627      	mov	r7, r4
		frag = frag->frags;
   1cde2:	6824      	ldr	r4, [r4, #0]
	while (frag) {
   1cde4:	2c00      	cmp	r4, #0
   1cde6:	d031      	beq.n	1ce4c <net_pkt_compact+0x88>
		if (frag->frags) {
   1cde8:	6823      	ldr	r3, [r4, #0]
   1cdea:	2b00      	cmp	r3, #0
   1cdec:	d0f5      	beq.n	1cdda <net_pkt_compact+0x16>
			copy_len = frag->frags->len;
   1cdee:	899d      	ldrh	r5, [r3, #12]
			if (copy_len > net_buf_tailroom(frag)) {
   1cdf0:	f104 0608 	add.w	r6, r4, #8
   1cdf4:	4630      	mov	r0, r6
   1cdf6:	f7fd fa3a 	bl	1a26e <net_buf_simple_tailroom>
   1cdfa:	4285      	cmp	r5, r0
   1cdfc:	d8e8      	bhi.n	1cdd0 <net_pkt_compact+0xc>
	return buf->data + buf->len;
   1cdfe:	68a0      	ldr	r0, [r4, #8]
   1ce00:	89a3      	ldrh	r3, [r4, #12]
			memcpy(net_buf_tail(frag), frag->frags->data, copy_len);
   1ce02:	6821      	ldr	r1, [r4, #0]
   1ce04:	462a      	mov	r2, r5
   1ce06:	6889      	ldr	r1, [r1, #8]
   1ce08:	4418      	add	r0, r3
   1ce0a:	f7e3 fa59 	bl	2c0 <memcpy>
			net_buf_add(frag, copy_len);
   1ce0e:	4629      	mov	r1, r5
   1ce10:	4630      	mov	r0, r6
   1ce12:	f7fd f9c3 	bl	1a19c <net_buf_simple_add>
			memmove(frag->frags->data,
   1ce16:	6823      	ldr	r3, [r4, #0]
   1ce18:	6898      	ldr	r0, [r3, #8]
				frag->frags->len - copy_len);
   1ce1a:	899a      	ldrh	r2, [r3, #12]
			memmove(frag->frags->data,
   1ce1c:	1b52      	subs	r2, r2, r5
   1ce1e:	1941      	adds	r1, r0, r5
   1ce20:	f00d fdcc 	bl	2a9bc <memmove>
			frag->frags->len -= copy_len;
   1ce24:	6822      	ldr	r2, [r4, #0]
   1ce26:	8993      	ldrh	r3, [r2, #12]
   1ce28:	1b5d      	subs	r5, r3, r5
   1ce2a:	8195      	strh	r5, [r2, #12]
			if (net_buf_tailroom(frag)) {
   1ce2c:	4630      	mov	r0, r6
   1ce2e:	f7fd fa1e 	bl	1a26e <net_buf_simple_tailroom>
   1ce32:	2800      	cmp	r0, #0
   1ce34:	d0d4      	beq.n	1cde0 <net_pkt_compact+0x1c>
				net_pkt_frag_del(pkt, frag, frag->frags);
   1ce36:	6822      	ldr	r2, [r4, #0]
   1ce38:	4621      	mov	r1, r4
   1ce3a:	4640      	mov	r0, r8
   1ce3c:	f7ff feea 	bl	1cc14 <net_pkt_frag_del>
				continue;
   1ce40:	e7d0      	b.n	1cde4 <net_pkt_compact+0x20>
				net_pkt_frag_del(pkt, prev, frag);
   1ce42:	4622      	mov	r2, r4
   1ce44:	4639      	mov	r1, r7
   1ce46:	4640      	mov	r0, r8
   1ce48:	f7ff fee4 	bl	1cc14 <net_pkt_frag_del>
	}

	return true;
}
   1ce4c:	2001      	movs	r0, #1
   1ce4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001ce52 <net_pkt_append>:
	return 0;
}

u16_t net_pkt_append(struct net_pkt *pkt, u16_t len, const u8_t *data,
		    s32_t timeout)
{
   1ce52:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct net_buf *frag;

	if (!pkt || !data) {
   1ce56:	b3d0      	cbz	r0, 1cece <net_pkt_append+0x7c>
   1ce58:	460c      	mov	r4, r1
   1ce5a:	4690      	mov	r8, r2
   1ce5c:	469a      	mov	sl, r3
   1ce5e:	4681      	mov	r9, r0
   1ce60:	b3ca      	cbz	r2, 1ced6 <net_pkt_append+0x84>
		return 0;
	}

	if (!pkt->frags) {
   1ce62:	6883      	ldr	r3, [r0, #8]
   1ce64:	b133      	cbz	r3, 1ce74 <net_pkt_append+0x22>
	struct net_buf *frag = net_buf_frag_last(pkt->frags);
   1ce66:	f8d9 0008 	ldr.w	r0, [r9, #8]
   1ce6a:	f7fd f96b 	bl	1a144 <net_buf_frag_last>
   1ce6e:	4605      	mov	r5, r0
	u16_t added_len = 0;
   1ce70:	2700      	movs	r7, #0
   1ce72:	e024      	b.n	1cebe <net_pkt_append+0x6c>
		frag = net_pkt_get_frag(pkt, timeout);
   1ce74:	4651      	mov	r1, sl
   1ce76:	f7ff fe61 	bl	1cb3c <net_pkt_get_frag>
		if (!frag) {
   1ce7a:	4601      	mov	r1, r0
   1ce7c:	b368      	cbz	r0, 1ceda <net_pkt_append+0x88>
			return 0;
		}

		net_pkt_frag_add(pkt, frag);
   1ce7e:	4648      	mov	r0, r9
   1ce80:	f7ff fed9 	bl	1cc36 <net_pkt_frag_add>
   1ce84:	e7ef      	b.n	1ce66 <net_pkt_append+0x14>
		u16_t count = min(len, net_buf_tailroom(frag));
   1ce86:	4628      	mov	r0, r5
   1ce88:	f7fd f9f1 	bl	1a26e <net_buf_simple_tailroom>
   1ce8c:	b286      	uxth	r6, r0
		void *data = net_buf_add(frag, count);
   1ce8e:	4631      	mov	r1, r6
   1ce90:	4628      	mov	r0, r5
   1ce92:	f7fd f983 	bl	1a19c <net_buf_simple_add>
		memcpy(data, value, count);
   1ce96:	4632      	mov	r2, r6
   1ce98:	4641      	mov	r1, r8
   1ce9a:	f7e3 fa11 	bl	2c0 <memcpy>
		len -= count;
   1ce9e:	1ba4      	subs	r4, r4, r6
   1cea0:	b2a4      	uxth	r4, r4
		added_len += count;
   1cea2:	4437      	add	r7, r6
   1cea4:	b2bf      	uxth	r7, r7
		value += count;
   1cea6:	44b0      	add	r8, r6
		if (len == 0) {
   1cea8:	b194      	cbz	r4, 1ced0 <net_pkt_append+0x7e>
		frag = net_pkt_get_frag(pkt, timeout);
   1ceaa:	4651      	mov	r1, sl
   1ceac:	4648      	mov	r0, r9
   1ceae:	f7ff fe45 	bl	1cb3c <net_pkt_get_frag>
		if (!frag) {
   1ceb2:	4605      	mov	r5, r0
   1ceb4:	b160      	cbz	r0, 1ced0 <net_pkt_append+0x7e>
		net_pkt_frag_add(pkt, frag);
   1ceb6:	4601      	mov	r1, r0
   1ceb8:	4648      	mov	r0, r9
   1ceba:	f7ff febc 	bl	1cc36 <net_pkt_frag_add>
		u16_t count = min(len, net_buf_tailroom(frag));
   1cebe:	3508      	adds	r5, #8
   1cec0:	4628      	mov	r0, r5
   1cec2:	f7fd f9d4 	bl	1a26e <net_buf_simple_tailroom>
   1cec6:	4284      	cmp	r4, r0
   1cec8:	d2dd      	bcs.n	1ce86 <net_pkt_append+0x34>
   1ceca:	4626      	mov	r6, r4
   1cecc:	e7df      	b.n	1ce8e <net_pkt_append+0x3c>
		return 0;
   1cece:	2700      	movs	r7, #0
	}

	return net_pkt_append_bytes(pkt, data, len, timeout);
}
   1ced0:	4638      	mov	r0, r7
   1ced2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return 0;
   1ced6:	2700      	movs	r7, #0
   1ced8:	e7fa      	b.n	1ced0 <net_pkt_append+0x7e>
			return 0;
   1ceda:	2700      	movs	r7, #0
   1cedc:	e7f8      	b.n	1ced0 <net_pkt_append+0x7e>

0001cede <net_frag_read>:
	return NULL;
}

struct net_buf *net_frag_read(struct net_buf *frag, u16_t offset,
			      u16_t *pos, u16_t len, u8_t *data)
{
   1cede:	b4f0      	push	{r4, r5, r6, r7}
   1cee0:	9e04      	ldr	r6, [sp, #16]
	if (!frag) {
   1cee2:	4604      	mov	r4, r0
   1cee4:	b188      	cbz	r0, 1cf0a <net_frag_read+0x2c>
	while (frag) {
   1cee6:	b17c      	cbz	r4, 1cf08 <net_frag_read+0x2a>
		if (offset == frag->len) {
   1cee8:	89a0      	ldrh	r0, [r4, #12]
   1ceea:	4288      	cmp	r0, r1
   1ceec:	d005      	beq.n	1cefa <net_frag_read+0x1c>
		} else if (offset < frag->len) {
   1ceee:	4288      	cmp	r0, r1
   1cef0:	d807      	bhi.n	1cf02 <net_frag_read+0x24>
		offset -= frag->len;
   1cef2:	1a09      	subs	r1, r1, r0
   1cef4:	b289      	uxth	r1, r1
		frag = frag->frags;
   1cef6:	6824      	ldr	r4, [r4, #0]
   1cef8:	e7f5      	b.n	1cee6 <net_frag_read+0x8>
			*pos = 0;
   1cefa:	2100      	movs	r1, #0
   1cefc:	8011      	strh	r1, [r2, #0]
			return frag->frags;
   1cefe:	6820      	ldr	r0, [r4, #0]
   1cf00:	e003      	b.n	1cf0a <net_frag_read+0x2c>
			*pos = offset;
   1cf02:	8011      	strh	r1, [r2, #0]
			return frag;
   1cf04:	4620      	mov	r0, r4
   1cf06:	e000      	b.n	1cf0a <net_frag_read+0x2c>
	return NULL;
   1cf08:	4620      	mov	r0, r4
	u16_t copy = 0;

	frag = adjust_offset(frag, offset, pos);
	if (!frag) {
   1cf0a:	b350      	cbz	r0, 1cf62 <net_frag_read+0x84>
   1cf0c:	2500      	movs	r5, #0
   1cf0e:	e00d      	b.n	1cf2c <net_frag_read+0x4e>
	while (len-- > 0 && frag) {
		if (data) {
			frag = net_frag_read_byte(frag, *pos,
						  pos, data + copy++);
		} else {
			frag = net_frag_read_byte(frag, *pos, pos, NULL);
   1cf10:	8813      	ldrh	r3, [r2, #0]
	*pos = offset + 1;
   1cf12:	3301      	adds	r3, #1
   1cf14:	b29b      	uxth	r3, r3
   1cf16:	8013      	strh	r3, [r2, #0]
	if (*pos >= frag->len) {
   1cf18:	8984      	ldrh	r4, [r0, #12]
   1cf1a:	42a3      	cmp	r3, r4
   1cf1c:	d304      	bcc.n	1cf28 <net_frag_read+0x4a>
		*pos = 0;
   1cf1e:	2300      	movs	r3, #0
   1cf20:	8013      	strh	r3, [r2, #0]
		return frag->frags;
   1cf22:	6800      	ldr	r0, [r0, #0]
   1cf24:	e000      	b.n	1cf28 <net_frag_read+0x4a>
						  pos, data + copy++);
   1cf26:	4625      	mov	r5, r4
   1cf28:	460b      	mov	r3, r1
		}

		/* Error: Still reamining length to be read, but no data. */
		if (!frag && len) {
   1cf2a:	b1c0      	cbz	r0, 1cf5e <net_frag_read+0x80>
	while (len-- > 0 && frag) {
   1cf2c:	1e59      	subs	r1, r3, #1
   1cf2e:	b289      	uxth	r1, r1
   1cf30:	b1db      	cbz	r3, 1cf6a <net_frag_read+0x8c>
   1cf32:	b1d0      	cbz	r0, 1cf6a <net_frag_read+0x8c>
		if (data) {
   1cf34:	2e00      	cmp	r6, #0
   1cf36:	d0eb      	beq.n	1cf10 <net_frag_read+0x32>
			frag = net_frag_read_byte(frag, *pos,
   1cf38:	8813      	ldrh	r3, [r2, #0]
						  pos, data + copy++);
   1cf3a:	1c6c      	adds	r4, r5, #1
   1cf3c:	b2a4      	uxth	r4, r4
	if (data) {
   1cf3e:	42ee      	cmn	r6, r5
   1cf40:	d002      	beq.n	1cf48 <net_frag_read+0x6a>
		*data = frag->data[offset];
   1cf42:	6887      	ldr	r7, [r0, #8]
   1cf44:	5cff      	ldrb	r7, [r7, r3]
   1cf46:	5577      	strb	r7, [r6, r5]
	*pos = offset + 1;
   1cf48:	3301      	adds	r3, #1
   1cf4a:	b29b      	uxth	r3, r3
   1cf4c:	8013      	strh	r3, [r2, #0]
	if (*pos >= frag->len) {
   1cf4e:	8985      	ldrh	r5, [r0, #12]
   1cf50:	42ab      	cmp	r3, r5
   1cf52:	d3e8      	bcc.n	1cf26 <net_frag_read+0x48>
		*pos = 0;
   1cf54:	2300      	movs	r3, #0
   1cf56:	8013      	strh	r3, [r2, #0]
		return frag->frags;
   1cf58:	6800      	ldr	r0, [r0, #0]
						  pos, data + copy++);
   1cf5a:	4625      	mov	r5, r4
   1cf5c:	e7e4      	b.n	1cf28 <net_frag_read+0x4a>
		if (!frag && len) {
   1cf5e:	2900      	cmp	r1, #0
   1cf60:	d0e4      	beq.n	1cf2c <net_frag_read+0x4e>
	}

	return frag;

error:
	*pos = 0xffff;
   1cf62:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1cf66:	8013      	strh	r3, [r2, #0]

	return NULL;
   1cf68:	2000      	movs	r0, #0
}
   1cf6a:	bcf0      	pop	{r4, r5, r6, r7}
   1cf6c:	4770      	bx	lr

0001cf6e <net_frag_read_be16>:

struct net_buf *net_frag_read_be16(struct net_buf *frag, u16_t offset,
				   u16_t *pos, u16_t *value)
{
   1cf6e:	b510      	push	{r4, lr}
   1cf70:	b084      	sub	sp, #16
   1cf72:	461c      	mov	r4, r3
	struct net_buf *ret_frag;
	u8_t v16[2];

	ret_frag = net_frag_read(frag, offset, pos, sizeof(u16_t), v16);
   1cf74:	ab03      	add	r3, sp, #12
   1cf76:	9300      	str	r3, [sp, #0]
   1cf78:	2302      	movs	r3, #2
   1cf7a:	f7ff ffb0 	bl	1cede <net_frag_read>

	*value = v16[0] << 8 | v16[1];
   1cf7e:	f89d 200c 	ldrb.w	r2, [sp, #12]
   1cf82:	f89d 300d 	ldrb.w	r3, [sp, #13]
   1cf86:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1cf8a:	8023      	strh	r3, [r4, #0]

	return ret_frag;
}
   1cf8c:	b004      	add	sp, #16
   1cf8e:	bd10      	pop	{r4, pc}

0001cf90 <net_frag_read_be32>:

struct net_buf *net_frag_read_be32(struct net_buf *frag, u16_t offset,
				   u16_t *pos, u32_t *value)
{
   1cf90:	b510      	push	{r4, lr}
   1cf92:	b084      	sub	sp, #16
   1cf94:	461c      	mov	r4, r3
	struct net_buf *ret_frag;
	u8_t v32[4];

	ret_frag = net_frag_read(frag, offset, pos, sizeof(u32_t), v32);
   1cf96:	ab03      	add	r3, sp, #12
   1cf98:	9300      	str	r3, [sp, #0]
   1cf9a:	2304      	movs	r3, #4
   1cf9c:	f7ff ff9f 	bl	1cede <net_frag_read>

	*value = v32[0] << 24 | v32[1] << 16 | v32[2] << 8 | v32[3];
   1cfa0:	f89d 200c 	ldrb.w	r2, [sp, #12]
   1cfa4:	f89d 300d 	ldrb.w	r3, [sp, #13]
   1cfa8:	041b      	lsls	r3, r3, #16
   1cfaa:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   1cfae:	f89d 200e 	ldrb.w	r2, [sp, #14]
   1cfb2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1cfb6:	f89d 200f 	ldrb.w	r2, [sp, #15]
   1cfba:	4313      	orrs	r3, r2
   1cfbc:	6023      	str	r3, [r4, #0]

	return ret_frag;
}
   1cfbe:	b004      	add	sp, #16
   1cfc0:	bd10      	pop	{r4, pc}

0001cfc2 <net_pkt_write>:

struct net_buf *net_pkt_write(struct net_pkt *pkt, struct net_buf *frag,
			      u16_t offset, u16_t *pos,
			      u16_t len, u8_t *data,
			      s32_t timeout)
{
   1cfc2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cfc6:	b083      	sub	sp, #12
   1cfc8:	9201      	str	r2, [sp, #4]
   1cfca:	469b      	mov	fp, r3
   1cfcc:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
   1cfd0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
	if (!pkt) {
   1cfd2:	2800      	cmp	r0, #0
   1cfd4:	d06d      	beq.n	1d0b2 <net_pkt_write+0xf0>
   1cfd6:	460c      	mov	r4, r1
   1cfd8:	4682      	mov	sl, r0
   1cfda:	4615      	mov	r5, r2
	if (data) {
   1cfdc:	b364      	cbz	r4, 1d038 <net_pkt_write+0x76>
		if (!frag) {
   1cfde:	2c00      	cmp	r4, #0
   1cfe0:	d065      	beq.n	1d0ae <net_pkt_write+0xec>
		if (offset < frag->len) {
   1cfe2:	89a3      	ldrh	r3, [r4, #12]
   1cfe4:	42ab      	cmp	r3, r5
   1cfe6:	d863      	bhi.n	1d0b0 <net_pkt_write+0xee>
		if (offset == frag->len) {
   1cfe8:	d032      	beq.n	1d050 <net_pkt_write+0x8e>
		if (offset > frag->len) {
   1cfea:	42ab      	cmp	r3, r5
   1cfec:	d2f6      	bcs.n	1cfdc <net_pkt_write+0x1a>
			offset -= frag->len;
   1cfee:	1aed      	subs	r5, r5, r3
   1cff0:	b2ad      	uxth	r5, r5
			tailroom = net_buf_tailroom(frag);
   1cff2:	f104 0908 	add.w	r9, r4, #8
   1cff6:	4648      	mov	r0, r9
   1cff8:	f7fd f939 	bl	1a26e <net_buf_simple_tailroom>
   1cffc:	fa1f f880 	uxth.w	r8, r0
			if (offset < tailroom) {
   1d000:	4545      	cmp	r5, r8
   1d002:	d33a      	bcc.n	1d07a <net_pkt_write+0xb8>
			if (offset == tailroom) {
   1d004:	4545      	cmp	r5, r8
   1d006:	d03e      	beq.n	1d086 <net_pkt_write+0xc4>
			if (offset > tailroom) {
   1d008:	4545      	cmp	r5, r8
   1d00a:	d9e7      	bls.n	1cfdc <net_pkt_write+0x1a>
				net_buf_add(frag, tailroom);
   1d00c:	b281      	uxth	r1, r0
   1d00e:	4648      	mov	r0, r9
   1d010:	f7fd f8c4 	bl	1a19c <net_buf_simple_add>
				offset -= tailroom;
   1d014:	eba5 0508 	sub.w	r5, r5, r8
   1d018:	b2ad      	uxth	r5, r5
				frag = check_and_create_data(pkt,
   1d01a:	6824      	ldr	r4, [r4, #0]
	if (data) {
   1d01c:	2c00      	cmp	r4, #0
   1d01e:	d1dd      	bne.n	1cfdc <net_pkt_write+0x1a>
	frag = net_pkt_get_frag(pkt, timeout);
   1d020:	990e      	ldr	r1, [sp, #56]	; 0x38
   1d022:	4650      	mov	r0, sl
   1d024:	f7ff fd8a 	bl	1cb3c <net_pkt_get_frag>
	if (!frag) {
   1d028:	4604      	mov	r4, r0
   1d02a:	2800      	cmp	r0, #0
   1d02c:	d0d6      	beq.n	1cfdc <net_pkt_write+0x1a>
	net_pkt_frag_add(pkt, frag);
   1d02e:	4601      	mov	r1, r0
   1d030:	4650      	mov	r0, sl
   1d032:	f7ff fe00 	bl	1cc36 <net_pkt_frag_add>
   1d036:	e7d1      	b.n	1cfdc <net_pkt_write+0x1a>
	frag = net_pkt_get_frag(pkt, timeout);
   1d038:	990e      	ldr	r1, [sp, #56]	; 0x38
   1d03a:	4650      	mov	r0, sl
   1d03c:	f7ff fd7e 	bl	1cb3c <net_pkt_get_frag>
	if (!frag) {
   1d040:	4604      	mov	r4, r0
   1d042:	2800      	cmp	r0, #0
   1d044:	d0cb      	beq.n	1cfde <net_pkt_write+0x1c>
	net_pkt_frag_add(pkt, frag);
   1d046:	4601      	mov	r1, r0
   1d048:	4650      	mov	r0, sl
   1d04a:	f7ff fdf4 	bl	1cc36 <net_pkt_frag_add>
   1d04e:	e7c6      	b.n	1cfde <net_pkt_write+0x1c>
			if (net_buf_tailroom(frag)) {
   1d050:	f104 0008 	add.w	r0, r4, #8
   1d054:	f7fd f90b 	bl	1a26e <net_buf_simple_tailroom>
   1d058:	bb50      	cbnz	r0, 1d0b0 <net_pkt_write+0xee>
			return check_and_create_data(pkt, frag->frags,
   1d05a:	6824      	ldr	r4, [r4, #0]
	if (data) {
   1d05c:	b10c      	cbz	r4, 1d062 <net_pkt_write+0xa0>
			*pos = 0;
   1d05e:	2500      	movs	r5, #0
   1d060:	e026      	b.n	1d0b0 <net_pkt_write+0xee>
	frag = net_pkt_get_frag(pkt, timeout);
   1d062:	990e      	ldr	r1, [sp, #56]	; 0x38
   1d064:	4650      	mov	r0, sl
   1d066:	f7ff fd69 	bl	1cb3c <net_pkt_get_frag>
	if (!frag) {
   1d06a:	4604      	mov	r4, r0
   1d06c:	2800      	cmp	r0, #0
   1d06e:	d0f6      	beq.n	1d05e <net_pkt_write+0x9c>
	net_pkt_frag_add(pkt, frag);
   1d070:	4601      	mov	r1, r0
   1d072:	4650      	mov	r0, sl
   1d074:	f7ff fddf 	bl	1cc36 <net_pkt_frag_add>
   1d078:	e7f1      	b.n	1d05e <net_pkt_write+0x9c>
				net_buf_add(frag, offset);
   1d07a:	4629      	mov	r1, r5
   1d07c:	4648      	mov	r0, r9
   1d07e:	f7fd f88d 	bl	1a19c <net_buf_simple_add>
				*pos = frag->len;
   1d082:	89a5      	ldrh	r5, [r4, #12]
   1d084:	e014      	b.n	1d0b0 <net_pkt_write+0xee>
				net_buf_add(frag, tailroom);
   1d086:	b281      	uxth	r1, r0
   1d088:	4648      	mov	r0, r9
   1d08a:	f7fd f887 	bl	1a19c <net_buf_simple_add>
				return check_and_create_data(pkt,
   1d08e:	6824      	ldr	r4, [r4, #0]
	if (data) {
   1d090:	b10c      	cbz	r4, 1d096 <net_pkt_write+0xd4>
				*pos = 0;
   1d092:	2500      	movs	r5, #0
   1d094:	e00c      	b.n	1d0b0 <net_pkt_write+0xee>
	frag = net_pkt_get_frag(pkt, timeout);
   1d096:	990e      	ldr	r1, [sp, #56]	; 0x38
   1d098:	4650      	mov	r0, sl
   1d09a:	f7ff fd4f 	bl	1cb3c <net_pkt_get_frag>
	if (!frag) {
   1d09e:	4604      	mov	r4, r0
   1d0a0:	2800      	cmp	r0, #0
   1d0a2:	d0f6      	beq.n	1d092 <net_pkt_write+0xd0>
	net_pkt_frag_add(pkt, frag);
   1d0a4:	4601      	mov	r1, r0
   1d0a6:	4650      	mov	r0, sl
   1d0a8:	f7ff fdc5 	bl	1cc36 <net_pkt_frag_add>
   1d0ac:	e7f1      	b.n	1d092 <net_pkt_write+0xd0>
		if (!frag) {
   1d0ae:	9d01      	ldr	r5, [sp, #4]
		NET_ERR("Invalid packet");
		goto error;
	}

	frag = adjust_write_offset(pkt, frag, offset, &offset, timeout);
	if (!frag) {
   1d0b0:	b96c      	cbnz	r4, 1d0ce <net_pkt_write+0x10c>
			net_pkt_frag_add(pkt, frag);
		}
	} while (1);

error:
	*pos = 0xffff;
   1d0b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1d0b6:	f8ab 3000 	strh.w	r3, [fp]

	return NULL;
   1d0ba:	2000      	movs	r0, #0
   1d0bc:	e02d      	b.n	1d11a <net_pkt_write+0x158>
		len -= count;
   1d0be:	eba6 0608 	sub.w	r6, r6, r8
   1d0c2:	b2b6      	uxth	r6, r6
		if (len == 0) {
   1d0c4:	b32e      	cbz	r6, 1d112 <net_pkt_write+0x150>
		data += count;
   1d0c6:	4447      	add	r7, r8
		frag = frag->frags;
   1d0c8:	6824      	ldr	r4, [r4, #0]
		if (!frag) {
   1d0ca:	b34c      	cbz	r4, 1d120 <net_pkt_write+0x15e>
		offset = 0;
   1d0cc:	2500      	movs	r5, #0
		u16_t space = frag->size - net_buf_headroom(frag) - offset;
   1d0ce:	f8b4 800e 	ldrh.w	r8, [r4, #14]
   1d0d2:	f104 0908 	add.w	r9, r4, #8
   1d0d6:	4648      	mov	r0, r9
   1d0d8:	f7fd f8c5 	bl	1a266 <net_buf_simple_headroom>
   1d0dc:	eba8 0800 	sub.w	r8, r8, r0
   1d0e0:	fa1f f888 	uxth.w	r8, r8
   1d0e4:	eba8 0805 	sub.w	r8, r8, r5
   1d0e8:	fa1f f888 	uxth.w	r8, r8
		u16_t count = min(len, space);
   1d0ec:	45b0      	cmp	r8, r6
   1d0ee:	bf28      	it	cs
   1d0f0:	46b0      	movcs	r8, r6
		memcpy(frag->data + offset, data, count);
   1d0f2:	68a0      	ldr	r0, [r4, #8]
   1d0f4:	4642      	mov	r2, r8
   1d0f6:	4639      	mov	r1, r7
   1d0f8:	4428      	add	r0, r5
   1d0fa:	f7e3 f8e1 	bl	2c0 <memcpy>
		size_to_add = offset + count - frag->len;
   1d0fe:	eb05 0108 	add.w	r1, r5, r8
   1d102:	89a3      	ldrh	r3, [r4, #12]
   1d104:	1ac9      	subs	r1, r1, r3
		if (size_to_add > 0) {
   1d106:	2900      	cmp	r1, #0
   1d108:	ddd9      	ble.n	1d0be <net_pkt_write+0xfc>
			net_buf_add(frag, size_to_add);
   1d10a:	4648      	mov	r0, r9
   1d10c:	f7fd f846 	bl	1a19c <net_buf_simple_add>
   1d110:	e7d5      	b.n	1d0be <net_pkt_write+0xfc>
			*pos = offset + count;
   1d112:	4445      	add	r5, r8
   1d114:	f8ab 5000 	strh.w	r5, [fp]
			return frag;
   1d118:	4620      	mov	r0, r4
}
   1d11a:	b003      	add	sp, #12
   1d11c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			frag = net_pkt_get_frag(pkt, timeout);
   1d120:	990e      	ldr	r1, [sp, #56]	; 0x38
   1d122:	4650      	mov	r0, sl
   1d124:	f7ff fd0a 	bl	1cb3c <net_pkt_get_frag>
			if (!frag) {
   1d128:	4604      	mov	r4, r0
   1d12a:	2800      	cmp	r0, #0
   1d12c:	d0c1      	beq.n	1d0b2 <net_pkt_write+0xf0>
			net_pkt_frag_add(pkt, frag);
   1d12e:	4601      	mov	r1, r0
   1d130:	4650      	mov	r0, sl
   1d132:	f7ff fd80 	bl	1cc36 <net_pkt_frag_add>
   1d136:	e7c9      	b.n	1d0cc <net_pkt_write+0x10a>

0001d138 <net_pkt_get_info>:
void net_pkt_get_info(struct k_mem_slab **rx,
		      struct k_mem_slab **tx,
		      struct net_buf_pool **rx_data,
		      struct net_buf_pool **tx_data)
{
	if (rx) {
   1d138:	b170      	cbz	r0, 1d158 <net_pkt_get_info+0x20>
{
   1d13a:	b410      	push	{r4}
   1d13c:	4604      	mov	r4, r0
		*rx = &rx_pkts;
   1d13e:	480c      	ldr	r0, [pc, #48]	; (1d170 <net_pkt_get_info+0x38>)
   1d140:	6020      	str	r0, [r4, #0]
	}

	if (tx) {
   1d142:	b109      	cbz	r1, 1d148 <net_pkt_get_info+0x10>
		*tx = &tx_pkts;
   1d144:	480b      	ldr	r0, [pc, #44]	; (1d174 <net_pkt_get_info+0x3c>)
   1d146:	6008      	str	r0, [r1, #0]
	}

	if (rx_data) {
   1d148:	b10a      	cbz	r2, 1d14e <net_pkt_get_info+0x16>
		*rx_data = &rx_bufs;
   1d14a:	490b      	ldr	r1, [pc, #44]	; (1d178 <net_pkt_get_info+0x40>)
   1d14c:	6011      	str	r1, [r2, #0]
	}

	if (tx_data) {
   1d14e:	b10b      	cbz	r3, 1d154 <net_pkt_get_info+0x1c>
		*tx_data = &tx_bufs;
   1d150:	4a0a      	ldr	r2, [pc, #40]	; (1d17c <net_pkt_get_info+0x44>)
   1d152:	601a      	str	r2, [r3, #0]
	}
}
   1d154:	bc10      	pop	{r4}
   1d156:	4770      	bx	lr
	if (tx) {
   1d158:	b109      	cbz	r1, 1d15e <net_pkt_get_info+0x26>
		*tx = &tx_pkts;
   1d15a:	4806      	ldr	r0, [pc, #24]	; (1d174 <net_pkt_get_info+0x3c>)
   1d15c:	6008      	str	r0, [r1, #0]
	if (rx_data) {
   1d15e:	b10a      	cbz	r2, 1d164 <net_pkt_get_info+0x2c>
		*rx_data = &rx_bufs;
   1d160:	4905      	ldr	r1, [pc, #20]	; (1d178 <net_pkt_get_info+0x40>)
   1d162:	6011      	str	r1, [r2, #0]
	if (tx_data) {
   1d164:	2b00      	cmp	r3, #0
   1d166:	d0f6      	beq.n	1d156 <net_pkt_get_info+0x1e>
		*tx_data = &tx_bufs;
   1d168:	4a04      	ldr	r2, [pc, #16]	; (1d17c <net_pkt_get_info+0x44>)
   1d16a:	601a      	str	r2, [r3, #0]
   1d16c:	4770      	bx	lr
   1d16e:	bf00      	nop
   1d170:	2000cf84 	.word	0x2000cf84
   1d174:	2000cfa0 	.word	0x2000cfa0
   1d178:	2000d104 	.word	0x2000d104
   1d17c:	2000d124 	.word	0x2000d124

0001d180 <net_frag_get_pos>:
#endif /* CONFIG_NET_DEBUG_NET_PKT */

struct net_buf *net_frag_get_pos(struct net_pkt *pkt,
				 u16_t offset,
				 u16_t *pos)
{
   1d180:	b500      	push	{lr}
   1d182:	b083      	sub	sp, #12
	struct net_buf *frag;

	frag = net_frag_skip(pkt->frags, offset, pos, 0);
   1d184:	6880      	ldr	r0, [r0, #8]
 */
static inline struct net_buf *net_frag_skip(struct net_buf *frag,
					    u16_t offset,
					    u16_t *pos, u16_t len)
{
	return net_frag_read(frag, offset, pos, len, NULL);
   1d186:	2300      	movs	r3, #0
   1d188:	9300      	str	r3, [sp, #0]
   1d18a:	f7ff fea8 	bl	1cede <net_frag_read>
	if (!frag) {
		return NULL;
	}

	return frag;
}
   1d18e:	b003      	add	sp, #12
   1d190:	f85d fb04 	ldr.w	pc, [sp], #4

0001d194 <net_pkt_icmp_data>:
#else
#define too_short_msg(...)
#endif

struct net_icmp_hdr *net_pkt_icmp_data(struct net_pkt *pkt)
{
   1d194:	b500      	push	{lr}
   1d196:	b083      	sub	sp, #12
	struct net_buf *frag;
	u16_t offset;

	frag = net_frag_get_pos(pkt,
				net_pkt_ip_hdr_len(pkt) +
   1d198:	f890 1033 	ldrb.w	r1, [r0, #51]	; 0x33
				net_pkt_ipv6_ext_len(pkt),
   1d19c:	f890 303b 	ldrb.w	r3, [r0, #59]	; 0x3b
	frag = net_frag_get_pos(pkt,
   1d1a0:	f10d 0206 	add.w	r2, sp, #6
   1d1a4:	4419      	add	r1, r3
   1d1a6:	f7ff ffeb 	bl	1d180 <net_frag_get_pos>
				&offset);
	if (!frag) {
   1d1aa:	b130      	cbz	r0, 1d1ba <net_pkt_icmp_data+0x26>
		/* We tried to read past the end of the data */
		too_short_msg("icmp data", pkt, offset, 0);
		return NULL;
	}

	return (struct net_icmp_hdr *)(frag->data + offset);
   1d1ac:	6880      	ldr	r0, [r0, #8]
   1d1ae:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1d1b2:	4418      	add	r0, r3
}
   1d1b4:	b003      	add	sp, #12
   1d1b6:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
   1d1ba:	2000      	movs	r0, #0
   1d1bc:	e7fa      	b.n	1d1b4 <net_pkt_icmp_data+0x20>

0001d1be <net_pkt_icmp_opt_data>:

u8_t *net_pkt_icmp_opt_data(struct net_pkt *pkt, size_t opt_len)
{
   1d1be:	b500      	push	{lr}
   1d1c0:	b083      	sub	sp, #12
	struct net_buf *frag;
	u16_t offset;

	frag = net_frag_get_pos(pkt,
				net_pkt_ip_hdr_len(pkt) +
   1d1c2:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
				net_pkt_ipv6_ext_len(pkt) + opt_len,
   1d1c6:	f890 203b 	ldrb.w	r2, [r0, #59]	; 0x3b
				net_pkt_ip_hdr_len(pkt) +
   1d1ca:	4413      	add	r3, r2
	frag = net_frag_get_pos(pkt,
   1d1cc:	4419      	add	r1, r3
   1d1ce:	f10d 0206 	add.w	r2, sp, #6
   1d1d2:	b289      	uxth	r1, r1
   1d1d4:	f7ff ffd4 	bl	1d180 <net_frag_get_pos>
				&offset);
	if (!frag) {
   1d1d8:	b130      	cbz	r0, 1d1e8 <net_pkt_icmp_opt_data+0x2a>
		/* We tried to read past the end of the data */
		too_short_msg("icmp opt data", pkt, offset, opt_len);
		return NULL;
	}

	return frag->data + offset;
   1d1da:	6880      	ldr	r0, [r0, #8]
   1d1dc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1d1e0:	4418      	add	r0, r3
}
   1d1e2:	b003      	add	sp, #12
   1d1e4:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
   1d1e8:	2000      	movs	r0, #0
   1d1ea:	e7fa      	b.n	1d1e2 <net_pkt_icmp_opt_data+0x24>

0001d1ec <net_pkt_udp_data>:

struct net_udp_hdr *net_pkt_udp_data(struct net_pkt *pkt)
{
   1d1ec:	b500      	push	{lr}
   1d1ee:	b083      	sub	sp, #12
	struct net_buf *frag;
	u16_t offset;

	frag = net_frag_get_pos(pkt,
				net_pkt_ip_hdr_len(pkt) +
   1d1f0:	f890 1033 	ldrb.w	r1, [r0, #51]	; 0x33
				net_pkt_ipv6_ext_len(pkt),
   1d1f4:	f890 303b 	ldrb.w	r3, [r0, #59]	; 0x3b
	frag = net_frag_get_pos(pkt,
   1d1f8:	f10d 0206 	add.w	r2, sp, #6
   1d1fc:	4419      	add	r1, r3
   1d1fe:	f7ff ffbf 	bl	1d180 <net_frag_get_pos>
				&offset);
	if (!frag) {
   1d202:	b130      	cbz	r0, 1d212 <net_pkt_udp_data+0x26>
		/* We tried to read past the end of the data */
		too_short_msg("udp data", pkt, offset, 0);
		return NULL;
	}

	return (struct net_udp_hdr *)(frag->data + offset);
   1d204:	6880      	ldr	r0, [r0, #8]
   1d206:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1d20a:	4418      	add	r0, r3
}
   1d20c:	b003      	add	sp, #12
   1d20e:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
   1d212:	2000      	movs	r0, #0
   1d214:	e7fa      	b.n	1d20c <net_pkt_udp_data+0x20>

0001d216 <net_pkt_tcp_data>:

struct net_tcp_hdr *net_pkt_tcp_data(struct net_pkt *pkt)
{
   1d216:	b500      	push	{lr}
   1d218:	b083      	sub	sp, #12
	struct net_buf *frag;
	u16_t offset;

	frag = net_frag_get_pos(pkt,
				net_pkt_ip_hdr_len(pkt) +
   1d21a:	f890 1033 	ldrb.w	r1, [r0, #51]	; 0x33
				net_pkt_ipv6_ext_len(pkt),
   1d21e:	f890 303b 	ldrb.w	r3, [r0, #59]	; 0x3b
	frag = net_frag_get_pos(pkt,
   1d222:	f10d 0206 	add.w	r2, sp, #6
   1d226:	4419      	add	r1, r3
   1d228:	f7ff ffaa 	bl	1d180 <net_frag_get_pos>
				&offset);
	if (!frag) {
   1d22c:	b130      	cbz	r0, 1d23c <net_pkt_tcp_data+0x26>
		/* We tried to read past the end of the data */
		too_short_msg("tcp data", pkt, offset, 0);
		return NULL;
	}

	return (struct net_tcp_hdr *)(frag->data + offset);
   1d22e:	6880      	ldr	r0, [r0, #8]
   1d230:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1d234:	4418      	add	r0, r3
}
   1d236:	b003      	add	sp, #12
   1d238:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
   1d23c:	2000      	movs	r0, #0
   1d23e:	e7fa      	b.n	1d236 <net_pkt_tcp_data+0x20>

0001d240 <net_pkt_clone>:

struct net_pkt *net_pkt_clone(struct net_pkt *pkt, s32_t timeout)
{
   1d240:	b570      	push	{r4, r5, r6, lr}
   1d242:	b082      	sub	sp, #8
	struct net_pkt *clone;
	struct net_buf *frag;
	u16_t pos;

	if (!pkt) {
   1d244:	4605      	mov	r5, r0
   1d246:	2800      	cmp	r0, #0
   1d248:	d065      	beq.n	1d316 <net_pkt_clone+0xd6>
   1d24a:	460e      	mov	r6, r1
		return NULL;
	}

	clone = net_pkt_get_reserve(pkt->slab, 0, timeout);
   1d24c:	460a      	mov	r2, r1
   1d24e:	2100      	movs	r1, #0
   1d250:	6840      	ldr	r0, [r0, #4]
   1d252:	f7ff fbad 	bl	1c9b0 <net_pkt_get_reserve>
	if (!clone) {
   1d256:	4604      	mov	r4, r0
   1d258:	2800      	cmp	r0, #0
   1d25a:	d054      	beq.n	1d306 <net_pkt_clone+0xc6>
		return NULL;
	}

	clone->frags = NULL;
   1d25c:	2300      	movs	r3, #0
   1d25e:	6083      	str	r3, [r0, #8]

	if (pkt->frags) {
   1d260:	68ab      	ldr	r3, [r5, #8]
   1d262:	b173      	cbz	r3, 1d282 <net_pkt_clone+0x42>
   1d264:	2100      	movs	r1, #0
   1d266:	e002      	b.n	1d26e <net_pkt_clone+0x2e>
		bytes += buf->len;
   1d268:	899a      	ldrh	r2, [r3, #12]
   1d26a:	4411      	add	r1, r2
		buf = buf->frags;
   1d26c:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   1d26e:	2b00      	cmp	r3, #0
   1d270:	d1fa      	bne.n	1d268 <net_pkt_clone+0x28>
	return net_pkt_copy(pkt, net_buf_frags_len(pkt->frags),
   1d272:	4633      	mov	r3, r6
   1d274:	2200      	movs	r2, #0
   1d276:	4628      	mov	r0, r5
   1d278:	f7ff fcf4 	bl	1cc64 <net_pkt_copy>
		clone->frags = net_pkt_copy_all(pkt, 0, timeout);
   1d27c:	60a0      	str	r0, [r4, #8]
		if (!clone->frags) {
   1d27e:	2800      	cmp	r0, #0
   1d280:	d044      	beq.n	1d30c <net_pkt_clone+0xcc>
			net_pkt_unref(clone);
			return NULL;
		}
	}

	clone->context = pkt->context;
   1d282:	68eb      	ldr	r3, [r5, #12]
   1d284:	60e3      	str	r3, [r4, #12]
	clone->token = pkt->token;
   1d286:	692b      	ldr	r3, [r5, #16]
   1d288:	6123      	str	r3, [r4, #16]
	clone->iface = pkt->iface;
   1d28a:	696b      	ldr	r3, [r5, #20]
   1d28c:	6163      	str	r3, [r4, #20]

	if (clone->frags) {
   1d28e:	68a3      	ldr	r3, [r4, #8]
   1d290:	b1db      	cbz	r3, 1d2ca <net_pkt_clone+0x8a>
		frag = net_frag_get_pos(clone, net_pkt_ip_hdr_len(pkt), &pos);
   1d292:	f10d 0206 	add.w	r2, sp, #6
   1d296:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
   1d29a:	4620      	mov	r0, r4
   1d29c:	f7ff ff70 	bl	1d180 <net_frag_get_pos>

		net_pkt_set_appdata(clone, frag->data + pos);
   1d2a0:	6883      	ldr	r3, [r0, #8]
   1d2a2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   1d2a6:	4413      	add	r3, r2
	pkt->appdata = data;
   1d2a8:	61a3      	str	r3, [r4, #24]
	return pkt->appdatalen;
   1d2aa:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
	pkt->appdatalen = len;
   1d2ac:	8623      	strh	r3, [r4, #48]	; 0x30

		/* The link header pointers are only usable if there is
		 * a fragment that we copied because those pointers point
		 * to start of the fragment which we do not have right now.
		 */
		memcpy(&clone->lladdr_src, &pkt->lladdr_src,
   1d2ae:	2208      	movs	r2, #8
   1d2b0:	f105 0120 	add.w	r1, r5, #32
   1d2b4:	f104 0020 	add.w	r0, r4, #32
   1d2b8:	f7e3 f802 	bl	2c0 <memcpy>
		       sizeof(clone->lladdr_src));
		memcpy(&clone->lladdr_dst, &pkt->lladdr_dst,
   1d2bc:	2208      	movs	r2, #8
   1d2be:	f105 0128 	add.w	r1, r5, #40	; 0x28
   1d2c2:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1d2c6:	f7e2 fffb 	bl	2c0 <memcpy>
	pkt->next_hdr = hdr;
   1d2ca:	2300      	movs	r3, #0
   1d2cc:	61e3      	str	r3, [r4, #28]
	return pkt->ip_hdr_len;
   1d2ce:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
	pkt->ip_hdr_len = len;
   1d2d2:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
	return pkt->family;
   1d2d6:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
   1d2da:	f3c3 03c3 	ubfx	r3, r3, #3, #4
	pkt->family = family;
   1d2de:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
   1d2e2:	f363 02c6 	bfi	r2, r3, #3, #4
   1d2e6:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
	net_pkt_set_ip_hdr_len(clone, net_pkt_ip_hdr_len(pkt));

	net_pkt_set_family(clone, net_pkt_family(pkt));

#if defined(CONFIG_NET_IPV6)
	clone->ipv6_hop_limit = pkt->ipv6_hop_limit;
   1d2ea:	f895 303a 	ldrb.w	r3, [r5, #58]	; 0x3a
   1d2ee:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
	clone->ipv6_ext_len = pkt->ipv6_ext_len;
   1d2f2:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
   1d2f6:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
	clone->ipv6_ext_opt_len = pkt->ipv6_ext_opt_len;
   1d2fa:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
   1d2fe:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
	clone->ipv6_prev_hdr_start = pkt->ipv6_prev_hdr_start;
   1d302:	8feb      	ldrh	r3, [r5, #62]	; 0x3e
   1d304:	87e3      	strh	r3, [r4, #62]	; 0x3e
#endif

	NET_DBG("Cloned %p to %p", pkt, clone);

	return clone;
}
   1d306:	4620      	mov	r0, r4
   1d308:	b002      	add	sp, #8
   1d30a:	bd70      	pop	{r4, r5, r6, pc}
			net_pkt_unref(clone);
   1d30c:	4620      	mov	r0, r4
   1d30e:	f7ff fc68 	bl	1cbe2 <net_pkt_unref>
			return NULL;
   1d312:	2400      	movs	r4, #0
   1d314:	e7f7      	b.n	1d306 <net_pkt_clone+0xc6>
		return NULL;
   1d316:	4604      	mov	r4, r0
   1d318:	e7f5      	b.n	1d306 <net_pkt_clone+0xc6>

0001d31a <net_pkt_init>:

void net_pkt_init(void)
{
   1d31a:	4770      	bx	lr

0001d31c <net_value_to_udec>:
	*(ptr - 1) = '\0';
	return buf;
}

static int net_value_to_udec(char *buf, u32_t value, int precision)
{
   1d31c:	b470      	push	{r4, r5, r6}
	int i;
	int temp;
	char *start = buf;

	divisor = 1000000000;
	if (precision < 0)
   1d31e:	2a00      	cmp	r2, #0
   1d320:	db03      	blt.n	1d32a <net_value_to_udec+0xe>
	for (i = 9; i >= 0; i--, divisor /= 10) {
		temp = value / divisor;
		value = value % divisor;
		if ((precision > i) || (temp != 0)) {
			precision = i;
			*buf++ = (char) (temp + '0');
   1d322:	4606      	mov	r6, r0
   1d324:	2409      	movs	r4, #9
   1d326:	4b0e      	ldr	r3, [pc, #56]	; (1d360 <net_value_to_udec+0x44>)
   1d328:	e00a      	b.n	1d340 <net_value_to_udec+0x24>
		precision = 1;
   1d32a:	2201      	movs	r2, #1
   1d32c:	e7f9      	b.n	1d322 <net_value_to_udec+0x6>
			*buf++ = (char) (temp + '0');
   1d32e:	3530      	adds	r5, #48	; 0x30
   1d330:	7035      	strb	r5, [r6, #0]
			precision = i;
   1d332:	4622      	mov	r2, r4
			*buf++ = (char) (temp + '0');
   1d334:	3601      	adds	r6, #1
	for (i = 9; i >= 0; i--, divisor /= 10) {
   1d336:	3c01      	subs	r4, #1
   1d338:	4d0a      	ldr	r5, [pc, #40]	; (1d364 <net_value_to_udec+0x48>)
   1d33a:	fba5 5303 	umull	r5, r3, r5, r3
   1d33e:	08db      	lsrs	r3, r3, #3
   1d340:	2c00      	cmp	r4, #0
   1d342:	db08      	blt.n	1d356 <net_value_to_udec+0x3a>
		temp = value / divisor;
   1d344:	fbb1 f5f3 	udiv	r5, r1, r3
		value = value % divisor;
   1d348:	fb03 1115 	mls	r1, r3, r5, r1
		if ((precision > i) || (temp != 0)) {
   1d34c:	42a2      	cmp	r2, r4
   1d34e:	dcee      	bgt.n	1d32e <net_value_to_udec+0x12>
   1d350:	2d00      	cmp	r5, #0
   1d352:	d0f0      	beq.n	1d336 <net_value_to_udec+0x1a>
   1d354:	e7eb      	b.n	1d32e <net_value_to_udec+0x12>
		}
	}
	*buf = 0;
   1d356:	2300      	movs	r3, #0
   1d358:	7033      	strb	r3, [r6, #0]

	return buf - start;
}
   1d35a:	1a30      	subs	r0, r6, r0
   1d35c:	bc70      	pop	{r4, r5, r6}
   1d35e:	4770      	bx	lr
   1d360:	3b9aca00 	.word	0x3b9aca00
   1d364:	cccccccd 	.word	0xcccccccd

0001d368 <calc_chksum>:

	return 0;
}

static u16_t calc_chksum(u16_t sum, const u8_t *ptr, u16_t len)
{
   1d368:	b410      	push	{r4}
	u16_t tmp;
	const u8_t *end;

	end = ptr + len - 1;
   1d36a:	3a01      	subs	r2, #1
   1d36c:	440a      	add	r2, r1

	while (ptr < end) {
   1d36e:	e000      	b.n	1d372 <calc_chksum+0xa>
		tmp = (ptr[0] << 8) + ptr[1];
		sum += tmp;
		if (sum < tmp) {
			sum++;
		}
		ptr += 2;
   1d370:	3102      	adds	r1, #2
	while (ptr < end) {
   1d372:	4291      	cmp	r1, r2
   1d374:	d20b      	bcs.n	1d38e <calc_chksum+0x26>
		tmp = (ptr[0] << 8) + ptr[1];
   1d376:	780c      	ldrb	r4, [r1, #0]
   1d378:	784b      	ldrb	r3, [r1, #1]
   1d37a:	eb03 2304 	add.w	r3, r3, r4, lsl #8
   1d37e:	b29b      	uxth	r3, r3
		sum += tmp;
   1d380:	4418      	add	r0, r3
   1d382:	b280      	uxth	r0, r0
		if (sum < tmp) {
   1d384:	4283      	cmp	r3, r0
   1d386:	d9f3      	bls.n	1d370 <calc_chksum+0x8>
			sum++;
   1d388:	3001      	adds	r0, #1
   1d38a:	b280      	uxth	r0, r0
   1d38c:	e7f0      	b.n	1d370 <calc_chksum+0x8>
	}

	if (ptr == end) {
   1d38e:	d001      	beq.n	1d394 <calc_chksum+0x2c>
			sum++;
		}
	}

	return sum;
}
   1d390:	bc10      	pop	{r4}
   1d392:	4770      	bx	lr
		tmp = ptr[0] << 8;
   1d394:	780b      	ldrb	r3, [r1, #0]
   1d396:	021b      	lsls	r3, r3, #8
		sum += tmp;
   1d398:	4418      	add	r0, r3
   1d39a:	b280      	uxth	r0, r0
		if (sum < tmp) {
   1d39c:	4283      	cmp	r3, r0
   1d39e:	d9f7      	bls.n	1d390 <calc_chksum+0x28>
			sum++;
   1d3a0:	3001      	adds	r0, #1
   1d3a2:	b280      	uxth	r0, r0
   1d3a4:	e7f4      	b.n	1d390 <calc_chksum+0x28>

0001d3a6 <convert_port>:
	return false;
}

#if defined(CONFIG_NET_IPV6) || defined(CONFIG_NET_IPV4)
static bool convert_port(const char *buf, u16_t *port)
{
   1d3a6:	b530      	push	{r4, r5, lr}
   1d3a8:	b083      	sub	sp, #12
   1d3aa:	4604      	mov	r4, r0
   1d3ac:	460d      	mov	r5, r1
	unsigned long tmp;
	char *endptr;

	tmp = strtoul(buf, &endptr, 10);
   1d3ae:	220a      	movs	r2, #10
   1d3b0:	a901      	add	r1, sp, #4
   1d3b2:	f00e f93b 	bl	2b62c <strtoul>
	if ((endptr == buf && tmp == 0) ||
   1d3b6:	9b01      	ldr	r3, [sp, #4]
   1d3b8:	429c      	cmp	r4, r3
   1d3ba:	d008      	beq.n	1d3ce <convert_port+0x28>
	    !(*buf != '\0' && *endptr == '\0') ||
   1d3bc:	7822      	ldrb	r2, [r4, #0]
	if ((endptr == buf && tmp == 0) ||
   1d3be:	b16a      	cbz	r2, 1d3dc <convert_port+0x36>
	    !(*buf != '\0' && *endptr == '\0') ||
   1d3c0:	781b      	ldrb	r3, [r3, #0]
   1d3c2:	b973      	cbnz	r3, 1d3e2 <convert_port+0x3c>
	    ((unsigned long)(unsigned short)tmp != tmp)) {
   1d3c4:	b283      	uxth	r3, r0
	    !(*buf != '\0' && *endptr == '\0') ||
   1d3c6:	4298      	cmp	r0, r3
   1d3c8:	d005      	beq.n	1d3d6 <convert_port+0x30>
		return false;
   1d3ca:	2000      	movs	r0, #0
   1d3cc:	e007      	b.n	1d3de <convert_port+0x38>
	if ((endptr == buf && tmp == 0) ||
   1d3ce:	2800      	cmp	r0, #0
   1d3d0:	d1f4      	bne.n	1d3bc <convert_port+0x16>
		return false;
   1d3d2:	2000      	movs	r0, #0
   1d3d4:	e003      	b.n	1d3de <convert_port+0x38>
	}

	*port = tmp;
   1d3d6:	802b      	strh	r3, [r5, #0]

	return true;
   1d3d8:	2001      	movs	r0, #1
   1d3da:	e000      	b.n	1d3de <convert_port+0x38>
		return false;
   1d3dc:	2000      	movs	r0, #0
}
   1d3de:	b003      	add	sp, #12
   1d3e0:	bd30      	pop	{r4, r5, pc}
		return false;
   1d3e2:	2000      	movs	r0, #0
   1d3e4:	e7fb      	b.n	1d3de <convert_port+0x38>

0001d3e6 <net_byte_to_hex>:
{
   1d3e6:	b430      	push	{r4, r5}
	for (i = 0, val = (byte & 0xf0) >> 4; i < 2; i++, val = byte & 0x0f) {
   1d3e8:	090c      	lsrs	r4, r1, #4
   1d3ea:	2500      	movs	r5, #0
   1d3ec:	e00a      	b.n	1d404 <net_byte_to_hex+0x1e>
		if (i == 0 && !pad && !val) {
   1d3ee:	b96b      	cbnz	r3, 1d40c <net_byte_to_hex+0x26>
   1d3f0:	b12c      	cbz	r4, 1d3fe <net_byte_to_hex+0x18>
   1d3f2:	e00b      	b.n	1d40c <net_byte_to_hex+0x26>
			*ptr++ = (char) (val - 10 + base);
   1d3f4:	4414      	add	r4, r2
   1d3f6:	b2e4      	uxtb	r4, r4
   1d3f8:	3c0a      	subs	r4, #10
   1d3fa:	7004      	strb	r4, [r0, #0]
   1d3fc:	3001      	adds	r0, #1
	for (i = 0, val = (byte & 0xf0) >> 4; i < 2; i++, val = byte & 0x0f) {
   1d3fe:	3501      	adds	r5, #1
   1d400:	f001 040f 	and.w	r4, r1, #15
   1d404:	2d01      	cmp	r5, #1
   1d406:	dc07      	bgt.n	1d418 <net_byte_to_hex+0x32>
		if (i == 0 && !pad && !val) {
   1d408:	2d00      	cmp	r5, #0
   1d40a:	d0f0      	beq.n	1d3ee <net_byte_to_hex+0x8>
		if (val < 10) {
   1d40c:	2c09      	cmp	r4, #9
   1d40e:	dcf1      	bgt.n	1d3f4 <net_byte_to_hex+0xe>
			*ptr++ = (char) (val + '0');
   1d410:	3430      	adds	r4, #48	; 0x30
   1d412:	7004      	strb	r4, [r0, #0]
   1d414:	3001      	adds	r0, #1
   1d416:	e7f2      	b.n	1d3fe <net_byte_to_hex+0x18>
	*ptr = '\0';
   1d418:	2300      	movs	r3, #0
   1d41a:	7003      	strb	r3, [r0, #0]
}
   1d41c:	bc30      	pop	{r4, r5}
   1d41e:	4770      	bx	lr

0001d420 <net_sprint_ll_addr_buf>:
{
   1d420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d424:	4607      	mov	r7, r0
   1d426:	460e      	mov	r6, r1
   1d428:	4690      	mov	r8, r2
	switch (ll_len) {
   1d42a:	2906      	cmp	r1, #6
   1d42c:	d002      	beq.n	1d434 <net_sprint_ll_addr_buf+0x14>
   1d42e:	2908      	cmp	r1, #8
   1d430:	d000      	beq.n	1d434 <net_sprint_ll_addr_buf+0x14>
		len = 6;
   1d432:	2606      	movs	r6, #6
	for (i = 0, blen = buflen; i < len && blen > 0; i++) {
   1d434:	b2dd      	uxtb	r5, r3
	char *ptr = buf;
   1d436:	4640      	mov	r0, r8
	for (i = 0, blen = buflen; i < len && blen > 0; i++) {
   1d438:	2400      	movs	r4, #0
   1d43a:	e00c      	b.n	1d456 <net_sprint_ll_addr_buf+0x36>
		ptr = net_byte_to_hex(ptr, (char)ll[i], 'A', true);
   1d43c:	2301      	movs	r3, #1
   1d43e:	2241      	movs	r2, #65	; 0x41
   1d440:	5d39      	ldrb	r1, [r7, r4]
   1d442:	f7ff ffd0 	bl	1d3e6 <net_byte_to_hex>
   1d446:	4602      	mov	r2, r0
		*ptr++ = ':';
   1d448:	3001      	adds	r0, #1
   1d44a:	233a      	movs	r3, #58	; 0x3a
   1d44c:	7013      	strb	r3, [r2, #0]
		blen -= 3;
   1d44e:	3d03      	subs	r5, #3
   1d450:	b2ed      	uxtb	r5, r5
	for (i = 0, blen = buflen; i < len && blen > 0; i++) {
   1d452:	3401      	adds	r4, #1
   1d454:	b2e4      	uxtb	r4, r4
   1d456:	42b4      	cmp	r4, r6
   1d458:	d201      	bcs.n	1d45e <net_sprint_ll_addr_buf+0x3e>
   1d45a:	2d00      	cmp	r5, #0
   1d45c:	d1ee      	bne.n	1d43c <net_sprint_ll_addr_buf+0x1c>
	if (!(ptr - buf)) {
   1d45e:	4540      	cmp	r0, r8
   1d460:	d005      	beq.n	1d46e <net_sprint_ll_addr_buf+0x4e>
	*(ptr - 1) = '\0';
   1d462:	2300      	movs	r3, #0
   1d464:	f800 3c01 	strb.w	r3, [r0, #-1]
	return buf;
   1d468:	4640      	mov	r0, r8
   1d46a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return NULL;
   1d46e:	2000      	movs	r0, #0
}
   1d470:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001d474 <net_addr_ntop>:
{
   1d474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d478:	b087      	sub	sp, #28
	unsigned char zeros[8] = { 0 };
   1d47a:	2300      	movs	r3, #0
   1d47c:	9304      	str	r3, [sp, #16]
   1d47e:	9305      	str	r3, [sp, #20]
	if (family == AF_INET6) {
   1d480:	280a      	cmp	r0, #10
   1d482:	d011      	beq.n	1d4a8 <net_addr_ntop+0x34>
	} else if (family == AF_INET) {
   1d484:	2802      	cmp	r0, #2
   1d486:	f040 80c8 	bne.w	1d61a <net_addr_ntop+0x1a6>
		addr = (struct in_addr *)src;
   1d48a:	9101      	str	r1, [sp, #4]
		len = 4;
   1d48c:	f04f 0804 	mov.w	r8, #4
		delim = '.';
   1d490:	f04f 0b2e 	mov.w	fp, #46	; 0x2e
	s8_t pos = -1;
   1d494:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	u8_t i, bl, bh, longest = 1;
   1d498:	f04f 0a01 	mov.w	sl, #1
   1d49c:	9202      	str	r2, [sp, #8]
   1d49e:	9003      	str	r0, [sp, #12]
	char *ptr = dst;
   1d4a0:	4616      	mov	r6, r2
	bool needcolon = false;
   1d4a2:	2500      	movs	r5, #0
	for (i = 0; i < len; i++) {
   1d4a4:	462c      	mov	r4, r5
   1d4a6:	e072      	b.n	1d58e <net_addr_ntop+0x11a>
		w = (u16_t *)addr6->s6_addr16;
   1d4a8:	460f      	mov	r7, r1
		for (i = 0; i < 8; i++) {
   1d4aa:	461d      	mov	r5, r3
   1d4ac:	e001      	b.n	1d4b2 <net_addr_ntop+0x3e>
   1d4ae:	3501      	adds	r5, #1
   1d4b0:	b2ed      	uxtb	r5, r5
   1d4b2:	2d07      	cmp	r5, #7
   1d4b4:	d810      	bhi.n	1d4d8 <net_addr_ntop+0x64>
   1d4b6:	462b      	mov	r3, r5
			for (j = i; j < 8; j++) {
   1d4b8:	2b07      	cmp	r3, #7
   1d4ba:	d8f8      	bhi.n	1d4ae <net_addr_ntop+0x3a>
				if (UNALIGNED_GET(&w[j]) != 0) {
   1d4bc:	f837 1013 	ldrh.w	r1, [r7, r3, lsl #1]
   1d4c0:	2900      	cmp	r1, #0
   1d4c2:	d1f4      	bne.n	1d4ae <net_addr_ntop+0x3a>
				zeros[i]++;
   1d4c4:	a906      	add	r1, sp, #24
   1d4c6:	194c      	adds	r4, r1, r5
   1d4c8:	f814 1c08 	ldrb.w	r1, [r4, #-8]
   1d4cc:	3101      	adds	r1, #1
   1d4ce:	f804 1c08 	strb.w	r1, [r4, #-8]
			for (j = i; j < 8; j++) {
   1d4d2:	3301      	adds	r3, #1
   1d4d4:	b2db      	uxtb	r3, r3
   1d4d6:	e7ef      	b.n	1d4b8 <net_addr_ntop+0x44>
   1d4d8:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   1d4dc:	f04f 0a01 	mov.w	sl, #1
   1d4e0:	2300      	movs	r3, #0
   1d4e2:	e001      	b.n	1d4e8 <net_addr_ntop+0x74>
		for (i = 0; i < 8; i++) {
   1d4e4:	3301      	adds	r3, #1
   1d4e6:	b2db      	uxtb	r3, r3
   1d4e8:	2b07      	cmp	r3, #7
   1d4ea:	d809      	bhi.n	1d500 <net_addr_ntop+0x8c>
			if (zeros[i] > longest) {
   1d4ec:	a906      	add	r1, sp, #24
   1d4ee:	4419      	add	r1, r3
   1d4f0:	f811 1c08 	ldrb.w	r1, [r1, #-8]
   1d4f4:	458a      	cmp	sl, r1
   1d4f6:	d2f5      	bcs.n	1d4e4 <net_addr_ntop+0x70>
				pos = i;
   1d4f8:	fa4f f983 	sxtb.w	r9, r3
				longest = zeros[i];
   1d4fc:	468a      	mov	sl, r1
   1d4fe:	e7f1      	b.n	1d4e4 <net_addr_ntop+0x70>
		if (longest == 1) {
   1d500:	f1ba 0f01 	cmp.w	sl, #1
   1d504:	d004      	beq.n	1d510 <net_addr_ntop+0x9c>
		len = 8;
   1d506:	f04f 0808 	mov.w	r8, #8
	char delim = ':';
   1d50a:	f04f 0b3a 	mov.w	fp, #58	; 0x3a
   1d50e:	e7c5      	b.n	1d49c <net_addr_ntop+0x28>
		len = 8;
   1d510:	f04f 0808 	mov.w	r8, #8
	char delim = ':';
   1d514:	f04f 0b3a 	mov.w	fp, #58	; 0x3a
			pos = -1;
   1d518:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   1d51c:	e7be      	b.n	1d49c <net_addr_ntop+0x28>
			value = (u32_t)addr->s4_addr[i];
   1d51e:	9a01      	ldr	r2, [sp, #4]
   1d520:	5cd1      	ldrb	r1, [r2, r3]
   1d522:	b28b      	uxth	r3, r1
			if (value == 0) {
   1d524:	b93b      	cbnz	r3, 1d536 <net_addr_ntop+0xc2>
				*ptr++ = '0';
   1d526:	4633      	mov	r3, r6
   1d528:	2230      	movs	r2, #48	; 0x30
   1d52a:	f803 2b02 	strb.w	r2, [r3], #2
				*ptr++ = delim;
   1d52e:	f886 b001 	strb.w	fp, [r6, #1]
   1d532:	461e      	mov	r6, r3
				continue;
   1d534:	e029      	b.n	1d58a <net_addr_ntop+0x116>
			l = net_value_to_udec(ptr, value, 0);
   1d536:	2200      	movs	r2, #0
   1d538:	4630      	mov	r0, r6
   1d53a:	f7ff feef 	bl	1d31c <net_value_to_udec>
			ptr += l;
   1d53e:	fa56 f080 	uxtab	r0, r6, r0
			*ptr++ = delim;
   1d542:	1c46      	adds	r6, r0, #1
   1d544:	f880 b000 	strb.w	fp, [r0]
			continue;
   1d548:	e01f      	b.n	1d58a <net_addr_ntop+0x116>
			if (needcolon || i == 0) {
   1d54a:	b905      	cbnz	r5, 1d54e <net_addr_ntop+0xda>
   1d54c:	b95c      	cbnz	r4, 1d566 <net_addr_ntop+0xf2>
				*ptr++ = ':';
   1d54e:	1c73      	adds	r3, r6, #1
   1d550:	223a      	movs	r2, #58	; 0x3a
   1d552:	7032      	strb	r2, [r6, #0]
			*ptr++ = ':';
   1d554:	1c5e      	adds	r6, r3, #1
   1d556:	223a      	movs	r2, #58	; 0x3a
   1d558:	701a      	strb	r2, [r3, #0]
			i += longest - 1;
   1d55a:	4454      	add	r4, sl
   1d55c:	b2e4      	uxtb	r4, r4
   1d55e:	3c01      	subs	r4, #1
   1d560:	b2e4      	uxtb	r4, r4
			needcolon = false;
   1d562:	2500      	movs	r5, #0
			continue;
   1d564:	e011      	b.n	1d58a <net_addr_ntop+0x116>
   1d566:	4633      	mov	r3, r6
   1d568:	e7f4      	b.n	1d554 <net_addr_ntop+0xe0>
				ptr = net_byte_to_hex(ptr, bh, 'a', false);
   1d56a:	2300      	movs	r3, #0
   1d56c:	2261      	movs	r2, #97	; 0x61
   1d56e:	4630      	mov	r0, r6
   1d570:	f7ff ff39 	bl	1d3e6 <net_byte_to_hex>
   1d574:	e002      	b.n	1d57c <net_addr_ntop+0x108>
					*ptr++ = (char) (bh - 10 + 'a');
   1d576:	1c70      	adds	r0, r6, #1
   1d578:	3157      	adds	r1, #87	; 0x57
   1d57a:	7031      	strb	r1, [r6, #0]
			ptr = net_byte_to_hex(ptr, bl, 'a', true);
   1d57c:	2301      	movs	r3, #1
   1d57e:	2261      	movs	r2, #97	; 0x61
   1d580:	4629      	mov	r1, r5
   1d582:	f7ff ff30 	bl	1d3e6 <net_byte_to_hex>
   1d586:	4606      	mov	r6, r0
		needcolon = true;
   1d588:	2501      	movs	r5, #1
	for (i = 0; i < len; i++) {
   1d58a:	3401      	adds	r4, #1
   1d58c:	b2e4      	uxtb	r4, r4
   1d58e:	4623      	mov	r3, r4
   1d590:	45a0      	cmp	r8, r4
   1d592:	dd31      	ble.n	1d5f8 <net_addr_ntop+0x184>
		if (len == 4) {
   1d594:	f1b8 0f04 	cmp.w	r8, #4
   1d598:	d0c1      	beq.n	1d51e <net_addr_ntop+0xaa>
		if (i == pos) {
   1d59a:	454b      	cmp	r3, r9
   1d59c:	d0d5      	beq.n	1d54a <net_addr_ntop+0xd6>
		if (needcolon) {
   1d59e:	b115      	cbz	r5, 1d5a6 <net_addr_ntop+0x132>
			*ptr++ = ':';
   1d5a0:	233a      	movs	r3, #58	; 0x3a
   1d5a2:	7033      	strb	r3, [r6, #0]
   1d5a4:	3601      	adds	r6, #1
		value = (u32_t)sys_be16_to_cpu(UNALIGNED_GET(&w[i]));
   1d5a6:	f837 3014 	ldrh.w	r3, [r7, r4, lsl #1]
   1d5aa:	021d      	lsls	r5, r3, #8
   1d5ac:	ea45 2513 	orr.w	r5, r5, r3, lsr #8
   1d5b0:	b22d      	sxth	r5, r5
		bh = value >> 8;
   1d5b2:	f3c5 2107 	ubfx	r1, r5, #8, #8
		bl = value & 0xff;
   1d5b6:	b2ed      	uxtb	r5, r5
		if (bh) {
   1d5b8:	b139      	cbz	r1, 1d5ca <net_addr_ntop+0x156>
			if (bh > 0x0f) {
   1d5ba:	290f      	cmp	r1, #15
   1d5bc:	d8d5      	bhi.n	1d56a <net_addr_ntop+0xf6>
				if (bh < 10) {
   1d5be:	2909      	cmp	r1, #9
   1d5c0:	d8d9      	bhi.n	1d576 <net_addr_ntop+0x102>
					*ptr++ = (char)(bh + '0');
   1d5c2:	1c70      	adds	r0, r6, #1
   1d5c4:	3130      	adds	r1, #48	; 0x30
   1d5c6:	7031      	strb	r1, [r6, #0]
   1d5c8:	e7d8      	b.n	1d57c <net_addr_ntop+0x108>
		} else if (bl > 0x0f) {
   1d5ca:	2d0f      	cmp	r5, #15
   1d5cc:	d806      	bhi.n	1d5dc <net_addr_ntop+0x168>
			if (bl < 10) {
   1d5ce:	2d09      	cmp	r5, #9
   1d5d0:	d80d      	bhi.n	1d5ee <net_addr_ntop+0x17a>
				*ptr++ = (char)(bl + '0');
   1d5d2:	3530      	adds	r5, #48	; 0x30
   1d5d4:	7035      	strb	r5, [r6, #0]
   1d5d6:	3601      	adds	r6, #1
		needcolon = true;
   1d5d8:	2501      	movs	r5, #1
   1d5da:	e7d6      	b.n	1d58a <net_addr_ntop+0x116>
			ptr = net_byte_to_hex(ptr, bl, 'a', false);
   1d5dc:	2300      	movs	r3, #0
   1d5de:	2261      	movs	r2, #97	; 0x61
   1d5e0:	4629      	mov	r1, r5
   1d5e2:	4630      	mov	r0, r6
   1d5e4:	f7ff feff 	bl	1d3e6 <net_byte_to_hex>
   1d5e8:	4606      	mov	r6, r0
		needcolon = true;
   1d5ea:	2501      	movs	r5, #1
   1d5ec:	e7cd      	b.n	1d58a <net_addr_ntop+0x116>
				*ptr++ = (char) (bl - 10 + 'a');
   1d5ee:	3557      	adds	r5, #87	; 0x57
   1d5f0:	7035      	strb	r5, [r6, #0]
   1d5f2:	3601      	adds	r6, #1
		needcolon = true;
   1d5f4:	2501      	movs	r5, #1
   1d5f6:	e7c8      	b.n	1d58a <net_addr_ntop+0x116>
	if (!(ptr - dst)) {
   1d5f8:	9b02      	ldr	r3, [sp, #8]
   1d5fa:	429e      	cmp	r6, r3
   1d5fc:	d00f      	beq.n	1d61e <net_addr_ntop+0x1aa>
	if (family == AF_INET) {
   1d5fe:	9b03      	ldr	r3, [sp, #12]
   1d600:	2b02      	cmp	r3, #2
   1d602:	d005      	beq.n	1d610 <net_addr_ntop+0x19c>
		*ptr = '\0';
   1d604:	2300      	movs	r3, #0
   1d606:	7033      	strb	r3, [r6, #0]
	return dst;
   1d608:	9802      	ldr	r0, [sp, #8]
}
   1d60a:	b007      	add	sp, #28
   1d60c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*(ptr - 1) = '\0';
   1d610:	2300      	movs	r3, #0
   1d612:	f806 3c01 	strb.w	r3, [r6, #-1]
	return dst;
   1d616:	9802      	ldr	r0, [sp, #8]
   1d618:	e7f7      	b.n	1d60a <net_addr_ntop+0x196>
		return NULL;
   1d61a:	2000      	movs	r0, #0
   1d61c:	e7f5      	b.n	1d60a <net_addr_ntop+0x196>
		return NULL;
   1d61e:	2000      	movs	r0, #0
   1d620:	e7f3      	b.n	1d60a <net_addr_ntop+0x196>

0001d622 <net_addr_pton>:
{
   1d622:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d626:	b082      	sub	sp, #8
   1d628:	460d      	mov	r5, r1
   1d62a:	4616      	mov	r6, r2
	if (family == AF_INET) {
   1d62c:	2802      	cmp	r0, #2
   1d62e:	d010      	beq.n	1d652 <net_addr_pton+0x30>
	} else if (family == AF_INET6) {
   1d630:	280a      	cmp	r0, #10
   1d632:	f040 80c6 	bne.w	1d7c2 <net_addr_pton+0x1a0>
		int expected_groups = strchr(src, '.') ? 6 : 8;
   1d636:	212e      	movs	r1, #46	; 0x2e
   1d638:	4628      	mov	r0, r5
   1d63a:	f00d fadd 	bl	2abf8 <strchr>
   1d63e:	b378      	cbz	r0, 1d6a0 <net_addr_pton+0x7e>
   1d640:	2706      	movs	r7, #6
		if (*src == ':') {
   1d642:	782b      	ldrb	r3, [r5, #0]
   1d644:	2b3a      	cmp	r3, #58	; 0x3a
   1d646:	d02d      	beq.n	1d6a4 <net_addr_pton+0x82>
		len = strlen(src);
   1d648:	4628      	mov	r0, r5
   1d64a:	f7e3 f859 	bl	700 <strlen>
		for (i = 0; i < len; i++) {
   1d64e:	2300      	movs	r3, #0
   1d650:	e02b      	b.n	1d6aa <net_addr_pton+0x88>
		len = strlen(src);
   1d652:	4608      	mov	r0, r1
   1d654:	f7e3 f854 	bl	700 <strlen>
		for (i = 0; i < len; i++) {
   1d658:	2300      	movs	r3, #0
   1d65a:	e000      	b.n	1d65e <net_addr_pton+0x3c>
   1d65c:	3301      	adds	r3, #1
   1d65e:	4283      	cmp	r3, r0
   1d660:	d20a      	bcs.n	1d678 <net_addr_pton+0x56>
			if (!(src[i] >= '0' && src[i] <= '9') &&
   1d662:	5ce9      	ldrb	r1, [r5, r3]
   1d664:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   1d668:	b2d2      	uxtb	r2, r2
   1d66a:	2a09      	cmp	r2, #9
   1d66c:	d9f6      	bls.n	1d65c <net_addr_pton+0x3a>
   1d66e:	292e      	cmp	r1, #46	; 0x2e
   1d670:	d0f4      	beq.n	1d65c <net_addr_pton+0x3a>
				return -EINVAL;
   1d672:	f06f 0015 	mvn.w	r0, #21
   1d676:	e0a9      	b.n	1d7cc <net_addr_pton+0x1aa>
		memset(addr, 0, sizeof(struct in_addr));
   1d678:	2204      	movs	r2, #4
   1d67a:	2100      	movs	r1, #0
   1d67c:	4630      	mov	r0, r6
   1d67e:	f00d fa01 	bl	2aa84 <memset>
		for (i = 0; i < sizeof(struct in_addr); i++) {
   1d682:	2400      	movs	r4, #0
   1d684:	e008      	b.n	1d698 <net_addr_pton+0x76>
			addr->s4_addr[i] = strtol(src, &endptr, 10);
   1d686:	220a      	movs	r2, #10
   1d688:	a901      	add	r1, sp, #4
   1d68a:	4628      	mov	r0, r5
   1d68c:	f00d ff14 	bl	2b4b8 <strtol>
   1d690:	5530      	strb	r0, [r6, r4]
		for (i = 0; i < sizeof(struct in_addr); i++) {
   1d692:	3401      	adds	r4, #1
			src = ++endptr;
   1d694:	9d01      	ldr	r5, [sp, #4]
   1d696:	3501      	adds	r5, #1
		for (i = 0; i < sizeof(struct in_addr); i++) {
   1d698:	2c03      	cmp	r4, #3
   1d69a:	d9f4      	bls.n	1d686 <net_addr_pton+0x64>
	return 0;
   1d69c:	2000      	movs	r0, #0
   1d69e:	e095      	b.n	1d7cc <net_addr_pton+0x1aa>
		int expected_groups = strchr(src, '.') ? 6 : 8;
   1d6a0:	2708      	movs	r7, #8
   1d6a2:	e7ce      	b.n	1d642 <net_addr_pton+0x20>
			src++;
   1d6a4:	3501      	adds	r5, #1
   1d6a6:	e7cf      	b.n	1d648 <net_addr_pton+0x26>
		for (i = 0; i < len; i++) {
   1d6a8:	3301      	adds	r3, #1
   1d6aa:	4283      	cmp	r3, r0
   1d6ac:	da16      	bge.n	1d6dc <net_addr_pton+0xba>
			if (!(src[i] >= '0' && src[i] <= '9') &&
   1d6ae:	5ce9      	ldrb	r1, [r5, r3]
   1d6b0:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   1d6b4:	b2d2      	uxtb	r2, r2
   1d6b6:	2a09      	cmp	r2, #9
   1d6b8:	d9f6      	bls.n	1d6a8 <net_addr_pton+0x86>
			    !(src[i] >= 'A' && src[i] <= 'F') &&
   1d6ba:	f1a1 0241 	sub.w	r2, r1, #65	; 0x41
   1d6be:	b2d2      	uxtb	r2, r2
			if (!(src[i] >= '0' && src[i] <= '9') &&
   1d6c0:	2a05      	cmp	r2, #5
   1d6c2:	d9f1      	bls.n	1d6a8 <net_addr_pton+0x86>
			    !(src[i] >= 'a' && src[i] <= 'f') &&
   1d6c4:	f1a1 0261 	sub.w	r2, r1, #97	; 0x61
   1d6c8:	b2d2      	uxtb	r2, r2
			    !(src[i] >= 'A' && src[i] <= 'F') &&
   1d6ca:	2a05      	cmp	r2, #5
   1d6cc:	d9ec      	bls.n	1d6a8 <net_addr_pton+0x86>
			    !(src[i] >= 'a' && src[i] <= 'f') &&
   1d6ce:	292e      	cmp	r1, #46	; 0x2e
   1d6d0:	d0ea      	beq.n	1d6a8 <net_addr_pton+0x86>
			    src[i] != '.' && src[i] != ':')
   1d6d2:	293a      	cmp	r1, #58	; 0x3a
   1d6d4:	d0e8      	beq.n	1d6a8 <net_addr_pton+0x86>
				return -EINVAL;
   1d6d6:	f06f 0015 	mvn.w	r0, #21
   1d6da:	e077      	b.n	1d7cc <net_addr_pton+0x1aa>
   1d6dc:	2400      	movs	r4, #0
   1d6de:	e001      	b.n	1d6e4 <net_addr_pton+0xc2>
				src++;
   1d6e0:	3501      	adds	r5, #1
		for (i = 0; i < expected_groups; i++) {
   1d6e2:	3401      	adds	r4, #1
   1d6e4:	42bc      	cmp	r4, r7
   1d6e6:	da3c      	bge.n	1d762 <net_addr_pton+0x140>
			if (!src || *src == '\0') {
   1d6e8:	2d00      	cmp	r5, #0
   1d6ea:	d06d      	beq.n	1d7c8 <net_addr_pton+0x1a6>
   1d6ec:	782b      	ldrb	r3, [r5, #0]
   1d6ee:	2b00      	cmp	r3, #0
   1d6f0:	d06f      	beq.n	1d7d2 <net_addr_pton+0x1b0>
			if (*src != ':') {
   1d6f2:	2b3a      	cmp	r3, #58	; 0x3a
   1d6f4:	d023      	beq.n	1d73e <net_addr_pton+0x11c>
				UNALIGNED_PUT(htons(strtol(src, NULL, 16)),
   1d6f6:	2210      	movs	r2, #16
   1d6f8:	2100      	movs	r1, #0
   1d6fa:	4628      	mov	r0, r5
   1d6fc:	f00d fedc 	bl	2b4b8 <strtol>
   1d700:	f3c0 2807 	ubfx	r8, r0, #8, #8
   1d704:	2210      	movs	r2, #16
   1d706:	2100      	movs	r1, #0
   1d708:	4628      	mov	r0, r5
   1d70a:	f00d fed5 	bl	2b4b8 <strtol>
   1d70e:	ea48 2000 	orr.w	r0, r8, r0, lsl #8
   1d712:	f826 0014 	strh.w	r0, [r6, r4, lsl #1]
				src = strchr(src, ':');
   1d716:	213a      	movs	r1, #58	; 0x3a
   1d718:	4628      	mov	r0, r5
   1d71a:	f00d fa6d 	bl	2abf8 <strchr>
				if (!src && i < expected_groups - 1) {
   1d71e:	4605      	mov	r5, r0
   1d720:	2800      	cmp	r0, #0
   1d722:	d1dd      	bne.n	1d6e0 <net_addr_pton+0xbe>
   1d724:	1e7b      	subs	r3, r7, #1
   1d726:	429c      	cmp	r4, r3
   1d728:	dada      	bge.n	1d6e0 <net_addr_pton+0xbe>
					return -EINVAL;
   1d72a:	f06f 0015 	mvn.w	r0, #21
   1d72e:	e04d      	b.n	1d7cc <net_addr_pton+0x1aa>
				UNALIGNED_PUT(0, &addr->s6_addr16[i]);
   1d730:	eb06 0244 	add.w	r2, r6, r4, lsl #1
   1d734:	2300      	movs	r3, #0
   1d736:	f806 3014 	strb.w	r3, [r6, r4, lsl #1]
   1d73a:	7053      	strb	r3, [r2, #1]
			for (; i < expected_groups; i++) {
   1d73c:	3401      	adds	r4, #1
   1d73e:	42bc      	cmp	r4, r7
   1d740:	dbf6      	blt.n	1d730 <net_addr_pton+0x10e>
			tmp = strrchr(src, ':');
   1d742:	213a      	movs	r1, #58	; 0x3a
   1d744:	4628      	mov	r0, r5
   1d746:	f00d fbad 	bl	2aea4 <strrchr>
			if (src == tmp && (expected_groups == 6 || !src[1])) {
   1d74a:	4285      	cmp	r5, r0
   1d74c:	d003      	beq.n	1d756 <net_addr_pton+0x134>
			if (expected_groups == 6) {
   1d74e:	2f06      	cmp	r7, #6
   1d750:	d00b      	beq.n	1d76a <net_addr_pton+0x148>
			i = expected_groups - 1;
   1d752:	1e7c      	subs	r4, r7, #1
   1d754:	e00f      	b.n	1d776 <net_addr_pton+0x154>
			if (src == tmp && (expected_groups == 6 || !src[1])) {
   1d756:	2f06      	cmp	r7, #6
   1d758:	d002      	beq.n	1d760 <net_addr_pton+0x13e>
   1d75a:	786b      	ldrb	r3, [r5, #1]
   1d75c:	2b00      	cmp	r3, #0
   1d75e:	d1f6      	bne.n	1d74e <net_addr_pton+0x12c>
				src++;
   1d760:	3501      	adds	r5, #1
		if (expected_groups == 6) {
   1d762:	2f06      	cmp	r7, #6
   1d764:	d029      	beq.n	1d7ba <net_addr_pton+0x198>
	return 0;
   1d766:	2000      	movs	r0, #0
   1d768:	e030      	b.n	1d7cc <net_addr_pton+0x1aa>
				tmp--;
   1d76a:	3801      	subs	r0, #1
   1d76c:	e7f1      	b.n	1d752 <net_addr_pton+0x130>
			} while (tmp-- != src);
   1d76e:	1e43      	subs	r3, r0, #1
   1d770:	4285      	cmp	r5, r0
   1d772:	d005      	beq.n	1d780 <net_addr_pton+0x15e>
   1d774:	4618      	mov	r0, r3
				if (*tmp == ':') {
   1d776:	7803      	ldrb	r3, [r0, #0]
   1d778:	2b3a      	cmp	r3, #58	; 0x3a
   1d77a:	d1f8      	bne.n	1d76e <net_addr_pton+0x14c>
					i--;
   1d77c:	3c01      	subs	r4, #1
   1d77e:	e7f6      	b.n	1d76e <net_addr_pton+0x14c>
			src++;
   1d780:	3501      	adds	r5, #1
   1d782:	e7ae      	b.n	1d6e2 <net_addr_pton+0xc0>
				src++;
   1d784:	3501      	adds	r5, #1
			for (i = 0; i < 4; i++) {
   1d786:	3401      	adds	r4, #1
   1d788:	2c03      	cmp	r4, #3
   1d78a:	dc18      	bgt.n	1d7be <net_addr_pton+0x19c>
				if (!src || !*src) {
   1d78c:	b325      	cbz	r5, 1d7d8 <net_addr_pton+0x1b6>
   1d78e:	782b      	ldrb	r3, [r5, #0]
   1d790:	b32b      	cbz	r3, 1d7de <net_addr_pton+0x1bc>
				addr->s6_addr[12 + i] = strtol(src, NULL, 10);
   1d792:	f104 070c 	add.w	r7, r4, #12
   1d796:	220a      	movs	r2, #10
   1d798:	2100      	movs	r1, #0
   1d79a:	4628      	mov	r0, r5
   1d79c:	f00d fe8c 	bl	2b4b8 <strtol>
   1d7a0:	55f0      	strb	r0, [r6, r7]
				src = strchr(src, '.');
   1d7a2:	212e      	movs	r1, #46	; 0x2e
   1d7a4:	4628      	mov	r0, r5
   1d7a6:	f00d fa27 	bl	2abf8 <strchr>
				if (!src && i < 3) {
   1d7aa:	4605      	mov	r5, r0
   1d7ac:	2800      	cmp	r0, #0
   1d7ae:	d1e9      	bne.n	1d784 <net_addr_pton+0x162>
   1d7b0:	2c02      	cmp	r4, #2
   1d7b2:	dce7      	bgt.n	1d784 <net_addr_pton+0x162>
					return -EINVAL;
   1d7b4:	f06f 0015 	mvn.w	r0, #21
   1d7b8:	e008      	b.n	1d7cc <net_addr_pton+0x1aa>
   1d7ba:	2400      	movs	r4, #0
   1d7bc:	e7e4      	b.n	1d788 <net_addr_pton+0x166>
	return 0;
   1d7be:	2000      	movs	r0, #0
   1d7c0:	e004      	b.n	1d7cc <net_addr_pton+0x1aa>
		return -EINVAL;
   1d7c2:	f06f 0015 	mvn.w	r0, #21
   1d7c6:	e001      	b.n	1d7cc <net_addr_pton+0x1aa>
				return -EINVAL;
   1d7c8:	f06f 0015 	mvn.w	r0, #21
}
   1d7cc:	b002      	add	sp, #8
   1d7ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				return -EINVAL;
   1d7d2:	f06f 0015 	mvn.w	r0, #21
   1d7d6:	e7f9      	b.n	1d7cc <net_addr_pton+0x1aa>
					return -EINVAL;
   1d7d8:	f06f 0015 	mvn.w	r0, #21
   1d7dc:	e7f6      	b.n	1d7cc <net_addr_pton+0x1aa>
   1d7de:	f06f 0015 	mvn.w	r0, #21
   1d7e2:	e7f3      	b.n	1d7cc <net_addr_pton+0x1aa>

0001d7e4 <parse_ipv6>:
#endif /* CONFIG_NET_IPV6 || CONFIG_NET_IPV4 */

#if defined(CONFIG_NET_IPV6)
static bool parse_ipv6(const char *str, size_t str_len,
		       struct sockaddr *addr, bool has_port)
{
   1d7e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1d7e8:	b08f      	sub	sp, #60	; 0x3c
   1d7ea:	4605      	mov	r5, r0
   1d7ec:	4688      	mov	r8, r1
   1d7ee:	4617      	mov	r7, r2
   1d7f0:	461e      	mov	r6, r3
	struct in6_addr *addr6;
	char ipaddr[INET6_ADDRSTRLEN + 1];
	int end, len, ret, i;
	u16_t port;

	len = min(INET6_ADDRSTRLEN, str_len);
   1d7f2:	460c      	mov	r4, r1
   1d7f4:	292e      	cmp	r1, #46	; 0x2e
   1d7f6:	bf28      	it	cs
   1d7f8:	242e      	movcs	r4, #46	; 0x2e

	for (i = 0; i < len; i++) {
   1d7fa:	2300      	movs	r3, #0
   1d7fc:	42a3      	cmp	r3, r4
   1d7fe:	da04      	bge.n	1d80a <parse_ipv6+0x26>
		if (!str[i]) {
   1d800:	5cea      	ldrb	r2, [r5, r3]
   1d802:	b10a      	cbz	r2, 1d808 <parse_ipv6+0x24>
	for (i = 0; i < len; i++) {
   1d804:	3301      	adds	r3, #1
   1d806:	e7f9      	b.n	1d7fc <parse_ipv6+0x18>
			len = i;
   1d808:	461c      	mov	r4, r3
			break;
		}
	}

	if (has_port) {
   1d80a:	b18e      	cbz	r6, 1d830 <parse_ipv6+0x4c>
		/* IPv6 address with port number */
		ptr = memchr(str, ']', len);
   1d80c:	4622      	mov	r2, r4
   1d80e:	215d      	movs	r1, #93	; 0x5d
   1d810:	4628      	mov	r0, r5
   1d812:	f7e2 fd05 	bl	220 <memchr>
		if (!ptr) {
   1d816:	4681      	mov	r9, r0
   1d818:	2800      	cmp	r0, #0
   1d81a:	d043      	beq.n	1d8a4 <parse_ipv6+0xc0>
			return false;
		}

		end = min(len, ptr - (str + 1));
   1d81c:	1c69      	adds	r1, r5, #1
   1d81e:	1a43      	subs	r3, r0, r1
   1d820:	429c      	cmp	r4, r3
   1d822:	bfa8      	it	ge
   1d824:	461c      	movge	r4, r3
		memcpy(ipaddr, str + 1, end);
   1d826:	4622      	mov	r2, r4
   1d828:	a802      	add	r0, sp, #8
   1d82a:	f7e2 fd49 	bl	2c0 <memcpy>
   1d82e:	e006      	b.n	1d83e <parse_ipv6+0x5a>
	} else {
		end = len;
		memcpy(ipaddr, str, end);
   1d830:	4622      	mov	r2, r4
   1d832:	4629      	mov	r1, r5
   1d834:	a802      	add	r0, sp, #8
   1d836:	f7e2 fd43 	bl	2c0 <memcpy>
	char *ptr = NULL;
   1d83a:	f04f 0900 	mov.w	r9, #0
	}

	ipaddr[end] = '\0';
   1d83e:	2200      	movs	r2, #0
   1d840:	ab0e      	add	r3, sp, #56	; 0x38
   1d842:	4423      	add	r3, r4
   1d844:	f803 2c30 	strb.w	r2, [r3, #-48]

	addr6 = &net_sin6(addr)->sin6_addr;

	ret = net_addr_pton(AF_INET6, ipaddr, addr6);
   1d848:	1d3a      	adds	r2, r7, #4
   1d84a:	a902      	add	r1, sp, #8
   1d84c:	200a      	movs	r0, #10
   1d84e:	f7ff fee8 	bl	1d622 <net_addr_pton>
	if (ret < 0) {
   1d852:	2800      	cmp	r0, #0
   1d854:	db28      	blt.n	1d8a8 <parse_ipv6+0xc4>
		return false;
	}

	net_sin6(addr)->sin6_family = AF_INET6;
   1d856:	230a      	movs	r3, #10
   1d858:	803b      	strh	r3, [r7, #0]

	if (!has_port) {
   1d85a:	b33e      	cbz	r6, 1d8ac <parse_ipv6+0xc8>
		return true;
	}

	if ((ptr + 1) < (str + str_len) && *(ptr + 1) == ':') {
   1d85c:	f109 0301 	add.w	r3, r9, #1
   1d860:	4445      	add	r5, r8
   1d862:	42ab      	cmp	r3, r5
   1d864:	d223      	bcs.n	1d8ae <parse_ipv6+0xca>
   1d866:	f899 3001 	ldrb.w	r3, [r9, #1]
   1d86a:	2b3a      	cmp	r3, #58	; 0x3a
   1d86c:	d11f      	bne.n	1d8ae <parse_ipv6+0xca>
		len = str_len - end;
   1d86e:	eba8 0404 	sub.w	r4, r8, r4

		/* Re-use the ipaddr buf for port conversion */
		memcpy(ipaddr, ptr + 2, len);
   1d872:	4622      	mov	r2, r4
   1d874:	f109 0102 	add.w	r1, r9, #2
   1d878:	a802      	add	r0, sp, #8
   1d87a:	f7e2 fd21 	bl	2c0 <memcpy>
		ipaddr[len] = '\0';
   1d87e:	ab0e      	add	r3, sp, #56	; 0x38
   1d880:	441c      	add	r4, r3
   1d882:	2300      	movs	r3, #0
   1d884:	f804 3c30 	strb.w	r3, [r4, #-48]

		ret = convert_port(ipaddr, &port);
   1d888:	f10d 0106 	add.w	r1, sp, #6
   1d88c:	a802      	add	r0, sp, #8
   1d88e:	f7ff fd8a 	bl	1d3a6 <convert_port>
		if (!ret) {
   1d892:	4606      	mov	r6, r0
   1d894:	b158      	cbz	r0, 1d8ae <parse_ipv6+0xca>
			return false;
		}

		net_sin6(addr)->sin6_port = htons(port);
   1d896:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   1d89a:	0a13      	lsrs	r3, r2, #8
   1d89c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1d8a0:	807b      	strh	r3, [r7, #2]
   1d8a2:	e004      	b.n	1d8ae <parse_ipv6+0xca>
			return false;
   1d8a4:	2600      	movs	r6, #0
   1d8a6:	e002      	b.n	1d8ae <parse_ipv6+0xca>
		return false;
   1d8a8:	2600      	movs	r6, #0
   1d8aa:	e000      	b.n	1d8ae <parse_ipv6+0xca>
		return true;
   1d8ac:	2601      	movs	r6, #1
			net_addr_ntop(AF_INET6, addr6,
				      ipaddr, sizeof(ipaddr) - 1));
	}

	return true;
}
   1d8ae:	4630      	mov	r0, r6
   1d8b0:	b00f      	add	sp, #60	; 0x3c
   1d8b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0001d8b6 <net_calc_chksum>:
	return pkt->family;
   1d8b6:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   1d8ba:	f3c3 03c3 	ubfx	r3, r3, #3, #4
	switch (net_pkt_family(pkt)) {
   1d8be:	2b0a      	cmp	r3, #10
   1d8c0:	d001      	beq.n	1d8c6 <net_calc_chksum+0x10>
		return 0;
   1d8c2:	2000      	movs	r0, #0
   1d8c4:	4770      	bx	lr
{
   1d8c6:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d8c8:	b085      	sub	sp, #20
   1d8ca:	4604      	mov	r4, r0
	return pkt->frags->data;
   1d8cc:	6885      	ldr	r5, [r0, #8]
   1d8ce:	68a8      	ldr	r0, [r5, #8]
		upper_layer_len = (NET_IPV6_HDR(pkt)->len[0] << 8) +
   1d8d0:	7902      	ldrb	r2, [r0, #4]
			NET_IPV6_HDR(pkt)->len[1] - net_pkt_ipv6_ext_len(pkt);
   1d8d2:	7943      	ldrb	r3, [r0, #5]
		upper_layer_len = (NET_IPV6_HDR(pkt)->len[0] << 8) +
   1d8d4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   1d8d8:	b29b      	uxth	r3, r3
			NET_IPV6_HDR(pkt)->len[1] - net_pkt_ipv6_ext_len(pkt);
   1d8da:	f894 703b 	ldrb.w	r7, [r4, #59]	; 0x3b
		upper_layer_len = (NET_IPV6_HDR(pkt)->len[0] << 8) +
   1d8de:	1bdb      	subs	r3, r3, r7
		sum = calc_chksum(upper_layer_len + proto,
   1d8e0:	fa11 f383 	uxtah	r3, r1, r3
   1d8e4:	2220      	movs	r2, #32
   1d8e6:	f100 0108 	add.w	r1, r0, #8
   1d8ea:	b298      	uxth	r0, r3
   1d8ec:	f7ff fd3c 	bl	1d368 <calc_chksum>
   1d8f0:	4606      	mov	r6, r0
	u16_t proto_len = net_pkt_ip_hdr_len(pkt) +
   1d8f2:	f894 1033 	ldrb.w	r1, [r4, #51]	; 0x33
	return net_frag_read(frag, offset, pos, len, NULL);
   1d8f6:	2300      	movs	r3, #0
   1d8f8:	9300      	str	r3, [sp, #0]
   1d8fa:	f10d 020e 	add.w	r2, sp, #14
   1d8fe:	4439      	add	r1, r7
   1d900:	4628      	mov	r0, r5
   1d902:	f7ff faec 	bl	1cede <net_frag_read>
	if (!frag) {
   1d906:	4605      	mov	r5, r0
   1d908:	b318      	cbz	r0, 1d952 <net_calc_chksum+0x9c>
	ptr = frag->data + offset;
   1d90a:	6881      	ldr	r1, [r0, #8]
   1d90c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   1d910:	4419      	add	r1, r3
	len = frag->len - offset;
   1d912:	8984      	ldrh	r4, [r0, #12]
   1d914:	1ae4      	subs	r4, r4, r3
   1d916:	b224      	sxth	r4, r4
   1d918:	e003      	b.n	1d922 <net_calc_chksum+0x6c>
			len = frag->len - 1;
   1d91a:	89ac      	ldrh	r4, [r5, #12]
   1d91c:	3c01      	subs	r4, #1
   1d91e:	b224      	sxth	r4, r4
			ptr++;
   1d920:	3101      	adds	r1, #1
	while (frag) {
   1d922:	b1bd      	cbz	r5, 1d954 <net_calc_chksum+0x9e>
		sum = calc_chksum(sum, ptr, len);
   1d924:	b2a4      	uxth	r4, r4
   1d926:	4622      	mov	r2, r4
   1d928:	4630      	mov	r0, r6
   1d92a:	f7ff fd1d 	bl	1d368 <calc_chksum>
   1d92e:	4606      	mov	r6, r0
		frag = frag->frags;
   1d930:	682d      	ldr	r5, [r5, #0]
		if (!frag) {
   1d932:	b17d      	cbz	r5, 1d954 <net_calc_chksum+0x9e>
		ptr = frag->data;
   1d934:	68a9      	ldr	r1, [r5, #8]
		if (len % 2) {
   1d936:	f014 0f01 	tst.w	r4, #1
   1d93a:	d007      	beq.n	1d94c <net_calc_chksum+0x96>
			u16_t tmp = *ptr;
   1d93c:	780b      	ldrb	r3, [r1, #0]
			sum += tmp;
   1d93e:	441e      	add	r6, r3
   1d940:	b2b6      	uxth	r6, r6
			if (sum < tmp) {
   1d942:	42b3      	cmp	r3, r6
   1d944:	d9e9      	bls.n	1d91a <net_calc_chksum+0x64>
				sum++;
   1d946:	3601      	adds	r6, #1
   1d948:	b2b6      	uxth	r6, r6
   1d94a:	e7e6      	b.n	1d91a <net_calc_chksum+0x64>
			len = frag->len;
   1d94c:	f9b5 400c 	ldrsh.w	r4, [r5, #12]
   1d950:	e7e7      	b.n	1d922 <net_calc_chksum+0x6c>
		return 0;
   1d952:	2600      	movs	r6, #0
	sum = (sum == 0) ? 0xffff : htons(sum);
   1d954:	b91e      	cbnz	r6, 1d95e <net_calc_chksum+0xa8>
   1d956:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
   1d95a:	b005      	add	sp, #20
   1d95c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sum = (sum == 0) ? 0xffff : htons(sum);
   1d95e:	0a30      	lsrs	r0, r6, #8
   1d960:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
   1d964:	b280      	uxth	r0, r0
   1d966:	e7f8      	b.n	1d95a <net_calc_chksum+0xa4>

0001d968 <net_header_fits>:
	if (hdr && hdr > pkt->frags->data &&
   1d968:	460b      	mov	r3, r1
   1d96a:	b151      	cbz	r1, 1d982 <net_header_fits+0x1a>
   1d96c:	6880      	ldr	r0, [r0, #8]
   1d96e:	6881      	ldr	r1, [r0, #8]
   1d970:	428b      	cmp	r3, r1
   1d972:	d908      	bls.n	1d986 <net_header_fits+0x1e>
	    (hdr + hdr_size) <= (pkt->frags->data + pkt->frags->len)) {
   1d974:	4413      	add	r3, r2
   1d976:	8982      	ldrh	r2, [r0, #12]
   1d978:	4411      	add	r1, r2
	if (hdr && hdr > pkt->frags->data &&
   1d97a:	428b      	cmp	r3, r1
   1d97c:	d905      	bls.n	1d98a <net_header_fits+0x22>
	return false;
   1d97e:	2000      	movs	r0, #0
   1d980:	4770      	bx	lr
   1d982:	2000      	movs	r0, #0
   1d984:	4770      	bx	lr
   1d986:	2000      	movs	r0, #0
   1d988:	4770      	bx	lr
		return true;
   1d98a:	2001      	movs	r0, #1
}
   1d98c:	4770      	bx	lr

0001d98e <net_ipaddr_parse>:

bool net_ipaddr_parse(const char *str, size_t str_len, struct sockaddr *addr)
{
	int i, count;

	if (!str || str_len == 0) {
   1d98e:	b1d8      	cbz	r0, 1d9c8 <net_ipaddr_parse+0x3a>
{
   1d990:	b538      	push	{r3, r4, r5, lr}
	if (!str || str_len == 0) {
   1d992:	b1d9      	cbz	r1, 1d9cc <net_ipaddr_parse+0x3e>
		return false;
	}

	/* We cannot accept empty string here */
	if (*str == '\0') {
   1d994:	7804      	ldrb	r4, [r0, #0]
   1d996:	b1dc      	cbz	r4, 1d9d0 <net_ipaddr_parse+0x42>
		return false;
	}

	if (*str == '[') {
   1d998:	2c5b      	cmp	r4, #91	; 0x5b
   1d99a:	d002      	beq.n	1d9a2 <net_ipaddr_parse+0x14>
   1d99c:	2500      	movs	r5, #0
   1d99e:	462b      	mov	r3, r5
   1d9a0:	e004      	b.n	1d9ac <net_ipaddr_parse+0x1e>
#if defined(CONFIG_NET_IPV6)
		return parse_ipv6(str, str_len, addr, true);
   1d9a2:	2301      	movs	r3, #1
   1d9a4:	f7ff ff1e 	bl	1d7e4 <parse_ipv6>
   1d9a8:	bd38      	pop	{r3, r4, r5, pc}
#else
		return false;
#endif /* CONFIG_NET_IPV6 */
	}

	for (count = i = 0; str[i] && i < str_len; i++) {
   1d9aa:	3301      	adds	r3, #1
   1d9ac:	5cc4      	ldrb	r4, [r0, r3]
   1d9ae:	b12c      	cbz	r4, 1d9bc <net_ipaddr_parse+0x2e>
   1d9b0:	4299      	cmp	r1, r3
   1d9b2:	d903      	bls.n	1d9bc <net_ipaddr_parse+0x2e>
		if (str[i] == ':') {
   1d9b4:	2c3a      	cmp	r4, #58	; 0x3a
   1d9b6:	d1f8      	bne.n	1d9aa <net_ipaddr_parse+0x1c>
			count++;
   1d9b8:	3501      	adds	r5, #1
   1d9ba:	e7f6      	b.n	1d9aa <net_ipaddr_parse+0x1c>
		}
	}

	if (count == 1) {
   1d9bc:	2d01      	cmp	r5, #1
   1d9be:	d009      	beq.n	1d9d4 <net_ipaddr_parse+0x46>
#if defined(CONFIG_NET_IPV4) && !defined(CONFIG_NET_IPV6)
	return parse_ipv4(str, str_len, addr, false);
#endif

#if defined(CONFIG_NET_IPV6) && !defined(CONFIG_NET_IPV4)
	return parse_ipv6(str, str_len, addr, false);
   1d9c0:	2300      	movs	r3, #0
   1d9c2:	f7ff ff0f 	bl	1d7e4 <parse_ipv6>
   1d9c6:	bd38      	pop	{r3, r4, r5, pc}
		return false;
   1d9c8:	2000      	movs	r0, #0
   1d9ca:	4770      	bx	lr
   1d9cc:	2000      	movs	r0, #0
   1d9ce:	bd38      	pop	{r3, r4, r5, pc}
		return false;
   1d9d0:	2000      	movs	r0, #0
   1d9d2:	bd38      	pop	{r3, r4, r5, pc}
		return false;
   1d9d4:	2000      	movs	r0, #0
#endif
}
   1d9d6:	bd38      	pop	{r3, r4, r5, pc}

0001d9d8 <net_bt_reserve>:
{
	ARG_UNUSED(iface);
	ARG_UNUSED(unused);

	return 0;
}
   1d9d8:	2000      	movs	r0, #0
   1d9da:	4770      	bx	lr

0001d9dc <net_bt_enable>:
	return iface->dev;
   1d9dc:	6803      	ldr	r3, [r0, #0]

static int net_bt_enable(struct net_if *iface, bool state)
{
	struct bt_context *ctxt = net_if_get_device(iface)->driver_data;
   1d9de:	689b      	ldr	r3, [r3, #8]

	NET_DBG("iface %p %s", iface, state ? "up" : "down");

	if (state && ctxt->ipsp_chan.chan.state != BT_L2CAP_CONNECTED) {
   1d9e0:	b129      	cbz	r1, 1d9ee <net_bt_enable+0x12>
   1d9e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
   1d9e6:	2b03      	cmp	r3, #3
   1d9e8:	d103      	bne.n	1d9f2 <net_bt_enable+0x16>
		return -ENETDOWN;
	}

	return 0;
   1d9ea:	2000      	movs	r0, #0
   1d9ec:	4770      	bx	lr
   1d9ee:	2000      	movs	r0, #0
   1d9f0:	4770      	bx	lr
		return -ENETDOWN;
   1d9f2:	f06f 0072 	mvn.w	r0, #114	; 0x72
}
   1d9f6:	4770      	bx	lr

0001d9f8 <ipsp_accept>:

static int ipsp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
	NET_DBG("Incoming conn %p", conn);

	if (bt_context_data.ipsp_chan.chan.conn) {
   1d9f8:	4b04      	ldr	r3, [pc, #16]	; (1da0c <ipsp_accept+0x14>)
   1d9fa:	685b      	ldr	r3, [r3, #4]
   1d9fc:	b91b      	cbnz	r3, 1da06 <ipsp_accept+0xe>
		NET_ERR("No channels available");
		return -ENOMEM;
	}

	*chan = &bt_context_data.ipsp_chan.chan;
   1d9fe:	4b04      	ldr	r3, [pc, #16]	; (1da10 <ipsp_accept+0x18>)
   1da00:	600b      	str	r3, [r1, #0]

	return 0;
   1da02:	2000      	movs	r0, #0
   1da04:	4770      	bx	lr
		return -ENOMEM;
   1da06:	f06f 000b 	mvn.w	r0, #11
}
   1da0a:	4770      	bx	lr
   1da0c:	2000bcc8 	.word	0x2000bcc8
   1da10:	2000bccc 	.word	0x2000bccc

0001da14 <net_bt_send>:
{
   1da14:	b538      	push	{r3, r4, r5, lr}
   1da16:	6803      	ldr	r3, [r0, #0]
	struct bt_context *ctxt = net_if_get_device(iface)->driver_data;
   1da18:	689d      	ldr	r5, [r3, #8]
	return pkt->family;
   1da1a:	f891 3038 	ldrb.w	r3, [r1, #56]	; 0x38
   1da1e:	f3c3 03c3 	ubfx	r3, r3, #3, #4
	if (net_pkt_family(pkt) != AF_INET6) {
   1da22:	2b0a      	cmp	r3, #10
   1da24:	d001      	beq.n	1da2a <net_bt_send+0x16>
		return NET_DROP;
   1da26:	2002      	movs	r0, #2
   1da28:	bd38      	pop	{r3, r4, r5, pc}
   1da2a:	460c      	mov	r4, r1
	if (!net_6lo_compress(pkt, true, NULL)) {
   1da2c:	2200      	movs	r2, #0
   1da2e:	2101      	movs	r1, #1
   1da30:	4620      	mov	r0, r4
   1da32:	f003 fe95 	bl	21760 <net_6lo_compress>
   1da36:	b908      	cbnz	r0, 1da3c <net_bt_send+0x28>
		return NET_DROP;
   1da38:	2002      	movs	r0, #2
}
   1da3a:	bd38      	pop	{r3, r4, r5, pc}
	net_if_queue_tx(ctxt->iface, pkt);
   1da3c:	6828      	ldr	r0, [r5, #0]
	k_fifo_put(&iface->tx_queue, pkt);
   1da3e:	4621      	mov	r1, r4
   1da40:	3018      	adds	r0, #24
   1da42:	f00a fb13 	bl	2806c <k_queue_append>
	return NET_OK;
   1da46:	2000      	movs	r0, #0
   1da48:	bd38      	pop	{r3, r4, r5, pc}

0001da4a <net_bt_recv>:
{
   1da4a:	b508      	push	{r3, lr}
	if (!net_6lo_uncompress(pkt)) {
   1da4c:	4608      	mov	r0, r1
   1da4e:	f004 fad4 	bl	21ffa <net_6lo_uncompress>
   1da52:	b908      	cbnz	r0, 1da58 <net_bt_recv+0xe>
		return NET_DROP;
   1da54:	2002      	movs	r0, #2
   1da56:	bd08      	pop	{r3, pc}
	return NET_CONTINUE;
   1da58:	2001      	movs	r0, #1
}
   1da5a:	bd08      	pop	{r3, pc}

0001da5c <connected>:
	return bt_l2cap_chan_disconnect(&ctxt->ipsp_chan.chan);
}

static void connected(struct bt_conn *conn, u8_t err)
{
	if (err) {
   1da5c:	b951      	cbnz	r1, 1da74 <connected+0x18>
{
   1da5e:	b508      	push	{r3, lr}
		NET_ERR("Failed to connect to %s (%u)\n", addr, err);
#endif
		return;
	}

	if (conn != default_conn) {
   1da60:	4b05      	ldr	r3, [pc, #20]	; (1da78 <connected+0x1c>)
   1da62:	681b      	ldr	r3, [r3, #0]
   1da64:	4283      	cmp	r3, r0
   1da66:	d000      	beq.n	1da6a <connected+0xe>
   1da68:	bd08      	pop	{r3, pc}
		return;
	}

	bt_l2cap_chan_connect(conn, &bt_context_data.ipsp_chan.chan,
   1da6a:	2223      	movs	r2, #35	; 0x23
   1da6c:	4903      	ldr	r1, [pc, #12]	; (1da7c <connected+0x20>)
   1da6e:	f7ea f907 	bl	7c80 <bt_l2cap_chan_connect>
   1da72:	e7f9      	b.n	1da68 <connected+0xc>
   1da74:	4770      	bx	lr
   1da76:	bf00      	nop
   1da78:	20001e10 	.word	0x20001e10
   1da7c:	2000bccc 	.word	0x2000bccc

0001da80 <ipsp_recv>:
{
   1da80:	b570      	push	{r4, r5, r6, lr}
   1da82:	4605      	mov	r5, r0
   1da84:	460e      	mov	r6, r1
	pkt = net_pkt_get_reserve_rx(0, K_FOREVER);
   1da86:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1da8a:	2000      	movs	r0, #0
   1da8c:	f7ff f82e 	bl	1caec <net_pkt_get_reserve_rx>
   1da90:	4604      	mov	r4, r0
	net_pkt_ll_dst(pkt)->addr = ctxt->src.val;
   1da92:	f105 039c 	add.w	r3, r5, #156	; 0x9c
   1da96:	6283      	str	r3, [r0, #40]	; 0x28
	net_pkt_ll_dst(pkt)->len = sizeof(ctxt->src);
   1da98:	2206      	movs	r2, #6
   1da9a:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
	net_pkt_ll_dst(pkt)->type = NET_LINK_BLUETOOTH;
   1da9e:	2302      	movs	r3, #2
   1daa0:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
	net_pkt_ll_src(pkt)->addr = ctxt->dst.val;
   1daa4:	f105 01a2 	add.w	r1, r5, #162	; 0xa2
   1daa8:	6201      	str	r1, [r0, #32]
	net_pkt_ll_src(pkt)->len = sizeof(ctxt->dst);
   1daaa:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
	net_pkt_ll_src(pkt)->type = NET_LINK_BLUETOOTH;
   1daae:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
	net_pkt_frag_add(pkt, net_buf_ref(buf));
   1dab2:	4630      	mov	r0, r6
   1dab4:	f7fc fb42 	bl	1a13c <net_buf_ref>
   1dab8:	4601      	mov	r1, r0
   1daba:	4620      	mov	r0, r4
   1dabc:	f7ff f8bb 	bl	1cc36 <net_pkt_frag_add>
	if (net_recv_data(ctxt->iface, pkt) < 0) {
   1dac0:	4621      	mov	r1, r4
   1dac2:	f855 0c04 	ldr.w	r0, [r5, #-4]
   1dac6:	f7fc fd55 	bl	1a574 <net_recv_data>
   1daca:	2800      	cmp	r0, #0
   1dacc:	db00      	blt.n	1dad0 <ipsp_recv+0x50>
   1dace:	bd70      	pop	{r4, r5, r6, pc}
		net_pkt_unref(pkt);
   1dad0:	4620      	mov	r0, r4
   1dad2:	f7ff f886 	bl	1cbe2 <net_pkt_unref>
}
   1dad6:	e7fa      	b.n	1dace <ipsp_recv+0x4e>

0001dad8 <ipsp_alloc_buf>:
{
   1dad8:	b508      	push	{r3, lr}
	return net_pkt_get_reserve_rx_data(0, K_FOREVER);
   1dada:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1dade:	2000      	movs	r0, #0
   1dae0:	f7ff f818 	bl	1cb14 <net_pkt_get_reserve_rx_data>
}
   1dae4:	bd08      	pop	{r3, pc}
	...

0001dae8 <ipsp_disconnected>:
{
   1dae8:	b510      	push	{r4, lr}
   1daea:	4604      	mov	r4, r0
	net_if_down(ctxt->iface);
   1daec:	f850 0c04 	ldr.w	r0, [r0, #-4]
   1daf0:	f7fd fe92 	bl	1b818 <net_if_down>
	if (chan->conn != default_conn) {
   1daf4:	6823      	ldr	r3, [r4, #0]
   1daf6:	4a05      	ldr	r2, [pc, #20]	; (1db0c <ipsp_disconnected+0x24>)
   1daf8:	6810      	ldr	r0, [r2, #0]
   1dafa:	4283      	cmp	r3, r0
   1dafc:	d000      	beq.n	1db00 <ipsp_disconnected+0x18>
   1dafe:	bd10      	pop	{r4, pc}
	bt_conn_unref(default_conn);
   1db00:	f7e8 fe2a 	bl	6758 <bt_conn_unref>
	default_conn = NULL;
   1db04:	2200      	movs	r2, #0
   1db06:	4b01      	ldr	r3, [pc, #4]	; (1db0c <ipsp_disconnected+0x24>)
   1db08:	601a      	str	r2, [r3, #0]
   1db0a:	e7f8      	b.n	1dafe <ipsp_disconnected+0x16>
   1db0c:	20001e10 	.word	0x20001e10

0001db10 <disconnected>:
			      L2CAP_IPSP_PSM);
}

static void disconnected(struct bt_conn *conn, u8_t reason)
{
   1db10:	b508      	push	{r3, lr}
#if defined(CONFIG_NET_DEBUG_L2_BT)
	char addr[BT_ADDR_LE_STR_LEN];
#endif

	if (conn != default_conn) {
   1db12:	4b06      	ldr	r3, [pc, #24]	; (1db2c <disconnected+0x1c>)
   1db14:	681b      	ldr	r3, [r3, #0]
   1db16:	4283      	cmp	r3, r0
   1db18:	d000      	beq.n	1db1c <disconnected+0xc>
   1db1a:	bd08      	pop	{r3, pc}
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));

	NET_DBG("Disconnected: %s (reason %u)\n", addr, reason);
#endif

	bt_conn_unref(default_conn);
   1db1c:	4618      	mov	r0, r3
   1db1e:	f7e8 fe1b 	bl	6758 <bt_conn_unref>
	default_conn = NULL;
   1db22:	2200      	movs	r2, #0
   1db24:	4b01      	ldr	r3, [pc, #4]	; (1db2c <disconnected+0x1c>)
   1db26:	601a      	str	r2, [r3, #0]
   1db28:	e7f7      	b.n	1db1a <disconnected+0xa>
   1db2a:	bf00      	nop
   1db2c:	20001e10 	.word	0x20001e10

0001db30 <ipsp_connected>:
{
   1db30:	b570      	push	{r4, r5, r6, lr}
   1db32:	b08e      	sub	sp, #56	; 0x38
   1db34:	4604      	mov	r4, r0
	if (bt_conn_get_info(chan->conn, &info) < 0) {
   1db36:	a909      	add	r1, sp, #36	; 0x24
   1db38:	6800      	ldr	r0, [r0, #0]
   1db3a:	f7e8 ff43 	bl	69c4 <bt_conn_get_info>
   1db3e:	2800      	cmp	r0, #0
   1db40:	db06      	blt.n	1db50 <ipsp_connected+0x20>
	sys_memcpy_swap(ctxt->src.val, info.le.src->a.val, sizeof(ctxt->src));
   1db42:	f104 069c 	add.w	r6, r4, #156	; 0x9c
   1db46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	src += length - 1;
   1db48:	3306      	adds	r3, #6
   1db4a:	4631      	mov	r1, r6
   1db4c:	2206      	movs	r2, #6
   1db4e:	e008      	b.n	1db62 <ipsp_connected+0x32>
		bt_l2cap_chan_disconnect(chan);
   1db50:	4620      	mov	r0, r4
   1db52:	f7ea f8b4 	bl	7cbe <bt_l2cap_chan_disconnect>
   1db56:	e05a      	b.n	1dc0e <ipsp_connected+0xde>
		*((u8_t *)dst++) = *((u8_t *)src--);
   1db58:	7818      	ldrb	r0, [r3, #0]
   1db5a:	7008      	strb	r0, [r1, #0]
	for (; length > 0; length--) {
   1db5c:	3a01      	subs	r2, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
   1db5e:	3b01      	subs	r3, #1
   1db60:	3101      	adds	r1, #1
	for (; length > 0; length--) {
   1db62:	2a00      	cmp	r2, #0
   1db64:	d1f8      	bne.n	1db58 <ipsp_connected+0x28>
	sys_memcpy_swap(ctxt->dst.val, info.le.dst->a.val, sizeof(ctxt->dst));
   1db66:	f104 01a2 	add.w	r1, r4, #162	; 0xa2
   1db6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	src += length - 1;
   1db6c:	3306      	adds	r3, #6
   1db6e:	4608      	mov	r0, r1
   1db70:	2206      	movs	r2, #6
   1db72:	e004      	b.n	1db7e <ipsp_connected+0x4e>
		*((u8_t *)dst++) = *((u8_t *)src--);
   1db74:	781d      	ldrb	r5, [r3, #0]
   1db76:	7005      	strb	r5, [r0, #0]
	for (; length > 0; length--) {
   1db78:	3a01      	subs	r2, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
   1db7a:	3b01      	subs	r3, #1
   1db7c:	3001      	adds	r0, #1
	for (; length > 0; length--) {
   1db7e:	2a00      	cmp	r2, #0
   1db80:	d1f8      	bne.n	1db74 <ipsp_connected+0x44>
	net_if_set_link_addr(ctxt->iface, ctxt->src.val, sizeof(ctxt->src.val),
   1db82:	f854 3c04 	ldr.w	r3, [r4, #-4]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1db86:	f3bf 8f5b 	dmb	ish
   1db8a:	68da      	ldr	r2, [r3, #12]
   1db8c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(iface->flags, NET_IF_UP)) {
   1db90:	f012 0f01 	tst.w	r2, #1
   1db94:	d104      	bne.n	1dba0 <ipsp_connected+0x70>
	iface->link_addr.addr = addr;
   1db96:	611e      	str	r6, [r3, #16]
	iface->link_addr.len = len;
   1db98:	2206      	movs	r2, #6
   1db9a:	751a      	strb	r2, [r3, #20]
	iface->link_addr.type = type;
   1db9c:	2202      	movs	r2, #2
   1db9e:	755a      	strb	r2, [r3, #21]
	ll.addr = ctxt->dst.val;
   1dba0:	9107      	str	r1, [sp, #28]
	ll.len = sizeof(ctxt->dst.val);
   1dba2:	2306      	movs	r3, #6
   1dba4:	f88d 3020 	strb.w	r3, [sp, #32]
	ll.type = NET_LINK_BLUETOOTH;
   1dba8:	2302      	movs	r3, #2
   1dbaa:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
	addr->s6_addr[0] = 0xfe;
   1dbae:	23fe      	movs	r3, #254	; 0xfe
   1dbb0:	f88d 300c 	strb.w	r3, [sp, #12]
	addr->s6_addr[1] = 0x80;
   1dbb4:	2380      	movs	r3, #128	; 0x80
   1dbb6:	f88d 300d 	strb.w	r3, [sp, #13]
	UNALIGNED_PUT(0, &addr->s6_addr16[1]);
   1dbba:	2300      	movs	r3, #0
   1dbbc:	f8ad 300e 	strh.w	r3, [sp, #14]
	UNALIGNED_PUT(0, &addr->s6_addr32[1]);
   1dbc0:	9304      	str	r3, [sp, #16]
		memcpy(&addr->s6_addr[8], lladdr->addr, 3);
   1dbc2:	2203      	movs	r2, #3
   1dbc4:	a805      	add	r0, sp, #20
   1dbc6:	f7e2 fb7b 	bl	2c0 <memcpy>
		addr->s6_addr[11] = 0xff;
   1dbca:	23ff      	movs	r3, #255	; 0xff
   1dbcc:	f88d 3017 	strb.w	r3, [sp, #23]
		addr->s6_addr[12] = 0xfe;
   1dbd0:	23fe      	movs	r3, #254	; 0xfe
   1dbd2:	f88d 3018 	strb.w	r3, [sp, #24]
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   1dbd6:	2203      	movs	r2, #3
   1dbd8:	9907      	ldr	r1, [sp, #28]
   1dbda:	4411      	add	r1, r2
   1dbdc:	f10d 0019 	add.w	r0, sp, #25
   1dbe0:	f7e2 fb6e 	bl	2c0 <memcpy>
		if (lladdr->type == NET_LINK_BLUETOOTH) {
   1dbe4:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   1dbe8:	2b02      	cmp	r3, #2
   1dbea:	d012      	beq.n	1dc12 <ipsp_connected+0xe2>
		if (lladdr->type == NET_LINK_ETHERNET) {
   1dbec:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   1dbf0:	2b03      	cmp	r3, #3
   1dbf2:	d015      	beq.n	1dc20 <ipsp_connected+0xf0>
	net_ipv6_nbr_add(ctxt->iface, &in6, &ll, false,
   1dbf4:	2305      	movs	r3, #5
   1dbf6:	9300      	str	r3, [sp, #0]
   1dbf8:	2300      	movs	r3, #0
   1dbfa:	aa07      	add	r2, sp, #28
   1dbfc:	a903      	add	r1, sp, #12
   1dbfe:	f854 0c04 	ldr.w	r0, [r4, #-4]
   1dc02:	f002 f903 	bl	1fe0c <net_ipv6_nbr_add>
	net_if_up(ctxt->iface);
   1dc06:	f854 0c04 	ldr.w	r0, [r4, #-4]
   1dc0a:	f7fd fdd1 	bl	1b7b0 <net_if_up>
}
   1dc0e:	b00e      	add	sp, #56	; 0x38
   1dc10:	bd70      	pop	{r4, r5, r6, pc}
			addr->s6_addr[8] ^= 0x02;
   1dc12:	f89d 3014 	ldrb.w	r3, [sp, #20]
   1dc16:	f083 0302 	eor.w	r3, r3, #2
   1dc1a:	f88d 3014 	strb.w	r3, [sp, #20]
   1dc1e:	e7e5      	b.n	1dbec <ipsp_connected+0xbc>
			addr->s6_addr[8] ^= 0x02;
   1dc20:	f89d 3014 	ldrb.w	r3, [sp, #20]
   1dc24:	f083 0302 	eor.w	r3, r3, #2
   1dc28:	f88d 3014 	strb.w	r3, [sp, #20]
   1dc2c:	e7e2      	b.n	1dbf4 <ipsp_connected+0xc4>
	...

0001dc30 <net_bt_init>:
	.disconnected = disconnected,
};
#endif /* CONFIG_NET_L2_BT_MGMT */

static int net_bt_init(struct device *dev)
{
   1dc30:	b508      	push	{r3, lr}
	NET_DBG("dev %p driver_data %p", dev, dev->driver_data);

#if defined(CONFIG_NET_L2_BT_MGMT)
	bt_conn_cb_register(&conn_callbacks);
   1dc32:	4804      	ldr	r0, [pc, #16]	; (1dc44 <net_bt_init+0x14>)
   1dc34:	f7e8 fbb8 	bl	63a8 <bt_conn_cb_register>
#endif
	bt_l2cap_server_register(&server);
   1dc38:	4803      	ldr	r0, [pc, #12]	; (1dc48 <net_bt_init+0x18>)
   1dc3a:	f7e9 ffc7 	bl	7bcc <bt_l2cap_server_register>

	return 0;
}
   1dc3e:	2000      	movs	r0, #0
   1dc40:	bd08      	pop	{r3, pc}
   1dc42:	bf00      	nop
   1dc44:	2000bd7c 	.word	0x2000bd7c
   1dc48:	2000bdac 	.word	0x2000bdac

0001dc4c <bt_iface_send>:
{
   1dc4c:	b538      	push	{r3, r4, r5, lr}
	return iface->dev;
   1dc4e:	6803      	ldr	r3, [r0, #0]
	struct bt_context *ctxt = net_if_get_device(iface)->driver_data;
   1dc50:	689c      	ldr	r4, [r3, #8]
	frags = pkt->frags;
   1dc52:	688d      	ldr	r5, [r1, #8]
	pkt->frags = NULL;
   1dc54:	2300      	movs	r3, #0
   1dc56:	608b      	str	r3, [r1, #8]
	net_pkt_unref(pkt);
   1dc58:	4608      	mov	r0, r1
   1dc5a:	f7fe ffc2 	bl	1cbe2 <net_pkt_unref>
	ret = bt_l2cap_chan_send(&ctxt->ipsp_chan.chan, frags);
   1dc5e:	4629      	mov	r1, r5
   1dc60:	1d20      	adds	r0, r4, #4
   1dc62:	f7ea f9bd 	bl	7fe0 <bt_l2cap_chan_send>
}
   1dc66:	bd38      	pop	{r3, r4, r5, pc}

0001dc68 <bt_iface_init>:
   1dc68:	6803      	ldr	r3, [r0, #0]
	struct bt_context *ctxt = net_if_get_device(iface)->driver_data;
   1dc6a:	689b      	ldr	r3, [r3, #8]
	ctxt->iface = iface;
   1dc6c:	6018      	str	r0, [r3, #0]
	atomic_set_bit(iface->flags, NET_IF_POINTOPOINT);
   1dc6e:	300c      	adds	r0, #12
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1dc70:	f3bf 8f5b 	dmb	ish
   1dc74:	e850 3f00 	ldrex	r3, [r0]
   1dc78:	f043 0302 	orr.w	r3, r3, #2
   1dc7c:	e840 3200 	strex	r2, r3, [r0]
   1dc80:	2a00      	cmp	r2, #0
   1dc82:	d1f7      	bne.n	1dc74 <bt_iface_init+0xc>
   1dc84:	f3bf 8f5b 	dmb	ish
   1dc88:	4770      	bx	lr
	...

0001dc8c <net_mgmt_NET_REQUEST_BT_ADVERTISE>:
{
   1dc8c:	b510      	push	{r4, lr}
   1dc8e:	b086      	sub	sp, #24
   1dc90:	4614      	mov	r4, r2
	if (!strcmp(data, "on")) {
   1dc92:	4913      	ldr	r1, [pc, #76]	; (1dce0 <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x54>)
   1dc94:	4610      	mov	r0, r2
   1dc96:	f7e2 fbb7 	bl	408 <strcmp>
   1dc9a:	b140      	cbz	r0, 1dcae <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x22>
	} else if (!strcmp(data, "off")) {
   1dc9c:	4911      	ldr	r1, [pc, #68]	; (1dce4 <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x58>)
   1dc9e:	4620      	mov	r0, r4
   1dca0:	f7e2 fbb2 	bl	408 <strcmp>
   1dca4:	b9c0      	cbnz	r0, 1dcd8 <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x4c>
		return bt_le_adv_stop();
   1dca6:	f7e8 f87b 	bl	5da0 <bt_le_adv_stop>
}
   1dcaa:	b006      	add	sp, #24
   1dcac:	bd10      	pop	{r4, pc}
		return bt_le_adv_start(BT_LE_ADV_CONN, ad, ARRAY_SIZE(ad),
   1dcae:	2300      	movs	r3, #0
   1dcb0:	9303      	str	r3, [sp, #12]
   1dcb2:	9304      	str	r3, [sp, #16]
   1dcb4:	9305      	str	r3, [sp, #20]
   1dcb6:	2301      	movs	r3, #1
   1dcb8:	f88d 300c 	strb.w	r3, [sp, #12]
   1dcbc:	22a0      	movs	r2, #160	; 0xa0
   1dcbe:	f8ad 200e 	strh.w	r2, [sp, #14]
   1dcc2:	22f0      	movs	r2, #240	; 0xf0
   1dcc4:	f8ad 2010 	strh.w	r2, [sp, #16]
   1dcc8:	9300      	str	r3, [sp, #0]
   1dcca:	4b07      	ldr	r3, [pc, #28]	; (1dce8 <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x5c>)
   1dccc:	2202      	movs	r2, #2
   1dcce:	4907      	ldr	r1, [pc, #28]	; (1dcec <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x60>)
   1dcd0:	a803      	add	r0, sp, #12
   1dcd2:	f7e7 ffbb 	bl	5c4c <bt_le_adv_start>
   1dcd6:	e7e8      	b.n	1dcaa <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x1e>
		return -EINVAL;
   1dcd8:	f06f 0015 	mvn.w	r0, #21
   1dcdc:	e7e5      	b.n	1dcaa <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x1e>
   1dcde:	bf00      	nop
   1dce0:	0002fb60 	.word	0x0002fb60
   1dce4:	0002fb64 	.word	0x0002fb64
   1dce8:	0002fb68 	.word	0x0002fb68
   1dcec:	0002fb50 	.word	0x0002fb50

0001dcf0 <net_icmpv6_register_handler>:
	node->next = list->head;
   1dcf0:	4b04      	ldr	r3, [pc, #16]	; (1dd04 <net_icmpv6_register_handler+0x14>)
   1dcf2:	681a      	ldr	r2, [r3, #0]
   1dcf4:	6002      	str	r2, [r0, #0]
	list->head = node;
   1dcf6:	6018      	str	r0, [r3, #0]
	if (!list->tail) {
   1dcf8:	685b      	ldr	r3, [r3, #4]
   1dcfa:	b103      	cbz	r3, 1dcfe <net_icmpv6_register_handler+0xe>
   1dcfc:	4770      	bx	lr
		list->tail = list->head;
   1dcfe:	4b01      	ldr	r3, [pc, #4]	; (1dd04 <net_icmpv6_register_handler+0x14>)
   1dd00:	6058      	str	r0, [r3, #4]
}

void net_icmpv6_register_handler(struct net_icmpv6_handler *handler)
{
	sys_slist_prepend(&handlers, &handler->node);
}
   1dd02:	e7fb      	b.n	1dcfc <net_icmpv6_register_handler+0xc>
   1dd04:	20001e14 	.word	0x20001e14

0001dd08 <net_icmpv6_unregister_handler>:

void net_icmpv6_unregister_handler(struct net_icmpv6_handler *handler)
{
	sys_slist_find_and_remove(&handlers, &handler->node);
   1dd08:	4601      	mov	r1, r0
	return list->head;
   1dd0a:	4b10      	ldr	r3, [pc, #64]	; (1dd4c <net_icmpv6_unregister_handler+0x44>)
   1dd0c:	681b      	ldr	r3, [r3, #0]
	sys_snode_t *prev = NULL;
   1dd0e:	2200      	movs	r2, #0
	SYS_SLIST_FOR_EACH_NODE(list, test) {
   1dd10:	b1d3      	cbz	r3, 1dd48 <net_icmpv6_unregister_handler+0x40>
		if (test == node) {
   1dd12:	4299      	cmp	r1, r3
   1dd14:	d002      	beq.n	1dd1c <net_icmpv6_unregister_handler+0x14>
		prev = test;
   1dd16:	461a      	mov	r2, r3
	SYS_SLIST_FOR_EACH_NODE(list, test) {
   1dd18:	681b      	ldr	r3, [r3, #0]
   1dd1a:	e7f9      	b.n	1dd10 <net_icmpv6_unregister_handler+0x8>
	if (!prev_node) {
   1dd1c:	b142      	cbz	r2, 1dd30 <net_icmpv6_unregister_handler+0x28>
		prev_node->next = node->next;
   1dd1e:	6803      	ldr	r3, [r0, #0]
   1dd20:	6013      	str	r3, [r2, #0]
		if (list->tail == node) {
   1dd22:	4b0a      	ldr	r3, [pc, #40]	; (1dd4c <net_icmpv6_unregister_handler+0x44>)
   1dd24:	685b      	ldr	r3, [r3, #4]
   1dd26:	4298      	cmp	r0, r3
   1dd28:	d00b      	beq.n	1dd42 <net_icmpv6_unregister_handler+0x3a>
	node->next = NULL;
   1dd2a:	2300      	movs	r3, #0
   1dd2c:	6003      	str	r3, [r0, #0]
   1dd2e:	4770      	bx	lr
		list->head = node->next;
   1dd30:	6802      	ldr	r2, [r0, #0]
   1dd32:	4b06      	ldr	r3, [pc, #24]	; (1dd4c <net_icmpv6_unregister_handler+0x44>)
   1dd34:	601a      	str	r2, [r3, #0]
		if (list->tail == node) {
   1dd36:	685b      	ldr	r3, [r3, #4]
   1dd38:	4298      	cmp	r0, r3
   1dd3a:	d1f6      	bne.n	1dd2a <net_icmpv6_unregister_handler+0x22>
			list->tail = list->head;
   1dd3c:	4b03      	ldr	r3, [pc, #12]	; (1dd4c <net_icmpv6_unregister_handler+0x44>)
   1dd3e:	605a      	str	r2, [r3, #4]
   1dd40:	e7f3      	b.n	1dd2a <net_icmpv6_unregister_handler+0x22>
			list->tail = prev_node;
   1dd42:	4b02      	ldr	r3, [pc, #8]	; (1dd4c <net_icmpv6_unregister_handler+0x44>)
   1dd44:	605a      	str	r2, [r3, #4]
   1dd46:	e7f0      	b.n	1dd2a <net_icmpv6_unregister_handler+0x22>
   1dd48:	4770      	bx	lr
   1dd4a:	bf00      	nop
   1dd4c:	20001e14 	.word	0x20001e14

0001dd50 <net_icmpv6_set_chksum>:
#define echo_reply_debug(pkt)
#endif /* CONFIG_NET_DEBUG_ICMPV6 */

struct net_buf *net_icmpv6_set_chksum(struct net_pkt *pkt,
				      struct net_buf *frag)
{
   1dd50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1dd54:	b086      	sub	sp, #24
   1dd56:	4606      	mov	r6, r0
   1dd58:	460d      	mov	r5, r1
	struct net_icmp_hdr *icmp_hdr;
	u16_t chksum = 0;
   1dd5a:	2300      	movs	r3, #0
   1dd5c:	f8ad 3016 	strh.w	r3, [sp, #22]
	u16_t pos;

	icmp_hdr = net_pkt_icmp_data(pkt);
   1dd60:	f7ff fa18 	bl	1d194 <net_pkt_icmp_data>
   1dd64:	4604      	mov	r4, r0
 */
static inline
struct net_icmp_hdr *net_icmp_header_fits(struct net_pkt *pkt,
					  struct net_icmp_hdr *hdr)
{
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   1dd66:	2204      	movs	r2, #4
   1dd68:	4601      	mov	r1, r0
   1dd6a:	4630      	mov	r0, r6
   1dd6c:	f7ff fdfc 	bl	1d968 <net_header_fits>
   1dd70:	b170      	cbz	r0, 1dd90 <net_icmpv6_set_chksum+0x40>
		return hdr;
   1dd72:	4623      	mov	r3, r4
	if (net_icmp_header_fits(pkt, icmp_hdr)) {
   1dd74:	b173      	cbz	r3, 1dd94 <net_icmpv6_set_chksum+0x44>
		icmp_hdr->chksum = 0;
   1dd76:	2300      	movs	r3, #0
   1dd78:	70a3      	strb	r3, [r4, #2]
   1dd7a:	70e3      	strb	r3, [r4, #3]
extern u16_t net_calc_chksum_ipv4(struct net_pkt *pkt);
#endif /* CONFIG_NET_IPV4 */

static inline u16_t net_calc_chksum_icmpv6(struct net_pkt *pkt)
{
	return net_calc_chksum(pkt, IPPROTO_ICMPV6);
   1dd7c:	213a      	movs	r1, #58	; 0x3a
   1dd7e:	4630      	mov	r0, r6
   1dd80:	f7ff fd99 	bl	1d8b6 <net_calc_chksum>
		icmp_hdr->chksum = ~net_calc_chksum_icmpv6(pkt);
   1dd84:	43c0      	mvns	r0, r0
   1dd86:	8060      	strh	r0, [r4, #2]

		return frag;
   1dd88:	4628      	mov	r0, r5
			     (u8_t *)&chksum, PKT_WAIT_TIME);

	NET_ASSERT(frag);

	return frag;
}
   1dd8a:	b006      	add	sp, #24
   1dd8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return NULL;
   1dd90:	2300      	movs	r3, #0
   1dd92:	e7ef      	b.n	1dd74 <net_icmpv6_set_chksum+0x24>
	frag = net_pkt_write(pkt, frag, net_pkt_ip_hdr_len(pkt) +
   1dd94:	f896 2033 	ldrb.w	r2, [r6, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt) +
   1dd98:	f896 303b 	ldrb.w	r3, [r6, #59]	; 0x3b
	frag = net_pkt_write(pkt, frag, net_pkt_ip_hdr_len(pkt) +
   1dd9c:	441a      	add	r2, r3
   1dd9e:	3202      	adds	r2, #2
   1dda0:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
   1dda4:	f8cd 8008 	str.w	r8, [sp, #8]
   1dda8:	f10d 0416 	add.w	r4, sp, #22
   1ddac:	9401      	str	r4, [sp, #4]
   1ddae:	2702      	movs	r7, #2
   1ddb0:	9700      	str	r7, [sp, #0]
   1ddb2:	ab05      	add	r3, sp, #20
   1ddb4:	b292      	uxth	r2, r2
   1ddb6:	4629      	mov	r1, r5
   1ddb8:	4630      	mov	r0, r6
   1ddba:	f7ff f902 	bl	1cfc2 <net_pkt_write>
   1ddbe:	4605      	mov	r5, r0
	return net_calc_chksum(pkt, IPPROTO_ICMPV6);
   1ddc0:	213a      	movs	r1, #58	; 0x3a
   1ddc2:	4630      	mov	r0, r6
   1ddc4:	f7ff fd77 	bl	1d8b6 <net_calc_chksum>
	chksum = ~net_calc_chksum_icmpv6(pkt);
   1ddc8:	43c0      	mvns	r0, r0
   1ddca:	f8ad 0016 	strh.w	r0, [sp, #22]
	frag = net_pkt_write(pkt, frag, pos - 2, &pos, sizeof(chksum),
   1ddce:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   1ddd2:	3a02      	subs	r2, #2
   1ddd4:	f8cd 8008 	str.w	r8, [sp, #8]
   1ddd8:	9401      	str	r4, [sp, #4]
   1ddda:	9700      	str	r7, [sp, #0]
   1dddc:	ab05      	add	r3, sp, #20
   1ddde:	b292      	uxth	r2, r2
   1dde0:	4629      	mov	r1, r5
   1dde2:	4630      	mov	r0, r6
   1dde4:	f7ff f8ed 	bl	1cfc2 <net_pkt_write>
	return frag;
   1dde8:	e7cf      	b.n	1dd8a <net_icmpv6_set_chksum+0x3a>

0001ddea <net_icmpv6_get_hdr>:

struct net_icmp_hdr *net_icmpv6_get_hdr(struct net_pkt *pkt,
					struct net_icmp_hdr *hdr)
{
   1ddea:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ddec:	b085      	sub	sp, #20
   1ddee:	4605      	mov	r5, r0
   1ddf0:	460f      	mov	r7, r1
	/* If the ICMP header can fit the first fragment, then access it
	 * directly (fast path), otherwise read the values one by one
	 * using net_frag_read*() functions (slow path).
	 */

	icmp_hdr = net_pkt_icmp_data(pkt);
   1ddf2:	f7ff f9cf 	bl	1d194 <net_pkt_icmp_data>
   1ddf6:	4604      	mov	r4, r0
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   1ddf8:	2204      	movs	r2, #4
   1ddfa:	4601      	mov	r1, r0
   1ddfc:	4628      	mov	r0, r5
   1ddfe:	f7ff fdb3 	bl	1d968 <net_header_fits>
   1de02:	b120      	cbz	r0, 1de0e <net_icmpv6_get_hdr+0x24>
		return hdr;
   1de04:	4626      	mov	r6, r4
	if (net_icmp_header_fits(pkt, icmp_hdr)) {
   1de06:	b126      	cbz	r6, 1de12 <net_icmpv6_get_hdr+0x28>
		NET_ASSERT(frag);
		return NULL;
	}

	return hdr;
}
   1de08:	4620      	mov	r0, r4
   1de0a:	b005      	add	sp, #20
   1de0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return NULL;
   1de0e:	2600      	movs	r6, #0
   1de10:	e7f9      	b.n	1de06 <net_icmpv6_get_hdr+0x1c>
	frag = net_frag_read_u8(pkt->frags, net_pkt_ip_hdr_len(pkt) +
   1de12:	68a8      	ldr	r0, [r5, #8]
   1de14:	f895 4033 	ldrb.w	r4, [r5, #51]	; 0x33
				net_pkt_ipv6_ext_len(pkt), &pos, &hdr->type);
   1de18:	f895 103b 	ldrb.w	r1, [r5, #59]	; 0x3b
static inline struct net_buf *net_frag_read_u8(struct net_buf *frag,
					      u16_t offset,
					      u16_t *pos,
					      u8_t *value)
{
	return net_frag_read(frag, offset, pos, 1, value);
   1de1c:	9700      	str	r7, [sp, #0]
   1de1e:	2301      	movs	r3, #1
   1de20:	f10d 020e 	add.w	r2, sp, #14
   1de24:	4421      	add	r1, r4
   1de26:	f7ff f85a 	bl	1cede <net_frag_read>
	frag = net_frag_read_u8(frag, pos, &pos, &hdr->code);
   1de2a:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1de2e:	1c7b      	adds	r3, r7, #1
   1de30:	9300      	str	r3, [sp, #0]
   1de32:	2301      	movs	r3, #1
   1de34:	f10d 020e 	add.w	r2, sp, #14
   1de38:	f7ff f851 	bl	1cede <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->chksum),
   1de3c:	f8bd 100e 	ldrh.w	r1, [sp, #14]
			     (u8_t *)&hdr->chksum);
   1de40:	1cbb      	adds	r3, r7, #2
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->chksum),
   1de42:	9300      	str	r3, [sp, #0]
   1de44:	2302      	movs	r3, #2
   1de46:	f10d 020e 	add.w	r2, sp, #14
   1de4a:	f7ff f848 	bl	1cede <net_frag_read>
	if (!frag) {
   1de4e:	b108      	cbz	r0, 1de54 <net_icmpv6_get_hdr+0x6a>
	return hdr;
   1de50:	463c      	mov	r4, r7
   1de52:	e7d9      	b.n	1de08 <net_icmpv6_get_hdr+0x1e>
		return NULL;
   1de54:	4634      	mov	r4, r6
   1de56:	e7d7      	b.n	1de08 <net_icmpv6_get_hdr+0x1e>

0001de58 <net_icmpv6_set_hdr>:

struct net_icmp_hdr *net_icmpv6_set_hdr(struct net_pkt *pkt,
					struct net_icmp_hdr *hdr)
{
   1de58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1de5c:	b086      	sub	sp, #24
   1de5e:	4606      	mov	r6, r0
   1de60:	460c      	mov	r4, r1
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   1de62:	2204      	movs	r2, #4
   1de64:	f7ff fd80 	bl	1d968 <net_header_fits>
   1de68:	b128      	cbz	r0, 1de76 <net_icmpv6_set_hdr+0x1e>
		return hdr;
   1de6a:	4625      	mov	r5, r4
	struct net_buf *frag;
	u16_t pos;

	if (net_icmp_header_fits(pkt, hdr)) {
   1de6c:	b12d      	cbz	r5, 1de7a <net_icmpv6_set_hdr+0x22>
		NET_ASSERT(frag);
		return NULL;
	}

	return hdr;
}
   1de6e:	4620      	mov	r0, r4
   1de70:	b006      	add	sp, #24
   1de72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return NULL;
   1de76:	2500      	movs	r5, #0
   1de78:	e7f8      	b.n	1de6c <net_icmpv6_set_hdr+0x14>
	frag = net_pkt_write(pkt, pkt->frags, net_pkt_ip_hdr_len(pkt) +
   1de7a:	f896 1033 	ldrb.w	r1, [r6, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt), &pos,
   1de7e:	f896 203b 	ldrb.w	r2, [r6, #59]	; 0x3b
	frag = net_pkt_write(pkt, pkt->frags, net_pkt_ip_hdr_len(pkt) +
   1de82:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
   1de86:	9702      	str	r7, [sp, #8]
   1de88:	9401      	str	r4, [sp, #4]
   1de8a:	f04f 0801 	mov.w	r8, #1
   1de8e:	f8cd 8000 	str.w	r8, [sp]
   1de92:	f10d 0316 	add.w	r3, sp, #22
   1de96:	440a      	add	r2, r1
   1de98:	68b1      	ldr	r1, [r6, #8]
   1de9a:	4630      	mov	r0, r6
   1de9c:	f7ff f891 	bl	1cfc2 <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->code),
   1dea0:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   1dea4:	eb04 0308 	add.w	r3, r4, r8
   1dea8:	9702      	str	r7, [sp, #8]
   1deaa:	9301      	str	r3, [sp, #4]
   1deac:	f8cd 8000 	str.w	r8, [sp]
   1deb0:	f10d 0316 	add.w	r3, sp, #22
   1deb4:	4601      	mov	r1, r0
   1deb6:	4630      	mov	r0, r6
   1deb8:	f7ff f883 	bl	1cfc2 <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->chksum),
   1debc:	f8bd 2016 	ldrh.w	r2, [sp, #22]
			     (u8_t *)&hdr->chksum, PKT_WAIT_TIME);
   1dec0:	1ca3      	adds	r3, r4, #2
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->chksum),
   1dec2:	9702      	str	r7, [sp, #8]
   1dec4:	9301      	str	r3, [sp, #4]
   1dec6:	2302      	movs	r3, #2
   1dec8:	9300      	str	r3, [sp, #0]
   1deca:	f10d 0316 	add.w	r3, sp, #22
   1dece:	4601      	mov	r1, r0
   1ded0:	4630      	mov	r0, r6
   1ded2:	f7ff f876 	bl	1cfc2 <net_pkt_write>
	if (!frag) {
   1ded6:	2800      	cmp	r0, #0
   1ded8:	d1c9      	bne.n	1de6e <net_icmpv6_set_hdr+0x16>
		return NULL;
   1deda:	462c      	mov	r4, r5
   1dedc:	e7c7      	b.n	1de6e <net_icmpv6_set_hdr+0x16>
	...

0001dee0 <handle_echo_request>:

	return hdr;
}

static enum net_verdict handle_echo_request(struct net_pkt *orig)
{
   1dee0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1dee4:	b09a      	sub	sp, #104	; 0x68
   1dee6:	4606      	mov	r6, r0
	return pkt->iface;
   1dee8:	6945      	ldr	r5, [r0, #20]

	echo_request_debug(orig);

	iface = net_pkt_iface(orig);

	pkt = net_pkt_get_reserve_tx(0, PKT_WAIT_TIME);
   1deea:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   1deee:	2000      	movs	r0, #0
   1def0:	f7fe fe06 	bl	1cb00 <net_pkt_get_reserve_tx>
	if (!pkt) {
   1def4:	2800      	cmp	r0, #0
   1def6:	f000 80a1 	beq.w	1e03c <handle_echo_request+0x15c>
   1defa:	4604      	mov	r4, r0
	return pkt->frags->data;
   1defc:	68b3      	ldr	r3, [r6, #8]
	size_t bytes = 0;
   1defe:	2100      	movs	r1, #0
   1df00:	e002      	b.n	1df08 <handle_echo_request+0x28>
		bytes += buf->len;
   1df02:	899a      	ldrh	r2, [r3, #12]
   1df04:	4411      	add	r1, r2
		buf = buf->frags;
   1df06:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   1df08:	2b00      	cmp	r3, #0
   1df0a:	d1fa      	bne.n	1df02 <handle_echo_request+0x22>
	return net_pkt_copy(pkt, net_buf_frags_len(pkt->frags),
   1df0c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1df10:	2200      	movs	r2, #0
   1df12:	4630      	mov	r0, r6
   1df14:	f7fe fea6 	bl	1cc64 <net_pkt_copy>

	payload_len = sys_get_be16(NET_IPV6_HDR(orig)->len) -
		sizeof(NET_ICMPH_LEN) - NET_ICMPV6_UNUSED_LEN;

	frag = net_pkt_copy_all(orig, 0, PKT_WAIT_TIME);
	if (!frag) {
   1df18:	4607      	mov	r7, r0
   1df1a:	2800      	cmp	r0, #0
   1df1c:	f000 808b 	beq.w	1e036 <handle_echo_request+0x156>
		goto drop;
	}

	net_pkt_frag_add(pkt, frag);
   1df20:	4601      	mov	r1, r0
   1df22:	4620      	mov	r0, r4
   1df24:	f7fe fe87 	bl	1cc36 <net_pkt_frag_add>
	pkt->family = family;
   1df28:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   1df2c:	220a      	movs	r2, #10
   1df2e:	f362 03c6 	bfi	r3, r2, #3, #4
   1df32:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	pkt->iface = iface;
   1df36:	6165      	str	r5, [r4, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   1df38:	7d6b      	ldrb	r3, [r5, #21]
   1df3a:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   1df3e:	7d6b      	ldrb	r3, [r5, #21]
   1df40:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	net_pkt_set_family(pkt, AF_INET6);
	net_pkt_set_iface(pkt, iface);
	net_pkt_set_ll_reserve(pkt, net_buf_headroom(frag));
   1df44:	f107 0008 	add.w	r0, r7, #8
   1df48:	f7fc f98d 	bl	1a266 <net_buf_simple_headroom>
	pkt->ll_reserve = len;
   1df4c:	f884 0032 	strb.w	r0, [r4, #50]	; 0x32
	pkt->ip_hdr_len = len;
   1df50:	2328      	movs	r3, #40	; 0x28
   1df52:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
	return pkt->ipv6_ext_len;
   1df56:	f896 303b 	ldrb.w	r3, [r6, #59]	; 0x3b
	net_pkt_set_ip_hdr_len(pkt, sizeof(struct net_ipv6_hdr));

	if (net_pkt_ipv6_ext_len(orig)) {
   1df5a:	2b00      	cmp	r3, #0
   1df5c:	d076      	beq.n	1e04c <handle_echo_request+0x16c>
	pkt->ipv6_ext_len = len;
   1df5e:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
	return pkt->frags->data;
   1df62:	68a3      	ldr	r3, [r4, #8]
   1df64:	689b      	ldr	r3, [r3, #8]
	} else {
		net_pkt_set_ipv6_ext_len(pkt, 0);
	}

	/* Set up IPv6 Header fields */
	NET_IPV6_HDR(pkt)->vtc = 0x60;
   1df66:	2260      	movs	r2, #96	; 0x60
   1df68:	701a      	strb	r2, [r3, #0]
   1df6a:	68a3      	ldr	r3, [r4, #8]
   1df6c:	689a      	ldr	r2, [r3, #8]
	NET_IPV6_HDR(pkt)->tcflow = 0;
   1df6e:	2300      	movs	r3, #0
   1df70:	7053      	strb	r3, [r2, #1]
   1df72:	68a2      	ldr	r2, [r4, #8]
   1df74:	6892      	ldr	r2, [r2, #8]
	NET_IPV6_HDR(pkt)->flow = 0;
   1df76:	7093      	strb	r3, [r2, #2]
   1df78:	70d3      	strb	r3, [r2, #3]
   1df7a:	68a3      	ldr	r3, [r4, #8]
   1df7c:	689b      	ldr	r3, [r3, #8]
	return iface->ipv6.hop_limit;
   1df7e:	f895 2294 	ldrb.w	r2, [r5, #660]	; 0x294
	NET_IPV6_HDR(pkt)->hop_limit = net_if_ipv6_get_hop_limit(iface);
   1df82:	71da      	strb	r2, [r3, #7]
   1df84:	68a3      	ldr	r3, [r4, #8]
   1df86:	f8d3 c008 	ldr.w	ip, [r3, #8]
	return addr->s6_addr[0] == 0xFF;
   1df8a:	f89c 3018 	ldrb.w	r3, [ip, #24]

	if (net_is_ipv6_addr_mcast(&NET_IPV6_HDR(pkt)->dst)) {
   1df8e:	2bff      	cmp	r3, #255	; 0xff
   1df90:	d060      	beq.n	1e054 <handle_echo_request+0x174>
   1df92:	68b3      	ldr	r3, [r6, #8]
   1df94:	689d      	ldr	r5, [r3, #8]
				net_if_ipv6_select_src_addr(iface,
						    &NET_IPV6_HDR(orig)->dst));
	} else {
		struct in6_addr addr;

		net_ipaddr_copy(&addr, &NET_IPV6_HDR(orig)->src);
   1df96:	af0e      	add	r7, sp, #56	; 0x38
   1df98:	462b      	mov	r3, r5
   1df9a:	f853 0f08 	ldr.w	r0, [r3, #8]!
   1df9e:	6859      	ldr	r1, [r3, #4]
   1dfa0:	689a      	ldr	r2, [r3, #8]
   1dfa2:	68db      	ldr	r3, [r3, #12]
   1dfa4:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   1dfa6:	af01      	add	r7, sp, #4
   1dfa8:	ab0e      	add	r3, sp, #56	; 0x38
   1dfaa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1dfac:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   1dfb0:	f10d 0e48 	add.w	lr, sp, #72	; 0x48
   1dfb4:	462b      	mov	r3, r5
   1dfb6:	f853 0f18 	ldr.w	r0, [r3, #24]!
   1dfba:	6859      	ldr	r1, [r3, #4]
   1dfbc:	689a      	ldr	r2, [r3, #8]
   1dfbe:	68db      	ldr	r3, [r3, #12]
   1dfc0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   1dfc4:	ad12      	add	r5, sp, #72	; 0x48
   1dfc6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1dfc8:	f8cc 0008 	str.w	r0, [ip, #8]
   1dfcc:	f8cc 100c 	str.w	r1, [ip, #12]
   1dfd0:	f8cc 2010 	str.w	r2, [ip, #16]
   1dfd4:	f8cc 3014 	str.w	r3, [ip, #20]
   1dfd8:	68a3      	ldr	r3, [r4, #8]
   1dfda:	f8d3 e008 	ldr.w	lr, [r3, #8]
				&NET_IPV6_HDR(orig)->dst);
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst, &addr);
   1dfde:	ad16      	add	r5, sp, #88	; 0x58
   1dfe0:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
   1dfe4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
   1dfe8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1dfea:	f8ce 0018 	str.w	r0, [lr, #24]
   1dfee:	f8ce 101c 	str.w	r1, [lr, #28]
   1dff2:	f8ce 2020 	str.w	r2, [lr, #32]
   1dff6:	f8ce 3024 	str.w	r3, [lr, #36]	; 0x24
			goto drop;
		}
#endif
	}

	net_pkt_ll_src(pkt)->addr = net_pkt_ll_dst(orig)->addr;
   1dffa:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   1dffc:	6223      	str	r3, [r4, #32]
	net_pkt_ll_src(pkt)->len = net_pkt_ll_dst(orig)->len;
   1dffe:	f896 302c 	ldrb.w	r3, [r6, #44]	; 0x2c
   1e002:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24

	/* We must not set the destination ll address here but trust
	 * that it is set properly using a value from neighbor cache.
	 */
	net_pkt_ll_dst(pkt)->addr = NULL;
   1e006:	2500      	movs	r5, #0
   1e008:	62a5      	str	r5, [r4, #40]	; 0x28

	/* ICMPv6 fields */
	icmp_hdr = net_icmpv6_get_hdr(pkt, &hdr);
   1e00a:	a905      	add	r1, sp, #20
   1e00c:	4620      	mov	r0, r4
   1e00e:	f7ff feec 	bl	1ddea <net_icmpv6_get_hdr>
   1e012:	4601      	mov	r1, r0
	icmp_hdr->type = NET_ICMPV6_ECHO_REPLY;
   1e014:	2381      	movs	r3, #129	; 0x81
   1e016:	7003      	strb	r3, [r0, #0]
	icmp_hdr->code = 0;
   1e018:	7045      	strb	r5, [r0, #1]
	icmp_hdr->chksum = 0;
   1e01a:	7085      	strb	r5, [r0, #2]
   1e01c:	70c5      	strb	r5, [r0, #3]
	net_icmpv6_set_hdr(pkt, icmp_hdr);
   1e01e:	4620      	mov	r0, r4
   1e020:	f7ff ff1a 	bl	1de58 <net_icmpv6_set_hdr>
	net_icmpv6_set_chksum(pkt, pkt->frags);
   1e024:	68a1      	ldr	r1, [r4, #8]
   1e026:	4620      	mov	r0, r4
   1e028:	f7ff fe92 	bl	1dd50 <net_icmpv6_set_chksum>

	echo_reply_debug(pkt);

	if (net_send_data(pkt) < 0) {
   1e02c:	4620      	mov	r0, r4
   1e02e:	f7fc f9d7 	bl	1a3e0 <net_send_data>
   1e032:	42a8      	cmp	r0, r5
   1e034:	da3c      	bge.n	1e0b0 <handle_echo_request+0x1d0>
	net_stats_update_icmp_sent();

	return NET_OK;

drop:
	net_pkt_unref(pkt);
   1e036:	4620      	mov	r0, r4
   1e038:	f7fe fdd3 	bl	1cbe2 <net_pkt_unref>
	net_stats.icmp.drop++;
   1e03c:	4a21      	ldr	r2, [pc, #132]	; (1e0c4 <handle_echo_request+0x1e4>)
   1e03e:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
   1e040:	3301      	adds	r3, #1
   1e042:	63d3      	str	r3, [r2, #60]	; 0x3c

drop_no_pkt:
	net_stats_update_icmp_drop();

	return NET_DROP;
   1e044:	2002      	movs	r0, #2
}
   1e046:	b01a      	add	sp, #104	; 0x68
   1e048:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	pkt->ipv6_ext_len = len;
   1e04c:	2300      	movs	r3, #0
   1e04e:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
   1e052:	e786      	b.n	1df62 <handle_echo_request+0x82>
	return pkt->frags->data;
   1e054:	68b3      	ldr	r3, [r6, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst,
   1e056:	af06      	add	r7, sp, #24
   1e058:	689b      	ldr	r3, [r3, #8]
   1e05a:	f853 0f08 	ldr.w	r0, [r3, #8]!
   1e05e:	6859      	ldr	r1, [r3, #4]
   1e060:	689a      	ldr	r2, [r3, #8]
   1e062:	68db      	ldr	r3, [r3, #12]
   1e064:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   1e066:	af06      	add	r7, sp, #24
   1e068:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   1e06a:	f8cc 0018 	str.w	r0, [ip, #24]
   1e06e:	f8cc 101c 	str.w	r1, [ip, #28]
   1e072:	f8cc 2020 	str.w	r2, [ip, #32]
   1e076:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
   1e07a:	68a3      	ldr	r3, [r4, #8]
   1e07c:	f8d3 8008 	ldr.w	r8, [r3, #8]
   1e080:	68b3      	ldr	r3, [r6, #8]
   1e082:	6899      	ldr	r1, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   1e084:	3118      	adds	r1, #24
   1e086:	4628      	mov	r0, r5
   1e088:	f7fd f910 	bl	1b2ac <net_if_ipv6_select_src_addr>
   1e08c:	4603      	mov	r3, r0
   1e08e:	ad0a      	add	r5, sp, #40	; 0x28
   1e090:	6800      	ldr	r0, [r0, #0]
   1e092:	6859      	ldr	r1, [r3, #4]
   1e094:	689a      	ldr	r2, [r3, #8]
   1e096:	68db      	ldr	r3, [r3, #12]
   1e098:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1e09a:	ad0a      	add	r5, sp, #40	; 0x28
   1e09c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1e09e:	f8c8 0008 	str.w	r0, [r8, #8]
   1e0a2:	f8c8 100c 	str.w	r1, [r8, #12]
   1e0a6:	f8c8 2010 	str.w	r2, [r8, #16]
   1e0aa:	f8c8 3014 	str.w	r3, [r8, #20]
   1e0ae:	e7a4      	b.n	1dffa <handle_echo_request+0x11a>
	net_pkt_unref(orig);
   1e0b0:	4630      	mov	r0, r6
   1e0b2:	f7fe fd96 	bl	1cbe2 <net_pkt_unref>
	net_stats.icmp.sent++;
   1e0b6:	4a03      	ldr	r2, [pc, #12]	; (1e0c4 <handle_echo_request+0x1e4>)
   1e0b8:	6b93      	ldr	r3, [r2, #56]	; 0x38
   1e0ba:	3301      	adds	r3, #1
   1e0bc:	6393      	str	r3, [r2, #56]	; 0x38
	return NET_OK;
   1e0be:	4628      	mov	r0, r5
   1e0c0:	e7c1      	b.n	1e046 <handle_echo_request+0x166>
   1e0c2:	bf00      	nop
   1e0c4:	200029e8 	.word	0x200029e8

0001e0c8 <net_icmpv6_get_ns_hdr>:
{
   1e0c8:	b570      	push	{r4, r5, r6, lr}
   1e0ca:	b084      	sub	sp, #16
   1e0cc:	4605      	mov	r5, r0
   1e0ce:	460e      	mov	r6, r1
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr));
   1e0d0:	2104      	movs	r1, #4
   1e0d2:	f7ff f874 	bl	1d1be <net_pkt_icmp_opt_data>
   1e0d6:	4604      	mov	r4, r0
	if (net_header_fits(pkt, opt_data, sizeof(*hdr))) {
   1e0d8:	2214      	movs	r2, #20
   1e0da:	4601      	mov	r1, r0
   1e0dc:	4628      	mov	r0, r5
   1e0de:	f7ff fc43 	bl	1d968 <net_header_fits>
   1e0e2:	b110      	cbz	r0, 1e0ea <net_icmpv6_get_ns_hdr+0x22>
		return (struct net_icmpv6_ns_hdr *)opt_data;
   1e0e4:	4620      	mov	r0, r4
}
   1e0e6:	b004      	add	sp, #16
   1e0e8:	bd70      	pop	{r4, r5, r6, pc}
	frag = net_frag_read(pkt->frags,
   1e0ea:	68a8      	ldr	r0, [r5, #8]
			     net_pkt_ip_hdr_len(pkt) +
   1e0ec:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt) +
   1e0f0:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
			     net_pkt_ip_hdr_len(pkt) +
   1e0f4:	4419      	add	r1, r3
	frag = net_frag_read(pkt->frags,
   1e0f6:	3108      	adds	r1, #8
			     &pos, sizeof(struct in6_addr), (u8_t *)&hdr->tgt);
   1e0f8:	1d33      	adds	r3, r6, #4
	frag = net_frag_read(pkt->frags,
   1e0fa:	9300      	str	r3, [sp, #0]
   1e0fc:	2310      	movs	r3, #16
   1e0fe:	f10d 020e 	add.w	r2, sp, #14
   1e102:	b289      	uxth	r1, r1
   1e104:	f7fe feeb 	bl	1cede <net_frag_read>
	if (!frag) {
   1e108:	2800      	cmp	r0, #0
   1e10a:	d0ec      	beq.n	1e0e6 <net_icmpv6_get_ns_hdr+0x1e>
	return hdr;
   1e10c:	4630      	mov	r0, r6
   1e10e:	e7ea      	b.n	1e0e6 <net_icmpv6_get_ns_hdr+0x1e>

0001e110 <net_icmpv6_set_ns_hdr>:
{
   1e110:	b570      	push	{r4, r5, r6, lr}
   1e112:	b086      	sub	sp, #24
   1e114:	4605      	mov	r5, r0
   1e116:	460e      	mov	r6, r1
	const u32_t reserved = 0;
   1e118:	2300      	movs	r3, #0
   1e11a:	9305      	str	r3, [sp, #20]
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr));
   1e11c:	2104      	movs	r1, #4
   1e11e:	f7ff f84e 	bl	1d1be <net_pkt_icmp_opt_data>
   1e122:	4604      	mov	r4, r0
	if (net_header_fits(pkt, opt_data, sizeof(*hdr))) {
   1e124:	2214      	movs	r2, #20
   1e126:	4601      	mov	r1, r0
   1e128:	4628      	mov	r0, r5
   1e12a:	f7ff fc1d 	bl	1d968 <net_header_fits>
   1e12e:	b110      	cbz	r0, 1e136 <net_icmpv6_set_ns_hdr+0x26>
		return (struct net_icmpv6_ns_hdr *)opt_data;
   1e130:	4620      	mov	r0, r4
}
   1e132:	b006      	add	sp, #24
   1e134:	bd70      	pop	{r4, r5, r6, pc}
	frag = net_pkt_write(pkt, pkt->frags, net_pkt_ip_hdr_len(pkt) +
   1e136:	f895 2033 	ldrb.w	r2, [r5, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt) +
   1e13a:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
	frag = net_pkt_write(pkt, pkt->frags, net_pkt_ip_hdr_len(pkt) +
   1e13e:	441a      	add	r2, r3
   1e140:	3204      	adds	r2, #4
   1e142:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   1e146:	9402      	str	r4, [sp, #8]
   1e148:	ab05      	add	r3, sp, #20
   1e14a:	9301      	str	r3, [sp, #4]
   1e14c:	2304      	movs	r3, #4
   1e14e:	9300      	str	r3, [sp, #0]
   1e150:	f10d 0312 	add.w	r3, sp, #18
   1e154:	b292      	uxth	r2, r2
   1e156:	68a9      	ldr	r1, [r5, #8]
   1e158:	4628      	mov	r0, r5
   1e15a:	f7fe ff32 	bl	1cfc2 <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(struct in6_addr),
   1e15e:	f8bd 2012 	ldrh.w	r2, [sp, #18]
			     (u8_t *)&hdr->tgt, PKT_WAIT_TIME);
   1e162:	1d33      	adds	r3, r6, #4
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(struct in6_addr),
   1e164:	9402      	str	r4, [sp, #8]
   1e166:	9301      	str	r3, [sp, #4]
   1e168:	2310      	movs	r3, #16
   1e16a:	9300      	str	r3, [sp, #0]
   1e16c:	f10d 0312 	add.w	r3, sp, #18
   1e170:	4601      	mov	r1, r0
   1e172:	4628      	mov	r0, r5
   1e174:	f7fe ff25 	bl	1cfc2 <net_pkt_write>
	if (!frag) {
   1e178:	2800      	cmp	r0, #0
   1e17a:	d0da      	beq.n	1e132 <net_icmpv6_set_ns_hdr+0x22>
	return hdr;
   1e17c:	4630      	mov	r0, r6
   1e17e:	e7d8      	b.n	1e132 <net_icmpv6_set_ns_hdr+0x22>

0001e180 <net_icmpv6_get_nd_opt_hdr>:
{
   1e180:	b570      	push	{r4, r5, r6, lr}
   1e182:	b084      	sub	sp, #16
   1e184:	4605      	mov	r5, r0
   1e186:	460e      	mov	r6, r1
	return pkt->ipv6_ext_opt_len;
   1e188:	f890 103c 	ldrb.w	r1, [r0, #60]	; 0x3c
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr) +
   1e18c:	3104      	adds	r1, #4
   1e18e:	f7ff f816 	bl	1d1be <net_pkt_icmp_opt_data>
   1e192:	4604      	mov	r4, r0
	if (net_header_fits(pkt, opt_data, sizeof(*hdr))) {
   1e194:	2202      	movs	r2, #2
   1e196:	4601      	mov	r1, r0
   1e198:	4628      	mov	r0, r5
   1e19a:	f7ff fbe5 	bl	1d968 <net_header_fits>
   1e19e:	b110      	cbz	r0, 1e1a6 <net_icmpv6_get_nd_opt_hdr+0x26>
		return (struct net_icmpv6_nd_opt_hdr *)opt_data;
   1e1a0:	4620      	mov	r0, r4
}
   1e1a2:	b004      	add	sp, #16
   1e1a4:	bd70      	pop	{r4, r5, r6, pc}
	frag = net_frag_read_u8(pkt->frags,
   1e1a6:	68a8      	ldr	r0, [r5, #8]
				net_pkt_ip_hdr_len(pkt) +
   1e1a8:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
				net_pkt_ipv6_ext_len(pkt) +
   1e1ac:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
				net_pkt_ip_hdr_len(pkt) +
   1e1b0:	4419      	add	r1, r3
				net_pkt_ipv6_ext_opt_len(pkt),
   1e1b2:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
				sizeof(struct net_icmp_hdr) +
   1e1b6:	4419      	add	r1, r3
   1e1b8:	b289      	uxth	r1, r1
	frag = net_frag_read_u8(pkt->frags,
   1e1ba:	3104      	adds	r1, #4
	return net_frag_read(frag, offset, pos, 1, value);
   1e1bc:	9600      	str	r6, [sp, #0]
   1e1be:	2301      	movs	r3, #1
   1e1c0:	f10d 020e 	add.w	r2, sp, #14
   1e1c4:	b289      	uxth	r1, r1
   1e1c6:	f7fe fe8a 	bl	1cede <net_frag_read>
	frag = net_frag_read_u8(frag, pos, &pos, &hdr->len);
   1e1ca:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1e1ce:	1c73      	adds	r3, r6, #1
   1e1d0:	9300      	str	r3, [sp, #0]
   1e1d2:	2301      	movs	r3, #1
   1e1d4:	f10d 020e 	add.w	r2, sp, #14
   1e1d8:	f7fe fe81 	bl	1cede <net_frag_read>
	if (!frag) {
   1e1dc:	2800      	cmp	r0, #0
   1e1de:	d0e0      	beq.n	1e1a2 <net_icmpv6_get_nd_opt_hdr+0x22>
	return hdr;
   1e1e0:	4630      	mov	r0, r6
   1e1e2:	e7de      	b.n	1e1a2 <net_icmpv6_get_nd_opt_hdr+0x22>

0001e1e4 <net_icmpv6_get_na_hdr>:
{
   1e1e4:	b570      	push	{r4, r5, r6, lr}
   1e1e6:	b084      	sub	sp, #16
   1e1e8:	4605      	mov	r5, r0
   1e1ea:	460e      	mov	r6, r1
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr));
   1e1ec:	2104      	movs	r1, #4
   1e1ee:	f7fe ffe6 	bl	1d1be <net_pkt_icmp_opt_data>
   1e1f2:	4604      	mov	r4, r0
	if (net_header_fits(pkt, opt_data, sizeof(*hdr))) {
   1e1f4:	2214      	movs	r2, #20
   1e1f6:	4601      	mov	r1, r0
   1e1f8:	4628      	mov	r0, r5
   1e1fa:	f7ff fbb5 	bl	1d968 <net_header_fits>
   1e1fe:	b110      	cbz	r0, 1e206 <net_icmpv6_get_na_hdr+0x22>
		return (struct net_icmpv6_na_hdr *)opt_data;
   1e200:	4620      	mov	r0, r4
}
   1e202:	b004      	add	sp, #16
   1e204:	bd70      	pop	{r4, r5, r6, pc}
	frag = net_frag_read_u8(pkt->frags, net_pkt_ip_hdr_len(pkt) +
   1e206:	68a8      	ldr	r0, [r5, #8]
   1e208:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
				net_pkt_ipv6_ext_len(pkt) +
   1e20c:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
	frag = net_frag_read_u8(pkt->frags, net_pkt_ip_hdr_len(pkt) +
   1e210:	4419      	add	r1, r3
   1e212:	3104      	adds	r1, #4
   1e214:	9600      	str	r6, [sp, #0]
   1e216:	2301      	movs	r3, #1
   1e218:	f10d 020e 	add.w	r2, sp, #14
   1e21c:	b289      	uxth	r1, r1
   1e21e:	f7fe fe5e 	bl	1cede <net_frag_read>
	frag = net_frag_skip(frag, pos, &pos, 3); /* reserved */
   1e222:	f8bd 100e 	ldrh.w	r1, [sp, #14]
	return net_frag_read(frag, offset, pos, len, NULL);
   1e226:	2300      	movs	r3, #0
   1e228:	9300      	str	r3, [sp, #0]
   1e22a:	2303      	movs	r3, #3
   1e22c:	f10d 020e 	add.w	r2, sp, #14
   1e230:	f7fe fe55 	bl	1cede <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(struct in6_addr),
   1e234:	f8bd 100e 	ldrh.w	r1, [sp, #14]
			     (u8_t *)&hdr->tgt);
   1e238:	1d33      	adds	r3, r6, #4
	frag = net_frag_read(frag, pos, &pos, sizeof(struct in6_addr),
   1e23a:	9300      	str	r3, [sp, #0]
   1e23c:	2310      	movs	r3, #16
   1e23e:	f10d 020e 	add.w	r2, sp, #14
   1e242:	f7fe fe4c 	bl	1cede <net_frag_read>
	if (!frag) {
   1e246:	2800      	cmp	r0, #0
   1e248:	d0db      	beq.n	1e202 <net_icmpv6_get_na_hdr+0x1e>
	return hdr;
   1e24a:	4630      	mov	r0, r6
   1e24c:	e7d9      	b.n	1e202 <net_icmpv6_get_na_hdr+0x1e>

0001e24e <net_icmpv6_set_na_hdr>:
{
   1e24e:	b570      	push	{r4, r5, r6, lr}
   1e250:	b086      	sub	sp, #24
   1e252:	4605      	mov	r5, r0
   1e254:	460e      	mov	r6, r1
	const u8_t reserved[3] = { 0 };
   1e256:	2300      	movs	r3, #0
   1e258:	f8ad 3014 	strh.w	r3, [sp, #20]
   1e25c:	f88d 3016 	strb.w	r3, [sp, #22]
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr));
   1e260:	2104      	movs	r1, #4
   1e262:	f7fe ffac 	bl	1d1be <net_pkt_icmp_opt_data>
   1e266:	4604      	mov	r4, r0
	if (net_header_fits(pkt, opt_data, sizeof(*hdr))) {
   1e268:	2214      	movs	r2, #20
   1e26a:	4601      	mov	r1, r0
   1e26c:	4628      	mov	r0, r5
   1e26e:	f7ff fb7b 	bl	1d968 <net_header_fits>
   1e272:	b110      	cbz	r0, 1e27a <net_icmpv6_set_na_hdr+0x2c>
		return (struct net_icmpv6_na_hdr *)opt_data;
   1e274:	4620      	mov	r0, r4
}
   1e276:	b006      	add	sp, #24
   1e278:	bd70      	pop	{r4, r5, r6, pc}
			     net_pkt_ip_hdr_len(pkt) +
   1e27a:	f895 2033 	ldrb.w	r2, [r5, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt) +
   1e27e:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
			     net_pkt_ip_hdr_len(pkt) +
   1e282:	441a      	add	r2, r3
	frag = net_pkt_write(pkt, pkt->frags,
   1e284:	3204      	adds	r2, #4
   1e286:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   1e28a:	9402      	str	r4, [sp, #8]
   1e28c:	9601      	str	r6, [sp, #4]
   1e28e:	2301      	movs	r3, #1
   1e290:	9300      	str	r3, [sp, #0]
   1e292:	f10d 0312 	add.w	r3, sp, #18
   1e296:	b292      	uxth	r2, r2
   1e298:	68a9      	ldr	r1, [r5, #8]
   1e29a:	4628      	mov	r0, r5
   1e29c:	f7fe fe91 	bl	1cfc2 <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(reserved),
   1e2a0:	f8bd 2012 	ldrh.w	r2, [sp, #18]
   1e2a4:	9402      	str	r4, [sp, #8]
   1e2a6:	ab05      	add	r3, sp, #20
   1e2a8:	9301      	str	r3, [sp, #4]
   1e2aa:	2303      	movs	r3, #3
   1e2ac:	9300      	str	r3, [sp, #0]
   1e2ae:	f10d 0312 	add.w	r3, sp, #18
   1e2b2:	4601      	mov	r1, r0
   1e2b4:	4628      	mov	r0, r5
   1e2b6:	f7fe fe84 	bl	1cfc2 <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(struct in6_addr),
   1e2ba:	f8bd 2012 	ldrh.w	r2, [sp, #18]
			     (u8_t *)&hdr->tgt, PKT_WAIT_TIME);
   1e2be:	1d33      	adds	r3, r6, #4
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(struct in6_addr),
   1e2c0:	9402      	str	r4, [sp, #8]
   1e2c2:	9301      	str	r3, [sp, #4]
   1e2c4:	2310      	movs	r3, #16
   1e2c6:	9300      	str	r3, [sp, #0]
   1e2c8:	f10d 0312 	add.w	r3, sp, #18
   1e2cc:	4601      	mov	r1, r0
   1e2ce:	4628      	mov	r0, r5
   1e2d0:	f7fe fe77 	bl	1cfc2 <net_pkt_write>
	if (!frag) {
   1e2d4:	2800      	cmp	r0, #0
   1e2d6:	d0ce      	beq.n	1e276 <net_icmpv6_set_na_hdr+0x28>
	return hdr;
   1e2d8:	4630      	mov	r0, r6
   1e2da:	e7cc      	b.n	1e276 <net_icmpv6_set_na_hdr+0x28>

0001e2dc <net_icmpv6_get_ra_hdr>:
{
   1e2dc:	b570      	push	{r4, r5, r6, lr}
   1e2de:	b084      	sub	sp, #16
   1e2e0:	4606      	mov	r6, r0
   1e2e2:	460d      	mov	r5, r1
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr));
   1e2e4:	2104      	movs	r1, #4
   1e2e6:	f7fe ff6a 	bl	1d1be <net_pkt_icmp_opt_data>
   1e2ea:	4604      	mov	r4, r0
	if (net_header_fits(pkt, opt_data, sizeof(*hdr))) {
   1e2ec:	220c      	movs	r2, #12
   1e2ee:	4601      	mov	r1, r0
   1e2f0:	4630      	mov	r0, r6
   1e2f2:	f7ff fb39 	bl	1d968 <net_header_fits>
   1e2f6:	b110      	cbz	r0, 1e2fe <net_icmpv6_get_ra_hdr+0x22>
		return (struct net_icmpv6_ra_hdr *)opt_data;
   1e2f8:	4620      	mov	r0, r4
}
   1e2fa:	b004      	add	sp, #16
   1e2fc:	bd70      	pop	{r4, r5, r6, pc}
	frag = net_frag_read_u8(pkt->frags, net_pkt_ip_hdr_len(pkt) +
   1e2fe:	68b0      	ldr	r0, [r6, #8]
   1e300:	f896 1033 	ldrb.w	r1, [r6, #51]	; 0x33
				net_pkt_ipv6_ext_len(pkt) +
   1e304:	f896 303b 	ldrb.w	r3, [r6, #59]	; 0x3b
	frag = net_frag_read_u8(pkt->frags, net_pkt_ip_hdr_len(pkt) +
   1e308:	4419      	add	r1, r3
   1e30a:	3104      	adds	r1, #4
	return net_frag_read(frag, offset, pos, 1, value);
   1e30c:	9500      	str	r5, [sp, #0]
   1e30e:	2301      	movs	r3, #1
   1e310:	f10d 020e 	add.w	r2, sp, #14
   1e314:	b289      	uxth	r1, r1
   1e316:	f7fe fde2 	bl	1cede <net_frag_read>
	frag = net_frag_read_u8(frag, pos, &pos, &hdr->flags);
   1e31a:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1e31e:	1c6b      	adds	r3, r5, #1
   1e320:	9300      	str	r3, [sp, #0]
   1e322:	2301      	movs	r3, #1
   1e324:	f10d 020e 	add.w	r2, sp, #14
   1e328:	f7fe fdd9 	bl	1cede <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->router_lifetime),
   1e32c:	f8bd 100e 	ldrh.w	r1, [sp, #14]
			     (u8_t *)&hdr->router_lifetime);
   1e330:	1cab      	adds	r3, r5, #2
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->router_lifetime),
   1e332:	9300      	str	r3, [sp, #0]
   1e334:	2302      	movs	r3, #2
   1e336:	f10d 020e 	add.w	r2, sp, #14
   1e33a:	f7fe fdd0 	bl	1cede <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->reachable_time),
   1e33e:	f8bd 100e 	ldrh.w	r1, [sp, #14]
			     (u8_t *)&hdr->reachable_time);
   1e342:	1d2b      	adds	r3, r5, #4
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->reachable_time),
   1e344:	9300      	str	r3, [sp, #0]
   1e346:	2304      	movs	r3, #4
   1e348:	f10d 020e 	add.w	r2, sp, #14
   1e34c:	f7fe fdc7 	bl	1cede <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->retrans_timer),
   1e350:	f8bd 100e 	ldrh.w	r1, [sp, #14]
			     (u8_t *)&hdr->retrans_timer);
   1e354:	f105 0308 	add.w	r3, r5, #8
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->retrans_timer),
   1e358:	9300      	str	r3, [sp, #0]
   1e35a:	2304      	movs	r3, #4
   1e35c:	f10d 020e 	add.w	r2, sp, #14
   1e360:	f7fe fdbd 	bl	1cede <net_frag_read>
	if (!frag) {
   1e364:	2800      	cmp	r0, #0
   1e366:	d0c8      	beq.n	1e2fa <net_icmpv6_get_ra_hdr+0x1e>
	return hdr;
   1e368:	4628      	mov	r0, r5
   1e36a:	e7c6      	b.n	1e2fa <net_icmpv6_get_ra_hdr+0x1e>

0001e36c <net_icmpv6_send_error>:

int net_icmpv6_send_error(struct net_pkt *orig, u8_t type, u8_t code,
			  u32_t param)
{
   1e36c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e370:	b09f      	sub	sp, #124	; 0x7c
   1e372:	4605      	mov	r5, r0
   1e374:	4688      	mov	r8, r1
   1e376:	4692      	mov	sl, r2
   1e378:	4699      	mov	r9, r3
	return pkt->frags->data;
   1e37a:	6883      	ldr	r3, [r0, #8]
   1e37c:	689b      	ldr	r3, [r3, #8]
	struct net_buf *frag;
	struct net_if *iface;
	size_t extra_len, reserve;
	int err = -EIO;

	if (NET_IPV6_HDR(orig)->nexthdr == IPPROTO_ICMPV6) {
   1e37e:	799b      	ldrb	r3, [r3, #6]
   1e380:	2b3a      	cmp	r3, #58	; 0x3a
   1e382:	d01d      	beq.n	1e3c0 <net_icmpv6_send_error+0x54>
	return pkt->iface;
   1e384:	696f      	ldr	r7, [r5, #20]
		}
	}

	iface = net_pkt_iface(orig);

	pkt = net_pkt_get_reserve_tx(0, PKT_WAIT_TIME);
   1e386:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   1e38a:	2000      	movs	r0, #0
   1e38c:	f7fe fbb8 	bl	1cb00 <net_pkt_get_reserve_tx>
	if (!pkt) {
   1e390:	4604      	mov	r4, r0
   1e392:	2800      	cmp	r0, #0
   1e394:	f000 8141 	beq.w	1e61a <net_icmpv6_send_error+0x2ae>
	return pkt->frags->data;
   1e398:	68ab      	ldr	r3, [r5, #8]
   1e39a:	6899      	ldr	r1, [r3, #8]
	 * to store the param variable.
	 */
	reserve = sizeof(struct net_ipv6_hdr) + sizeof(struct net_icmp_hdr) +
		NET_ICMPV6_UNUSED_LEN;

	if (NET_IPV6_HDR(orig)->nexthdr == IPPROTO_UDP) {
   1e39c:	798b      	ldrb	r3, [r1, #6]
   1e39e:	2b11      	cmp	r3, #17
   1e3a0:	d019      	beq.n	1e3d6 <net_icmpv6_send_error+0x6a>
		extra_len = sizeof(struct net_ipv6_hdr) +
			sizeof(struct net_udp_hdr);
	} else if (NET_IPV6_HDR(orig)->nexthdr == IPPROTO_TCP) {
   1e3a2:	2b06      	cmp	r3, #6
   1e3a4:	d019      	beq.n	1e3da <net_icmpv6_send_error+0x6e>
	return iface->l2->reserve(iface, (void *)dst_ip6);
   1e3a6:	687b      	ldr	r3, [r7, #4]
   1e3a8:	689b      	ldr	r3, [r3, #8]
   1e3aa:	3118      	adds	r1, #24
   1e3ac:	4638      	mov	r0, r7
   1e3ae:	4798      	blx	r3
		extra_len = sizeof(struct net_ipv6_hdr) +
			sizeof(struct net_tcp_hdr);
	} else {
		size_t space = CONFIG_NET_BUF_DATA_SIZE -
   1e3b0:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
			net_if_get_ll_reserve(iface,
					      &NET_IPV6_HDR(orig)->dst);

		if (reserve > space) {
   1e3b4:	282f      	cmp	r0, #47	; 0x2f
   1e3b6:	f240 80de 	bls.w	1e576 <net_icmpv6_send_error+0x20a>
			extra_len = 0;
		} else {
			extra_len = space - reserve;
   1e3ba:	f1a0 0630 	sub.w	r6, r0, #48	; 0x30
   1e3be:	e00d      	b.n	1e3dc <net_icmpv6_send_error+0x70>
		if (!net_icmpv6_get_hdr(orig, icmp_hdr) ||
   1e3c0:	a906      	add	r1, sp, #24
   1e3c2:	f7ff fd12 	bl	1ddea <net_icmpv6_get_hdr>
   1e3c6:	b118      	cbz	r0, 1e3d0 <net_icmpv6_send_error+0x64>
		    icmp_hdr->code < 128) {
   1e3c8:	f99d 3019 	ldrsb.w	r3, [sp, #25]
		if (!net_icmpv6_get_hdr(orig, icmp_hdr) ||
   1e3cc:	2b00      	cmp	r3, #0
   1e3ce:	dbd9      	blt.n	1e384 <net_icmpv6_send_error+0x18>
			err = -EINVAL;
   1e3d0:	f06f 0515 	mvn.w	r5, #21
   1e3d4:	e119      	b.n	1e60a <net_icmpv6_send_error+0x29e>
		extra_len = sizeof(struct net_ipv6_hdr) +
   1e3d6:	2630      	movs	r6, #48	; 0x30
   1e3d8:	e000      	b.n	1e3dc <net_icmpv6_send_error+0x70>
		extra_len = sizeof(struct net_ipv6_hdr) +
   1e3da:	263c      	movs	r6, #60	; 0x3c
	}

	/* We only copy minimal IPv6 + next header from original message.
	 * This is so that the memory pressure is minimized.
	 */
	frag = net_pkt_copy(orig, extra_len, reserve, PKT_WAIT_TIME);
   1e3dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1e3e0:	2230      	movs	r2, #48	; 0x30
   1e3e2:	4631      	mov	r1, r6
   1e3e4:	4628      	mov	r0, r5
   1e3e6:	f7fe fc3d 	bl	1cc64 <net_pkt_copy>
	if (!frag) {
   1e3ea:	4683      	mov	fp, r0
   1e3ec:	2800      	cmp	r0, #0
   1e3ee:	f000 8104 	beq.w	1e5fa <net_icmpv6_send_error+0x28e>
		err = -ENOMEM;
		goto drop;
	}

	net_pkt_frag_add(pkt, frag);
   1e3f2:	4601      	mov	r1, r0
   1e3f4:	4620      	mov	r0, r4
   1e3f6:	f7fe fc1e 	bl	1cc36 <net_pkt_frag_add>
	pkt->family = family;
   1e3fa:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   1e3fe:	220a      	movs	r2, #10
   1e400:	f362 03c6 	bfi	r3, r2, #3, #4
   1e404:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	pkt->iface = iface;
   1e408:	6167      	str	r7, [r4, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   1e40a:	7d7b      	ldrb	r3, [r7, #21]
   1e40c:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   1e410:	7d7b      	ldrb	r3, [r7, #21]
   1e412:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	net_pkt_set_family(pkt, AF_INET6);
	net_pkt_set_iface(pkt, iface);
	net_pkt_set_ll_reserve(pkt, net_buf_headroom(frag));
   1e416:	f10b 0008 	add.w	r0, fp, #8
   1e41a:	f7fb ff24 	bl	1a266 <net_buf_simple_headroom>
	pkt->ll_reserve = len;
   1e41e:	f884 0032 	strb.w	r0, [r4, #50]	; 0x32
	pkt->ipv6_ext_len = len;
   1e422:	2000      	movs	r0, #0
   1e424:	f884 003b 	strb.w	r0, [r4, #59]	; 0x3b
	net_pkt_set_ipv6_ext_len(pkt, 0);

	setup_ipv6_header(pkt, extra_len, net_if_ipv6_get_hop_limit(iface),
   1e428:	b2b6      	uxth	r6, r6
	return iface->ipv6.hop_limit;
   1e42a:	f897 3294 	ldrb.w	r3, [r7, #660]	; 0x294
   1e42e:	f88d 8014 	strb.w	r8, [sp, #20]
   1e432:	f88d a015 	strb.w	sl, [sp, #21]
	struct net_buf *frag = pkt->frags;
   1e436:	68a1      	ldr	r1, [r4, #8]
	const u32_t unused = 0;
   1e438:	9006      	str	r0, [sp, #24]
	return pkt->frags->data;
   1e43a:	688a      	ldr	r2, [r1, #8]
	NET_IPV6_HDR(pkt)->vtc = 0x60;
   1e43c:	f04f 0e60 	mov.w	lr, #96	; 0x60
   1e440:	f882 e000 	strb.w	lr, [r2]
   1e444:	68a2      	ldr	r2, [r4, #8]
   1e446:	6892      	ldr	r2, [r2, #8]
	NET_IPV6_HDR(pkt)->tcflow = 0;
   1e448:	7050      	strb	r0, [r2, #1]
   1e44a:	68a2      	ldr	r2, [r4, #8]
   1e44c:	6892      	ldr	r2, [r2, #8]
	NET_IPV6_HDR(pkt)->flow = 0;
   1e44e:	7090      	strb	r0, [r2, #2]
   1e450:	70d0      	strb	r0, [r2, #3]
	sys_put_be16(NET_ICMPH_LEN + extra_len + NET_ICMPV6_UNUSED_LEN,
   1e452:	3608      	adds	r6, #8
   1e454:	b2b6      	uxth	r6, r6
   1e456:	68a2      	ldr	r2, [r4, #8]
   1e458:	6892      	ldr	r2, [r2, #8]
	dst[0] = val >> 8;
   1e45a:	0a30      	lsrs	r0, r6, #8
   1e45c:	7110      	strb	r0, [r2, #4]
	dst[1] = val;
   1e45e:	7156      	strb	r6, [r2, #5]
   1e460:	68a2      	ldr	r2, [r4, #8]
   1e462:	6892      	ldr	r2, [r2, #8]
	NET_IPV6_HDR(pkt)->nexthdr = IPPROTO_ICMPV6;
   1e464:	203a      	movs	r0, #58	; 0x3a
   1e466:	7190      	strb	r0, [r2, #6]
   1e468:	68a2      	ldr	r2, [r4, #8]
   1e46a:	6892      	ldr	r2, [r2, #8]
	NET_IPV6_HDR(pkt)->hop_limit = hop_limit;
   1e46c:	71d3      	strb	r3, [r2, #7]
	pkt->ip_hdr_len = len;
   1e46e:	2228      	movs	r2, #40	; 0x28
   1e470:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
	frag = net_pkt_write(pkt, frag, net_pkt_ip_hdr_len(pkt), &pos,
   1e474:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
   1e478:	9602      	str	r6, [sp, #8]
   1e47a:	ab05      	add	r3, sp, #20
   1e47c:	9301      	str	r3, [sp, #4]
   1e47e:	f04f 0a01 	mov.w	sl, #1
   1e482:	f8cd a000 	str.w	sl, [sp]
   1e486:	f10d 0316 	add.w	r3, sp, #22
   1e48a:	4620      	mov	r0, r4
   1e48c:	f7fe fd99 	bl	1cfc2 <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(icmp_code),
   1e490:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   1e494:	9602      	str	r6, [sp, #8]
   1e496:	f10d 0315 	add.w	r3, sp, #21
   1e49a:	9301      	str	r3, [sp, #4]
   1e49c:	f8cd a000 	str.w	sl, [sp]
   1e4a0:	f10d 0316 	add.w	r3, sp, #22
   1e4a4:	4601      	mov	r1, r0
   1e4a6:	4620      	mov	r0, r4
   1e4a8:	f7fe fd8b 	bl	1cfc2 <net_pkt_write>
	net_pkt_write(pkt, frag, pos, &pos, 4, (u8_t *)&unused, PKT_WAIT_TIME);
   1e4ac:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   1e4b0:	9602      	str	r6, [sp, #8]
   1e4b2:	ab06      	add	r3, sp, #24
   1e4b4:	9301      	str	r3, [sp, #4]
   1e4b6:	2304      	movs	r3, #4
   1e4b8:	9300      	str	r3, [sp, #0]
   1e4ba:	f10d 0316 	add.w	r3, sp, #22
   1e4be:	4601      	mov	r1, r0
   1e4c0:	4620      	mov	r0, r4
   1e4c2:	f7fe fd7e 	bl	1cfc2 <net_pkt_write>
			  type, code);

	/* Depending on error option, we store the param into the ICMP message.
	 */
	if (type == NET_ICMPV6_PARAM_PROBLEM) {
   1e4c6:	f1b8 0f04 	cmp.w	r8, #4
   1e4ca:	d056      	beq.n	1e57a <net_icmpv6_send_error+0x20e>
	return pkt->frags->data;
   1e4cc:	68ab      	ldr	r3, [r5, #8]
   1e4ce:	689e      	ldr	r6, [r3, #8]
   1e4d0:	7e33      	ldrb	r3, [r6, #24]
		sys_put_be32(param, (u8_t *)net_pkt_icmp_data(pkt) +
			     sizeof(struct net_icmp_hdr));
	}

	if (net_is_ipv6_addr_mcast(&NET_IPV6_HDR(orig)->dst)) {
   1e4d2:	2bff      	cmp	r3, #255	; 0xff
   1e4d4:	d05f      	beq.n	1e596 <net_icmpv6_send_error+0x22a>
				net_if_ipv6_select_src_addr(iface,
						    &NET_IPV6_HDR(orig)->dst));
	} else {
		struct in6_addr addr;

		net_ipaddr_copy(&addr, &NET_IPV6_HDR(orig)->src);
   1e4d6:	af12      	add	r7, sp, #72	; 0x48
   1e4d8:	4633      	mov	r3, r6
   1e4da:	f853 0f08 	ldr.w	r0, [r3, #8]!
   1e4de:	6859      	ldr	r1, [r3, #4]
   1e4e0:	689a      	ldr	r2, [r3, #8]
   1e4e2:	68db      	ldr	r3, [r3, #12]
   1e4e4:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   1e4e6:	af06      	add	r7, sp, #24
   1e4e8:	ab12      	add	r3, sp, #72	; 0x48
   1e4ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1e4ec:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
   1e4f0:	68a3      	ldr	r3, [r4, #8]
   1e4f2:	f8d3 c008 	ldr.w	ip, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   1e4f6:	f10d 0e58 	add.w	lr, sp, #88	; 0x58
   1e4fa:	4633      	mov	r3, r6
   1e4fc:	f853 0f18 	ldr.w	r0, [r3, #24]!
   1e500:	6859      	ldr	r1, [r3, #4]
   1e502:	689a      	ldr	r2, [r3, #8]
   1e504:	68db      	ldr	r3, [r3, #12]
   1e506:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   1e50a:	ae16      	add	r6, sp, #88	; 0x58
   1e50c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1e50e:	f8cc 0008 	str.w	r0, [ip, #8]
   1e512:	f8cc 100c 	str.w	r1, [ip, #12]
   1e516:	f8cc 2010 	str.w	r2, [ip, #16]
   1e51a:	f8cc 3014 	str.w	r3, [ip, #20]
   1e51e:	68a3      	ldr	r3, [r4, #8]
   1e520:	f8d3 e008 	ldr.w	lr, [r3, #8]
				&NET_IPV6_HDR(orig)->dst);
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst, &addr);
   1e524:	ae1a      	add	r6, sp, #104	; 0x68
   1e526:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
   1e52a:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
   1e52e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1e530:	f8ce 0018 	str.w	r0, [lr, #24]
   1e534:	f8ce 101c 	str.w	r1, [lr, #28]
   1e538:	f8ce 2020 	str.w	r2, [lr, #32]
   1e53c:	f8ce 3024 	str.w	r3, [lr, #36]	; 0x24
	}

	net_pkt_ll_src(pkt)->addr = net_pkt_ll_dst(orig)->addr;
   1e540:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1e542:	6223      	str	r3, [r4, #32]
	net_pkt_ll_src(pkt)->len = net_pkt_ll_dst(orig)->len;
   1e544:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
   1e548:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	net_pkt_ll_dst(pkt)->addr = net_pkt_ll_src(orig)->addr;
   1e54c:	6a2b      	ldr	r3, [r5, #32]
   1e54e:	62a3      	str	r3, [r4, #40]	; 0x28
	net_pkt_ll_dst(pkt)->len = net_pkt_ll_src(orig)->len;
   1e550:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
   1e554:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c

	/* Clear and then set the chksum */
	frag = net_icmpv6_set_chksum(pkt, pkt->frags);
   1e558:	68a1      	ldr	r1, [r4, #8]
   1e55a:	4620      	mov	r0, r4
   1e55c:	f7ff fbf8 	bl	1dd50 <net_icmpv6_set_chksum>
			" from %s to %s", type, code, param,
			net_sprint_ipv6_addr(&NET_IPV6_HDR(pkt)->src), out);
	} while (0);
#endif /* CONFIG_NET_DEBUG_ICMPV6 */

	if (net_send_data(pkt) >= 0) {
   1e560:	4620      	mov	r0, r4
   1e562:	f7fb ff3d 	bl	1a3e0 <net_send_data>
   1e566:	2800      	cmp	r0, #0
   1e568:	db4a      	blt.n	1e600 <net_icmpv6_send_error+0x294>
   1e56a:	4a2d      	ldr	r2, [pc, #180]	; (1e620 <net_icmpv6_send_error+0x2b4>)
   1e56c:	6b93      	ldr	r3, [r2, #56]	; 0x38
   1e56e:	3301      	adds	r3, #1
   1e570:	6393      	str	r3, [r2, #56]	; 0x38
		net_stats_update_icmp_sent();
		return 0;
   1e572:	2500      	movs	r5, #0
   1e574:	e04d      	b.n	1e612 <net_icmpv6_send_error+0x2a6>
			extra_len = 0;
   1e576:	2600      	movs	r6, #0
   1e578:	e730      	b.n	1e3dc <net_icmpv6_send_error+0x70>
		sys_put_be32(param, (u8_t *)net_pkt_icmp_data(pkt) +
   1e57a:	4620      	mov	r0, r4
   1e57c:	f7fe fe0a 	bl	1d194 <net_pkt_icmp_data>
	sys_put_be16(val >> 16, dst);
   1e580:	ea4f 4319 	mov.w	r3, r9, lsr #16
	dst[0] = val >> 8;
   1e584:	0a1a      	lsrs	r2, r3, #8
   1e586:	7102      	strb	r2, [r0, #4]
	dst[1] = val;
   1e588:	7143      	strb	r3, [r0, #5]
	dst[0] = val >> 8;
   1e58a:	f3c9 2307 	ubfx	r3, r9, #8, #8
   1e58e:	7183      	strb	r3, [r0, #6]
	dst[1] = val;
   1e590:	f880 9007 	strb.w	r9, [r0, #7]
   1e594:	e79a      	b.n	1e4cc <net_icmpv6_send_error+0x160>
   1e596:	68a3      	ldr	r3, [r4, #8]
   1e598:	f8d3 c008 	ldr.w	ip, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst,
   1e59c:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
   1e5a0:	4633      	mov	r3, r6
   1e5a2:	f853 0f08 	ldr.w	r0, [r3, #8]!
   1e5a6:	6859      	ldr	r1, [r3, #4]
   1e5a8:	689a      	ldr	r2, [r3, #8]
   1e5aa:	68db      	ldr	r3, [r3, #12]
   1e5ac:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   1e5b0:	ae0a      	add	r6, sp, #40	; 0x28
   1e5b2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1e5b4:	f8cc 0018 	str.w	r0, [ip, #24]
   1e5b8:	f8cc 101c 	str.w	r1, [ip, #28]
   1e5bc:	f8cc 2020 	str.w	r2, [ip, #32]
   1e5c0:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
   1e5c4:	68a3      	ldr	r3, [r4, #8]
   1e5c6:	f8d3 8008 	ldr.w	r8, [r3, #8]
   1e5ca:	68ab      	ldr	r3, [r5, #8]
   1e5cc:	6899      	ldr	r1, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   1e5ce:	3118      	adds	r1, #24
   1e5d0:	4638      	mov	r0, r7
   1e5d2:	f7fc fe6b 	bl	1b2ac <net_if_ipv6_select_src_addr>
   1e5d6:	4603      	mov	r3, r0
   1e5d8:	ae0e      	add	r6, sp, #56	; 0x38
   1e5da:	6800      	ldr	r0, [r0, #0]
   1e5dc:	6859      	ldr	r1, [r3, #4]
   1e5de:	689a      	ldr	r2, [r3, #8]
   1e5e0:	68db      	ldr	r3, [r3, #12]
   1e5e2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   1e5e4:	ae0e      	add	r6, sp, #56	; 0x38
   1e5e6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1e5e8:	f8c8 0008 	str.w	r0, [r8, #8]
   1e5ec:	f8c8 100c 	str.w	r1, [r8, #12]
   1e5f0:	f8c8 2010 	str.w	r2, [r8, #16]
   1e5f4:	f8c8 3014 	str.w	r3, [r8, #20]
   1e5f8:	e7a2      	b.n	1e540 <net_icmpv6_send_error+0x1d4>
		err = -ENOMEM;
   1e5fa:	f06f 050b 	mvn.w	r5, #11
   1e5fe:	e001      	b.n	1e604 <net_icmpv6_send_error+0x298>
	int err = -EIO;
   1e600:	f06f 0504 	mvn.w	r5, #4
	}

drop:
	net_pkt_unref(pkt);
   1e604:	4620      	mov	r0, r4
   1e606:	f7fe faec 	bl	1cbe2 <net_pkt_unref>
	net_stats.icmp.drop++;
   1e60a:	4a05      	ldr	r2, [pc, #20]	; (1e620 <net_icmpv6_send_error+0x2b4>)
   1e60c:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
   1e60e:	3301      	adds	r3, #1
   1e610:	63d3      	str	r3, [r2, #60]	; 0x3c

drop_no_pkt:
	net_stats_update_icmp_drop();

	return err;
}
   1e612:	4628      	mov	r0, r5
   1e614:	b01f      	add	sp, #124	; 0x7c
   1e616:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		err = -ENOMEM;
   1e61a:	f06f 050b 	mvn.w	r5, #11
   1e61e:	e7f4      	b.n	1e60a <net_icmpv6_send_error+0x29e>
   1e620:	200029e8 	.word	0x200029e8

0001e624 <net_icmpv6_send_echo_request>:

int net_icmpv6_send_echo_request(struct net_if *iface,
				 struct in6_addr *dst,
				 u16_t identifier,
				 u16_t sequence)
{
   1e624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e628:	b08d      	sub	sp, #52	; 0x34
   1e62a:	4605      	mov	r5, r0
   1e62c:	460e      	mov	r6, r1
   1e62e:	4692      	mov	sl, r2
   1e630:	4699      	mov	r9, r3
	const struct in6_addr *src;
	struct net_pkt *pkt;

	src = net_if_ipv6_select_src_addr(iface, dst);
   1e632:	f7fc fe3b 	bl	1b2ac <net_if_ipv6_select_src_addr>
   1e636:	4680      	mov	r8, r0
	return iface->l2->reserve(iface, (void *)dst_ip6);
   1e638:	686b      	ldr	r3, [r5, #4]
   1e63a:	689b      	ldr	r3, [r3, #8]
   1e63c:	4631      	mov	r1, r6
   1e63e:	4628      	mov	r0, r5
   1e640:	4798      	blx	r3

	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, dst),
   1e642:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1e646:	f7fe fa5b 	bl	1cb00 <net_pkt_get_reserve_tx>
				     K_FOREVER);

	pkt = net_ipv6_create_raw(pkt, src, dst, iface, IPPROTO_ICMPV6);
   1e64a:	273a      	movs	r7, #58	; 0x3a
   1e64c:	9700      	str	r7, [sp, #0]
   1e64e:	462b      	mov	r3, r5
   1e650:	4632      	mov	r2, r6
   1e652:	4641      	mov	r1, r8
   1e654:	f000 fcc1 	bl	1efda <net_ipv6_create_raw>
   1e658:	4604      	mov	r4, r0
	pkt->family = family;
   1e65a:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   1e65e:	220a      	movs	r2, #10
   1e660:	f362 03c6 	bfi	r3, r2, #3, #4
   1e664:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
	pkt->iface = iface;
   1e668:	6145      	str	r5, [r0, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   1e66a:	7d6b      	ldrb	r3, [r5, #21]
   1e66c:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   1e670:	7d6b      	ldrb	r3, [r5, #21]
   1e672:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
   1e676:	aa0c      	add	r2, sp, #48	; 0x30
   1e678:	2380      	movs	r3, #128	; 0x80
   1e67a:	f802 3d23 	strb.w	r3, [r2, #-35]!
	return net_pkt_append(pkt, len, data, timeout) == len;
   1e67e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1e682:	2101      	movs	r1, #1
   1e684:	f7fe fbe5 	bl	1ce52 <net_pkt_append>
   1e688:	f04f 0b00 	mov.w	fp, #0
   1e68c:	aa0c      	add	r2, sp, #48	; 0x30
   1e68e:	f802 bd24 	strb.w	fp, [r2, #-36]!
   1e692:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1e696:	2101      	movs	r1, #1
   1e698:	4620      	mov	r0, r4
   1e69a:	f7fe fbda 	bl	1ce52 <net_pkt_append>
	u16_t value = sys_cpu_to_be16(data);
   1e69e:	ad0c      	add	r5, sp, #48	; 0x30
   1e6a0:	f825 bd22 	strh.w	fp, [r5, #-34]!
	return net_pkt_append(pkt, len, data, timeout) == len;
   1e6a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1e6a8:	462a      	mov	r2, r5
   1e6aa:	2102      	movs	r1, #2
   1e6ac:	4620      	mov	r0, r4
   1e6ae:	f7fe fbd0 	bl	1ce52 <net_pkt_append>
	u16_t value = sys_cpu_to_be16(data);
   1e6b2:	ea4f 221a 	mov.w	r2, sl, lsr #8
   1e6b6:	ea42 220a 	orr.w	r2, r2, sl, lsl #8
   1e6ba:	f8ad 200e 	strh.w	r2, [sp, #14]
	return net_pkt_append(pkt, len, data, timeout) == len;
   1e6be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1e6c2:	462a      	mov	r2, r5
   1e6c4:	2102      	movs	r1, #2
   1e6c6:	4620      	mov	r0, r4
   1e6c8:	f7fe fbc3 	bl	1ce52 <net_pkt_append>
	u16_t value = sys_cpu_to_be16(data);
   1e6cc:	ea4f 2319 	mov.w	r3, r9, lsr #8
   1e6d0:	ea43 2309 	orr.w	r3, r3, r9, lsl #8
   1e6d4:	f8ad 300e 	strh.w	r3, [sp, #14]
	return net_pkt_append(pkt, len, data, timeout) == len;
   1e6d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1e6dc:	462a      	mov	r2, r5
   1e6de:	2102      	movs	r1, #2
   1e6e0:	4620      	mov	r0, r4
   1e6e2:	f7fe fbb6 	bl	1ce52 <net_pkt_append>
	return pkt->frags->data;
   1e6e6:	68a3      	ldr	r3, [r4, #8]
   1e6e8:	f8d3 c008 	ldr.w	ip, [r3, #8]
	net_pkt_append_u8(pkt, 0);   /* code */
	net_pkt_append_be16(pkt, 0); /* checksum */
	net_pkt_append_be16(pkt, identifier);
	net_pkt_append_be16(pkt, sequence);

	net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src, src);
   1e6ec:	ad04      	add	r5, sp, #16
   1e6ee:	f8d8 0000 	ldr.w	r0, [r8]
   1e6f2:	f8d8 1004 	ldr.w	r1, [r8, #4]
   1e6f6:	f8d8 2008 	ldr.w	r2, [r8, #8]
   1e6fa:	f8d8 300c 	ldr.w	r3, [r8, #12]
   1e6fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1e700:	ad04      	add	r5, sp, #16
   1e702:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1e704:	f8cc 0008 	str.w	r0, [ip, #8]
   1e708:	f8cc 100c 	str.w	r1, [ip, #12]
   1e70c:	f8cc 2010 	str.w	r2, [ip, #16]
   1e710:	f8cc 3014 	str.w	r3, [ip, #20]
   1e714:	68a3      	ldr	r3, [r4, #8]
   1e716:	f8d3 e008 	ldr.w	lr, [r3, #8]
	net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst, dst);
   1e71a:	ad08      	add	r5, sp, #32
   1e71c:	6830      	ldr	r0, [r6, #0]
   1e71e:	6871      	ldr	r1, [r6, #4]
   1e720:	68b2      	ldr	r2, [r6, #8]
   1e722:	68f3      	ldr	r3, [r6, #12]
   1e724:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1e726:	ad08      	add	r5, sp, #32
   1e728:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1e72a:	f8ce 0018 	str.w	r0, [lr, #24]
   1e72e:	f8ce 101c 	str.w	r1, [lr, #28]
   1e732:	f8ce 2020 	str.w	r2, [lr, #32]
   1e736:	f8ce 3024 	str.w	r3, [lr, #36]	; 0x24

	/* Clear and then set the chksum */
	net_icmpv6_set_chksum(pkt, pkt->frags);
   1e73a:	68a1      	ldr	r1, [r4, #8]
   1e73c:	4620      	mov	r0, r4
   1e73e:	f7ff fb07 	bl	1dd50 <net_icmpv6_set_chksum>

	if (net_ipv6_finalize_raw(pkt, IPPROTO_ICMPV6) < 0) {
   1e742:	4639      	mov	r1, r7
   1e744:	4620      	mov	r0, r4
   1e746:	f000 fce6 	bl	1f116 <net_ipv6_finalize_raw>
   1e74a:	4558      	cmp	r0, fp
   1e74c:	db0c      	blt.n	1e768 <net_icmpv6_send_echo_request+0x144>
			" from %s to %s", NET_ICMPV6_ECHO_REQUEST,
			net_sprint_ipv6_addr(&NET_IPV6_HDR(pkt)->src), out);
	} while (0);
#endif /* CONFIG_NET_DEBUG_ICMPV6 */

	if (net_send_data(pkt) >= 0) {
   1e74e:	4620      	mov	r0, r4
   1e750:	f7fb fe46 	bl	1a3e0 <net_send_data>
   1e754:	4558      	cmp	r0, fp
   1e756:	db07      	blt.n	1e768 <net_icmpv6_send_echo_request+0x144>
	net_stats.icmp.sent++;
   1e758:	4a08      	ldr	r2, [pc, #32]	; (1e77c <net_icmpv6_send_echo_request+0x158>)
   1e75a:	6b93      	ldr	r3, [r2, #56]	; 0x38
   1e75c:	3301      	adds	r3, #1
   1e75e:	6393      	str	r3, [r2, #56]	; 0x38
		net_stats_update_icmp_sent();
		return 0;
   1e760:	4658      	mov	r0, fp
drop:
	net_pkt_unref(pkt);
	net_stats_update_icmp_drop();

	return -EIO;
}
   1e762:	b00d      	add	sp, #52	; 0x34
   1e764:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	net_pkt_unref(pkt);
   1e768:	4620      	mov	r0, r4
   1e76a:	f7fe fa3a 	bl	1cbe2 <net_pkt_unref>
	net_stats.icmp.drop++;
   1e76e:	4a03      	ldr	r2, [pc, #12]	; (1e77c <net_icmpv6_send_echo_request+0x158>)
   1e770:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
   1e772:	3301      	adds	r3, #1
   1e774:	63d3      	str	r3, [r2, #60]	; 0x3c
	return -EIO;
   1e776:	f06f 0004 	mvn.w	r0, #4
   1e77a:	e7f2      	b.n	1e762 <net_icmpv6_send_echo_request+0x13e>
   1e77c:	200029e8 	.word	0x200029e8

0001e780 <net_icmpv6_input>:

enum net_verdict net_icmpv6_input(struct net_pkt *pkt,
				  u8_t type, u8_t code)
{
   1e780:	b538      	push	{r3, r4, r5, lr}
	net_stats.icmp.recv++;
   1e782:	4c12      	ldr	r4, [pc, #72]	; (1e7cc <net_icmpv6_input+0x4c>)
   1e784:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1e786:	3301      	adds	r3, #1
   1e788:	6363      	str	r3, [r4, #52]	; 0x34
	return list->head;
   1e78a:	4b11      	ldr	r3, [pc, #68]	; (1e7d0 <net_icmpv6_input+0x50>)
   1e78c:	681b      	ldr	r3, [r3, #0]
   1e78e:	e005      	b.n	1e79c <net_icmpv6_input+0x1c>
	struct net_icmpv6_handler *cb;

	net_stats_update_icmp_recv();

	SYS_SLIST_FOR_EACH_CONTAINER(&handlers, cb, node) {
   1e790:	461d      	mov	r5, r3
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   1e792:	b17b      	cbz	r3, 1e7b4 <net_icmpv6_input+0x34>
	return node->next;
   1e794:	681c      	ldr	r4, [r3, #0]
   1e796:	b18c      	cbz	r4, 1e7bc <net_icmpv6_input+0x3c>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   1e798:	b175      	cbz	r5, 1e7b8 <net_icmpv6_input+0x38>
	return node->next;
   1e79a:	681b      	ldr	r3, [r3, #0]
   1e79c:	b183      	cbz	r3, 1e7c0 <net_icmpv6_input+0x40>
		if (cb->type == type && (cb->code == code || cb->code == 0)) {
   1e79e:	791c      	ldrb	r4, [r3, #4]
   1e7a0:	428c      	cmp	r4, r1
   1e7a2:	d1f5      	bne.n	1e790 <net_icmpv6_input+0x10>
   1e7a4:	795c      	ldrb	r4, [r3, #5]
   1e7a6:	4294      	cmp	r4, r2
   1e7a8:	d001      	beq.n	1e7ae <net_icmpv6_input+0x2e>
   1e7aa:	2c00      	cmp	r4, #0
   1e7ac:	d1f0      	bne.n	1e790 <net_icmpv6_input+0x10>
			return cb->handler(pkt);
   1e7ae:	689b      	ldr	r3, [r3, #8]
   1e7b0:	4798      	blx	r3
   1e7b2:	bd38      	pop	{r3, r4, r5, pc}
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   1e7b4:	461c      	mov	r4, r3
   1e7b6:	e7ee      	b.n	1e796 <net_icmpv6_input+0x16>
   1e7b8:	2300      	movs	r3, #0
   1e7ba:	e7ef      	b.n	1e79c <net_icmpv6_input+0x1c>
	SYS_SLIST_FOR_EACH_CONTAINER(&handlers, cb, node) {
   1e7bc:	2300      	movs	r3, #0
   1e7be:	e7ed      	b.n	1e79c <net_icmpv6_input+0x1c>
	net_stats.icmp.drop++;
   1e7c0:	4a02      	ldr	r2, [pc, #8]	; (1e7cc <net_icmpv6_input+0x4c>)
   1e7c2:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
   1e7c4:	3301      	adds	r3, #1
   1e7c6:	63d3      	str	r3, [r2, #60]	; 0x3c
		}
	}

	net_stats_update_icmp_drop();

	return NET_DROP;
   1e7c8:	2002      	movs	r0, #2
}
   1e7ca:	bd38      	pop	{r3, r4, r5, pc}
   1e7cc:	200029e8 	.word	0x200029e8
   1e7d0:	20001e14 	.word	0x20001e14

0001e7d4 <net_icmpv6_init>:
	.code = 0,
	.handler = handle_echo_request,
};

void net_icmpv6_init(void)
{
   1e7d4:	b508      	push	{r3, lr}
	net_icmpv6_register_handler(&echo_request_handler);
   1e7d6:	4802      	ldr	r0, [pc, #8]	; (1e7e0 <net_icmpv6_init+0xc>)
   1e7d8:	f7ff fa8a 	bl	1dcf0 <net_icmpv6_register_handler>
   1e7dc:	bd08      	pop	{r3, pc}
   1e7de:	bf00      	nop
   1e7e0:	2000bdb8 	.word	0x2000bdb8

0001e7e4 <net_nbr_unref>:
void net_nbr_unref_debug(struct net_nbr *nbr, const char *caller, int line)
#define net_nbr_unref(nbr) net_nbr_unref_debug(nbr, __func__, __LINE__)
#else
void net_nbr_unref(struct net_nbr *nbr)
#endif
{
   1e7e4:	b508      	push	{r3, lr}
#if defined(CONFIG_NET_DEBUG_IPV6_NBR_CACHE)
	NET_DBG("nbr %p ref %u (%s():%d)", nbr, nbr->ref - 1, caller, line);
#else
	NET_DBG("nbr %p ref %u", nbr, nbr->ref - 1);
#endif
	if (--nbr->ref) {
   1e7e6:	7803      	ldrb	r3, [r0, #0]
   1e7e8:	3b01      	subs	r3, #1
   1e7ea:	b2db      	uxtb	r3, r3
   1e7ec:	7003      	strb	r3, [r0, #0]
   1e7ee:	b913      	cbnz	r3, 1e7f6 <net_nbr_unref+0x12>
		return;
	}

	if (nbr->remove) {
   1e7f0:	6903      	ldr	r3, [r0, #16]
   1e7f2:	b103      	cbz	r3, 1e7f6 <net_nbr_unref+0x12>
		nbr->remove(nbr);
   1e7f4:	4798      	blx	r3
   1e7f6:	bd08      	pop	{r3, pc}

0001e7f8 <net_nbr_ref>:
#if defined(CONFIG_NET_DEBUG_IPV6_NBR_CACHE)
	NET_DBG("nbr %p ref %u (%s():%d)", nbr, nbr->ref + 1, caller, line);
#else
	NET_DBG("nbr %p ref %u", nbr, nbr->ref + 1);
#endif
	nbr->ref++;
   1e7f8:	7803      	ldrb	r3, [r0, #0]
   1e7fa:	3301      	adds	r3, #1
   1e7fc:	7003      	strb	r3, [r0, #0]

	return nbr;
}
   1e7fe:	4770      	bx	lr

0001e800 <net_nbr_get>:

struct net_nbr *net_nbr_get(struct net_nbr_table *table)
{
	int i;

	for (i = 0; i < table->nbr_count; i++) {
   1e800:	2100      	movs	r1, #0
   1e802:	8903      	ldrh	r3, [r0, #8]
   1e804:	4299      	cmp	r1, r3
   1e806:	da17      	bge.n	1e838 <net_nbr_get+0x38>
{
   1e808:	b510      	push	{r4, lr}
		struct net_nbr *nbr = get_nbr(table->nbr, i);
   1e80a:	6802      	ldr	r2, [r0, #0]
			  start->size + start->extra_data_size) * idx));
   1e80c:	8853      	ldrh	r3, [r2, #2]
   1e80e:	8894      	ldrh	r4, [r2, #4]
   1e810:	4423      	add	r3, r4
   1e812:	3314      	adds	r3, #20
   1e814:	fb03 f301 	mul.w	r3, r3, r1
	return (struct net_nbr *)((void *)start +
   1e818:	18d4      	adds	r4, r2, r3

		if (!nbr->ref) {
   1e81a:	5cd3      	ldrb	r3, [r2, r3]
   1e81c:	b12b      	cbz	r3, 1e82a <net_nbr_get+0x2a>
	for (i = 0; i < table->nbr_count; i++) {
   1e81e:	3101      	adds	r1, #1
   1e820:	8903      	ldrh	r3, [r0, #8]
   1e822:	4299      	cmp	r1, r3
   1e824:	dbf1      	blt.n	1e80a <net_nbr_get+0xa>

			return net_nbr_ref(nbr);
		}
	}

	return NULL;
   1e826:	2000      	movs	r0, #0
}
   1e828:	bd10      	pop	{r4, pc}
			nbr->data = nbr->__nbr;
   1e82a:	f104 0314 	add.w	r3, r4, #20
   1e82e:	60e3      	str	r3, [r4, #12]
			return net_nbr_ref(nbr);
   1e830:	4620      	mov	r0, r4
   1e832:	f7ff ffe1 	bl	1e7f8 <net_nbr_ref>
   1e836:	bd10      	pop	{r4, pc}
	return NULL;
   1e838:	2000      	movs	r0, #0
   1e83a:	4770      	bx	lr

0001e83c <net_nbr_link>:
int net_nbr_link(struct net_nbr *nbr, struct net_if *iface,
		 struct net_linkaddr *lladdr)
{
	int i, avail = -1;

	if (nbr->idx != NET_NBR_LLADDR_UNKNOWN) {
   1e83c:	7843      	ldrb	r3, [r0, #1]
   1e83e:	2bff      	cmp	r3, #255	; 0xff
   1e840:	d158      	bne.n	1e8f4 <net_nbr_link+0xb8>
{
   1e842:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e846:	4690      	mov	r8, r2
   1e848:	460f      	mov	r7, r1
   1e84a:	4606      	mov	r6, r0
   1e84c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1e850:	2400      	movs	r4, #0
   1e852:	e008      	b.n	1e866 <net_nbr_link+0x2a>
		return -EALREADY;
	}

	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
		if (avail < 0 && !net_neighbor_lladdr[i].ref) {
   1e854:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   1e858:	4b2a      	ldr	r3, [pc, #168]	; (1e904 <net_nbr_link+0xc8>)
   1e85a:	4413      	add	r3, r2
   1e85c:	7a1b      	ldrb	r3, [r3, #8]
   1e85e:	b933      	cbnz	r3, 1e86e <net_nbr_link+0x32>
			avail = i;
   1e860:	4625      	mov	r5, r4
   1e862:	e004      	b.n	1e86e <net_nbr_link+0x32>
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   1e864:	3401      	adds	r4, #1
   1e866:	2c07      	cmp	r4, #7
   1e868:	dc1e      	bgt.n	1e8a8 <net_nbr_link+0x6c>
		if (avail < 0 && !net_neighbor_lladdr[i].ref) {
   1e86a:	2d00      	cmp	r5, #0
   1e86c:	dbf2      	blt.n	1e854 <net_nbr_link+0x18>
		}

		if (net_neighbor_lladdr[i].ref &&
   1e86e:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   1e872:	4b24      	ldr	r3, [pc, #144]	; (1e904 <net_nbr_link+0xc8>)
   1e874:	4413      	add	r3, r2
   1e876:	7a1b      	ldrb	r3, [r3, #8]
   1e878:	2b00      	cmp	r3, #0
   1e87a:	d0f3      	beq.n	1e864 <net_nbr_link+0x28>
		    !memcmp(lladdr->addr,
			    net_neighbor_lladdr[i].lladdr.addr,
   1e87c:	4921      	ldr	r1, [pc, #132]	; (1e904 <net_nbr_link+0xc8>)
   1e87e:	4411      	add	r1, r2
		    !memcmp(lladdr->addr,
   1e880:	f898 2004 	ldrb.w	r2, [r8, #4]
   1e884:	3102      	adds	r1, #2
   1e886:	f8d8 0000 	ldr.w	r0, [r8]
   1e88a:	f00c f867 	bl	2a95c <memcmp>
		if (net_neighbor_lladdr[i].ref &&
   1e88e:	4603      	mov	r3, r0
   1e890:	2800      	cmp	r0, #0
   1e892:	d1e7      	bne.n	1e864 <net_nbr_link+0x28>
			    lladdr->len)) {
			/* We found same lladdr in nbr cache so just
			 * increase the ref count.
			 */
			net_neighbor_lladdr[i].ref++;
   1e894:	eb04 01c4 	add.w	r1, r4, r4, lsl #3
   1e898:	4a1a      	ldr	r2, [pc, #104]	; (1e904 <net_nbr_link+0xc8>)
   1e89a:	440a      	add	r2, r1
   1e89c:	7a11      	ldrb	r1, [r2, #8]
   1e89e:	3101      	adds	r1, #1
   1e8a0:	7211      	strb	r1, [r2, #8]

			nbr->idx = i;
   1e8a2:	7074      	strb	r4, [r6, #1]
			nbr->iface = iface;
   1e8a4:	60b7      	str	r7, [r6, #8]

			return 0;
   1e8a6:	e019      	b.n	1e8dc <net_nbr_link+0xa0>
		}
	}

	if (avail < 0) {
   1e8a8:	2d00      	cmp	r5, #0
   1e8aa:	db27      	blt.n	1e8fc <net_nbr_link+0xc0>
	}

	/* There was no existing entry in the lladdr cache,
	 * so allocate one for this lladdr.
	 */
	net_neighbor_lladdr[avail].ref++;
   1e8ac:	eb05 02c5 	add.w	r2, r5, r5, lsl #3
   1e8b0:	4b14      	ldr	r3, [pc, #80]	; (1e904 <net_nbr_link+0xc8>)
   1e8b2:	4413      	add	r3, r2
   1e8b4:	7a1a      	ldrb	r2, [r3, #8]
   1e8b6:	3201      	adds	r2, #1
   1e8b8:	721a      	strb	r2, [r3, #8]
	nbr->idx = avail;
   1e8ba:	7075      	strb	r5, [r6, #1]

	net_linkaddr_set(&net_neighbor_lladdr[avail].lladdr, lladdr->addr,
   1e8bc:	f8d8 1000 	ldr.w	r1, [r8]
   1e8c0:	f898 2004 	ldrb.w	r2, [r8, #4]
 * This value should always be <= NET_LINK_ADDR_MAX_LENGTH.
 */
static inline int net_linkaddr_set(struct net_linkaddr_storage *lladdr_store,
				   u8_t *new_addr, u8_t new_len)
{
	if (!lladdr_store || !new_addr) {
   1e8c4:	b109      	cbz	r1, 1e8ca <net_nbr_link+0x8e>
		return -EINVAL;
	}

	if (new_len > NET_LINK_ADDR_MAX_LENGTH) {
   1e8c6:	2a06      	cmp	r2, #6
   1e8c8:	d90b      	bls.n	1e8e2 <net_nbr_link+0xa6>
			 lladdr->len);
	net_neighbor_lladdr[avail].lladdr.len = lladdr->len;
   1e8ca:	f898 2004 	ldrb.w	r2, [r8, #4]
   1e8ce:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
   1e8d2:	4b0c      	ldr	r3, [pc, #48]	; (1e904 <net_nbr_link+0xc8>)
   1e8d4:	441d      	add	r5, r3
   1e8d6:	706a      	strb	r2, [r5, #1]

	nbr->iface = iface;
   1e8d8:	60b7      	str	r7, [r6, #8]

	return 0;
   1e8da:	2300      	movs	r3, #0
}
   1e8dc:	4618      	mov	r0, r3
   1e8de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EMSGSIZE;
	}

	lladdr_store->len = new_len;
   1e8e2:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
   1e8e6:	4807      	ldr	r0, [pc, #28]	; (1e904 <net_nbr_link+0xc8>)
   1e8e8:	4418      	add	r0, r3
   1e8ea:	7042      	strb	r2, [r0, #1]
	memcpy(lladdr_store->addr, new_addr, new_len);
   1e8ec:	3002      	adds	r0, #2
   1e8ee:	f7e1 fce7 	bl	2c0 <memcpy>
   1e8f2:	e7ea      	b.n	1e8ca <net_nbr_link+0x8e>
		return -EALREADY;
   1e8f4:	f06f 0377 	mvn.w	r3, #119	; 0x77
}
   1e8f8:	4618      	mov	r0, r3
   1e8fa:	4770      	bx	lr
		return -ENOENT;
   1e8fc:	f06f 0301 	mvn.w	r3, #1
   1e900:	e7ec      	b.n	1e8dc <net_nbr_link+0xa0>
   1e902:	bf00      	nop
   1e904:	20001e1c 	.word	0x20001e1c

0001e908 <net_nbr_get_lladdr>:
{
	NET_ASSERT_INFO(idx < CONFIG_NET_IPV6_MAX_NEIGHBORS,
			"idx %d >= max %d", idx,
			CONFIG_NET_IPV6_MAX_NEIGHBORS);

	return &net_neighbor_lladdr[idx].lladdr;
   1e908:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
}
   1e90c:	4b01      	ldr	r3, [pc, #4]	; (1e914 <net_nbr_get_lladdr+0xc>)
   1e90e:	4418      	add	r0, r3
   1e910:	4770      	bx	lr
   1e912:	bf00      	nop
   1e914:	20001e1c 	.word	0x20001e1c

0001e918 <ipv6_nbr_set_state>:
	bool is_router;
};

static inline struct net_ipv6_nbr_data *net_ipv6_nbr_data(struct net_nbr *nbr)
{
	return (struct net_ipv6_nbr_data *)nbr->data;
   1e918:	68c2      	ldr	r2, [r0, #12]
}

static void ipv6_nbr_set_state(struct net_nbr *nbr,
			       enum net_ipv6_nbr_state new_state)
{
	if (new_state == net_ipv6_nbr_data(nbr)->state ||
   1e91a:	f892 3064 	ldrb.w	r3, [r2, #100]	; 0x64
   1e91e:	428b      	cmp	r3, r1
   1e920:	d003      	beq.n	1e92a <ipv6_nbr_set_state+0x12>
   1e922:	2b05      	cmp	r3, #5
   1e924:	d001      	beq.n	1e92a <ipv6_nbr_set_state+0x12>

	NET_DBG("nbr %p %s -> %s", nbr,
		net_ipv6_nbr_state2str(net_ipv6_nbr_data(nbr)->state),
		net_ipv6_nbr_state2str(new_state));

	net_ipv6_nbr_data(nbr)->state = new_state;
   1e926:	f882 1064 	strb.w	r1, [r2, #100]	; 0x64
   1e92a:	4770      	bx	lr

0001e92c <iface_cb>:
	net_nbr_cb_t cb;
	void *user_data;
};

static void iface_cb(struct net_if *iface, void *user_data)
{
   1e92c:	b570      	push	{r4, r5, r6, lr}
   1e92e:	4605      	mov	r5, r0
   1e930:	460e      	mov	r6, r1
	struct iface_cb_data *data = user_data;
	int i;

	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   1e932:	2400      	movs	r4, #0
   1e934:	e000      	b.n	1e938 <iface_cb+0xc>
   1e936:	3401      	adds	r4, #1
   1e938:	2c07      	cmp	r4, #7
   1e93a:	dc0c      	bgt.n	1e956 <iface_cb+0x2a>
	return &net_neighbor_pool[idx].nbr;
   1e93c:	4a06      	ldr	r2, [pc, #24]	; (1e958 <iface_cb+0x2c>)
   1e93e:	01e3      	lsls	r3, r4, #7
   1e940:	18d0      	adds	r0, r2, r3
		struct net_nbr *nbr = get_nbr(i);

		if (!nbr->ref || nbr->iface != iface) {
   1e942:	5cd3      	ldrb	r3, [r2, r3]
   1e944:	2b00      	cmp	r3, #0
   1e946:	d0f6      	beq.n	1e936 <iface_cb+0xa>
   1e948:	6883      	ldr	r3, [r0, #8]
   1e94a:	42ab      	cmp	r3, r5
   1e94c:	d1f3      	bne.n	1e936 <iface_cb+0xa>
			continue;
		}

		data->cb(nbr, data->user_data);
   1e94e:	6833      	ldr	r3, [r6, #0]
   1e950:	6871      	ldr	r1, [r6, #4]
   1e952:	4798      	blx	r3
   1e954:	e7ef      	b.n	1e936 <iface_cb+0xa>
	}
}
   1e956:	bd70      	pop	{r4, r5, r6, pc}
   1e958:	2000bde8 	.word	0x2000bde8

0001e95c <iface_cb>:

	return "<unknown type>";
}

static void iface_cb(struct net_if *iface, void *user_data)
{
   1e95c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e95e:	b085      	sub	sp, #20
   1e960:	4605      	mov	r5, r0
	const char *extra;
	int i, count;

	ARG_UNUSED(user_data);

	printk("\nInterface %p (%s)\n", iface, iface2str(iface, &extra));
   1e962:	a903      	add	r1, sp, #12
   1e964:	f004 ff0a 	bl	2377c <iface2str>
   1e968:	4602      	mov	r2, r0
   1e96a:	4629      	mov	r1, r5
   1e96c:	4885      	ldr	r0, [pc, #532]	; (1eb84 <iface_cb+0x228>)
   1e96e:	f7e4 faeb 	bl	2f48 <printk>
	printk("=======================%s\n", extra);
   1e972:	9903      	ldr	r1, [sp, #12]
   1e974:	4884      	ldr	r0, [pc, #528]	; (1eb88 <iface_cb+0x22c>)
   1e976:	f7e4 fae7 	bl	2f48 <printk>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1e97a:	f3bf 8f5b 	dmb	ish
   1e97e:	68eb      	ldr	r3, [r5, #12]
   1e980:	f3bf 8f5b 	dmb	ish

	if (!net_if_is_up(iface)) {
   1e984:	f013 0f01 	tst.w	r3, #1
   1e988:	d014      	beq.n	1e9b4 <iface_cb+0x58>
#if NET_LOG_ENABLED > 0
static inline char *net_sprint_ll_addr(const u8_t *ll, u8_t ll_len)
{
	static char buf[sizeof("xx:xx:xx:xx:xx:xx:xx:xx")];

	return net_sprint_ll_addr_buf(ll, ll_len, (char *)buf, sizeof(buf));
   1e98a:	2318      	movs	r3, #24
   1e98c:	4a7f      	ldr	r2, [pc, #508]	; (1eb8c <iface_cb+0x230>)
   1e98e:	7d29      	ldrb	r1, [r5, #20]
   1e990:	6928      	ldr	r0, [r5, #16]
   1e992:	f7fe fd45 	bl	1d420 <net_sprint_ll_addr_buf>
		printk("Interface is down.\n");
		return;
	}

	printk("Link addr : %s\n", net_sprint_ll_addr(iface->link_addr.addr,
   1e996:	4601      	mov	r1, r0
   1e998:	487d      	ldr	r0, [pc, #500]	; (1eb90 <iface_cb+0x234>)
   1e99a:	f7e4 fad5 	bl	2f48 <printk>
						      iface->link_addr.len));
	printk("MTU       : %d\n", iface->mtu);
   1e99e:	8d29      	ldrh	r1, [r5, #40]	; 0x28
   1e9a0:	487c      	ldr	r0, [pc, #496]	; (1eb94 <iface_cb+0x238>)
   1e9a2:	f7e4 fad1 	bl	2f48 <printk>

#if defined(CONFIG_NET_IPV6)
	count = 0;

	printk("IPv6 unicast addresses (max %d):\n", NET_IF_MAX_IPV6_ADDR);
   1e9a6:	2103      	movs	r1, #3
   1e9a8:	487b      	ldr	r0, [pc, #492]	; (1eb98 <iface_cb+0x23c>)
   1e9aa:	f7e4 facd 	bl	2f48 <printk>
	count = 0;
   1e9ae:	2700      	movs	r7, #0
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1e9b0:	463c      	mov	r4, r7
   1e9b2:	e02e      	b.n	1ea12 <iface_cb+0xb6>
		printk("Interface is down.\n");
   1e9b4:	4879      	ldr	r0, [pc, #484]	; (1eb9c <iface_cb+0x240>)
   1e9b6:	f7e4 fac7 	bl	2f48 <printk>
   1e9ba:	e0db      	b.n	1eb74 <iface_cb+0x218>
		return "<unknown type>";
   1e9bc:	4a78      	ldr	r2, [pc, #480]	; (1eba0 <iface_cb+0x244>)
   1e9be:	e006      	b.n	1e9ce <iface_cb+0x72>
		return "DHCP";
   1e9c0:	4a78      	ldr	r2, [pc, #480]	; (1eba4 <iface_cb+0x248>)
   1e9c2:	e004      	b.n	1e9ce <iface_cb+0x72>
		return "manual";
   1e9c4:	4a78      	ldr	r2, [pc, #480]	; (1eba8 <iface_cb+0x24c>)
   1e9c6:	e002      	b.n	1e9ce <iface_cb+0x72>
	return "<invalid type>";
   1e9c8:	4a78      	ldr	r2, [pc, #480]	; (1ebac <iface_cb+0x250>)
   1e9ca:	e000      	b.n	1e9ce <iface_cb+0x72>
		return "autoconf";
   1e9cc:	4a78      	ldr	r2, [pc, #480]	; (1ebb0 <iface_cb+0x254>)

		if (!unicast->is_used) {
			continue;
		}

		printk("\t%s %s %s%s\n",
   1e9ce:	236c      	movs	r3, #108	; 0x6c
   1e9d0:	fb03 5304 	mla	r3, r3, r4, r5
   1e9d4:	f993 3091 	ldrsb.w	r3, [r3, #145]	; 0x91
	switch (addr_state) {
   1e9d8:	3301      	adds	r3, #1
   1e9da:	2b03      	cmp	r3, #3
   1e9dc:	d809      	bhi.n	1e9f2 <iface_cb+0x96>
   1e9de:	e8df f003 	tbb	[pc, r3]
   1e9e2:	0a02      	.short	0x0a02
   1e9e4:	0604      	.short	0x0604
		return "<unknown state>";
   1e9e6:	4b73      	ldr	r3, [pc, #460]	; (1ebb4 <iface_cb+0x258>)
   1e9e8:	e006      	b.n	1e9f8 <iface_cb+0x9c>
		return "preferred";
   1e9ea:	4b73      	ldr	r3, [pc, #460]	; (1ebb8 <iface_cb+0x25c>)
   1e9ec:	e004      	b.n	1e9f8 <iface_cb+0x9c>
		return "deprecated";
   1e9ee:	4b73      	ldr	r3, [pc, #460]	; (1ebbc <iface_cb+0x260>)
   1e9f0:	e002      	b.n	1e9f8 <iface_cb+0x9c>
	return "<invalid state>";
   1e9f2:	4b73      	ldr	r3, [pc, #460]	; (1ebc0 <iface_cb+0x264>)
   1e9f4:	e000      	b.n	1e9f8 <iface_cb+0x9c>
		return "tentative";
   1e9f6:	4b73      	ldr	r3, [pc, #460]	; (1ebc4 <iface_cb+0x268>)
		       net_sprint_ipv6_addr(&unicast->address.in6_addr),
		       addrtype2str(unicast->addr_type),
		       addrstate2str(unicast->addr_state),
		       unicast->is_infinite ? " infinite" : "");
   1e9f8:	266c      	movs	r6, #108	; 0x6c
   1e9fa:	fb06 5604 	mla	r6, r6, r4, r5
   1e9fe:	f896 0093 	ldrb.w	r0, [r6, #147]	; 0x93
		printk("\t%s %s %s%s\n",
   1ea02:	b368      	cbz	r0, 1ea60 <iface_cb+0x104>
   1ea04:	4870      	ldr	r0, [pc, #448]	; (1ebc8 <iface_cb+0x26c>)
   1ea06:	9000      	str	r0, [sp, #0]
   1ea08:	4870      	ldr	r0, [pc, #448]	; (1ebcc <iface_cb+0x270>)
   1ea0a:	f7e4 fa9d 	bl	2f48 <printk>
		count++;
   1ea0e:	3701      	adds	r7, #1
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1ea10:	3401      	adds	r4, #1
   1ea12:	2c02      	cmp	r4, #2
   1ea14:	dc26      	bgt.n	1ea64 <iface_cb+0x108>
		if (!unicast->is_used) {
   1ea16:	236c      	movs	r3, #108	; 0x6c
   1ea18:	fb03 5304 	mla	r3, r3, r4, r5
   1ea1c:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
   1ea20:	2b00      	cmp	r3, #0
   1ea22:	d0f5      	beq.n	1ea10 <iface_cb+0xb4>
		       net_sprint_ipv6_addr(&unicast->address.in6_addr),
   1ea24:	266c      	movs	r6, #108	; 0x6c
   1ea26:	fb06 f604 	mul.w	r6, r6, r4
   1ea2a:	f106 0120 	add.w	r1, r6, #32
   1ea2e:	4429      	add	r1, r5
static inline char *net_sprint_ipv6_addr(const struct in6_addr *addr)
{
#if defined(CONFIG_NET_IPV6)
	static char buf[NET_IPV6_ADDR_LEN];

	return net_addr_ntop(AF_INET6, addr, (char *)buf, sizeof(buf));
   1ea30:	2328      	movs	r3, #40	; 0x28
   1ea32:	4a67      	ldr	r2, [pc, #412]	; (1ebd0 <iface_cb+0x274>)
   1ea34:	3110      	adds	r1, #16
   1ea36:	200a      	movs	r0, #10
   1ea38:	f7fe fd1c 	bl	1d474 <net_addr_ntop>
   1ea3c:	4601      	mov	r1, r0
		printk("\t%s %s %s%s\n",
   1ea3e:	442e      	add	r6, r5
   1ea40:	f896 3090 	ldrb.w	r3, [r6, #144]	; 0x90
	switch (addr_type) {
   1ea44:	2b03      	cmp	r3, #3
   1ea46:	d8bf      	bhi.n	1e9c8 <iface_cb+0x6c>
   1ea48:	a201      	add	r2, pc, #4	; (adr r2, 1ea50 <iface_cb+0xf4>)
   1ea4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1ea4e:	bf00      	nop
   1ea50:	0001e9bd 	.word	0x0001e9bd
   1ea54:	0001e9cd 	.word	0x0001e9cd
   1ea58:	0001e9c1 	.word	0x0001e9c1
   1ea5c:	0001e9c5 	.word	0x0001e9c5
		printk("\t%s %s %s%s\n",
   1ea60:	485c      	ldr	r0, [pc, #368]	; (1ebd4 <iface_cb+0x278>)
   1ea62:	e7d0      	b.n	1ea06 <iface_cb+0xaa>
	}

	if (count == 0) {
   1ea64:	b137      	cbz	r7, 1ea74 <iface_cb+0x118>
		printk("\t<none>\n");
	}

	count = 0;

	printk("IPv6 multicast addresses (max %d):\n", NET_IF_MAX_IPV6_MADDR);
   1ea66:	2105      	movs	r1, #5
   1ea68:	485b      	ldr	r0, [pc, #364]	; (1ebd8 <iface_cb+0x27c>)
   1ea6a:	f7e4 fa6d 	bl	2f48 <printk>
	count = 0;
   1ea6e:	2600      	movs	r6, #0
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   1ea70:	4634      	mov	r4, r6
   1ea72:	e004      	b.n	1ea7e <iface_cb+0x122>
		printk("\t<none>\n");
   1ea74:	4859      	ldr	r0, [pc, #356]	; (1ebdc <iface_cb+0x280>)
   1ea76:	f7e4 fa67 	bl	2f48 <printk>
   1ea7a:	e7f4      	b.n	1ea66 <iface_cb+0x10a>
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   1ea7c:	3401      	adds	r4, #1
   1ea7e:	2c04      	cmp	r4, #4
   1ea80:	dc18      	bgt.n	1eab4 <iface_cb+0x158>
		mcast = &iface->ipv6.mcast[i];

		if (!mcast->is_used) {
   1ea82:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1ea86:	00d3      	lsls	r3, r2, #3
   1ea88:	461a      	mov	r2, r3
   1ea8a:	442b      	add	r3, r5
   1ea8c:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
   1ea90:	f013 0f01 	tst.w	r3, #1
   1ea94:	d0f2      	beq.n	1ea7c <iface_cb+0x120>
			continue;
		}

		printk("\t%s\n",
		       net_sprint_ipv6_addr(&mcast->address.in6_addr));
   1ea96:	f502 71b0 	add.w	r1, r2, #352	; 0x160
   1ea9a:	4429      	add	r1, r5
   1ea9c:	2328      	movs	r3, #40	; 0x28
   1ea9e:	4a4c      	ldr	r2, [pc, #304]	; (1ebd0 <iface_cb+0x274>)
   1eaa0:	3118      	adds	r1, #24
   1eaa2:	200a      	movs	r0, #10
   1eaa4:	f7fe fce6 	bl	1d474 <net_addr_ntop>
		printk("\t%s\n",
   1eaa8:	4601      	mov	r1, r0
   1eaaa:	484d      	ldr	r0, [pc, #308]	; (1ebe0 <iface_cb+0x284>)
   1eaac:	f7e4 fa4c 	bl	2f48 <printk>

		count++;
   1eab0:	3601      	adds	r6, #1
   1eab2:	e7e3      	b.n	1ea7c <iface_cb+0x120>
	}

	if (count == 0) {
   1eab4:	b136      	cbz	r6, 1eac4 <iface_cb+0x168>
		printk("\t<none>\n");
	}

	count = 0;

	printk("IPv6 prefixes (max %d):\n", NET_IF_MAX_IPV6_PREFIX);
   1eab6:	2102      	movs	r1, #2
   1eab8:	484a      	ldr	r0, [pc, #296]	; (1ebe4 <iface_cb+0x288>)
   1eaba:	f7e4 fa45 	bl	2f48 <printk>
	count = 0;
   1eabe:	2600      	movs	r6, #0
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
   1eac0:	4634      	mov	r4, r6
   1eac2:	e009      	b.n	1ead8 <iface_cb+0x17c>
		printk("\t<none>\n");
   1eac4:	4845      	ldr	r0, [pc, #276]	; (1ebdc <iface_cb+0x280>)
   1eac6:	f7e4 fa3f 	bl	2f48 <printk>
   1eaca:	e7f4      	b.n	1eab6 <iface_cb+0x15a>

		if (!prefix->is_used) {
			continue;
		}

		printk("\t%s/%d%s\n",
   1eacc:	4b41      	ldr	r3, [pc, #260]	; (1ebd4 <iface_cb+0x278>)
   1eace:	4846      	ldr	r0, [pc, #280]	; (1ebe8 <iface_cb+0x28c>)
   1ead0:	f7e4 fa3a 	bl	2f48 <printk>
		       net_sprint_ipv6_addr(&prefix->prefix),
		       prefix->len,
		       prefix->is_infinite ? " infinite" : "");

		count++;
   1ead4:	3601      	adds	r6, #1
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
   1ead6:	3401      	adds	r4, #1
   1ead8:	2c01      	cmp	r4, #1
   1eada:	dc1e      	bgt.n	1eb1a <iface_cb+0x1be>
		if (!prefix->is_used) {
   1eadc:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   1eae0:	0093      	lsls	r3, r2, #2
   1eae2:	461a      	mov	r2, r3
   1eae4:	442b      	add	r3, r5
   1eae6:	f893 3222 	ldrb.w	r3, [r3, #546]	; 0x222
   1eaea:	2b00      	cmp	r3, #0
   1eaec:	d0f3      	beq.n	1ead6 <iface_cb+0x17a>
		       net_sprint_ipv6_addr(&prefix->prefix),
   1eaee:	0127      	lsls	r7, r4, #4
   1eaf0:	f502 7100 	add.w	r1, r2, #512	; 0x200
   1eaf4:	4429      	add	r1, r5
   1eaf6:	2328      	movs	r3, #40	; 0x28
   1eaf8:	4a35      	ldr	r2, [pc, #212]	; (1ebd0 <iface_cb+0x274>)
   1eafa:	3110      	adds	r1, #16
   1eafc:	200a      	movs	r0, #10
   1eafe:	f7fe fcb9 	bl	1d474 <net_addr_ntop>
   1eb02:	4601      	mov	r1, r0
		       prefix->len,
   1eb04:	1b3f      	subs	r7, r7, r4
   1eb06:	00bb      	lsls	r3, r7, #2
   1eb08:	442b      	add	r3, r5
   1eb0a:	f893 2220 	ldrb.w	r2, [r3, #544]	; 0x220
		       prefix->is_infinite ? " infinite" : "");
   1eb0e:	f893 3221 	ldrb.w	r3, [r3, #545]	; 0x221
		printk("\t%s/%d%s\n",
   1eb12:	2b00      	cmp	r3, #0
   1eb14:	d0da      	beq.n	1eacc <iface_cb+0x170>
   1eb16:	4b2c      	ldr	r3, [pc, #176]	; (1ebc8 <iface_cb+0x26c>)
   1eb18:	e7d9      	b.n	1eace <iface_cb+0x172>
	}

	if (count == 0) {
   1eb1a:	b36e      	cbz	r6, 1eb78 <iface_cb+0x21c>
		printk("\t<none>\n");
	}

	router = net_if_ipv6_router_find_default(iface, NULL);
   1eb1c:	2100      	movs	r1, #0
   1eb1e:	4628      	mov	r0, r5
   1eb20:	f7fc fade 	bl	1b0e0 <net_if_ipv6_router_find_default>
	if (router) {
   1eb24:	4604      	mov	r4, r0
   1eb26:	b188      	cbz	r0, 1eb4c <iface_cb+0x1f0>
		printk("IPv6 default router :\n");
   1eb28:	4830      	ldr	r0, [pc, #192]	; (1ebec <iface_cb+0x290>)
   1eb2a:	f7e4 fa0d 	bl	2f48 <printk>
   1eb2e:	2328      	movs	r3, #40	; 0x28
   1eb30:	4a27      	ldr	r2, [pc, #156]	; (1ebd0 <iface_cb+0x274>)
   1eb32:	f104 012c 	add.w	r1, r4, #44	; 0x2c
   1eb36:	200a      	movs	r0, #10
   1eb38:	f7fe fc9c 	bl	1d474 <net_addr_ntop>
   1eb3c:	4601      	mov	r1, r0
		printk("\t%s%s\n",
		       net_sprint_ipv6_addr(&router->address.in6_addr),
		       router->is_infinite ? " infinite" : "");
   1eb3e:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
		printk("\t%s%s\n",
   1eb42:	b1eb      	cbz	r3, 1eb80 <iface_cb+0x224>
   1eb44:	4a20      	ldr	r2, [pc, #128]	; (1ebc8 <iface_cb+0x26c>)
   1eb46:	482a      	ldr	r0, [pc, #168]	; (1ebf0 <iface_cb+0x294>)
   1eb48:	f7e4 f9fe 	bl	2f48 <printk>
	}

	printk("IPv6 hop limit           : %d\n", iface->ipv6.hop_limit);
   1eb4c:	f895 1294 	ldrb.w	r1, [r5, #660]	; 0x294
   1eb50:	4828      	ldr	r0, [pc, #160]	; (1ebf4 <iface_cb+0x298>)
   1eb52:	f7e4 f9f9 	bl	2f48 <printk>
	printk("IPv6 base reachable time : %d\n",
   1eb56:	f8d5 1288 	ldr.w	r1, [r5, #648]	; 0x288
   1eb5a:	4827      	ldr	r0, [pc, #156]	; (1ebf8 <iface_cb+0x29c>)
   1eb5c:	f7e4 f9f4 	bl	2f48 <printk>
	       iface->ipv6.base_reachable_time);
	printk("IPv6 reachable time      : %d\n", iface->ipv6.reachable_time);
   1eb60:	f8d5 128c 	ldr.w	r1, [r5, #652]	; 0x28c
   1eb64:	4825      	ldr	r0, [pc, #148]	; (1ebfc <iface_cb+0x2a0>)
   1eb66:	f7e4 f9ef 	bl	2f48 <printk>
	printk("IPv6 retransmit timer    : %d\n", iface->ipv6.retrans_timer);
   1eb6a:	f8d5 1290 	ldr.w	r1, [r5, #656]	; 0x290
   1eb6e:	4824      	ldr	r0, [pc, #144]	; (1ec00 <iface_cb+0x2a4>)
   1eb70:	f7e4 f9ea 	bl	2f48 <printk>
	       net_sprint_ipv4_addr(&iface->dhcpv4.requested_ip));
	printk("DHCPv4 state      : %s\n",
	       net_dhcpv4_state_name(iface->dhcpv4.state));
	printk("DHCPv4 attempts   : %d\n", iface->dhcpv4.attempts);
#endif /* CONFIG_NET_DHCPV4 */
}
   1eb74:	b005      	add	sp, #20
   1eb76:	bdf0      	pop	{r4, r5, r6, r7, pc}
		printk("\t<none>\n");
   1eb78:	4818      	ldr	r0, [pc, #96]	; (1ebdc <iface_cb+0x280>)
   1eb7a:	f7e4 f9e5 	bl	2f48 <printk>
   1eb7e:	e7cd      	b.n	1eb1c <iface_cb+0x1c0>
		printk("\t%s%s\n",
   1eb80:	4a14      	ldr	r2, [pc, #80]	; (1ebd4 <iface_cb+0x278>)
   1eb82:	e7e0      	b.n	1eb46 <iface_cb+0x1ea>
   1eb84:	0002fd04 	.word	0x0002fd04
   1eb88:	0002feb4 	.word	0x0002feb4
   1eb8c:	200023a8 	.word	0x200023a8
   1eb90:	0002fd2c 	.word	0x0002fd2c
   1eb94:	0002fd3c 	.word	0x0002fd3c
   1eb98:	0002fd4c 	.word	0x0002fd4c
   1eb9c:	0002fd18 	.word	0x0002fd18
   1eba0:	0002fc6c 	.word	0x0002fc6c
   1eba4:	0002fca4 	.word	0x0002fca4
   1eba8:	0002fcac 	.word	0x0002fcac
   1ebac:	0002fcb4 	.word	0x0002fcb4
   1ebb0:	0002fc98 	.word	0x0002fc98
   1ebb4:	0002fcc4 	.word	0x0002fcc4
   1ebb8:	0002fce0 	.word	0x0002fce0
   1ebbc:	0002fcec 	.word	0x0002fcec
   1ebc0:	0002fbb8 	.word	0x0002fbb8
   1ebc4:	0002fcd4 	.word	0x0002fcd4
   1ebc8:	0002fcf8 	.word	0x0002fcf8
   1ebcc:	0002fd70 	.word	0x0002fd70
   1ebd0:	200023c0 	.word	0x200023c0
   1ebd4:	0002f390 	.word	0x0002f390
   1ebd8:	0002fd8c 	.word	0x0002fd8c
   1ebdc:	0002fd80 	.word	0x0002fd80
   1ebe0:	0002fdb0 	.word	0x0002fdb0
   1ebe4:	0002fdb8 	.word	0x0002fdb8
   1ebe8:	0002fdd4 	.word	0x0002fdd4
   1ebec:	0002fde0 	.word	0x0002fde0
   1ebf0:	0002fdf8 	.word	0x0002fdf8
   1ebf4:	0002fe00 	.word	0x0002fe00
   1ebf8:	0002fe20 	.word	0x0002fe20
   1ebfc:	0002fe40 	.word	0x0002fe40
   1ec00:	0002fe60 	.word	0x0002fe60

0001ec04 <net_neighbor_data_remove>:
	return net_ipv6_nbr_add(net_pkt_iface(pkt), &NET_IPV6_HDR(pkt)->src,
				lladdr, is_router, state);
}

void net_neighbor_data_remove(struct net_nbr *nbr)
{
   1ec04:	4770      	bx	lr

0001ec06 <net_neighbor_table_clear>:

	return;
}

void net_neighbor_table_clear(struct net_nbr_table *table)
{
   1ec06:	4770      	bx	lr

0001ec08 <nbr_lookup>:
{
   1ec08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ec0a:	460e      	mov	r6, r1
   1ec0c:	4617      	mov	r7, r2
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   1ec0e:	2400      	movs	r4, #0
   1ec10:	e000      	b.n	1ec14 <nbr_lookup+0xc>
   1ec12:	3401      	adds	r4, #1
   1ec14:	2c07      	cmp	r4, #7
   1ec16:	dc11      	bgt.n	1ec3c <nbr_lookup+0x34>
	return &net_neighbor_pool[idx].nbr;
   1ec18:	4a0a      	ldr	r2, [pc, #40]	; (1ec44 <nbr_lookup+0x3c>)
   1ec1a:	01e3      	lsls	r3, r4, #7
   1ec1c:	18d5      	adds	r5, r2, r3
		if (!nbr->ref) {
   1ec1e:	5cd3      	ldrb	r3, [r2, r3]
   1ec20:	2b00      	cmp	r3, #0
   1ec22:	d0f6      	beq.n	1ec12 <nbr_lookup+0xa>
		if (nbr->iface == iface &&
   1ec24:	68ab      	ldr	r3, [r5, #8]
   1ec26:	42b3      	cmp	r3, r6
   1ec28:	d1f3      	bne.n	1ec12 <nbr_lookup+0xa>
   1ec2a:	68e8      	ldr	r0, [r5, #12]
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   1ec2c:	2210      	movs	r2, #16
   1ec2e:	4639      	mov	r1, r7
   1ec30:	3004      	adds	r0, #4
   1ec32:	f00b fe93 	bl	2a95c <memcmp>
   1ec36:	2800      	cmp	r0, #0
   1ec38:	d1eb      	bne.n	1ec12 <nbr_lookup+0xa>
   1ec3a:	e000      	b.n	1ec3e <nbr_lookup+0x36>
	return NULL;
   1ec3c:	2500      	movs	r5, #0
}
   1ec3e:	4628      	mov	r0, r5
   1ec40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1ec42:	bf00      	nop
   1ec44:	2000bde8 	.word	0x2000bde8

0001ec48 <nbr_clear_ns_pending>:
{
   1ec48:	b510      	push	{r4, lr}
   1ec4a:	4604      	mov	r4, r0
	k_delayed_work_cancel(&data->send_ns);
   1ec4c:	303c      	adds	r0, #60	; 0x3c
   1ec4e:	f00a fb93 	bl	29378 <k_delayed_work_cancel>
	if (data->pending) {
   1ec52:	6820      	ldr	r0, [r4, #0]
   1ec54:	b118      	cbz	r0, 1ec5e <nbr_clear_ns_pending+0x16>
		net_pkt_unref(data->pending);
   1ec56:	f7fd ffc4 	bl	1cbe2 <net_pkt_unref>
		data->pending = NULL;
   1ec5a:	2300      	movs	r3, #0
   1ec5c:	6023      	str	r3, [r4, #0]
   1ec5e:	bd10      	pop	{r4, pc}

0001ec60 <ns_reply_timeout>:
{
   1ec60:	b538      	push	{r3, r4, r5, lr}
	struct net_ipv6_nbr_data *data = CONTAINER_OF(work,
   1ec62:	f1a0 013c 	sub.w	r1, r0, #60	; 0x3c
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   1ec66:	2300      	movs	r3, #0
   1ec68:	2b07      	cmp	r3, #7
   1ec6a:	dc07      	bgt.n	1ec7c <ns_reply_timeout+0x1c>
	return &net_neighbor_pool[idx].nbr;
   1ec6c:	4c0d      	ldr	r4, [pc, #52]	; (1eca4 <ns_reply_timeout+0x44>)
   1ec6e:	eb04 14c3 	add.w	r4, r4, r3, lsl #7
		if (nbr->data == (u8_t *)data) {
   1ec72:	68e2      	ldr	r2, [r4, #12]
   1ec74:	4291      	cmp	r1, r2
   1ec76:	d002      	beq.n	1ec7e <ns_reply_timeout+0x1e>
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   1ec78:	3301      	adds	r3, #1
   1ec7a:	e7f5      	b.n	1ec68 <ns_reply_timeout+0x8>
	return NULL;
   1ec7c:	2400      	movs	r4, #0
	if (!nbr) {
   1ec7e:	b184      	cbz	r4, 1eca2 <ns_reply_timeout+0x42>
	if (!data->pending) {
   1ec80:	f850 3c3c 	ldr.w	r3, [r0, #-60]
   1ec84:	b16b      	cbz	r3, 1eca2 <ns_reply_timeout+0x42>
   1ec86:	4605      	mov	r5, r0
	net_pkt_unref(data->pending);
   1ec88:	4618      	mov	r0, r3
   1ec8a:	f7fd ffaa 	bl	1cbe2 <net_pkt_unref>
	net_pkt_unref(data->pending);
   1ec8e:	f855 0c3c 	ldr.w	r0, [r5, #-60]
   1ec92:	f7fd ffa6 	bl	1cbe2 <net_pkt_unref>
	data->pending = NULL;
   1ec96:	2300      	movs	r3, #0
   1ec98:	f845 3c3c 	str.w	r3, [r5, #-60]
	net_nbr_unref(nbr);
   1ec9c:	4620      	mov	r0, r4
   1ec9e:	f7ff fda1 	bl	1e7e4 <net_nbr_unref>
   1eca2:	bd38      	pop	{r3, r4, r5, pc}
   1eca4:	2000bde8 	.word	0x2000bde8

0001eca8 <nbr_init>:
{
   1eca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ecac:	b084      	sub	sp, #16
   1ecae:	4604      	mov	r4, r0
   1ecb0:	4616      	mov	r6, r2
   1ecb2:	4698      	mov	r8, r3
	nbr->idx = NET_NBR_LLADDR_UNKNOWN;
   1ecb4:	23ff      	movs	r3, #255	; 0xff
   1ecb6:	7043      	strb	r3, [r0, #1]
	nbr->iface = iface;
   1ecb8:	6081      	str	r1, [r0, #8]
   1ecba:	68c7      	ldr	r7, [r0, #12]
	net_ipaddr_copy(&net_ipv6_nbr_data(nbr)->addr, addr);
   1ecbc:	466d      	mov	r5, sp
   1ecbe:	6810      	ldr	r0, [r2, #0]
   1ecc0:	6851      	ldr	r1, [r2, #4]
   1ecc2:	6892      	ldr	r2, [r2, #8]
   1ecc4:	68f3      	ldr	r3, [r6, #12]
   1ecc6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1ecc8:	466d      	mov	r5, sp
   1ecca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1eccc:	6078      	str	r0, [r7, #4]
   1ecce:	60b9      	str	r1, [r7, #8]
   1ecd0:	60fa      	str	r2, [r7, #12]
   1ecd2:	613b      	str	r3, [r7, #16]
	ipv6_nbr_set_state(nbr, state);
   1ecd4:	f89d 1028 	ldrb.w	r1, [sp, #40]	; 0x28
   1ecd8:	4620      	mov	r0, r4
   1ecda:	f7ff fe1d 	bl	1e918 <ipv6_nbr_set_state>
   1ecde:	68e3      	ldr	r3, [r4, #12]
	net_ipv6_nbr_data(nbr)->is_router = is_router;
   1ece0:	f883 8069 	strb.w	r8, [r3, #105]	; 0x69
   1ece4:	68e3      	ldr	r3, [r4, #12]
	net_ipv6_nbr_data(nbr)->pending = NULL;
   1ece6:	2200      	movs	r2, #0
   1ece8:	601a      	str	r2, [r3, #0]
   1ecea:	68e0      	ldr	r0, [r4, #12]
	k_delayed_work_init(&net_ipv6_nbr_data(nbr)->reachable,
   1ecec:	4905      	ldr	r1, [pc, #20]	; (1ed04 <nbr_init+0x5c>)
   1ecee:	3014      	adds	r0, #20
   1ecf0:	f00a fb24 	bl	2933c <k_delayed_work_init>
   1ecf4:	68e0      	ldr	r0, [r4, #12]
	k_delayed_work_init(&net_ipv6_nbr_data(nbr)->send_ns,
   1ecf6:	4904      	ldr	r1, [pc, #16]	; (1ed08 <nbr_init+0x60>)
   1ecf8:	303c      	adds	r0, #60	; 0x3c
   1ecfa:	f00a fb1f 	bl	2933c <k_delayed_work_init>
}
   1ecfe:	b004      	add	sp, #16
   1ed00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ed04:	00020835 	.word	0x00020835
   1ed08:	0001ec61 	.word	0x0001ec61

0001ed0c <nbr_new>:
{
   1ed0c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ed0e:	b083      	sub	sp, #12
   1ed10:	4605      	mov	r5, r0
   1ed12:	460e      	mov	r6, r1
   1ed14:	461f      	mov	r7, r3
	struct net_nbr *nbr = net_nbr_get(&net_neighbor.table);
   1ed16:	4807      	ldr	r0, [pc, #28]	; (1ed34 <nbr_new+0x28>)
   1ed18:	f7ff fd72 	bl	1e800 <net_nbr_get>
	if (!nbr) {
   1ed1c:	4604      	mov	r4, r0
   1ed1e:	b128      	cbz	r0, 1ed2c <nbr_new+0x20>
	nbr_init(nbr, iface, addr, true, state);
   1ed20:	9700      	str	r7, [sp, #0]
   1ed22:	2301      	movs	r3, #1
   1ed24:	4632      	mov	r2, r6
   1ed26:	4629      	mov	r1, r5
   1ed28:	f7ff ffbe 	bl	1eca8 <nbr_init>
}
   1ed2c:	4620      	mov	r0, r4
   1ed2e:	b003      	add	sp, #12
   1ed30:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ed32:	bf00      	nop
   1ed34:	2000bddc 	.word	0x2000bddc

0001ed38 <nbr_new>:
}

static struct net_nbr *nbr_new(struct net_if *iface,
			       struct in6_addr *addr,
			       u8_t prefix_len)
{
   1ed38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ed3c:	b084      	sub	sp, #16
   1ed3e:	4604      	mov	r4, r0
   1ed40:	460e      	mov	r6, r1
   1ed42:	4690      	mov	r8, r2
	struct net_nbr *nbr = net_nbr_get(&net_nbr_routes.table);
   1ed44:	480c      	ldr	r0, [pc, #48]	; (1ed78 <nbr_new+0x40>)
   1ed46:	f7ff fd5b 	bl	1e800 <net_nbr_get>

	if (!nbr) {
   1ed4a:	4605      	mov	r5, r0
   1ed4c:	b180      	cbz	r0, 1ed70 <nbr_new+0x38>
		return NULL;
	}

	nbr->iface = iface;
   1ed4e:	6084      	str	r4, [r0, #8]
	return (struct net_route_entry *)nbr->data;
   1ed50:	68c7      	ldr	r7, [r0, #12]

	net_ipaddr_copy(&net_route_data(nbr)->addr, addr);
   1ed52:	466c      	mov	r4, sp
   1ed54:	6830      	ldr	r0, [r6, #0]
   1ed56:	6871      	ldr	r1, [r6, #4]
   1ed58:	68b2      	ldr	r2, [r6, #8]
   1ed5a:	68f3      	ldr	r3, [r6, #12]
   1ed5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1ed5e:	466c      	mov	r4, sp
   1ed60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   1ed62:	6138      	str	r0, [r7, #16]
   1ed64:	6179      	str	r1, [r7, #20]
   1ed66:	61ba      	str	r2, [r7, #24]
   1ed68:	61fb      	str	r3, [r7, #28]
	return (struct net_route_entry *)nbr->data;
   1ed6a:	68eb      	ldr	r3, [r5, #12]
	net_route_data(nbr)->prefix_len = prefix_len;
   1ed6c:	f883 8020 	strb.w	r8, [r3, #32]
		nbr->idx, nbr, iface,
		net_sprint_ipv6_addr(&net_route_data(nbr)->addr),
		prefix_len);

	return nbr;
}
   1ed70:	4628      	mov	r0, r5
   1ed72:	b004      	add	sp, #16
   1ed74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ed78:	2000c200 	.word	0x2000c200

0001ed7c <update_ll_reserve>:
 * Thus we need to check it here. Note that this cannot happen for IPv4
 * as 802.15.4 supports IPv6 only.
 */
static struct net_pkt *update_ll_reserve(struct net_pkt *pkt,
					 struct in6_addr *addr)
{
   1ed7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1ed80:	4682      	mov	sl, r0
	return pkt->forwarding;
   1ed82:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38

	/* No need to do anything if we are forwarding the packet
	 * as we already know everything about the destination of
	 * the packet.
	 */
	if (net_pkt_forwarding(pkt)) {
   1ed86:	f013 0f04 	tst.w	r3, #4
   1ed8a:	d002      	beq.n	1ed92 <update_ll_reserve+0x16>
			pos = 0;
		}
	}

	return pkt;
}
   1ed8c:	4650      	mov	r0, sl
   1ed8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return pkt->iface;
   1ed92:	6940      	ldr	r0, [r0, #20]
   1ed94:	6843      	ldr	r3, [r0, #4]
   1ed96:	689b      	ldr	r3, [r3, #8]
   1ed98:	4798      	blx	r3
	if (reserve == net_pkt_ll_reserve(pkt)) {
   1ed9a:	f89a 3032 	ldrb.w	r3, [sl, #50]	; 0x32
   1ed9e:	4283      	cmp	r3, r0
   1eda0:	d0f4      	beq.n	1ed8c <update_ll_reserve+0x10>
	pkt->ll_reserve = len;
   1eda2:	f88a 0032 	strb.w	r0, [sl, #50]	; 0x32
	orig_frag = pkt->frags;
   1eda6:	f8da 7008 	ldr.w	r7, [sl, #8]
	copy_len = orig_frag->len;
   1edaa:	89be      	ldrh	r6, [r7, #12]
	pkt->frags = NULL;
   1edac:	2400      	movs	r4, #0
   1edae:	f8ca 4008 	str.w	r4, [sl, #8]
	frag = NULL;
   1edb2:	46a1      	mov	r9, r4
	pos = 0;
   1edb4:	46a0      	mov	r8, r4
	while (orig_frag) {
   1edb6:	e020      	b.n	1edfa <update_ll_reserve+0x7e>
			frag = net_pkt_get_frag(pkt, K_FOREVER);
   1edb8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1edbc:	4650      	mov	r0, sl
   1edbe:	f7fd febd 	bl	1cb3c <net_pkt_get_frag>
   1edc2:	4681      	mov	r9, r0
			net_pkt_frag_add(pkt, frag);
   1edc4:	4601      	mov	r1, r0
   1edc6:	4650      	mov	r0, sl
   1edc8:	f7fd ff35 	bl	1cc36 <net_pkt_frag_add>
			room_len = net_buf_tailroom(frag);
   1edcc:	f109 0008 	add.w	r0, r9, #8
   1edd0:	f7fb fa4d 	bl	1a26e <net_buf_simple_tailroom>
   1edd4:	b284      	uxth	r4, r0
   1edd6:	e014      	b.n	1ee02 <update_ll_reserve+0x86>
			memcpy(net_buf_add(frag, room_len),
   1edd8:	4621      	mov	r1, r4
   1edda:	f109 0008 	add.w	r0, r9, #8
   1edde:	f7fb f9dd 	bl	1a19c <net_buf_simple_add>
			       orig_frag->data + pos, room_len);
   1ede2:	68b9      	ldr	r1, [r7, #8]
			memcpy(net_buf_add(frag, room_len),
   1ede4:	4622      	mov	r2, r4
   1ede6:	4441      	add	r1, r8
   1ede8:	f7e1 fa6a 	bl	2c0 <memcpy>
			copy_len -= room_len;
   1edec:	1b36      	subs	r6, r6, r4
   1edee:	b2b6      	uxth	r6, r6
			pos += room_len;
   1edf0:	4444      	add	r4, r8
   1edf2:	fa1f f884 	uxth.w	r8, r4
			room_len = 0;
   1edf6:	2400      	movs	r4, #0
		if (!copy_len) {
   1edf8:	b19e      	cbz	r6, 1ee22 <update_ll_reserve+0xa6>
	while (orig_frag) {
   1edfa:	2f00      	cmp	r7, #0
   1edfc:	d0c6      	beq.n	1ed8c <update_ll_reserve+0x10>
		if (!room_len) {
   1edfe:	2c00      	cmp	r4, #0
   1ee00:	d0da      	beq.n	1edb8 <update_ll_reserve+0x3c>
		if (room_len >= copy_len) {
   1ee02:	42b4      	cmp	r4, r6
   1ee04:	d3e8      	bcc.n	1edd8 <update_ll_reserve+0x5c>
			memcpy(net_buf_add(frag, copy_len),
   1ee06:	4631      	mov	r1, r6
   1ee08:	f109 0008 	add.w	r0, r9, #8
   1ee0c:	f7fb f9c6 	bl	1a19c <net_buf_simple_add>
			       orig_frag->data + pos, copy_len);
   1ee10:	68b9      	ldr	r1, [r7, #8]
			memcpy(net_buf_add(frag, copy_len),
   1ee12:	4632      	mov	r2, r6
   1ee14:	4441      	add	r1, r8
   1ee16:	f7e1 fa53 	bl	2c0 <memcpy>
			room_len -= copy_len;
   1ee1a:	1ba4      	subs	r4, r4, r6
   1ee1c:	b2a4      	uxth	r4, r4
			copy_len = 0;
   1ee1e:	2600      	movs	r6, #0
   1ee20:	e7ea      	b.n	1edf8 <update_ll_reserve+0x7c>
			orig_frag = orig_frag->frags;
   1ee22:	683d      	ldr	r5, [r7, #0]
			tmp->frags = NULL;
   1ee24:	2300      	movs	r3, #0
   1ee26:	603b      	str	r3, [r7, #0]
			net_pkt_frag_unref(tmp);
   1ee28:	4638      	mov	r0, r7
   1ee2a:	f7fd fed4 	bl	1cbd6 <net_pkt_frag_unref>
			if (!orig_frag) {
   1ee2e:	2d00      	cmp	r5, #0
   1ee30:	d0ac      	beq.n	1ed8c <update_ll_reserve+0x10>
			orig_frag = orig_frag->frags;
   1ee32:	462f      	mov	r7, r5
			pos = 0;
   1ee34:	46b0      	mov	r8, r6
			copy_len = orig_frag->len;
   1ee36:	89ae      	ldrh	r6, [r5, #12]
   1ee38:	e7df      	b.n	1edfa <update_ll_reserve+0x7e>

0001ee3a <setup_headers>:
	       llao_len - lladdr->len - 2);
}

static void setup_headers(struct net_pkt *pkt, u8_t nd6_len,
			  u8_t icmp_type)
{
   1ee3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ee3c:	4604      	mov	r4, r0
   1ee3e:	460e      	mov	r6, r1
   1ee40:	4617      	mov	r7, r2
	net_buf_add(pkt->frags,
   1ee42:	6880      	ldr	r0, [r0, #8]
   1ee44:	212c      	movs	r1, #44	; 0x2c
   1ee46:	3008      	adds	r0, #8
   1ee48:	f7fb f9a8 	bl	1a19c <net_buf_simple_add>
	return pkt->frags->data;
   1ee4c:	68a3      	ldr	r3, [r4, #8]
   1ee4e:	689b      	ldr	r3, [r3, #8]
		    sizeof(struct net_ipv6_hdr) +
		    sizeof(struct net_icmp_hdr));

	NET_IPV6_HDR(pkt)->vtc = 0x60;
   1ee50:	2260      	movs	r2, #96	; 0x60
   1ee52:	701a      	strb	r2, [r3, #0]
   1ee54:	68a3      	ldr	r3, [r4, #8]
   1ee56:	689b      	ldr	r3, [r3, #8]
	NET_IPV6_HDR(pkt)->tcflow = 0;
   1ee58:	2500      	movs	r5, #0
   1ee5a:	705d      	strb	r5, [r3, #1]
   1ee5c:	68a3      	ldr	r3, [r4, #8]
   1ee5e:	689b      	ldr	r3, [r3, #8]
	NET_IPV6_HDR(pkt)->flow = 0;
   1ee60:	709d      	strb	r5, [r3, #2]
   1ee62:	70dd      	strb	r5, [r3, #3]
   1ee64:	68a3      	ldr	r3, [r4, #8]
   1ee66:	689b      	ldr	r3, [r3, #8]
	NET_IPV6_HDR(pkt)->len[0] = 0;
   1ee68:	711d      	strb	r5, [r3, #4]
   1ee6a:	68a3      	ldr	r3, [r4, #8]
   1ee6c:	689b      	ldr	r3, [r3, #8]
	NET_IPV6_HDR(pkt)->len[1] = NET_ICMPH_LEN + nd6_len;
   1ee6e:	3604      	adds	r6, #4
   1ee70:	715e      	strb	r6, [r3, #5]
   1ee72:	68a3      	ldr	r3, [r4, #8]
   1ee74:	689b      	ldr	r3, [r3, #8]

	NET_IPV6_HDR(pkt)->nexthdr = IPPROTO_ICMPV6;
   1ee76:	223a      	movs	r2, #58	; 0x3a
   1ee78:	719a      	strb	r2, [r3, #6]
   1ee7a:	68a3      	ldr	r3, [r4, #8]
   1ee7c:	689b      	ldr	r3, [r3, #8]
	NET_IPV6_HDR(pkt)->hop_limit = NET_IPV6_ND_HOP_LIMIT;
   1ee7e:	22ff      	movs	r2, #255	; 0xff
   1ee80:	71da      	strb	r2, [r3, #7]

	/* In this special case where we know there are no long extension
	 * headers, so we can use this header cast.
	 */
	net_pkt_icmp_data(pkt)->type = icmp_type;
   1ee82:	4620      	mov	r0, r4
   1ee84:	f7fe f986 	bl	1d194 <net_pkt_icmp_data>
   1ee88:	7007      	strb	r7, [r0, #0]
	net_pkt_icmp_data(pkt)->code = 0;
   1ee8a:	4620      	mov	r0, r4
   1ee8c:	f7fe f982 	bl	1d194 <net_pkt_icmp_data>
   1ee90:	7045      	strb	r5, [r0, #1]
   1ee92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001ee94 <nbr_free>:
{
   1ee94:	b538      	push	{r3, r4, r5, lr}
   1ee96:	4604      	mov	r4, r0
   1ee98:	68c5      	ldr	r5, [r0, #12]
	k_delayed_work_cancel(&data->send_ns);
   1ee9a:	f105 003c 	add.w	r0, r5, #60	; 0x3c
   1ee9e:	f00a fa6b 	bl	29378 <k_delayed_work_cancel>
	if (data->pending) {
   1eea2:	6828      	ldr	r0, [r5, #0]
   1eea4:	b118      	cbz	r0, 1eeae <nbr_free+0x1a>
		net_pkt_unref(data->pending);
   1eea6:	f7fd fe9c 	bl	1cbe2 <net_pkt_unref>
		data->pending = NULL;
   1eeaa:	2300      	movs	r3, #0
   1eeac:	602b      	str	r3, [r5, #0]
   1eeae:	68e0      	ldr	r0, [r4, #12]
	k_delayed_work_cancel(&net_ipv6_nbr_data(nbr)->reachable);
   1eeb0:	3014      	adds	r0, #20
   1eeb2:	f00a fa61 	bl	29378 <k_delayed_work_cancel>
	net_nbr_unref(nbr);
   1eeb6:	4620      	mov	r0, r4
   1eeb8:	f7ff fc94 	bl	1e7e4 <net_nbr_unref>
   1eebc:	bd38      	pop	{r3, r4, r5, pc}
	...

0001eec0 <net_ipv6_nbr_state2str>:
	switch (state) {
   1eec0:	2805      	cmp	r0, #5
   1eec2:	d80e      	bhi.n	1eee2 <net_ipv6_nbr_state2str+0x22>
   1eec4:	e8df f000 	tbb	[pc, r0]
   1eec8:	07050f03 	.word	0x07050f03
   1eecc:	0b09      	.short	0x0b09
		return "incomplete";
   1eece:	4807      	ldr	r0, [pc, #28]	; (1eeec <net_ipv6_nbr_state2str+0x2c>)
   1eed0:	4770      	bx	lr
		return "stale";
   1eed2:	4807      	ldr	r0, [pc, #28]	; (1eef0 <net_ipv6_nbr_state2str+0x30>)
   1eed4:	4770      	bx	lr
		return "delay";
   1eed6:	4807      	ldr	r0, [pc, #28]	; (1eef4 <net_ipv6_nbr_state2str+0x34>)
   1eed8:	4770      	bx	lr
		return "probe";
   1eeda:	4807      	ldr	r0, [pc, #28]	; (1eef8 <net_ipv6_nbr_state2str+0x38>)
   1eedc:	4770      	bx	lr
		return "static";
   1eede:	4807      	ldr	r0, [pc, #28]	; (1eefc <net_ipv6_nbr_state2str+0x3c>)
   1eee0:	4770      	bx	lr
	return "<invalid state>";
   1eee2:	4807      	ldr	r0, [pc, #28]	; (1ef00 <net_ipv6_nbr_state2str+0x40>)
   1eee4:	4770      	bx	lr
		return "reachable";
   1eee6:	4807      	ldr	r0, [pc, #28]	; (1ef04 <net_ipv6_nbr_state2str+0x44>)
}
   1eee8:	4770      	bx	lr
   1eeea:	bf00      	nop
   1eeec:	0002fb80 	.word	0x0002fb80
   1eef0:	0002fb98 	.word	0x0002fb98
   1eef4:	0002fba0 	.word	0x0002fba0
   1eef8:	0002fba8 	.word	0x0002fba8
   1eefc:	0002fbb0 	.word	0x0002fbb0
   1ef00:	0002fbb8 	.word	0x0002fbb8
   1ef04:	0002fb8c 	.word	0x0002fb8c

0001ef08 <net_ipv6_nbr_foreach>:
{
   1ef08:	b500      	push	{lr}
   1ef0a:	b083      	sub	sp, #12
	struct iface_cb_data cb_data = {
   1ef0c:	9000      	str	r0, [sp, #0]
   1ef0e:	9101      	str	r1, [sp, #4]
	net_if_foreach(iface_cb, &cb_data);
   1ef10:	4669      	mov	r1, sp
   1ef12:	4803      	ldr	r0, [pc, #12]	; (1ef20 <net_ipv6_nbr_foreach+0x18>)
   1ef14:	f7fc fc3a 	bl	1b78c <net_if_foreach>
}
   1ef18:	b003      	add	sp, #12
   1ef1a:	f85d fb04 	ldr.w	pc, [sp], #4
   1ef1e:	bf00      	nop
   1ef20:	0001e92d 	.word	0x0001e92d

0001ef24 <net_ipv6_nbr_rm>:
{
   1ef24:	b538      	push	{r3, r4, r5, lr}
	nbr = nbr_lookup(&net_neighbor.table, iface, addr);
   1ef26:	460a      	mov	r2, r1
   1ef28:	4601      	mov	r1, r0
   1ef2a:	480d      	ldr	r0, [pc, #52]	; (1ef60 <net_ipv6_nbr_rm+0x3c>)
   1ef2c:	f7ff fe6c 	bl	1ec08 <nbr_lookup>
	if (!nbr) {
   1ef30:	b1a0      	cbz	r0, 1ef5c <net_ipv6_nbr_rm+0x38>
   1ef32:	4604      	mov	r4, r0
   1ef34:	68c5      	ldr	r5, [r0, #12]
	k_delayed_work_cancel(&data->send_ns);
   1ef36:	f105 003c 	add.w	r0, r5, #60	; 0x3c
   1ef3a:	f00a fa1d 	bl	29378 <k_delayed_work_cancel>
	if (data->pending) {
   1ef3e:	6828      	ldr	r0, [r5, #0]
   1ef40:	b118      	cbz	r0, 1ef4a <net_ipv6_nbr_rm+0x26>
		net_pkt_unref(data->pending);
   1ef42:	f7fd fe4e 	bl	1cbe2 <net_pkt_unref>
		data->pending = NULL;
   1ef46:	2300      	movs	r3, #0
   1ef48:	602b      	str	r3, [r5, #0]
   1ef4a:	68e0      	ldr	r0, [r4, #12]
	k_delayed_work_cancel(&net_ipv6_nbr_data(nbr)->reachable);
   1ef4c:	3014      	adds	r0, #20
   1ef4e:	f00a fa13 	bl	29378 <k_delayed_work_cancel>
	net_nbr_unref(nbr);
   1ef52:	4620      	mov	r0, r4
   1ef54:	f7ff fc46 	bl	1e7e4 <net_nbr_unref>
	return true;
   1ef58:	2001      	movs	r0, #1
   1ef5a:	bd38      	pop	{r3, r4, r5, pc}
		return false;
   1ef5c:	2000      	movs	r0, #0
}
   1ef5e:	bd38      	pop	{r3, r4, r5, pc}
   1ef60:	2000bddc 	.word	0x2000bddc

0001ef64 <net_ipv6_unspecified_address>:
}
   1ef64:	4800      	ldr	r0, [pc, #0]	; (1ef68 <net_ipv6_unspecified_address+0x4>)
   1ef66:	4770      	bx	lr
   1ef68:	0002fb70 	.word	0x0002fb70

0001ef6c <create_mldv2>:

static struct net_pkt *create_mldv2(struct net_pkt *pkt,
				    const struct in6_addr *addr,
				    u16_t record_type,
				    u8_t num_sources)
{
   1ef6c:	b570      	push	{r4, r5, r6, lr}
   1ef6e:	b082      	sub	sp, #8
   1ef70:	4604      	mov	r4, r0
   1ef72:	460e      	mov	r6, r1
   1ef74:	461d      	mov	r5, r3
   1ef76:	a902      	add	r1, sp, #8
   1ef78:	f801 2d03 	strb.w	r2, [r1, #-3]!
	return net_pkt_append(pkt, len, data, timeout) == len;
   1ef7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1ef80:	460a      	mov	r2, r1
   1ef82:	2101      	movs	r1, #1
   1ef84:	f7fd ff65 	bl	1ce52 <net_pkt_append>
   1ef88:	aa02      	add	r2, sp, #8
   1ef8a:	2300      	movs	r3, #0
   1ef8c:	f802 3d04 	strb.w	r3, [r2, #-4]!
   1ef90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1ef94:	2101      	movs	r1, #1
   1ef96:	4620      	mov	r0, r4
   1ef98:	f7fd ff5b 	bl	1ce52 <net_pkt_append>
	u16_t value = sys_cpu_to_be16(data);
   1ef9c:	022b      	lsls	r3, r5, #8
   1ef9e:	aa02      	add	r2, sp, #8
   1efa0:	f822 3d02 	strh.w	r3, [r2, #-2]!
	return net_pkt_append(pkt, len, data, timeout) == len;
   1efa4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1efa8:	2102      	movs	r1, #2
   1efaa:	4620      	mov	r0, r4
   1efac:	f7fd ff51 	bl	1ce52 <net_pkt_append>
   1efb0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1efb4:	4632      	mov	r2, r6
   1efb6:	2110      	movs	r1, #16
   1efb8:	4620      	mov	r0, r4
   1efba:	f7fd ff4a 	bl	1ce52 <net_pkt_append>
	net_pkt_append_u8(pkt, 0); /* aux data len */
	net_pkt_append_be16(pkt, num_sources); /* number of addresses */
	net_pkt_append_all(pkt, sizeof(struct in6_addr), addr->s6_addr,
			K_FOREVER);

	if (num_sources > 0) {
   1efbe:	b915      	cbnz	r5, 1efc6 <create_mldv2+0x5a>
				net_ipv6_unspecified_address()->s6_addr,
				K_FOREVER);
	}

	return pkt;
}
   1efc0:	4620      	mov	r0, r4
   1efc2:	b002      	add	sp, #8
   1efc4:	bd70      	pop	{r4, r5, r6, pc}
				net_ipv6_unspecified_address()->s6_addr,
   1efc6:	f7ff ffcd 	bl	1ef64 <net_ipv6_unspecified_address>
   1efca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1efce:	4602      	mov	r2, r0
   1efd0:	2110      	movs	r1, #16
   1efd2:	4620      	mov	r0, r4
   1efd4:	f7fd ff3d 	bl	1ce52 <net_pkt_append>
   1efd8:	e7f2      	b.n	1efc0 <create_mldv2+0x54>

0001efda <net_ipv6_create_raw>:
{
   1efda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1efde:	b088      	sub	sp, #32
   1efe0:	4604      	mov	r4, r0
   1efe2:	460e      	mov	r6, r1
   1efe4:	4617      	mov	r7, r2
   1efe6:	461d      	mov	r5, r3
	header = net_pkt_get_frag(pkt, K_FOREVER);
   1efe8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1efec:	f7fd fda6 	bl	1cb3c <net_pkt_get_frag>
   1eff0:	4680      	mov	r8, r0
	net_pkt_frag_insert(pkt, header);
   1eff2:	4601      	mov	r1, r0
   1eff4:	4620      	mov	r0, r4
   1eff6:	f7fd fe2b 	bl	1cc50 <net_pkt_frag_insert>
	return pkt->frags->data;
   1effa:	68a3      	ldr	r3, [r4, #8]
   1effc:	689b      	ldr	r3, [r3, #8]
	NET_IPV6_HDR(pkt)->vtc = 0x60;
   1effe:	2260      	movs	r2, #96	; 0x60
   1f000:	701a      	strb	r2, [r3, #0]
   1f002:	68a3      	ldr	r3, [r4, #8]
   1f004:	689a      	ldr	r2, [r3, #8]
	NET_IPV6_HDR(pkt)->tcflow = 0;
   1f006:	2300      	movs	r3, #0
   1f008:	7053      	strb	r3, [r2, #1]
   1f00a:	68a2      	ldr	r2, [r4, #8]
   1f00c:	6892      	ldr	r2, [r2, #8]
	NET_IPV6_HDR(pkt)->flow = 0;
   1f00e:	7093      	strb	r3, [r2, #2]
   1f010:	70d3      	strb	r3, [r2, #3]
   1f012:	68a2      	ldr	r2, [r4, #8]
   1f014:	6892      	ldr	r2, [r2, #8]
	NET_IPV6_HDR(pkt)->nexthdr = 0;
   1f016:	7193      	strb	r3, [r2, #6]
   1f018:	68a3      	ldr	r3, [r4, #8]
   1f01a:	689b      	ldr	r3, [r3, #8]
	return pkt->ipv6_hop_limit;
   1f01c:	f894 203a 	ldrb.w	r2, [r4, #58]	; 0x3a
	NET_IPV6_HDR(pkt)->hop_limit = net_pkt_ipv6_hop_limit(pkt);
   1f020:	71da      	strb	r2, [r3, #7]
	return pkt->frags->data;
   1f022:	68a3      	ldr	r3, [r4, #8]
   1f024:	689b      	ldr	r3, [r3, #8]
	if (NET_IPV6_HDR(pkt)->hop_limit == 0) {
   1f026:	79da      	ldrb	r2, [r3, #7]
   1f028:	b912      	cbnz	r2, 1f030 <net_ipv6_create_raw+0x56>
	return iface->ipv6.hop_limit;
   1f02a:	f895 2294 	ldrb.w	r2, [r5, #660]	; 0x294
		NET_IPV6_HDR(pkt)->hop_limit =
   1f02e:	71da      	strb	r2, [r3, #7]
   1f030:	68a3      	ldr	r3, [r4, #8]
   1f032:	f8d3 e008 	ldr.w	lr, [r3, #8]
	net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst, dst);
   1f036:	466d      	mov	r5, sp
   1f038:	6838      	ldr	r0, [r7, #0]
   1f03a:	6879      	ldr	r1, [r7, #4]
   1f03c:	68ba      	ldr	r2, [r7, #8]
   1f03e:	68fb      	ldr	r3, [r7, #12]
   1f040:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1f042:	466d      	mov	r5, sp
   1f044:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1f046:	f8ce 0018 	str.w	r0, [lr, #24]
   1f04a:	f8ce 101c 	str.w	r1, [lr, #28]
   1f04e:	f8ce 2020 	str.w	r2, [lr, #32]
   1f052:	f8ce 3024 	str.w	r3, [lr, #36]	; 0x24
   1f056:	68a3      	ldr	r3, [r4, #8]
   1f058:	689f      	ldr	r7, [r3, #8]
	net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src, src);
   1f05a:	6830      	ldr	r0, [r6, #0]
   1f05c:	6871      	ldr	r1, [r6, #4]
   1f05e:	68b2      	ldr	r2, [r6, #8]
   1f060:	68f3      	ldr	r3, [r6, #12]
   1f062:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1f064:	ad04      	add	r5, sp, #16
   1f066:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1f068:	60b8      	str	r0, [r7, #8]
   1f06a:	60f9      	str	r1, [r7, #12]
   1f06c:	613a      	str	r2, [r7, #16]
   1f06e:	617b      	str	r3, [r7, #20]
	pkt->ipv6_ext_len = len;
   1f070:	2300      	movs	r3, #0
   1f072:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
	return pkt->frags->data;
   1f076:	68a3      	ldr	r3, [r4, #8]
   1f078:	689b      	ldr	r3, [r3, #8]
	NET_IPV6_HDR(pkt)->nexthdr = next_header;
   1f07a:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
   1f07e:	719a      	strb	r2, [r3, #6]
	pkt->ip_hdr_len = len;
   1f080:	2128      	movs	r1, #40	; 0x28
   1f082:	f884 1033 	strb.w	r1, [r4, #51]	; 0x33
	pkt->family = family;
   1f086:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   1f08a:	220a      	movs	r2, #10
   1f08c:	f362 03c6 	bfi	r3, r2, #3, #4
   1f090:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	net_buf_add(header, sizeof(struct net_ipv6_hdr));
   1f094:	f108 0008 	add.w	r0, r8, #8
   1f098:	f7fb f880 	bl	1a19c <net_buf_simple_add>
}
   1f09c:	4620      	mov	r0, r4
   1f09e:	b008      	add	sp, #32
   1f0a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001f0a4 <net_ipv6_create>:
{
   1f0a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f0a6:	b083      	sub	sp, #12
   1f0a8:	4605      	mov	r5, r0
   1f0aa:	460e      	mov	r6, r1
   1f0ac:	461f      	mov	r7, r3
	if (!src) {
   1f0ae:	4614      	mov	r4, r2
   1f0b0:	b14a      	cbz	r2, 1f0c6 <net_ipv6_create+0x22>
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1f0b2:	6823      	ldr	r3, [r4, #0]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1f0b4:	b94b      	cbnz	r3, 1f0ca <net_ipv6_create+0x26>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1f0b6:	6863      	ldr	r3, [r4, #4]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1f0b8:	b9fb      	cbnz	r3, 1f0fa <net_ipv6_create+0x56>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1f0ba:	68a3      	ldr	r3, [r4, #8]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1f0bc:	b9fb      	cbnz	r3, 1f0fe <net_ipv6_create+0x5a>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   1f0be:	68e3      	ldr	r3, [r4, #12]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1f0c0:	b1fb      	cbz	r3, 1f102 <net_ipv6_create+0x5e>
   1f0c2:	2300      	movs	r3, #0
   1f0c4:	e002      	b.n	1f0cc <net_ipv6_create+0x28>
		src = ((struct sockaddr_in6_ptr *)&context->local)->sin6_addr;
   1f0c6:	68c4      	ldr	r4, [r0, #12]
   1f0c8:	e7f3      	b.n	1f0b2 <net_ipv6_create+0xe>
   1f0ca:	2300      	movs	r3, #0
	if (net_is_ipv6_addr_unspecified(src)
   1f0cc:	b9db      	cbnz	r3, 1f106 <net_ipv6_create+0x62>
	return addr->s6_addr[0] == 0xFF;
   1f0ce:	7823      	ldrb	r3, [r4, #0]
	    || net_is_ipv6_addr_mcast(src)) {
   1f0d0:	2bff      	cmp	r3, #255	; 0xff
   1f0d2:	d018      	beq.n	1f106 <net_ipv6_create+0x62>
	return net_if_get_by_index(context->iface);
   1f0d4:	f895 005c 	ldrb.w	r0, [r5, #92]	; 0x5c
   1f0d8:	f7fc fb3c 	bl	1b754 <net_if_get_by_index>
   1f0dc:	4603      	mov	r3, r0
	if (context->flags & NET_CONTEXT_PROTO) {
   1f0de:	f895 205d 	ldrb.w	r2, [r5, #93]	; 0x5d
   1f0e2:	f012 0f40 	tst.w	r2, #64	; 0x40
   1f0e6:	d114      	bne.n	1f112 <net_ipv6_create+0x6e>
	return IPPROTO_UDP;
   1f0e8:	2211      	movs	r2, #17
	return net_ipv6_create_raw(pkt,
   1f0ea:	9200      	str	r2, [sp, #0]
   1f0ec:	463a      	mov	r2, r7
   1f0ee:	4621      	mov	r1, r4
   1f0f0:	4630      	mov	r0, r6
   1f0f2:	f7ff ff72 	bl	1efda <net_ipv6_create_raw>
}
   1f0f6:	b003      	add	sp, #12
   1f0f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1f0fa:	2300      	movs	r3, #0
   1f0fc:	e7e6      	b.n	1f0cc <net_ipv6_create+0x28>
   1f0fe:	2300      	movs	r3, #0
   1f100:	e7e4      	b.n	1f0cc <net_ipv6_create+0x28>
   1f102:	2301      	movs	r3, #1
   1f104:	e7e2      	b.n	1f0cc <net_ipv6_create+0x28>
		src = net_if_ipv6_select_src_addr(net_pkt_iface(pkt),
   1f106:	4639      	mov	r1, r7
   1f108:	6970      	ldr	r0, [r6, #20]
   1f10a:	f7fc f8cf 	bl	1b2ac <net_if_ipv6_select_src_addr>
   1f10e:	4604      	mov	r4, r0
   1f110:	e7e0      	b.n	1f0d4 <net_ipv6_create+0x30>
		return IPPROTO_TCP;
   1f112:	2206      	movs	r2, #6
   1f114:	e7e9      	b.n	1f0ea <net_ipv6_create+0x46>

0001f116 <net_ipv6_finalize_raw>:
{
   1f116:	b538      	push	{r3, r4, r5, lr}
   1f118:	4605      	mov	r5, r0
   1f11a:	460c      	mov	r4, r1
	net_pkt_compact(pkt);
   1f11c:	f7fd fe52 	bl	1cdc4 <net_pkt_compact>
	return net_buf_frags_len(pkt->frags);
   1f120:	68a8      	ldr	r0, [r5, #8]
   1f122:	4603      	mov	r3, r0
	size_t bytes = 0;
   1f124:	2200      	movs	r2, #0
   1f126:	e002      	b.n	1f12e <net_ipv6_finalize_raw+0x18>
		bytes += buf->len;
   1f128:	8999      	ldrh	r1, [r3, #12]
   1f12a:	440a      	add	r2, r1
		buf = buf->frags;
   1f12c:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   1f12e:	2b00      	cmp	r3, #0
   1f130:	d1fa      	bne.n	1f128 <net_ipv6_finalize_raw+0x12>
	total_len -= sizeof(struct net_ipv6_hdr);
   1f132:	3a28      	subs	r2, #40	; 0x28
	return pkt->frags->data;
   1f134:	6883      	ldr	r3, [r0, #8]
	NET_IPV6_HDR(pkt)->len[0] = total_len / 256;
   1f136:	0a11      	lsrs	r1, r2, #8
   1f138:	7119      	strb	r1, [r3, #4]
   1f13a:	68ab      	ldr	r3, [r5, #8]
   1f13c:	689b      	ldr	r3, [r3, #8]
	NET_IPV6_HDR(pkt)->len[1] = total_len - NET_IPV6_HDR(pkt)->len[0] * 256;
   1f13e:	715a      	strb	r2, [r3, #5]
	if (next_header == IPPROTO_UDP) {
   1f140:	2c11      	cmp	r4, #17
   1f142:	d005      	beq.n	1f150 <net_ipv6_finalize_raw+0x3a>
	if (next_header == IPPROTO_TCP) {
   1f144:	2c06      	cmp	r4, #6
   1f146:	d008      	beq.n	1f15a <net_ipv6_finalize_raw+0x44>
	if (next_header == IPPROTO_ICMPV6) {
   1f148:	2c3a      	cmp	r4, #58	; 0x3a
   1f14a:	d00b      	beq.n	1f164 <net_ipv6_finalize_raw+0x4e>
}
   1f14c:	2000      	movs	r0, #0
   1f14e:	bd38      	pop	{r3, r4, r5, pc}
		net_udp_set_chksum(pkt, pkt->frags);
   1f150:	68a9      	ldr	r1, [r5, #8]
   1f152:	4628      	mov	r0, r5
   1f154:	f003 fa9b 	bl	2268e <net_udp_set_chksum>
   1f158:	e7f8      	b.n	1f14c <net_ipv6_finalize_raw+0x36>
		net_tcp_set_chksum(pkt, pkt->frags);
   1f15a:	68a9      	ldr	r1, [r5, #8]
   1f15c:	4628      	mov	r0, r5
   1f15e:	f004 f8da 	bl	23316 <net_tcp_set_chksum>
   1f162:	e7f3      	b.n	1f14c <net_ipv6_finalize_raw+0x36>
		net_icmpv6_set_chksum(pkt, pkt->frags);
   1f164:	68a9      	ldr	r1, [r5, #8]
   1f166:	4628      	mov	r0, r5
   1f168:	f7fe fdf2 	bl	1dd50 <net_icmpv6_set_chksum>
   1f16c:	e7ee      	b.n	1f14c <net_ipv6_finalize_raw+0x36>
	...

0001f170 <send_mldv2_raw>:

static int send_mldv2_raw(struct net_if *iface, struct net_buf *frags)
{
   1f170:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1f174:	b08d      	sub	sp, #52	; 0x34
   1f176:	4680      	mov	r8, r0
   1f178:	4689      	mov	r9, r1
	UNALIGNED_PUT(htons(addr0), &addr->s6_addr16[0]);
   1f17a:	f240 23ff 	movw	r3, #767	; 0x2ff
   1f17e:	f8ad 3020 	strh.w	r3, [sp, #32]
	UNALIGNED_PUT(htons(addr1), &addr->s6_addr16[1]);
   1f182:	2500      	movs	r5, #0
   1f184:	f8ad 5022 	strh.w	r5, [sp, #34]	; 0x22
	UNALIGNED_PUT(htons(addr2), &addr->s6_addr16[2]);
   1f188:	f8ad 5024 	strh.w	r5, [sp, #36]	; 0x24
	UNALIGNED_PUT(htons(addr3), &addr->s6_addr16[3]);
   1f18c:	f8ad 5026 	strh.w	r5, [sp, #38]	; 0x26
	UNALIGNED_PUT(htons(addr4), &addr->s6_addr16[4]);
   1f190:	f8ad 5028 	strh.w	r5, [sp, #40]	; 0x28
	UNALIGNED_PUT(htons(addr5), &addr->s6_addr16[5]);
   1f194:	f8ad 502a 	strh.w	r5, [sp, #42]	; 0x2a
	UNALIGNED_PUT(htons(addr6), &addr->s6_addr16[6]);
   1f198:	f8ad 502c 	strh.w	r5, [sp, #44]	; 0x2c
	UNALIGNED_PUT(htons(addr7), &addr->s6_addr16[7]);
   1f19c:	f44f 53b0 	mov.w	r3, #5632	; 0x1600
   1f1a0:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
	return iface->l2->reserve(iface, (void *)dst_ip6);
   1f1a4:	6843      	ldr	r3, [r0, #4]
   1f1a6:	689b      	ldr	r3, [r3, #8]
   1f1a8:	a908      	add	r1, sp, #32
   1f1aa:	4798      	blx	r3
	int ret;

	/* Sent to all MLDv2-capable routers */
	net_ipv6_addr_create(&dst, 0xff02, 0, 0, 0, 0, 0, 0, 0x0016);

	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, &dst),
   1f1ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1f1b0:	f7fd fca6 	bl	1cb00 <net_pkt_get_reserve_tx>
   1f1b4:	4604      	mov	r4, r0
				     K_FOREVER);

	pkt = net_ipv6_create_raw(pkt,
   1f1b6:	a908      	add	r1, sp, #32
   1f1b8:	4640      	mov	r0, r8
   1f1ba:	f7fc f877 	bl	1b2ac <net_if_ipv6_select_src_addr>
   1f1be:	9500      	str	r5, [sp, #0]
   1f1c0:	4643      	mov	r3, r8
   1f1c2:	aa08      	add	r2, sp, #32
   1f1c4:	4601      	mov	r1, r0
   1f1c6:	4620      	mov	r0, r4
   1f1c8:	f7ff ff07 	bl	1efda <net_ipv6_create_raw>
   1f1cc:	4604      	mov	r4, r0
   1f1ce:	6883      	ldr	r3, [r0, #8]
   1f1d0:	689b      	ldr	r3, [r3, #8]
				  net_if_ipv6_select_src_addr(iface, &dst),
				  &dst,
				  iface,
				  NET_IPV6_NEXTHDR_HBHO);

	NET_IPV6_HDR(pkt)->hop_limit = 1; /* RFC 3810 ch 7.4 */
   1f1d2:	2601      	movs	r6, #1
   1f1d4:	71de      	strb	r6, [r3, #7]

	net_pkt_set_ipv6_hdr_prev(pkt, pkt->frags->len);
   1f1d6:	6883      	ldr	r3, [r0, #8]
   1f1d8:	899b      	ldrh	r3, [r3, #12]
	pkt->ipv6_prev_hdr_start = offset;
   1f1da:	87c3      	strh	r3, [r0, #62]	; 0x3e
   1f1dc:	aa0c      	add	r2, sp, #48	; 0x30
   1f1de:	233a      	movs	r3, #58	; 0x3a
   1f1e0:	f802 3d15 	strb.w	r3, [r2, #-21]!
	return net_pkt_append(pkt, len, data, timeout) == len;
   1f1e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f1e8:	4631      	mov	r1, r6
   1f1ea:	f7fd fe32 	bl	1ce52 <net_pkt_append>
   1f1ee:	aa0c      	add	r2, sp, #48	; 0x30
   1f1f0:	f802 5d16 	strb.w	r5, [r2, #-22]!
   1f1f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f1f8:	4631      	mov	r1, r6
   1f1fa:	4620      	mov	r0, r4
   1f1fc:	f7fd fe29 	bl	1ce52 <net_pkt_append>
	u16_t value = sys_cpu_to_be16(data);
   1f200:	af0c      	add	r7, sp, #48	; 0x30
   1f202:	f240 2305 	movw	r3, #517	; 0x205
   1f206:	f827 3d14 	strh.w	r3, [r7, #-20]!
	return net_pkt_append(pkt, len, data, timeout) == len;
   1f20a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f20e:	463a      	mov	r2, r7
   1f210:	2102      	movs	r1, #2
   1f212:	4620      	mov	r0, r4
   1f214:	f7fd fe1d 	bl	1ce52 <net_pkt_append>
	u16_t value = sys_cpu_to_be16(data);
   1f218:	f8ad 501c 	strh.w	r5, [sp, #28]
	return net_pkt_append(pkt, len, data, timeout) == len;
   1f21c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f220:	463a      	mov	r2, r7
   1f222:	2102      	movs	r1, #2
   1f224:	4620      	mov	r0, r4
   1f226:	f7fd fe14 	bl	1ce52 <net_pkt_append>
   1f22a:	aa0c      	add	r2, sp, #48	; 0x30
   1f22c:	f802 5d17 	strb.w	r5, [r2, #-23]!
   1f230:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f234:	4631      	mov	r1, r6
   1f236:	4620      	mov	r0, r4
   1f238:	f7fd fe0b 	bl	1ce52 <net_pkt_append>
   1f23c:	aa0c      	add	r2, sp, #48	; 0x30
   1f23e:	f802 5d18 	strb.w	r5, [r2, #-24]!
   1f242:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f246:	4631      	mov	r1, r6
   1f248:	4620      	mov	r0, r4
   1f24a:	f7fd fe02 	bl	1ce52 <net_pkt_append>
   1f24e:	aa0c      	add	r2, sp, #48	; 0x30
   1f250:	238f      	movs	r3, #143	; 0x8f
   1f252:	f802 3d19 	strb.w	r3, [r2, #-25]!
   1f256:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f25a:	4631      	mov	r1, r6
   1f25c:	4620      	mov	r0, r4
   1f25e:	f7fd fdf8 	bl	1ce52 <net_pkt_append>
   1f262:	aa0c      	add	r2, sp, #48	; 0x30
   1f264:	f802 5d1a 	strb.w	r5, [r2, #-26]!
   1f268:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f26c:	4631      	mov	r1, r6
   1f26e:	4620      	mov	r0, r4
   1f270:	f7fd fdef 	bl	1ce52 <net_pkt_append>
	u16_t value = sys_cpu_to_be16(data);
   1f274:	f8ad 501c 	strh.w	r5, [sp, #28]
	return net_pkt_append(pkt, len, data, timeout) == len;
   1f278:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f27c:	463a      	mov	r2, r7
   1f27e:	2102      	movs	r1, #2
   1f280:	4620      	mov	r0, r4
   1f282:	f7fd fde6 	bl	1ce52 <net_pkt_append>
	/* ICMPv6 header */
	net_pkt_append_u8(pkt, NET_ICMPV6_MLDv2); /* type */
	net_pkt_append_u8(pkt, 0); /* code */
	net_pkt_append_be16(pkt, 0); /* chksum */

	pkt->frags->len = NET_IPV6ICMPH_LEN + ROUTER_ALERT_LEN;
   1f286:	68a3      	ldr	r3, [r4, #8]
   1f288:	2234      	movs	r2, #52	; 0x34
   1f28a:	819a      	strh	r2, [r3, #12]
	pkt->iface = iface;
   1f28c:	f8c4 8014 	str.w	r8, [r4, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   1f290:	f898 3015 	ldrb.w	r3, [r8, #21]
   1f294:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   1f298:	f898 3015 	ldrb.w	r3, [r8, #21]
   1f29c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	u16_t value = sys_cpu_to_be16(data);
   1f2a0:	f8ad 501c 	strh.w	r5, [sp, #28]
	return net_pkt_append(pkt, len, data, timeout) == len;
   1f2a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f2a8:	463a      	mov	r2, r7
   1f2aa:	2102      	movs	r1, #2
   1f2ac:	4620      	mov	r0, r4
   1f2ae:	f7fd fdd0 	bl	1ce52 <net_pkt_append>
	net_pkt_set_iface(pkt, iface);

	net_pkt_append_be16(pkt, 0); /* reserved field */

	/* Insert the actual multicast record(s) here */
	net_pkt_frag_add(pkt, frags);
   1f2b2:	4649      	mov	r1, r9
   1f2b4:	4620      	mov	r0, r4
   1f2b6:	f7fd fcbe 	bl	1cc36 <net_pkt_frag_add>

	ret = net_ipv6_finalize_raw(pkt, NET_IPV6_NEXTHDR_HBHO);
   1f2ba:	4629      	mov	r1, r5
   1f2bc:	4620      	mov	r0, r4
   1f2be:	f7ff ff2a 	bl	1f116 <net_ipv6_finalize_raw>
	if (ret < 0) {
   1f2c2:	1e05      	subs	r5, r0, #0
   1f2c4:	db35      	blt.n	1f332 <send_mldv2_raw+0x1c2>
	pkt->ipv6_ext_len = len;
   1f2c6:	2308      	movs	r3, #8
   1f2c8:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
		goto drop;
	}

	net_pkt_set_ipv6_ext_len(pkt, ROUTER_ALERT_LEN);

	net_pkt_write_be16(pkt, pkt->frags,
   1f2cc:	68a6      	ldr	r6, [r4, #8]
	return net_calc_chksum(pkt, IPPROTO_ICMPV6);
   1f2ce:	213a      	movs	r1, #58	; 0x3a
   1f2d0:	4620      	mov	r0, r4
   1f2d2:	f7fe faf0 	bl	1d8b6 <net_calc_chksum>
			   NET_IPV6H_LEN + ROUTER_ALERT_LEN + 2,
			   &pos, ntohs(~net_calc_chksum_icmpv6(pkt)));
   1f2d6:	ea6f 2020 	mvn.w	r0, r0, asr #8
   1f2da:	b2c5      	uxtb	r5, r0
   1f2dc:	213a      	movs	r1, #58	; 0x3a
   1f2de:	4620      	mov	r0, r4
   1f2e0:	f7fe fae9 	bl	1d8b6 <net_calc_chksum>
   1f2e4:	43c0      	mvns	r0, r0
   1f2e6:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
	net_pkt_write_be16(pkt, pkt->frags,
   1f2ea:	b280      	uxth	r0, r0
						 struct net_buf *frag,
						 u16_t offset,
						 u16_t *pos,
						 u16_t data)
{
	u16_t value = htons(data);
   1f2ec:	0a03      	lsrs	r3, r0, #8
   1f2ee:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   1f2f2:	f8ad 001c 	strh.w	r0, [sp, #28]

	return net_pkt_write(pkt, frag, offset, pos, sizeof(u16_t),
   1f2f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f2fa:	9302      	str	r3, [sp, #8]
   1f2fc:	ab07      	add	r3, sp, #28
   1f2fe:	9301      	str	r3, [sp, #4]
   1f300:	2302      	movs	r3, #2
   1f302:	9300      	str	r3, [sp, #0]
   1f304:	f10d 031e 	add.w	r3, sp, #30
   1f308:	2232      	movs	r2, #50	; 0x32
   1f30a:	4631      	mov	r1, r6
   1f30c:	4620      	mov	r0, r4
   1f30e:	f7fd fe58 	bl	1cfc2 <net_pkt_write>

	ret = net_send_data(pkt);
   1f312:	4620      	mov	r0, r4
   1f314:	f7fb f864 	bl	1a3e0 <net_send_data>
	if (ret < 0) {
   1f318:	1e05      	subs	r5, r0, #0
   1f31a:	db0a      	blt.n	1f332 <send_mldv2_raw+0x1c2>
	net_stats.icmp.sent++;
   1f31c:	4b0d      	ldr	r3, [pc, #52]	; (1f354 <send_mldv2_raw+0x1e4>)
   1f31e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1f320:	3201      	adds	r2, #1
   1f322:	639a      	str	r2, [r3, #56]	; 0x38
	net_stats.ipv6_mld.recv++;
}

static inline void net_stats_update_ipv6_mld_sent(void)
{
	net_stats.ipv6_mld.sent++;
   1f324:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
   1f328:	3201      	adds	r2, #1
   1f32a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}

	net_stats_update_icmp_sent();
	net_stats_update_ipv6_mld_sent();

	return 0;
   1f32e:	2500      	movs	r5, #0
   1f330:	e00b      	b.n	1f34a <send_mldv2_raw+0x1da>

drop:
	net_pkt_unref(pkt);
   1f332:	4620      	mov	r0, r4
   1f334:	f7fd fc55 	bl	1cbe2 <net_pkt_unref>
	net_stats.icmp.drop++;
   1f338:	4b06      	ldr	r3, [pc, #24]	; (1f354 <send_mldv2_raw+0x1e4>)
   1f33a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   1f33c:	3201      	adds	r2, #1
   1f33e:	63da      	str	r2, [r3, #60]	; 0x3c
}

static inline void net_stats_update_ipv6_mld_drop(void)
{
	net_stats.ipv6_mld.drop++;
   1f340:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
   1f344:	3201      	adds	r2, #1
   1f346:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	net_stats_update_icmp_drop();
	net_stats_update_ipv6_mld_drop();

	return ret;
}
   1f34a:	4628      	mov	r0, r5
   1f34c:	b00d      	add	sp, #52	; 0x34
   1f34e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1f352:	bf00      	nop
   1f354:	200029e8 	.word	0x200029e8

0001f358 <send_mldv2>:

static int send_mldv2(struct net_if *iface, const struct in6_addr *addr,
		      u8_t mode)
{
   1f358:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f35a:	b083      	sub	sp, #12
   1f35c:	4605      	mov	r5, r0
   1f35e:	460e      	mov	r6, r1
   1f360:	4617      	mov	r7, r2
   1f362:	6843      	ldr	r3, [r0, #4]
   1f364:	689b      	ldr	r3, [r3, #8]
   1f366:	2100      	movs	r1, #0
   1f368:	4798      	blx	r3
	struct net_pkt *pkt;
	int ret;

	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, NULL),
   1f36a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1f36e:	f7fd fbc7 	bl	1cb00 <net_pkt_get_reserve_tx>
   1f372:	4604      	mov	r4, r0
	u16_t value = sys_cpu_to_be16(data);
   1f374:	aa02      	add	r2, sp, #8
   1f376:	f44f 7380 	mov.w	r3, #256	; 0x100
   1f37a:	f822 3d02 	strh.w	r3, [r2, #-2]!
	return net_pkt_append(pkt, len, data, timeout) == len;
   1f37e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f382:	2102      	movs	r1, #2
   1f384:	f7fd fd65 	bl	1ce52 <net_pkt_append>
				     K_FOREVER);

	net_pkt_append_be16(pkt, 1); /* number of records */

	pkt = create_mldv2(pkt, addr, mode, 1);
   1f388:	2301      	movs	r3, #1
   1f38a:	463a      	mov	r2, r7
   1f38c:	4631      	mov	r1, r6
   1f38e:	4620      	mov	r0, r4
   1f390:	f7ff fdec 	bl	1ef6c <create_mldv2>
   1f394:	4604      	mov	r4, r0

	ret = send_mldv2_raw(iface, pkt->frags);
   1f396:	6881      	ldr	r1, [r0, #8]
   1f398:	4628      	mov	r0, r5
   1f39a:	f7ff fee9 	bl	1f170 <send_mldv2_raw>
   1f39e:	4605      	mov	r5, r0

	pkt->frags = NULL;
   1f3a0:	2300      	movs	r3, #0
   1f3a2:	60a3      	str	r3, [r4, #8]

	net_pkt_unref(pkt);
   1f3a4:	4620      	mov	r0, r4
   1f3a6:	f7fd fc1c 	bl	1cbe2 <net_pkt_unref>

	return ret;
}
   1f3aa:	4628      	mov	r0, r5
   1f3ac:	b003      	add	sp, #12
   1f3ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001f3b0 <send_mld_report>:

	return ret;
}

static void send_mld_report(struct net_if *iface)
{
   1f3b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f3b2:	b087      	sub	sp, #28
   1f3b4:	4605      	mov	r5, r0
   1f3b6:	6843      	ldr	r3, [r0, #4]
   1f3b8:	689b      	ldr	r3, [r3, #8]
   1f3ba:	2100      	movs	r1, #0
   1f3bc:	4798      	blx	r3
	struct net_pkt *pkt;
	int i, count = 0;

	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, NULL),
   1f3be:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1f3c2:	f7fd fb9d 	bl	1cb00 <net_pkt_get_reserve_tx>
   1f3c6:	4606      	mov	r6, r0
   1f3c8:	2400      	movs	r4, #0
   1f3ca:	aa06      	add	r2, sp, #24
   1f3cc:	f802 4d04 	strb.w	r4, [r2, #-4]!
   1f3d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f3d4:	2101      	movs	r1, #1
   1f3d6:	f7fd fd3c 	bl	1ce52 <net_pkt_append>
	int i, count = 0;
   1f3da:	4627      	mov	r7, r4
				     K_FOREVER);

	net_pkt_append_u8(pkt, 0); /* This will be the record count */

	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   1f3dc:	e000      	b.n	1f3e0 <send_mld_report+0x30>
   1f3de:	3401      	adds	r4, #1
   1f3e0:	2c04      	cmp	r4, #4
   1f3e2:	dc1e      	bgt.n	1f422 <send_mld_report+0x72>
		if (!iface->ipv6.mcast[i].is_used ||
   1f3e4:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1f3e8:	00d3      	lsls	r3, r2, #3
   1f3ea:	442b      	add	r3, r5
   1f3ec:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
   1f3f0:	f013 0f01 	tst.w	r3, #1
   1f3f4:	d0f3      	beq.n	1f3de <send_mld_report+0x2e>
		    !iface->ipv6.mcast[i].is_joined) {
   1f3f6:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1f3fa:	00d3      	lsls	r3, r2, #3
   1f3fc:	461a      	mov	r2, r3
   1f3fe:	442b      	add	r3, r5
   1f400:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
		if (!iface->ipv6.mcast[i].is_used ||
   1f404:	f013 0f02 	tst.w	r3, #2
   1f408:	d0e9      	beq.n	1f3de <send_mld_report+0x2e>
			continue;
		}

		pkt = create_mldv2(pkt, &iface->ipv6.mcast[i].address.in6_addr,
   1f40a:	f502 71b0 	add.w	r1, r2, #352	; 0x160
   1f40e:	4429      	add	r1, r5
   1f410:	2300      	movs	r3, #0
   1f412:	2202      	movs	r2, #2
   1f414:	3118      	adds	r1, #24
   1f416:	4630      	mov	r0, r6
   1f418:	f7ff fda8 	bl	1ef6c <create_mldv2>
   1f41c:	4606      	mov	r6, r0
				   NET_IPV6_MLDv2_MODE_IS_EXCLUDE, 0);
		count++;
   1f41e:	3701      	adds	r7, #1
   1f420:	e7dd      	b.n	1f3de <send_mld_report+0x2e>
	}

	if (count > 0) {
   1f422:	2f00      	cmp	r7, #0
   1f424:	dd16      	ble.n	1f454 <send_mld_report+0xa4>
		u16_t pos;

		/* Write back the record count */
		net_pkt_write_u8(pkt, pkt->frags, 0, &pos, count);
   1f426:	68b1      	ldr	r1, [r6, #8]
   1f428:	f88d 7015 	strb.w	r7, [sp, #21]
	return net_pkt_write(pkt, frag, offset, pos, sizeof(u8_t),
   1f42c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f430:	9302      	str	r3, [sp, #8]
   1f432:	f10d 0315 	add.w	r3, sp, #21
   1f436:	9301      	str	r3, [sp, #4]
   1f438:	2301      	movs	r3, #1
   1f43a:	9300      	str	r3, [sp, #0]
   1f43c:	f10d 0316 	add.w	r3, sp, #22
   1f440:	2200      	movs	r2, #0
   1f442:	4630      	mov	r0, r6
   1f444:	f7fd fdbd 	bl	1cfc2 <net_pkt_write>

		send_mldv2_raw(iface, pkt->frags);
   1f448:	68b1      	ldr	r1, [r6, #8]
   1f44a:	4628      	mov	r0, r5
   1f44c:	f7ff fe90 	bl	1f170 <send_mldv2_raw>

		pkt->frags = NULL;
   1f450:	2300      	movs	r3, #0
   1f452:	60b3      	str	r3, [r6, #8]
	}

	net_pkt_unref(pkt);
   1f454:	4630      	mov	r0, r6
   1f456:	f7fd fbc4 	bl	1cbe2 <net_pkt_unref>
}
   1f45a:	b007      	add	sp, #28
   1f45c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0001f460 <handle_mld_query>:

static enum net_verdict handle_mld_query(struct net_pkt *pkt)
{
   1f460:	b570      	push	{r4, r5, r6, lr}
   1f462:	b08a      	sub	sp, #40	; 0x28
   1f464:	4605      	mov	r5, r0
	return net_buf_frags_len(pkt->frags);
   1f466:	6883      	ldr	r3, [r0, #8]
	size_t bytes = 0;
   1f468:	2200      	movs	r2, #0
   1f46a:	e002      	b.n	1f472 <handle_mld_query+0x12>
		bytes += buf->len;
   1f46c:	8999      	ldrh	r1, [r3, #12]
   1f46e:	440a      	add	r2, r1
		buf = buf->frags;
   1f470:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   1f472:	2b00      	cmp	r3, #0
   1f474:	d1fa      	bne.n	1f46c <handle_mld_query+0xc>
	u16_t total_len = net_pkt_get_len(pkt);
   1f476:	b294      	uxth	r4, r2
	net_stats.ipv6_mld.recv++;
   1f478:	4a37      	ldr	r2, [pc, #220]	; (1f558 <handle_mld_query+0xf8>)
   1f47a:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
   1f47e:	3301      	adds	r3, #1
   1f480:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

	net_stats_update_ipv6_mld_recv();

	/* offset tells now where the ICMPv6 header is starting */
	frag = net_frag_get_pos(pkt,
				net_pkt_ip_hdr_len(pkt) +
   1f484:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
				net_pkt_ipv6_ext_len(pkt) +
   1f488:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
				net_pkt_ip_hdr_len(pkt) +
   1f48c:	4419      	add	r1, r3
	frag = net_frag_get_pos(pkt,
   1f48e:	3104      	adds	r1, #4
   1f490:	f10d 0212 	add.w	r2, sp, #18
   1f494:	b289      	uxth	r1, r1
   1f496:	4628      	mov	r0, r5
   1f498:	f7fd fe72 	bl	1d180 <net_frag_get_pos>
				sizeof(struct net_icmp_hdr),
				&offset);

	frag = net_frag_read_be16(frag, offset, &pos, &max_rsp_code);
   1f49c:	f10d 0316 	add.w	r3, sp, #22
   1f4a0:	aa04      	add	r2, sp, #16
   1f4a2:	f8bd 1012 	ldrh.w	r1, [sp, #18]
   1f4a6:	f7fd fd62 	bl	1cf6e <net_frag_read_be16>
	frag = net_frag_skip(frag, pos, &pos, 2); /* two reserved bytes */
   1f4aa:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	return net_frag_read(frag, offset, pos, len, NULL);
   1f4ae:	2600      	movs	r6, #0
   1f4b0:	9600      	str	r6, [sp, #0]
   1f4b2:	2302      	movs	r3, #2
   1f4b4:	aa04      	add	r2, sp, #16
   1f4b6:	f7fd fd12 	bl	1cede <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(mcast), mcast.s6_addr);
   1f4ba:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   1f4be:	ab06      	add	r3, sp, #24
   1f4c0:	9300      	str	r3, [sp, #0]
   1f4c2:	2310      	movs	r3, #16
   1f4c4:	eb0d 0203 	add.w	r2, sp, r3
   1f4c8:	f7fd fd09 	bl	1cede <net_frag_read>
	frag = net_frag_skip(frag, pos, &pos, 2); /* skip S, QRV & QQIC */
   1f4cc:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   1f4d0:	9600      	str	r6, [sp, #0]
   1f4d2:	2302      	movs	r3, #2
   1f4d4:	aa04      	add	r2, sp, #16
   1f4d6:	f7fd fd02 	bl	1cede <net_frag_read>
	frag = net_frag_read_be16(pkt->frags, pos, &pos, &num_src);
   1f4da:	ab05      	add	r3, sp, #20
   1f4dc:	aa04      	add	r2, sp, #16
   1f4de:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   1f4e2:	68a8      	ldr	r0, [r5, #8]
   1f4e4:	f7fd fd43 	bl	1cf6e <net_frag_read_be16>
	if (!frag && pos == 0xffff) {
   1f4e8:	b358      	cbz	r0, 1f542 <handle_mld_query+0xe2>
		goto drop;
	}

	pkt_len = sizeof(struct net_ipv6_hdr) +	net_pkt_ipv6_ext_len(pkt) +
   1f4ea:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
		sizeof(struct net_icmp_hdr) + (2 + 2 + 16 + 2 + 2) +
		sizeof(struct in6_addr) * num_src;
   1f4ee:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   1f4f2:	0112      	lsls	r2, r2, #4
   1f4f4:	b292      	uxth	r2, r2
		sizeof(struct net_icmp_hdr) + (2 + 2 + 16 + 2 + 2) +
   1f4f6:	4413      	add	r3, r2
   1f4f8:	b29b      	uxth	r3, r3
	pkt_len = sizeof(struct net_ipv6_hdr) +	net_pkt_ipv6_ext_len(pkt) +
   1f4fa:	3344      	adds	r3, #68	; 0x44
   1f4fc:	b29b      	uxth	r3, r3

	if ((total_len < pkt_len || pkt_len > NET_IPV6_MTU ||
   1f4fe:	429c      	cmp	r4, r3
   1f500:	d307      	bcc.n	1f512 <handle_mld_query+0xb2>
   1f502:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
   1f506:	d804      	bhi.n	1f512 <handle_mld_query+0xb2>
	return pkt->frags->data;
   1f508:	68ab      	ldr	r3, [r5, #8]
   1f50a:	689b      	ldr	r3, [r3, #8]
	     (NET_IPV6_HDR(pkt)->hop_limit != 1))) {
   1f50c:	79db      	ldrb	r3, [r3, #7]
	if ((total_len < pkt_len || pkt_len > NET_IPV6_MTU ||
   1f50e:	2b01      	cmp	r3, #1
   1f510:	d006      	beq.n	1f520 <handle_mld_query+0xc0>
		struct net_icmp_hdr hdr, *icmp_hdr;

		icmp_hdr = net_icmpv6_get_hdr(pkt, &hdr);
   1f512:	a903      	add	r1, sp, #12
   1f514:	4628      	mov	r0, r5
   1f516:	f7fe fc68 	bl	1ddea <net_icmpv6_get_hdr>
		if (!icmp_hdr || icmp_hdr->code != 0) {
   1f51a:	b148      	cbz	r0, 1f530 <handle_mld_query+0xd0>
   1f51c:	7843      	ldrb	r3, [r0, #1]
   1f51e:	b93b      	cbnz	r3, 1f530 <handle_mld_query+0xd0>
			goto drop;
		}
	}

	/* Currently we only support a unspecified address query. */
	if (!net_ipv6_addr_cmp(&mcast, net_ipv6_unspecified_address())) {
   1f520:	f7ff fd20 	bl	1ef64 <net_ipv6_unspecified_address>
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   1f524:	2210      	movs	r2, #16
   1f526:	4601      	mov	r1, r0
   1f528:	a806      	add	r0, sp, #24
   1f52a:	f00b fa17 	bl	2a95c <memcmp>
   1f52e:	b178      	cbz	r0, 1f550 <handle_mld_query+0xf0>
	net_stats.ipv6_mld.drop++;
   1f530:	4a09      	ldr	r2, [pc, #36]	; (1f558 <handle_mld_query+0xf8>)
   1f532:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
   1f536:	3301      	adds	r3, #1
   1f538:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

drop:
	net_stats_update_ipv6_mld_drop();

	return NET_DROP;
}
   1f53c:	2002      	movs	r0, #2
   1f53e:	b00a      	add	sp, #40	; 0x28
   1f540:	bd70      	pop	{r4, r5, r6, pc}
	if (!frag && pos == 0xffff) {
   1f542:	f8bd 2010 	ldrh.w	r2, [sp, #16]
   1f546:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1f54a:	429a      	cmp	r2, r3
   1f54c:	d1cd      	bne.n	1f4ea <handle_mld_query+0x8a>
   1f54e:	e7ef      	b.n	1f530 <handle_mld_query+0xd0>
	send_mld_report(net_pkt_iface(pkt));
   1f550:	6968      	ldr	r0, [r5, #20]
   1f552:	f7ff ff2d 	bl	1f3b0 <send_mld_report>
   1f556:	e7eb      	b.n	1f530 <handle_mld_query+0xd0>
   1f558:	200029e8 	.word	0x200029e8

0001f55c <net_ipv6_finalize>:
{
   1f55c:	b508      	push	{r3, lr}
   1f55e:	460b      	mov	r3, r1
	if (context->flags & NET_CONTEXT_PROTO) {
   1f560:	f890 205d 	ldrb.w	r2, [r0, #93]	; 0x5d
   1f564:	f012 0f40 	tst.w	r2, #64	; 0x40
   1f568:	d104      	bne.n	1f574 <net_ipv6_finalize+0x18>
	return IPPROTO_UDP;
   1f56a:	2111      	movs	r1, #17
	return net_ipv6_finalize_raw(pkt, net_context_get_ip_proto(context));
   1f56c:	4618      	mov	r0, r3
   1f56e:	f7ff fdd2 	bl	1f116 <net_ipv6_finalize_raw>
}
   1f572:	bd08      	pop	{r3, pc}
		return IPPROTO_TCP;
   1f574:	2106      	movs	r1, #6
   1f576:	e7f9      	b.n	1f56c <net_ipv6_finalize+0x10>

0001f578 <net_ipv6_nbr_lookup>:
{
   1f578:	b508      	push	{r3, lr}
	return nbr_lookup(&net_neighbor.table, iface, addr);
   1f57a:	460a      	mov	r2, r1
   1f57c:	4601      	mov	r1, r0
   1f57e:	4802      	ldr	r0, [pc, #8]	; (1f588 <net_ipv6_nbr_lookup+0x10>)
   1f580:	f7ff fb42 	bl	1ec08 <nbr_lookup>
}
   1f584:	bd08      	pop	{r3, pc}
   1f586:	bf00      	nop
   1f588:	2000bddc 	.word	0x2000bddc

0001f58c <net_ipv6_send_na>:
{
   1f58c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f590:	b093      	sub	sp, #76	; 0x4c
   1f592:	4605      	mov	r5, r0
   1f594:	468b      	mov	fp, r1
   1f596:	4692      	mov	sl, r2
   1f598:	4699      	mov	r9, r3
   1f59a:	6843      	ldr	r3, [r0, #4]
   1f59c:	689b      	ldr	r3, [r3, #8]
   1f59e:	4611      	mov	r1, r2
   1f5a0:	4798      	blx	r3
	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, dst),
   1f5a2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1f5a6:	f7fd faab 	bl	1cb00 <net_pkt_get_reserve_tx>
   1f5aa:	4604      	mov	r4, r0
	frag = net_pkt_get_frag(pkt, K_FOREVER);
   1f5ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1f5b0:	f7fd fac4 	bl	1cb3c <net_pkt_get_frag>
   1f5b4:	4607      	mov	r7, r0
	net_pkt_frag_add(pkt, frag);
   1f5b6:	4601      	mov	r1, r0
   1f5b8:	4620      	mov	r0, r4
   1f5ba:	f7fd fb3c 	bl	1cc36 <net_pkt_frag_add>
	pkt->iface = iface;
   1f5be:	6165      	str	r5, [r4, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   1f5c0:	7d6b      	ldrb	r3, [r5, #21]
   1f5c2:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   1f5c6:	7d6b      	ldrb	r3, [r5, #21]
   1f5c8:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	pkt->family = family;
   1f5cc:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   1f5d0:	220a      	movs	r2, #10
   1f5d2:	f362 03c6 	bfi	r3, r2, #3, #4
   1f5d6:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	pkt->ip_hdr_len = len;
   1f5da:	2328      	movs	r3, #40	; 0x28
   1f5dc:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
	return pkt->frags->data;
   1f5e0:	68a3      	ldr	r3, [r4, #8]
   1f5e2:	6898      	ldr	r0, [r3, #8]
	return pkt->ll_reserve;
   1f5e4:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
	memset(net_pkt_ll(pkt), 0, net_pkt_ll_reserve(pkt));
   1f5e8:	461a      	mov	r2, r3
   1f5ea:	2100      	movs	r1, #0
   1f5ec:	1ac0      	subs	r0, r0, r3
   1f5ee:	f00b fa49 	bl	2aa84 <memset>
	net_pkt_ll_src(pkt)->addr = NULL;
   1f5f2:	2300      	movs	r3, #0
   1f5f4:	6223      	str	r3, [r4, #32]
	net_pkt_ll_src(pkt)->len = 0;
   1f5f6:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	if (iface->link_addr.len == 6) {
   1f5fa:	7d2b      	ldrb	r3, [r5, #20]
   1f5fc:	2b06      	cmp	r3, #6
   1f5fe:	f000 8092 	beq.w	1f726 <net_ipv6_send_na+0x19a>
	} else if (iface->link_addr.len == 8) {
   1f602:	2b08      	cmp	r3, #8
   1f604:	f000 808d 	beq.w	1f722 <net_ipv6_send_na+0x196>
	return 0;
   1f608:	2600      	movs	r6, #0
	pkt->ipv6_ext_len = len;
   1f60a:	f04f 0800 	mov.w	r8, #0
   1f60e:	f884 803b 	strb.w	r8, [r4, #59]	; 0x3b
	setup_headers(pkt, sizeof(struct net_icmpv6_na_hdr) + llao_len,
   1f612:	f106 0514 	add.w	r5, r6, #20
   1f616:	2288      	movs	r2, #136	; 0x88
   1f618:	f005 01fc 	and.w	r1, r5, #252	; 0xfc
   1f61c:	4620      	mov	r0, r4
   1f61e:	f7ff fc0c 	bl	1ee3a <setup_headers>
	net_buf_add(frag, sizeof(struct net_icmpv6_na_hdr) + llao_len);
   1f622:	4629      	mov	r1, r5
   1f624:	f107 0008 	add.w	r0, r7, #8
   1f628:	f7fa fdb8 	bl	1a19c <net_buf_simple_add>
	na_hdr = net_icmpv6_get_na_hdr(pkt, &hdr);
   1f62c:	a901      	add	r1, sp, #4
   1f62e:	4620      	mov	r0, r4
   1f630:	f7fe fdd8 	bl	1e1e4 <net_icmpv6_get_na_hdr>
   1f634:	4607      	mov	r7, r0
	return pkt->frags->data;
   1f636:	68a3      	ldr	r3, [r4, #8]
   1f638:	f8d3 e008 	ldr.w	lr, [r3, #8]
	net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src, src);
   1f63c:	ad06      	add	r5, sp, #24
   1f63e:	f8db 0000 	ldr.w	r0, [fp]
   1f642:	f8db 1004 	ldr.w	r1, [fp, #4]
   1f646:	f8db 2008 	ldr.w	r2, [fp, #8]
   1f64a:	f8db 300c 	ldr.w	r3, [fp, #12]
   1f64e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1f650:	ad06      	add	r5, sp, #24
   1f652:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1f654:	f8ce 0008 	str.w	r0, [lr, #8]
   1f658:	f8ce 100c 	str.w	r1, [lr, #12]
   1f65c:	f8ce 2010 	str.w	r2, [lr, #16]
   1f660:	f8ce 3014 	str.w	r3, [lr, #20]
   1f664:	68a3      	ldr	r3, [r4, #8]
   1f666:	f8d3 c008 	ldr.w	ip, [r3, #8]
	net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst, dst);
   1f66a:	ad0a      	add	r5, sp, #40	; 0x28
   1f66c:	f8da 0000 	ldr.w	r0, [sl]
   1f670:	f8da 1004 	ldr.w	r1, [sl, #4]
   1f674:	f8da 2008 	ldr.w	r2, [sl, #8]
   1f678:	f8da 300c 	ldr.w	r3, [sl, #12]
   1f67c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1f67e:	ad0a      	add	r5, sp, #40	; 0x28
   1f680:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1f682:	f8cc 0018 	str.w	r0, [ip, #24]
   1f686:	f8cc 101c 	str.w	r1, [ip, #28]
   1f68a:	f8cc 2020 	str.w	r2, [ip, #32]
   1f68e:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
	net_ipaddr_copy(&na_hdr->tgt, tgt);
   1f692:	ad0e      	add	r5, sp, #56	; 0x38
   1f694:	f8d9 0000 	ldr.w	r0, [r9]
   1f698:	f8d9 1004 	ldr.w	r1, [r9, #4]
   1f69c:	f8d9 2008 	ldr.w	r2, [r9, #8]
   1f6a0:	f8d9 300c 	ldr.w	r3, [r9, #12]
   1f6a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1f6a6:	ad0e      	add	r5, sp, #56	; 0x38
   1f6a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1f6aa:	6078      	str	r0, [r7, #4]
   1f6ac:	60b9      	str	r1, [r7, #8]
   1f6ae:	60fa      	str	r2, [r7, #12]
   1f6b0:	613b      	str	r3, [r7, #16]
	return pkt->iface;
   1f6b2:	f8d4 a014 	ldr.w	sl, [r4, #20]
		 (u8_t *)net_pkt_icmp_data(pkt) + sizeof(struct net_icmp_hdr) +
   1f6b6:	4620      	mov	r0, r4
   1f6b8:	f7fd fd6c 	bl	1d194 <net_pkt_icmp_data>
	set_llao(&net_pkt_iface(pkt)->link_addr,
   1f6bc:	f100 0518 	add.w	r5, r0, #24
	llao[NET_ICMPV6_OPT_TYPE_OFFSET] = type;
   1f6c0:	2302      	movs	r3, #2
   1f6c2:	7603      	strb	r3, [r0, #24]
	llao[NET_ICMPV6_OPT_LEN_OFFSET] = llao_len >> 3;
   1f6c4:	08f3      	lsrs	r3, r6, #3
   1f6c6:	7643      	strb	r3, [r0, #25]
	memcpy(&llao[NET_ICMPV6_OPT_DATA_OFFSET], lladdr->addr, lladdr->len);
   1f6c8:	f89a 2014 	ldrb.w	r2, [sl, #20]
   1f6cc:	f8da 1010 	ldr.w	r1, [sl, #16]
   1f6d0:	301a      	adds	r0, #26
   1f6d2:	f7e0 fdf5 	bl	2c0 <memcpy>
	memset(&llao[NET_ICMPV6_OPT_DATA_OFFSET + lladdr->len], 0,
   1f6d6:	f89a 2014 	ldrb.w	r2, [sl, #20]
   1f6da:	1c90      	adds	r0, r2, #2
	       llao_len - lladdr->len - 2);
   1f6dc:	1ab2      	subs	r2, r6, r2
	memset(&llao[NET_ICMPV6_OPT_DATA_OFFSET + lladdr->len], 0,
   1f6de:	3a02      	subs	r2, #2
   1f6e0:	4641      	mov	r1, r8
   1f6e2:	4428      	add	r0, r5
   1f6e4:	f00b f9ce 	bl	2aa84 <memset>
	na_hdr->flags = flags;
   1f6e8:	f89d 3070 	ldrb.w	r3, [sp, #112]	; 0x70
   1f6ec:	703b      	strb	r3, [r7, #0]
	net_icmpv6_set_na_hdr(pkt, na_hdr);
   1f6ee:	4639      	mov	r1, r7
   1f6f0:	4620      	mov	r0, r4
   1f6f2:	f7fe fdac 	bl	1e24e <net_icmpv6_set_na_hdr>
	pkt->frags->len = NET_IPV6ICMPH_LEN +
   1f6f6:	68a3      	ldr	r3, [r4, #8]
		sizeof(struct net_icmpv6_na_hdr) + llao_len;
   1f6f8:	3640      	adds	r6, #64	; 0x40
	pkt->frags->len = NET_IPV6ICMPH_LEN +
   1f6fa:	819e      	strh	r6, [r3, #12]
	net_icmpv6_set_chksum(pkt, pkt->frags);
   1f6fc:	68a1      	ldr	r1, [r4, #8]
   1f6fe:	4620      	mov	r0, r4
   1f700:	f7fe fb26 	bl	1dd50 <net_icmpv6_set_chksum>
	if (net_send_data(pkt) < 0) {
   1f704:	4620      	mov	r0, r4
   1f706:	f7fa fe6b 	bl	1a3e0 <net_send_data>
   1f70a:	4540      	cmp	r0, r8
   1f70c:	db0d      	blt.n	1f72a <net_ipv6_send_na+0x19e>
	net_stats.ipv6_nd.sent++;
   1f70e:	4a0d      	ldr	r2, [pc, #52]	; (1f744 <net_ipv6_send_na+0x1b8>)
   1f710:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
   1f714:	3301      	adds	r3, #1
   1f716:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
	return 0;
   1f71a:	4640      	mov	r0, r8
}
   1f71c:	b013      	add	sp, #76	; 0x4c
   1f71e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return 16;
   1f722:	2610      	movs	r6, #16
   1f724:	e771      	b.n	1f60a <net_ipv6_send_na+0x7e>
		return 8;
   1f726:	2608      	movs	r6, #8
   1f728:	e76f      	b.n	1f60a <net_ipv6_send_na+0x7e>
	net_pkt_unref(pkt);
   1f72a:	4620      	mov	r0, r4
   1f72c:	f7fd fa59 	bl	1cbe2 <net_pkt_unref>
	net_stats.ipv6_nd.drop++;
   1f730:	4a04      	ldr	r2, [pc, #16]	; (1f744 <net_ipv6_send_na+0x1b8>)
   1f732:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
   1f736:	3301      	adds	r3, #1
   1f738:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
	return -EINVAL;
   1f73c:	f06f 0015 	mvn.w	r0, #21
   1f740:	e7ec      	b.n	1f71c <net_ipv6_send_na+0x190>
   1f742:	bf00      	nop
   1f744:	200029e8 	.word	0x200029e8

0001f748 <net_ipv6_nbr_set_reachable_timer>:
{
   1f748:	b508      	push	{r3, lr}
   1f74a:	68c9      	ldr	r1, [r1, #12]
   1f74c:	f8d0 228c 	ldr.w	r2, [r0, #652]	; 0x28c
   1f750:	3114      	adds	r1, #20
   1f752:	4802      	ldr	r0, [pc, #8]	; (1f75c <net_ipv6_nbr_set_reachable_timer+0x14>)
   1f754:	f009 fe6a 	bl	2942c <k_delayed_work_submit_to_queue>
   1f758:	bd08      	pop	{r3, pc}
   1f75a:	bf00      	nop
   1f75c:	20002b08 	.word	0x20002b08

0001f760 <handle_na_input>:
{
   1f760:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1f764:	b090      	sub	sp, #64	; 0x40
   1f766:	4604      	mov	r4, r0
	return net_buf_frags_len(pkt->frags);
   1f768:	6883      	ldr	r3, [r0, #8]
	size_t bytes = 0;
   1f76a:	2200      	movs	r2, #0
   1f76c:	e002      	b.n	1f774 <handle_na_input+0x14>
		bytes += buf->len;
   1f76e:	8999      	ldrh	r1, [r3, #12]
   1f770:	440a      	add	r2, r1
		buf = buf->frags;
   1f772:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   1f774:	2b00      	cmp	r3, #0
   1f776:	d1fa      	bne.n	1f76e <handle_na_input+0xe>
	u16_t total_len = net_pkt_get_len(pkt);
   1f778:	b295      	uxth	r5, r2
	na_hdr = net_icmpv6_get_na_hdr(pkt, &nahdr);
   1f77a:	a90a      	add	r1, sp, #40	; 0x28
   1f77c:	4620      	mov	r0, r4
   1f77e:	f7fe fd31 	bl	1e1e4 <net_icmpv6_get_na_hdr>
   1f782:	4607      	mov	r7, r0
	net_stats.ipv6_nd.recv++;
   1f784:	4aaf      	ldr	r2, [pc, #700]	; (1fa44 <handle_na_input+0x2e4>)
   1f786:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
   1f78a:	3301      	adds	r3, #1
   1f78c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	if ((total_len < (sizeof(struct net_ipv6_hdr) +
   1f790:	2d41      	cmp	r5, #65	; 0x41
   1f792:	d904      	bls.n	1f79e <handle_na_input+0x3e>
	return pkt->frags->data;
   1f794:	68a3      	ldr	r3, [r4, #8]
   1f796:	689b      	ldr	r3, [r3, #8]
	    (NET_IPV6_HDR(pkt)->hop_limit != NET_IPV6_ND_HOP_LIMIT) ||
   1f798:	79db      	ldrb	r3, [r3, #7]
			  sizeof(struct net_icmpv6_nd_opt_hdr))) ||
   1f79a:	2bff      	cmp	r3, #255	; 0xff
   1f79c:	d010      	beq.n	1f7c0 <handle_na_input+0x60>
		icmp_hdr = net_icmpv6_get_hdr(pkt, &hdr);
   1f79e:	a905      	add	r1, sp, #20
   1f7a0:	4620      	mov	r0, r4
   1f7a2:	f7fe fb22 	bl	1ddea <net_icmpv6_get_hdr>
		if (!icmp_hdr || icmp_hdr->code != 0) {
   1f7a6:	b108      	cbz	r0, 1f7ac <handle_na_input+0x4c>
   1f7a8:	7843      	ldrb	r3, [r0, #1]
   1f7aa:	b1cb      	cbz	r3, 1f7e0 <handle_na_input+0x80>
	net_stats.ipv6_nd.drop++;
   1f7ac:	4aa5      	ldr	r2, [pc, #660]	; (1fa44 <handle_na_input+0x2e4>)
   1f7ae:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
   1f7b2:	3301      	adds	r3, #1
   1f7b4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
	return NET_DROP;
   1f7b8:	2002      	movs	r0, #2
}
   1f7ba:	b010      	add	sp, #64	; 0x40
   1f7bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return addr->s6_addr[0] == 0xFF;
   1f7c0:	7903      	ldrb	r3, [r0, #4]
	    (NET_IPV6_HDR(pkt)->hop_limit != NET_IPV6_ND_HOP_LIMIT) ||
   1f7c2:	2bff      	cmp	r3, #255	; 0xff
   1f7c4:	d0eb      	beq.n	1f79e <handle_na_input+0x3e>
	na_hdr = net_icmpv6_get_na_hdr(pkt, &hdr);
   1f7c6:	a905      	add	r1, sp, #20
   1f7c8:	4620      	mov	r0, r4
   1f7ca:	f7fe fd0b 	bl	1e1e4 <net_icmpv6_get_na_hdr>
	return na_hdr->flags & NET_ICMPV6_NA_FLAG_SOLICITED;
   1f7ce:	7803      	ldrb	r3, [r0, #0]
	    net_is_ipv6_addr_mcast(&na_hdr->tgt) ||
   1f7d0:	f013 0f40 	tst.w	r3, #64	; 0x40
   1f7d4:	d004      	beq.n	1f7e0 <handle_na_input+0x80>
   1f7d6:	68a3      	ldr	r3, [r4, #8]
   1f7d8:	689b      	ldr	r3, [r3, #8]
   1f7da:	7e1b      	ldrb	r3, [r3, #24]
	    (net_is_solicited(pkt) &&
   1f7dc:	2bff      	cmp	r3, #255	; 0xff
   1f7de:	d0de      	beq.n	1f79e <handle_na_input+0x3e>
	pkt->ipv6_ext_opt_len = len;
   1f7e0:	2314      	movs	r3, #20
   1f7e2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
	nd_opt_hdr = net_icmpv6_get_nd_opt_hdr(pkt, &ndopthdr);
   1f7e6:	a90f      	add	r1, sp, #60	; 0x3c
   1f7e8:	4620      	mov	r0, r4
   1f7ea:	f7fe fcc9 	bl	1e180 <net_icmpv6_get_nd_opt_hdr>
	return net_buf_frags_len(pkt->frags);
   1f7ee:	68a3      	ldr	r3, [r4, #8]
	size_t bytes = 0;
   1f7f0:	2600      	movs	r6, #0
	while (buf) {
   1f7f2:	b11b      	cbz	r3, 1f7fc <handle_na_input+0x9c>
		bytes += buf->len;
   1f7f4:	899a      	ldrh	r2, [r3, #12]
   1f7f6:	4416      	add	r6, r2
		buf = buf->frags;
   1f7f8:	681b      	ldr	r3, [r3, #0]
   1f7fa:	e7fa      	b.n	1f7f2 <handle_na_input+0x92>
	left_len = net_pkt_get_len(pkt) - (sizeof(struct net_ipv6_hdr) +
   1f7fc:	3e2c      	subs	r6, #44	; 0x2c
	u16_t tllao_offset = 0;
   1f7fe:	2500      	movs	r5, #0
	while (nd_opt_hdr && net_pkt_ipv6_ext_opt_len(pkt) < left_len) {
   1f800:	e00b      	b.n	1f81a <handle_na_input+0xba>
					     (nd_opt_hdr->len << 3));
   1f802:	00db      	lsls	r3, r3, #3
   1f804:	b2db      	uxtb	r3, r3
		net_pkt_set_ipv6_ext_opt_len(pkt,
   1f806:	4413      	add	r3, r2
   1f808:	b2db      	uxtb	r3, r3
	pkt->ipv6_ext_opt_len = len;
   1f80a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
		if (prev_opt_len >= net_pkt_ipv6_ext_opt_len(pkt)) {
   1f80e:	4293      	cmp	r3, r2
   1f810:	d9cc      	bls.n	1f7ac <handle_na_input+0x4c>
		nd_opt_hdr = net_icmpv6_get_nd_opt_hdr(pkt, &ndopthdr);
   1f812:	a90f      	add	r1, sp, #60	; 0x3c
   1f814:	4620      	mov	r0, r4
   1f816:	f7fe fcb3 	bl	1e180 <net_icmpv6_get_nd_opt_hdr>
	while (nd_opt_hdr && net_pkt_ipv6_ext_opt_len(pkt) < left_len) {
   1f81a:	b190      	cbz	r0, 1f842 <handle_na_input+0xe2>
	return pkt->ipv6_ext_opt_len;
   1f81c:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
   1f820:	4296      	cmp	r6, r2
   1f822:	d90e      	bls.n	1f842 <handle_na_input+0xe2>
		if (!nd_opt_hdr->len) {
   1f824:	7843      	ldrb	r3, [r0, #1]
   1f826:	b163      	cbz	r3, 1f842 <handle_na_input+0xe2>
		switch (nd_opt_hdr->type) {
   1f828:	7801      	ldrb	r1, [r0, #0]
   1f82a:	2902      	cmp	r1, #2
   1f82c:	d1e9      	bne.n	1f802 <handle_na_input+0xa2>
			tllao_offset = net_pkt_ip_hdr_len(pkt) +
   1f82e:	f894 5033 	ldrb.w	r5, [r4, #51]	; 0x33
				net_pkt_ipv6_ext_len(pkt) +
   1f832:	f894 103b 	ldrb.w	r1, [r4, #59]	; 0x3b
			tllao_offset = net_pkt_ip_hdr_len(pkt) +
   1f836:	440d      	add	r5, r1
				sizeof(struct net_icmp_hdr) +
   1f838:	4415      	add	r5, r2
   1f83a:	b2ad      	uxth	r5, r5
			tllao_offset = net_pkt_ip_hdr_len(pkt) +
   1f83c:	3506      	adds	r5, #6
   1f83e:	b2ad      	uxth	r5, r5
			break;
   1f840:	e7df      	b.n	1f802 <handle_na_input+0xa2>
	return pkt->iface;
   1f842:	f8d4 8014 	ldr.w	r8, [r4, #20]
	ifaddr = net_if_ipv6_addr_lookup_by_iface(net_pkt_iface(pkt),
   1f846:	f107 0904 	add.w	r9, r7, #4
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1f84a:	2600      	movs	r6, #0
   1f84c:	e003      	b.n	1f856 <handle_na_input+0xf6>
		if (net_is_ipv6_prefix(addr->s6_addr,
   1f84e:	f1ba 0f00 	cmp.w	sl, #0
   1f852:	d11f      	bne.n	1f894 <handle_na_input+0x134>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1f854:	3601      	adds	r6, #1
   1f856:	2e02      	cmp	r6, #2
   1f858:	dc23      	bgt.n	1f8a2 <handle_na_input+0x142>
		if (!iface->ipv6.unicast[i].is_used ||
   1f85a:	236c      	movs	r3, #108	; 0x6c
   1f85c:	fb03 8306 	mla	r3, r3, r6, r8
   1f860:	f893 a094 	ldrb.w	sl, [r3, #148]	; 0x94
   1f864:	f1ba 0f00 	cmp.w	sl, #0
   1f868:	d0f4      	beq.n	1f854 <handle_na_input+0xf4>
		    iface->ipv6.unicast[i].address.family != AF_INET6) {
   1f86a:	236c      	movs	r3, #108	; 0x6c
   1f86c:	fb03 8306 	mla	r3, r3, r6, r8
   1f870:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
		if (!iface->ipv6.unicast[i].is_used ||
   1f872:	2b0a      	cmp	r3, #10
   1f874:	d1ee      	bne.n	1f854 <handle_na_input+0xf4>
			iface->ipv6.unicast[i].address.in6_addr.s6_addr,
   1f876:	216c      	movs	r1, #108	; 0x6c
   1f878:	fb01 f106 	mul.w	r1, r1, r6
   1f87c:	3120      	adds	r1, #32
   1f87e:	4441      	add	r1, r8
	if (memcmp(addr1, addr2, bytes)) {
   1f880:	2210      	movs	r2, #16
   1f882:	4411      	add	r1, r2
   1f884:	4648      	mov	r0, r9
   1f886:	f00b f869 	bl	2a95c <memcmp>
   1f88a:	2800      	cmp	r0, #0
   1f88c:	d0df      	beq.n	1f84e <handle_na_input+0xee>
		return false;
   1f88e:	f04f 0a00 	mov.w	sl, #0
   1f892:	e7dc      	b.n	1f84e <handle_na_input+0xee>
			return &iface->ipv6.unicast[i];
   1f894:	236c      	movs	r3, #108	; 0x6c
   1f896:	fb03 f306 	mul.w	r3, r3, r6
   1f89a:	3320      	adds	r3, #32
   1f89c:	4443      	add	r3, r8
   1f89e:	330c      	adds	r3, #12
   1f8a0:	e000      	b.n	1f8a4 <handle_na_input+0x144>
	return NULL;
   1f8a2:	2300      	movs	r3, #0
	if (ifaddr) {
   1f8a4:	b17b      	cbz	r3, 1f8c6 <handle_na_input+0x166>
		if (ifaddr->addr_state == NET_ADDR_TENTATIVE) {
   1f8a6:	f993 3065 	ldrsb.w	r3, [r3, #101]	; 0x65
   1f8aa:	2b00      	cmp	r3, #0
   1f8ac:	f47f af7e 	bne.w	1f7ac <handle_na_input+0x4c>
   1f8b0:	6960      	ldr	r0, [r4, #20]
	return UNALIGNED_GET(&addr->s6_addr16[0]) == htons(0xFE80);
   1f8b2:	88ba      	ldrh	r2, [r7, #4]
	if (net_is_ipv6_ll_addr(addr)) {
   1f8b4:	f248 03fe 	movw	r3, #33022	; 0x80fe
   1f8b8:	429a      	cmp	r2, r3
   1f8ba:	f43f af77 	beq.w	1f7ac <handle_na_input+0x4c>
	net_if_ipv6_dad_failed(iface, addr);
   1f8be:	4649      	mov	r1, r9
   1f8c0:	f7fb fa0a 	bl	1acd8 <net_if_ipv6_dad_failed>
   1f8c4:	e772      	b.n	1f7ac <handle_na_input+0x4c>
	struct net_linkaddr_storage lladdr = { 0 };
   1f8c6:	2300      	movs	r3, #0
   1f8c8:	9303      	str	r3, [sp, #12]
   1f8ca:	9304      	str	r3, [sp, #16]
	nbr = nbr_lookup(&net_neighbor.table, net_pkt_iface(pkt),
   1f8cc:	1d3a      	adds	r2, r7, #4
   1f8ce:	6961      	ldr	r1, [r4, #20]
   1f8d0:	485d      	ldr	r0, [pc, #372]	; (1fa48 <handle_na_input+0x2e8>)
   1f8d2:	f7ff f999 	bl	1ec08 <nbr_lookup>
	if (!nbr) {
   1f8d6:	4606      	mov	r6, r0
   1f8d8:	2800      	cmp	r0, #0
   1f8da:	f000 8107 	beq.w	1faec <handle_na_input+0x38c>
	if (tllao_offset) {
   1f8de:	b995      	cbnz	r5, 1f906 <handle_na_input+0x1a6>
	if (nbr->idx == NET_NBR_LLADDR_UNKNOWN) {
   1f8e0:	7873      	ldrb	r3, [r6, #1]
   1f8e2:	2bff      	cmp	r3, #255	; 0xff
   1f8e4:	d135      	bne.n	1f952 <handle_na_input+0x1f2>
		if (!tllao_offset) {
   1f8e6:	bb2d      	cbnz	r5, 1f934 <handle_na_input+0x1d4>
			return false;
   1f8e8:	2300      	movs	r3, #0
	if (!handle_na_neighbor(pkt, na_hdr, tllao_offset)) {
   1f8ea:	2b00      	cmp	r3, #0
   1f8ec:	f43f af5e 	beq.w	1f7ac <handle_na_input+0x4c>
	net_pkt_unref(pkt);
   1f8f0:	4620      	mov	r0, r4
   1f8f2:	f7fd f976 	bl	1cbe2 <net_pkt_unref>
	net_stats.ipv6_nd.sent++;
   1f8f6:	4a53      	ldr	r2, [pc, #332]	; (1fa44 <handle_na_input+0x2e4>)
   1f8f8:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
   1f8fc:	3301      	adds	r3, #1
   1f8fe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
	return NET_OK;
   1f902:	2000      	movs	r0, #0
   1f904:	e759      	b.n	1f7ba <handle_na_input+0x5a>
   1f906:	6963      	ldr	r3, [r4, #20]
		lladdr.len = net_pkt_iface(pkt)->link_addr.len;
   1f908:	7d1b      	ldrb	r3, [r3, #20]
   1f90a:	f88d 300d 	strb.w	r3, [sp, #13]
		frag = net_frag_read(pkt->frags, tllao_offset,
   1f90e:	f10d 020e 	add.w	r2, sp, #14
   1f912:	9200      	str	r2, [sp, #0]
   1f914:	f10d 020a 	add.w	r2, sp, #10
   1f918:	4629      	mov	r1, r5
   1f91a:	68a0      	ldr	r0, [r4, #8]
   1f91c:	f7fd fadf 	bl	1cede <net_frag_read>
		if (!frag && pos == 0xffff) {
   1f920:	2800      	cmp	r0, #0
   1f922:	d1dd      	bne.n	1f8e0 <handle_na_input+0x180>
   1f924:	f8bd 200a 	ldrh.w	r2, [sp, #10]
   1f928:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1f92c:	429a      	cmp	r2, r3
   1f92e:	d1d7      	bne.n	1f8e0 <handle_na_input+0x180>
			return false;
   1f930:	2300      	movs	r3, #0
   1f932:	e7da      	b.n	1f8ea <handle_na_input+0x18a>
		nbr_lladdr.len = lladdr.len;
   1f934:	f89d 300d 	ldrb.w	r3, [sp, #13]
   1f938:	f88d 3018 	strb.w	r3, [sp, #24]
		nbr_lladdr.addr = lladdr.addr;
   1f93c:	aa10      	add	r2, sp, #64	; 0x40
   1f93e:	f10d 030e 	add.w	r3, sp, #14
   1f942:	f842 3d2c 	str.w	r3, [r2, #-44]!
		if (net_nbr_link(nbr, net_pkt_iface(pkt), &nbr_lladdr)) {
   1f946:	6961      	ldr	r1, [r4, #20]
   1f948:	4630      	mov	r0, r6
   1f94a:	f7fe ff77 	bl	1e83c <net_nbr_link>
   1f94e:	2800      	cmp	r0, #0
   1f950:	d14a      	bne.n	1f9e8 <handle_na_input+0x288>
	cached_lladdr = net_nbr_get_lladdr(nbr->idx);
   1f952:	7870      	ldrb	r0, [r6, #1]
   1f954:	f7fe ffd8 	bl	1e908 <net_nbr_get_lladdr>
	if (!cached_lladdr) {
   1f958:	4680      	mov	r8, r0
   1f95a:	2800      	cmp	r0, #0
   1f95c:	f000 80c8 	beq.w	1faf0 <handle_na_input+0x390>
	if (tllao_offset) {
   1f960:	2d00      	cmp	r5, #0
   1f962:	d145      	bne.n	1f9f0 <handle_na_input+0x290>
	bool lladdr_changed = false;
   1f964:	2700      	movs	r7, #0
   1f966:	68f3      	ldr	r3, [r6, #12]
	if (net_ipv6_nbr_data(nbr)->state == NET_IPV6_NBR_STATE_INCOMPLETE) {
   1f968:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
   1f96c:	2b00      	cmp	r3, #0
   1f96e:	d155      	bne.n	1fa1c <handle_na_input+0x2bc>
		if (!tllao_offset) {
   1f970:	2d00      	cmp	r5, #0
   1f972:	f000 80bf 	beq.w	1faf4 <handle_na_input+0x394>
		if (lladdr_changed) {
   1f976:	b11f      	cbz	r7, 1f980 <handle_na_input+0x220>
			net_linkaddr_set(cached_lladdr, lladdr.addr,
   1f978:	f898 2001 	ldrb.w	r2, [r8, #1]
	if (new_len > NET_LINK_ADDR_MAX_LENGTH) {
   1f97c:	2a06      	cmp	r2, #6
   1f97e:	d941      	bls.n	1fa04 <handle_na_input+0x2a4>
	na_hdr = net_icmpv6_get_na_hdr(pkt, &hdr);
   1f980:	a905      	add	r1, sp, #20
   1f982:	4620      	mov	r0, r4
   1f984:	f7fe fc2e 	bl	1e1e4 <net_icmpv6_get_na_hdr>
	return na_hdr->flags & NET_ICMPV6_NA_FLAG_SOLICITED;
   1f988:	7803      	ldrb	r3, [r0, #0]
		if (net_is_solicited(pkt)) {
   1f98a:	f013 0f40 	tst.w	r3, #64	; 0x40
   1f98e:	d040      	beq.n	1fa12 <handle_na_input+0x2b2>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_REACHABLE);
   1f990:	2101      	movs	r1, #1
   1f992:	4630      	mov	r0, r6
   1f994:	f7fe ffc0 	bl	1e918 <ipv6_nbr_set_state>
   1f998:	68f3      	ldr	r3, [r6, #12]
			net_ipv6_nbr_data(nbr)->ns_count = 0;
   1f99a:	2200      	movs	r2, #0
   1f99c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
   1f9a0:	68f0      	ldr	r0, [r6, #12]
			k_delayed_work_cancel(
   1f9a2:	3014      	adds	r0, #20
   1f9a4:	f009 fce8 	bl	29378 <k_delayed_work_cancel>
			net_ipv6_nbr_set_reachable_timer(net_pkt_iface(pkt),
   1f9a8:	4631      	mov	r1, r6
   1f9aa:	6960      	ldr	r0, [r4, #20]
   1f9ac:	f7ff fecc 	bl	1f748 <net_ipv6_nbr_set_reachable_timer>
   1f9b0:	68f5      	ldr	r5, [r6, #12]
	na_hdr = net_icmpv6_get_na_hdr(pkt, &hdr);
   1f9b2:	a905      	add	r1, sp, #20
   1f9b4:	4620      	mov	r0, r4
   1f9b6:	f7fe fc15 	bl	1e1e4 <net_icmpv6_get_na_hdr>
	return na_hdr->flags & NET_ICMPV6_NA_FLAG_ROUTER;
   1f9ba:	7803      	ldrb	r3, [r0, #0]
   1f9bc:	09db      	lsrs	r3, r3, #7
		net_ipv6_nbr_data(nbr)->is_router = net_is_router(pkt);
   1f9be:	f885 3069 	strb.w	r3, [r5, #105]	; 0x69
   1f9c2:	68f3      	ldr	r3, [r6, #12]
	pending = net_ipv6_nbr_data(nbr)->pending;
   1f9c4:	681d      	ldr	r5, [r3, #0]
	if (pending) {
   1f9c6:	2d00      	cmp	r5, #0
   1f9c8:	f000 8098 	beq.w	1fafc <handle_na_input+0x39c>
		if (net_send_data(pending) < 0) {
   1f9cc:	4628      	mov	r0, r5
   1f9ce:	f7fa fd07 	bl	1a3e0 <net_send_data>
   1f9d2:	2800      	cmp	r0, #0
   1f9d4:	f2c0 8086 	blt.w	1fae4 <handle_na_input+0x384>
   1f9d8:	68f3      	ldr	r3, [r6, #12]
			net_ipv6_nbr_data(nbr)->pending = NULL;
   1f9da:	2200      	movs	r2, #0
   1f9dc:	601a      	str	r2, [r3, #0]
		net_pkt_unref(pending);
   1f9de:	4628      	mov	r0, r5
   1f9e0:	f7fd f8ff 	bl	1cbe2 <net_pkt_unref>
	return true;
   1f9e4:	2301      	movs	r3, #1
   1f9e6:	e780      	b.n	1f8ea <handle_na_input+0x18a>
			nbr_free(nbr);
   1f9e8:	4630      	mov	r0, r6
   1f9ea:	f7ff fa53 	bl	1ee94 <nbr_free>
   1f9ee:	e77b      	b.n	1f8e8 <handle_na_input+0x188>
		lladdr_changed = memcmp(lladdr.addr,
   1f9f0:	7842      	ldrb	r2, [r0, #1]
   1f9f2:	1c81      	adds	r1, r0, #2
   1f9f4:	f10d 000e 	add.w	r0, sp, #14
   1f9f8:	f00a ffb0 	bl	2a95c <memcmp>
   1f9fc:	1c07      	adds	r7, r0, #0
   1f9fe:	bf18      	it	ne
   1fa00:	2701      	movne	r7, #1
   1fa02:	e7b0      	b.n	1f966 <handle_na_input+0x206>
	memcpy(lladdr_store->addr, new_addr, new_len);
   1fa04:	f10d 010e 	add.w	r1, sp, #14
   1fa08:	f108 0002 	add.w	r0, r8, #2
   1fa0c:	f7e0 fc58 	bl	2c0 <memcpy>
   1fa10:	e7b6      	b.n	1f980 <handle_na_input+0x220>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_STALE);
   1fa12:	2102      	movs	r1, #2
   1fa14:	4630      	mov	r0, r6
   1fa16:	f7fe ff7f 	bl	1e918 <ipv6_nbr_set_state>
   1fa1a:	e7c9      	b.n	1f9b0 <handle_na_input+0x250>
	na_hdr = net_icmpv6_get_na_hdr(pkt, &hdr);
   1fa1c:	a905      	add	r1, sp, #20
   1fa1e:	4620      	mov	r0, r4
   1fa20:	f7fe fbe0 	bl	1e1e4 <net_icmpv6_get_na_hdr>
	return na_hdr->flags & NET_ICMPV6_NA_FLAG_OVERRIDE;
   1fa24:	7803      	ldrb	r3, [r0, #0]
	if (!net_is_override(pkt) && lladdr_changed) {
   1fa26:	f013 0f20 	tst.w	r3, #32
   1fa2a:	d10f      	bne.n	1fa4c <handle_na_input+0x2ec>
   1fa2c:	b177      	cbz	r7, 1fa4c <handle_na_input+0x2ec>
   1fa2e:	68f3      	ldr	r3, [r6, #12]
		if (net_ipv6_nbr_data(nbr)->state ==
   1fa30:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
   1fa34:	2b01      	cmp	r3, #1
   1fa36:	d15f      	bne.n	1faf8 <handle_na_input+0x398>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_STALE);
   1fa38:	2102      	movs	r1, #2
   1fa3a:	4630      	mov	r0, r6
   1fa3c:	f7fe ff6c 	bl	1e918 <ipv6_nbr_set_state>
		return false;
   1fa40:	2300      	movs	r3, #0
   1fa42:	e752      	b.n	1f8ea <handle_na_input+0x18a>
   1fa44:	200029e8 	.word	0x200029e8
   1fa48:	2000bddc 	.word	0x2000bddc
	na_hdr = net_icmpv6_get_na_hdr(pkt, &hdr);
   1fa4c:	a905      	add	r1, sp, #20
   1fa4e:	4620      	mov	r0, r4
   1fa50:	f7fe fbc8 	bl	1e1e4 <net_icmpv6_get_na_hdr>
	return na_hdr->flags & NET_ICMPV6_NA_FLAG_OVERRIDE;
   1fa54:	7803      	ldrb	r3, [r0, #0]
	if (net_is_override(pkt) ||
   1fa56:	f013 0f20 	tst.w	r3, #32
   1fa5a:	d018      	beq.n	1fa8e <handle_na_input+0x32e>
		if (lladdr_changed) {
   1fa5c:	b14f      	cbz	r7, 1fa72 <handle_na_input+0x312>
			net_linkaddr_set(cached_lladdr, lladdr.addr,
   1fa5e:	f898 2001 	ldrb.w	r2, [r8, #1]
	if (new_len > NET_LINK_ADDR_MAX_LENGTH) {
   1fa62:	2a06      	cmp	r2, #6
   1fa64:	d805      	bhi.n	1fa72 <handle_na_input+0x312>
	memcpy(lladdr_store->addr, new_addr, new_len);
   1fa66:	f10d 010e 	add.w	r1, sp, #14
   1fa6a:	f108 0002 	add.w	r0, r8, #2
   1fa6e:	f7e0 fc27 	bl	2c0 <memcpy>
	na_hdr = net_icmpv6_get_na_hdr(pkt, &hdr);
   1fa72:	a905      	add	r1, sp, #20
   1fa74:	4620      	mov	r0, r4
   1fa76:	f7fe fbb5 	bl	1e1e4 <net_icmpv6_get_na_hdr>
	return na_hdr->flags & NET_ICMPV6_NA_FLAG_SOLICITED;
   1fa7a:	7803      	ldrb	r3, [r0, #0]
		if (net_is_solicited(pkt)) {
   1fa7c:	f013 0f40 	tst.w	r3, #64	; 0x40
   1fa80:	d11e      	bne.n	1fac0 <handle_na_input+0x360>
			if (lladdr_changed) {
   1fa82:	b17f      	cbz	r7, 1faa4 <handle_na_input+0x344>
				ipv6_nbr_set_state(nbr,
   1fa84:	2102      	movs	r1, #2
   1fa86:	4630      	mov	r0, r6
   1fa88:	f7fe ff46 	bl	1e918 <ipv6_nbr_set_state>
   1fa8c:	e00a      	b.n	1faa4 <handle_na_input+0x344>
	na_hdr = net_icmpv6_get_na_hdr(pkt, &hdr);
   1fa8e:	a905      	add	r1, sp, #20
   1fa90:	4620      	mov	r0, r4
   1fa92:	f7fe fba7 	bl	1e1e4 <net_icmpv6_get_na_hdr>
	return na_hdr->flags & NET_ICMPV6_NA_FLAG_OVERRIDE;
   1fa96:	7803      	ldrb	r3, [r0, #0]
	if (net_is_override(pkt) ||
   1fa98:	f013 0f20 	tst.w	r3, #32
   1fa9c:	d102      	bne.n	1faa4 <handle_na_input+0x344>
	    (!net_is_override(pkt) && tllao_offset && !lladdr_changed)) {
   1fa9e:	b10d      	cbz	r5, 1faa4 <handle_na_input+0x344>
   1faa0:	2f00      	cmp	r7, #0
   1faa2:	d0db      	beq.n	1fa5c <handle_na_input+0x2fc>
   1faa4:	68f3      	ldr	r3, [r6, #12]
	if (net_ipv6_nbr_data(nbr)->is_router && !net_is_router(pkt)) {
   1faa6:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
   1faaa:	b9b3      	cbnz	r3, 1fada <handle_na_input+0x37a>
   1faac:	68f5      	ldr	r5, [r6, #12]
	na_hdr = net_icmpv6_get_na_hdr(pkt, &hdr);
   1faae:	a905      	add	r1, sp, #20
   1fab0:	4620      	mov	r0, r4
   1fab2:	f7fe fb97 	bl	1e1e4 <net_icmpv6_get_na_hdr>
	return na_hdr->flags & NET_ICMPV6_NA_FLAG_ROUTER;
   1fab6:	7803      	ldrb	r3, [r0, #0]
   1fab8:	09db      	lsrs	r3, r3, #7
	net_ipv6_nbr_data(nbr)->is_router = net_is_router(pkt);
   1faba:	f885 3069 	strb.w	r3, [r5, #105]	; 0x69
   1fabe:	e780      	b.n	1f9c2 <handle_na_input+0x262>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_REACHABLE);
   1fac0:	2101      	movs	r1, #1
   1fac2:	4630      	mov	r0, r6
   1fac4:	f7fe ff28 	bl	1e918 <ipv6_nbr_set_state>
   1fac8:	68f0      	ldr	r0, [r6, #12]
			k_delayed_work_cancel(
   1faca:	3014      	adds	r0, #20
   1facc:	f009 fc54 	bl	29378 <k_delayed_work_cancel>
			net_ipv6_nbr_set_reachable_timer(net_pkt_iface(pkt),
   1fad0:	4631      	mov	r1, r6
   1fad2:	6960      	ldr	r0, [r4, #20]
   1fad4:	f7ff fe38 	bl	1f748 <net_ipv6_nbr_set_reachable_timer>
   1fad8:	e7e4      	b.n	1faa4 <handle_na_input+0x344>
	na_hdr = net_icmpv6_get_na_hdr(pkt, &hdr);
   1fada:	a905      	add	r1, sp, #20
   1fadc:	4620      	mov	r0, r4
   1fade:	f7fe fb81 	bl	1e1e4 <net_icmpv6_get_na_hdr>
   1fae2:	e7e3      	b.n	1faac <handle_na_input+0x34c>
			nbr_clear_ns_pending(net_ipv6_nbr_data(nbr));
   1fae4:	68f0      	ldr	r0, [r6, #12]
   1fae6:	f7ff f8af 	bl	1ec48 <nbr_clear_ns_pending>
   1faea:	e778      	b.n	1f9de <handle_na_input+0x27e>
		return false;
   1faec:	2300      	movs	r3, #0
   1faee:	e6fc      	b.n	1f8ea <handle_na_input+0x18a>
		return false;
   1faf0:	2300      	movs	r3, #0
   1faf2:	e6fa      	b.n	1f8ea <handle_na_input+0x18a>
			return false;
   1faf4:	2300      	movs	r3, #0
   1faf6:	e6f8      	b.n	1f8ea <handle_na_input+0x18a>
		return false;
   1faf8:	2300      	movs	r3, #0
   1fafa:	e6f6      	b.n	1f8ea <handle_na_input+0x18a>
	return true;
   1fafc:	2301      	movs	r3, #1
   1fafe:	e6f4      	b.n	1f8ea <handle_na_input+0x18a>

0001fb00 <net_ipv6_send_ns>:
{
   1fb00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fb04:	b09d      	sub	sp, #116	; 0x74
   1fb06:	4605      	mov	r5, r0
   1fb08:	9101      	str	r1, [sp, #4]
   1fb0a:	4691      	mov	r9, r2
   1fb0c:	461e      	mov	r6, r3
   1fb0e:	9f26      	ldr	r7, [sp, #152]	; 0x98
   1fb10:	f89d b09c 	ldrb.w	fp, [sp, #156]	; 0x9c
	return iface->l2->reserve(iface, (void *)dst_ip6);
   1fb14:	6843      	ldr	r3, [r0, #4]
   1fb16:	689b      	ldr	r3, [r3, #8]
   1fb18:	4631      	mov	r1, r6
   1fb1a:	4798      	blx	r3
	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, dst),
   1fb1c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1fb20:	f7fc ffee 	bl	1cb00 <net_pkt_get_reserve_tx>
   1fb24:	4604      	mov	r4, r0
	frag = net_pkt_get_frag(pkt, K_FOREVER);
   1fb26:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1fb2a:	f7fd f807 	bl	1cb3c <net_pkt_get_frag>
   1fb2e:	4682      	mov	sl, r0
	net_pkt_frag_add(pkt, frag);
   1fb30:	4601      	mov	r1, r0
   1fb32:	4620      	mov	r0, r4
   1fb34:	f7fd f87f 	bl	1cc36 <net_pkt_frag_add>
	pkt->iface = iface;
   1fb38:	6165      	str	r5, [r4, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   1fb3a:	7d6b      	ldrb	r3, [r5, #21]
   1fb3c:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   1fb40:	7d6b      	ldrb	r3, [r5, #21]
   1fb42:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	pkt->family = family;
   1fb46:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   1fb4a:	220a      	movs	r2, #10
   1fb4c:	f362 03c6 	bfi	r3, r2, #3, #4
   1fb50:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	pkt->ip_hdr_len = len;
   1fb54:	2328      	movs	r3, #40	; 0x28
   1fb56:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
	pkt->ipv6_ext_len = len;
   1fb5a:	2500      	movs	r5, #0
   1fb5c:	f884 503b 	strb.w	r5, [r4, #59]	; 0x3b
	return pkt->frags->data;
   1fb60:	68a3      	ldr	r3, [r4, #8]
   1fb62:	6898      	ldr	r0, [r3, #8]
	return pkt->ll_reserve;
   1fb64:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
	memset(net_pkt_ll(pkt), 0, net_pkt_ll_reserve(pkt));
   1fb68:	461a      	mov	r2, r3
   1fb6a:	4629      	mov	r1, r5
   1fb6c:	1ac0      	subs	r0, r0, r3
   1fb6e:	f00a ff89 	bl	2aa84 <memset>
	net_pkt_ll_src(pkt)->addr = NULL;
   1fb72:	6225      	str	r5, [r4, #32]
	net_pkt_ll_src(pkt)->len = 0;
   1fb74:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
	return pkt->iface;
   1fb78:	6963      	ldr	r3, [r4, #20]
	if (iface->link_addr.len == 6) {
   1fb7a:	7d1b      	ldrb	r3, [r3, #20]
   1fb7c:	2b06      	cmp	r3, #6
   1fb7e:	f000 808b 	beq.w	1fc98 <net_ipv6_send_ns+0x198>
	} else if (iface->link_addr.len == 8) {
   1fb82:	2b08      	cmp	r3, #8
   1fb84:	f000 8085 	beq.w	1fc92 <net_ipv6_send_ns+0x192>
	return 0;
   1fb88:	f04f 0800 	mov.w	r8, #0
	setup_headers(pkt, sizeof(struct net_icmpv6_ns_hdr) + llao_len,
   1fb8c:	2287      	movs	r2, #135	; 0x87
   1fb8e:	f108 0114 	add.w	r1, r8, #20
   1fb92:	4620      	mov	r0, r4
   1fb94:	f7ff f951 	bl	1ee3a <setup_headers>
	net_buf_add(frag, sizeof(struct net_icmpv6_ns_hdr));
   1fb98:	f10a 0a08 	add.w	sl, sl, #8
   1fb9c:	2114      	movs	r1, #20
   1fb9e:	4650      	mov	r0, sl
   1fba0:	f7fa fafc 	bl	1a19c <net_buf_simple_add>
	ns_hdr = net_icmpv6_get_ns_hdr(pkt, &hdr);
   1fba4:	a903      	add	r1, sp, #12
   1fba6:	4620      	mov	r0, r4
   1fba8:	f7fe fa8e 	bl	1e0c8 <net_icmpv6_get_ns_hdr>
   1fbac:	4605      	mov	r5, r0
	if (!dst) {
   1fbae:	2e00      	cmp	r6, #0
   1fbb0:	d075      	beq.n	1fc9e <net_ipv6_send_ns+0x19e>
	return pkt->frags->data;
   1fbb2:	68a3      	ldr	r3, [r4, #8]
   1fbb4:	f8d3 e008 	ldr.w	lr, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst, dst);
   1fbb8:	f10d 0c20 	add.w	ip, sp, #32
   1fbbc:	6830      	ldr	r0, [r6, #0]
   1fbbe:	6871      	ldr	r1, [r6, #4]
   1fbc0:	68b2      	ldr	r2, [r6, #8]
   1fbc2:	68f3      	ldr	r3, [r6, #12]
   1fbc4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   1fbc8:	ae08      	add	r6, sp, #32
   1fbca:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1fbcc:	f8ce 0018 	str.w	r0, [lr, #24]
   1fbd0:	f8ce 101c 	str.w	r1, [lr, #28]
   1fbd4:	f8ce 2020 	str.w	r2, [lr, #32]
   1fbd8:	f8ce 3024 	str.w	r3, [lr, #36]	; 0x24
	net_ipaddr_copy(&ns_hdr->tgt, tgt);
   1fbdc:	ae0c      	add	r6, sp, #48	; 0x30
   1fbde:	6838      	ldr	r0, [r7, #0]
   1fbe0:	6879      	ldr	r1, [r7, #4]
   1fbe2:	68ba      	ldr	r2, [r7, #8]
   1fbe4:	68fb      	ldr	r3, [r7, #12]
   1fbe6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   1fbe8:	1d2f      	adds	r7, r5, #4
   1fbea:	ae0c      	add	r6, sp, #48	; 0x30
   1fbec:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1fbee:	6068      	str	r0, [r5, #4]
   1fbf0:	6079      	str	r1, [r7, #4]
   1fbf2:	60ba      	str	r2, [r7, #8]
   1fbf4:	60fb      	str	r3, [r7, #12]
	net_icmpv6_set_ns_hdr(pkt, ns_hdr);
   1fbf6:	4629      	mov	r1, r5
   1fbf8:	4620      	mov	r0, r4
   1fbfa:	f7fe fa89 	bl	1e110 <net_icmpv6_set_ns_hdr>
	if (is_my_address) {
   1fbfe:	f1bb 0f00 	cmp.w	fp, #0
   1fc02:	d06a      	beq.n	1fcda <net_ipv6_send_ns+0x1da>
   1fc04:	68a3      	ldr	r3, [r4, #8]
   1fc06:	689f      	ldr	r7, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   1fc08:	f7ff f9ac 	bl	1ef64 <net_ipv6_unspecified_address>
   1fc0c:	4603      	mov	r3, r0
   1fc0e:	ae10      	add	r6, sp, #64	; 0x40
   1fc10:	6800      	ldr	r0, [r0, #0]
   1fc12:	6859      	ldr	r1, [r3, #4]
   1fc14:	689a      	ldr	r2, [r3, #8]
   1fc16:	68db      	ldr	r3, [r3, #12]
   1fc18:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   1fc1a:	ae10      	add	r6, sp, #64	; 0x40
   1fc1c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1fc1e:	60b8      	str	r0, [r7, #8]
   1fc20:	60f9      	str	r1, [r7, #12]
   1fc22:	613a      	str	r2, [r7, #16]
   1fc24:	617b      	str	r3, [r7, #20]
   1fc26:	68a3      	ldr	r3, [r4, #8]
   1fc28:	689b      	ldr	r3, [r3, #8]
		NET_IPV6_HDR(pkt)->len[1] -= llao_len;
   1fc2a:	795a      	ldrb	r2, [r3, #5]
   1fc2c:	eba2 0808 	sub.w	r8, r2, r8
   1fc30:	f883 8005 	strb.w	r8, [r3, #5]
	net_icmpv6_set_chksum(pkt, pkt->frags);
   1fc34:	68a1      	ldr	r1, [r4, #8]
   1fc36:	4620      	mov	r0, r4
   1fc38:	f7fe f88a 	bl	1dd50 <net_icmpv6_set_chksum>
	nbr = nbr_lookup(&net_neighbor.table, net_pkt_iface(pkt), &ns_hdr->tgt);
   1fc3c:	3504      	adds	r5, #4
   1fc3e:	462a      	mov	r2, r5
   1fc40:	6961      	ldr	r1, [r4, #20]
   1fc42:	486f      	ldr	r0, [pc, #444]	; (1fe00 <net_ipv6_send_ns+0x300>)
   1fc44:	f7fe ffe0 	bl	1ec08 <nbr_lookup>
	if (!nbr) {
   1fc48:	4606      	mov	r6, r0
   1fc4a:	2800      	cmp	r0, #0
   1fc4c:	f000 80ad 	beq.w	1fdaa <net_ipv6_send_ns+0x2aa>
	if (pending) {
   1fc50:	9801      	ldr	r0, [sp, #4]
   1fc52:	b170      	cbz	r0, 1fc72 <net_ipv6_send_ns+0x172>
   1fc54:	68f5      	ldr	r5, [r6, #12]
		if (!net_ipv6_nbr_data(nbr)->pending) {
   1fc56:	682b      	ldr	r3, [r5, #0]
   1fc58:	2b00      	cmp	r3, #0
   1fc5a:	f040 80b1 	bne.w	1fdc0 <net_ipv6_send_ns+0x2c0>
			net_ipv6_nbr_data(nbr)->pending = net_pkt_ref(pending);
   1fc5e:	f7fc ffb1 	bl	1cbc4 <net_pkt_ref>
   1fc62:	6028      	str	r0, [r5, #0]
   1fc64:	68f1      	ldr	r1, [r6, #12]
   1fc66:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1fc6a:	313c      	adds	r1, #60	; 0x3c
   1fc6c:	4865      	ldr	r0, [pc, #404]	; (1fe04 <net_ipv6_send_ns+0x304>)
   1fc6e:	f009 fbdd 	bl	2942c <k_delayed_work_submit_to_queue>
	if (net_send_data(pkt) < 0) {
   1fc72:	4620      	mov	r0, r4
   1fc74:	f7fa fbb4 	bl	1a3e0 <net_send_data>
   1fc78:	2800      	cmp	r0, #0
   1fc7a:	f2c0 80b0 	blt.w	1fdde <net_ipv6_send_ns+0x2de>
   1fc7e:	4a62      	ldr	r2, [pc, #392]	; (1fe08 <net_ipv6_send_ns+0x308>)
   1fc80:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
   1fc84:	3301      	adds	r3, #1
   1fc86:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
	return 0;
   1fc8a:	2000      	movs	r0, #0
}
   1fc8c:	b01d      	add	sp, #116	; 0x74
   1fc8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return 16;
   1fc92:	f04f 0810 	mov.w	r8, #16
   1fc96:	e779      	b.n	1fb8c <net_ipv6_send_ns+0x8c>
		return 8;
   1fc98:	f04f 0808 	mov.w	r8, #8
   1fc9c:	e776      	b.n	1fb8c <net_ipv6_send_ns+0x8c>
   1fc9e:	68a3      	ldr	r3, [r4, #8]
   1fca0:	689b      	ldr	r3, [r3, #8]
	dst->s6_addr[0]   = 0xFF;
   1fca2:	21ff      	movs	r1, #255	; 0xff
   1fca4:	7619      	strb	r1, [r3, #24]
	dst->s6_addr[1]   = 0x02;
   1fca6:	2202      	movs	r2, #2
   1fca8:	765a      	strb	r2, [r3, #25]
	UNALIGNED_PUT(0, &dst->s6_addr16[1]);
   1fcaa:	2200      	movs	r2, #0
   1fcac:	769a      	strb	r2, [r3, #26]
   1fcae:	76da      	strb	r2, [r3, #27]
	UNALIGNED_PUT(0, &dst->s6_addr16[2]);
   1fcb0:	771a      	strb	r2, [r3, #28]
   1fcb2:	775a      	strb	r2, [r3, #29]
	UNALIGNED_PUT(0, &dst->s6_addr16[3]);
   1fcb4:	779a      	strb	r2, [r3, #30]
   1fcb6:	77da      	strb	r2, [r3, #31]
	UNALIGNED_PUT(0, &dst->s6_addr16[4]);
   1fcb8:	f883 2020 	strb.w	r2, [r3, #32]
   1fcbc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	dst->s6_addr[10]  = 0;
   1fcc0:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	dst->s6_addr[11]  = 0x01;
   1fcc4:	2201      	movs	r2, #1
   1fcc6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	dst->s6_addr[12]  = 0xFF;
   1fcca:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24
	dst->s6_addr[13]  = src->s6_addr[13];
   1fcce:	7b7a      	ldrb	r2, [r7, #13]
   1fcd0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	UNALIGNED_PUT(UNALIGNED_GET(&src->s6_addr16[7]), &dst->s6_addr16[7]);
   1fcd4:	89fa      	ldrh	r2, [r7, #14]
   1fcd6:	84da      	strh	r2, [r3, #38]	; 0x26
   1fcd8:	e780      	b.n	1fbdc <net_ipv6_send_ns+0xdc>
		if (src) {
   1fcda:	f1b9 0f00 	cmp.w	r9, #0
   1fcde:	d025      	beq.n	1fd2c <net_ipv6_send_ns+0x22c>
   1fce0:	68a3      	ldr	r3, [r4, #8]
   1fce2:	f8d3 e008 	ldr.w	lr, [r3, #8]
			net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src, src);
   1fce6:	ae14      	add	r6, sp, #80	; 0x50
   1fce8:	f8d9 0000 	ldr.w	r0, [r9]
   1fcec:	f8d9 1004 	ldr.w	r1, [r9, #4]
   1fcf0:	f8d9 2008 	ldr.w	r2, [r9, #8]
   1fcf4:	f8d9 300c 	ldr.w	r3, [r9, #12]
   1fcf8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   1fcfa:	ae14      	add	r6, sp, #80	; 0x50
   1fcfc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1fcfe:	f8ce 0008 	str.w	r0, [lr, #8]
   1fd02:	f8ce 100c 	str.w	r1, [lr, #12]
   1fd06:	f8ce 2010 	str.w	r2, [lr, #16]
   1fd0a:	f8ce 3014 	str.w	r3, [lr, #20]
   1fd0e:	68a3      	ldr	r3, [r4, #8]
   1fd10:	689b      	ldr	r3, [r3, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1fd12:	689a      	ldr	r2, [r3, #8]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1fd14:	b9fa      	cbnz	r2, 1fd56 <net_ipv6_send_ns+0x256>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1fd16:	68da      	ldr	r2, [r3, #12]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1fd18:	2a00      	cmp	r2, #0
   1fd1a:	d140      	bne.n	1fd9e <net_ipv6_send_ns+0x29e>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1fd1c:	691a      	ldr	r2, [r3, #16]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1fd1e:	2a00      	cmp	r2, #0
   1fd20:	d13f      	bne.n	1fda2 <net_ipv6_send_ns+0x2a2>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   1fd22:	695b      	ldr	r3, [r3, #20]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1fd24:	2b00      	cmp	r3, #0
   1fd26:	d03e      	beq.n	1fda6 <net_ipv6_send_ns+0x2a6>
   1fd28:	2300      	movs	r3, #0
   1fd2a:	e015      	b.n	1fd58 <net_ipv6_send_ns+0x258>
   1fd2c:	68a3      	ldr	r3, [r4, #8]
   1fd2e:	689f      	ldr	r7, [r3, #8]
			net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   1fd30:	f107 0118 	add.w	r1, r7, #24
   1fd34:	6960      	ldr	r0, [r4, #20]
   1fd36:	f7fb fab9 	bl	1b2ac <net_if_ipv6_select_src_addr>
   1fd3a:	4603      	mov	r3, r0
   1fd3c:	ae18      	add	r6, sp, #96	; 0x60
   1fd3e:	6800      	ldr	r0, [r0, #0]
   1fd40:	6859      	ldr	r1, [r3, #4]
   1fd42:	689a      	ldr	r2, [r3, #8]
   1fd44:	68db      	ldr	r3, [r3, #12]
   1fd46:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   1fd48:	ae18      	add	r6, sp, #96	; 0x60
   1fd4a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1fd4c:	60b8      	str	r0, [r7, #8]
   1fd4e:	60f9      	str	r1, [r7, #12]
   1fd50:	613a      	str	r2, [r7, #16]
   1fd52:	617b      	str	r3, [r7, #20]
   1fd54:	e7db      	b.n	1fd0e <net_ipv6_send_ns+0x20e>
   1fd56:	2300      	movs	r3, #0
		if (net_is_ipv6_addr_unspecified(&NET_IPV6_HDR(pkt)->src)) {
   1fd58:	bbab      	cbnz	r3, 1fdc6 <net_ipv6_send_ns+0x2c6>
		net_buf_add(frag, llao_len);
   1fd5a:	4641      	mov	r1, r8
   1fd5c:	4650      	mov	r0, sl
   1fd5e:	f7fa fa1d 	bl	1a19c <net_buf_simple_add>
	return pkt->iface;
   1fd62:	f8d4 9014 	ldr.w	r9, [r4, #20]
			 (u8_t *)net_pkt_icmp_data(pkt) +
   1fd66:	4620      	mov	r0, r4
   1fd68:	f7fd fa14 	bl	1d194 <net_pkt_icmp_data>
		set_llao(&net_pkt_iface(pkt)->link_addr,
   1fd6c:	f100 0618 	add.w	r6, r0, #24
	llao[NET_ICMPV6_OPT_TYPE_OFFSET] = type;
   1fd70:	2301      	movs	r3, #1
   1fd72:	7603      	strb	r3, [r0, #24]
	llao[NET_ICMPV6_OPT_LEN_OFFSET] = llao_len >> 3;
   1fd74:	ea4f 03d8 	mov.w	r3, r8, lsr #3
   1fd78:	7643      	strb	r3, [r0, #25]
	memcpy(&llao[NET_ICMPV6_OPT_DATA_OFFSET], lladdr->addr, lladdr->len);
   1fd7a:	f899 2014 	ldrb.w	r2, [r9, #20]
   1fd7e:	f8d9 1010 	ldr.w	r1, [r9, #16]
   1fd82:	301a      	adds	r0, #26
   1fd84:	f7e0 fa9c 	bl	2c0 <memcpy>
	memset(&llao[NET_ICMPV6_OPT_DATA_OFFSET + lladdr->len], 0,
   1fd88:	f899 2014 	ldrb.w	r2, [r9, #20]
   1fd8c:	1c90      	adds	r0, r2, #2
	       llao_len - lladdr->len - 2);
   1fd8e:	eba8 0202 	sub.w	r2, r8, r2
	memset(&llao[NET_ICMPV6_OPT_DATA_OFFSET + lladdr->len], 0,
   1fd92:	3a02      	subs	r2, #2
   1fd94:	2100      	movs	r1, #0
   1fd96:	4430      	add	r0, r6
   1fd98:	f00a fe74 	bl	2aa84 <memset>
   1fd9c:	e74a      	b.n	1fc34 <net_ipv6_send_ns+0x134>
   1fd9e:	2300      	movs	r3, #0
   1fda0:	e7da      	b.n	1fd58 <net_ipv6_send_ns+0x258>
   1fda2:	2300      	movs	r3, #0
   1fda4:	e7d8      	b.n	1fd58 <net_ipv6_send_ns+0x258>
   1fda6:	2301      	movs	r3, #1
   1fda8:	e7d6      	b.n	1fd58 <net_ipv6_send_ns+0x258>
		nbr = nbr_new(net_pkt_iface(pkt), &ns_hdr->tgt, false,
   1fdaa:	2300      	movs	r3, #0
   1fdac:	461a      	mov	r2, r3
   1fdae:	4629      	mov	r1, r5
   1fdb0:	6960      	ldr	r0, [r4, #20]
   1fdb2:	f7fe ffab 	bl	1ed0c <nbr_new>
		if (!nbr) {
   1fdb6:	4606      	mov	r6, r0
   1fdb8:	2800      	cmp	r0, #0
   1fdba:	f47f af49 	bne.w	1fc50 <net_ipv6_send_ns+0x150>
   1fdbe:	e002      	b.n	1fdc6 <net_ipv6_send_ns+0x2c6>
			net_pkt_unref(pending);
   1fdc0:	9801      	ldr	r0, [sp, #4]
   1fdc2:	f7fc ff0e 	bl	1cbe2 <net_pkt_unref>
	net_pkt_unref(pkt);
   1fdc6:	4620      	mov	r0, r4
   1fdc8:	f7fc ff0b 	bl	1cbe2 <net_pkt_unref>
	net_stats.ipv6_nd.drop++;
   1fdcc:	4a0e      	ldr	r2, [pc, #56]	; (1fe08 <net_ipv6_send_ns+0x308>)
   1fdce:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
   1fdd2:	3301      	adds	r3, #1
   1fdd4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
	return -EINVAL;
   1fdd8:	f06f 0015 	mvn.w	r0, #21
   1fddc:	e756      	b.n	1fc8c <net_ipv6_send_ns+0x18c>
		if (pending) {
   1fdde:	9b01      	ldr	r3, [sp, #4]
   1fde0:	2b00      	cmp	r3, #0
   1fde2:	d0f0      	beq.n	1fdc6 <net_ipv6_send_ns+0x2c6>
   1fde4:	68f5      	ldr	r5, [r6, #12]
	k_delayed_work_cancel(&data->send_ns);
   1fde6:	f105 003c 	add.w	r0, r5, #60	; 0x3c
   1fdea:	f009 fac5 	bl	29378 <k_delayed_work_cancel>
	if (data->pending) {
   1fdee:	6828      	ldr	r0, [r5, #0]
   1fdf0:	2800      	cmp	r0, #0
   1fdf2:	d0e8      	beq.n	1fdc6 <net_ipv6_send_ns+0x2c6>
		net_pkt_unref(data->pending);
   1fdf4:	f7fc fef5 	bl	1cbe2 <net_pkt_unref>
		data->pending = NULL;
   1fdf8:	2300      	movs	r3, #0
   1fdfa:	602b      	str	r3, [r5, #0]
   1fdfc:	e7e3      	b.n	1fdc6 <net_ipv6_send_ns+0x2c6>
   1fdfe:	bf00      	nop
   1fe00:	2000bddc 	.word	0x2000bddc
   1fe04:	20002b08 	.word	0x20002b08
   1fe08:	200029e8 	.word	0x200029e8

0001fe0c <net_ipv6_nbr_add>:
{
   1fe0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1fe10:	b083      	sub	sp, #12
   1fe12:	4605      	mov	r5, r0
   1fe14:	460e      	mov	r6, r1
   1fe16:	4617      	mov	r7, r2
   1fe18:	4698      	mov	r8, r3
	nbr = nbr_lookup(&net_neighbor.table, iface, addr);
   1fe1a:	460a      	mov	r2, r1
   1fe1c:	4601      	mov	r1, r0
   1fe1e:	482c      	ldr	r0, [pc, #176]	; (1fed0 <net_ipv6_nbr_add+0xc4>)
   1fe20:	f7fe fef2 	bl	1ec08 <nbr_lookup>
	if (!nbr) {
   1fe24:	4604      	mov	r4, r0
   1fe26:	b180      	cbz	r0, 1fe4a <net_ipv6_nbr_add+0x3e>
	if (net_nbr_link(nbr, iface, lladdr) == -EALREADY &&
   1fe28:	463a      	mov	r2, r7
   1fe2a:	4629      	mov	r1, r5
   1fe2c:	4620      	mov	r0, r4
   1fe2e:	f7fe fd05 	bl	1e83c <net_nbr_link>
   1fe32:	f110 0f78 	cmn.w	r0, #120	; 0x78
   1fe36:	d013      	beq.n	1fe60 <net_ipv6_nbr_add+0x54>
   1fe38:	68e3      	ldr	r3, [r4, #12]
	if (net_ipv6_nbr_data(nbr)->state == NET_IPV6_NBR_STATE_INCOMPLETE) {
   1fe3a:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
   1fe3e:	2b00      	cmp	r3, #0
   1fe40:	d03c      	beq.n	1febc <net_ipv6_nbr_add+0xb0>
}
   1fe42:	4620      	mov	r0, r4
   1fe44:	b003      	add	sp, #12
   1fe46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		nbr = nbr_new(iface, addr, is_router, state);
   1fe4a:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   1fe4e:	4642      	mov	r2, r8
   1fe50:	4631      	mov	r1, r6
   1fe52:	4628      	mov	r0, r5
   1fe54:	f7fe ff5a 	bl	1ed0c <nbr_new>
		if (!nbr) {
   1fe58:	4604      	mov	r4, r0
   1fe5a:	2800      	cmp	r0, #0
   1fe5c:	d1e4      	bne.n	1fe28 <net_ipv6_nbr_add+0x1c>
   1fe5e:	e7f0      	b.n	1fe42 <net_ipv6_nbr_add+0x36>
   1fe60:	68e3      	ldr	r3, [r4, #12]
	    net_ipv6_nbr_data(nbr)->state != NET_IPV6_NBR_STATE_STATIC) {
   1fe62:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
	if (net_nbr_link(nbr, iface, lladdr) == -EALREADY &&
   1fe66:	2b05      	cmp	r3, #5
   1fe68:	d0e6      	beq.n	1fe38 <net_ipv6_nbr_add+0x2c>
		cached_lladdr = net_nbr_get_lladdr(nbr->idx);
   1fe6a:	7860      	ldrb	r0, [r4, #1]
   1fe6c:	f7fe fd4c 	bl	1e908 <net_nbr_get_lladdr>
   1fe70:	4680      	mov	r8, r0
		if (memcmp(cached_lladdr->addr, lladdr->addr, lladdr->len)) {
   1fe72:	f100 0902 	add.w	r9, r0, #2
   1fe76:	793a      	ldrb	r2, [r7, #4]
   1fe78:	6839      	ldr	r1, [r7, #0]
   1fe7a:	4648      	mov	r0, r9
   1fe7c:	f00a fd6e 	bl	2a95c <memcmp>
   1fe80:	b190      	cbz	r0, 1fea8 <net_ipv6_nbr_add+0x9c>
			net_linkaddr_set(cached_lladdr, lladdr->addr,
   1fe82:	6839      	ldr	r1, [r7, #0]
   1fe84:	793a      	ldrb	r2, [r7, #4]
	if (!lladdr_store || !new_addr) {
   1fe86:	f1b8 0f00 	cmp.w	r8, #0
   1fe8a:	d002      	beq.n	1fe92 <net_ipv6_nbr_add+0x86>
   1fe8c:	b109      	cbz	r1, 1fe92 <net_ipv6_nbr_add+0x86>
	if (new_len > NET_LINK_ADDR_MAX_LENGTH) {
   1fe8e:	2a06      	cmp	r2, #6
   1fe90:	d904      	bls.n	1fe9c <net_ipv6_nbr_add+0x90>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_STALE);
   1fe92:	2102      	movs	r1, #2
   1fe94:	4620      	mov	r0, r4
   1fe96:	f7fe fd3f 	bl	1e918 <ipv6_nbr_set_state>
   1fe9a:	e7cd      	b.n	1fe38 <net_ipv6_nbr_add+0x2c>
	lladdr_store->len = new_len;
   1fe9c:	f888 2001 	strb.w	r2, [r8, #1]
	memcpy(lladdr_store->addr, new_addr, new_len);
   1fea0:	4648      	mov	r0, r9
   1fea2:	f7e0 fa0d 	bl	2c0 <memcpy>
   1fea6:	e7f4      	b.n	1fe92 <net_ipv6_nbr_add+0x86>
   1fea8:	68e3      	ldr	r3, [r4, #12]
		} else if (net_ipv6_nbr_data(nbr)->state ==
   1feaa:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
   1feae:	2b00      	cmp	r3, #0
   1feb0:	d1c2      	bne.n	1fe38 <net_ipv6_nbr_add+0x2c>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_STALE);
   1feb2:	2102      	movs	r1, #2
   1feb4:	4620      	mov	r0, r4
   1feb6:	f7fe fd2f 	bl	1e918 <ipv6_nbr_set_state>
   1feba:	e7bd      	b.n	1fe38 <net_ipv6_nbr_add+0x2c>
		net_ipv6_send_ns(iface, NULL, NULL, NULL, addr, false);
   1febc:	2100      	movs	r1, #0
   1febe:	9101      	str	r1, [sp, #4]
   1fec0:	9600      	str	r6, [sp, #0]
   1fec2:	460b      	mov	r3, r1
   1fec4:	460a      	mov	r2, r1
   1fec6:	4628      	mov	r0, r5
   1fec8:	f7ff fe1a 	bl	1fb00 <net_ipv6_send_ns>
   1fecc:	e7b9      	b.n	1fe42 <net_ipv6_nbr_add+0x36>
   1fece:	bf00      	nop
   1fed0:	2000bddc 	.word	0x2000bddc

0001fed4 <handle_ra_input>:
{
   1fed4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1fed8:	b098      	sub	sp, #96	; 0x60
   1feda:	4606      	mov	r6, r0
	return net_buf_frags_len(pkt->frags);
   1fedc:	6883      	ldr	r3, [r0, #8]
	size_t bytes = 0;
   1fede:	2200      	movs	r2, #0
   1fee0:	e002      	b.n	1fee8 <handle_ra_input+0x14>
		bytes += buf->len;
   1fee2:	8999      	ldrh	r1, [r3, #12]
   1fee4:	440a      	add	r2, r1
		buf = buf->frags;
   1fee6:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   1fee8:	2b00      	cmp	r3, #0
   1feea:	d1fa      	bne.n	1fee2 <handle_ra_input+0xe>
	u16_t total_len = net_pkt_get_len(pkt);
   1feec:	b292      	uxth	r2, r2
	net_stats.ipv6_nd.recv++;
   1feee:	49b7      	ldr	r1, [pc, #732]	; (201cc <handle_ra_input+0x2f8>)
   1fef0:	f8d1 3090 	ldr.w	r3, [r1, #144]	; 0x90
   1fef4:	3301      	adds	r3, #1
   1fef6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
	if ((total_len < (sizeof(struct net_ipv6_hdr) +
   1fefa:	2a39      	cmp	r2, #57	; 0x39
   1fefc:	d904      	bls.n	1ff08 <handle_ra_input+0x34>
	return pkt->frags->data;
   1fefe:	68b3      	ldr	r3, [r6, #8]
   1ff00:	689b      	ldr	r3, [r3, #8]
	    (NET_IPV6_HDR(pkt)->hop_limit != NET_IPV6_ND_HOP_LIMIT) ||
   1ff02:	79da      	ldrb	r2, [r3, #7]
			  sizeof(struct net_icmpv6_nd_opt_hdr))) ||
   1ff04:	2aff      	cmp	r2, #255	; 0xff
   1ff06:	d010      	beq.n	1ff2a <handle_ra_input+0x56>
		icmp_hdr = net_icmpv6_get_hdr(pkt, &icmphdr);
   1ff08:	a907      	add	r1, sp, #28
   1ff0a:	4630      	mov	r0, r6
   1ff0c:	f7fd ff6d 	bl	1ddea <net_icmpv6_get_hdr>
		if (!icmp_hdr || icmp_hdr->code != 0) {
   1ff10:	b108      	cbz	r0, 1ff16 <handle_ra_input+0x42>
   1ff12:	7843      	ldrb	r3, [r0, #1]
   1ff14:	b173      	cbz	r3, 1ff34 <handle_ra_input+0x60>
	net_stats.ipv6_nd.drop++;
   1ff16:	4aad      	ldr	r2, [pc, #692]	; (201cc <handle_ra_input+0x2f8>)
   1ff18:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
   1ff1c:	3301      	adds	r3, #1
   1ff1e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
	return NET_DROP;
   1ff22:	2002      	movs	r0, #2
}
   1ff24:	b018      	add	sp, #96	; 0x60
   1ff26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return UNALIGNED_GET(&addr->s6_addr16[0]) == htons(0xFE80);
   1ff2a:	891a      	ldrh	r2, [r3, #8]
	    (NET_IPV6_HDR(pkt)->hop_limit != NET_IPV6_ND_HOP_LIMIT) ||
   1ff2c:	f248 03fe 	movw	r3, #33022	; 0x80fe
   1ff30:	429a      	cmp	r2, r3
   1ff32:	d1e9      	bne.n	1ff08 <handle_ra_input+0x34>
	offset = sizeof(struct net_ipv6_hdr) + net_pkt_ipv6_ext_len(pkt) +
   1ff34:	f896 103b 	ldrb.w	r1, [r6, #59]	; 0x3b
   1ff38:	312c      	adds	r1, #44	; 0x2c
   1ff3a:	ac18      	add	r4, sp, #96	; 0x60
   1ff3c:	f824 1d1c 	strh.w	r1, [r4, #-28]!
	return net_frag_read(frag, offset, pos, 1, value);
   1ff40:	f10d 0347 	add.w	r3, sp, #71	; 0x47
   1ff44:	9300      	str	r3, [sp, #0]
   1ff46:	2301      	movs	r3, #1
   1ff48:	4622      	mov	r2, r4
   1ff4a:	68b0      	ldr	r0, [r6, #8]
   1ff4c:	f7fc ffc7 	bl	1cede <net_frag_read>
	frag = net_frag_skip(frag, offset, &offset, 1); /* flags */
   1ff50:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
	return net_frag_read(frag, offset, pos, len, NULL);
   1ff54:	2300      	movs	r3, #0
   1ff56:	9300      	str	r3, [sp, #0]
   1ff58:	2301      	movs	r3, #1
   1ff5a:	4622      	mov	r2, r4
   1ff5c:	f7fc ffbf 	bl	1cede <net_frag_read>
	if (!frag) {
   1ff60:	4604      	mov	r4, r0
   1ff62:	2800      	cmp	r0, #0
   1ff64:	d0d7      	beq.n	1ff16 <handle_ra_input+0x42>
	if (hop_limit) {
   1ff66:	f89d 3047 	ldrb.w	r3, [sp, #71]	; 0x47
   1ff6a:	b113      	cbz	r3, 1ff72 <handle_ra_input+0x9e>
	return pkt->iface;
   1ff6c:	6972      	ldr	r2, [r6, #20]
	iface->ipv6.hop_limit = hop_limit;
   1ff6e:	f882 3294 	strb.w	r3, [r2, #660]	; 0x294
	frag = net_frag_read_be16(frag, offset, &offset, &router_lifetime);
   1ff72:	f10d 0352 	add.w	r3, sp, #82	; 0x52
   1ff76:	aa11      	add	r2, sp, #68	; 0x44
   1ff78:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   1ff7c:	4620      	mov	r0, r4
   1ff7e:	f7fc fff6 	bl	1cf6e <net_frag_read_be16>
	frag = net_frag_read_be32(frag, offset, &offset, &reachable_time);
   1ff82:	ab13      	add	r3, sp, #76	; 0x4c
   1ff84:	aa11      	add	r2, sp, #68	; 0x44
   1ff86:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   1ff8a:	f7fd f801 	bl	1cf90 <net_frag_read_be32>
	frag = net_frag_read_be32(frag, offset, &offset, &retrans_timer);
   1ff8e:	ab12      	add	r3, sp, #72	; 0x48
   1ff90:	aa11      	add	r2, sp, #68	; 0x44
   1ff92:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   1ff96:	f7fc fffb 	bl	1cf90 <net_frag_read_be32>
	if (!frag) {
   1ff9a:	4605      	mov	r5, r0
   1ff9c:	2800      	cmp	r0, #0
   1ff9e:	d0ba      	beq.n	1ff16 <handle_ra_input+0x42>
	ra_hdr = net_icmpv6_get_ra_hdr(pkt, &hdr);
   1ffa0:	a915      	add	r1, sp, #84	; 0x54
   1ffa2:	4630      	mov	r0, r6
   1ffa4:	f7fe f99a 	bl	1e2dc <net_icmpv6_get_ra_hdr>
	if (reachable_time &&
   1ffa8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1ffaa:	b16b      	cbz	r3, 1ffc8 <handle_ra_input+0xf4>
   1ffac:	6972      	ldr	r2, [r6, #20]
	return iface->ipv6.reachable_time;
   1ffae:	f8d2 428c 	ldr.w	r4, [r2, #652]	; 0x28c
	     ra_hdr->reachable_time)) {
   1ffb2:	6841      	ldr	r1, [r0, #4]
	if (reachable_time &&
   1ffb4:	428c      	cmp	r4, r1
   1ffb6:	d007      	beq.n	1ffc8 <handle_ra_input+0xf4>
	iface->ipv6.base_reachable_time = reachable_time;
   1ffb8:	f8c2 3288 	str.w	r3, [r2, #648]	; 0x288
   1ffbc:	6974      	ldr	r4, [r6, #20]
	iface->ipv6.reachable_time = net_if_ipv6_calc_reachable_time(iface);
   1ffbe:	4620      	mov	r0, r4
   1ffc0:	f7fb fa70 	bl	1b4a4 <net_if_ipv6_calc_reachable_time>
   1ffc4:	f8c4 028c 	str.w	r0, [r4, #652]	; 0x28c
	if (retrans_timer) {
   1ffc8:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1ffca:	b113      	cbz	r3, 1ffd2 <handle_ra_input+0xfe>
   1ffcc:	6972      	ldr	r2, [r6, #20]
 * @param retrans_timer New retransmit timer
 */
static inline void net_if_ipv6_set_retrans_timer(struct net_if *iface,
						 u32_t retrans_timer)
{
	iface->ipv6.retrans_timer = retrans_timer;
   1ffce:	f8c2 3290 	str.w	r3, [r2, #656]	; 0x290
	struct net_nbr *nbr = NULL;
   1ffd2:	2700      	movs	r7, #0
   1ffd4:	e060      	b.n	20098 <handle_ra_input+0x1c4>
			frag = handle_ra_neighbor(pkt, frag, length, offset,
   1ffd6:	f89d 4043 	ldrb.w	r4, [sp, #67]	; 0x43
   1ffda:	f8bd 8044 	ldrh.w	r8, [sp, #68]	; 0x44
	llstorage.len = NET_LINK_ADDR_MAX_LENGTH;
   1ffde:	2306      	movs	r3, #6
   1ffe0:	f88d 301d 	strb.w	r3, [sp, #29]
	lladdr.len = NET_LINK_ADDR_MAX_LENGTH;
   1ffe4:	f88d 3010 	strb.w	r3, [sp, #16]
	lladdr.addr = llstorage.addr;
   1ffe8:	f10d 031e 	add.w	r3, sp, #30
   1ffec:	9303      	str	r3, [sp, #12]
	if (net_pkt_ll_src(pkt)->len < lladdr.len) {
   1ffee:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
   1fff2:	2b05      	cmp	r3, #5
   1fff4:	d801      	bhi.n	1fffa <handle_ra_input+0x126>
		lladdr.len = net_pkt_ll_src(pkt)->len;
   1fff6:	f88d 3010 	strb.w	r3, [sp, #16]
	frag = net_frag_read(frag, offset, pos, lladdr.len, lladdr.addr);
   1fffa:	f89d 3010 	ldrb.w	r3, [sp, #16]
   1fffe:	f10d 021e 	add.w	r2, sp, #30
   20002:	9200      	str	r2, [sp, #0]
   20004:	aa11      	add	r2, sp, #68	; 0x44
   20006:	4641      	mov	r1, r8
   20008:	4628      	mov	r0, r5
   2000a:	f7fc ff68 	bl	1cede <net_frag_read>
	if (!frag && offset) {
   2000e:	4605      	mov	r5, r0
   20010:	b318      	cbz	r0, 2005a <handle_ra_input+0x186>
	padding = len * 8 - 2 - lladdr.len;
   20012:	00e3      	lsls	r3, r4, #3
   20014:	b2db      	uxtb	r3, r3
   20016:	f89d 2010 	ldrb.w	r2, [sp, #16]
   2001a:	1a9b      	subs	r3, r3, r2
   2001c:	b2db      	uxtb	r3, r3
   2001e:	3b02      	subs	r3, #2
	if (padding) {
   20020:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   20024:	d009      	beq.n	2003a <handle_ra_input+0x166>
		frag = net_frag_read(frag, *pos, pos, padding, NULL);
   20026:	aa18      	add	r2, sp, #96	; 0x60
   20028:	f832 1d1c 	ldrh.w	r1, [r2, #-28]!
   2002c:	2000      	movs	r0, #0
   2002e:	9000      	str	r0, [sp, #0]
   20030:	4628      	mov	r0, r5
   20032:	f7fc ff54 	bl	1cede <net_frag_read>
		if (!frag && *pos) {
   20036:	4605      	mov	r5, r0
   20038:	b198      	cbz	r0, 20062 <handle_ra_input+0x18e>
	return pkt->frags->data;
   2003a:	68b3      	ldr	r3, [r6, #8]
   2003c:	6899      	ldr	r1, [r3, #8]
	return net_ipv6_nbr_add(net_pkt_iface(pkt), &NET_IPV6_HDR(pkt)->src,
   2003e:	2302      	movs	r3, #2
   20040:	9300      	str	r3, [sp, #0]
   20042:	2301      	movs	r3, #1
   20044:	aa03      	add	r2, sp, #12
   20046:	3108      	adds	r1, #8
   20048:	6970      	ldr	r0, [r6, #20]
   2004a:	f7ff fedf 	bl	1fe0c <net_ipv6_nbr_add>
   2004e:	4607      	mov	r7, r0
			if (!frag && offset) {
   20050:	bb15      	cbnz	r5, 20098 <handle_ra_input+0x1c4>
   20052:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
   20056:	b1fb      	cbz	r3, 20098 <handle_ra_input+0x1c4>
   20058:	e75d      	b.n	1ff16 <handle_ra_input+0x42>
	if (!frag && offset) {
   2005a:	f1b8 0f00 	cmp.w	r8, #0
   2005e:	d0d8      	beq.n	20012 <handle_ra_input+0x13e>
   20060:	e7f6      	b.n	20050 <handle_ra_input+0x17c>
		if (!frag && *pos) {
   20062:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
   20066:	2b00      	cmp	r3, #0
   20068:	d0e7      	beq.n	2003a <handle_ra_input+0x166>
   2006a:	e7f1      	b.n	20050 <handle_ra_input+0x17c>
			frag = net_frag_skip(frag, offset, &offset, 2);
   2006c:	ac18      	add	r4, sp, #96	; 0x60
   2006e:	f834 1d1c 	ldrh.w	r1, [r4, #-28]!
	return net_frag_read(frag, offset, pos, len, NULL);
   20072:	2300      	movs	r3, #0
   20074:	9300      	str	r3, [sp, #0]
   20076:	2302      	movs	r3, #2
   20078:	4622      	mov	r2, r4
   2007a:	f7fc ff30 	bl	1cede <net_frag_read>
			frag = net_frag_read_be32(frag, offset, &offset, &mtu);
   2007e:	ab0f      	add	r3, sp, #60	; 0x3c
   20080:	4622      	mov	r2, r4
   20082:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   20086:	f7fc ff83 	bl	1cf90 <net_frag_read_be32>
			if (!frag && offset) {
   2008a:	4605      	mov	r5, r0
   2008c:	2800      	cmp	r0, #0
   2008e:	d03b      	beq.n	20108 <handle_ra_input+0x234>
	return pkt->iface;
   20090:	6973      	ldr	r3, [r6, #20]
			net_if_set_mtu(net_pkt_iface(pkt), mtu);
   20092:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
	iface->mtu = mtu;
   20096:	851a      	strh	r2, [r3, #40]	; 0x28
	while (frag) {
   20098:	2d00      	cmp	r5, #0
   2009a:	f000 8170 	beq.w	2037e <handle_ra_input+0x4aa>
		frag = net_frag_read(frag, offset, &offset, 1, &type);
   2009e:	ac18      	add	r4, sp, #96	; 0x60
   200a0:	f834 1d1c 	ldrh.w	r1, [r4, #-28]!
   200a4:	f10d 0342 	add.w	r3, sp, #66	; 0x42
   200a8:	9300      	str	r3, [sp, #0]
   200aa:	2301      	movs	r3, #1
   200ac:	4622      	mov	r2, r4
   200ae:	4628      	mov	r0, r5
   200b0:	f7fc ff15 	bl	1cede <net_frag_read>
		frag = net_frag_read(frag, offset, &offset, 1, &length);
   200b4:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   200b8:	f10d 0343 	add.w	r3, sp, #67	; 0x43
   200bc:	9300      	str	r3, [sp, #0]
   200be:	2301      	movs	r3, #1
   200c0:	4622      	mov	r2, r4
   200c2:	f7fc ff0c 	bl	1cede <net_frag_read>
		if (!frag) {
   200c6:	4605      	mov	r5, r0
   200c8:	2800      	cmp	r0, #0
   200ca:	f43f af24 	beq.w	1ff16 <handle_ra_input+0x42>
		switch (type) {
   200ce:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   200d2:	2b03      	cmp	r3, #3
   200d4:	d01d      	beq.n	20112 <handle_ra_input+0x23e>
   200d6:	2b05      	cmp	r3, #5
   200d8:	d0c8      	beq.n	2006c <handle_ra_input+0x198>
   200da:	2b01      	cmp	r3, #1
   200dc:	f43f af7b 	beq.w	1ffd6 <handle_ra_input+0x102>
			frag = net_frag_skip(frag, offset, &offset,
   200e0:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
					     length * 8 - 2);
   200e4:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   200e8:	00db      	lsls	r3, r3, #3
			frag = net_frag_skip(frag, offset, &offset,
   200ea:	3b02      	subs	r3, #2
   200ec:	b29b      	uxth	r3, r3
	return net_frag_read(frag, offset, pos, len, NULL);
   200ee:	2200      	movs	r2, #0
   200f0:	9200      	str	r2, [sp, #0]
   200f2:	aa11      	add	r2, sp, #68	; 0x44
   200f4:	f7fc fef3 	bl	1cede <net_frag_read>
			if (!frag && offset) {
   200f8:	4605      	mov	r5, r0
   200fa:	2800      	cmp	r0, #0
   200fc:	d1cc      	bne.n	20098 <handle_ra_input+0x1c4>
   200fe:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
   20102:	2b00      	cmp	r3, #0
   20104:	d0c8      	beq.n	20098 <handle_ra_input+0x1c4>
   20106:	e706      	b.n	1ff16 <handle_ra_input+0x42>
			if (!frag && offset) {
   20108:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
   2010c:	2b00      	cmp	r3, #0
   2010e:	d0bf      	beq.n	20090 <handle_ra_input+0x1bc>
   20110:	e701      	b.n	1ff16 <handle_ra_input+0x42>
			frag = handle_ra_prefix(pkt, frag, length, offset,
   20112:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   20116:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
	prefix_info.type = NET_ICMPV6_ND_OPT_PREFIX_INFO;
   2011a:	2203      	movs	r2, #3
   2011c:	f88d 201c 	strb.w	r2, [sp, #28]
	prefix_info.len = len * 8 - 2;
   20120:	4093      	lsls	r3, r2
   20122:	b2db      	uxtb	r3, r3
   20124:	3b02      	subs	r3, #2
   20126:	f88d 301d 	strb.w	r3, [sp, #29]
	frag = net_frag_read(frag, offset, pos, 1, &prefix_info.prefix_len);
   2012a:	f10d 031e 	add.w	r3, sp, #30
   2012e:	9300      	str	r3, [sp, #0]
   20130:	2301      	movs	r3, #1
   20132:	aa11      	add	r2, sp, #68	; 0x44
   20134:	f7fc fed3 	bl	1cede <net_frag_read>
	frag = net_frag_read(frag, *pos, pos, 1, &prefix_info.flags);
   20138:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   2013c:	f10d 031f 	add.w	r3, sp, #31
   20140:	9300      	str	r3, [sp, #0]
   20142:	2301      	movs	r3, #1
   20144:	aa11      	add	r2, sp, #68	; 0x44
   20146:	f7fc feca 	bl	1cede <net_frag_read>
	frag = net_frag_read_be32(frag, *pos, pos, &prefix_info.valid_lifetime);
   2014a:	ab08      	add	r3, sp, #32
   2014c:	aa11      	add	r2, sp, #68	; 0x44
   2014e:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   20152:	f7fc ff1d 	bl	1cf90 <net_frag_read_be32>
	frag = net_frag_read_be32(frag, *pos, pos,
   20156:	ab09      	add	r3, sp, #36	; 0x24
   20158:	aa11      	add	r2, sp, #68	; 0x44
   2015a:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   2015e:	f7fc ff17 	bl	1cf90 <net_frag_read_be32>
	frag = net_frag_skip(frag, *pos, pos, 4);
   20162:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   20166:	2300      	movs	r3, #0
   20168:	9300      	str	r3, [sp, #0]
   2016a:	2304      	movs	r3, #4
   2016c:	aa11      	add	r2, sp, #68	; 0x44
   2016e:	f7fc feb6 	bl	1cede <net_frag_read>
	frag = net_frag_read(frag, *pos, pos, sizeof(struct in6_addr),
   20172:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   20176:	ab0b      	add	r3, sp, #44	; 0x2c
   20178:	9300      	str	r3, [sp, #0]
   2017a:	2310      	movs	r3, #16
   2017c:	aa11      	add	r2, sp, #68	; 0x44
   2017e:	f7fc feae 	bl	1cede <net_frag_read>
	if (!frag && *pos) {
   20182:	4605      	mov	r5, r0
   20184:	b320      	cbz	r0, 201d0 <handle_ra_input+0x2fc>
	if (prefix_info.valid_lifetime >= prefix_info.preferred_lifetime &&
   20186:	9b09      	ldr	r3, [sp, #36]	; 0x24
   20188:	9a08      	ldr	r2, [sp, #32]
   2018a:	429a      	cmp	r2, r3
   2018c:	d314      	bcc.n	201b8 <handle_ra_input+0x2e4>
   2018e:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
   20192:	f248 03fe 	movw	r3, #33022	; 0x80fe
   20196:	429a      	cmp	r2, r3
   20198:	d00e      	beq.n	201b8 <handle_ra_input+0x2e4>
		if (prefix_info.flags & NET_ICMPV6_RA_FLAG_ONLINK) {
   2019a:	f99d 301f 	ldrsb.w	r3, [sp, #31]
   2019e:	2b00      	cmp	r3, #0
   201a0:	db1b      	blt.n	201da <handle_ra_input+0x306>
		if ((prefix_info.flags & NET_ICMPV6_RA_FLAG_AUTONOMOUS) &&
   201a2:	f89d 301f 	ldrb.w	r3, [sp, #31]
   201a6:	f013 0f40 	tst.w	r3, #64	; 0x40
   201aa:	d005      	beq.n	201b8 <handle_ra_input+0x2e4>
		    prefix_info.valid_lifetime &&
   201ac:	9b08      	ldr	r3, [sp, #32]
		if ((prefix_info.flags & NET_ICMPV6_RA_FLAG_AUTONOMOUS) &&
   201ae:	b11b      	cbz	r3, 201b8 <handle_ra_input+0x2e4>
		    (prefix_info.prefix_len == NET_IPV6_DEFAULT_PREFIX_LEN)) {
   201b0:	f89d 301e 	ldrb.w	r3, [sp, #30]
		    prefix_info.valid_lifetime &&
   201b4:	2b40      	cmp	r3, #64	; 0x40
   201b6:	d03e      	beq.n	20236 <handle_ra_input+0x362>
			if (!frag && offset) {
   201b8:	2d00      	cmp	r5, #0
   201ba:	f47f af6d 	bne.w	20098 <handle_ra_input+0x1c4>
   201be:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
   201c2:	2b00      	cmp	r3, #0
   201c4:	f43f af68 	beq.w	20098 <handle_ra_input+0x1c4>
   201c8:	e6a5      	b.n	1ff16 <handle_ra_input+0x42>
   201ca:	bf00      	nop
   201cc:	200029e8 	.word	0x200029e8
	if (!frag && *pos) {
   201d0:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
   201d4:	2b00      	cmp	r3, #0
   201d6:	d0d6      	beq.n	20186 <handle_ra_input+0x2b2>
   201d8:	e7ee      	b.n	201b8 <handle_ra_input+0x2e4>
	prefix = net_if_ipv6_prefix_lookup(net_pkt_iface(pkt),
   201da:	f89d 201e 	ldrb.w	r2, [sp, #30]
   201de:	a90b      	add	r1, sp, #44	; 0x2c
   201e0:	6970      	ldr	r0, [r6, #20]
   201e2:	f7fa fe3f 	bl	1ae64 <net_if_ipv6_prefix_lookup>
	if (!prefix) {
   201e6:	4603      	mov	r3, r0
   201e8:	b160      	cbz	r0, 20204 <handle_ra_input+0x330>
	switch (prefix_info->valid_lifetime) {
   201ea:	9a08      	ldr	r2, [sp, #32]
   201ec:	b1ba      	cbz	r2, 2021e <handle_ra_input+0x34a>
   201ee:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   201f2:	d01c      	beq.n	2022e <handle_ra_input+0x35a>
	prefix->is_infinite = is_infinite;
   201f4:	2200      	movs	r2, #0
   201f6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		net_if_ipv6_prefix_set_timer(prefix,
   201fa:	9908      	ldr	r1, [sp, #32]
   201fc:	4618      	mov	r0, r3
   201fe:	f7fa fee3 	bl	1afc8 <net_if_ipv6_prefix_set_timer>
   20202:	e7ce      	b.n	201a2 <handle_ra_input+0x2ce>
		if (!prefix_info->valid_lifetime) {
   20204:	9b08      	ldr	r3, [sp, #32]
   20206:	2b00      	cmp	r3, #0
   20208:	d0cb      	beq.n	201a2 <handle_ra_input+0x2ce>
		prefix = net_if_ipv6_prefix_add(net_pkt_iface(pkt),
   2020a:	f89d 201e 	ldrb.w	r2, [sp, #30]
   2020e:	a90b      	add	r1, sp, #44	; 0x2c
   20210:	6970      	ldr	r0, [r6, #20]
   20212:	f7fa fdf7 	bl	1ae04 <net_if_ipv6_prefix_add>
		if (prefix) {
   20216:	4603      	mov	r3, r0
   20218:	2800      	cmp	r0, #0
   2021a:	d1e6      	bne.n	201ea <handle_ra_input+0x316>
   2021c:	e7c1      	b.n	201a2 <handle_ra_input+0x2ce>
		net_if_ipv6_prefix_rm(net_pkt_iface(pkt),
   2021e:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
   20222:	f103 0128 	add.w	r1, r3, #40	; 0x28
   20226:	6970      	ldr	r0, [r6, #20]
   20228:	f7fa feea 	bl	1b000 <net_if_ipv6_prefix_rm>
   2022c:	e7b9      	b.n	201a2 <handle_ra_input+0x2ce>
   2022e:	2201      	movs	r2, #1
   20230:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
   20234:	e7b5      	b.n	201a2 <handle_ra_input+0x2ce>
	struct in6_addr addr = { };
   20236:	2300      	movs	r3, #0
   20238:	9305      	str	r3, [sp, #20]
   2023a:	9306      	str	r3, [sp, #24]
	return pkt->iface;
   2023c:	6974      	ldr	r4, [r6, #20]
	return &iface->link_addr;
   2023e:	f104 0810 	add.w	r8, r4, #16
	addr->s6_addr[0] = 0xfe;
   20242:	22fe      	movs	r2, #254	; 0xfe
   20244:	f88d 200c 	strb.w	r2, [sp, #12]
	addr->s6_addr[1] = 0x80;
   20248:	2280      	movs	r2, #128	; 0x80
   2024a:	f88d 200d 	strb.w	r2, [sp, #13]
	UNALIGNED_PUT(0, &addr->s6_addr16[1]);
   2024e:	f8ad 300e 	strh.w	r3, [sp, #14]
	UNALIGNED_PUT(0, &addr->s6_addr32[1]);
   20252:	9304      	str	r3, [sp, #16]
	switch (lladdr->len) {
   20254:	f898 2004 	ldrb.w	r2, [r8, #4]
   20258:	2a06      	cmp	r2, #6
   2025a:	d032      	beq.n	202c2 <handle_ra_input+0x3ee>
   2025c:	2a08      	cmp	r2, #8
   2025e:	d058      	beq.n	20312 <handle_ra_input+0x43e>
   20260:	2a02      	cmp	r2, #2
   20262:	d018      	beq.n	20296 <handle_ra_input+0x3c2>
	memcpy(&addr, &prefix_info->prefix, sizeof(struct in6_addr) / 2);
   20264:	2208      	movs	r2, #8
   20266:	a90b      	add	r1, sp, #44	; 0x2c
   20268:	a803      	add	r0, sp, #12
   2026a:	f7e0 f829 	bl	2c0 <memcpy>
	ifaddr = net_if_ipv6_addr_lookup(&addr, NULL);
   2026e:	2100      	movs	r1, #0
   20270:	a803      	add	r0, sp, #12
   20272:	f7fa fb03 	bl	1a87c <net_if_ipv6_addr_lookup>
	if (ifaddr && ifaddr->addr_type == NET_ADDR_AUTOCONF) {
   20276:	4604      	mov	r4, r0
   20278:	b118      	cbz	r0, 20282 <handle_ra_input+0x3ae>
   2027a:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
   2027e:	2b01      	cmp	r3, #1
   20280:	d052      	beq.n	20328 <handle_ra_input+0x454>
		if (prefix_info->valid_lifetime ==
   20282:	9b08      	ldr	r3, [sp, #32]
   20284:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   20288:	d072      	beq.n	20370 <handle_ra_input+0x49c>
			net_if_ipv6_addr_add(net_pkt_iface(pkt),
   2028a:	2201      	movs	r2, #1
   2028c:	a903      	add	r1, sp, #12
   2028e:	6970      	ldr	r0, [r6, #20]
   20290:	f7fa fb6a 	bl	1a968 <net_if_ipv6_addr_add>
   20294:	e790      	b.n	201b8 <handle_ra_input+0x2e4>
		if (lladdr->type == NET_LINK_IEEE802154) {
   20296:	f898 3005 	ldrb.w	r3, [r8, #5]
   2029a:	2b01      	cmp	r3, #1
   2029c:	d1e2      	bne.n	20264 <handle_ra_input+0x390>
			UNALIGNED_PUT(0, &addr->s6_addr32[2]);
   2029e:	2300      	movs	r3, #0
			addr->s6_addr[11] = 0xff;
   202a0:	22ff      	movs	r2, #255	; 0xff
   202a2:	f88d 2017 	strb.w	r2, [sp, #23]
			addr->s6_addr[12] = 0xfe;
   202a6:	22fe      	movs	r2, #254	; 0xfe
   202a8:	f88d 2018 	strb.w	r2, [sp, #24]
			addr->s6_addr[13] = 0;
   202ac:	f88d 3019 	strb.w	r3, [sp, #25]
			addr->s6_addr[14] = lladdr->addr[0];
   202b0:	6923      	ldr	r3, [r4, #16]
   202b2:	781b      	ldrb	r3, [r3, #0]
   202b4:	f88d 301a 	strb.w	r3, [sp, #26]
			addr->s6_addr[15] = lladdr->addr[1];
   202b8:	6923      	ldr	r3, [r4, #16]
   202ba:	785b      	ldrb	r3, [r3, #1]
   202bc:	f88d 301b 	strb.w	r3, [sp, #27]
   202c0:	e7d0      	b.n	20264 <handle_ra_input+0x390>
		memcpy(&addr->s6_addr[8], lladdr->addr, 3);
   202c2:	2203      	movs	r2, #3
   202c4:	6921      	ldr	r1, [r4, #16]
   202c6:	a805      	add	r0, sp, #20
   202c8:	f7df fffa 	bl	2c0 <memcpy>
		addr->s6_addr[11] = 0xff;
   202cc:	23ff      	movs	r3, #255	; 0xff
   202ce:	f88d 3017 	strb.w	r3, [sp, #23]
		addr->s6_addr[12] = 0xfe;
   202d2:	23fe      	movs	r3, #254	; 0xfe
   202d4:	f88d 3018 	strb.w	r3, [sp, #24]
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   202d8:	6921      	ldr	r1, [r4, #16]
   202da:	2203      	movs	r2, #3
   202dc:	4411      	add	r1, r2
   202de:	f10d 0019 	add.w	r0, sp, #25
   202e2:	f7df ffed 	bl	2c0 <memcpy>
		if (lladdr->type == NET_LINK_BLUETOOTH) {
   202e6:	f898 3005 	ldrb.w	r3, [r8, #5]
   202ea:	2b02      	cmp	r3, #2
   202ec:	d00a      	beq.n	20304 <handle_ra_input+0x430>
		if (lladdr->type == NET_LINK_ETHERNET) {
   202ee:	f898 3005 	ldrb.w	r3, [r8, #5]
   202f2:	2b03      	cmp	r3, #3
   202f4:	d1b6      	bne.n	20264 <handle_ra_input+0x390>
			addr->s6_addr[8] ^= 0x02;
   202f6:	f89d 3014 	ldrb.w	r3, [sp, #20]
   202fa:	f083 0302 	eor.w	r3, r3, #2
   202fe:	f88d 3014 	strb.w	r3, [sp, #20]
   20302:	e7af      	b.n	20264 <handle_ra_input+0x390>
			addr->s6_addr[8] ^= 0x02;
   20304:	f89d 3014 	ldrb.w	r3, [sp, #20]
   20308:	f083 0302 	eor.w	r3, r3, #2
   2030c:	f88d 3014 	strb.w	r3, [sp, #20]
   20310:	e7ed      	b.n	202ee <handle_ra_input+0x41a>
		memcpy(&addr->s6_addr[8], lladdr->addr, lladdr->len);
   20312:	6921      	ldr	r1, [r4, #16]
   20314:	a805      	add	r0, sp, #20
   20316:	f7df ffd3 	bl	2c0 <memcpy>
		addr->s6_addr[8] ^= 0x02;
   2031a:	f89d 3014 	ldrb.w	r3, [sp, #20]
   2031e:	f083 0302 	eor.w	r3, r3, #2
   20322:	f88d 3014 	strb.w	r3, [sp, #20]
   20326:	e79d      	b.n	20264 <handle_ra_input+0x390>
		if (prefix_info->valid_lifetime ==
   20328:	f8dd 8020 	ldr.w	r8, [sp, #32]
   2032c:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   20330:	d015      	beq.n	2035e <handle_ra_input+0x48a>
		if ((prefix_info->valid_lifetime > TWO_HOURS) ||
   20332:	f5b8 5fe1 	cmp.w	r8, #7200	; 0x1c20
   20336:	d80a      	bhi.n	2034e <handle_ra_input+0x47a>
	return _timeout_remaining_get(&work->timeout);
   20338:	3020      	adds	r0, #32
   2033a:	f008 ff79 	bl	29230 <_timeout_remaining_get>
	return k_delayed_work_remaining_get(work) / MSEC_PER_SEC;
   2033e:	4a30      	ldr	r2, [pc, #192]	; (20400 <handle_ra_input+0x52c>)
   20340:	fb82 3200 	smull	r3, r2, r2, r0
   20344:	17c3      	asrs	r3, r0, #31
   20346:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
		if ((prefix_info->valid_lifetime > TWO_HOURS) ||
   2034a:	4598      	cmp	r8, r3
   2034c:	d90a      	bls.n	20364 <handle_ra_input+0x490>
			net_if_ipv6_addr_update_lifetime(ifaddr,
   2034e:	9908      	ldr	r1, [sp, #32]
   20350:	4620      	mov	r0, r4
   20352:	f7fa fafb 	bl	1a94c <net_if_ipv6_addr_update_lifetime>
	ifaddr->is_infinite = is_infinite;
   20356:	2300      	movs	r3, #0
   20358:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
   2035c:	e72c      	b.n	201b8 <handle_ra_input+0x2e4>
   2035e:	f880 3067 	strb.w	r3, [r0, #103]	; 0x67
   20362:	e729      	b.n	201b8 <handle_ra_input+0x2e4>
			net_if_ipv6_addr_update_lifetime(ifaddr, TWO_HOURS);
   20364:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
   20368:	4620      	mov	r0, r4
   2036a:	f7fa faef 	bl	1a94c <net_if_ipv6_addr_update_lifetime>
   2036e:	e7f2      	b.n	20356 <handle_ra_input+0x482>
			net_if_ipv6_addr_add(net_pkt_iface(pkt),
   20370:	2300      	movs	r3, #0
   20372:	2201      	movs	r2, #1
   20374:	a903      	add	r1, sp, #12
   20376:	6970      	ldr	r0, [r6, #20]
   20378:	f7fa faf6 	bl	1a968 <net_if_ipv6_addr_add>
   2037c:	e71c      	b.n	201b8 <handle_ra_input+0x2e4>
	return pkt->frags->data;
   2037e:	68b3      	ldr	r3, [r6, #8]
   20380:	6899      	ldr	r1, [r3, #8]
	router = net_if_ipv6_router_lookup(net_pkt_iface(pkt),
   20382:	3108      	adds	r1, #8
   20384:	6970      	ldr	r0, [r6, #20]
   20386:	f7fa fe7b 	bl	1b080 <net_if_ipv6_router_lookup>
	if (router) {
   2038a:	4603      	mov	r3, r0
   2038c:	b350      	cbz	r0, 203e4 <handle_ra_input+0x510>
		if (!router_lifetime) {
   2038e:	f8bd 1052 	ldrh.w	r1, [sp, #82]	; 0x52
   20392:	b321      	cbz	r1, 203de <handle_ra_input+0x50a>
			if (nbr) {
   20394:	b11f      	cbz	r7, 2039e <handle_ra_input+0x4ca>
   20396:	68fa      	ldr	r2, [r7, #12]
				net_ipv6_nbr_data(nbr)->is_router = true;
   20398:	2001      	movs	r0, #1
   2039a:	f882 0069 	strb.w	r0, [r2, #105]	; 0x69
			net_if_ipv6_router_update_lifetime(router,
   2039e:	4618      	mov	r0, r3
   203a0:	f7fa fec6 	bl	1b130 <net_if_ipv6_router_update_lifetime>
	if (nbr && net_ipv6_nbr_data(nbr)->pending) {
   203a4:	b18f      	cbz	r7, 203ca <handle_ra_input+0x4f6>
   203a6:	68fb      	ldr	r3, [r7, #12]
   203a8:	6818      	ldr	r0, [r3, #0]
   203aa:	b170      	cbz	r0, 203ca <handle_ra_input+0x4f6>
		if (net_send_data(net_ipv6_nbr_data(nbr)->pending) < 0) {
   203ac:	f7fa f818 	bl	1a3e0 <net_send_data>
   203b0:	2800      	cmp	r0, #0
   203b2:	db20      	blt.n	203f6 <handle_ra_input+0x522>
   203b4:	68fc      	ldr	r4, [r7, #12]
	k_delayed_work_cancel(&data->send_ns);
   203b6:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   203ba:	f008 ffdd 	bl	29378 <k_delayed_work_cancel>
	if (data->pending) {
   203be:	6820      	ldr	r0, [r4, #0]
   203c0:	b118      	cbz	r0, 203ca <handle_ra_input+0x4f6>
		net_pkt_unref(data->pending);
   203c2:	f7fc fc0e 	bl	1cbe2 <net_pkt_unref>
		data->pending = NULL;
   203c6:	2300      	movs	r3, #0
   203c8:	6023      	str	r3, [r4, #0]
	return pkt->iface;
   203ca:	6970      	ldr	r0, [r6, #20]
	k_delayed_work_cancel(&net_pkt_iface(pkt)->ipv6.rs_timer);
   203cc:	f500 7018 	add.w	r0, r0, #608	; 0x260
   203d0:	f008 ffd2 	bl	29378 <k_delayed_work_cancel>
	net_pkt_unref(pkt);
   203d4:	4630      	mov	r0, r6
   203d6:	f7fc fc04 	bl	1cbe2 <net_pkt_unref>
	return NET_OK;
   203da:	2000      	movs	r0, #0
   203dc:	e5a2      	b.n	1ff24 <handle_ra_input+0x50>
			net_if_ipv6_router_rm(router);
   203de:	f7fa ff0b 	bl	1b1f8 <net_if_ipv6_router_rm>
   203e2:	e7df      	b.n	203a4 <handle_ra_input+0x4d0>
	return pkt->frags->data;
   203e4:	68b3      	ldr	r3, [r6, #8]
   203e6:	6899      	ldr	r1, [r3, #8]
		net_if_ipv6_router_add(net_pkt_iface(pkt),
   203e8:	f8bd 2052 	ldrh.w	r2, [sp, #82]	; 0x52
   203ec:	3108      	adds	r1, #8
   203ee:	6970      	ldr	r0, [r6, #20]
   203f0:	f7fa feaa 	bl	1b148 <net_if_ipv6_router_add>
   203f4:	e7d6      	b.n	203a4 <handle_ra_input+0x4d0>
   203f6:	68fb      	ldr	r3, [r7, #12]
			net_pkt_unref(net_ipv6_nbr_data(nbr)->pending);
   203f8:	6818      	ldr	r0, [r3, #0]
   203fa:	f7fc fbf2 	bl	1cbe2 <net_pkt_unref>
   203fe:	e7d9      	b.n	203b4 <handle_ra_input+0x4e0>
   20400:	10624dd3 	.word	0x10624dd3

00020404 <handle_ns_input>:
{
   20404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20408:	b0a5      	sub	sp, #148	; 0x94
   2040a:	4604      	mov	r4, r0
	return net_buf_frags_len(pkt->frags);
   2040c:	6883      	ldr	r3, [r0, #8]
	size_t bytes = 0;
   2040e:	2200      	movs	r2, #0
   20410:	e002      	b.n	20418 <handle_ns_input+0x14>
		bytes += buf->len;
   20412:	8999      	ldrh	r1, [r3, #12]
   20414:	440a      	add	r2, r1
		buf = buf->frags;
   20416:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   20418:	2b00      	cmp	r3, #0
   2041a:	d1fa      	bne.n	20412 <handle_ns_input+0xe>
	u16_t total_len = net_pkt_get_len(pkt);
   2041c:	b295      	uxth	r5, r2
	ns_hdr = net_icmpv6_get_ns_hdr(pkt, &nshdr);
   2041e:	a90a      	add	r1, sp, #40	; 0x28
   20420:	4620      	mov	r0, r4
   20422:	f7fd fe51 	bl	1e0c8 <net_icmpv6_get_ns_hdr>
   20426:	4606      	mov	r6, r0
	net_stats.ipv6_nd.recv++;
   20428:	4aa6      	ldr	r2, [pc, #664]	; (206c4 <handle_ns_input+0x2c0>)
   2042a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
   2042e:	3301      	adds	r3, #1
   20430:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	if ((total_len < (sizeof(struct net_ipv6_hdr) +
   20434:	2d3f      	cmp	r5, #63	; 0x3f
   20436:	d904      	bls.n	20442 <handle_ns_input+0x3e>
	return pkt->frags->data;
   20438:	68a3      	ldr	r3, [r4, #8]
   2043a:	689b      	ldr	r3, [r3, #8]
	    (NET_IPV6_HDR(pkt)->hop_limit != NET_IPV6_ND_HOP_LIMIT)) {
   2043c:	79db      	ldrb	r3, [r3, #7]
			  sizeof(struct net_icmpv6_ns_hdr))) ||
   2043e:	2bff      	cmp	r3, #255	; 0xff
   20440:	d002      	beq.n	20448 <handle_ns_input+0x44>
	return addr->s6_addr[0] == 0xFF;
   20442:	7933      	ldrb	r3, [r6, #4]
		if (net_is_ipv6_addr_mcast(&ns_hdr->tgt)) {
   20444:	2bff      	cmp	r3, #255	; 0xff
   20446:	d00a      	beq.n	2045e <handle_ns_input+0x5a>
	pkt->ipv6_ext_opt_len = len;
   20448:	2314      	movs	r3, #20
   2044a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
	nd_opt_hdr = net_icmpv6_get_nd_opt_hdr(pkt, &ndopthdr);
   2044e:	a90f      	add	r1, sp, #60	; 0x3c
   20450:	4620      	mov	r0, r4
   20452:	f7fd fe95 	bl	1e180 <net_icmpv6_get_nd_opt_hdr>
   20456:	4607      	mov	r7, r0
	return net_buf_frags_len(pkt->frags);
   20458:	68a3      	ldr	r3, [r4, #8]
	size_t bytes = 0;
   2045a:	2500      	movs	r5, #0
   2045c:	e00e      	b.n	2047c <handle_ns_input+0x78>
			icmp_hdr = net_icmpv6_get_hdr(pkt, &hdr);
   2045e:	a908      	add	r1, sp, #32
   20460:	4620      	mov	r0, r4
   20462:	f7fd fcc2 	bl	1ddea <net_icmpv6_get_hdr>
			if (!icmp_hdr || icmp_hdr->code != 0) {
   20466:	2800      	cmp	r0, #0
   20468:	f000 80b7 	beq.w	205da <handle_ns_input+0x1d6>
   2046c:	7843      	ldrb	r3, [r0, #1]
   2046e:	2b00      	cmp	r3, #0
   20470:	f040 80b3 	bne.w	205da <handle_ns_input+0x1d6>
   20474:	e7e8      	b.n	20448 <handle_ns_input+0x44>
		bytes += buf->len;
   20476:	899a      	ldrh	r2, [r3, #12]
   20478:	4415      	add	r5, r2
		buf = buf->frags;
   2047a:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   2047c:	2b00      	cmp	r3, #0
   2047e:	d1fa      	bne.n	20476 <handle_ns_input+0x72>
	left_len = net_pkt_get_len(pkt) - (sizeof(struct net_ipv6_hdr) +
   20480:	3d2c      	subs	r5, #44	; 0x2c
	while (nd_opt_hdr && net_pkt_ipv6_ext_opt_len(pkt) < left_len) {
   20482:	e042      	b.n	2050a <handle_ns_input+0x106>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   20484:	2100      	movs	r1, #0
			if (net_is_ipv6_addr_unspecified(
   20486:	2900      	cmp	r1, #0
   20488:	f040 80a7 	bne.w	205da <handle_ns_input+0x1d6>
					   net_pkt_ip_hdr_len(pkt) +
   2048c:	f894 1033 	ldrb.w	r1, [r4, #51]	; 0x33
					   net_pkt_ipv6_ext_len(pkt) +
   20490:	f894 003b 	ldrb.w	r0, [r4, #59]	; 0x3b
					   net_pkt_ip_hdr_len(pkt) +
   20494:	4401      	add	r1, r0
					   sizeof(struct net_icmp_hdr) +
   20496:	4411      	add	r1, r2
   20498:	b289      	uxth	r1, r1
			handle_ns_neighbor(pkt, nd_opt_hdr->len,
   2049a:	3106      	adds	r1, #6
	lladdr.len = 8 * ll_len - 2;
   2049c:	00db      	lsls	r3, r3, #3
   2049e:	b2db      	uxtb	r3, r3
   204a0:	3b02      	subs	r3, #2
   204a2:	b2db      	uxtb	r3, r3
   204a4:	f88d 3019 	strb.w	r3, [sp, #25]
	frag = net_frag_read(pkt->frags, sllao_offset,
   204a8:	f10d 021a 	add.w	r2, sp, #26
   204ac:	9200      	str	r2, [sp, #0]
   204ae:	f10d 0216 	add.w	r2, sp, #22
   204b2:	b289      	uxth	r1, r1
   204b4:	68a0      	ldr	r0, [r4, #8]
   204b6:	f7fc fd12 	bl	1cede <net_frag_read>
	if (!frag && pos == 0xffff) {
   204ba:	2800      	cmp	r0, #0
   204bc:	d042      	beq.n	20544 <handle_ns_input+0x140>
	nbr_lladdr.len = lladdr.len;
   204be:	f89d 3019 	ldrb.w	r3, [sp, #25]
   204c2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	nbr_lladdr.addr = lladdr.addr;
   204c6:	f10d 021a 	add.w	r2, sp, #26
   204ca:	9208      	str	r2, [sp, #32]
	if (net_pkt_ll_src(pkt)->len < nbr_lladdr.len) {
   204cc:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
   204d0:	4293      	cmp	r3, r2
   204d2:	d901      	bls.n	204d8 <handle_ns_input+0xd4>
		nbr_lladdr.len = net_pkt_ll_src(pkt)->len;
   204d4:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
	return pkt->frags->data;
   204d8:	68a3      	ldr	r3, [r4, #8]
   204da:	6899      	ldr	r1, [r3, #8]
	return net_ipv6_nbr_add(net_pkt_iface(pkt), &NET_IPV6_HDR(pkt)->src,
   204dc:	2300      	movs	r3, #0
   204de:	9300      	str	r3, [sp, #0]
   204e0:	aa08      	add	r2, sp, #32
   204e2:	3108      	adds	r1, #8
   204e4:	6960      	ldr	r0, [r4, #20]
   204e6:	f7ff fc91 	bl	1fe0c <net_ipv6_nbr_add>
	return pkt->ipv6_ext_opt_len;
   204ea:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
					     (nd_opt_hdr->len << 3));
   204ee:	787b      	ldrb	r3, [r7, #1]
   204f0:	00db      	lsls	r3, r3, #3
   204f2:	b2db      	uxtb	r3, r3
		net_pkt_set_ipv6_ext_opt_len(pkt,
   204f4:	4413      	add	r3, r2
   204f6:	b2db      	uxtb	r3, r3
	pkt->ipv6_ext_opt_len = len;
   204f8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
		if (prev_opt_len >= net_pkt_ipv6_ext_opt_len(pkt)) {
   204fc:	429a      	cmp	r2, r3
   204fe:	d26c      	bcs.n	205da <handle_ns_input+0x1d6>
		nd_opt_hdr = net_icmpv6_get_nd_opt_hdr(pkt, &ndopthdr);
   20500:	a90f      	add	r1, sp, #60	; 0x3c
   20502:	4620      	mov	r0, r4
   20504:	f7fd fe3c 	bl	1e180 <net_icmpv6_get_nd_opt_hdr>
   20508:	4607      	mov	r7, r0
	while (nd_opt_hdr && net_pkt_ipv6_ext_opt_len(pkt) < left_len) {
   2050a:	b317      	cbz	r7, 20552 <handle_ns_input+0x14e>
	return pkt->ipv6_ext_opt_len;
   2050c:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
   20510:	4295      	cmp	r5, r2
   20512:	d91e      	bls.n	20552 <handle_ns_input+0x14e>
		if (!nd_opt_hdr->len) {
   20514:	787b      	ldrb	r3, [r7, #1]
   20516:	b1e3      	cbz	r3, 20552 <handle_ns_input+0x14e>
		switch (nd_opt_hdr->type) {
   20518:	7839      	ldrb	r1, [r7, #0]
   2051a:	2901      	cmp	r1, #1
   2051c:	d1e5      	bne.n	204ea <handle_ns_input+0xe6>
	return pkt->frags->data;
   2051e:	68a1      	ldr	r1, [r4, #8]
   20520:	6889      	ldr	r1, [r1, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   20522:	6888      	ldr	r0, [r1, #8]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   20524:	2800      	cmp	r0, #0
   20526:	d1ad      	bne.n	20484 <handle_ns_input+0x80>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   20528:	68c8      	ldr	r0, [r1, #12]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   2052a:	b928      	cbnz	r0, 20538 <handle_ns_input+0x134>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   2052c:	6908      	ldr	r0, [r1, #16]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   2052e:	b928      	cbnz	r0, 2053c <handle_ns_input+0x138>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   20530:	6949      	ldr	r1, [r1, #20]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   20532:	b129      	cbz	r1, 20540 <handle_ns_input+0x13c>
   20534:	2100      	movs	r1, #0
   20536:	e7a6      	b.n	20486 <handle_ns_input+0x82>
   20538:	2100      	movs	r1, #0
   2053a:	e7a4      	b.n	20486 <handle_ns_input+0x82>
   2053c:	2100      	movs	r1, #0
   2053e:	e7a2      	b.n	20486 <handle_ns_input+0x82>
   20540:	2101      	movs	r1, #1
   20542:	e7a0      	b.n	20486 <handle_ns_input+0x82>
	if (!frag && pos == 0xffff) {
   20544:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   20548:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2054c:	429a      	cmp	r2, r3
   2054e:	d1b6      	bne.n	204be <handle_ns_input+0xba>
   20550:	e7cb      	b.n	204ea <handle_ns_input+0xe6>
	return pkt->iface;
   20552:	f8d4 8014 	ldr.w	r8, [r4, #20]
	ifaddr = net_if_ipv6_addr_lookup_by_iface(net_pkt_iface(pkt),
   20556:	f106 0904 	add.w	r9, r6, #4
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   2055a:	2500      	movs	r5, #0
   2055c:	e001      	b.n	20562 <handle_ns_input+0x15e>
		if (net_is_ipv6_prefix(addr->s6_addr,
   2055e:	b9ef      	cbnz	r7, 2059c <handle_ns_input+0x198>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   20560:	3501      	adds	r5, #1
   20562:	2d02      	cmp	r5, #2
   20564:	dc21      	bgt.n	205aa <handle_ns_input+0x1a6>
		if (!iface->ipv6.unicast[i].is_used ||
   20566:	236c      	movs	r3, #108	; 0x6c
   20568:	fb03 8305 	mla	r3, r3, r5, r8
   2056c:	f893 7094 	ldrb.w	r7, [r3, #148]	; 0x94
   20570:	2f00      	cmp	r7, #0
   20572:	d0f5      	beq.n	20560 <handle_ns_input+0x15c>
		    iface->ipv6.unicast[i].address.family != AF_INET6) {
   20574:	236c      	movs	r3, #108	; 0x6c
   20576:	fb03 8305 	mla	r3, r3, r5, r8
   2057a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
		if (!iface->ipv6.unicast[i].is_used ||
   2057c:	2b0a      	cmp	r3, #10
   2057e:	d1ef      	bne.n	20560 <handle_ns_input+0x15c>
			iface->ipv6.unicast[i].address.in6_addr.s6_addr,
   20580:	216c      	movs	r1, #108	; 0x6c
   20582:	fb01 f105 	mul.w	r1, r1, r5
   20586:	3120      	adds	r1, #32
   20588:	4441      	add	r1, r8
	if (memcmp(addr1, addr2, bytes)) {
   2058a:	2210      	movs	r2, #16
   2058c:	4411      	add	r1, r2
   2058e:	4648      	mov	r0, r9
   20590:	f00a f9e4 	bl	2a95c <memcmp>
   20594:	2800      	cmp	r0, #0
   20596:	d0e2      	beq.n	2055e <handle_ns_input+0x15a>
		return false;
   20598:	2700      	movs	r7, #0
   2059a:	e7e0      	b.n	2055e <handle_ns_input+0x15a>
			return &iface->ipv6.unicast[i];
   2059c:	236c      	movs	r3, #108	; 0x6c
   2059e:	fb03 f505 	mul.w	r5, r3, r5
   205a2:	3520      	adds	r5, #32
   205a4:	4445      	add	r5, r8
   205a6:	350c      	adds	r5, #12
   205a8:	e000      	b.n	205ac <handle_ns_input+0x1a8>
	return NULL;
   205aa:	2500      	movs	r5, #0
	if (!ifaddr) {
   205ac:	b1ad      	cbz	r5, 205da <handle_ns_input+0x1d6>
	return pkt->frags->data;
   205ae:	68a3      	ldr	r3, [r4, #8]
   205b0:	6898      	ldr	r0, [r3, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   205b2:	6883      	ldr	r3, [r0, #8]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   205b4:	b93b      	cbnz	r3, 205c6 <handle_ns_input+0x1c2>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   205b6:	68c3      	ldr	r3, [r0, #12]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   205b8:	b9cb      	cbnz	r3, 205ee <handle_ns_input+0x1ea>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   205ba:	6903      	ldr	r3, [r0, #16]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   205bc:	b9cb      	cbnz	r3, 205f2 <handle_ns_input+0x1ee>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   205be:	6943      	ldr	r3, [r0, #20]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   205c0:	b1cb      	cbz	r3, 205f6 <handle_ns_input+0x1f2>
   205c2:	2300      	movs	r3, #0
   205c4:	e000      	b.n	205c8 <handle_ns_input+0x1c4>
   205c6:	2300      	movs	r3, #0
	if (net_is_ipv6_addr_unspecified(&NET_IPV6_HDR(pkt)->src)) {
   205c8:	2b00      	cmp	r3, #0
   205ca:	d07d      	beq.n	206c8 <handle_ns_input+0x2c4>
	return UNALIGNED_GET(&addr->s6_addr32[0]) == htonl(0xff020000) &&
   205cc:	6982      	ldr	r2, [r0, #24]
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   205ce:	f240 23ff 	movw	r3, #767	; 0x2ff
   205d2:	429a      	cmp	r2, r3
   205d4:	d011      	beq.n	205fa <handle_ns_input+0x1f6>
   205d6:	2300      	movs	r3, #0
		if (!net_is_ipv6_addr_solicited_node(&NET_IPV6_HDR(pkt)->dst)) {
   205d8:	bb0b      	cbnz	r3, 2061e <handle_ns_input+0x21a>
	net_stats.ipv6_nd.drop++;
   205da:	4a3a      	ldr	r2, [pc, #232]	; (206c4 <handle_ns_input+0x2c0>)
   205dc:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
   205e0:	3301      	adds	r3, #1
   205e2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
	return NET_DROP;
   205e6:	2002      	movs	r0, #2
}
   205e8:	b025      	add	sp, #148	; 0x94
   205ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   205ee:	2300      	movs	r3, #0
   205f0:	e7ea      	b.n	205c8 <handle_ns_input+0x1c4>
   205f2:	2300      	movs	r3, #0
   205f4:	e7e8      	b.n	205c8 <handle_ns_input+0x1c4>
   205f6:	2301      	movs	r3, #1
   205f8:	e7e6      	b.n	205c8 <handle_ns_input+0x1c4>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00000000 &&
   205fa:	69c3      	ldr	r3, [r0, #28]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == htonl(0xff020000) &&
   205fc:	b95b      	cbnz	r3, 20616 <handle_ns_input+0x212>
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   205fe:	6a03      	ldr	r3, [r0, #32]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00000000 &&
   20600:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   20604:	d001      	beq.n	2060a <handle_ns_input+0x206>
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   20606:	2300      	movs	r3, #0
   20608:	e7e6      	b.n	205d8 <handle_ns_input+0x1d4>
		((UNALIGNED_GET(&addr->s6_addr32[3]) & htonl(0xff000000)) ==
   2060a:	6a43      	ldr	r3, [r0, #36]	; 0x24
   2060c:	b2db      	uxtb	r3, r3
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   2060e:	2bff      	cmp	r3, #255	; 0xff
   20610:	d003      	beq.n	2061a <handle_ns_input+0x216>
   20612:	2300      	movs	r3, #0
   20614:	e7e0      	b.n	205d8 <handle_ns_input+0x1d4>
   20616:	2300      	movs	r3, #0
   20618:	e7de      	b.n	205d8 <handle_ns_input+0x1d4>
   2061a:	2301      	movs	r3, #1
   2061c:	e7dc      	b.n	205d8 <handle_ns_input+0x1d4>
		if (ifaddr->addr_state == NET_ADDR_TENTATIVE) {
   2061e:	f995 3065 	ldrsb.w	r3, [r5, #101]	; 0x65
   20622:	b94b      	cbnz	r3, 20638 <handle_ns_input+0x234>
	return pkt->iface;
   20624:	6960      	ldr	r0, [r4, #20]
			dad_failed(net_pkt_iface(pkt),
   20626:	1d29      	adds	r1, r5, #4
	return UNALIGNED_GET(&addr->s6_addr16[0]) == htons(0xFE80);
   20628:	88aa      	ldrh	r2, [r5, #4]
	if (net_is_ipv6_ll_addr(addr)) {
   2062a:	f248 03fe 	movw	r3, #33022	; 0x80fe
   2062e:	429a      	cmp	r2, r3
   20630:	d0d3      	beq.n	205da <handle_ns_input+0x1d6>
	net_if_ipv6_dad_failed(iface, addr);
   20632:	f7fa fb51 	bl	1acd8 <net_if_ipv6_dad_failed>
   20636:	e7d0      	b.n	205da <handle_ns_input+0x1d6>
	UNALIGNED_PUT(htons(addr0), &addr->s6_addr16[0]);
   20638:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2063c:	7603      	strb	r3, [r0, #24]
   2063e:	2300      	movs	r3, #0
   20640:	2202      	movs	r2, #2
   20642:	7642      	strb	r2, [r0, #25]
	UNALIGNED_PUT(htons(addr1), &addr->s6_addr16[1]);
   20644:	7683      	strb	r3, [r0, #26]
   20646:	76c3      	strb	r3, [r0, #27]
	UNALIGNED_PUT(htons(addr2), &addr->s6_addr16[2]);
   20648:	7703      	strb	r3, [r0, #28]
   2064a:	7743      	strb	r3, [r0, #29]
	UNALIGNED_PUT(htons(addr3), &addr->s6_addr16[3]);
   2064c:	7783      	strb	r3, [r0, #30]
   2064e:	77c3      	strb	r3, [r0, #31]
	UNALIGNED_PUT(htons(addr4), &addr->s6_addr16[4]);
   20650:	f880 3020 	strb.w	r3, [r0, #32]
   20654:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
	UNALIGNED_PUT(htons(addr5), &addr->s6_addr16[5]);
   20658:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
   2065c:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
	UNALIGNED_PUT(htons(addr6), &addr->s6_addr16[6]);
   20660:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
   20664:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
	UNALIGNED_PUT(htons(addr7), &addr->s6_addr16[7]);
   20668:	f880 3026 	strb.w	r3, [r0, #38]	; 0x26
   2066c:	2301      	movs	r3, #1
   2066e:	f880 3027 	strb.w	r3, [r0, #39]	; 0x27
	return pkt->frags->data;
   20672:	68a3      	ldr	r3, [r4, #8]
   20674:	f8d3 8008 	ldr.w	r8, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   20678:	f108 0118 	add.w	r1, r8, #24
   2067c:	6960      	ldr	r0, [r4, #20]
   2067e:	f7fa fe15 	bl	1b2ac <net_if_ipv6_select_src_addr>
   20682:	4603      	mov	r3, r0
   20684:	ae10      	add	r6, sp, #64	; 0x40
   20686:	6800      	ldr	r0, [r0, #0]
   20688:	6859      	ldr	r1, [r3, #4]
   2068a:	689a      	ldr	r2, [r3, #8]
   2068c:	68db      	ldr	r3, [r3, #12]
   2068e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   20690:	ae10      	add	r6, sp, #64	; 0x40
   20692:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   20694:	f8c8 0008 	str.w	r0, [r8, #8]
   20698:	f8c8 100c 	str.w	r1, [r8, #12]
   2069c:	f8c8 2010 	str.w	r2, [r8, #16]
   206a0:	f8c8 3014 	str.w	r3, [r8, #20]
		flags = NET_ICMPV6_NA_FLAG_OVERRIDE;
   206a4:	2320      	movs	r3, #32
   206a6:	68a2      	ldr	r2, [r4, #8]
   206a8:	6891      	ldr	r1, [r2, #8]
	ret = net_ipv6_send_na(net_pkt_iface(pkt),
   206aa:	9300      	str	r3, [sp, #0]
   206ac:	1d2b      	adds	r3, r5, #4
   206ae:	f101 0218 	add.w	r2, r1, #24
   206b2:	3108      	adds	r1, #8
   206b4:	6960      	ldr	r0, [r4, #20]
   206b6:	f7fe ff69 	bl	1f58c <net_ipv6_send_na>
	if (!ret) {
   206ba:	2800      	cmp	r0, #0
   206bc:	f000 80b5 	beq.w	2082a <handle_ns_input+0x426>
	return NET_DROP;
   206c0:	2002      	movs	r0, #2
   206c2:	e791      	b.n	205e8 <handle_ns_input+0x1e4>
   206c4:	200029e8 	.word	0x200029e8
	return net_if_ipv6_addr_lookup(addr, NULL) != NULL;
   206c8:	2100      	movs	r1, #0
   206ca:	3008      	adds	r0, #8
   206cc:	f7fa f8d6 	bl	1a87c <net_if_ipv6_addr_lookup>
	if (net_is_my_ipv6_addr(&NET_IPV6_HDR(pkt)->src)) {
   206d0:	4607      	mov	r7, r0
   206d2:	2800      	cmp	r0, #0
   206d4:	d181      	bne.n	205da <handle_ns_input+0x1d6>
   206d6:	68a3      	ldr	r3, [r4, #8]
   206d8:	f8d3 8008 	ldr.w	r8, [r3, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == htonl(0xff020000) &&
   206dc:	f8d8 2018 	ldr.w	r2, [r8, #24]
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   206e0:	f240 23ff 	movw	r3, #767	; 0x2ff
   206e4:	429a      	cmp	r2, r3
   206e6:	d02b      	beq.n	20740 <handle_ns_input+0x33c>
   206e8:	2300      	movs	r3, #0
	if (net_is_ipv6_addr_solicited_node(&NET_IPV6_HDR(pkt)->dst)) {
   206ea:	9303      	str	r3, [sp, #12]
   206ec:	2b00      	cmp	r3, #0
   206ee:	d03c      	beq.n	2076a <handle_ns_input+0x366>
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst,
   206f0:	af14      	add	r7, sp, #80	; 0x50
   206f2:	4643      	mov	r3, r8
   206f4:	f853 0f08 	ldr.w	r0, [r3, #8]!
   206f8:	6859      	ldr	r1, [r3, #4]
   206fa:	689a      	ldr	r2, [r3, #8]
   206fc:	68db      	ldr	r3, [r3, #12]
   206fe:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   20700:	af14      	add	r7, sp, #80	; 0x50
   20702:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   20704:	f8c8 0018 	str.w	r0, [r8, #24]
   20708:	f8c8 101c 	str.w	r1, [r8, #28]
   2070c:	f8c8 2020 	str.w	r2, [r8, #32]
   20710:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
   20714:	68a3      	ldr	r3, [r4, #8]
   20716:	f8d3 e008 	ldr.w	lr, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src, &ns_hdr->tgt);
   2071a:	af18      	add	r7, sp, #96	; 0x60
   2071c:	f856 0f04 	ldr.w	r0, [r6, #4]!
   20720:	6871      	ldr	r1, [r6, #4]
   20722:	68b2      	ldr	r2, [r6, #8]
   20724:	68f3      	ldr	r3, [r6, #12]
   20726:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   20728:	ae18      	add	r6, sp, #96	; 0x60
   2072a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   2072c:	f8ce 0008 	str.w	r0, [lr, #8]
   20730:	f8ce 100c 	str.w	r1, [lr, #12]
   20734:	f8ce 2010 	str.w	r2, [lr, #16]
   20738:	f8ce 3014 	str.w	r3, [lr, #20]
		flags = NET_ICMPV6_NA_FLAG_SOLICITED |
   2073c:	2360      	movs	r3, #96	; 0x60
		goto send_na;
   2073e:	e7b2      	b.n	206a6 <handle_ns_input+0x2a2>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00000000 &&
   20740:	f8d8 301c 	ldr.w	r3, [r8, #28]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == htonl(0xff020000) &&
   20744:	b96b      	cbnz	r3, 20762 <handle_ns_input+0x35e>
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   20746:	f8d8 3020 	ldr.w	r3, [r8, #32]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00000000 &&
   2074a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   2074e:	d001      	beq.n	20754 <handle_ns_input+0x350>
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   20750:	2300      	movs	r3, #0
   20752:	e7ca      	b.n	206ea <handle_ns_input+0x2e6>
		((UNALIGNED_GET(&addr->s6_addr32[3]) & htonl(0xff000000)) ==
   20754:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
   20758:	b2db      	uxtb	r3, r3
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   2075a:	2bff      	cmp	r3, #255	; 0xff
   2075c:	d003      	beq.n	20766 <handle_ns_input+0x362>
   2075e:	2300      	movs	r3, #0
   20760:	e7c3      	b.n	206ea <handle_ns_input+0x2e6>
   20762:	2300      	movs	r3, #0
   20764:	e7c1      	b.n	206ea <handle_ns_input+0x2e6>
   20766:	2301      	movs	r3, #1
   20768:	e7bf      	b.n	206ea <handle_ns_input+0x2e6>
	return pkt->iface;
   2076a:	f8d4 a014 	ldr.w	sl, [r4, #20]
	if (net_if_ipv6_addr_lookup_by_iface(net_pkt_iface(pkt),
   2076e:	f108 0818 	add.w	r8, r8, #24
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   20772:	f04f 0900 	mov.w	r9, #0
   20776:	e004      	b.n	20782 <handle_ns_input+0x37e>
		return false;
   20778:	f8dd b00c 	ldr.w	fp, [sp, #12]
   2077c:	e01e      	b.n	207bc <handle_ns_input+0x3b8>
   2077e:	f109 0901 	add.w	r9, r9, #1
   20782:	f1b9 0f02 	cmp.w	r9, #2
   20786:	dc22      	bgt.n	207ce <handle_ns_input+0x3ca>
		if (!iface->ipv6.unicast[i].is_used ||
   20788:	236c      	movs	r3, #108	; 0x6c
   2078a:	fb03 a309 	mla	r3, r3, r9, sl
   2078e:	f893 b094 	ldrb.w	fp, [r3, #148]	; 0x94
   20792:	f1bb 0f00 	cmp.w	fp, #0
   20796:	d0f2      	beq.n	2077e <handle_ns_input+0x37a>
		    iface->ipv6.unicast[i].address.family != AF_INET6) {
   20798:	236c      	movs	r3, #108	; 0x6c
   2079a:	fb03 a309 	mla	r3, r3, r9, sl
   2079e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
		if (!iface->ipv6.unicast[i].is_used ||
   207a0:	2b0a      	cmp	r3, #10
   207a2:	d1ec      	bne.n	2077e <handle_ns_input+0x37a>
			iface->ipv6.unicast[i].address.in6_addr.s6_addr,
   207a4:	216c      	movs	r1, #108	; 0x6c
   207a6:	fb01 f109 	mul.w	r1, r1, r9
   207aa:	3120      	adds	r1, #32
   207ac:	4451      	add	r1, sl
	if (memcmp(addr1, addr2, bytes)) {
   207ae:	2210      	movs	r2, #16
   207b0:	4411      	add	r1, r2
   207b2:	4640      	mov	r0, r8
   207b4:	f00a f8d2 	bl	2a95c <memcmp>
   207b8:	2800      	cmp	r0, #0
   207ba:	d1dd      	bne.n	20778 <handle_ns_input+0x374>
		if (net_is_ipv6_prefix(addr->s6_addr,
   207bc:	f1bb 0f00 	cmp.w	fp, #0
   207c0:	d0dd      	beq.n	2077e <handle_ns_input+0x37a>
			return &iface->ipv6.unicast[i];
   207c2:	276c      	movs	r7, #108	; 0x6c
   207c4:	fb07 f709 	mul.w	r7, r7, r9
   207c8:	3720      	adds	r7, #32
   207ca:	4457      	add	r7, sl
   207cc:	370c      	adds	r7, #12
   207ce:	2f00      	cmp	r7, #0
   207d0:	f43f af03 	beq.w	205da <handle_ns_input+0x1d6>
	return pkt->frags->data;
   207d4:	68a3      	ldr	r3, [r4, #8]
   207d6:	f8d3 c008 	ldr.w	ip, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst,
   207da:	af1c      	add	r7, sp, #112	; 0x70
   207dc:	4663      	mov	r3, ip
   207de:	f853 0f08 	ldr.w	r0, [r3, #8]!
   207e2:	6859      	ldr	r1, [r3, #4]
   207e4:	689a      	ldr	r2, [r3, #8]
   207e6:	68db      	ldr	r3, [r3, #12]
   207e8:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   207ea:	af1c      	add	r7, sp, #112	; 0x70
   207ec:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   207ee:	f8cc 0018 	str.w	r0, [ip, #24]
   207f2:	f8cc 101c 	str.w	r1, [ip, #28]
   207f6:	f8cc 2020 	str.w	r2, [ip, #32]
   207fa:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
   207fe:	68a3      	ldr	r3, [r4, #8]
   20800:	f8d3 e008 	ldr.w	lr, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src, &ns_hdr->tgt);
   20804:	af20      	add	r7, sp, #128	; 0x80
   20806:	f856 0f04 	ldr.w	r0, [r6, #4]!
   2080a:	6871      	ldr	r1, [r6, #4]
   2080c:	68b2      	ldr	r2, [r6, #8]
   2080e:	68f3      	ldr	r3, [r6, #12]
   20810:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   20812:	ae20      	add	r6, sp, #128	; 0x80
   20814:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   20816:	f8ce 0008 	str.w	r0, [lr, #8]
   2081a:	f8ce 100c 	str.w	r1, [lr, #12]
   2081e:	f8ce 2010 	str.w	r2, [lr, #16]
   20822:	f8ce 3014 	str.w	r3, [lr, #20]
		flags = NET_ICMPV6_NA_FLAG_SOLICITED |
   20826:	2360      	movs	r3, #96	; 0x60
		goto send_na;
   20828:	e73d      	b.n	206a6 <handle_ns_input+0x2a2>
		net_pkt_unref(pkt);
   2082a:	4620      	mov	r0, r4
   2082c:	f7fc f9d9 	bl	1cbe2 <net_pkt_unref>
		return NET_OK;
   20830:	2000      	movs	r0, #0
   20832:	e6d9      	b.n	205e8 <handle_ns_input+0x1e4>

00020834 <nd_reachable_timeout>:
{
   20834:	b530      	push	{r4, r5, lr}
   20836:	b083      	sub	sp, #12
	struct net_ipv6_nbr_data *data = CONTAINER_OF(work,
   20838:	f1a0 0514 	sub.w	r5, r0, #20
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   2083c:	2300      	movs	r3, #0
   2083e:	2b07      	cmp	r3, #7
   20840:	dc07      	bgt.n	20852 <nd_reachable_timeout+0x1e>
	return &net_neighbor_pool[idx].nbr;
   20842:	4c47      	ldr	r4, [pc, #284]	; (20960 <nd_reachable_timeout+0x12c>)
   20844:	eb04 14c3 	add.w	r4, r4, r3, lsl #7
		if (nbr->data == (u8_t *)data) {
   20848:	68e2      	ldr	r2, [r4, #12]
   2084a:	4295      	cmp	r5, r2
   2084c:	d002      	beq.n	20854 <nd_reachable_timeout+0x20>
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   2084e:	3301      	adds	r3, #1
   20850:	e7f5      	b.n	2083e <nd_reachable_timeout+0xa>
	return NULL;
   20852:	2400      	movs	r4, #0
	if (!data || !nbr) {
   20854:	b38d      	cbz	r5, 208ba <nd_reachable_timeout+0x86>
   20856:	b384      	cbz	r4, 208ba <nd_reachable_timeout+0x86>
   20858:	4603      	mov	r3, r0
	switch (data->state) {
   2085a:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
   2085e:	2a04      	cmp	r2, #4
   20860:	d82b      	bhi.n	208ba <nd_reachable_timeout+0x86>
   20862:	e8df f002 	tbb	[pc, r2]
   20866:	2703      	.short	0x2703
   20868:	3f2c      	.short	0x3f2c
   2086a:	45          	.byte	0x45
   2086b:	00          	.byte	0x00
		if (data->ns_count >= MAX_MULTICAST_SOLICIT) {
   2086c:	f890 2054 	ldrb.w	r2, [r0, #84]	; 0x54
   20870:	2a02      	cmp	r2, #2
   20872:	d912      	bls.n	2089a <nd_reachable_timeout+0x66>
   20874:	68e5      	ldr	r5, [r4, #12]
	k_delayed_work_cancel(&data->send_ns);
   20876:	f105 003c 	add.w	r0, r5, #60	; 0x3c
   2087a:	f008 fd7d 	bl	29378 <k_delayed_work_cancel>
	if (data->pending) {
   2087e:	6828      	ldr	r0, [r5, #0]
   20880:	b118      	cbz	r0, 2088a <nd_reachable_timeout+0x56>
		net_pkt_unref(data->pending);
   20882:	f7fc f9ae 	bl	1cbe2 <net_pkt_unref>
		data->pending = NULL;
   20886:	2300      	movs	r3, #0
   20888:	602b      	str	r3, [r5, #0]
   2088a:	68e0      	ldr	r0, [r4, #12]
	k_delayed_work_cancel(&net_ipv6_nbr_data(nbr)->reachable);
   2088c:	3014      	adds	r0, #20
   2088e:	f008 fd73 	bl	29378 <k_delayed_work_cancel>
	net_nbr_unref(nbr);
   20892:	4620      	mov	r0, r4
   20894:	f7fd ffa6 	bl	1e7e4 <net_nbr_unref>
   20898:	e00f      	b.n	208ba <nd_reachable_timeout+0x86>
			data->ns_count++;
   2089a:	3201      	adds	r2, #1
   2089c:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
			net_ipv6_send_ns(nbr->iface, NULL, NULL, NULL,
   208a0:	68a0      	ldr	r0, [r4, #8]
   208a2:	2100      	movs	r1, #0
   208a4:	9101      	str	r1, [sp, #4]
   208a6:	3b10      	subs	r3, #16
   208a8:	9300      	str	r3, [sp, #0]
   208aa:	460b      	mov	r3, r1
   208ac:	460a      	mov	r2, r1
   208ae:	f7ff f927 	bl	1fb00 <net_ipv6_send_ns>
   208b2:	e002      	b.n	208ba <nd_reachable_timeout+0x86>
		data->state = NET_IPV6_NBR_STATE_STALE;
   208b4:	2202      	movs	r2, #2
   208b6:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
}
   208ba:	b003      	add	sp, #12
   208bc:	bd30      	pop	{r4, r5, pc}
   208be:	68e5      	ldr	r5, [r4, #12]
	k_delayed_work_cancel(&data->send_ns);
   208c0:	f105 003c 	add.w	r0, r5, #60	; 0x3c
   208c4:	f008 fd58 	bl	29378 <k_delayed_work_cancel>
	if (data->pending) {
   208c8:	6828      	ldr	r0, [r5, #0]
   208ca:	b118      	cbz	r0, 208d4 <nd_reachable_timeout+0xa0>
		net_pkt_unref(data->pending);
   208cc:	f7fc f989 	bl	1cbe2 <net_pkt_unref>
		data->pending = NULL;
   208d0:	2300      	movs	r3, #0
   208d2:	602b      	str	r3, [r5, #0]
   208d4:	68e0      	ldr	r0, [r4, #12]
	k_delayed_work_cancel(&net_ipv6_nbr_data(nbr)->reachable);
   208d6:	3014      	adds	r0, #20
   208d8:	f008 fd4e 	bl	29378 <k_delayed_work_cancel>
	net_nbr_unref(nbr);
   208dc:	4620      	mov	r0, r4
   208de:	f7fd ff81 	bl	1e7e4 <net_nbr_unref>
   208e2:	e7ea      	b.n	208ba <nd_reachable_timeout+0x86>
		data->state = NET_IPV6_NBR_STATE_PROBE;
   208e4:	2204      	movs	r2, #4
   208e6:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
		data->ns_count = 0;
   208ea:	2200      	movs	r2, #0
   208ec:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
		if (data->ns_count >= MAX_UNICAST_SOLICIT) {
   208f0:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
   208f4:	2a02      	cmp	r2, #2
   208f6:	d91f      	bls.n	20938 <nd_reachable_timeout+0x104>
			router = net_if_ipv6_router_lookup(nbr->iface,
   208f8:	f1a3 0110 	sub.w	r1, r3, #16
   208fc:	68a0      	ldr	r0, [r4, #8]
   208fe:	f7fa fbbf 	bl	1b080 <net_if_ipv6_router_lookup>
			if (router && !router->is_infinite) {
   20902:	2800      	cmp	r0, #0
   20904:	d0d9      	beq.n	208ba <nd_reachable_timeout+0x86>
   20906:	f890 2042 	ldrb.w	r2, [r0, #66]	; 0x42
   2090a:	2a00      	cmp	r2, #0
   2090c:	d1d5      	bne.n	208ba <nd_reachable_timeout+0x86>
				net_if_ipv6_router_rm(router);
   2090e:	f7fa fc73 	bl	1b1f8 <net_if_ipv6_router_rm>
   20912:	68e5      	ldr	r5, [r4, #12]
	k_delayed_work_cancel(&data->send_ns);
   20914:	f105 003c 	add.w	r0, r5, #60	; 0x3c
   20918:	f008 fd2e 	bl	29378 <k_delayed_work_cancel>
	if (data->pending) {
   2091c:	6828      	ldr	r0, [r5, #0]
   2091e:	b118      	cbz	r0, 20928 <nd_reachable_timeout+0xf4>
		net_pkt_unref(data->pending);
   20920:	f7fc f95f 	bl	1cbe2 <net_pkt_unref>
		data->pending = NULL;
   20924:	2300      	movs	r3, #0
   20926:	602b      	str	r3, [r5, #0]
   20928:	68e0      	ldr	r0, [r4, #12]
	k_delayed_work_cancel(&net_ipv6_nbr_data(nbr)->reachable);
   2092a:	3014      	adds	r0, #20
   2092c:	f008 fd24 	bl	29378 <k_delayed_work_cancel>
	net_nbr_unref(nbr);
   20930:	4620      	mov	r0, r4
   20932:	f7fd ff57 	bl	1e7e4 <net_nbr_unref>
   20936:	e7c0      	b.n	208ba <nd_reachable_timeout+0x86>
			data->ns_count++;
   20938:	3201      	adds	r2, #1
   2093a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			net_ipv6_send_ns(nbr->iface, NULL, NULL, NULL,
   2093e:	68a0      	ldr	r0, [r4, #8]
   20940:	2100      	movs	r1, #0
   20942:	9101      	str	r1, [sp, #4]
   20944:	3b10      	subs	r3, #16
   20946:	9300      	str	r3, [sp, #0]
   20948:	460b      	mov	r3, r1
   2094a:	460a      	mov	r2, r1
   2094c:	f7ff f8d8 	bl	1fb00 <net_ipv6_send_ns>
   20950:	68e1      	ldr	r1, [r4, #12]
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   20952:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   20956:	3114      	adds	r1, #20
   20958:	4802      	ldr	r0, [pc, #8]	; (20964 <nd_reachable_timeout+0x130>)
   2095a:	f008 fd67 	bl	2942c <k_delayed_work_submit_to_queue>
   2095e:	e7ac      	b.n	208ba <nd_reachable_timeout+0x86>
   20960:	2000bde8 	.word	0x2000bde8
   20964:	20002b08 	.word	0x20002b08

00020968 <net_ipv6_start_dad>:
{
   20968:	b500      	push	{lr}
   2096a:	b083      	sub	sp, #12
	return net_ipv6_send_ns(iface, NULL, NULL, NULL,
   2096c:	2301      	movs	r3, #1
   2096e:	9301      	str	r3, [sp, #4]
   20970:	3104      	adds	r1, #4
   20972:	9100      	str	r1, [sp, #0]
   20974:	2300      	movs	r3, #0
   20976:	461a      	mov	r2, r3
   20978:	4619      	mov	r1, r3
   2097a:	f7ff f8c1 	bl	1fb00 <net_ipv6_send_ns>
}
   2097e:	b003      	add	sp, #12
   20980:	f85d fb04 	ldr.w	pc, [sp], #4

00020984 <net_ipv6_prepare_for_send>:
{
   20984:	b570      	push	{r4, r5, r6, lr}
   20986:	b084      	sub	sp, #16
	struct net_if *iface = NULL;
   20988:	2300      	movs	r3, #0
   2098a:	9303      	str	r3, [sp, #12]
	return pkt->iface;
   2098c:	6943      	ldr	r3, [r0, #20]
   2098e:	f3bf 8f5b 	dmb	ish
   20992:	68db      	ldr	r3, [r3, #12]
   20994:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(net_pkt_iface(pkt)->flags, NET_IF_POINTOPOINT)) {
   20998:	f013 0f02 	tst.w	r3, #2
   2099c:	d108      	bne.n	209b0 <net_ipv6_prepare_for_send+0x2c>
   2099e:	4604      	mov	r4, r0
	if (net_pkt_ll_dst(pkt)->addr ||
   209a0:	6a83      	ldr	r3, [r0, #40]	; 0x28
   209a2:	b13b      	cbz	r3, 209b4 <net_ipv6_prepare_for_send+0x30>
	return pkt->frags->data;
   209a4:	68a3      	ldr	r3, [r4, #8]
   209a6:	6899      	ldr	r1, [r3, #8]
		return update_ll_reserve(pkt, &NET_IPV6_HDR(pkt)->dst);
   209a8:	3118      	adds	r1, #24
   209aa:	4620      	mov	r0, r4
   209ac:	f7fe f9e6 	bl	1ed7c <update_ll_reserve>
}
   209b0:	b004      	add	sp, #16
   209b2:	bd70      	pop	{r4, r5, r6, pc}
   209b4:	6883      	ldr	r3, [r0, #8]
   209b6:	6899      	ldr	r1, [r3, #8]
	return addr->s6_addr[0] == 0xFF;
   209b8:	7e0b      	ldrb	r3, [r1, #24]
	if (net_pkt_ll_dst(pkt)->addr ||
   209ba:	2bff      	cmp	r3, #255	; 0xff
   209bc:	d0f2      	beq.n	209a4 <net_ipv6_prepare_for_send+0x20>
	if (net_if_ipv6_addr_onlink(&iface,
   209be:	3118      	adds	r1, #24
   209c0:	a803      	add	r0, sp, #12
   209c2:	f7fa fa9d 	bl	1af00 <net_if_ipv6_addr_onlink>
   209c6:	b348      	cbz	r0, 20a1c <net_ipv6_prepare_for_send+0x98>
   209c8:	68a3      	ldr	r3, [r4, #8]
   209ca:	689d      	ldr	r5, [r3, #8]
		nexthop = &NET_IPV6_HDR(pkt)->dst;
   209cc:	3518      	adds	r5, #24
		net_pkt_set_iface(pkt, iface);
   209ce:	9b03      	ldr	r3, [sp, #12]
	pkt->iface = iface;
   209d0:	6163      	str	r3, [r4, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   209d2:	7d5a      	ldrb	r2, [r3, #21]
   209d4:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   209d8:	7d5b      	ldrb	r3, [r3, #21]
   209da:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	if (!iface) {
   209de:	9b03      	ldr	r3, [sp, #12]
   209e0:	2b00      	cmp	r3, #0
   209e2:	d03e      	beq.n	20a62 <net_ipv6_prepare_for_send+0xde>
	nbr = nbr_lookup(&net_neighbor.table, net_pkt_iface(pkt), nexthop);
   209e4:	462a      	mov	r2, r5
   209e6:	6961      	ldr	r1, [r4, #20]
   209e8:	4832      	ldr	r0, [pc, #200]	; (20ab4 <net_ipv6_prepare_for_send+0x130>)
   209ea:	f7fe f90d 	bl	1ec08 <nbr_lookup>
	if (nbr && nbr->idx != NET_NBR_LLADDR_UNKNOWN) {
   209ee:	4606      	mov	r6, r0
   209f0:	2800      	cmp	r0, #0
   209f2:	d051      	beq.n	20a98 <net_ipv6_prepare_for_send+0x114>
   209f4:	7840      	ldrb	r0, [r0, #1]
   209f6:	28ff      	cmp	r0, #255	; 0xff
   209f8:	d04e      	beq.n	20a98 <net_ipv6_prepare_for_send+0x114>
		lladdr = net_nbr_get_lladdr(nbr->idx);
   209fa:	f7fd ff85 	bl	1e908 <net_nbr_get_lladdr>
		net_pkt_ll_dst(pkt)->addr = lladdr->addr;
   209fe:	1c83      	adds	r3, r0, #2
   20a00:	62a3      	str	r3, [r4, #40]	; 0x28
		net_pkt_ll_dst(pkt)->len = lladdr->len;
   20a02:	7843      	ldrb	r3, [r0, #1]
   20a04:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
   20a08:	68f3      	ldr	r3, [r6, #12]
		if (net_ipv6_nbr_data(nbr)->state == NET_IPV6_NBR_STATE_STALE) {
   20a0a:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
   20a0e:	2b02      	cmp	r3, #2
   20a10:	d036      	beq.n	20a80 <net_ipv6_prepare_for_send+0xfc>
		return update_ll_reserve(pkt, nexthop);
   20a12:	4629      	mov	r1, r5
   20a14:	4620      	mov	r0, r4
   20a16:	f7fe f9b1 	bl	1ed7c <update_ll_reserve>
   20a1a:	e7c9      	b.n	209b0 <net_ipv6_prepare_for_send+0x2c>
	return pkt->frags->data;
   20a1c:	68a3      	ldr	r3, [r4, #8]
   20a1e:	6899      	ldr	r1, [r3, #8]
		route = net_route_lookup(NULL, &NET_IPV6_HDR(pkt)->dst);
   20a20:	3118      	adds	r1, #24
   20a22:	2000      	movs	r0, #0
   20a24:	f001 fb26 	bl	22074 <net_route_lookup>
		if (route) {
   20a28:	4606      	mov	r6, r0
   20a2a:	b160      	cbz	r0, 20a46 <net_ipv6_prepare_for_send+0xc2>
			nexthop = net_route_get_nexthop(route);
   20a2c:	f001 fc06 	bl	2223c <net_route_get_nexthop>
			if (!nexthop) {
   20a30:	4605      	mov	r5, r0
   20a32:	2800      	cmp	r0, #0
   20a34:	d1d3      	bne.n	209de <net_ipv6_prepare_for_send+0x5a>
				net_route_del(route);
   20a36:	4630      	mov	r0, r6
   20a38:	f001 fbac 	bl	22194 <net_route_del>
				net_pkt_unref(pkt);
   20a3c:	4620      	mov	r0, r4
   20a3e:	f7fc f8d0 	bl	1cbe2 <net_pkt_unref>
				return NULL;
   20a42:	2000      	movs	r0, #0
   20a44:	e7b4      	b.n	209b0 <net_ipv6_prepare_for_send+0x2c>
   20a46:	68a3      	ldr	r3, [r4, #8]
   20a48:	6899      	ldr	r1, [r3, #8]
			router = net_if_ipv6_router_find_default(NULL,
   20a4a:	3118      	adds	r1, #24
   20a4c:	2000      	movs	r0, #0
   20a4e:	f7fa fb47 	bl	1b0e0 <net_if_ipv6_router_find_default>
			if (!router) {
   20a52:	4605      	mov	r5, r0
   20a54:	b108      	cbz	r0, 20a5a <net_ipv6_prepare_for_send+0xd6>
			nexthop = &router->address.in6_addr;
   20a56:	352c      	adds	r5, #44	; 0x2c
   20a58:	e7c1      	b.n	209de <net_ipv6_prepare_for_send+0x5a>
   20a5a:	68a3      	ldr	r3, [r4, #8]
   20a5c:	689d      	ldr	r5, [r3, #8]
				nexthop = &NET_IPV6_HDR(pkt)->dst;
   20a5e:	3518      	adds	r5, #24
				goto try_send;
   20a60:	e7c0      	b.n	209e4 <net_ipv6_prepare_for_send+0x60>
		if (net_if_ipv6_addr_onlink(&iface, nexthop)) {
   20a62:	4629      	mov	r1, r5
   20a64:	a803      	add	r0, sp, #12
   20a66:	f7fa fa4b 	bl	1af00 <net_if_ipv6_addr_onlink>
   20a6a:	2800      	cmp	r0, #0
   20a6c:	d0ba      	beq.n	209e4 <net_ipv6_prepare_for_send+0x60>
			net_pkt_set_iface(pkt, iface);
   20a6e:	9b03      	ldr	r3, [sp, #12]
	pkt->iface = iface;
   20a70:	6163      	str	r3, [r4, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   20a72:	7d5a      	ldrb	r2, [r3, #21]
   20a74:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   20a78:	7d5b      	ldrb	r3, [r3, #21]
   20a7a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
   20a7e:	e7b1      	b.n	209e4 <net_ipv6_prepare_for_send+0x60>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_DELAY);
   20a80:	2103      	movs	r1, #3
   20a82:	4630      	mov	r0, r6
   20a84:	f7fd ff48 	bl	1e918 <ipv6_nbr_set_state>
   20a88:	68f1      	ldr	r1, [r6, #12]
   20a8a:	f241 3288 	movw	r2, #5000	; 0x1388
   20a8e:	3114      	adds	r1, #20
   20a90:	4809      	ldr	r0, [pc, #36]	; (20ab8 <net_ipv6_prepare_for_send+0x134>)
   20a92:	f008 fccb 	bl	2942c <k_delayed_work_submit_to_queue>
   20a96:	e7bc      	b.n	20a12 <net_ipv6_prepare_for_send+0x8e>
	return pkt->iface;
   20a98:	6960      	ldr	r0, [r4, #20]
	return pkt->frags->data;
   20a9a:	68a3      	ldr	r3, [r4, #8]
   20a9c:	689a      	ldr	r2, [r3, #8]
	if (net_ipv6_send_ns(net_pkt_iface(pkt),
   20a9e:	2600      	movs	r6, #0
   20aa0:	9601      	str	r6, [sp, #4]
   20aa2:	9500      	str	r5, [sp, #0]
   20aa4:	4633      	mov	r3, r6
   20aa6:	3208      	adds	r2, #8
   20aa8:	4621      	mov	r1, r4
   20aaa:	f7ff f829 	bl	1fb00 <net_ipv6_send_ns>
		return NULL;
   20aae:	4630      	mov	r0, r6
   20ab0:	e77e      	b.n	209b0 <net_ipv6_prepare_for_send+0x2c>
   20ab2:	bf00      	nop
   20ab4:	2000bddc 	.word	0x2000bddc
   20ab8:	20002b08 	.word	0x20002b08

00020abc <net_ipv6_send_rs>:
{
   20abc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20ac0:	b084      	sub	sp, #16
   20ac2:	4605      	mov	r5, r0
	return iface->l2->reserve(iface, (void *)dst_ip6);
   20ac4:	6843      	ldr	r3, [r0, #4]
   20ac6:	689b      	ldr	r3, [r3, #8]
   20ac8:	2100      	movs	r1, #0
   20aca:	4798      	blx	r3
	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, NULL),
   20acc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   20ad0:	f7fc f816 	bl	1cb00 <net_pkt_get_reserve_tx>
   20ad4:	4604      	mov	r4, r0
	frag = net_pkt_get_frag(pkt, K_FOREVER);
   20ad6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   20ada:	f7fc f82f 	bl	1cb3c <net_pkt_get_frag>
   20ade:	4606      	mov	r6, r0
	net_pkt_frag_add(pkt, frag);
   20ae0:	4601      	mov	r1, r0
   20ae2:	4620      	mov	r0, r4
   20ae4:	f7fc f8a7 	bl	1cc36 <net_pkt_frag_add>
	pkt->iface = iface;
   20ae8:	6165      	str	r5, [r4, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   20aea:	7d6b      	ldrb	r3, [r5, #21]
   20aec:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   20af0:	7d6b      	ldrb	r3, [r5, #21]
   20af2:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	pkt->family = family;
   20af6:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   20afa:	220a      	movs	r2, #10
   20afc:	f362 03c6 	bfi	r3, r2, #3, #4
   20b00:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	pkt->ip_hdr_len = len;
   20b04:	2328      	movs	r3, #40	; 0x28
   20b06:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
	return pkt->frags->data;
   20b0a:	68a3      	ldr	r3, [r4, #8]
   20b0c:	6898      	ldr	r0, [r3, #8]
	return pkt->ll_reserve;
   20b0e:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
	memset(net_pkt_ll(pkt), 0, net_pkt_ll_reserve(pkt));
   20b12:	461a      	mov	r2, r3
   20b14:	2100      	movs	r1, #0
   20b16:	1ac0      	subs	r0, r0, r3
   20b18:	f009 ffb4 	bl	2aa84 <memset>
	net_pkt_ll_src(pkt)->addr = NULL;
   20b1c:	2200      	movs	r2, #0
   20b1e:	6222      	str	r2, [r4, #32]
	net_pkt_ll_src(pkt)->len = 0;
   20b20:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
	return pkt->frags->data;
   20b24:	68a3      	ldr	r3, [r4, #8]
   20b26:	689b      	ldr	r3, [r3, #8]
	UNALIGNED_PUT(htons(addr0), &addr->s6_addr16[0]);
   20b28:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   20b2c:	7619      	strb	r1, [r3, #24]
   20b2e:	2102      	movs	r1, #2
   20b30:	7659      	strb	r1, [r3, #25]
	UNALIGNED_PUT(htons(addr1), &addr->s6_addr16[1]);
   20b32:	769a      	strb	r2, [r3, #26]
   20b34:	76da      	strb	r2, [r3, #27]
	UNALIGNED_PUT(htons(addr2), &addr->s6_addr16[2]);
   20b36:	771a      	strb	r2, [r3, #28]
   20b38:	775a      	strb	r2, [r3, #29]
	UNALIGNED_PUT(htons(addr3), &addr->s6_addr16[3]);
   20b3a:	779a      	strb	r2, [r3, #30]
   20b3c:	77da      	strb	r2, [r3, #31]
	UNALIGNED_PUT(htons(addr4), &addr->s6_addr16[4]);
   20b3e:	f883 2020 	strb.w	r2, [r3, #32]
   20b42:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	UNALIGNED_PUT(htons(addr5), &addr->s6_addr16[5]);
   20b46:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
   20b4a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	UNALIGNED_PUT(htons(addr6), &addr->s6_addr16[6]);
   20b4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   20b52:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	UNALIGNED_PUT(htons(addr7), &addr->s6_addr16[7]);
   20b56:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
   20b5a:	2201      	movs	r2, #1
   20b5c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
   20b60:	68a3      	ldr	r3, [r4, #8]
   20b62:	f8d3 8008 	ldr.w	r8, [r3, #8]
	net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   20b66:	f108 0118 	add.w	r1, r8, #24
   20b6a:	4628      	mov	r0, r5
   20b6c:	f7fa fb9e 	bl	1b2ac <net_if_ipv6_select_src_addr>
   20b70:	4603      	mov	r3, r0
   20b72:	466d      	mov	r5, sp
   20b74:	6800      	ldr	r0, [r0, #0]
   20b76:	6859      	ldr	r1, [r3, #4]
   20b78:	689a      	ldr	r2, [r3, #8]
   20b7a:	68db      	ldr	r3, [r3, #12]
   20b7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   20b7e:	466d      	mov	r5, sp
   20b80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   20b82:	f8c8 0008 	str.w	r0, [r8, #8]
   20b86:	f8c8 100c 	str.w	r1, [r8, #12]
   20b8a:	f8c8 2010 	str.w	r2, [r8, #16]
   20b8e:	f8c8 3014 	str.w	r3, [r8, #20]
   20b92:	68a3      	ldr	r3, [r4, #8]
   20b94:	689b      	ldr	r3, [r3, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   20b96:	689a      	ldr	r2, [r3, #8]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   20b98:	b93a      	cbnz	r2, 20baa <net_ipv6_send_rs+0xee>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   20b9a:	68da      	ldr	r2, [r3, #12]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   20b9c:	b982      	cbnz	r2, 20bc0 <net_ipv6_send_rs+0x104>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   20b9e:	691a      	ldr	r2, [r3, #16]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   20ba0:	b982      	cbnz	r2, 20bc4 <net_ipv6_send_rs+0x108>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   20ba2:	695b      	ldr	r3, [r3, #20]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   20ba4:	b183      	cbz	r3, 20bc8 <net_ipv6_send_rs+0x10c>
   20ba6:	2300      	movs	r3, #0
   20ba8:	e000      	b.n	20bac <net_ipv6_send_rs+0xf0>
   20baa:	2300      	movs	r3, #0
	if (!unspec_src) {
   20bac:	461f      	mov	r7, r3
   20bae:	b97b      	cbnz	r3, 20bd0 <net_ipv6_send_rs+0x114>
	return pkt->iface;
   20bb0:	6963      	ldr	r3, [r4, #20]
	if (iface->link_addr.len == 6) {
   20bb2:	7d1b      	ldrb	r3, [r3, #20]
   20bb4:	2b06      	cmp	r3, #6
   20bb6:	d02a      	beq.n	20c0e <net_ipv6_send_rs+0x152>
	} else if (iface->link_addr.len == 8) {
   20bb8:	2b08      	cmp	r3, #8
   20bba:	d007      	beq.n	20bcc <net_ipv6_send_rs+0x110>
	return 0;
   20bbc:	2500      	movs	r5, #0
   20bbe:	e008      	b.n	20bd2 <net_ipv6_send_rs+0x116>
   20bc0:	2300      	movs	r3, #0
   20bc2:	e7f3      	b.n	20bac <net_ipv6_send_rs+0xf0>
   20bc4:	2300      	movs	r3, #0
   20bc6:	e7f1      	b.n	20bac <net_ipv6_send_rs+0xf0>
   20bc8:	2301      	movs	r3, #1
   20bca:	e7ef      	b.n	20bac <net_ipv6_send_rs+0xf0>
		return 16;
   20bcc:	2510      	movs	r5, #16
   20bce:	e000      	b.n	20bd2 <net_ipv6_send_rs+0x116>
	u8_t llao_len = 0;
   20bd0:	2500      	movs	r5, #0
	setup_headers(pkt, sizeof(struct net_icmpv6_rs_hdr) + llao_len,
   20bd2:	2285      	movs	r2, #133	; 0x85
   20bd4:	1d29      	adds	r1, r5, #4
   20bd6:	4620      	mov	r0, r4
   20bd8:	f7fe f92f 	bl	1ee3a <setup_headers>
	net_buf_add(frag, sizeof(struct net_icmpv6_rs_hdr));
   20bdc:	3608      	adds	r6, #8
   20bde:	2104      	movs	r1, #4
   20be0:	4630      	mov	r0, r6
   20be2:	f7f9 fadb 	bl	1a19c <net_buf_simple_add>
	if (!unspec_src) {
   20be6:	b1a7      	cbz	r7, 20c12 <net_ipv6_send_rs+0x156>
	net_icmpv6_set_chksum(pkt, pkt->frags);
   20be8:	68a1      	ldr	r1, [r4, #8]
   20bea:	4620      	mov	r0, r4
   20bec:	f7fd f8b0 	bl	1dd50 <net_icmpv6_set_chksum>
	if (net_send_data(pkt) < 0) {
   20bf0:	4620      	mov	r0, r4
   20bf2:	f7f9 fbf5 	bl	1a3e0 <net_send_data>
   20bf6:	2800      	cmp	r0, #0
   20bf8:	db2b      	blt.n	20c52 <net_ipv6_send_rs+0x196>
	net_stats.ipv6_nd.sent++;
   20bfa:	4a1c      	ldr	r2, [pc, #112]	; (20c6c <net_ipv6_send_rs+0x1b0>)
   20bfc:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
   20c00:	3301      	adds	r3, #1
   20c02:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
	return 0;
   20c06:	2000      	movs	r0, #0
}
   20c08:	b004      	add	sp, #16
   20c0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return 8;
   20c0e:	2508      	movs	r5, #8
   20c10:	e7df      	b.n	20bd2 <net_ipv6_send_rs+0x116>
		net_buf_add(frag, llao_len);
   20c12:	4629      	mov	r1, r5
   20c14:	4630      	mov	r0, r6
   20c16:	f7f9 fac1 	bl	1a19c <net_buf_simple_add>
   20c1a:	f8d4 8014 	ldr.w	r8, [r4, #20]
			 (u8_t *)net_pkt_icmp_data(pkt) +
   20c1e:	4620      	mov	r0, r4
   20c20:	f7fc fab8 	bl	1d194 <net_pkt_icmp_data>
		set_llao(&net_pkt_iface(pkt)->link_addr,
   20c24:	f100 0608 	add.w	r6, r0, #8
	llao[NET_ICMPV6_OPT_TYPE_OFFSET] = type;
   20c28:	2301      	movs	r3, #1
   20c2a:	7203      	strb	r3, [r0, #8]
	llao[NET_ICMPV6_OPT_LEN_OFFSET] = llao_len >> 3;
   20c2c:	08eb      	lsrs	r3, r5, #3
   20c2e:	7243      	strb	r3, [r0, #9]
	memcpy(&llao[NET_ICMPV6_OPT_DATA_OFFSET], lladdr->addr, lladdr->len);
   20c30:	f898 2014 	ldrb.w	r2, [r8, #20]
   20c34:	f8d8 1010 	ldr.w	r1, [r8, #16]
   20c38:	300a      	adds	r0, #10
   20c3a:	f7df fb41 	bl	2c0 <memcpy>
	memset(&llao[NET_ICMPV6_OPT_DATA_OFFSET + lladdr->len], 0,
   20c3e:	f898 2014 	ldrb.w	r2, [r8, #20]
   20c42:	1c90      	adds	r0, r2, #2
	       llao_len - lladdr->len - 2);
   20c44:	1aaa      	subs	r2, r5, r2
	memset(&llao[NET_ICMPV6_OPT_DATA_OFFSET + lladdr->len], 0,
   20c46:	3a02      	subs	r2, #2
   20c48:	2100      	movs	r1, #0
   20c4a:	4430      	add	r0, r6
   20c4c:	f009 ff1a 	bl	2aa84 <memset>
   20c50:	e7ca      	b.n	20be8 <net_ipv6_send_rs+0x12c>
	net_pkt_unref(pkt);
   20c52:	4620      	mov	r0, r4
   20c54:	f7fb ffc5 	bl	1cbe2 <net_pkt_unref>
	net_stats.ipv6_nd.drop++;
   20c58:	4a04      	ldr	r2, [pc, #16]	; (20c6c <net_ipv6_send_rs+0x1b0>)
   20c5a:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
   20c5e:	3301      	adds	r3, #1
   20c60:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
	return -EINVAL;
   20c64:	f06f 0015 	mvn.w	r0, #21
   20c68:	e7ce      	b.n	20c08 <net_ipv6_send_rs+0x14c>
   20c6a:	bf00      	nop
   20c6c:	200029e8 	.word	0x200029e8

00020c70 <net_ipv6_start_rs>:
{
   20c70:	b508      	push	{r3, lr}
	return net_ipv6_send_rs(iface);
   20c72:	f7ff ff23 	bl	20abc <net_ipv6_send_rs>
}
   20c76:	bd08      	pop	{r3, pc}

00020c78 <net_ipv6_mld_join>:
{
   20c78:	b570      	push	{r4, r5, r6, lr}
   20c7a:	b082      	sub	sp, #8
   20c7c:	ab02      	add	r3, sp, #8
   20c7e:	f843 0d04 	str.w	r0, [r3, #-4]!
   20c82:	460d      	mov	r5, r1
	maddr = net_if_ipv6_maddr_lookup(addr, &iface);
   20c84:	4619      	mov	r1, r3
   20c86:	4628      	mov	r0, r5
   20c88:	f7fa f842 	bl	1ad10 <net_if_ipv6_maddr_lookup>
	if (maddr && net_if_ipv6_maddr_is_joined(maddr)) {
   20c8c:	4604      	mov	r4, r0
   20c8e:	b118      	cbz	r0, 20c98 <net_ipv6_mld_join+0x20>
	return addr->is_joined;
   20c90:	7803      	ldrb	r3, [r0, #0]
   20c92:	f013 0f02 	tst.w	r3, #2
   20c96:	d123      	bne.n	20ce0 <net_ipv6_mld_join+0x68>
	if (!maddr) {
   20c98:	b1c4      	cbz	r4, 20ccc <net_ipv6_mld_join+0x54>
	ret = send_mldv2(iface, addr, NET_IPV6_MLDv2_MODE_IS_EXCLUDE);
   20c9a:	2202      	movs	r2, #2
   20c9c:	4629      	mov	r1, r5
   20c9e:	9801      	ldr	r0, [sp, #4]
   20ca0:	f7fe fb5a 	bl	1f358 <send_mldv2>
	if (ret < 0) {
   20ca4:	1e06      	subs	r6, r0, #0
   20ca6:	db0e      	blt.n	20cc6 <net_ipv6_mld_join+0x4e>
	addr->is_joined = true;
   20ca8:	7823      	ldrb	r3, [r4, #0]
   20caa:	f043 0302 	orr.w	r3, r3, #2
   20cae:	7023      	strb	r3, [r4, #0]
	net_if_mcast_monitor(iface, addr, true);
   20cb0:	2201      	movs	r2, #1
   20cb2:	4629      	mov	r1, r5
   20cb4:	9801      	ldr	r0, [sp, #4]
   20cb6:	f7fa f877 	bl	1ada8 <net_if_mcast_monitor>
   20cba:	2300      	movs	r3, #0
   20cbc:	461a      	mov	r2, r3
   20cbe:	9901      	ldr	r1, [sp, #4]
   20cc0:	4809      	ldr	r0, [pc, #36]	; (20ce8 <net_ipv6_mld_join+0x70>)
   20cc2:	f001 fc01 	bl	224c8 <net_mgmt_event_notify_with_info>
}
   20cc6:	4630      	mov	r0, r6
   20cc8:	b002      	add	sp, #8
   20cca:	bd70      	pop	{r4, r5, r6, pc}
		maddr = net_if_ipv6_maddr_add(iface, addr);
   20ccc:	4629      	mov	r1, r5
   20cce:	9801      	ldr	r0, [sp, #4]
   20cd0:	f7f9 ff32 	bl	1ab38 <net_if_ipv6_maddr_add>
		if (!maddr) {
   20cd4:	4604      	mov	r4, r0
   20cd6:	2800      	cmp	r0, #0
   20cd8:	d1df      	bne.n	20c9a <net_ipv6_mld_join+0x22>
			return -ENOMEM;
   20cda:	f06f 060b 	mvn.w	r6, #11
   20cde:	e7f2      	b.n	20cc6 <net_ipv6_mld_join+0x4e>
		return -EALREADY;
   20ce0:	f06f 0677 	mvn.w	r6, #119	; 0x77
   20ce4:	e7ef      	b.n	20cc6 <net_ipv6_mld_join+0x4e>
   20ce6:	bf00      	nop
   20ce8:	f0600007 	.word	0xf0600007

00020cec <net_ipv6_mld_leave>:
{
   20cec:	b570      	push	{r4, r5, r6, lr}
   20cee:	4604      	mov	r4, r0
   20cf0:	460d      	mov	r5, r1
	if (!net_if_ipv6_maddr_rm(iface, addr)) {
   20cf2:	f7f9 ff5d 	bl	1abb0 <net_if_ipv6_maddr_rm>
   20cf6:	b198      	cbz	r0, 20d20 <net_ipv6_mld_leave+0x34>
	ret = send_mldv2(iface, addr, NET_IPV6_MLDv2_MODE_IS_INCLUDE);
   20cf8:	2201      	movs	r2, #1
   20cfa:	4629      	mov	r1, r5
   20cfc:	4620      	mov	r0, r4
   20cfe:	f7fe fb2b 	bl	1f358 <send_mldv2>
	if (ret < 0) {
   20d02:	1e06      	subs	r6, r0, #0
   20d04:	db0a      	blt.n	20d1c <net_ipv6_mld_leave+0x30>
	net_if_mcast_monitor(iface, addr, false);
   20d06:	2200      	movs	r2, #0
   20d08:	4629      	mov	r1, r5
   20d0a:	4620      	mov	r0, r4
   20d0c:	f7fa f84c 	bl	1ada8 <net_if_mcast_monitor>
   20d10:	2300      	movs	r3, #0
   20d12:	461a      	mov	r2, r3
   20d14:	4621      	mov	r1, r4
   20d16:	4804      	ldr	r0, [pc, #16]	; (20d28 <net_ipv6_mld_leave+0x3c>)
   20d18:	f001 fbd6 	bl	224c8 <net_mgmt_event_notify_with_info>
}
   20d1c:	4630      	mov	r0, r6
   20d1e:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   20d20:	f06f 0615 	mvn.w	r6, #21
   20d24:	e7fa      	b.n	20d1c <net_ipv6_mld_leave+0x30>
   20d26:	bf00      	nop
   20d28:	f0600008 	.word	0xf0600008

00020d2c <net_ipv6_process_pkt>:
	return (proto == IPPROTO_ICMPV6 || proto == IPPROTO_UDP ||
		proto == IPPROTO_TCP);
}

enum net_verdict net_ipv6_process_pkt(struct net_pkt *pkt)
{
   20d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20d30:	b089      	sub	sp, #36	; 0x24
	return pkt->frags->data;
   20d32:	6884      	ldr	r4, [r0, #8]
   20d34:	68a7      	ldr	r7, [r4, #8]
	size_t bytes = 0;
   20d36:	2300      	movs	r3, #0
   20d38:	e002      	b.n	20d40 <net_ipv6_process_pkt+0x14>
		bytes += buf->len;
   20d3a:	89a2      	ldrh	r2, [r4, #12]
   20d3c:	4413      	add	r3, r2
		buf = buf->frags;
   20d3e:	6824      	ldr	r4, [r4, #0]
	while (buf) {
   20d40:	2c00      	cmp	r4, #0
   20d42:	d1fa      	bne.n	20d3a <net_ipv6_process_pkt+0xe>
	struct net_ipv6_hdr *hdr = NET_IPV6_HDR(pkt);
	int real_len = net_pkt_get_len(pkt);
   20d44:	461e      	mov	r6, r3
	int pkt_len = (hdr->len[0] << 8) + hdr->len[1] + sizeof(*hdr);
   20d46:	7939      	ldrb	r1, [r7, #4]
   20d48:	797a      	ldrb	r2, [r7, #5]
   20d4a:	eb02 2201 	add.w	r2, r2, r1, lsl #8
   20d4e:	3228      	adds	r2, #40	; 0x28
	u8_t next, next_hdr, length;
	u8_t first_option;
	u16_t offset, total_len = 0;
	u8_t ext_bitmap;

	if (real_len != pkt_len) {
   20d50:	4293      	cmp	r3, r2
   20d52:	d007      	beq.n	20d64 <net_ipv6_process_pkt+0x38>
	net_stats.ipv6.drop++;
   20d54:	4abd      	ldr	r2, [pc, #756]	; (2104c <net_ipv6_process_pkt+0x320>)
   20d56:	6b13      	ldr	r3, [r2, #48]	; 0x30
   20d58:	3301      	adds	r3, #1
   20d5a:	6313      	str	r3, [r2, #48]	; 0x30
		return NET_DROP;
#endif
	}

drop:
	return NET_DROP;
   20d5c:	2002      	movs	r0, #2

	NET_DBG("Unknown next header type");
	net_stats_update_ip_errors_protoerr();

	return NET_DROP;
}
   20d5e:	b009      	add	sp, #36	; 0x24
   20d60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return addr->s6_addr[0] == 0xFF;
   20d64:	7a3b      	ldrb	r3, [r7, #8]
	if (net_is_ipv6_addr_mcast(&hdr->src)) {
   20d66:	2bff      	cmp	r3, #255	; 0xff
   20d68:	d105      	bne.n	20d76 <net_ipv6_process_pkt+0x4a>
   20d6a:	4ab8      	ldr	r2, [pc, #736]	; (2104c <net_ipv6_process_pkt+0x320>)
   20d6c:	6b13      	ldr	r3, [r2, #48]	; 0x30
   20d6e:	3301      	adds	r3, #1
   20d70:	6313      	str	r3, [r2, #48]	; 0x30
	return NET_DROP;
   20d72:	2002      	movs	r0, #2
   20d74:	e7f3      	b.n	20d5e <net_ipv6_process_pkt+0x32>
   20d76:	4605      	mov	r5, r0
	if (!net_is_my_ipv6_addr(&hdr->dst) &&
   20d78:	f107 0818 	add.w	r8, r7, #24
	return net_if_ipv6_addr_lookup(addr, NULL) != NULL;
   20d7c:	2100      	movs	r1, #0
   20d7e:	4640      	mov	r0, r8
   20d80:	f7f9 fd7c 	bl	1a87c <net_if_ipv6_addr_lookup>
   20d84:	2800      	cmp	r0, #0
   20d86:	d06f      	beq.n	20e68 <net_ipv6_process_pkt+0x13c>
	net_pkt_set_next_hdr(pkt, &hdr->nexthdr);
   20d88:	1dbb      	adds	r3, r7, #6
	pkt->next_hdr = hdr;
   20d8a:	61eb      	str	r3, [r5, #28]
	pkt->ipv6_ext_len = len;
   20d8c:	2300      	movs	r3, #0
   20d8e:	f885 303b 	strb.w	r3, [r5, #59]	; 0x3b
	pkt->ip_hdr_len = len;
   20d92:	2328      	movs	r3, #40	; 0x28
   20d94:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
	next = *(net_pkt_next_hdr(pkt));
   20d98:	f897 9006 	ldrb.w	r9, [r7, #6]
	return (proto == IPPROTO_ICMPV6 || proto == IPPROTO_UDP ||
   20d9c:	f1b9 0f3a 	cmp.w	r9, #58	; 0x3a
   20da0:	f000 80b0 	beq.w	20f04 <net_ipv6_process_pkt+0x1d8>
   20da4:	f1b9 0f11 	cmp.w	r9, #17
   20da8:	f000 80ae 	beq.w	20f08 <net_ipv6_process_pkt+0x1dc>
   20dac:	f1b9 0f06 	cmp.w	r9, #6
   20db0:	f000 80a6 	beq.w	20f00 <net_ipv6_process_pkt+0x1d4>
   20db4:	2300      	movs	r3, #0
	if (is_upper_layer_protocol_header(next)) {
   20db6:	2b00      	cmp	r3, #0
   20db8:	f040 8166 	bne.w	21088 <net_ipv6_process_pkt+0x35c>
	frag = pkt->frags;
   20dbc:	f8d5 a008 	ldr.w	sl, [r5, #8]
	offset = sizeof(struct net_ipv6_hdr);
   20dc0:	2328      	movs	r3, #40	; 0x28
   20dc2:	f8ad 301c 	strh.w	r3, [sp, #28]
	next = hdr->nexthdr;
   20dc6:	464f      	mov	r7, r9
	ext_bitmap = 0;
   20dc8:	2300      	movs	r3, #0
   20dca:	9303      	str	r3, [sp, #12]
	u16_t offset, total_len = 0;
   20dcc:	9302      	str	r3, [sp, #8]
   20dce:	46a3      	mov	fp, r4
   20dd0:	4654      	mov	r4, sl
	while (frag) {
   20dd2:	2c00      	cmp	r4, #0
   20dd4:	f000 8156 	beq.w	21084 <net_ipv6_process_pkt+0x358>
	return (proto == IPPROTO_ICMPV6 || proto == IPPROTO_UDP ||
   20dd8:	2f3a      	cmp	r7, #58	; 0x3a
   20dda:	f000 8099 	beq.w	20f10 <net_ipv6_process_pkt+0x1e4>
   20dde:	2f11      	cmp	r7, #17
   20de0:	f000 8098 	beq.w	20f14 <net_ipv6_process_pkt+0x1e8>
   20de4:	2f06      	cmp	r7, #6
   20de6:	f000 8091 	beq.w	20f0c <net_ipv6_process_pkt+0x1e0>
   20dea:	2300      	movs	r3, #0
		if (is_upper_layer_protocol_header(next)) {
   20dec:	2b00      	cmp	r3, #0
   20dee:	f040 8093 	bne.w	20f18 <net_ipv6_process_pkt+0x1ec>
		start_of_ext = offset;
   20df2:	f10d 0820 	add.w	r8, sp, #32
   20df6:	f838 1d04 	ldrh.w	r1, [r8, #-4]!
	return net_frag_read(frag, offset, pos, 1, value);
   20dfa:	f10d 031f 	add.w	r3, sp, #31
   20dfe:	9300      	str	r3, [sp, #0]
   20e00:	2301      	movs	r3, #1
   20e02:	4642      	mov	r2, r8
   20e04:	4620      	mov	r0, r4
   20e06:	f7fc f86a 	bl	1cede <net_frag_read>
		frag = net_frag_read_u8(frag, offset, &offset, &length);
   20e0a:	f8bd 101c 	ldrh.w	r1, [sp, #28]
   20e0e:	f10d 031e 	add.w	r3, sp, #30
   20e12:	9300      	str	r3, [sp, #0]
   20e14:	2301      	movs	r3, #1
   20e16:	4642      	mov	r2, r8
   20e18:	f7fc f861 	bl	1cede <net_frag_read>
		if (!frag && offset == 0xffff) {
   20e1c:	4604      	mov	r4, r0
   20e1e:	2800      	cmp	r0, #0
   20e20:	f000 8081 	beq.w	20f26 <net_ipv6_process_pkt+0x1fa>
		length = length * 8 + 8;
   20e24:	f89d 801e 	ldrb.w	r8, [sp, #30]
   20e28:	f108 0801 	add.w	r8, r8, #1
   20e2c:	ea4f 08c8 	mov.w	r8, r8, lsl #3
   20e30:	fa5f f888 	uxtb.w	r8, r8
   20e34:	f88d 801e 	strb.w	r8, [sp, #30]
		total_len += length;
   20e38:	fa1f f888 	uxth.w	r8, r8
   20e3c:	9b02      	ldr	r3, [sp, #8]
   20e3e:	4443      	add	r3, r8
   20e40:	b29b      	uxth	r3, r3
   20e42:	9302      	str	r3, [sp, #8]
		switch (next) {
   20e44:	2f00      	cmp	r7, #0
   20e46:	d077      	beq.n	20f38 <net_ipv6_process_pkt+0x20c>
   20e48:	2f3b      	cmp	r7, #59	; 0x3b
   20e4a:	d073      	beq.n	20f34 <net_ipv6_process_pkt+0x208>
			      offset - 1);
   20e4c:	f8bd 301c 	ldrh.w	r3, [sp, #28]
	net_icmpv6_send_error(pkt, NET_ICMPV6_PARAM_PROBLEM,
   20e50:	3b01      	subs	r3, #1
   20e52:	2201      	movs	r2, #1
   20e54:	2104      	movs	r1, #4
   20e56:	4628      	mov	r0, r5
   20e58:	f7fd fa88 	bl	1e36c <net_icmpv6_send_error>
	net_stats.ip_errors.protoerr++;
   20e5c:	4a7b      	ldr	r2, [pc, #492]	; (2104c <net_ipv6_process_pkt+0x320>)
   20e5e:	6a13      	ldr	r3, [r2, #32]
   20e60:	3301      	adds	r3, #1
   20e62:	6213      	str	r3, [r2, #32]
	return NET_DROP;
   20e64:	2002      	movs	r0, #2
   20e66:	e77a      	b.n	20d5e <net_ipv6_process_pkt+0x32>
	return net_if_ipv6_maddr_lookup(maddr, NULL) != NULL;
   20e68:	2100      	movs	r1, #0
   20e6a:	4640      	mov	r0, r8
   20e6c:	f7f9 ff50 	bl	1ad10 <net_if_ipv6_maddr_lookup>
	if (!net_is_my_ipv6_addr(&hdr->dst) &&
   20e70:	2800      	cmp	r0, #0
   20e72:	d189      	bne.n	20d88 <net_ipv6_process_pkt+0x5c>
	return addr->s6_addr[0] == 0xFF;
   20e74:	7e3b      	ldrb	r3, [r7, #24]
	    !net_is_my_ipv6_maddr(&hdr->dst) &&
   20e76:	2bff      	cmp	r3, #255	; 0xff
   20e78:	d086      	beq.n	20d88 <net_ipv6_process_pkt+0x5c>
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   20e7a:	f8d8 3000 	ldr.w	r3, [r8]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   20e7e:	bb8b      	cbnz	r3, 20ee4 <net_ipv6_process_pkt+0x1b8>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   20e80:	f8d8 3004 	ldr.w	r3, [r8, #4]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   20e84:	bb83      	cbnz	r3, 20ee8 <net_ipv6_process_pkt+0x1bc>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   20e86:	f8d8 3008 	ldr.w	r3, [r8, #8]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   20e8a:	bb7b      	cbnz	r3, 20eec <net_ipv6_process_pkt+0x1c0>
		ntohl(UNALIGNED_GET(&addr->s6_addr32[3])) == 1;
   20e8c:	f8d8 200c 	ldr.w	r2, [r8, #12]
   20e90:	0a13      	lsrs	r3, r2, #8
   20e92:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
   20e96:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   20e9a:	0211      	lsls	r1, r2, #8
   20e9c:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
   20ea0:	430b      	orrs	r3, r1
   20ea2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   20ea6:	2b01      	cmp	r3, #1
   20ea8:	d022      	beq.n	20ef0 <net_ipv6_process_pkt+0x1c4>
   20eaa:	2300      	movs	r3, #0
	    !net_is_ipv6_addr_mcast(&hdr->dst) &&
   20eac:	2b00      	cmp	r3, #0
   20eae:	f47f af6b 	bne.w	20d88 <net_ipv6_process_pkt+0x5c>
		if (net_route_get_info(net_pkt_iface(pkt), &hdr->dst, &route,
   20eb2:	ab06      	add	r3, sp, #24
   20eb4:	aa05      	add	r2, sp, #20
   20eb6:	4641      	mov	r1, r8
   20eb8:	6968      	ldr	r0, [r5, #20]
   20eba:	f001 f9f5 	bl	222a8 <net_route_get_info>
   20ebe:	b1c8      	cbz	r0, 20ef4 <net_ipv6_process_pkt+0x1c8>
			if (route) {
   20ec0:	9b05      	ldr	r3, [sp, #20]
   20ec2:	b13b      	cbz	r3, 20ed4 <net_ipv6_process_pkt+0x1a8>
				net_pkt_set_iface(pkt, route->iface);
   20ec4:	68db      	ldr	r3, [r3, #12]
	pkt->iface = iface;
   20ec6:	616b      	str	r3, [r5, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   20ec8:	7d5a      	ldrb	r2, [r3, #21]
   20eca:	f885 2025 	strb.w	r2, [r5, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   20ece:	7d5b      	ldrb	r3, [r3, #21]
   20ed0:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
			ret = net_route_packet(pkt, nexthop);
   20ed4:	9906      	ldr	r1, [sp, #24]
   20ed6:	4628      	mov	r0, r5
   20ed8:	f001 fa0c 	bl	222f4 <net_route_packet>
			if (ret < 0) {
   20edc:	2800      	cmp	r0, #0
   20ede:	db09      	blt.n	20ef4 <net_ipv6_process_pkt+0x1c8>
				return NET_OK;
   20ee0:	2000      	movs	r0, #0
   20ee2:	e73c      	b.n	20d5e <net_ipv6_process_pkt+0x32>
   20ee4:	2300      	movs	r3, #0
   20ee6:	e7e1      	b.n	20eac <net_ipv6_process_pkt+0x180>
   20ee8:	2300      	movs	r3, #0
   20eea:	e7df      	b.n	20eac <net_ipv6_process_pkt+0x180>
   20eec:	2300      	movs	r3, #0
   20eee:	e7dd      	b.n	20eac <net_ipv6_process_pkt+0x180>
   20ef0:	2301      	movs	r3, #1
   20ef2:	e7db      	b.n	20eac <net_ipv6_process_pkt+0x180>
	net_stats.ipv6.drop++;
   20ef4:	4a55      	ldr	r2, [pc, #340]	; (2104c <net_ipv6_process_pkt+0x320>)
   20ef6:	6b13      	ldr	r3, [r2, #48]	; 0x30
   20ef8:	3301      	adds	r3, #1
   20efa:	6313      	str	r3, [r2, #48]	; 0x30
	return NET_DROP;
   20efc:	2002      	movs	r0, #2
   20efe:	e72e      	b.n	20d5e <net_ipv6_process_pkt+0x32>
	return (proto == IPPROTO_ICMPV6 || proto == IPPROTO_UDP ||
   20f00:	2301      	movs	r3, #1
   20f02:	e758      	b.n	20db6 <net_ipv6_process_pkt+0x8a>
   20f04:	2301      	movs	r3, #1
   20f06:	e756      	b.n	20db6 <net_ipv6_process_pkt+0x8a>
   20f08:	2301      	movs	r3, #1
   20f0a:	e754      	b.n	20db6 <net_ipv6_process_pkt+0x8a>
   20f0c:	2301      	movs	r3, #1
   20f0e:	e76d      	b.n	20dec <net_ipv6_process_pkt+0xc0>
   20f10:	2301      	movs	r3, #1
   20f12:	e76b      	b.n	20dec <net_ipv6_process_pkt+0xc0>
   20f14:	2301      	movs	r3, #1
   20f16:	e769      	b.n	20dec <net_ipv6_process_pkt+0xc0>
			net_pkt_set_ipv6_ext_len(pkt, offset -
   20f18:	f89d 301c 	ldrb.w	r3, [sp, #28]
   20f1c:	3b28      	subs	r3, #40	; 0x28
	pkt->ipv6_ext_len = len;
   20f1e:	f885 303b 	strb.w	r3, [r5, #59]	; 0x3b
   20f22:	46b9      	mov	r9, r7
   20f24:	e0b2      	b.n	2108c <net_ipv6_process_pkt+0x360>
		if (!frag && offset == 0xffff) {
   20f26:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   20f2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   20f2e:	429a      	cmp	r2, r3
   20f30:	f47f af78 	bne.w	20e24 <net_ipv6_process_pkt+0xf8>
	return NET_DROP;
   20f34:	2002      	movs	r0, #2
   20f36:	e712      	b.n	20d5e <net_ipv6_process_pkt+0x32>
			if (first_option != NET_IPV6_NEXTHDR_HBHO) {
   20f38:	f1b9 0f00 	cmp.w	r9, #0
   20f3c:	d186      	bne.n	20e4c <net_ipv6_process_pkt+0x120>
			if (ext_bitmap & NET_IPV6_EXT_HDR_BITMAP_HBHO) {
   20f3e:	9a03      	ldr	r2, [sp, #12]
   20f40:	f012 0f01 	tst.w	r2, #1
   20f44:	d182      	bne.n	20e4c <net_ipv6_process_pkt+0x120>
			ext_bitmap |= NET_IPV6_EXT_HDR_BITMAP_HBHO;
   20f46:	f042 0301 	orr.w	r3, r2, #1
   20f4a:	9303      	str	r3, [sp, #12]
			frag = handle_ext_hdr_options(pkt, frag, real_len,
   20f4c:	f8bd 101c 	ldrh.w	r1, [sp, #28]
	if (len > total_len) {
   20f50:	4546      	cmp	r6, r8
   20f52:	f2c0 8094 	blt.w	2107e <net_ipv6_process_pkt+0x352>
	return net_frag_read(frag, offset, pos, 1, value);
   20f56:	f10d 0313 	add.w	r3, sp, #19
   20f5a:	9300      	str	r3, [sp, #0]
   20f5c:	2301      	movs	r3, #1
   20f5e:	aa06      	add	r2, sp, #24
   20f60:	4620      	mov	r0, r4
   20f62:	f7fb ffbc 	bl	1cede <net_frag_read>
	frag = net_frag_read_u8(frag, loc, &loc, &opt_len);
   20f66:	f8bd 1018 	ldrh.w	r1, [sp, #24]
   20f6a:	ab05      	add	r3, sp, #20
   20f6c:	9300      	str	r3, [sp, #0]
   20f6e:	2301      	movs	r3, #1
   20f70:	aa06      	add	r2, sp, #24
   20f72:	f7fb ffb4 	bl	1cede <net_frag_read>
	if (!frag && loc == 0xffff) {
   20f76:	4604      	mov	r4, r0
   20f78:	b108      	cbz	r0, 20f7e <net_ipv6_process_pkt+0x252>
   20f7a:	2702      	movs	r7, #2
   20f7c:	e027      	b.n	20fce <net_ipv6_process_pkt+0x2a2>
   20f7e:	f8bd 2018 	ldrh.w	r2, [sp, #24]
   20f82:	f64f 73ff 	movw	r3, #65535	; 0xffff
   20f86:	429a      	cmp	r2, r3
   20f88:	d068      	beq.n	2105c <net_ipv6_process_pkt+0x330>
   20f8a:	2702      	movs	r7, #2
   20f8c:	e01f      	b.n	20fce <net_ipv6_process_pkt+0x2a2>
			length++;
   20f8e:	3701      	adds	r7, #1
   20f90:	b2bf      	uxth	r7, r7
			loc--;
   20f92:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   20f96:	3b01      	subs	r3, #1
   20f98:	f8ad 3018 	strh.w	r3, [sp, #24]
		if (length >= len) {
   20f9c:	45b8      	cmp	r8, r7
   20f9e:	d960      	bls.n	21062 <net_ipv6_process_pkt+0x336>
		frag = net_frag_read_u8(frag, loc, &loc, &opt_type);
   20fa0:	f10d 0a20 	add.w	sl, sp, #32
   20fa4:	f83a 1d08 	ldrh.w	r1, [sl, #-8]!
   20fa8:	f10d 0313 	add.w	r3, sp, #19
   20fac:	9300      	str	r3, [sp, #0]
   20fae:	2301      	movs	r3, #1
   20fb0:	4652      	mov	r2, sl
   20fb2:	4620      	mov	r0, r4
   20fb4:	f7fb ff93 	bl	1cede <net_frag_read>
		frag = net_frag_read_u8(frag, loc, &loc, &opt_len);
   20fb8:	f8bd 1018 	ldrh.w	r1, [sp, #24]
   20fbc:	ab05      	add	r3, sp, #20
   20fbe:	9300      	str	r3, [sp, #0]
   20fc0:	2301      	movs	r3, #1
   20fc2:	4652      	mov	r2, sl
   20fc4:	f7fb ff8b 	bl	1cede <net_frag_read>
		if (!frag && loc == 0xffff) {
   20fc8:	4604      	mov	r4, r0
   20fca:	2800      	cmp	r0, #0
   20fcc:	d040      	beq.n	21050 <net_ipv6_process_pkt+0x324>
	while (frag && (length < len)) {
   20fce:	2c00      	cmp	r4, #0
   20fd0:	d047      	beq.n	21062 <net_ipv6_process_pkt+0x336>
   20fd2:	45b8      	cmp	r8, r7
   20fd4:	d945      	bls.n	21062 <net_ipv6_process_pkt+0x336>
		switch (opt_type) {
   20fd6:	f89d 3013 	ldrb.w	r3, [sp, #19]
   20fda:	2b00      	cmp	r3, #0
   20fdc:	d0d7      	beq.n	20f8e <net_ipv6_process_pkt+0x262>
   20fde:	2b01      	cmp	r3, #1
   20fe0:	d009      	beq.n	20ff6 <net_ipv6_process_pkt+0x2ca>
	switch (opt_type & 0xc0) {
   20fe2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   20fe6:	2b80      	cmp	r3, #128	; 0x80
   20fe8:	d019      	beq.n	2101e <net_ipv6_process_pkt+0x2f2>
   20fea:	2bc0      	cmp	r3, #192	; 0xc0
   20fec:	d012      	beq.n	21014 <net_ipv6_process_pkt+0x2e8>
   20fee:	2b40      	cmp	r3, #64	; 0x40
   20ff0:	d00e      	beq.n	21010 <net_ipv6_process_pkt+0x2e4>
	return pkt;
   20ff2:	462b      	mov	r3, r5
   20ff4:	e01a      	b.n	2102c <net_ipv6_process_pkt+0x300>
			length += opt_len + 2;
   20ff6:	f89d 3014 	ldrb.w	r3, [sp, #20]
   20ffa:	441f      	add	r7, r3
   20ffc:	b2bf      	uxth	r7, r7
   20ffe:	3702      	adds	r7, #2
   21000:	b2bf      	uxth	r7, r7
			loc += opt_len + 2;
   21002:	f8bd 2018 	ldrh.w	r2, [sp, #24]
   21006:	4413      	add	r3, r2
   21008:	3302      	adds	r3, #2
   2100a:	f8ad 3018 	strh.w	r3, [sp, #24]
   2100e:	e7c5      	b.n	20f9c <net_ipv6_process_pkt+0x270>
		return NULL;
   21010:	2300      	movs	r3, #0
   21012:	e00b      	b.n	2102c <net_ipv6_process_pkt+0x300>
	return pkt->frags->data;
   21014:	68ab      	ldr	r3, [r5, #8]
   21016:	689b      	ldr	r3, [r3, #8]
	return addr->s6_addr[0] == 0xFF;
   21018:	7e1b      	ldrb	r3, [r3, #24]
		if (net_is_ipv6_addr_mcast(&NET_IPV6_HDR(pkt)->dst)) {
   2101a:	2bff      	cmp	r3, #255	; 0xff
   2101c:	d013      	beq.n	21046 <net_ipv6_process_pkt+0x31a>
		net_icmpv6_send_error(pkt, NET_ICMPV6_PARAM_PROBLEM,
   2101e:	463b      	mov	r3, r7
   21020:	2202      	movs	r2, #2
   21022:	2104      	movs	r1, #4
   21024:	4628      	mov	r0, r5
   21026:	f7fd f9a1 	bl	1e36c <net_icmpv6_send_error>
		return NULL;
   2102a:	2300      	movs	r3, #0
			if (!check_unknown_option(pkt, opt_type, length)) {
   2102c:	b1b3      	cbz	r3, 2105c <net_ipv6_process_pkt+0x330>
			length += opt_len + 2;
   2102e:	f89d 3014 	ldrb.w	r3, [sp, #20]
   21032:	441f      	add	r7, r3
   21034:	b2bf      	uxth	r7, r7
   21036:	3702      	adds	r7, #2
   21038:	b2bf      	uxth	r7, r7
			loc += opt_len;
   2103a:	f8bd 2018 	ldrh.w	r2, [sp, #24]
   2103e:	4413      	add	r3, r2
   21040:	f8ad 3018 	strh.w	r3, [sp, #24]
   21044:	e7aa      	b.n	20f9c <net_ipv6_process_pkt+0x270>
			return NULL;
   21046:	2300      	movs	r3, #0
   21048:	e7f0      	b.n	2102c <net_ipv6_process_pkt+0x300>
   2104a:	bf00      	nop
   2104c:	200029e8 	.word	0x200029e8
		if (!frag && loc == 0xffff) {
   21050:	f8bd 2018 	ldrh.w	r2, [sp, #24]
   21054:	f64f 73ff 	movw	r3, #65535	; 0xffff
   21058:	429a      	cmp	r2, r3
   2105a:	d1b8      	bne.n	20fce <net_ipv6_process_pkt+0x2a2>
	return NULL;
   2105c:	465c      	mov	r4, fp
	*verdict = NET_DROP;
   2105e:	2302      	movs	r3, #2
   21060:	e007      	b.n	21072 <net_ipv6_process_pkt+0x346>
	if (length != len) {
   21062:	45b8      	cmp	r8, r7
   21064:	d1fa      	bne.n	2105c <net_ipv6_process_pkt+0x330>
	*pos += length;
   21066:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   2106a:	441f      	add	r7, r3
   2106c:	f8ad 701c 	strh.w	r7, [sp, #28]
	*verdict = NET_CONTINUE;
   21070:	2301      	movs	r3, #1
		if (verdict == NET_DROP) {
   21072:	2b02      	cmp	r3, #2
   21074:	f43f af5e 	beq.w	20f34 <net_ipv6_process_pkt+0x208>
		next = next_hdr;
   21078:	f89d 701f 	ldrb.w	r7, [sp, #31]
   2107c:	e6a9      	b.n	20dd2 <net_ipv6_process_pkt+0xa6>
		return NULL;
   2107e:	465c      	mov	r4, fp
		*verdict = NET_DROP;
   21080:	2302      	movs	r3, #2
   21082:	e7f6      	b.n	21072 <net_ipv6_process_pkt+0x346>
   21084:	46b9      	mov	r9, r7
   21086:	e001      	b.n	2108c <net_ipv6_process_pkt+0x360>
	u16_t offset, total_len = 0;
   21088:	2300      	movs	r3, #0
   2108a:	9302      	str	r3, [sp, #8]
	if (total_len > 0) {
   2108c:	9b02      	ldr	r3, [sp, #8]
   2108e:	b10b      	cbz	r3, 21094 <net_ipv6_process_pkt+0x368>
	pkt->ipv6_ext_len = len;
   21090:	f885 303b 	strb.w	r3, [r5, #59]	; 0x3b
	switch (next) {
   21094:	f1b9 0f11 	cmp.w	r9, #17
   21098:	d011      	beq.n	210be <net_ipv6_process_pkt+0x392>
   2109a:	f1b9 0f3a 	cmp.w	r9, #58	; 0x3a
   2109e:	d004      	beq.n	210aa <net_ipv6_process_pkt+0x37e>
   210a0:	f1b9 0f06 	cmp.w	r9, #6
   210a4:	d010      	beq.n	210c8 <net_ipv6_process_pkt+0x39c>
	return NET_DROP;
   210a6:	2002      	movs	r0, #2
   210a8:	e659      	b.n	20d5e <net_ipv6_process_pkt+0x32>
	icmp_hdr = net_icmpv6_get_hdr(pkt, &hdr);
   210aa:	a906      	add	r1, sp, #24
   210ac:	4628      	mov	r0, r5
   210ae:	f7fc fe9c 	bl	1ddea <net_icmpv6_get_hdr>
	return net_icmpv6_input(pkt, icmp_hdr->type, icmp_hdr->code);
   210b2:	7842      	ldrb	r2, [r0, #1]
   210b4:	7801      	ldrb	r1, [r0, #0]
   210b6:	4628      	mov	r0, r5
   210b8:	f7fd fb62 	bl	1e780 <net_icmpv6_input>
		return process_icmpv6_pkt(pkt, hdr);
   210bc:	e64f      	b.n	20d5e <net_ipv6_process_pkt+0x32>
		return net_conn_input(IPPROTO_UDP, pkt);
   210be:	4629      	mov	r1, r5
   210c0:	2011      	movs	r0, #17
   210c2:	f003 fbd3 	bl	2486c <net_conn_input>
   210c6:	e64a      	b.n	20d5e <net_ipv6_process_pkt+0x32>
		return net_conn_input(IPPROTO_TCP, pkt);
   210c8:	4629      	mov	r1, r5
   210ca:	2006      	movs	r0, #6
   210cc:	f003 fbce 	bl	2486c <net_conn_input>
   210d0:	e645      	b.n	20d5e <net_ipv6_process_pkt+0x32>
   210d2:	bf00      	nop

000210d4 <net_ipv6_init>:

void net_ipv6_init(void)
{
   210d4:	b508      	push	{r3, lr}
#if defined(CONFIG_NET_IPV6_NBR_CACHE)
	net_icmpv6_register_handler(&ns_input_handler);
   210d6:	4806      	ldr	r0, [pc, #24]	; (210f0 <net_ipv6_init+0x1c>)
   210d8:	f7fc fe0a 	bl	1dcf0 <net_icmpv6_register_handler>
	net_icmpv6_register_handler(&na_input_handler);
   210dc:	4805      	ldr	r0, [pc, #20]	; (210f4 <net_ipv6_init+0x20>)
   210de:	f7fc fe07 	bl	1dcf0 <net_icmpv6_register_handler>
#endif
#if defined(CONFIG_NET_IPV6_ND)
	net_icmpv6_register_handler(&ra_input_handler);
   210e2:	4805      	ldr	r0, [pc, #20]	; (210f8 <net_ipv6_init+0x24>)
   210e4:	f7fc fe04 	bl	1dcf0 <net_icmpv6_register_handler>
#endif
#if defined(CONFIG_NET_IPV6_MLD)
	net_icmpv6_register_handler(&mld_query_input_handler);
   210e8:	4804      	ldr	r0, [pc, #16]	; (210fc <net_ipv6_init+0x28>)
   210ea:	f7fc fe01 	bl	1dcf0 <net_icmpv6_register_handler>
   210ee:	bd08      	pop	{r3, pc}
   210f0:	2000c1e8 	.word	0x2000c1e8
   210f4:	2000bdd0 	.word	0x2000bdd0
   210f8:	2000c1f4 	.word	0x2000c1f4
   210fc:	2000bdc4 	.word	0x2000bdc4

00021100 <uncompress_IPHC_header>:
	}
}
#endif

static inline bool uncompress_IPHC_header(struct net_pkt *pkt)
{
   21100:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if defined(CONFIG_NET_6LO_CONTEXT)
	struct net_6lo_context *src = NULL;
	struct net_6lo_context *dst = NULL;
#endif

	if (CIPHC[1] & NET_6LO_IPHC_CID_1) {
   21104:	6883      	ldr	r3, [r0, #8]
   21106:	689b      	ldr	r3, [r3, #8]
   21108:	f993 3001 	ldrsb.w	r3, [r3, #1]
   2110c:	2b00      	cmp	r3, #0
   2110e:	f2c0 831e 	blt.w	2174e <uncompress_IPHC_header+0x64e>
   21112:	4604      	mov	r4, r0
		NET_WARN("Context based uncompression not enabled");
		return false;
#endif
	}

	frag = net_pkt_get_frag(pkt, NET_6LO_RX_PKT_TIMEOUT);
   21114:	2164      	movs	r1, #100	; 0x64
   21116:	f7fb fd11 	bl	1cb3c <net_pkt_get_frag>
	if (!frag) {
   2111a:	4607      	mov	r7, r0
   2111c:	2800      	cmp	r0, #0
   2111e:	f000 8319 	beq.w	21754 <uncompress_IPHC_header+0x654>
		return false;
	}

	ipv6 = (struct net_ipv6_hdr *)(frag->data);
   21122:	6886      	ldr	r6, [r0, #8]

	/* Version is always 6 */
	ipv6->vtc = 0x60;
   21124:	2360      	movs	r3, #96	; 0x60
   21126:	7033      	strb	r3, [r6, #0]
	pkt->ip_hdr_len = len;
   21128:	2328      	movs	r3, #40	; 0x28
   2112a:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
	switch (CIPHC[0] & NET_6LO_IPHC_TF_11) {
   2112e:	68a3      	ldr	r3, [r4, #8]
   21130:	689a      	ldr	r2, [r3, #8]
   21132:	7813      	ldrb	r3, [r2, #0]
   21134:	f003 0318 	and.w	r3, r3, #24
   21138:	2b18      	cmp	r3, #24
   2113a:	d863      	bhi.n	21204 <uncompress_IPHC_header+0x104>
   2113c:	e8df f003 	tbb	[pc, r3]
   21140:	6262620d 	.word	0x6262620d
   21144:	62626262 	.word	0x62626262
   21148:	6262623c 	.word	0x6262623c
   2114c:	62626262 	.word	0x62626262
   21150:	6262624c 	.word	0x6262624c
   21154:	62626262 	.word	0x62626262
   21158:	5c          	.byte	0x5c
   21159:	00          	.byte	0x00
		tcl = CIPHC[offset++];
   2115a:	7892      	ldrb	r2, [r2, #2]
		tcl = (tcl >> 6) | (tcl << 2);
   2115c:	0993      	lsrs	r3, r2, #6
   2115e:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
   21162:	b2db      	uxtb	r3, r3
		ipv6->vtc |= ((tcl & 0xF0) >> 4);
   21164:	7832      	ldrb	r2, [r6, #0]
   21166:	ea42 1213 	orr.w	r2, r2, r3, lsr #4
   2116a:	7032      	strb	r2, [r6, #0]
		ipv6->tcflow = ((tcl & 0x0F) << 4) | (CIPHC[offset++] & 0x0F);
   2116c:	68a2      	ldr	r2, [r4, #8]
   2116e:	6892      	ldr	r2, [r2, #8]
   21170:	f992 2003 	ldrsb.w	r2, [r2, #3]
   21174:	f002 020f 	and.w	r2, r2, #15
   21178:	ea42 1303 	orr.w	r3, r2, r3, lsl #4
   2117c:	7073      	strb	r3, [r6, #1]
		memcpy(&ipv6->flow, &CIPHC[offset], 2);
   2117e:	68a3      	ldr	r3, [r4, #8]
   21180:	6899      	ldr	r1, [r3, #8]
   21182:	2202      	movs	r2, #2
   21184:	3104      	adds	r1, #4
   21186:	18b0      	adds	r0, r6, r2
   21188:	f7df f89a 	bl	2c0 <memcpy>
		offset += 2;
   2118c:	2506      	movs	r5, #6
	net_pkt_set_ip_hdr_len(pkt, NET_IPV6H_LEN);

	/* Uncompress Traffic class and Flow label */
	offset = uncompress_tfl(pkt, ipv6, offset);

	if (!(CIPHC[0] & NET_6LO_IPHC_NH_1)) {
   2118e:	68a3      	ldr	r3, [r4, #8]
   21190:	689b      	ldr	r3, [r3, #8]
   21192:	781a      	ldrb	r2, [r3, #0]
   21194:	f012 0f04 	tst.w	r2, #4
   21198:	d103      	bne.n	211a2 <uncompress_IPHC_header+0xa2>
		ipv6->nexthdr = CIPHC[offset];
   2119a:	5d5b      	ldrb	r3, [r3, r5]
   2119c:	71b3      	strb	r3, [r6, #6]
		offset++;
   2119e:	3501      	adds	r5, #1
   211a0:	b2ed      	uxtb	r5, r5
	switch (CIPHC[0] & NET_6LO_IPHC_HLIM255) {
   211a2:	68a3      	ldr	r3, [r4, #8]
   211a4:	689a      	ldr	r2, [r3, #8]
   211a6:	7813      	ldrb	r3, [r2, #0]
   211a8:	f003 0303 	and.w	r3, r3, #3
   211ac:	2b03      	cmp	r3, #3
   211ae:	d82f      	bhi.n	21210 <uncompress_IPHC_header+0x110>
   211b0:	e8df f003 	tbb	[pc, r3]
   211b4:	4f4c492a 	.word	0x4f4c492a
		tcl = ((CIPHC[offset] & 0xF0) >> 6);
   211b8:	7893      	ldrb	r3, [r2, #2]
   211ba:	099a      	lsrs	r2, r3, #6
		ipv6->tcflow = ((tcl & 0x0F) << 4) | (CIPHC[offset++] & 0x0F);
   211bc:	f003 030f 	and.w	r3, r3, #15
   211c0:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
   211c4:	7073      	strb	r3, [r6, #1]
		memcpy(&ipv6->flow, &CIPHC[offset], 2);
   211c6:	68a3      	ldr	r3, [r4, #8]
   211c8:	6899      	ldr	r1, [r3, #8]
   211ca:	2202      	movs	r2, #2
   211cc:	3103      	adds	r1, #3
   211ce:	18b0      	adds	r0, r6, r2
   211d0:	f7df f876 	bl	2c0 <memcpy>
		offset += 2;
   211d4:	2505      	movs	r5, #5
   211d6:	e7da      	b.n	2118e <uncompress_IPHC_header+0x8e>
		tcl = CIPHC[offset];
   211d8:	7892      	ldrb	r2, [r2, #2]
		tcl = (tcl >> 6) | (tcl << 2);
   211da:	0993      	lsrs	r3, r2, #6
   211dc:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
   211e0:	b2db      	uxtb	r3, r3
		ipv6->vtc |= ((tcl & 0xF0) >> 4);
   211e2:	7832      	ldrb	r2, [r6, #0]
   211e4:	ea42 1213 	orr.w	r2, r2, r3, lsr #4
   211e8:	7032      	strb	r2, [r6, #0]
		ipv6->tcflow = (tcl & 0x0F) << 4;
   211ea:	011b      	lsls	r3, r3, #4
   211ec:	7073      	strb	r3, [r6, #1]
		ipv6->flow = 0;
   211ee:	2300      	movs	r3, #0
   211f0:	70b3      	strb	r3, [r6, #2]
   211f2:	70f3      	strb	r3, [r6, #3]
		offset++;
   211f4:	2503      	movs	r5, #3
   211f6:	e7ca      	b.n	2118e <uncompress_IPHC_header+0x8e>
		ipv6->tcflow = 0;
   211f8:	2300      	movs	r3, #0
   211fa:	7073      	strb	r3, [r6, #1]
		ipv6->flow = 0;
   211fc:	70b3      	strb	r3, [r6, #2]
   211fe:	70f3      	strb	r3, [r6, #3]
   21200:	2502      	movs	r5, #2
   21202:	e7c4      	b.n	2118e <uncompress_IPHC_header+0x8e>
	switch (CIPHC[0] & NET_6LO_IPHC_TF_11) {
   21204:	2502      	movs	r5, #2
   21206:	e7c2      	b.n	2118e <uncompress_IPHC_header+0x8e>
		ipv6->hop_limit = CIPHC[offset++];
   21208:	1c6b      	adds	r3, r5, #1
   2120a:	5d52      	ldrb	r2, [r2, r5]
   2120c:	71f2      	strb	r2, [r6, #7]
   2120e:	b2dd      	uxtb	r5, r3

	/* Uncompress Hoplimit */
	offset = uncompress_hoplimit(pkt, ipv6, offset);

	/* First set to zero and copy relevant bits */
	memset(&ipv6->src.s6_addr[0], 0, 16);
   21210:	2210      	movs	r2, #16
   21212:	2100      	movs	r1, #0
   21214:	f106 0008 	add.w	r0, r6, #8
   21218:	f009 fc34 	bl	2aa84 <memset>
	memset(&ipv6->dst.s6_addr[0], 0, 16);
   2121c:	2210      	movs	r2, #16
   2121e:	2100      	movs	r1, #0
   21220:	f106 0018 	add.w	r0, r6, #24
   21224:	f009 fc2e 	bl	2aa84 <memset>

	/* Uncompress Source Address */
	if (CIPHC[1] & NET_6LO_IPHC_SAC_1) {
   21228:	68a3      	ldr	r3, [r4, #8]
   2122a:	689b      	ldr	r3, [r3, #8]
   2122c:	785b      	ldrb	r3, [r3, #1]
   2122e:	f013 0f40 	tst.w	r3, #64	; 0x40
   21232:	d011      	beq.n	21258 <uncompress_IPHC_header+0x158>
		NET_DBG("SAC_1");

		if ((CIPHC[1] & NET_6LO_IPHC_SAM_11) == NET_6LO_IPHC_SAM_00) {
   21234:	f013 0f30 	tst.w	r3, #48	; 0x30
   21238:	d05e      	beq.n	212f8 <uncompress_IPHC_header+0x1f8>
	}

	return true;

fail:
	net_pkt_frag_unref(frag);
   2123a:	4638      	mov	r0, r7
   2123c:	f7fb fccb 	bl	1cbd6 <net_pkt_frag_unref>
	return false;
   21240:	2000      	movs	r0, #0
   21242:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		ipv6->hop_limit = 1;
   21246:	2301      	movs	r3, #1
   21248:	71f3      	strb	r3, [r6, #7]
   2124a:	e7e1      	b.n	21210 <uncompress_IPHC_header+0x110>
		ipv6->hop_limit = 64;
   2124c:	2340      	movs	r3, #64	; 0x40
   2124e:	71f3      	strb	r3, [r6, #7]
   21250:	e7de      	b.n	21210 <uncompress_IPHC_header+0x110>
		ipv6->hop_limit = 255;
   21252:	23ff      	movs	r3, #255	; 0xff
   21254:	71f3      	strb	r3, [r6, #7]
   21256:	e7db      	b.n	21210 <uncompress_IPHC_header+0x110>
	switch (CIPHC[1] & NET_6LO_IPHC_SAM_11) {
   21258:	68a3      	ldr	r3, [r4, #8]
   2125a:	6899      	ldr	r1, [r3, #8]
   2125c:	784b      	ldrb	r3, [r1, #1]
   2125e:	f003 0330 	and.w	r3, r3, #48	; 0x30
   21262:	2b10      	cmp	r3, #16
   21264:	d059      	beq.n	2131a <uncompress_IPHC_header+0x21a>
   21266:	d93e      	bls.n	212e6 <uncompress_IPHC_header+0x1e6>
   21268:	2b20      	cmp	r3, #32
   2126a:	d065      	beq.n	21338 <uncompress_IPHC_header+0x238>
   2126c:	2b30      	cmp	r3, #48	; 0x30
   2126e:	d143      	bne.n	212f8 <uncompress_IPHC_header+0x1f8>
		net_ipv6_addr_create_iid(&ipv6->src, net_pkt_ll_src(pkt));
   21270:	f106 0808 	add.w	r8, r6, #8
	return &pkt->lladdr_src;
   21274:	f104 0920 	add.w	r9, r4, #32
	addr->s6_addr[0] = 0xfe;
   21278:	23fe      	movs	r3, #254	; 0xfe
   2127a:	7233      	strb	r3, [r6, #8]
	addr->s6_addr[1] = 0x80;
   2127c:	2380      	movs	r3, #128	; 0x80
   2127e:	f888 3001 	strb.w	r3, [r8, #1]
	UNALIGNED_PUT(0, &addr->s6_addr16[1]);
   21282:	2300      	movs	r3, #0
   21284:	f888 3002 	strb.w	r3, [r8, #2]
   21288:	f888 3003 	strb.w	r3, [r8, #3]
	UNALIGNED_PUT(0, &addr->s6_addr32[1]);
   2128c:	f888 3004 	strb.w	r3, [r8, #4]
   21290:	f888 3005 	strb.w	r3, [r8, #5]
   21294:	f888 3006 	strb.w	r3, [r8, #6]
   21298:	f888 3007 	strb.w	r3, [r8, #7]
	switch (lladdr->len) {
   2129c:	f899 2004 	ldrb.w	r2, [r9, #4]
   212a0:	2a06      	cmp	r2, #6
   212a2:	d05b      	beq.n	2135c <uncompress_IPHC_header+0x25c>
   212a4:	2a08      	cmp	r2, #8
   212a6:	f000 8082 	beq.w	213ae <uncompress_IPHC_header+0x2ae>
   212aa:	2a02      	cmp	r2, #2
   212ac:	d124      	bne.n	212f8 <uncompress_IPHC_header+0x1f8>
		if (lladdr->type == NET_LINK_IEEE802154) {
   212ae:	f899 3005 	ldrb.w	r3, [r9, #5]
   212b2:	2b01      	cmp	r3, #1
   212b4:	d120      	bne.n	212f8 <uncompress_IPHC_header+0x1f8>
			UNALIGNED_PUT(0, &addr->s6_addr32[2]);
   212b6:	2300      	movs	r3, #0
   212b8:	f888 3008 	strb.w	r3, [r8, #8]
   212bc:	f888 3009 	strb.w	r3, [r8, #9]
   212c0:	f888 300a 	strb.w	r3, [r8, #10]
			addr->s6_addr[11] = 0xff;
   212c4:	22ff      	movs	r2, #255	; 0xff
   212c6:	f888 200b 	strb.w	r2, [r8, #11]
			addr->s6_addr[12] = 0xfe;
   212ca:	22fe      	movs	r2, #254	; 0xfe
   212cc:	f888 200c 	strb.w	r2, [r8, #12]
			addr->s6_addr[13] = 0;
   212d0:	f888 300d 	strb.w	r3, [r8, #13]
			addr->s6_addr[14] = lladdr->addr[0];
   212d4:	6a23      	ldr	r3, [r4, #32]
   212d6:	781b      	ldrb	r3, [r3, #0]
   212d8:	f888 300e 	strb.w	r3, [r8, #14]
			addr->s6_addr[15] = lladdr->addr[1];
   212dc:	6a23      	ldr	r3, [r4, #32]
   212de:	785b      	ldrb	r3, [r3, #1]
   212e0:	f888 300f 	strb.w	r3, [r8, #15]
   212e4:	e008      	b.n	212f8 <uncompress_IPHC_header+0x1f8>
	switch (CIPHC[1] & NET_6LO_IPHC_SAM_11) {
   212e6:	b93b      	cbnz	r3, 212f8 <uncompress_IPHC_header+0x1f8>
		memcpy(ipv6->src.s6_addr, &CIPHC[offset], 16);
   212e8:	2210      	movs	r2, #16
   212ea:	4429      	add	r1, r5
   212ec:	f106 0008 	add.w	r0, r6, #8
   212f0:	f7de ffe6 	bl	2c0 <memcpy>
		offset += 16;
   212f4:	3510      	adds	r5, #16
   212f6:	b2ed      	uxtb	r5, r5
	if (CIPHC[1] & NET_6LO_IPHC_M_1) {
   212f8:	68a3      	ldr	r3, [r4, #8]
   212fa:	6899      	ldr	r1, [r3, #8]
   212fc:	784b      	ldrb	r3, [r1, #1]
   212fe:	f013 0f08 	tst.w	r3, #8
   21302:	d160      	bne.n	213c6 <uncompress_IPHC_header+0x2c6>
	switch (CIPHC[1] & NET_6LO_IPHC_DAM_11) {
   21304:	f003 0303 	and.w	r3, r3, #3
   21308:	2b03      	cmp	r3, #3
   2130a:	f200 80ad 	bhi.w	21468 <uncompress_IPHC_header+0x368>
   2130e:	e8df f013 	tbh	[pc, r3, lsl #1]
   21312:	00a3      	.short	0x00a3
   21314:	00e500d6 	.word	0x00e500d6
   21318:	00f9      	.short	0x00f9
		ipv6->src.s6_addr[0] = 0xFE;
   2131a:	23fe      	movs	r3, #254	; 0xfe
   2131c:	7233      	strb	r3, [r6, #8]
		ipv6->src.s6_addr[1] = 0x80;
   2131e:	2380      	movs	r3, #128	; 0x80
   21320:	7273      	strb	r3, [r6, #9]
		memcpy(&ipv6->src.s6_addr[8], &CIPHC[offset], 8);
   21322:	68a3      	ldr	r3, [r4, #8]
   21324:	6899      	ldr	r1, [r3, #8]
   21326:	2208      	movs	r2, #8
   21328:	4429      	add	r1, r5
   2132a:	f106 0010 	add.w	r0, r6, #16
   2132e:	f7de ffc7 	bl	2c0 <memcpy>
		offset += 8;
   21332:	3508      	adds	r5, #8
   21334:	b2ed      	uxtb	r5, r5
   21336:	e7df      	b.n	212f8 <uncompress_IPHC_header+0x1f8>
		ipv6->src.s6_addr[0] = 0xFE;
   21338:	23fe      	movs	r3, #254	; 0xfe
   2133a:	7233      	strb	r3, [r6, #8]
		ipv6->src.s6_addr[1] = 0x80;
   2133c:	2280      	movs	r2, #128	; 0x80
   2133e:	7272      	strb	r2, [r6, #9]
		ipv6->src.s6_addr[11] = 0xFF;
   21340:	22ff      	movs	r2, #255	; 0xff
   21342:	74f2      	strb	r2, [r6, #19]
		ipv6->src.s6_addr[12] = 0xFE;
   21344:	7533      	strb	r3, [r6, #20]
		memcpy(&ipv6->src.s6_addr[14], &CIPHC[offset], 2);
   21346:	68a3      	ldr	r3, [r4, #8]
   21348:	6899      	ldr	r1, [r3, #8]
   2134a:	2202      	movs	r2, #2
   2134c:	4429      	add	r1, r5
   2134e:	f106 0016 	add.w	r0, r6, #22
   21352:	f7de ffb5 	bl	2c0 <memcpy>
		offset += 2;
   21356:	3502      	adds	r5, #2
   21358:	b2ed      	uxtb	r5, r5
   2135a:	e7cd      	b.n	212f8 <uncompress_IPHC_header+0x1f8>
		memcpy(&addr->s6_addr[8], lladdr->addr, 3);
   2135c:	2203      	movs	r2, #3
   2135e:	6a21      	ldr	r1, [r4, #32]
   21360:	f108 0008 	add.w	r0, r8, #8
   21364:	f7de ffac 	bl	2c0 <memcpy>
		addr->s6_addr[11] = 0xff;
   21368:	23ff      	movs	r3, #255	; 0xff
   2136a:	f888 300b 	strb.w	r3, [r8, #11]
		addr->s6_addr[12] = 0xfe;
   2136e:	23fe      	movs	r3, #254	; 0xfe
   21370:	f888 300c 	strb.w	r3, [r8, #12]
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   21374:	6a21      	ldr	r1, [r4, #32]
   21376:	2203      	movs	r2, #3
   21378:	4411      	add	r1, r2
   2137a:	f108 000d 	add.w	r0, r8, #13
   2137e:	f7de ff9f 	bl	2c0 <memcpy>
		if (lladdr->type == NET_LINK_BLUETOOTH) {
   21382:	f899 3005 	ldrb.w	r3, [r9, #5]
   21386:	2b02      	cmp	r3, #2
   21388:	d00a      	beq.n	213a0 <uncompress_IPHC_header+0x2a0>
		if (lladdr->type == NET_LINK_ETHERNET) {
   2138a:	f899 3005 	ldrb.w	r3, [r9, #5]
   2138e:	2b03      	cmp	r3, #3
   21390:	d1b2      	bne.n	212f8 <uncompress_IPHC_header+0x1f8>
			addr->s6_addr[8] ^= 0x02;
   21392:	f898 3008 	ldrb.w	r3, [r8, #8]
   21396:	f083 0302 	eor.w	r3, r3, #2
   2139a:	f888 3008 	strb.w	r3, [r8, #8]
   2139e:	e7ab      	b.n	212f8 <uncompress_IPHC_header+0x1f8>
			addr->s6_addr[8] ^= 0x02;
   213a0:	f898 3008 	ldrb.w	r3, [r8, #8]
   213a4:	f083 0302 	eor.w	r3, r3, #2
   213a8:	f888 3008 	strb.w	r3, [r8, #8]
   213ac:	e7ed      	b.n	2138a <uncompress_IPHC_header+0x28a>
		memcpy(&addr->s6_addr[8], lladdr->addr, lladdr->len);
   213ae:	6a21      	ldr	r1, [r4, #32]
   213b0:	f108 0008 	add.w	r0, r8, #8
   213b4:	f7de ff84 	bl	2c0 <memcpy>
		addr->s6_addr[8] ^= 0x02;
   213b8:	f898 3008 	ldrb.w	r3, [r8, #8]
   213bc:	f083 0302 	eor.w	r3, r3, #2
   213c0:	f888 3008 	strb.w	r3, [r8, #8]
   213c4:	e798      	b.n	212f8 <uncompress_IPHC_header+0x1f8>
	if (CIPHC[1] & NET_6LO_IPHC_DAC_1) {
   213c6:	784b      	ldrb	r3, [r1, #1]
   213c8:	f013 0f04 	tst.w	r3, #4
   213cc:	d142      	bne.n	21454 <uncompress_IPHC_header+0x354>
	switch (CIPHC[1] & NET_6LO_IPHC_DAM_11) {
   213ce:	f003 0303 	and.w	r3, r3, #3
   213d2:	2b03      	cmp	r3, #3
   213d4:	d848      	bhi.n	21468 <uncompress_IPHC_header+0x368>
   213d6:	e8df f003 	tbb	[pc, r3]
   213da:	0b02      	.short	0x0b02
   213dc:	311e      	.short	0x311e
		memcpy(&ipv6->dst.s6_addr[0], &CIPHC[offset], 16);
   213de:	2210      	movs	r2, #16
   213e0:	4429      	add	r1, r5
   213e2:	f106 0018 	add.w	r0, r6, #24
   213e6:	f7de ff6b 	bl	2c0 <memcpy>
		offset += 16;
   213ea:	3510      	adds	r5, #16
   213ec:	b2ed      	uxtb	r5, r5
   213ee:	e03b      	b.n	21468 <uncompress_IPHC_header+0x368>
		ipv6->dst.s6_addr[0] = 0xFF;
   213f0:	23ff      	movs	r3, #255	; 0xff
   213f2:	7633      	strb	r3, [r6, #24]
		ipv6->dst.s6_addr[1] = CIPHC[offset++];
   213f4:	68a3      	ldr	r3, [r4, #8]
   213f6:	689b      	ldr	r3, [r3, #8]
   213f8:	1c69      	adds	r1, r5, #1
   213fa:	5d5b      	ldrb	r3, [r3, r5]
   213fc:	7673      	strb	r3, [r6, #25]
		memcpy(&ipv6->dst.s6_addr[11], &CIPHC[offset], 5);
   213fe:	68a3      	ldr	r3, [r4, #8]
   21400:	689b      	ldr	r3, [r3, #8]
   21402:	2205      	movs	r2, #5
   21404:	fa53 f181 	uxtab	r1, r3, r1
   21408:	f106 0023 	add.w	r0, r6, #35	; 0x23
   2140c:	f7de ff58 	bl	2c0 <memcpy>
		offset += 5;
   21410:	3506      	adds	r5, #6
   21412:	b2ed      	uxtb	r5, r5
   21414:	e028      	b.n	21468 <uncompress_IPHC_header+0x368>
		ipv6->dst.s6_addr[0] = 0xFF;
   21416:	23ff      	movs	r3, #255	; 0xff
   21418:	7633      	strb	r3, [r6, #24]
		ipv6->dst.s6_addr[1] = CIPHC[offset++];
   2141a:	68a3      	ldr	r3, [r4, #8]
   2141c:	689b      	ldr	r3, [r3, #8]
   2141e:	1c69      	adds	r1, r5, #1
   21420:	5d5b      	ldrb	r3, [r3, r5]
   21422:	7673      	strb	r3, [r6, #25]
		memcpy(&ipv6->dst.s6_addr[13], &CIPHC[offset], 3);
   21424:	68a3      	ldr	r3, [r4, #8]
   21426:	689b      	ldr	r3, [r3, #8]
   21428:	2203      	movs	r2, #3
   2142a:	fa53 f181 	uxtab	r1, r3, r1
   2142e:	f106 0025 	add.w	r0, r6, #37	; 0x25
   21432:	f7de ff45 	bl	2c0 <memcpy>
		offset += 3;
   21436:	3504      	adds	r5, #4
   21438:	b2ed      	uxtb	r5, r5
   2143a:	e015      	b.n	21468 <uncompress_IPHC_header+0x368>
		ipv6->dst.s6_addr[0] = 0xFF;
   2143c:	23ff      	movs	r3, #255	; 0xff
   2143e:	7633      	strb	r3, [r6, #24]
		ipv6->dst.s6_addr[1] = 0x02;
   21440:	2302      	movs	r3, #2
   21442:	7673      	strb	r3, [r6, #25]
		ipv6->dst.s6_addr[15] = CIPHC[offset++];
   21444:	68a3      	ldr	r3, [r4, #8]
   21446:	689a      	ldr	r2, [r3, #8]
   21448:	1c6b      	adds	r3, r5, #1
   2144a:	5d52      	ldrb	r2, [r2, r5]
   2144c:	f886 2027 	strb.w	r2, [r6, #39]	; 0x27
   21450:	b2dd      	uxtb	r5, r3
   21452:	e009      	b.n	21468 <uncompress_IPHC_header+0x368>
		return 0;
   21454:	2500      	movs	r5, #0
   21456:	e007      	b.n	21468 <uncompress_IPHC_header+0x368>
		memcpy(&ipv6->dst.s6_addr[0], &CIPHC[offset], 16);
   21458:	2210      	movs	r2, #16
   2145a:	4429      	add	r1, r5
   2145c:	f106 0018 	add.w	r0, r6, #24
   21460:	f7de ff2e 	bl	2c0 <memcpy>
		offset += 16;
   21464:	3510      	adds	r5, #16
   21466:	b2ed      	uxtb	r5, r5
	net_buf_add(frag, NET_IPV6H_LEN);
   21468:	f107 0a08 	add.w	sl, r7, #8
   2146c:	2128      	movs	r1, #40	; 0x28
   2146e:	4650      	mov	r0, sl
   21470:	f7f8 fe94 	bl	1a19c <net_buf_simple_add>
	if (!(CIPHC[0] & NET_6LO_IPHC_NH_1)) {
   21474:	68a3      	ldr	r3, [r4, #8]
   21476:	689b      	ldr	r3, [r3, #8]
   21478:	781a      	ldrb	r2, [r3, #0]
   2147a:	f012 0f04 	tst.w	r2, #4
   2147e:	f000 8114 	beq.w	216aa <uncompress_IPHC_header+0x5aa>
	if ((CIPHC[offset] & 0xF0) != NET_6LO_NHC_UDP_BARE) {
   21482:	5d5b      	ldrb	r3, [r3, r5]
   21484:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   21488:	2bf0      	cmp	r3, #240	; 0xf0
   2148a:	f47f aed6 	bne.w	2123a <uncompress_IPHC_header+0x13a>
	ipv6->nexthdr = IPPROTO_UDP;
   2148e:	2311      	movs	r3, #17
   21490:	71b3      	strb	r3, [r6, #6]
	udp = (struct net_udp_hdr *)(frag->data + NET_IPV6H_LEN);
   21492:	f8d7 b008 	ldr.w	fp, [r7, #8]
   21496:	f10b 0928 	add.w	r9, fp, #40	; 0x28
	chksum = CIPHC[offset] & NET_6LO_NHC_UDP_CHKSUM_1;
   2149a:	68a3      	ldr	r3, [r4, #8]
   2149c:	6898      	ldr	r0, [r3, #8]
   2149e:	f810 8005 	ldrb.w	r8, [r0, r5]
   214a2:	f008 0808 	and.w	r8, r8, #8
	switch (CIPHC[offset++] & NET_6LO_NHC_UDP_PORT_11) {
   214a6:	1c69      	adds	r1, r5, #1
   214a8:	b2c9      	uxtb	r1, r1
   214aa:	5d43      	ldrb	r3, [r0, r5]
   214ac:	f003 0303 	and.w	r3, r3, #3
   214b0:	2b03      	cmp	r3, #3
   214b2:	f200 80ed 	bhi.w	21690 <uncompress_IPHC_header+0x590>
   214b6:	e8df f003 	tbb	[pc, r3]
   214ba:	ae95      	.short	0xae95
   214bc:	d3c0      	.short	0xd3c0
		ipv6->dst.s6_addr[0] = 0xFE;
   214be:	23fe      	movs	r3, #254	; 0xfe
   214c0:	7633      	strb	r3, [r6, #24]
		ipv6->dst.s6_addr[1] = 0x80;
   214c2:	2380      	movs	r3, #128	; 0x80
   214c4:	7673      	strb	r3, [r6, #25]
		memcpy(&ipv6->dst.s6_addr[8], &CIPHC[offset], 8);
   214c6:	68a3      	ldr	r3, [r4, #8]
   214c8:	6899      	ldr	r1, [r3, #8]
   214ca:	2208      	movs	r2, #8
   214cc:	4429      	add	r1, r5
   214ce:	f106 0020 	add.w	r0, r6, #32
   214d2:	f7de fef5 	bl	2c0 <memcpy>
		offset += 8;
   214d6:	3508      	adds	r5, #8
   214d8:	b2ed      	uxtb	r5, r5
   214da:	e7c5      	b.n	21468 <uncompress_IPHC_header+0x368>
		ipv6->dst.s6_addr[0] = 0xFE;
   214dc:	23fe      	movs	r3, #254	; 0xfe
   214de:	7633      	strb	r3, [r6, #24]
		ipv6->dst.s6_addr[1] = 0x80;
   214e0:	2280      	movs	r2, #128	; 0x80
   214e2:	7672      	strb	r2, [r6, #25]
		ipv6->dst.s6_addr[11] = 0xFF;
   214e4:	22ff      	movs	r2, #255	; 0xff
   214e6:	f886 2023 	strb.w	r2, [r6, #35]	; 0x23
		ipv6->dst.s6_addr[12] = 0xFE;
   214ea:	f886 3024 	strb.w	r3, [r6, #36]	; 0x24
		memcpy(&ipv6->dst.s6_addr[14], &CIPHC[offset], 2);
   214ee:	68a3      	ldr	r3, [r4, #8]
   214f0:	6899      	ldr	r1, [r3, #8]
   214f2:	2202      	movs	r2, #2
   214f4:	4429      	add	r1, r5
   214f6:	f106 0026 	add.w	r0, r6, #38	; 0x26
   214fa:	f7de fee1 	bl	2c0 <memcpy>
		offset += 2;
   214fe:	3502      	adds	r5, #2
   21500:	b2ed      	uxtb	r5, r5
   21502:	e7b1      	b.n	21468 <uncompress_IPHC_header+0x368>
		net_ipv6_addr_create_iid(&ipv6->dst, net_pkt_ll_dst(pkt));
   21504:	f106 0818 	add.w	r8, r6, #24
	return &pkt->lladdr_dst;
   21508:	f104 0928 	add.w	r9, r4, #40	; 0x28
	addr->s6_addr[0] = 0xfe;
   2150c:	23fe      	movs	r3, #254	; 0xfe
   2150e:	7633      	strb	r3, [r6, #24]
	addr->s6_addr[1] = 0x80;
   21510:	2380      	movs	r3, #128	; 0x80
   21512:	f888 3001 	strb.w	r3, [r8, #1]
	UNALIGNED_PUT(0, &addr->s6_addr16[1]);
   21516:	2300      	movs	r3, #0
   21518:	f888 3002 	strb.w	r3, [r8, #2]
   2151c:	f888 3003 	strb.w	r3, [r8, #3]
	UNALIGNED_PUT(0, &addr->s6_addr32[1]);
   21520:	f888 3004 	strb.w	r3, [r8, #4]
   21524:	f888 3005 	strb.w	r3, [r8, #5]
   21528:	f888 3006 	strb.w	r3, [r8, #6]
   2152c:	f888 3007 	strb.w	r3, [r8, #7]
	switch (lladdr->len) {
   21530:	f899 2004 	ldrb.w	r2, [r9, #4]
   21534:	2a06      	cmp	r2, #6
   21536:	d01f      	beq.n	21578 <uncompress_IPHC_header+0x478>
   21538:	2a08      	cmp	r2, #8
   2153a:	d047      	beq.n	215cc <uncompress_IPHC_header+0x4cc>
   2153c:	2a02      	cmp	r2, #2
   2153e:	d193      	bne.n	21468 <uncompress_IPHC_header+0x368>
		if (lladdr->type == NET_LINK_IEEE802154) {
   21540:	f899 3005 	ldrb.w	r3, [r9, #5]
   21544:	2b01      	cmp	r3, #1
   21546:	d18f      	bne.n	21468 <uncompress_IPHC_header+0x368>
			UNALIGNED_PUT(0, &addr->s6_addr32[2]);
   21548:	2300      	movs	r3, #0
   2154a:	f888 3008 	strb.w	r3, [r8, #8]
   2154e:	f888 3009 	strb.w	r3, [r8, #9]
   21552:	f888 300a 	strb.w	r3, [r8, #10]
			addr->s6_addr[11] = 0xff;
   21556:	22ff      	movs	r2, #255	; 0xff
   21558:	f888 200b 	strb.w	r2, [r8, #11]
			addr->s6_addr[12] = 0xfe;
   2155c:	22fe      	movs	r2, #254	; 0xfe
   2155e:	f888 200c 	strb.w	r2, [r8, #12]
			addr->s6_addr[13] = 0;
   21562:	f888 300d 	strb.w	r3, [r8, #13]
			addr->s6_addr[14] = lladdr->addr[0];
   21566:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   21568:	781b      	ldrb	r3, [r3, #0]
   2156a:	f888 300e 	strb.w	r3, [r8, #14]
			addr->s6_addr[15] = lladdr->addr[1];
   2156e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   21570:	785b      	ldrb	r3, [r3, #1]
   21572:	f888 300f 	strb.w	r3, [r8, #15]
   21576:	e777      	b.n	21468 <uncompress_IPHC_header+0x368>
		memcpy(&addr->s6_addr[8], lladdr->addr, 3);
   21578:	2203      	movs	r2, #3
   2157a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   2157c:	f108 0008 	add.w	r0, r8, #8
   21580:	f7de fe9e 	bl	2c0 <memcpy>
		addr->s6_addr[11] = 0xff;
   21584:	23ff      	movs	r3, #255	; 0xff
   21586:	f888 300b 	strb.w	r3, [r8, #11]
		addr->s6_addr[12] = 0xfe;
   2158a:	23fe      	movs	r3, #254	; 0xfe
   2158c:	f888 300c 	strb.w	r3, [r8, #12]
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   21590:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   21592:	2203      	movs	r2, #3
   21594:	4411      	add	r1, r2
   21596:	f108 000d 	add.w	r0, r8, #13
   2159a:	f7de fe91 	bl	2c0 <memcpy>
		if (lladdr->type == NET_LINK_BLUETOOTH) {
   2159e:	f899 3005 	ldrb.w	r3, [r9, #5]
   215a2:	2b02      	cmp	r3, #2
   215a4:	d00b      	beq.n	215be <uncompress_IPHC_header+0x4be>
		if (lladdr->type == NET_LINK_ETHERNET) {
   215a6:	f899 3005 	ldrb.w	r3, [r9, #5]
   215aa:	2b03      	cmp	r3, #3
   215ac:	f47f af5c 	bne.w	21468 <uncompress_IPHC_header+0x368>
			addr->s6_addr[8] ^= 0x02;
   215b0:	f898 3008 	ldrb.w	r3, [r8, #8]
   215b4:	f083 0302 	eor.w	r3, r3, #2
   215b8:	f888 3008 	strb.w	r3, [r8, #8]
   215bc:	e754      	b.n	21468 <uncompress_IPHC_header+0x368>
			addr->s6_addr[8] ^= 0x02;
   215be:	f898 3008 	ldrb.w	r3, [r8, #8]
   215c2:	f083 0302 	eor.w	r3, r3, #2
   215c6:	f888 3008 	strb.w	r3, [r8, #8]
   215ca:	e7ec      	b.n	215a6 <uncompress_IPHC_header+0x4a6>
		memcpy(&addr->s6_addr[8], lladdr->addr, lladdr->len);
   215cc:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   215ce:	f108 0008 	add.w	r0, r8, #8
   215d2:	f7de fe75 	bl	2c0 <memcpy>
		addr->s6_addr[8] ^= 0x02;
   215d6:	f898 3008 	ldrb.w	r3, [r8, #8]
   215da:	f083 0302 	eor.w	r3, r3, #2
   215de:	f888 3008 	strb.w	r3, [r8, #8]
   215e2:	e741      	b.n	21468 <uncompress_IPHC_header+0x368>
		memcpy(&udp->src_port, &CIPHC[offset], 2);
   215e4:	2202      	movs	r2, #2
   215e6:	4401      	add	r1, r0
   215e8:	4648      	mov	r0, r9
   215ea:	f7de fe69 	bl	2c0 <memcpy>
		offset += 2;
   215ee:	1ce9      	adds	r1, r5, #3
		memcpy(&udp->dst_port, &CIPHC[offset], 2);
   215f0:	68a3      	ldr	r3, [r4, #8]
   215f2:	689b      	ldr	r3, [r3, #8]
   215f4:	2202      	movs	r2, #2
   215f6:	fa53 f181 	uxtab	r1, r3, r1
   215fa:	eb09 0002 	add.w	r0, r9, r2
   215fe:	f7de fe5f 	bl	2c0 <memcpy>
		offset += 2;
   21602:	3505      	adds	r5, #5
   21604:	b2ed      	uxtb	r5, r5
	if (!chksum) {
   21606:	f1b8 0f00 	cmp.w	r8, #0
   2160a:	d043      	beq.n	21694 <uncompress_IPHC_header+0x594>
	net_buf_add(frag, NET_UDPH_LEN);
   2160c:	2108      	movs	r1, #8
   2160e:	4650      	mov	r0, sl
   21610:	f7f8 fdc4 	bl	1a19c <net_buf_simple_add>
   21614:	e04c      	b.n	216b0 <uncompress_IPHC_header+0x5b0>
		memcpy(&udp->src_port, &CIPHC[offset], 2);
   21616:	2202      	movs	r2, #2
   21618:	4401      	add	r1, r0
   2161a:	4648      	mov	r0, r9
   2161c:	f7de fe50 	bl	2c0 <memcpy>
		offset += 2;
   21620:	1ceb      	adds	r3, r5, #3
   21622:	b2db      	uxtb	r3, r3
		udp->dst_port = htons(((u16_t)NET_6LO_NHC_UDP_8_BIT_PORT
   21624:	68a2      	ldr	r2, [r4, #8]
   21626:	6892      	ldr	r2, [r2, #8]
   21628:	5cd3      	ldrb	r3, [r2, r3]
   2162a:	021b      	lsls	r3, r3, #8
   2162c:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
   21630:	f8a9 3002 	strh.w	r3, [r9, #2]
		offset++;
   21634:	3504      	adds	r5, #4
   21636:	b2ed      	uxtb	r5, r5
   21638:	e7e5      	b.n	21606 <uncompress_IPHC_header+0x506>
		udp->src_port = htons(((u16_t)NET_6LO_NHC_UDP_8_BIT_PORT
   2163a:	5c43      	ldrb	r3, [r0, r1]
   2163c:	021b      	lsls	r3, r3, #8
   2163e:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
   21642:	f8ab 3028 	strh.w	r3, [fp, #40]	; 0x28
		offset++;
   21646:	1ca9      	adds	r1, r5, #2
		memcpy(&udp->dst_port, &CIPHC[offset], 2);
   21648:	68a3      	ldr	r3, [r4, #8]
   2164a:	689b      	ldr	r3, [r3, #8]
   2164c:	2202      	movs	r2, #2
   2164e:	fa53 f181 	uxtab	r1, r3, r1
   21652:	eb09 0002 	add.w	r0, r9, r2
   21656:	f7de fe33 	bl	2c0 <memcpy>
		offset += 2;
   2165a:	3504      	adds	r5, #4
   2165c:	b2ed      	uxtb	r5, r5
   2165e:	e7d2      	b.n	21606 <uncompress_IPHC_header+0x506>
		udp->src_port = htons((NET_6LO_NHC_UDP_4_BIT_PORT << 4) |
   21660:	5c43      	ldrb	r3, [r0, r1]
   21662:	091b      	lsrs	r3, r3, #4
   21664:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
   21668:	021b      	lsls	r3, r3, #8
   2166a:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
   2166e:	f8ab 3028 	strh.w	r3, [fp, #40]	; 0x28
		udp->dst_port = htons((NET_6LO_NHC_UDP_4_BIT_PORT << 4) |
   21672:	68a3      	ldr	r3, [r4, #8]
   21674:	689b      	ldr	r3, [r3, #8]
   21676:	5c5b      	ldrb	r3, [r3, r1]
   21678:	021b      	lsls	r3, r3, #8
   2167a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
   2167e:	f443 4330 	orr.w	r3, r3, #45056	; 0xb000
   21682:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
   21686:	f8a9 3002 	strh.w	r3, [r9, #2]
		offset++;
   2168a:	3502      	adds	r5, #2
   2168c:	b2ed      	uxtb	r5, r5
   2168e:	e7ba      	b.n	21606 <uncompress_IPHC_header+0x506>
	switch (CIPHC[offset++] & NET_6LO_NHC_UDP_PORT_11) {
   21690:	460d      	mov	r5, r1
   21692:	e7b8      	b.n	21606 <uncompress_IPHC_header+0x506>
		memcpy(&udp->chksum, &CIPHC[offset], 2);
   21694:	68a3      	ldr	r3, [r4, #8]
   21696:	6899      	ldr	r1, [r3, #8]
   21698:	2202      	movs	r2, #2
   2169a:	4429      	add	r1, r5
   2169c:	f10b 002e 	add.w	r0, fp, #46	; 0x2e
   216a0:	f7de fe0e 	bl	2c0 <memcpy>
		offset += 2;
   216a4:	3502      	adds	r5, #2
   216a6:	b2ed      	uxtb	r5, r5
   216a8:	e7b0      	b.n	2160c <uncompress_IPHC_header+0x50c>
	u8_t chksum = 0;
   216aa:	f04f 0800 	mov.w	r8, #0
	struct net_udp_hdr *udp = NULL;
   216ae:	46c1      	mov	r9, r8
	if (pkt->frags->len < offset) {
   216b0:	68a3      	ldr	r3, [r4, #8]
   216b2:	899a      	ldrh	r2, [r3, #12]
   216b4:	fa1f fa85 	uxth.w	sl, r5
   216b8:	4552      	cmp	r2, sl
   216ba:	f4ff adbe 	bcc.w	2123a <uncompress_IPHC_header+0x13a>
	memmove(pkt->frags->data, pkt->frags->data + offset,
   216be:	6898      	ldr	r0, [r3, #8]
   216c0:	1b52      	subs	r2, r2, r5
   216c2:	1941      	adds	r1, r0, r5
   216c4:	f009 f97a 	bl	2a9bc <memmove>
	pkt->frags->len -= offset;
   216c8:	68a2      	ldr	r2, [r4, #8]
   216ca:	8993      	ldrh	r3, [r2, #12]
   216cc:	eba3 0a0a 	sub.w	sl, r3, sl
   216d0:	f8a2 a00c 	strh.w	sl, [r2, #12]
	return pkt->ll_reserve;
   216d4:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
	if (net_pkt_ll_reserve(pkt)) {
   216d8:	b94a      	cbnz	r2, 216ee <uncompress_IPHC_header+0x5ee>
	net_pkt_frag_insert(pkt, frag);
   216da:	4639      	mov	r1, r7
   216dc:	4620      	mov	r0, r4
   216de:	f7fb fab7 	bl	1cc50 <net_pkt_frag_insert>
	net_pkt_compact(pkt);
   216e2:	4620      	mov	r0, r4
   216e4:	f7fb fb6e 	bl	1cdc4 <net_pkt_compact>
	return net_buf_frags_len(pkt->frags);
   216e8:	68a3      	ldr	r3, [r4, #8]
	size_t bytes = 0;
   216ea:	2200      	movs	r2, #0
   216ec:	e00b      	b.n	21706 <uncompress_IPHC_header+0x606>
		memcpy(frag->data - net_pkt_ll_reserve(pkt),
   216ee:	68bb      	ldr	r3, [r7, #8]
   216f0:	4250      	negs	r0, r2
	return pkt->frags->data;
   216f2:	68a1      	ldr	r1, [r4, #8]
   216f4:	6889      	ldr	r1, [r1, #8]
   216f6:	4401      	add	r1, r0
   216f8:	4418      	add	r0, r3
   216fa:	f7de fde1 	bl	2c0 <memcpy>
   216fe:	e7ec      	b.n	216da <uncompress_IPHC_header+0x5da>
		bytes += buf->len;
   21700:	8999      	ldrh	r1, [r3, #12]
   21702:	440a      	add	r2, r1
		buf = buf->frags;
   21704:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   21706:	2b00      	cmp	r3, #0
   21708:	d1fa      	bne.n	21700 <uncompress_IPHC_header+0x600>
	len = net_pkt_get_len(pkt) - NET_IPV6H_LEN;
   2170a:	b293      	uxth	r3, r2
   2170c:	3b28      	subs	r3, #40	; 0x28
   2170e:	b29b      	uxth	r3, r3
	ipv6->len[0] = len >> 8;
   21710:	0a1a      	lsrs	r2, r3, #8
   21712:	7132      	strb	r2, [r6, #4]
	ipv6->len[1] = (u8_t)len;
   21714:	7173      	strb	r3, [r6, #5]
	if (ipv6->nexthdr == IPPROTO_UDP && udp) {
   21716:	79b1      	ldrb	r1, [r6, #6]
   21718:	2911      	cmp	r1, #17
   2171a:	d002      	beq.n	21722 <uncompress_IPHC_header+0x622>
	return true;
   2171c:	2001      	movs	r0, #1
   2171e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (ipv6->nexthdr == IPPROTO_UDP && udp) {
   21722:	f1b9 0f00 	cmp.w	r9, #0
   21726:	d018      	beq.n	2175a <uncompress_IPHC_header+0x65a>
		udp->len = htons(len);
   21728:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
   2172c:	f8a9 3004 	strh.w	r3, [r9, #4]
		if (chksum) {
   21730:	f1b8 0f00 	cmp.w	r8, #0
   21734:	d102      	bne.n	2173c <uncompress_IPHC_header+0x63c>
	return true;
   21736:	2001      	movs	r0, #1
}
   21738:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return net_calc_chksum(pkt, IPPROTO_UDP);
   2173c:	4620      	mov	r0, r4
   2173e:	f7fc f8ba 	bl	1d8b6 <net_calc_chksum>
			udp->chksum = ~net_calc_chksum_udp(pkt);
   21742:	43c0      	mvns	r0, r0
   21744:	f8a9 0006 	strh.w	r0, [r9, #6]
	return true;
   21748:	2001      	movs	r0, #1
   2174a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return false;
   2174e:	2000      	movs	r0, #0
   21750:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return false;
   21754:	2000      	movs	r0, #0
   21756:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return true;
   2175a:	2001      	movs	r0, #1
   2175c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00021760 <net_6lo_compress>:
	return true;
}

bool net_6lo_compress(struct net_pkt *pkt, bool iphc,
		      fragment_handler_t fragment)
{
   21760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21764:	b085      	sub	sp, #20
   21766:	4604      	mov	r4, r0
   21768:	4617      	mov	r7, r2
	if (iphc) {
   2176a:	460d      	mov	r5, r1
   2176c:	b9f9      	cbnz	r1, 217ae <net_6lo_compress+0x4e>
	frag = net_pkt_get_frag(pkt, K_FOREVER);
   2176e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   21772:	f7fb f9e3 	bl	1cb3c <net_pkt_get_frag>
	if (!frag) {
   21776:	4606      	mov	r6, r0
   21778:	2800      	cmp	r0, #0
   2177a:	f000 8438 	beq.w	21fee <net_6lo_compress+0x88e>
	frag->data[0] = NET_6LO_DISPATCH_IPV6;
   2177e:	f850 3f08 	ldr.w	r3, [r0, #8]!
   21782:	2241      	movs	r2, #65	; 0x41
   21784:	701a      	strb	r2, [r3, #0]
	net_buf_add(frag, 1);
   21786:	2101      	movs	r1, #1
   21788:	f7f8 fd08 	bl	1a19c <net_buf_simple_add>
	net_pkt_frag_insert(pkt, frag);
   2178c:	4631      	mov	r1, r6
   2178e:	4620      	mov	r0, r4
   21790:	f7fb fa5e 	bl	1cc50 <net_pkt_frag_insert>
	net_pkt_compact(pkt);
   21794:	4620      	mov	r0, r4
   21796:	f7fb fb15 	bl	1cdc4 <net_pkt_compact>
	if (fragment) {
   2179a:	2f00      	cmp	r7, #0
   2179c:	f000 842a 	beq.w	21ff4 <net_6lo_compress+0x894>
		return fragment(pkt, -1);
   217a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   217a4:	4620      	mov	r0, r4
   217a6:	47b8      	blx	r7
		return compress_IPHC_header(pkt, fragment);
	} else {
		return compress_ipv6_header(pkt, fragment);
	}
}
   217a8:	b005      	add	sp, #20
   217aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   217ae:	6883      	ldr	r3, [r0, #8]
   217b0:	689e      	ldr	r6, [r3, #8]
	if (pkt->frags->len < NET_IPV6H_LEN) {
   217b2:	899b      	ldrh	r3, [r3, #12]
   217b4:	2b27      	cmp	r3, #39	; 0x27
   217b6:	f240 8411 	bls.w	21fdc <net_6lo_compress+0x87c>
	if (ipv6->nexthdr == IPPROTO_UDP &&
   217ba:	79b2      	ldrb	r2, [r6, #6]
   217bc:	2a11      	cmp	r2, #17
   217be:	d02f      	beq.n	21820 <net_6lo_compress+0xc0>
	frag = net_pkt_get_frag(pkt, K_FOREVER);
   217c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   217c4:	4620      	mov	r0, r4
   217c6:	f7fb f9b9 	bl	1cb3c <net_pkt_get_frag>
	if (!frag) {
   217ca:	4680      	mov	r8, r0
   217cc:	2800      	cmp	r0, #0
   217ce:	f000 8408 	beq.w	21fe2 <net_6lo_compress+0x882>
	IPHC[offset++] = NET_6LO_DISPATCH_IPHC;
   217d2:	6883      	ldr	r3, [r0, #8]
   217d4:	2260      	movs	r2, #96	; 0x60
   217d6:	701a      	strb	r2, [r3, #0]
	IPHC[offset++] = 0;
   217d8:	6883      	ldr	r3, [r0, #8]
   217da:	2200      	movs	r2, #0
   217dc:	705a      	strb	r2, [r3, #1]
	tcl = ((ipv6->vtc & 0x0F) << 4) | ((ipv6->tcflow & 0xF0) >> 4);
   217de:	7830      	ldrb	r0, [r6, #0]
   217e0:	7871      	ldrb	r1, [r6, #1]
   217e2:	090b      	lsrs	r3, r1, #4
   217e4:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
   217e8:	b2db      	uxtb	r3, r3
	tcl = (tcl << 6) | (tcl >> 2);   /* ECN(2), DSCP(6) */
   217ea:	089a      	lsrs	r2, r3, #2
   217ec:	ea42 1383 	orr.w	r3, r2, r3, lsl #6
   217f0:	b25b      	sxtb	r3, r3
   217f2:	b2da      	uxtb	r2, r3
	if (((ipv6->tcflow & 0x0F) == 0) && (ipv6->flow == 0)) {
   217f4:	f011 0f0f 	tst.w	r1, #15
   217f8:	d121      	bne.n	2183e <net_6lo_compress+0xde>
   217fa:	f8b6 e002 	ldrh.w	lr, [r6, #2]
   217fe:	f1be 0f00 	cmp.w	lr, #0
   21802:	d11c      	bne.n	2183e <net_6lo_compress+0xde>
		if (((ipv6->vtc & 0x0F) == 0) && ((ipv6->tcflow & 0xF0) == 0)) {
   21804:	f010 0f0f 	tst.w	r0, #15
   21808:	d10e      	bne.n	21828 <net_6lo_compress+0xc8>
   2180a:	f011 0ff0 	tst.w	r1, #240	; 0xf0
   2180e:	d10b      	bne.n	21828 <net_6lo_compress+0xc8>
			IPHC[0] |= NET_6LO_IPHC_TF_11;
   21810:	f8d8 2008 	ldr.w	r2, [r8, #8]
   21814:	7813      	ldrb	r3, [r2, #0]
   21816:	f043 0318 	orr.w	r3, r3, #24
   2181a:	7013      	strb	r3, [r2, #0]
   2181c:	2202      	movs	r2, #2
   2181e:	e025      	b.n	2186c <net_6lo_compress+0x10c>
	if (ipv6->nexthdr == IPPROTO_UDP &&
   21820:	2b2f      	cmp	r3, #47	; 0x2f
   21822:	d8cd      	bhi.n	217c0 <net_6lo_compress+0x60>
		return false;
   21824:	2000      	movs	r0, #0
   21826:	e7bf      	b.n	217a8 <net_6lo_compress+0x48>
			IPHC[0] |= NET_6LO_IPHC_TF_10;
   21828:	f8d8 1008 	ldr.w	r1, [r8, #8]
   2182c:	780b      	ldrb	r3, [r1, #0]
   2182e:	f043 0310 	orr.w	r3, r3, #16
   21832:	700b      	strb	r3, [r1, #0]
			IPHC[offset++] = tcl;
   21834:	f8d8 3008 	ldr.w	r3, [r8, #8]
   21838:	709a      	strb	r2, [r3, #2]
   2183a:	2203      	movs	r2, #3
   2183c:	e016      	b.n	2186c <net_6lo_compress+0x10c>
		if (((ipv6->vtc & 0x0F) == 0) && (ipv6->tcflow & 0x30)) {
   2183e:	f010 0f0f 	tst.w	r0, #15
   21842:	d102      	bne.n	2184a <net_6lo_compress+0xea>
   21844:	f011 0f30 	tst.w	r1, #48	; 0x30
   21848:	d128      	bne.n	2189c <net_6lo_compress+0x13c>
			IPHC[0] |= NET_6LO_IPHC_TF_00;
   2184a:	f8d8 3008 	ldr.w	r3, [r8, #8]
			IPHC[offset++] = tcl;
   2184e:	709a      	strb	r2, [r3, #2]
			IPHC[offset++] = ipv6->tcflow & 0x0F;
   21850:	f8d8 2008 	ldr.w	r2, [r8, #8]
   21854:	7873      	ldrb	r3, [r6, #1]
   21856:	f003 030f 	and.w	r3, r3, #15
   2185a:	70d3      	strb	r3, [r2, #3]
			memcpy(&IPHC[offset], &ipv6->flow, 2);
   2185c:	f8d8 0008 	ldr.w	r0, [r8, #8]
   21860:	2202      	movs	r2, #2
   21862:	18b1      	adds	r1, r6, r2
   21864:	3004      	adds	r0, #4
   21866:	f7de fd2b 	bl	2c0 <memcpy>
			offset += 2;
   2186a:	2206      	movs	r2, #6
	if (ipv6->nexthdr == IPPROTO_UDP) {
   2186c:	79b3      	ldrb	r3, [r6, #6]
   2186e:	2b11      	cmp	r3, #17
   21870:	d02d      	beq.n	218ce <net_6lo_compress+0x16e>
		IPHC[offset++] = ipv6->nexthdr;
   21872:	f8d8 1008 	ldr.w	r1, [r8, #8]
   21876:	f102 0901 	add.w	r9, r2, #1
   2187a:	548b      	strb	r3, [r1, r2]
	switch (ipv6->hop_limit) {
   2187c:	79f3      	ldrb	r3, [r6, #7]
   2187e:	2b40      	cmp	r3, #64	; 0x40
   21880:	d040      	beq.n	21904 <net_6lo_compress+0x1a4>
   21882:	2bff      	cmp	r3, #255	; 0xff
   21884:	d045      	beq.n	21912 <net_6lo_compress+0x1b2>
   21886:	2b01      	cmp	r3, #1
   21888:	d029      	beq.n	218de <net_6lo_compress+0x17e>
		IPHC[offset++] = ipv6->hop_limit;
   2188a:	f8d8 1008 	ldr.w	r1, [r8, #8]
   2188e:	f109 0201 	add.w	r2, r9, #1
   21892:	f801 3009 	strb.w	r3, [r1, r9]
   21896:	fa5f f982 	uxtb.w	r9, r2
   2189a:	e026      	b.n	218ea <net_6lo_compress+0x18a>
			IPHC[0] |= NET_6LO_IPHC_TF_01;
   2189c:	f8d8 1008 	ldr.w	r1, [r8, #8]
   218a0:	780a      	ldrb	r2, [r1, #0]
   218a2:	f042 0208 	orr.w	r2, r2, #8
   218a6:	700a      	strb	r2, [r1, #0]
			IPHC[offset++] = (tcl & 0xC0) | (ipv6->tcflow & 0x0F);
   218a8:	f8d8 2008 	ldr.w	r2, [r8, #8]
   218ac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   218b0:	f996 1001 	ldrsb.w	r1, [r6, #1]
   218b4:	f001 010f 	and.w	r1, r1, #15
   218b8:	430b      	orrs	r3, r1
   218ba:	7093      	strb	r3, [r2, #2]
			memcpy(&IPHC[offset], &ipv6->flow, 2);
   218bc:	f8d8 0008 	ldr.w	r0, [r8, #8]
   218c0:	2202      	movs	r2, #2
   218c2:	18b1      	adds	r1, r6, r2
   218c4:	3003      	adds	r0, #3
   218c6:	f7de fcfb 	bl	2c0 <memcpy>
			offset += 2;
   218ca:	2205      	movs	r2, #5
   218cc:	e7ce      	b.n	2186c <net_6lo_compress+0x10c>
		IPHC[0] |= NET_6LO_IPHC_NH_1;
   218ce:	f8d8 1008 	ldr.w	r1, [r8, #8]
   218d2:	780b      	ldrb	r3, [r1, #0]
   218d4:	f043 0304 	orr.w	r3, r3, #4
   218d8:	700b      	strb	r3, [r1, #0]
   218da:	4691      	mov	r9, r2
   218dc:	e7ce      	b.n	2187c <net_6lo_compress+0x11c>
		IPHC[0] |= NET_6LO_IPHC_HLIM1;
   218de:	f8d8 2008 	ldr.w	r2, [r8, #8]
   218e2:	7813      	ldrb	r3, [r2, #0]
   218e4:	f043 0301 	orr.w	r3, r3, #1
   218e8:	7013      	strb	r3, [r2, #0]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   218ea:	68b3      	ldr	r3, [r6, #8]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   218ec:	b9c3      	cbnz	r3, 21920 <net_6lo_compress+0x1c0>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   218ee:	68f3      	ldr	r3, [r6, #12]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   218f0:	2b00      	cmp	r3, #0
   218f2:	d176      	bne.n	219e2 <net_6lo_compress+0x282>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   218f4:	6933      	ldr	r3, [r6, #16]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   218f6:	2b00      	cmp	r3, #0
   218f8:	d175      	bne.n	219e6 <net_6lo_compress+0x286>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   218fa:	6973      	ldr	r3, [r6, #20]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   218fc:	2b00      	cmp	r3, #0
   218fe:	d074      	beq.n	219ea <net_6lo_compress+0x28a>
   21900:	2300      	movs	r3, #0
   21902:	e00e      	b.n	21922 <net_6lo_compress+0x1c2>
		IPHC[0] |= NET_6LO_IPHC_HLIM64;
   21904:	f8d8 2008 	ldr.w	r2, [r8, #8]
   21908:	7813      	ldrb	r3, [r2, #0]
   2190a:	f043 0302 	orr.w	r3, r3, #2
   2190e:	7013      	strb	r3, [r2, #0]
   21910:	e7eb      	b.n	218ea <net_6lo_compress+0x18a>
		IPHC[0] |= NET_6LO_IPHC_HLIM255;
   21912:	f8d8 2008 	ldr.w	r2, [r8, #8]
   21916:	7813      	ldrb	r3, [r2, #0]
   21918:	f043 0303 	orr.w	r3, r3, #3
   2191c:	7013      	strb	r3, [r2, #0]
   2191e:	e7e4      	b.n	218ea <net_6lo_compress+0x18a>
   21920:	2300      	movs	r3, #0
	if (net_is_ipv6_addr_unspecified(&ipv6->src)) {
   21922:	2b00      	cmp	r3, #0
   21924:	d163      	bne.n	219ee <net_6lo_compress+0x28e>
	return UNALIGNED_GET(&addr->s6_addr16[0]) == htons(0xFE80);
   21926:	8932      	ldrh	r2, [r6, #8]
	if (net_is_ipv6_ll_addr(&ipv6->src) &&
   21928:	f248 03fe 	movw	r3, #33022	; 0x80fe
   2192c:	429a      	cmp	r2, r3
   2192e:	d065      	beq.n	219fc <net_6lo_compress+0x29c>
		IPHC[1] |= NET_6LO_IPHC_SAM_00;
   21930:	f8d8 0008 	ldr.w	r0, [r8, #8]
		memcpy(&IPHC[offset], ipv6->src.s6_addr,
   21934:	2210      	movs	r2, #16
   21936:	f106 0108 	add.w	r1, r6, #8
   2193a:	4448      	add	r0, r9
   2193c:	f7de fcc0 	bl	2c0 <memcpy>
		offset += sizeof(struct in6_addr);
   21940:	f109 0910 	add.w	r9, r9, #16
   21944:	fa5f f989 	uxtb.w	r9, r9
	if (!offset) {
   21948:	f1b9 0f00 	cmp.w	r9, #0
   2194c:	f000 812d 	beq.w	21baa <net_6lo_compress+0x44a>
	return addr->s6_addr[0] == 0xFF;
   21950:	7e33      	ldrb	r3, [r6, #24]
	if (net_is_ipv6_addr_mcast(&ipv6->dst)) {
   21952:	2bff      	cmp	r3, #255	; 0xff
   21954:	f000 812e 	beq.w	21bb4 <net_6lo_compress+0x454>
	return UNALIGNED_GET(&addr->s6_addr16[0]) == htons(0xFE80);
   21958:	8b32      	ldrh	r2, [r6, #24]
	if (net_is_ipv6_ll_addr(&ipv6->dst) &&
   2195a:	f248 03fe 	movw	r3, #33022	; 0x80fe
   2195e:	429a      	cmp	r2, r3
   21960:	f000 81bf 	beq.w	21ce2 <net_6lo_compress+0x582>
		IPHC[1] |= NET_6LO_IPHC_DAM_00;
   21964:	f8d8 0008 	ldr.w	r0, [r8, #8]
		memcpy(&IPHC[offset], &ipv6->dst.s6_addr[0], 16);
   21968:	2210      	movs	r2, #16
   2196a:	f106 0118 	add.w	r1, r6, #24
   2196e:	4448      	add	r0, r9
   21970:	f7de fca6 	bl	2c0 <memcpy>
		offset += 16;
   21974:	f109 0910 	add.w	r9, r9, #16
   21978:	fa5f f989 	uxtb.w	r9, r9
	if (!offset) {
   2197c:	f1b9 0f00 	cmp.w	r9, #0
   21980:	f000 8287 	beq.w	21e92 <net_6lo_compress+0x732>
	if (ipv6->nexthdr != IPPROTO_UDP) {
   21984:	79b3      	ldrb	r3, [r6, #6]
   21986:	2b11      	cmp	r3, #17
   21988:	f000 8288 	beq.w	21e9c <net_6lo_compress+0x73c>
	compressed = NET_IPV6H_LEN;
   2198c:	2628      	movs	r6, #40	; 0x28
	net_buf_add(frag, offset);
   2198e:	f108 0a08 	add.w	sl, r8, #8
   21992:	4649      	mov	r1, r9
   21994:	4650      	mov	r0, sl
   21996:	f7f8 fc01 	bl	1a19c <net_buf_simple_add>
	memcpy(&IPHC[offset], pkt->frags->data + compressed,
   2199a:	f8d8 0008 	ldr.w	r0, [r8, #8]
   2199e:	68a3      	ldr	r3, [r4, #8]
   219a0:	6899      	ldr	r1, [r3, #8]
	       pkt->frags->len - compressed);
   219a2:	899a      	ldrh	r2, [r3, #12]
	memcpy(&IPHC[offset], pkt->frags->data + compressed,
   219a4:	1b92      	subs	r2, r2, r6
   219a6:	4431      	add	r1, r6
   219a8:	4448      	add	r0, r9
   219aa:	f7de fc89 	bl	2c0 <memcpy>
	net_buf_add(frag, pkt->frags->len - compressed);
   219ae:	68a3      	ldr	r3, [r4, #8]
   219b0:	8999      	ldrh	r1, [r3, #12]
   219b2:	1b89      	subs	r1, r1, r6
   219b4:	4650      	mov	r0, sl
   219b6:	f7f8 fbf1 	bl	1a19c <net_buf_simple_add>
	net_pkt_frag_del(pkt, NULL, pkt->frags);
   219ba:	68a2      	ldr	r2, [r4, #8]
   219bc:	2100      	movs	r1, #0
   219be:	4620      	mov	r0, r4
   219c0:	f7fb f928 	bl	1cc14 <net_pkt_frag_del>
	net_pkt_frag_insert(pkt, frag);
   219c4:	4641      	mov	r1, r8
   219c6:	4620      	mov	r0, r4
   219c8:	f7fb f942 	bl	1cc50 <net_pkt_frag_insert>
	net_pkt_compact(pkt);
   219cc:	4620      	mov	r0, r4
   219ce:	f7fb f9f9 	bl	1cdc4 <net_pkt_compact>
	if (fragment) {
   219d2:	2f00      	cmp	r7, #0
   219d4:	f000 8308 	beq.w	21fe8 <net_6lo_compress+0x888>
		return fragment(pkt, compressed - offset);
   219d8:	eba6 0109 	sub.w	r1, r6, r9
   219dc:	4620      	mov	r0, r4
   219de:	47b8      	blx	r7
   219e0:	e6e2      	b.n	217a8 <net_6lo_compress+0x48>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   219e2:	2300      	movs	r3, #0
   219e4:	e79d      	b.n	21922 <net_6lo_compress+0x1c2>
   219e6:	2300      	movs	r3, #0
   219e8:	e79b      	b.n	21922 <net_6lo_compress+0x1c2>
   219ea:	2301      	movs	r3, #1
   219ec:	e799      	b.n	21922 <net_6lo_compress+0x1c2>
		IPHC[1] |= NET_6LO_IPHC_SAC_1;
   219ee:	f8d8 2008 	ldr.w	r2, [r8, #8]
   219f2:	7853      	ldrb	r3, [r2, #1]
   219f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   219f8:	7053      	strb	r3, [r2, #1]
   219fa:	e7a5      	b.n	21948 <net_6lo_compress+0x1e8>
	return ((UNALIGNED_GET(&addr->s6_addr16[1]) == 0x00) &&
   219fc:	8973      	ldrh	r3, [r6, #10]
   219fe:	b91b      	cbnz	r3, 21a08 <net_6lo_compress+0x2a8>
		 (UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00));
   21a00:	68f3      	ldr	r3, [r6, #12]
	return ((UNALIGNED_GET(&addr->s6_addr16[1]) == 0x00) &&
   21a02:	b33b      	cbz	r3, 21a54 <net_6lo_compress+0x2f4>
   21a04:	2300      	movs	r3, #0
   21a06:	e000      	b.n	21a0a <net_6lo_compress+0x2aa>
   21a08:	2300      	movs	r3, #0
	if (net_is_ipv6_ll_addr(&ipv6->src) &&
   21a0a:	9301      	str	r3, [sp, #4]
   21a0c:	2b00      	cmp	r3, #0
   21a0e:	d08f      	beq.n	21930 <net_6lo_compress+0x1d0>
	return ((UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0xFF)) &&
   21a10:	6933      	ldr	r3, [r6, #16]
   21a12:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   21a16:	d01f      	beq.n	21a58 <net_6lo_compress+0x2f8>
   21a18:	2300      	movs	r3, #0
		if (net_6lo_addr_16_bit_compressible(&ipv6->src)) {
   21a1a:	469a      	mov	sl, r3
   21a1c:	bb1b      	cbnz	r3, 21a66 <net_6lo_compress+0x306>
			if (!net_pkt_ll_src(pkt)) {
   21a1e:	f114 0320 	adds.w	r3, r4, #32
   21a22:	f000 80bf 	beq.w	21ba4 <net_6lo_compress+0x444>
	if (!addr || !lladdr) {
   21a26:	f116 0b08 	adds.w	fp, r6, #8
   21a2a:	d008      	beq.n	21a3e <net_6lo_compress+0x2de>
   21a2c:	b13b      	cbz	r3, 21a3e <net_6lo_compress+0x2de>
	switch (lladdr->len) {
   21a2e:	791a      	ldrb	r2, [r3, #4]
   21a30:	2a06      	cmp	r2, #6
   21a32:	d03e      	beq.n	21ab2 <net_6lo_compress+0x352>
   21a34:	2a08      	cmp	r2, #8
   21a36:	f000 808c 	beq.w	21b52 <net_6lo_compress+0x3f2>
   21a3a:	2a02      	cmp	r2, #2
   21a3c:	d026      	beq.n	21a8c <net_6lo_compress+0x32c>
			if (net_ipv6_addr_based_on_ll(&ipv6->src,
   21a3e:	f1ba 0f00 	cmp.w	sl, #0
   21a42:	f000 809c 	beq.w	21b7e <net_6lo_compress+0x41e>
				IPHC[1] |= NET_6LO_IPHC_SAM_11;
   21a46:	f8d8 2008 	ldr.w	r2, [r8, #8]
   21a4a:	7853      	ldrb	r3, [r2, #1]
   21a4c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
   21a50:	7053      	strb	r3, [r2, #1]
   21a52:	e779      	b.n	21948 <net_6lo_compress+0x1e8>
	return ((UNALIGNED_GET(&addr->s6_addr16[1]) == 0x00) &&
   21a54:	2301      	movs	r3, #1
   21a56:	e7d8      	b.n	21a0a <net_6lo_compress+0x2aa>
		 (UNALIGNED_GET(&addr->s6_addr16[6]) == htons(0xFE00)));
   21a58:	8ab3      	ldrh	r3, [r6, #20]
	return ((UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0xFF)) &&
   21a5a:	2bfe      	cmp	r3, #254	; 0xfe
   21a5c:	d001      	beq.n	21a62 <net_6lo_compress+0x302>
   21a5e:	2300      	movs	r3, #0
   21a60:	e7db      	b.n	21a1a <net_6lo_compress+0x2ba>
   21a62:	2301      	movs	r3, #1
   21a64:	e7d9      	b.n	21a1a <net_6lo_compress+0x2ba>
			IPHC[1] |= NET_6LO_IPHC_SAM_10;
   21a66:	f8d8 2008 	ldr.w	r2, [r8, #8]
   21a6a:	7853      	ldrb	r3, [r2, #1]
   21a6c:	f043 0320 	orr.w	r3, r3, #32
   21a70:	7053      	strb	r3, [r2, #1]
			memcpy(&IPHC[offset], &ipv6->src.s6_addr[14], 2);
   21a72:	f8d8 0008 	ldr.w	r0, [r8, #8]
   21a76:	2202      	movs	r2, #2
   21a78:	f106 0116 	add.w	r1, r6, #22
   21a7c:	4448      	add	r0, r9
   21a7e:	f7de fc1f 	bl	2c0 <memcpy>
			offset += 2;
   21a82:	f109 0902 	add.w	r9, r9, #2
   21a86:	fa5f f989 	uxtb.w	r9, r9
   21a8a:	e75d      	b.n	21948 <net_6lo_compress+0x1e8>
		if (!memcmp(&addr->s6_addr[14], lladdr->addr, lladdr->len) &&
   21a8c:	6a21      	ldr	r1, [r4, #32]
   21a8e:	f10b 000e 	add.w	r0, fp, #14
   21a92:	f008 ff63 	bl	2a95c <memcmp>
   21a96:	2800      	cmp	r0, #0
   21a98:	d1d1      	bne.n	21a3e <net_6lo_compress+0x2de>
		    addr->s6_addr[10] == 0 &&
   21a9a:	f8db 3008 	ldr.w	r3, [fp, #8]
   21a9e:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   21aa2:	d1cc      	bne.n	21a3e <net_6lo_compress+0x2de>
		    addr->s6_addr[12] == 0xfe) {
   21aa4:	f89b 300c 	ldrb.w	r3, [fp, #12]
		    addr->s6_addr[11] == 0xff &&
   21aa8:	2bfe      	cmp	r3, #254	; 0xfe
   21aaa:	d1c8      	bne.n	21a3e <net_6lo_compress+0x2de>
			return true;
   21aac:	f8dd a004 	ldr.w	sl, [sp, #4]
   21ab0:	e7c5      	b.n	21a3e <net_6lo_compress+0x2de>
		if (lladdr->type == NET_LINK_ETHERNET) {
   21ab2:	795b      	ldrb	r3, [r3, #5]
   21ab4:	2b03      	cmp	r3, #3
   21ab6:	d026      	beq.n	21b06 <net_6lo_compress+0x3a6>
		} else if (lladdr->type == NET_LINK_BLUETOOTH) {
   21ab8:	2b02      	cmp	r3, #2
   21aba:	d1c0      	bne.n	21a3e <net_6lo_compress+0x2de>
			if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1], 2) &&
   21abc:	6a21      	ldr	r1, [r4, #32]
   21abe:	2202      	movs	r2, #2
   21ac0:	3101      	adds	r1, #1
   21ac2:	f10b 0009 	add.w	r0, fp, #9
   21ac6:	f008 ff49 	bl	2a95c <memcmp>
   21aca:	2800      	cmp	r0, #0
   21acc:	d1b7      	bne.n	21a3e <net_6lo_compress+0x2de>
			    !memcmp(&addr->s6_addr[13], &lladdr->addr[3], 3) &&
   21ace:	6a21      	ldr	r1, [r4, #32]
   21ad0:	2203      	movs	r2, #3
   21ad2:	4411      	add	r1, r2
   21ad4:	f10b 000d 	add.w	r0, fp, #13
   21ad8:	f008 ff40 	bl	2a95c <memcmp>
			if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1], 2) &&
   21adc:	2800      	cmp	r0, #0
   21ade:	d1ae      	bne.n	21a3e <net_6lo_compress+0x2de>
			    addr->s6_addr[11] == 0xff &&
   21ae0:	f89b 300b 	ldrb.w	r3, [fp, #11]
			    !memcmp(&addr->s6_addr[13], &lladdr->addr[3], 3) &&
   21ae4:	2bff      	cmp	r3, #255	; 0xff
   21ae6:	d1aa      	bne.n	21a3e <net_6lo_compress+0x2de>
			    addr->s6_addr[12] == 0xfe
   21ae8:	f89b 300c 	ldrb.w	r3, [fp, #12]
			    addr->s6_addr[11] == 0xff &&
   21aec:	2bfe      	cmp	r3, #254	; 0xfe
   21aee:	d1a6      	bne.n	21a3e <net_6lo_compress+0x2de>
			    && (addr->s6_addr[8] ^ 0x02) == lladdr->addr[0]
   21af0:	f89b 3008 	ldrb.w	r3, [fp, #8]
   21af4:	f083 0302 	eor.w	r3, r3, #2
   21af8:	6a22      	ldr	r2, [r4, #32]
   21afa:	7812      	ldrb	r2, [r2, #0]
   21afc:	4293      	cmp	r3, r2
   21afe:	d19e      	bne.n	21a3e <net_6lo_compress+0x2de>
				return true;
   21b00:	f8dd a004 	ldr.w	sl, [sp, #4]
   21b04:	e79b      	b.n	21a3e <net_6lo_compress+0x2de>
			if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1], 2) &&
   21b06:	6a21      	ldr	r1, [r4, #32]
   21b08:	2202      	movs	r2, #2
   21b0a:	3101      	adds	r1, #1
   21b0c:	f10b 0009 	add.w	r0, fp, #9
   21b10:	f008 ff24 	bl	2a95c <memcmp>
   21b14:	2800      	cmp	r0, #0
   21b16:	d192      	bne.n	21a3e <net_6lo_compress+0x2de>
			    !memcmp(&addr->s6_addr[13], &lladdr->addr[3], 3) &&
   21b18:	6a21      	ldr	r1, [r4, #32]
   21b1a:	2203      	movs	r2, #3
   21b1c:	4411      	add	r1, r2
   21b1e:	f10b 000d 	add.w	r0, fp, #13
   21b22:	f008 ff1b 	bl	2a95c <memcmp>
			if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1], 2) &&
   21b26:	2800      	cmp	r0, #0
   21b28:	d189      	bne.n	21a3e <net_6lo_compress+0x2de>
			    addr->s6_addr[11] == 0xff &&
   21b2a:	f89b 300b 	ldrb.w	r3, [fp, #11]
			    !memcmp(&addr->s6_addr[13], &lladdr->addr[3], 3) &&
   21b2e:	2bff      	cmp	r3, #255	; 0xff
   21b30:	d185      	bne.n	21a3e <net_6lo_compress+0x2de>
			    addr->s6_addr[12] == 0xfe &&
   21b32:	f89b 300c 	ldrb.w	r3, [fp, #12]
			    addr->s6_addr[11] == 0xff &&
   21b36:	2bfe      	cmp	r3, #254	; 0xfe
   21b38:	d181      	bne.n	21a3e <net_6lo_compress+0x2de>
			    (addr->s6_addr[8] ^ 0x02) == lladdr->addr[0]) {
   21b3a:	f89b 3008 	ldrb.w	r3, [fp, #8]
   21b3e:	f083 0302 	eor.w	r3, r3, #2
   21b42:	6a22      	ldr	r2, [r4, #32]
   21b44:	7812      	ldrb	r2, [r2, #0]
			    addr->s6_addr[12] == 0xfe &&
   21b46:	4293      	cmp	r3, r2
   21b48:	f47f af79 	bne.w	21a3e <net_6lo_compress+0x2de>
				return true;
   21b4c:	f8dd a004 	ldr.w	sl, [sp, #4]
   21b50:	e775      	b.n	21a3e <net_6lo_compress+0x2de>
		if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1],
   21b52:	6a21      	ldr	r1, [r4, #32]
   21b54:	3a01      	subs	r2, #1
   21b56:	3101      	adds	r1, #1
   21b58:	f10b 0009 	add.w	r0, fp, #9
   21b5c:	f008 fefe 	bl	2a95c <memcmp>
   21b60:	2800      	cmp	r0, #0
   21b62:	f47f af6c 	bne.w	21a3e <net_6lo_compress+0x2de>
		    (addr->s6_addr[8] ^ 0x02) == lladdr->addr[0]) {
   21b66:	f89b 3008 	ldrb.w	r3, [fp, #8]
   21b6a:	f083 0302 	eor.w	r3, r3, #2
   21b6e:	6a22      	ldr	r2, [r4, #32]
   21b70:	7812      	ldrb	r2, [r2, #0]
			    lladdr->len - 1) &&
   21b72:	4293      	cmp	r3, r2
   21b74:	f47f af63 	bne.w	21a3e <net_6lo_compress+0x2de>
			return true;
   21b78:	f8dd a004 	ldr.w	sl, [sp, #4]
   21b7c:	e75f      	b.n	21a3e <net_6lo_compress+0x2de>
				IPHC[1] |= NET_6LO_IPHC_SAM_01;
   21b7e:	f8d8 2008 	ldr.w	r2, [r8, #8]
   21b82:	7853      	ldrb	r3, [r2, #1]
   21b84:	f043 0310 	orr.w	r3, r3, #16
   21b88:	7053      	strb	r3, [r2, #1]
				memcpy(&IPHC[offset], &ipv6->src.s6_addr[8], 8);
   21b8a:	f8d8 0008 	ldr.w	r0, [r8, #8]
   21b8e:	2208      	movs	r2, #8
   21b90:	f106 0110 	add.w	r1, r6, #16
   21b94:	4448      	add	r0, r9
   21b96:	f7de fb93 	bl	2c0 <memcpy>
				offset += 8;
   21b9a:	f109 0908 	add.w	r9, r9, #8
   21b9e:	fa5f f989 	uxtb.w	r9, r9
   21ba2:	e6d1      	b.n	21948 <net_6lo_compress+0x1e8>
				return 0;
   21ba4:	f04f 0900 	mov.w	r9, #0
   21ba8:	e6ce      	b.n	21948 <net_6lo_compress+0x1e8>
		net_pkt_frag_unref(frag);
   21baa:	4640      	mov	r0, r8
   21bac:	f7fb f813 	bl	1cbd6 <net_pkt_frag_unref>
		return false;
   21bb0:	2000      	movs	r0, #0
   21bb2:	e5f9      	b.n	217a8 <net_6lo_compress+0x48>
	IPHC[1] |= NET_6LO_IPHC_M_1;
   21bb4:	f8d8 2008 	ldr.w	r2, [r8, #8]
   21bb8:	7853      	ldrb	r3, [r2, #1]
   21bba:	f043 0308 	orr.w	r3, r3, #8
   21bbe:	7053      	strb	r3, [r2, #1]
	return ((addr->s6_addr[1] == 0x02) &&
   21bc0:	7e73      	ldrb	r3, [r6, #25]
		 (UNALIGNED_GET(&addr->s6_addr32[2]) == 0x00) &&
   21bc2:	2b02      	cmp	r3, #2
   21bc4:	d00a      	beq.n	21bdc <net_6lo_compress+0x47c>
   21bc6:	2300      	movs	r3, #0
	if (net_6lo_maddr_8_bit_compressible(&ipv6->dst)) {
   21bc8:	b9db      	cbnz	r3, 21c02 <net_6lo_compress+0x4a2>
	return ((UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00) &&
   21bca:	69f3      	ldr	r3, [r6, #28]
		 (UNALIGNED_GET(&addr->s6_addr32[2]) == 0x00) &&
   21bcc:	bb63      	cbnz	r3, 21c28 <net_6lo_compress+0x4c8>
   21bce:	6a32      	ldr	r2, [r6, #32]
	return ((UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00) &&
   21bd0:	bba2      	cbnz	r2, 21c3c <net_6lo_compress+0x4dc>
		 (addr->s6_addr[12] == 0x00));
   21bd2:	f896 2024 	ldrb.w	r2, [r6, #36]	; 0x24
		 (UNALIGNED_GET(&addr->s6_addr32[2]) == 0x00) &&
   21bd6:	b39a      	cbz	r2, 21c40 <net_6lo_compress+0x4e0>
   21bd8:	2200      	movs	r2, #0
   21bda:	e026      	b.n	21c2a <net_6lo_compress+0x4ca>
		 (UNALIGNED_GET(&addr->s6_addr16[1]) == 0x00) &&
   21bdc:	8b73      	ldrh	r3, [r6, #26]
	return ((addr->s6_addr[1] == 0x02) &&
   21bde:	b943      	cbnz	r3, 21bf2 <net_6lo_compress+0x492>
		 (UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00) &&
   21be0:	69f3      	ldr	r3, [r6, #28]
		 (UNALIGNED_GET(&addr->s6_addr16[1]) == 0x00) &&
   21be2:	b943      	cbnz	r3, 21bf6 <net_6lo_compress+0x496>
		 (UNALIGNED_GET(&addr->s6_addr32[2]) == 0x00) &&
   21be4:	6a33      	ldr	r3, [r6, #32]
		 (UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00) &&
   21be6:	b943      	cbnz	r3, 21bfa <net_6lo_compress+0x49a>
		 (addr->s6_addr[14] == 0x00));
   21be8:	f896 3026 	ldrb.w	r3, [r6, #38]	; 0x26
		 (UNALIGNED_GET(&addr->s6_addr32[2]) == 0x00) &&
   21bec:	b13b      	cbz	r3, 21bfe <net_6lo_compress+0x49e>
   21bee:	2300      	movs	r3, #0
   21bf0:	e7ea      	b.n	21bc8 <net_6lo_compress+0x468>
   21bf2:	2300      	movs	r3, #0
   21bf4:	e7e8      	b.n	21bc8 <net_6lo_compress+0x468>
   21bf6:	2300      	movs	r3, #0
   21bf8:	e7e6      	b.n	21bc8 <net_6lo_compress+0x468>
   21bfa:	2300      	movs	r3, #0
   21bfc:	e7e4      	b.n	21bc8 <net_6lo_compress+0x468>
   21bfe:	2301      	movs	r3, #1
   21c00:	e7e2      	b.n	21bc8 <net_6lo_compress+0x468>
		IPHC[1] |= NET_6LO_IPHC_DAM_11;
   21c02:	f8d8 2008 	ldr.w	r2, [r8, #8]
   21c06:	7853      	ldrb	r3, [r2, #1]
   21c08:	f043 0303 	orr.w	r3, r3, #3
   21c0c:	7053      	strb	r3, [r2, #1]
		memcpy(&IPHC[offset], &ipv6->dst.s6_addr[15], 1);
   21c0e:	f8d8 0008 	ldr.w	r0, [r8, #8]
   21c12:	2201      	movs	r2, #1
   21c14:	f106 0127 	add.w	r1, r6, #39	; 0x27
   21c18:	4448      	add	r0, r9
   21c1a:	f7de fb51 	bl	2c0 <memcpy>
		offset++;
   21c1e:	f109 0901 	add.w	r9, r9, #1
   21c22:	fa5f f989 	uxtb.w	r9, r9
   21c26:	e6a9      	b.n	2197c <net_6lo_compress+0x21c>
		 (UNALIGNED_GET(&addr->s6_addr32[2]) == 0x00) &&
   21c28:	2200      	movs	r2, #0
	} else if (net_6lo_maddr_32_bit_compressible(&ipv6->dst)) {
   21c2a:	b95a      	cbnz	r2, 21c44 <net_6lo_compress+0x4e4>
		 (UNALIGNED_GET(&addr->s6_addr16[4]) == 0x00) &&
   21c2c:	bb43      	cbnz	r3, 21c80 <net_6lo_compress+0x520>
   21c2e:	8c33      	ldrh	r3, [r6, #32]
	return ((UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00) &&
   21c30:	bbab      	cbnz	r3, 21c9e <net_6lo_compress+0x53e>
		 (addr->s6_addr[10] == 0x00));
   21c32:	f896 3022 	ldrb.w	r3, [r6, #34]	; 0x22
		 (UNALIGNED_GET(&addr->s6_addr16[4]) == 0x00) &&
   21c36:	b3a3      	cbz	r3, 21ca2 <net_6lo_compress+0x542>
   21c38:	2300      	movs	r3, #0
   21c3a:	e022      	b.n	21c82 <net_6lo_compress+0x522>
		 (UNALIGNED_GET(&addr->s6_addr32[2]) == 0x00) &&
   21c3c:	2200      	movs	r2, #0
   21c3e:	e7f4      	b.n	21c2a <net_6lo_compress+0x4ca>
   21c40:	2201      	movs	r2, #1
   21c42:	e7f2      	b.n	21c2a <net_6lo_compress+0x4ca>
		IPHC[1] |= NET_6LO_IPHC_DAM_10;
   21c44:	f8d8 2008 	ldr.w	r2, [r8, #8]
   21c48:	7853      	ldrb	r3, [r2, #1]
   21c4a:	f043 0302 	orr.w	r3, r3, #2
   21c4e:	7053      	strb	r3, [r2, #1]
		memcpy(&IPHC[offset], &ipv6->dst.s6_addr[1], 1);
   21c50:	f8d8 0008 	ldr.w	r0, [r8, #8]
   21c54:	2201      	movs	r2, #1
   21c56:	f106 0119 	add.w	r1, r6, #25
   21c5a:	4448      	add	r0, r9
   21c5c:	f7de fb30 	bl	2c0 <memcpy>
		offset++;
   21c60:	f109 0001 	add.w	r0, r9, #1
		memcpy(&IPHC[offset], &ipv6->dst.s6_addr[13], 3);
   21c64:	f8d8 3008 	ldr.w	r3, [r8, #8]
   21c68:	2203      	movs	r2, #3
   21c6a:	f106 0125 	add.w	r1, r6, #37	; 0x25
   21c6e:	fa53 f080 	uxtab	r0, r3, r0
   21c72:	f7de fb25 	bl	2c0 <memcpy>
		offset += 3;
   21c76:	f109 0904 	add.w	r9, r9, #4
   21c7a:	fa5f f989 	uxtb.w	r9, r9
   21c7e:	e67d      	b.n	2197c <net_6lo_compress+0x21c>
		 (UNALIGNED_GET(&addr->s6_addr16[4]) == 0x00) &&
   21c80:	2300      	movs	r3, #0
	} else if (net_6lo_maddr_48_bit_compressible(&ipv6->dst)) {
   21c82:	b983      	cbnz	r3, 21ca6 <net_6lo_compress+0x546>
		memcpy(&IPHC[offset], &ipv6->dst.s6_addr[0], 16);
   21c84:	f8d8 0008 	ldr.w	r0, [r8, #8]
   21c88:	2210      	movs	r2, #16
   21c8a:	f106 0118 	add.w	r1, r6, #24
   21c8e:	4448      	add	r0, r9
   21c90:	f7de fb16 	bl	2c0 <memcpy>
		offset += 16;
   21c94:	f109 0910 	add.w	r9, r9, #16
   21c98:	fa5f f989 	uxtb.w	r9, r9
   21c9c:	e66e      	b.n	2197c <net_6lo_compress+0x21c>
		 (UNALIGNED_GET(&addr->s6_addr16[4]) == 0x00) &&
   21c9e:	2300      	movs	r3, #0
   21ca0:	e7ef      	b.n	21c82 <net_6lo_compress+0x522>
   21ca2:	2301      	movs	r3, #1
   21ca4:	e7ed      	b.n	21c82 <net_6lo_compress+0x522>
		IPHC[1] |= NET_6LO_IPHC_DAM_01;
   21ca6:	f8d8 2008 	ldr.w	r2, [r8, #8]
   21caa:	7853      	ldrb	r3, [r2, #1]
   21cac:	f043 0301 	orr.w	r3, r3, #1
   21cb0:	7053      	strb	r3, [r2, #1]
		memcpy(&IPHC[offset], &ipv6->dst.s6_addr[1], 1);
   21cb2:	f8d8 0008 	ldr.w	r0, [r8, #8]
   21cb6:	2201      	movs	r2, #1
   21cb8:	f106 0119 	add.w	r1, r6, #25
   21cbc:	4448      	add	r0, r9
   21cbe:	f7de faff 	bl	2c0 <memcpy>
		offset++;
   21cc2:	f109 0001 	add.w	r0, r9, #1
		memcpy(&IPHC[offset], &ipv6->dst.s6_addr[11], 5);
   21cc6:	f8d8 3008 	ldr.w	r3, [r8, #8]
   21cca:	2205      	movs	r2, #5
   21ccc:	f106 0123 	add.w	r1, r6, #35	; 0x23
   21cd0:	fa53 f080 	uxtab	r0, r3, r0
   21cd4:	f7de faf4 	bl	2c0 <memcpy>
		offset += 5;
   21cd8:	f109 0906 	add.w	r9, r9, #6
   21cdc:	fa5f f989 	uxtb.w	r9, r9
   21ce0:	e64c      	b.n	2197c <net_6lo_compress+0x21c>
	return ((UNALIGNED_GET(&addr->s6_addr16[1]) == 0x00) &&
   21ce2:	8b73      	ldrh	r3, [r6, #26]
   21ce4:	b91b      	cbnz	r3, 21cee <net_6lo_compress+0x58e>
		 (UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00));
   21ce6:	69f3      	ldr	r3, [r6, #28]
	return ((UNALIGNED_GET(&addr->s6_addr16[1]) == 0x00) &&
   21ce8:	b343      	cbz	r3, 21d3c <net_6lo_compress+0x5dc>
   21cea:	2300      	movs	r3, #0
   21cec:	e000      	b.n	21cf0 <net_6lo_compress+0x590>
   21cee:	2300      	movs	r3, #0
	if (net_is_ipv6_ll_addr(&ipv6->dst) &&
   21cf0:	9301      	str	r3, [sp, #4]
   21cf2:	2b00      	cmp	r3, #0
   21cf4:	f43f ae36 	beq.w	21964 <net_6lo_compress+0x204>
	return ((UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0xFF)) &&
   21cf8:	6a33      	ldr	r3, [r6, #32]
   21cfa:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   21cfe:	d01f      	beq.n	21d40 <net_6lo_compress+0x5e0>
   21d00:	2300      	movs	r3, #0
		if (net_6lo_addr_16_bit_compressible(&ipv6->dst)) {
   21d02:	469a      	mov	sl, r3
   21d04:	bb1b      	cbnz	r3, 21d4e <net_6lo_compress+0x5ee>
			if (!net_pkt_ll_dst(pkt)) {
   21d06:	f114 0328 	adds.w	r3, r4, #40	; 0x28
   21d0a:	f000 80bf 	beq.w	21e8c <net_6lo_compress+0x72c>
	if (!addr || !lladdr) {
   21d0e:	f116 0b18 	adds.w	fp, r6, #24
   21d12:	d008      	beq.n	21d26 <net_6lo_compress+0x5c6>
   21d14:	b13b      	cbz	r3, 21d26 <net_6lo_compress+0x5c6>
	switch (lladdr->len) {
   21d16:	791a      	ldrb	r2, [r3, #4]
   21d18:	2a06      	cmp	r2, #6
   21d1a:	d03e      	beq.n	21d9a <net_6lo_compress+0x63a>
   21d1c:	2a08      	cmp	r2, #8
   21d1e:	f000 808c 	beq.w	21e3a <net_6lo_compress+0x6da>
   21d22:	2a02      	cmp	r2, #2
   21d24:	d026      	beq.n	21d74 <net_6lo_compress+0x614>
			if (net_ipv6_addr_based_on_ll(&ipv6->dst,
   21d26:	f1ba 0f00 	cmp.w	sl, #0
   21d2a:	f000 809c 	beq.w	21e66 <net_6lo_compress+0x706>
				IPHC[1] |= NET_6LO_IPHC_DAM_11;
   21d2e:	f8d8 2008 	ldr.w	r2, [r8, #8]
   21d32:	7853      	ldrb	r3, [r2, #1]
   21d34:	f043 0303 	orr.w	r3, r3, #3
   21d38:	7053      	strb	r3, [r2, #1]
   21d3a:	e61f      	b.n	2197c <net_6lo_compress+0x21c>
	return ((UNALIGNED_GET(&addr->s6_addr16[1]) == 0x00) &&
   21d3c:	2301      	movs	r3, #1
   21d3e:	e7d7      	b.n	21cf0 <net_6lo_compress+0x590>
		 (UNALIGNED_GET(&addr->s6_addr16[6]) == htons(0xFE00)));
   21d40:	8cb3      	ldrh	r3, [r6, #36]	; 0x24
	return ((UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0xFF)) &&
   21d42:	2bfe      	cmp	r3, #254	; 0xfe
   21d44:	d001      	beq.n	21d4a <net_6lo_compress+0x5ea>
   21d46:	2300      	movs	r3, #0
   21d48:	e7db      	b.n	21d02 <net_6lo_compress+0x5a2>
   21d4a:	2301      	movs	r3, #1
   21d4c:	e7d9      	b.n	21d02 <net_6lo_compress+0x5a2>
			IPHC[1] |= NET_6LO_IPHC_DAM_10;
   21d4e:	f8d8 2008 	ldr.w	r2, [r8, #8]
   21d52:	7853      	ldrb	r3, [r2, #1]
   21d54:	f043 0302 	orr.w	r3, r3, #2
   21d58:	7053      	strb	r3, [r2, #1]
			memcpy(&IPHC[offset], &ipv6->dst.s6_addr[14], 2);
   21d5a:	f8d8 0008 	ldr.w	r0, [r8, #8]
   21d5e:	2202      	movs	r2, #2
   21d60:	f106 0126 	add.w	r1, r6, #38	; 0x26
   21d64:	4448      	add	r0, r9
   21d66:	f7de faab 	bl	2c0 <memcpy>
			offset += 2;
   21d6a:	f109 0902 	add.w	r9, r9, #2
   21d6e:	fa5f f989 	uxtb.w	r9, r9
   21d72:	e603      	b.n	2197c <net_6lo_compress+0x21c>
		if (!memcmp(&addr->s6_addr[14], lladdr->addr, lladdr->len) &&
   21d74:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   21d76:	f10b 000e 	add.w	r0, fp, #14
   21d7a:	f008 fdef 	bl	2a95c <memcmp>
   21d7e:	2800      	cmp	r0, #0
   21d80:	d1d1      	bne.n	21d26 <net_6lo_compress+0x5c6>
		    addr->s6_addr[10] == 0 &&
   21d82:	f8db 3008 	ldr.w	r3, [fp, #8]
   21d86:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   21d8a:	d1cc      	bne.n	21d26 <net_6lo_compress+0x5c6>
		    addr->s6_addr[12] == 0xfe) {
   21d8c:	f89b 300c 	ldrb.w	r3, [fp, #12]
		    addr->s6_addr[11] == 0xff &&
   21d90:	2bfe      	cmp	r3, #254	; 0xfe
   21d92:	d1c8      	bne.n	21d26 <net_6lo_compress+0x5c6>
			return true;
   21d94:	f8dd a004 	ldr.w	sl, [sp, #4]
   21d98:	e7c5      	b.n	21d26 <net_6lo_compress+0x5c6>
		if (lladdr->type == NET_LINK_ETHERNET) {
   21d9a:	795b      	ldrb	r3, [r3, #5]
   21d9c:	2b03      	cmp	r3, #3
   21d9e:	d026      	beq.n	21dee <net_6lo_compress+0x68e>
		} else if (lladdr->type == NET_LINK_BLUETOOTH) {
   21da0:	2b02      	cmp	r3, #2
   21da2:	d1c0      	bne.n	21d26 <net_6lo_compress+0x5c6>
			if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1], 2) &&
   21da4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   21da6:	2202      	movs	r2, #2
   21da8:	3101      	adds	r1, #1
   21daa:	f10b 0009 	add.w	r0, fp, #9
   21dae:	f008 fdd5 	bl	2a95c <memcmp>
   21db2:	2800      	cmp	r0, #0
   21db4:	d1b7      	bne.n	21d26 <net_6lo_compress+0x5c6>
			    !memcmp(&addr->s6_addr[13], &lladdr->addr[3], 3) &&
   21db6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   21db8:	2203      	movs	r2, #3
   21dba:	4411      	add	r1, r2
   21dbc:	f10b 000d 	add.w	r0, fp, #13
   21dc0:	f008 fdcc 	bl	2a95c <memcmp>
			if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1], 2) &&
   21dc4:	2800      	cmp	r0, #0
   21dc6:	d1ae      	bne.n	21d26 <net_6lo_compress+0x5c6>
			    addr->s6_addr[11] == 0xff &&
   21dc8:	f89b 300b 	ldrb.w	r3, [fp, #11]
			    !memcmp(&addr->s6_addr[13], &lladdr->addr[3], 3) &&
   21dcc:	2bff      	cmp	r3, #255	; 0xff
   21dce:	d1aa      	bne.n	21d26 <net_6lo_compress+0x5c6>
			    addr->s6_addr[12] == 0xfe
   21dd0:	f89b 300c 	ldrb.w	r3, [fp, #12]
			    addr->s6_addr[11] == 0xff &&
   21dd4:	2bfe      	cmp	r3, #254	; 0xfe
   21dd6:	d1a6      	bne.n	21d26 <net_6lo_compress+0x5c6>
			    && (addr->s6_addr[8] ^ 0x02) == lladdr->addr[0]
   21dd8:	f89b 3008 	ldrb.w	r3, [fp, #8]
   21ddc:	f083 0302 	eor.w	r3, r3, #2
   21de0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   21de2:	7812      	ldrb	r2, [r2, #0]
   21de4:	4293      	cmp	r3, r2
   21de6:	d19e      	bne.n	21d26 <net_6lo_compress+0x5c6>
				return true;
   21de8:	f8dd a004 	ldr.w	sl, [sp, #4]
   21dec:	e79b      	b.n	21d26 <net_6lo_compress+0x5c6>
			if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1], 2) &&
   21dee:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   21df0:	2202      	movs	r2, #2
   21df2:	3101      	adds	r1, #1
   21df4:	f10b 0009 	add.w	r0, fp, #9
   21df8:	f008 fdb0 	bl	2a95c <memcmp>
   21dfc:	2800      	cmp	r0, #0
   21dfe:	d192      	bne.n	21d26 <net_6lo_compress+0x5c6>
			    !memcmp(&addr->s6_addr[13], &lladdr->addr[3], 3) &&
   21e00:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   21e02:	2203      	movs	r2, #3
   21e04:	4411      	add	r1, r2
   21e06:	f10b 000d 	add.w	r0, fp, #13
   21e0a:	f008 fda7 	bl	2a95c <memcmp>
			if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1], 2) &&
   21e0e:	2800      	cmp	r0, #0
   21e10:	d189      	bne.n	21d26 <net_6lo_compress+0x5c6>
			    addr->s6_addr[11] == 0xff &&
   21e12:	f89b 300b 	ldrb.w	r3, [fp, #11]
			    !memcmp(&addr->s6_addr[13], &lladdr->addr[3], 3) &&
   21e16:	2bff      	cmp	r3, #255	; 0xff
   21e18:	d185      	bne.n	21d26 <net_6lo_compress+0x5c6>
			    addr->s6_addr[12] == 0xfe &&
   21e1a:	f89b 300c 	ldrb.w	r3, [fp, #12]
			    addr->s6_addr[11] == 0xff &&
   21e1e:	2bfe      	cmp	r3, #254	; 0xfe
   21e20:	d181      	bne.n	21d26 <net_6lo_compress+0x5c6>
			    (addr->s6_addr[8] ^ 0x02) == lladdr->addr[0]) {
   21e22:	f89b 3008 	ldrb.w	r3, [fp, #8]
   21e26:	f083 0302 	eor.w	r3, r3, #2
   21e2a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   21e2c:	7812      	ldrb	r2, [r2, #0]
			    addr->s6_addr[12] == 0xfe &&
   21e2e:	4293      	cmp	r3, r2
   21e30:	f47f af79 	bne.w	21d26 <net_6lo_compress+0x5c6>
				return true;
   21e34:	f8dd a004 	ldr.w	sl, [sp, #4]
   21e38:	e775      	b.n	21d26 <net_6lo_compress+0x5c6>
		if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1],
   21e3a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   21e3c:	3a01      	subs	r2, #1
   21e3e:	3101      	adds	r1, #1
   21e40:	f10b 0009 	add.w	r0, fp, #9
   21e44:	f008 fd8a 	bl	2a95c <memcmp>
   21e48:	2800      	cmp	r0, #0
   21e4a:	f47f af6c 	bne.w	21d26 <net_6lo_compress+0x5c6>
		    (addr->s6_addr[8] ^ 0x02) == lladdr->addr[0]) {
   21e4e:	f89b 3008 	ldrb.w	r3, [fp, #8]
   21e52:	f083 0302 	eor.w	r3, r3, #2
   21e56:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   21e58:	7812      	ldrb	r2, [r2, #0]
			    lladdr->len - 1) &&
   21e5a:	4293      	cmp	r3, r2
   21e5c:	f47f af63 	bne.w	21d26 <net_6lo_compress+0x5c6>
			return true;
   21e60:	f8dd a004 	ldr.w	sl, [sp, #4]
   21e64:	e75f      	b.n	21d26 <net_6lo_compress+0x5c6>
				IPHC[1] |= NET_6LO_IPHC_DAM_01;
   21e66:	f8d8 2008 	ldr.w	r2, [r8, #8]
   21e6a:	7853      	ldrb	r3, [r2, #1]
   21e6c:	f043 0301 	orr.w	r3, r3, #1
   21e70:	7053      	strb	r3, [r2, #1]
				memcpy(&IPHC[offset], &ipv6->dst.s6_addr[8], 8);
   21e72:	f8d8 0008 	ldr.w	r0, [r8, #8]
   21e76:	2208      	movs	r2, #8
   21e78:	f106 0120 	add.w	r1, r6, #32
   21e7c:	4448      	add	r0, r9
   21e7e:	f7de fa1f 	bl	2c0 <memcpy>
				offset += 8;
   21e82:	f109 0908 	add.w	r9, r9, #8
   21e86:	fa5f f989 	uxtb.w	r9, r9
   21e8a:	e577      	b.n	2197c <net_6lo_compress+0x21c>
				return 0;
   21e8c:	f04f 0900 	mov.w	r9, #0
   21e90:	e574      	b.n	2197c <net_6lo_compress+0x21c>
		net_pkt_frag_unref(frag);
   21e92:	4640      	mov	r0, r8
   21e94:	f7fa fe9f 	bl	1cbd6 <net_pkt_frag_unref>
		return false;
   21e98:	2000      	movs	r0, #0
   21e9a:	e485      	b.n	217a8 <net_6lo_compress+0x48>
		udp = net_udp_get_hdr(pkt, &hdr);
   21e9c:	a902      	add	r1, sp, #8
   21e9e:	4620      	mov	r0, r4
   21ea0:	f000 fc68 	bl	22774 <net_udp_get_hdr>
   21ea4:	4606      	mov	r6, r0
		IPHC[offset] = NET_6LO_NHC_UDP_BARE;
   21ea6:	f8d8 3008 	ldr.w	r3, [r8, #8]
   21eaa:	22f0      	movs	r2, #240	; 0xf0
   21eac:	f803 2009 	strb.w	r2, [r3, r9]
	if ((((htons(udp->src_port) >> 4) & 0xFFF) ==
   21eb0:	8802      	ldrh	r2, [r0, #0]
   21eb2:	0a13      	lsrs	r3, r2, #8
   21eb4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   21eb8:	b29b      	uxth	r3, r3
   21eba:	f640 720b 	movw	r2, #3851	; 0xf0b
   21ebe:	ebb2 1f13 	cmp.w	r2, r3, lsr #4
   21ec2:	d025      	beq.n	21f10 <net_6lo_compress+0x7b0>
	} else if (((htons(udp->dst_port) >> 8) & 0xFF) ==
   21ec4:	8872      	ldrh	r2, [r6, #2]
   21ec6:	b2d2      	uxtb	r2, r2
   21ec8:	2af0      	cmp	r2, #240	; 0xf0
   21eca:	d046      	beq.n	21f5a <net_6lo_compress+0x7fa>
	} else if (((htons(udp->src_port) >> 8) & 0xFF) ==
   21ecc:	0a1b      	lsrs	r3, r3, #8
   21ece:	2bf0      	cmp	r3, #240	; 0xf0
   21ed0:	d062      	beq.n	21f98 <net_6lo_compress+0x838>
		offset++;
   21ed2:	f109 0001 	add.w	r0, r9, #1
		memcpy(&IPHC[offset], &udp->src_port, 4);
   21ed6:	f8d8 3008 	ldr.w	r3, [r8, #8]
   21eda:	2204      	movs	r2, #4
   21edc:	4631      	mov	r1, r6
   21ede:	fa53 f080 	uxtab	r0, r3, r0
   21ee2:	f7de f9ed 	bl	2c0 <memcpy>
		offset += 4;
   21ee6:	f109 0905 	add.w	r9, r9, #5
   21eea:	fa5f f989 	uxtb.w	r9, r9
	memcpy(&IPHC[offset], &udp->chksum, 2);
   21eee:	f8d8 0008 	ldr.w	r0, [r8, #8]
   21ef2:	2202      	movs	r2, #2
   21ef4:	1db1      	adds	r1, r6, #6
   21ef6:	4448      	add	r0, r9
   21ef8:	f7de f9e2 	bl	2c0 <memcpy>
	offset += 2;
   21efc:	f109 0902 	add.w	r9, r9, #2
   21f00:	fa5f f989 	uxtb.w	r9, r9
		net_udp_set_hdr(pkt, udp);
   21f04:	4631      	mov	r1, r6
   21f06:	4620      	mov	r0, r4
   21f08:	f000 fc74 	bl	227f4 <net_udp_set_hdr>
		compressed += NET_UDPH_LEN;
   21f0c:	2630      	movs	r6, #48	; 0x30
   21f0e:	e53e      	b.n	2198e <net_6lo_compress+0x22e>
	    (((htons(udp->dst_port) >> 4) & 0xFFF) ==
   21f10:	8841      	ldrh	r1, [r0, #2]
   21f12:	0a0a      	lsrs	r2, r1, #8
   21f14:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   21f18:	f3c2 120b 	ubfx	r2, r2, #4, #12
	    NET_6LO_NHC_UDP_4_BIT_PORT) &&
   21f1c:	f640 710b 	movw	r1, #3851	; 0xf0b
   21f20:	428a      	cmp	r2, r1
   21f22:	d1cf      	bne.n	21ec4 <net_6lo_compress+0x764>
		IPHC[offset] |= NET_6LO_NHC_UDP_PORT_11;
   21f24:	f8d8 2008 	ldr.w	r2, [r8, #8]
   21f28:	f812 3009 	ldrb.w	r3, [r2, r9]
   21f2c:	f043 0303 	orr.w	r3, r3, #3
   21f30:	f802 3009 	strb.w	r3, [r2, r9]
		offset++;
   21f34:	f109 0101 	add.w	r1, r9, #1
   21f38:	b2c9      	uxtb	r1, r1
		tmp = (u8_t)(htons(udp->src_port));
   21f3a:	8803      	ldrh	r3, [r0, #0]
   21f3c:	0a1b      	lsrs	r3, r3, #8
		tmp = tmp << 4;
   21f3e:	011b      	lsls	r3, r3, #4
   21f40:	b2db      	uxtb	r3, r3
		tmp |= (((u8_t)(htons(udp->dst_port))) & 0x0F);
   21f42:	8842      	ldrh	r2, [r0, #2]
   21f44:	f3c2 2203 	ubfx	r2, r2, #8, #4
   21f48:	4313      	orrs	r3, r2
		IPHC[offset++] = tmp;
   21f4a:	f8d8 2008 	ldr.w	r2, [r8, #8]
   21f4e:	f109 0902 	add.w	r9, r9, #2
   21f52:	fa5f f989 	uxtb.w	r9, r9
   21f56:	5453      	strb	r3, [r2, r1]
   21f58:	e7c9      	b.n	21eee <net_6lo_compress+0x78e>
		IPHC[offset] |= NET_6LO_NHC_UDP_PORT_01;
   21f5a:	f8d8 2008 	ldr.w	r2, [r8, #8]
   21f5e:	f812 3009 	ldrb.w	r3, [r2, r9]
   21f62:	f043 0301 	orr.w	r3, r3, #1
   21f66:	f802 3009 	strb.w	r3, [r2, r9]
		offset++;
   21f6a:	f109 0001 	add.w	r0, r9, #1
		memcpy(&IPHC[offset], &udp->src_port, 2);
   21f6e:	f8d8 3008 	ldr.w	r3, [r8, #8]
   21f72:	2202      	movs	r2, #2
   21f74:	4631      	mov	r1, r6
   21f76:	fa53 f080 	uxtab	r0, r3, r0
   21f7a:	f7de f9a1 	bl	2c0 <memcpy>
		offset += 2;
   21f7e:	f109 0303 	add.w	r3, r9, #3
   21f82:	b2db      	uxtb	r3, r3
		IPHC[offset++] = (u8_t)(htons(udp->dst_port));
   21f84:	f8d8 1008 	ldr.w	r1, [r8, #8]
   21f88:	f109 0904 	add.w	r9, r9, #4
   21f8c:	fa5f f989 	uxtb.w	r9, r9
   21f90:	8872      	ldrh	r2, [r6, #2]
   21f92:	0a12      	lsrs	r2, r2, #8
   21f94:	54ca      	strb	r2, [r1, r3]
   21f96:	e7aa      	b.n	21eee <net_6lo_compress+0x78e>
		IPHC[offset] |= NET_6LO_NHC_UDP_PORT_10;
   21f98:	f8d8 2008 	ldr.w	r2, [r8, #8]
   21f9c:	f812 3009 	ldrb.w	r3, [r2, r9]
   21fa0:	f043 0302 	orr.w	r3, r3, #2
   21fa4:	f802 3009 	strb.w	r3, [r2, r9]
		offset++;
   21fa8:	f109 0301 	add.w	r3, r9, #1
   21fac:	fa5f fe83 	uxtb.w	lr, r3
		IPHC[offset++] = (u8_t)(htons(udp->src_port));
   21fb0:	f109 0002 	add.w	r0, r9, #2
   21fb4:	4631      	mov	r1, r6
   21fb6:	f831 2b02 	ldrh.w	r2, [r1], #2
   21fba:	0a12      	lsrs	r2, r2, #8
   21fbc:	f8d8 3008 	ldr.w	r3, [r8, #8]
   21fc0:	f803 200e 	strb.w	r2, [r3, lr]
		memcpy(&IPHC[offset], &udp->dst_port, 2);
   21fc4:	f8d8 3008 	ldr.w	r3, [r8, #8]
   21fc8:	2202      	movs	r2, #2
   21fca:	fa53 f080 	uxtab	r0, r3, r0
   21fce:	f7de f977 	bl	2c0 <memcpy>
		offset += 2;
   21fd2:	f109 0904 	add.w	r9, r9, #4
   21fd6:	fa5f f989 	uxtb.w	r9, r9
   21fda:	e788      	b.n	21eee <net_6lo_compress+0x78e>
		return false;
   21fdc:	2000      	movs	r0, #0
   21fde:	f7ff bbe3 	b.w	217a8 <net_6lo_compress+0x48>
		return false;
   21fe2:	2000      	movs	r0, #0
   21fe4:	f7ff bbe0 	b.w	217a8 <net_6lo_compress+0x48>
	return true;
   21fe8:	4628      	mov	r0, r5
		return compress_IPHC_header(pkt, fragment);
   21fea:	f7ff bbdd 	b.w	217a8 <net_6lo_compress+0x48>
		return false;
   21fee:	4628      	mov	r0, r5
   21ff0:	f7ff bbda 	b.w	217a8 <net_6lo_compress+0x48>
	return true;
   21ff4:	2001      	movs	r0, #1
		return compress_ipv6_header(pkt, fragment);
   21ff6:	f7ff bbd7 	b.w	217a8 <net_6lo_compress+0x48>

00021ffa <net_6lo_uncompress>:

bool net_6lo_uncompress(struct net_pkt *pkt)
{
   21ffa:	b510      	push	{r4, lr}
	NET_ASSERT(pkt && pkt->frags);

	if ((pkt->frags->data[0] & NET_6LO_DISPATCH_IPHC) ==
   21ffc:	6883      	ldr	r3, [r0, #8]
   21ffe:	689b      	ldr	r3, [r3, #8]
   22000:	781b      	ldrb	r3, [r3, #0]
   22002:	f003 0260 	and.w	r2, r3, #96	; 0x60
   22006:	2a60      	cmp	r2, #96	; 0x60
   22008:	d005      	beq.n	22016 <net_6lo_uncompress+0x1c>
	    NET_6LO_DISPATCH_IPHC) {
		/* Uncompress IPHC header */
		return uncompress_IPHC_header(pkt);

	} else if ((pkt->frags->data[0] & NET_6LO_DISPATCH_IPV6) ==
   2200a:	f003 0341 	and.w	r3, r3, #65	; 0x41
   2200e:	2b41      	cmp	r3, #65	; 0x41
   22010:	d004      	beq.n	2201c <net_6lo_uncompress+0x22>
		return uncompress_ipv6_header(pkt);
	}

	NET_DBG("pkt %p is not compressed", pkt);

	return true;
   22012:	2001      	movs	r0, #1
}
   22014:	bd10      	pop	{r4, pc}
		return uncompress_IPHC_header(pkt);
   22016:	f7ff f873 	bl	21100 <uncompress_IPHC_header>
   2201a:	bd10      	pop	{r4, pc}
	struct net_buf *frag = pkt->frags;
   2201c:	6884      	ldr	r4, [r0, #8]
	memmove(frag->data, frag->data + 1, frag->len - 1);
   2201e:	68a0      	ldr	r0, [r4, #8]
   22020:	89a2      	ldrh	r2, [r4, #12]
   22022:	3a01      	subs	r2, #1
   22024:	1c41      	adds	r1, r0, #1
   22026:	f008 fcc9 	bl	2a9bc <memmove>
	frag->len -= 1;
   2202a:	89a3      	ldrh	r3, [r4, #12]
   2202c:	3b01      	subs	r3, #1
   2202e:	81a3      	strh	r3, [r4, #12]
		return uncompress_ipv6_header(pkt);
   22030:	2001      	movs	r0, #1
   22032:	bd10      	pop	{r4, pc}

00022034 <net_route_entry_remove>:
{
   22034:	4770      	bx	lr

00022036 <net_route_entries_table_clear>:
{
   22036:	4770      	bx	lr

00022038 <nbr_nexthop_put>:

	return nbr;
}

static int nbr_nexthop_put(struct net_nbr *nbr)
{
   22038:	b508      	push	{r3, lr}
	NET_ASSERT(nbr);

	NET_DBG("[%d] nbr %p iface %p", nbr->idx, nbr, nbr->iface);

	net_nbr_unref(nbr);
   2203a:	f7fc fbd3 	bl	1e7e4 <net_nbr_unref>

	return 0;
}
   2203e:	2000      	movs	r0, #0
   22040:	bd08      	pop	{r3, pc}
	...

00022044 <net_route_get_nbr>:
{
   22044:	b430      	push	{r4, r5}
   22046:	4605      	mov	r5, r0
	for (i = 0; i < CONFIG_NET_MAX_ROUTES; i++) {
   22048:	2300      	movs	r3, #0
   2204a:	e000      	b.n	2204e <net_route_get_nbr+0xa>
   2204c:	3301      	adds	r3, #1
   2204e:	2b07      	cmp	r3, #7
   22050:	dc0b      	bgt.n	2206a <net_route_get_nbr+0x26>
	return &net_route_entries_pool[idx].nbr;
   22052:	4c07      	ldr	r4, [pc, #28]	; (22070 <net_route_get_nbr+0x2c>)
   22054:	00da      	lsls	r2, r3, #3
   22056:	1ad2      	subs	r2, r2, r3
   22058:	00d1      	lsls	r1, r2, #3
   2205a:	1860      	adds	r0, r4, r1
		if (!nbr->ref) {
   2205c:	5c62      	ldrb	r2, [r4, r1]
   2205e:	2a00      	cmp	r2, #0
   22060:	d0f4      	beq.n	2204c <net_route_get_nbr+0x8>
		if (nbr->data == (u8_t *)route) {
   22062:	68c2      	ldr	r2, [r0, #12]
   22064:	42aa      	cmp	r2, r5
   22066:	d1f1      	bne.n	2204c <net_route_get_nbr+0x8>
   22068:	e000      	b.n	2206c <net_route_get_nbr+0x28>
	return NULL;
   2206a:	2000      	movs	r0, #0
}
   2206c:	bc30      	pop	{r4, r5}
   2206e:	4770      	bx	lr
   22070:	2000c20c 	.word	0x2000c20c

00022074 <net_route_lookup>:
	sys_slist_prepend(&routes, &route->node);
}

struct net_route_entry *net_route_lookup(struct net_if *iface,
					 struct in6_addr *dst)
{
   22074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22078:	b083      	sub	sp, #12
   2207a:	4606      	mov	r6, r0
   2207c:	9101      	str	r1, [sp, #4]
	struct net_route_entry *route, *found = NULL;
	u8_t longest_match = 0;
	int i;

	for (i = 0; i < CONFIG_NET_MAX_ROUTES && longest_match < 128; i++) {
   2207e:	2400      	movs	r4, #0
	u8_t longest_match = 0;
   22080:	4625      	mov	r5, r4
	struct net_route_entry *route, *found = NULL;
   22082:	4627      	mov	r7, r4
	for (i = 0; i < CONFIG_NET_MAX_ROUTES && longest_match < 128; i++) {
   22084:	e00b      	b.n	2209e <net_route_lookup+0x2a>
	return (struct net_route_entry *)nbr->data;
   22086:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   2208a:	00da      	lsls	r2, r3, #3
   2208c:	4b3f      	ldr	r3, [pc, #252]	; (2218c <net_route_lookup+0x118>)
   2208e:	4413      	add	r3, r2
   22090:	f8d3 800c 	ldr.w	r8, [r3, #12]
			continue;
		}

		route = net_route_data(nbr);

		if (route->prefix_len >= longest_match &&
   22094:	f898 3020 	ldrb.w	r3, [r8, #32]
   22098:	429d      	cmp	r5, r3
   2209a:	d917      	bls.n	220cc <net_route_lookup+0x58>
	for (i = 0; i < CONFIG_NET_MAX_ROUTES && longest_match < 128; i++) {
   2209c:	3401      	adds	r4, #1
   2209e:	2c07      	cmp	r4, #7
   220a0:	dc46      	bgt.n	22130 <net_route_lookup+0xbc>
   220a2:	f015 0f80 	tst.w	r5, #128	; 0x80
   220a6:	d143      	bne.n	22130 <net_route_lookup+0xbc>
		if (!nbr->ref) {
   220a8:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
   220ac:	00d3      	lsls	r3, r2, #3
   220ae:	4a37      	ldr	r2, [pc, #220]	; (2218c <net_route_lookup+0x118>)
   220b0:	5cd3      	ldrb	r3, [r2, r3]
   220b2:	2b00      	cmp	r3, #0
   220b4:	d0f2      	beq.n	2209c <net_route_lookup+0x28>
		if (iface && nbr->iface != iface) {
   220b6:	2e00      	cmp	r6, #0
   220b8:	d0e5      	beq.n	22086 <net_route_lookup+0x12>
   220ba:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   220be:	00da      	lsls	r2, r3, #3
   220c0:	4b32      	ldr	r3, [pc, #200]	; (2218c <net_route_lookup+0x118>)
   220c2:	4413      	add	r3, r2
   220c4:	689b      	ldr	r3, [r3, #8]
   220c6:	429e      	cmp	r6, r3
   220c8:	d1e8      	bne.n	2209c <net_route_lookup+0x28>
   220ca:	e7dc      	b.n	22086 <net_route_lookup+0x12>
		    net_is_ipv6_prefix((u8_t *)dst,
				       (u8_t *)&route->addr,
   220cc:	f108 0910 	add.w	r9, r8, #16
	u8_t bits = 128 - length;
   220d0:	f1c3 0a80 	rsb	sl, r3, #128	; 0x80
	u8_t bytes = length / 8;
   220d4:	ea4f 0bd3 	mov.w	fp, r3, lsr #3
	u8_t remain = bits % 8;
   220d8:	f00a 0a07 	and.w	sl, sl, #7
	if (length > 128) {
   220dc:	2b80      	cmp	r3, #128	; 0x80
   220de:	d906      	bls.n	220ee <net_route_lookup+0x7a>
		return false;
   220e0:	2300      	movs	r3, #0
		if (route->prefix_len >= longest_match &&
   220e2:	2b00      	cmp	r3, #0
   220e4:	d0da      	beq.n	2209c <net_route_lookup+0x28>
				       route->prefix_len)) {
			found = route;
			longest_match = route->prefix_len;
   220e6:	f898 5020 	ldrb.w	r5, [r8, #32]
			found = route;
   220ea:	4647      	mov	r7, r8
   220ec:	e7d6      	b.n	2209c <net_route_lookup+0x28>
	if (memcmp(addr1, addr2, bytes)) {
   220ee:	465a      	mov	r2, fp
   220f0:	4649      	mov	r1, r9
   220f2:	9801      	ldr	r0, [sp, #4]
   220f4:	f008 fc32 	bl	2a95c <memcmp>
   220f8:	b9b0      	cbnz	r0, 22128 <net_route_lookup+0xb4>
	if (!remain) {
   220fa:	f1ba 0f00 	cmp.w	sl, #0
   220fe:	d015      	beq.n	2212c <net_route_lookup+0xb8>
	mask = ((0xff << (8 - remain)) ^ 0xff) << remain;
   22100:	f1ca 0208 	rsb	r2, sl, #8
   22104:	23ff      	movs	r3, #255	; 0xff
   22106:	4093      	lsls	r3, r2
   22108:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
   2210c:	fa03 fa0a 	lsl.w	sl, r3, sl
	return (addr1[bytes] & mask) == (addr2[bytes] & mask);
   22110:	9b01      	ldr	r3, [sp, #4]
   22112:	f813 300b 	ldrb.w	r3, [r3, fp]
   22116:	f819 200b 	ldrb.w	r2, [r9, fp]
   2211a:	4053      	eors	r3, r2
   2211c:	ea1a 0f03 	tst.w	sl, r3
   22120:	bf0c      	ite	eq
   22122:	2301      	moveq	r3, #1
   22124:	2300      	movne	r3, #0
   22126:	e7dc      	b.n	220e2 <net_route_lookup+0x6e>
		return false;
   22128:	2300      	movs	r3, #0
   2212a:	e7da      	b.n	220e2 <net_route_lookup+0x6e>
		return true;
   2212c:	2301      	movs	r3, #1
   2212e:	e7d8      	b.n	220e2 <net_route_lookup+0x6e>
		}
	}

	if (found) {
   22130:	b1c7      	cbz	r7, 22164 <net_route_lookup+0xf0>
	sys_slist_find_and_remove(&routes, &route->node);
   22132:	463a      	mov	r2, r7
	return list->head;
   22134:	4b16      	ldr	r3, [pc, #88]	; (22190 <net_route_lookup+0x11c>)
   22136:	681b      	ldr	r3, [r3, #0]
	sys_snode_t *prev = NULL;
   22138:	2100      	movs	r1, #0
	SYS_SLIST_FOR_EACH_NODE(list, test) {
   2213a:	b16b      	cbz	r3, 22158 <net_route_lookup+0xe4>
		if (test == node) {
   2213c:	429a      	cmp	r2, r3
   2213e:	d002      	beq.n	22146 <net_route_lookup+0xd2>
		prev = test;
   22140:	4619      	mov	r1, r3
	SYS_SLIST_FOR_EACH_NODE(list, test) {
   22142:	681b      	ldr	r3, [r3, #0]
   22144:	e7f9      	b.n	2213a <net_route_lookup+0xc6>
	if (!prev_node) {
   22146:	b189      	cbz	r1, 2216c <net_route_lookup+0xf8>
		prev_node->next = node->next;
   22148:	683b      	ldr	r3, [r7, #0]
   2214a:	600b      	str	r3, [r1, #0]
		if (list->tail == node) {
   2214c:	4b10      	ldr	r3, [pc, #64]	; (22190 <net_route_lookup+0x11c>)
   2214e:	685b      	ldr	r3, [r3, #4]
   22150:	429a      	cmp	r2, r3
   22152:	d014      	beq.n	2217e <net_route_lookup+0x10a>
	node->next = NULL;
   22154:	2300      	movs	r3, #0
   22156:	603b      	str	r3, [r7, #0]
	node->next = list->head;
   22158:	4b0d      	ldr	r3, [pc, #52]	; (22190 <net_route_lookup+0x11c>)
   2215a:	6819      	ldr	r1, [r3, #0]
   2215c:	6039      	str	r1, [r7, #0]
	list->head = node;
   2215e:	601a      	str	r2, [r3, #0]
	if (!list->tail) {
   22160:	685b      	ldr	r3, [r3, #4]
   22162:	b17b      	cbz	r3, 22184 <net_route_lookup+0x110>

		update_route_access(found);
	}

	return found;
}
   22164:	4638      	mov	r0, r7
   22166:	b003      	add	sp, #12
   22168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		list->head = node->next;
   2216c:	6839      	ldr	r1, [r7, #0]
   2216e:	4b08      	ldr	r3, [pc, #32]	; (22190 <net_route_lookup+0x11c>)
   22170:	6019      	str	r1, [r3, #0]
		if (list->tail == node) {
   22172:	685b      	ldr	r3, [r3, #4]
   22174:	429a      	cmp	r2, r3
   22176:	d1ed      	bne.n	22154 <net_route_lookup+0xe0>
			list->tail = list->head;
   22178:	4b05      	ldr	r3, [pc, #20]	; (22190 <net_route_lookup+0x11c>)
   2217a:	6059      	str	r1, [r3, #4]
   2217c:	e7ea      	b.n	22154 <net_route_lookup+0xe0>
			list->tail = prev_node;
   2217e:	4b04      	ldr	r3, [pc, #16]	; (22190 <net_route_lookup+0x11c>)
   22180:	6059      	str	r1, [r3, #4]
   22182:	e7e7      	b.n	22154 <net_route_lookup+0xe0>
		list->tail = list->head;
   22184:	4b02      	ldr	r3, [pc, #8]	; (22190 <net_route_lookup+0x11c>)
   22186:	605a      	str	r2, [r3, #4]
	return found;
   22188:	e7ec      	b.n	22164 <net_route_lookup+0xf0>
   2218a:	bf00      	nop
   2218c:	2000c20c 	.word	0x2000c20c
   22190:	20001e64 	.word	0x20001e64

00022194 <net_route_del>:
int net_route_del(struct net_route_entry *route)
{
	struct net_nbr *nbr;
	struct net_route_nexthop *nexthop_route;

	if (!route) {
   22194:	2800      	cmp	r0, #0
   22196:	d046      	beq.n	22226 <net_route_del+0x92>
{
   22198:	b538      	push	{r3, r4, r5, lr}
   2219a:	4604      	mov	r4, r0
		return -EINVAL;
	}

	sys_slist_find_and_remove(&routes, &route->node);
   2219c:	4601      	mov	r1, r0
	return list->head;
   2219e:	4b25      	ldr	r3, [pc, #148]	; (22234 <net_route_del+0xa0>)
   221a0:	681b      	ldr	r3, [r3, #0]
	sys_snode_t *prev = NULL;
   221a2:	2200      	movs	r2, #0
	SYS_SLIST_FOR_EACH_NODE(list, test) {
   221a4:	b16b      	cbz	r3, 221c2 <net_route_del+0x2e>
		if (test == node) {
   221a6:	4299      	cmp	r1, r3
   221a8:	d002      	beq.n	221b0 <net_route_del+0x1c>
		prev = test;
   221aa:	461a      	mov	r2, r3
	SYS_SLIST_FOR_EACH_NODE(list, test) {
   221ac:	681b      	ldr	r3, [r3, #0]
   221ae:	e7f9      	b.n	221a4 <net_route_del+0x10>
	if (!prev_node) {
   221b0:	b1aa      	cbz	r2, 221de <net_route_del+0x4a>
		prev_node->next = node->next;
   221b2:	6823      	ldr	r3, [r4, #0]
   221b4:	6013      	str	r3, [r2, #0]
		if (list->tail == node) {
   221b6:	4b1f      	ldr	r3, [pc, #124]	; (22234 <net_route_del+0xa0>)
   221b8:	685b      	ldr	r3, [r3, #4]
   221ba:	429c      	cmp	r4, r3
   221bc:	d018      	beq.n	221f0 <net_route_del+0x5c>
	node->next = NULL;
   221be:	2300      	movs	r3, #0
   221c0:	6023      	str	r3, [r4, #0]

	nbr = net_route_get_nbr(route);
   221c2:	4620      	mov	r0, r4
   221c4:	f7ff ff3e 	bl	22044 <net_route_get_nbr>
	if (!nbr) {
   221c8:	4605      	mov	r5, r0
   221ca:	2800      	cmp	r0, #0
   221cc:	d02e      	beq.n	2222c <net_route_del+0x98>
   221ce:	2300      	movs	r3, #0
   221d0:	461a      	mov	r2, r3
   221d2:	6881      	ldr	r1, [r0, #8]
   221d4:	4818      	ldr	r0, [pc, #96]	; (22238 <net_route_del+0xa4>)
   221d6:	f000 f977 	bl	224c8 <net_mgmt_event_notify_with_info>
	return list->head;
   221da:	6864      	ldr	r4, [r4, #4]
   221dc:	e011      	b.n	22202 <net_route_del+0x6e>
		list->head = node->next;
   221de:	6822      	ldr	r2, [r4, #0]
   221e0:	4b14      	ldr	r3, [pc, #80]	; (22234 <net_route_del+0xa0>)
   221e2:	601a      	str	r2, [r3, #0]
		if (list->tail == node) {
   221e4:	685b      	ldr	r3, [r3, #4]
   221e6:	429c      	cmp	r4, r3
   221e8:	d1e9      	bne.n	221be <net_route_del+0x2a>
			list->tail = list->head;
   221ea:	4b12      	ldr	r3, [pc, #72]	; (22234 <net_route_del+0xa0>)
   221ec:	605a      	str	r2, [r3, #4]
   221ee:	e7e6      	b.n	221be <net_route_del+0x2a>
			list->tail = prev_node;
   221f0:	4b10      	ldr	r3, [pc, #64]	; (22234 <net_route_del+0xa0>)
   221f2:	605a      	str	r2, [r3, #4]
   221f4:	e7e3      	b.n	221be <net_route_del+0x2a>

	net_route_info("Deleted", route, &route->addr);

	net_mgmt_event_notify(NET_EVENT_IPV6_ROUTE_DEL, nbr->iface);

	SYS_SLIST_FOR_EACH_CONTAINER(&route->nexthop, nexthop_route, node) {
   221f6:	4622      	mov	r2, r4
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   221f8:	b154      	cbz	r4, 22210 <net_route_del+0x7c>
	return node->next;
   221fa:	6823      	ldr	r3, [r4, #0]
   221fc:	b153      	cbz	r3, 22214 <net_route_del+0x80>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   221fe:	b15a      	cbz	r2, 22218 <net_route_del+0x84>
	return node->next;
   22200:	6824      	ldr	r4, [r4, #0]
   22202:	b15c      	cbz	r4, 2221c <net_route_del+0x88>
		if (!nexthop_route->nbr) {
   22204:	6860      	ldr	r0, [r4, #4]
   22206:	2800      	cmp	r0, #0
   22208:	d0f5      	beq.n	221f6 <net_route_del+0x62>
			continue;
		}

		nbr_nexthop_put(nexthop_route->nbr);
   2220a:	f7ff ff15 	bl	22038 <nbr_nexthop_put>
   2220e:	e7f2      	b.n	221f6 <net_route_del+0x62>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   22210:	4623      	mov	r3, r4
   22212:	e7f3      	b.n	221fc <net_route_del+0x68>
	SYS_SLIST_FOR_EACH_CONTAINER(&route->nexthop, nexthop_route, node) {
   22214:	2400      	movs	r4, #0
   22216:	e7f4      	b.n	22202 <net_route_del+0x6e>
   22218:	2400      	movs	r4, #0
   2221a:	e7f2      	b.n	22202 <net_route_del+0x6e>
	net_nbr_unref(nbr);
   2221c:	4628      	mov	r0, r5
   2221e:	f7fc fae1 	bl	1e7e4 <net_nbr_unref>
	}

	nbr_free(nbr);

	return 0;
   22222:	2000      	movs	r0, #0
   22224:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   22226:	f06f 0015 	mvn.w	r0, #21
   2222a:	4770      	bx	lr
		return -ENOENT;
   2222c:	f06f 0001 	mvn.w	r0, #1
}
   22230:	bd38      	pop	{r3, r4, r5, pc}
   22232:	bf00      	nop
   22234:	20001e64 	.word	0x20001e64
   22238:	f060000c 	.word	0xf060000c

0002223c <net_route_get_nexthop>:
struct in6_addr *net_route_get_nexthop(struct net_route_entry *route)
{
	struct net_route_nexthop *nexthop_route;
	struct net_ipv6_nbr_data *ipv6_nbr_data;

	if (!route) {
   2223c:	b1b8      	cbz	r0, 2226e <net_route_get_nexthop+0x32>
	return list->head;
   2223e:	6843      	ldr	r3, [r0, #4]
		return NULL;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&route->nexthop, nexthop_route, node) {
   22240:	b19b      	cbz	r3, 2226a <net_route_get_nexthop+0x2e>
		struct in6_addr *addr;

		NET_ASSERT(nexthop_route->nbr->idx != NET_NBR_LLADDR_UNKNOWN);

		if (nexthop_route->nbr->idx == NET_NBR_LLADDR_UNKNOWN) {
   22242:	685a      	ldr	r2, [r3, #4]
   22244:	7851      	ldrb	r1, [r2, #1]
   22246:	29ff      	cmp	r1, #255	; 0xff
   22248:	d002      	beq.n	22250 <net_route_get_nexthop+0x14>
   2224a:	68d0      	ldr	r0, [r2, #12]
		}

		ipv6_nbr_data = net_ipv6_nbr_data(nexthop_route->nbr);
		NET_ASSERT(ipv6_nbr_data);

		addr = &ipv6_nbr_data->addr;
   2224c:	3004      	adds	r0, #4
		NET_ASSERT(addr);

		return addr;
   2224e:	4770      	bx	lr
	SYS_SLIST_FOR_EACH_CONTAINER(&route->nexthop, nexthop_route, node) {
   22250:	4619      	mov	r1, r3
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   22252:	b123      	cbz	r3, 2225e <net_route_get_nexthop+0x22>
	return node->next;
   22254:	681a      	ldr	r2, [r3, #0]
   22256:	b132      	cbz	r2, 22266 <net_route_get_nexthop+0x2a>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   22258:	b119      	cbz	r1, 22262 <net_route_get_nexthop+0x26>
	return node->next;
   2225a:	681b      	ldr	r3, [r3, #0]
   2225c:	e7f0      	b.n	22240 <net_route_get_nexthop+0x4>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   2225e:	461a      	mov	r2, r3
   22260:	e7f9      	b.n	22256 <net_route_get_nexthop+0x1a>
   22262:	2300      	movs	r3, #0
   22264:	e7ec      	b.n	22240 <net_route_get_nexthop+0x4>
   22266:	2300      	movs	r3, #0
   22268:	e7ea      	b.n	22240 <net_route_get_nexthop+0x4>
	}

	return NULL;
   2226a:	2000      	movs	r0, #0
   2226c:	4770      	bx	lr
		return NULL;
   2226e:	2000      	movs	r0, #0
}
   22270:	4770      	bx	lr
	...

00022274 <net_route_foreach>:

int net_route_foreach(net_route_cb_t cb, void *user_data)
{
   22274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22276:	4607      	mov	r7, r0
   22278:	460e      	mov	r6, r1
	int i, ret = 0;
   2227a:	2500      	movs	r5, #0

	for (i = 0; i < CONFIG_NET_MAX_ROUTES; i++) {
   2227c:	462c      	mov	r4, r5
   2227e:	e000      	b.n	22282 <net_route_foreach+0xe>
   22280:	3401      	adds	r4, #1
   22282:	2c07      	cmp	r4, #7
   22284:	dc0b      	bgt.n	2229e <net_route_foreach+0x2a>
	return (struct net_route_entry *)nbr->data;
   22286:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   2228a:	00da      	lsls	r2, r3, #3
   2228c:	4b05      	ldr	r3, [pc, #20]	; (222a4 <net_route_foreach+0x30>)
   2228e:	4413      	add	r3, r2
   22290:	68d8      	ldr	r0, [r3, #12]
		if (!nbr) {
			continue;
		}

		route = net_route_data(nbr);
		if (!route) {
   22292:	2800      	cmp	r0, #0
   22294:	d0f4      	beq.n	22280 <net_route_foreach+0xc>
			continue;
		}

		cb(route, user_data);
   22296:	4631      	mov	r1, r6
   22298:	47b8      	blx	r7

		ret++;
   2229a:	3501      	adds	r5, #1
   2229c:	e7f0      	b.n	22280 <net_route_foreach+0xc>
	}

	return ret;
}
   2229e:	4628      	mov	r0, r5
   222a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   222a2:	bf00      	nop
   222a4:	2000c20c 	.word	0x2000c20c

000222a8 <net_route_get_info>:

bool net_route_get_info(struct net_if *iface,
			struct in6_addr *dst,
			struct net_route_entry **route,
			struct in6_addr **nexthop)
{
   222a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   222aa:	4607      	mov	r7, r0
   222ac:	460c      	mov	r4, r1
   222ae:	4615      	mov	r5, r2
   222b0:	461e      	mov	r6, r3
	struct net_if_router *router;

	/* Search in neighbor table first, if not search in routing table. */
	if (net_ipv6_nbr_lookup(iface, dst)) {
   222b2:	f7fd f961 	bl	1f578 <net_ipv6_nbr_lookup>
   222b6:	b120      	cbz	r0, 222c2 <net_route_get_info+0x1a>
		/* Found nexthop, no need to look into routing table. */
		*route = NULL;
   222b8:	2300      	movs	r3, #0
   222ba:	602b      	str	r3, [r5, #0]
		*nexthop = dst;
   222bc:	6034      	str	r4, [r6, #0]

		return true;
   222be:	2001      	movs	r0, #1
   222c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}

	*route = net_route_lookup(iface, dst);
   222c2:	4621      	mov	r1, r4
   222c4:	4638      	mov	r0, r7
   222c6:	f7ff fed5 	bl	22074 <net_route_lookup>
   222ca:	6028      	str	r0, [r5, #0]
	if (*route) {
   222cc:	b130      	cbz	r0, 222dc <net_route_get_info+0x34>
		*nexthop = net_route_get_nexthop(*route);
   222ce:	f7ff ffb5 	bl	2223c <net_route_get_nexthop>
   222d2:	6030      	str	r0, [r6, #0]
		if (!*nexthop) {
   222d4:	b108      	cbz	r0, 222da <net_route_get_info+0x32>
			return false;
		}

		return true;
   222d6:	2001      	movs	r0, #1
   222d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   222da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	} else {
		/* No specific route to this host, use the default
		 * route instead.
		 */
		router = net_if_ipv6_router_find_default(NULL, dst);
   222dc:	4621      	mov	r1, r4
   222de:	2000      	movs	r0, #0
   222e0:	f7f8 fefe 	bl	1b0e0 <net_if_ipv6_router_find_default>
		if (!router) {
   222e4:	4603      	mov	r3, r0
   222e6:	b118      	cbz	r0, 222f0 <net_route_get_info+0x48>
			return false;
		}

		*nexthop = &router->address.in6_addr;
   222e8:	332c      	adds	r3, #44	; 0x2c
   222ea:	6033      	str	r3, [r6, #0]

		return true;
   222ec:	2001      	movs	r0, #1
   222ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return false;
   222f0:	2000      	movs	r0, #0
	}

	return false;
}
   222f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000222f4 <net_route_packet>:

int net_route_packet(struct net_pkt *pkt, struct in6_addr *nexthop)
{
   222f4:	b570      	push	{r4, r5, r6, lr}
   222f6:	4604      	mov	r4, r0
	struct net_linkaddr_storage *lladdr;
	struct net_nbr *nbr;

	nbr = net_ipv6_nbr_lookup(net_pkt_iface(pkt), nexthop);
   222f8:	6940      	ldr	r0, [r0, #20]
   222fa:	f7fd f93d 	bl	1f578 <net_ipv6_nbr_lookup>
	if (!nbr) {
   222fe:	b330      	cbz	r0, 2234e <net_route_packet+0x5a>
		NET_DBG("Cannot find %s neighbor.",
			net_sprint_ipv6_addr(nexthop));
		return -ENOENT;
	}

	lladdr = net_nbr_get_lladdr(nbr->idx);
   22300:	7840      	ldrb	r0, [r0, #1]
   22302:	f7fc fb01 	bl	1e908 <net_nbr_get_lladdr>
	if (!lladdr) {
   22306:	4605      	mov	r5, r0
   22308:	b320      	cbz	r0, 22354 <net_route_packet+0x60>
		NET_DBG("Cannot find %s neighbor link layer address.",
			net_sprint_ipv6_addr(nexthop));
		return -ESRCH;
	}

	if (!net_pkt_ll_src(pkt)->addr) {
   2230a:	6a20      	ldr	r0, [r4, #32]
   2230c:	b328      	cbz	r0, 2235a <net_route_packet+0x66>
	}

	/* Sanitycheck: If src and dst ll addresses are going to be same,
	 * then something went wrong in route lookup.
	 */
	if (!memcmp(net_pkt_ll_src(pkt)->addr, lladdr->addr, lladdr->len)) {
   2230e:	1cae      	adds	r6, r5, #2
   22310:	786a      	ldrb	r2, [r5, #1]
   22312:	4631      	mov	r1, r6
   22314:	f008 fb22 	bl	2a95c <memcmp>
   22318:	b310      	cbz	r0, 22360 <net_route_packet+0x6c>
	pkt->forwarding = forward;
   2231a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   2231e:	f043 0304 	orr.w	r3, r3, #4
   22322:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	return net_if_get_link_addr(pkt->iface);
   22326:	6963      	ldr	r3, [r4, #20]
	net_pkt_set_forwarding(pkt, true);

	/* Set the destination and source ll address in the packet.
	 * We set the destination address to be the nexthop recipient.
	 */
	net_pkt_ll_src(pkt)->addr = net_pkt_ll_if(pkt)->addr;
   22328:	691a      	ldr	r2, [r3, #16]
   2232a:	6222      	str	r2, [r4, #32]
	net_pkt_ll_src(pkt)->type = net_pkt_ll_if(pkt)->type;
   2232c:	7d5a      	ldrb	r2, [r3, #21]
   2232e:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
	net_pkt_ll_src(pkt)->len = net_pkt_ll_if(pkt)->len;
   22332:	7d1b      	ldrb	r3, [r3, #20]
   22334:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24

	net_pkt_ll_dst(pkt)->addr = lladdr->addr;
   22338:	62a6      	str	r6, [r4, #40]	; 0x28
	net_pkt_ll_dst(pkt)->type = lladdr->type;
   2233a:	782b      	ldrb	r3, [r5, #0]
   2233c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	net_pkt_ll_dst(pkt)->len = lladdr->len;
   22340:	786b      	ldrb	r3, [r5, #1]
   22342:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c

	return net_send_data(pkt);
   22346:	4620      	mov	r0, r4
   22348:	f7f8 f84a 	bl	1a3e0 <net_send_data>
   2234c:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOENT;
   2234e:	f06f 0001 	mvn.w	r0, #1
   22352:	bd70      	pop	{r4, r5, r6, pc}
		return -ESRCH;
   22354:	f06f 0002 	mvn.w	r0, #2
   22358:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   2235a:	f06f 0015 	mvn.w	r0, #21
   2235e:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   22360:	f06f 0015 	mvn.w	r0, #21
}
   22364:	bd70      	pop	{r4, r5, r6, pc}

00022366 <net_route_init>:

void net_route_init(void)
{
   22366:	4770      	bx	lr

00022368 <mgmt_thread>:
			  K_THREAD_STACK_SIZEOF(mgmt_stack));
#endif
}

static void mgmt_thread(void)
{
   22368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2236a:	e079      	b.n	22460 <mgmt_thread+0xf8>
		out_event = 0;
   2236c:	2100      	movs	r1, #0
   2236e:	4a48      	ldr	r2, [pc, #288]	; (22490 <mgmt_thread+0x128>)
   22370:	8011      	strh	r1, [r2, #0]
   22372:	e089      	b.n	22488 <mgmt_thread+0x120>
		return NULL;
   22374:	2600      	movs	r6, #0
		k_sem_take(&network_event, K_FOREVER);

		NET_DBG("Handling events, forwarding it relevantly");

		mgmt_event = mgmt_pop_event();
		if (!mgmt_event) {
   22376:	b13e      	cbz	r6, 22388 <mgmt_thread+0x20>
	return list->head;
   22378:	4b46      	ldr	r3, [pc, #280]	; (22494 <mgmt_thread+0x12c>)
   2237a:	681d      	ldr	r5, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&event_callbacks, cb, tmp, node) {
   2237c:	b15d      	cbz	r5, 22396 <mgmt_thread+0x2e>
   2237e:	462c      	mov	r4, r5
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   22380:	b105      	cbz	r5, 22384 <mgmt_thread+0x1c>
	return node->next;
   22382:	682c      	ldr	r4, [r5, #0]
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   22384:	2700      	movs	r7, #0
   22386:	e01f      	b.n	223c8 <mgmt_thread+0x60>
   22388:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2238c:	2100      	movs	r1, #0
   2238e:	4842      	ldr	r0, [pc, #264]	; (22498 <mgmt_thread+0x130>)
   22390:	f006 f9fa 	bl	28788 <_impl_k_sem_init>
			NET_DBG("Some event got probably lost (%u)",
				k_sem_count_get(&network_event));

			k_sem_init(&network_event, 0, UINT_MAX);

			continue;
   22394:	e064      	b.n	22460 <mgmt_thread+0xf8>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&event_callbacks, cb, tmp, node) {
   22396:	462c      	mov	r4, r5
   22398:	e7f4      	b.n	22384 <mgmt_thread+0x1c>
		if (NET_MGMT_EVENT_SYNCHRONOUS(cb->event_mask)) {
   2239a:	f012 6f00 	tst.w	r2, #134217728	; 0x8000000
   2239e:	d04c      	beq.n	2243a <mgmt_thread+0xd2>
			struct mgmt_event_wait *sync_data =
   223a0:	686a      	ldr	r2, [r5, #4]
			if (sync_data->iface &&
   223a2:	6993      	ldr	r3, [r2, #24]
   223a4:	2b00      	cmp	r3, #0
   223a6:	d02c      	beq.n	22402 <mgmt_thread+0x9a>
			    sync_data->iface != mgmt_event->iface) {
   223a8:	6870      	ldr	r0, [r6, #4]
			if (sync_data->iface &&
   223aa:	4283      	cmp	r3, r0
   223ac:	d029      	beq.n	22402 <mgmt_thread+0x9a>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&event_callbacks, cb, tmp, node) {
   223ae:	2c00      	cmp	r4, #0
   223b0:	d04b      	beq.n	2244a <mgmt_thread+0xe2>
   223b2:	4622      	mov	r2, r4
   223b4:	2c00      	cmp	r4, #0
   223b6:	d046      	beq.n	22446 <mgmt_thread+0xde>
	return node->next;
   223b8:	6823      	ldr	r3, [r4, #0]
   223ba:	2b00      	cmp	r3, #0
   223bc:	d047      	beq.n	2244e <mgmt_thread+0xe6>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   223be:	2a00      	cmp	r2, #0
   223c0:	d047      	beq.n	22452 <mgmt_thread+0xea>
	return node->next;
   223c2:	6823      	ldr	r3, [r4, #0]
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   223c4:	4625      	mov	r5, r4
   223c6:	461c      	mov	r4, r3
   223c8:	2d00      	cmp	r5, #0
   223ca:	d044      	beq.n	22456 <mgmt_thread+0xee>
		if (!(NET_MGMT_GET_LAYER(mgmt_event->event) &
   223cc:	6831      	ldr	r1, [r6, #0]
		      NET_MGMT_GET_LAYER(cb->event_mask)) ||
   223ce:	68aa      	ldr	r2, [r5, #8]
   223d0:	0f13      	lsrs	r3, r2, #28
		if (!(NET_MGMT_GET_LAYER(mgmt_event->event) &
   223d2:	ea03 7311 	and.w	r3, r3, r1, lsr #28
   223d6:	f013 0f03 	tst.w	r3, #3
   223da:	d0e8      	beq.n	223ae <mgmt_thread+0x46>
		      NET_MGMT_GET_LAYER_CODE(cb->event_mask)) ||
   223dc:	0c13      	lsrs	r3, r2, #16
		    !(NET_MGMT_GET_LAYER_CODE(mgmt_event->event) &
   223de:	ea03 4311 	and.w	r3, r3, r1, lsr #16
   223e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
		      NET_MGMT_GET_LAYER(cb->event_mask)) ||
   223e6:	2b00      	cmp	r3, #0
   223e8:	d0e1      	beq.n	223ae <mgmt_thread+0x46>
		    (NET_MGMT_GET_COMMAND(mgmt_event->event) &&
   223ea:	b28b      	uxth	r3, r1
		      NET_MGMT_GET_LAYER_CODE(cb->event_mask)) ||
   223ec:	2b00      	cmp	r3, #0
   223ee:	d0d4      	beq.n	2239a <mgmt_thread+0x32>
		     NET_MGMT_GET_COMMAND(cb->event_mask) &&
   223f0:	b293      	uxth	r3, r2
		    (NET_MGMT_GET_COMMAND(mgmt_event->event) &&
   223f2:	2b00      	cmp	r3, #0
   223f4:	d0d1      	beq.n	2239a <mgmt_thread+0x32>
		     !(NET_MGMT_GET_COMMAND(mgmt_event->event) &
   223f6:	ea01 0302 	and.w	r3, r1, r2
   223fa:	b29b      	uxth	r3, r3
		     NET_MGMT_GET_COMMAND(cb->event_mask) &&
   223fc:	2b00      	cmp	r3, #0
   223fe:	d0d6      	beq.n	223ae <mgmt_thread+0x46>
   22400:	e7cb      	b.n	2239a <mgmt_thread+0x32>
			cb->raised_event = mgmt_event->event;
   22402:	60a9      	str	r1, [r5, #8]
			sync_data->iface = mgmt_event->iface;
   22404:	6873      	ldr	r3, [r6, #4]
   22406:	6193      	str	r3, [r2, #24]
	if (!prev_node) {
   22408:	b15f      	cbz	r7, 22422 <mgmt_thread+0xba>
		prev_node->next = node->next;
   2240a:	682b      	ldr	r3, [r5, #0]
   2240c:	603b      	str	r3, [r7, #0]
		if (list->tail == node) {
   2240e:	4b21      	ldr	r3, [pc, #132]	; (22494 <mgmt_thread+0x12c>)
   22410:	685b      	ldr	r3, [r3, #4]
   22412:	429d      	cmp	r5, r3
   22414:	d00e      	beq.n	22434 <mgmt_thread+0xcc>
	node->next = NULL;
   22416:	2300      	movs	r3, #0
   22418:	602b      	str	r3, [r5, #0]
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   2241a:	6868      	ldr	r0, [r5, #4]
   2241c:	f006 f9bd 	bl	2879a <_impl_k_sem_give>
   22420:	e7c5      	b.n	223ae <mgmt_thread+0x46>
		list->head = node->next;
   22422:	682a      	ldr	r2, [r5, #0]
   22424:	4b1b      	ldr	r3, [pc, #108]	; (22494 <mgmt_thread+0x12c>)
   22426:	601a      	str	r2, [r3, #0]
		if (list->tail == node) {
   22428:	685b      	ldr	r3, [r3, #4]
   2242a:	429d      	cmp	r5, r3
   2242c:	d1f3      	bne.n	22416 <mgmt_thread+0xae>
			list->tail = list->head;
   2242e:	4b19      	ldr	r3, [pc, #100]	; (22494 <mgmt_thread+0x12c>)
   22430:	605a      	str	r2, [r3, #4]
   22432:	e7f0      	b.n	22416 <mgmt_thread+0xae>
			list->tail = prev_node;
   22434:	4b17      	ldr	r3, [pc, #92]	; (22494 <mgmt_thread+0x12c>)
   22436:	605f      	str	r7, [r3, #4]
   22438:	e7ed      	b.n	22416 <mgmt_thread+0xae>
			cb->handler(cb, mgmt_event->event, mgmt_event->iface);
   2243a:	686b      	ldr	r3, [r5, #4]
   2243c:	6872      	ldr	r2, [r6, #4]
   2243e:	4628      	mov	r0, r5
   22440:	4798      	blx	r3
			prev = &cb->node;
   22442:	462f      	mov	r7, r5
   22444:	e7b3      	b.n	223ae <mgmt_thread+0x46>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   22446:	4623      	mov	r3, r4
   22448:	e7b7      	b.n	223ba <mgmt_thread+0x52>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&event_callbacks, cb, tmp, node) {
   2244a:	4623      	mov	r3, r4
   2244c:	e7ba      	b.n	223c4 <mgmt_thread+0x5c>
   2244e:	2300      	movs	r3, #0
   22450:	e7b8      	b.n	223c4 <mgmt_thread+0x5c>
   22452:	2300      	movs	r3, #0
   22454:	e7b6      	b.n	223c4 <mgmt_thread+0x5c>
	mgmt_event->event = 0;
   22456:	2300      	movs	r3, #0
   22458:	6033      	str	r3, [r6, #0]
	mgmt_event->iface = NULL;
   2245a:	6073      	str	r3, [r6, #4]
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
   2245c:	f006 f844 	bl	284e8 <_impl_k_yield>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   22460:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   22464:	480c      	ldr	r0, [pc, #48]	; (22498 <mgmt_thread+0x130>)
   22466:	f006 f9ab 	bl	287c0 <_impl_k_sem_take>
	if (!events[out_event].event) {
   2246a:	4b09      	ldr	r3, [pc, #36]	; (22490 <mgmt_thread+0x128>)
   2246c:	881b      	ldrh	r3, [r3, #0]
   2246e:	4a0b      	ldr	r2, [pc, #44]	; (2249c <mgmt_thread+0x134>)
   22470:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
   22474:	2a00      	cmp	r2, #0
   22476:	f43f af7d 	beq.w	22374 <mgmt_thread+0xc>
	out_event++;
   2247a:	1c5a      	adds	r2, r3, #1
   2247c:	b292      	uxth	r2, r2
   2247e:	4904      	ldr	r1, [pc, #16]	; (22490 <mgmt_thread+0x128>)
   22480:	800a      	strh	r2, [r1, #0]
	if (out_event == CONFIG_NET_MGMT_EVENT_QUEUE_SIZE) {
   22482:	2a02      	cmp	r2, #2
   22484:	f43f af72 	beq.w	2236c <mgmt_thread+0x4>
	return &events[o_idx];
   22488:	4e04      	ldr	r6, [pc, #16]	; (2249c <mgmt_thread+0x134>)
   2248a:	eb06 06c3 	add.w	r6, r6, r3, lsl #3
   2248e:	e772      	b.n	22376 <mgmt_thread+0xe>
   22490:	20001ef4 	.word	0x20001ef4
   22494:	20001e6c 	.word	0x20001e6c
   22498:	2000cfbc 	.word	0x2000cfbc
   2249c:	20001e74 	.word	0x20001e74

000224a0 <net_mgmt_add_event_callback>:
	node->next = list->head;
   224a0:	4b07      	ldr	r3, [pc, #28]	; (224c0 <net_mgmt_add_event_callback+0x20>)
   224a2:	681a      	ldr	r2, [r3, #0]
   224a4:	6002      	str	r2, [r0, #0]
	list->head = node;
   224a6:	6018      	str	r0, [r3, #0]
	if (!list->tail) {
   224a8:	685b      	ldr	r3, [r3, #4]
   224aa:	b12b      	cbz	r3, 224b8 <net_mgmt_add_event_callback+0x18>
{
	NET_DBG("Adding event callback %p", cb);

	sys_slist_prepend(&event_callbacks, &cb->node);

	mgmt_add_event_mask(cb->event_mask);
   224ac:	6881      	ldr	r1, [r0, #8]
	global_event_mask |= event_mask;
   224ae:	4a05      	ldr	r2, [pc, #20]	; (224c4 <net_mgmt_add_event_callback+0x24>)
   224b0:	6813      	ldr	r3, [r2, #0]
   224b2:	430b      	orrs	r3, r1
   224b4:	6013      	str	r3, [r2, #0]
   224b6:	4770      	bx	lr
		list->tail = list->head;
   224b8:	4b01      	ldr	r3, [pc, #4]	; (224c0 <net_mgmt_add_event_callback+0x20>)
   224ba:	6058      	str	r0, [r3, #4]
   224bc:	e7f6      	b.n	224ac <net_mgmt_add_event_callback+0xc>
   224be:	bf00      	nop
   224c0:	20001e6c 	.word	0x20001e6c
   224c4:	20001e84 	.word	0x20001e84

000224c8 <net_mgmt_event_notify_with_info>:
	return ((mgmt_event & global_event_mask) == mgmt_event);
   224c8:	4b17      	ldr	r3, [pc, #92]	; (22528 <net_mgmt_event_notify_with_info+0x60>)
   224ca:	681b      	ldr	r3, [r3, #0]
}

void net_mgmt_event_notify_with_info(u32_t mgmt_event, struct net_if *iface,
				     void *info, size_t length)
{
	if (mgmt_is_event_handled(mgmt_event)) {
   224cc:	ea30 0303 	bics.w	r3, r0, r3
   224d0:	d000      	beq.n	224d4 <net_mgmt_event_notify_with_info+0xc>
   224d2:	4770      	bx	lr
{
   224d4:	b510      	push	{r4, lr}
	events[in_event].event = mgmt_event;
   224d6:	4c15      	ldr	r4, [pc, #84]	; (2252c <net_mgmt_event_notify_with_info+0x64>)
   224d8:	8823      	ldrh	r3, [r4, #0]
   224da:	4a15      	ldr	r2, [pc, #84]	; (22530 <net_mgmt_event_notify_with_info+0x68>)
   224dc:	f842 0033 	str.w	r0, [r2, r3, lsl #3]
	events[in_event].iface = iface;
   224e0:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   224e4:	6051      	str	r1, [r2, #4]
	in_event++;
   224e6:	3301      	adds	r3, #1
   224e8:	b29b      	uxth	r3, r3
   224ea:	8023      	strh	r3, [r4, #0]
	if (in_event == CONFIG_NET_MGMT_EVENT_QUEUE_SIZE) {
   224ec:	2b02      	cmp	r3, #2
   224ee:	d009      	beq.n	22504 <net_mgmt_event_notify_with_info+0x3c>
	if (in_event == out_event) {
   224f0:	4b0e      	ldr	r3, [pc, #56]	; (2252c <net_mgmt_event_notify_with_info+0x64>)
   224f2:	881a      	ldrh	r2, [r3, #0]
   224f4:	4b0f      	ldr	r3, [pc, #60]	; (22534 <net_mgmt_event_notify_with_info+0x6c>)
   224f6:	881b      	ldrh	r3, [r3, #0]
   224f8:	429a      	cmp	r2, r3
   224fa:	d006      	beq.n	2250a <net_mgmt_event_notify_with_info+0x42>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   224fc:	480e      	ldr	r0, [pc, #56]	; (22538 <net_mgmt_event_notify_with_info+0x70>)
   224fe:	f006 f94c 	bl	2879a <_impl_k_sem_give>
   22502:	bd10      	pop	{r4, pc}
		in_event = 0;
   22504:	2200      	movs	r2, #0
   22506:	8022      	strh	r2, [r4, #0]
   22508:	e7f2      	b.n	224f0 <net_mgmt_event_notify_with_info+0x28>
		u16_t o_idx = out_event + 1;
   2250a:	3301      	adds	r3, #1
   2250c:	b29b      	uxth	r3, r3
		if (o_idx == CONFIG_NET_MGMT_EVENT_QUEUE_SIZE) {
   2250e:	2b02      	cmp	r3, #2
   22510:	d007      	beq.n	22522 <net_mgmt_event_notify_with_info+0x5a>
		if (events[o_idx].event) {
   22512:	4a07      	ldr	r2, [pc, #28]	; (22530 <net_mgmt_event_notify_with_info+0x68>)
   22514:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
   22518:	2a00      	cmp	r2, #0
   2251a:	d0ef      	beq.n	224fc <net_mgmt_event_notify_with_info+0x34>
			out_event = o_idx;
   2251c:	4a05      	ldr	r2, [pc, #20]	; (22534 <net_mgmt_event_notify_with_info+0x6c>)
   2251e:	8013      	strh	r3, [r2, #0]
   22520:	e7ec      	b.n	224fc <net_mgmt_event_notify_with_info+0x34>
			o_idx = 0;
   22522:	2300      	movs	r3, #0
   22524:	e7f5      	b.n	22512 <net_mgmt_event_notify_with_info+0x4a>
   22526:	bf00      	nop
   22528:	20001e84 	.word	0x20001e84
   2252c:	20001e88 	.word	0x20001e88
   22530:	20001e74 	.word	0x20001e74
   22534:	20001ef4 	.word	0x20001ef4
   22538:	2000cfbc 	.word	0x2000cfbc

0002253c <net_mgmt_event_init>:
	return mgmt_event_wait_call(iface, mgmt_event_mask,
				    raised_event, NULL, info, timeout);
}

void net_mgmt_event_init(void)
{
   2253c:	b510      	push	{r4, lr}
   2253e:	b086      	sub	sp, #24
	list->head = NULL;
   22540:	4b0f      	ldr	r3, [pc, #60]	; (22580 <net_mgmt_event_init+0x44>)
   22542:	2400      	movs	r4, #0
   22544:	601c      	str	r4, [r3, #0]
	list->tail = NULL;
   22546:	605c      	str	r4, [r3, #4]
	sys_slist_init(&event_callbacks);
	global_event_mask = 0;
   22548:	4b0e      	ldr	r3, [pc, #56]	; (22584 <net_mgmt_event_init+0x48>)
   2254a:	601c      	str	r4, [r3, #0]

	in_event = 0;
   2254c:	4b0e      	ldr	r3, [pc, #56]	; (22588 <net_mgmt_event_init+0x4c>)
   2254e:	801c      	strh	r4, [r3, #0]
	out_event = 0;
   22550:	4b0e      	ldr	r3, [pc, #56]	; (2258c <net_mgmt_event_init+0x50>)
   22552:	801c      	strh	r4, [r3, #0]

	memset(events, 0,
   22554:	2210      	movs	r2, #16
   22556:	4621      	mov	r1, r4
   22558:	480d      	ldr	r0, [pc, #52]	; (22590 <net_mgmt_event_init+0x54>)
   2255a:	f008 fa93 	bl	2aa84 <memset>
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay);
   2255e:	9405      	str	r4, [sp, #20]
   22560:	9404      	str	r4, [sp, #16]
   22562:	f06f 0308 	mvn.w	r3, #8
   22566:	9303      	str	r3, [sp, #12]
   22568:	9402      	str	r4, [sp, #8]
   2256a:	9401      	str	r4, [sp, #4]
   2256c:	9400      	str	r4, [sp, #0]
   2256e:	4b09      	ldr	r3, [pc, #36]	; (22594 <net_mgmt_event_init+0x58>)
   22570:	f44f 7200 	mov.w	r2, #512	; 0x200
   22574:	4908      	ldr	r1, [pc, #32]	; (22598 <net_mgmt_event_init+0x5c>)
   22576:	4809      	ldr	r0, [pc, #36]	; (2259c <net_mgmt_event_init+0x60>)
   22578:	f006 fb8e 	bl	28c98 <_impl_k_thread_create>
			K_PRIO_COOP(CONFIG_NET_MGMT_EVENT_THREAD_PRIO), 0, 0);

	NET_DBG("Net MGMT initialized: queue of %u entries, stack size of %u",
		CONFIG_NET_MGMT_EVENT_QUEUE_SIZE,
		CONFIG_NET_MGMT_EVENT_STACK_SIZE);
}
   2257c:	b006      	add	sp, #24
   2257e:	bd10      	pop	{r4, pc}
   22580:	20001e6c 	.word	0x20001e6c
   22584:	20001e84 	.word	0x20001e84
   22588:	20001e88 	.word	0x20001e88
   2258c:	20001ef4 	.word	0x20001ef4
   22590:	20001e74 	.word	0x20001e74
   22594:	00022369 	.word	0x00022369
   22598:	20009858 	.word	0x20009858
   2259c:	20001e8c 	.word	0x20001e8c

000225a0 <net_udp_insert_raw>:

struct net_pkt *net_udp_insert_raw(struct net_pkt *pkt,
				   u16_t offset,
				   u16_t src_port,
				   u16_t dst_port)
{
   225a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   225a2:	b085      	sub	sp, #20
   225a4:	4605      	mov	r5, r0
   225a6:	f8ad 2006 	strh.w	r2, [sp, #6]
   225aa:	f8ad 3004 	strh.w	r3, [sp, #4]
	struct net_buf *frag, *prev, *udp;
	u16_t pos;

	frag = net_frag_get_pos(pkt, offset, &pos);
   225ae:	f10d 020e 	add.w	r2, sp, #14
   225b2:	f7fa fde5 	bl	1d180 <net_frag_get_pos>
	if (!frag && pos == 0xffff) {
   225b6:	4602      	mov	r2, r0
   225b8:	b168      	cbz	r0, 225d6 <net_udp_insert_raw+0x36>
	}

	/* We can only insert the UDP header between existing two
	 * fragments.
	 */
	if (frag && pos != 0) {
   225ba:	b11a      	cbz	r2, 225c4 <net_udp_insert_raw+0x24>
   225bc:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   225c0:	2b00      	cmp	r3, #0
   225c2:	d15c      	bne.n	2267e <net_udp_insert_raw+0xde>
		NET_DBG("Cannot insert UDP data into offset %d", offset);
		return NULL;
	}

	if (pkt->frags != frag) {
   225c4:	68ab      	ldr	r3, [r5, #8]
   225c6:	429a      	cmp	r2, r3
   225c8:	d00d      	beq.n	225e6 <net_udp_insert_raw+0x46>
		struct net_buf *tmp = pkt->frags;

		prev = NULL;

		while (tmp->frags) {
   225ca:	681c      	ldr	r4, [r3, #0]
   225cc:	b174      	cbz	r4, 225ec <net_udp_insert_raw+0x4c>
			if (tmp->frags == frag) {
   225ce:	42a2      	cmp	r2, r4
   225d0:	d00b      	beq.n	225ea <net_udp_insert_raw+0x4a>
				prev = tmp;
				break;
			}

			tmp = tmp->frags;
   225d2:	4623      	mov	r3, r4
   225d4:	e7f9      	b.n	225ca <net_udp_insert_raw+0x2a>
	if (!frag && pos == 0xffff) {
   225d6:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   225da:	f64f 73ff 	movw	r3, #65535	; 0xffff
   225de:	4299      	cmp	r1, r3
   225e0:	d1eb      	bne.n	225ba <net_udp_insert_raw+0x1a>
		return NULL;
   225e2:	2000      	movs	r0, #0
   225e4:	e049      	b.n	2267a <net_udp_insert_raw+0xda>
		}
	} else {
		prev = pkt->frags;
   225e6:	461c      	mov	r4, r3
   225e8:	e000      	b.n	225ec <net_udp_insert_raw+0x4c>
				prev = tmp;
   225ea:	461c      	mov	r4, r3
	}

	if (!prev) {
   225ec:	2c00      	cmp	r4, #0
   225ee:	d048      	beq.n	22682 <net_udp_insert_raw+0xe2>
		goto fail;
	}

	udp = net_pkt_get_frag(pkt, PKT_WAIT_TIME);
   225f0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   225f4:	4628      	mov	r0, r5
   225f6:	f7fa faa1 	bl	1cb3c <net_pkt_get_frag>
	if (!udp) {
   225fa:	4607      	mov	r7, r0
   225fc:	2800      	cmp	r0, #0
   225fe:	d042      	beq.n	22686 <net_udp_insert_raw+0xe6>
		goto fail;
	}

	/* Source and destination ports are already in network byte order */
	net_buf_add_mem(udp, &src_port, sizeof(src_port));
   22600:	f100 0608 	add.w	r6, r0, #8
   22604:	2202      	movs	r2, #2
   22606:	f10d 0106 	add.w	r1, sp, #6
   2260a:	4630      	mov	r0, r6
   2260c:	f7f7 fdcc 	bl	1a1a8 <net_buf_simple_add_mem>
	net_buf_add_mem(udp, &dst_port, sizeof(dst_port));
   22610:	2202      	movs	r2, #2
   22612:	a901      	add	r1, sp, #4
   22614:	4630      	mov	r0, r6
   22616:	f7f7 fdc7 	bl	1a1a8 <net_buf_simple_add_mem>
	return net_buf_frags_len(pkt->frags);
   2261a:	68ab      	ldr	r3, [r5, #8]
	size_t bytes = 0;
   2261c:	2200      	movs	r2, #0
   2261e:	e002      	b.n	22626 <net_udp_insert_raw+0x86>
		bytes += buf->len;
   22620:	8999      	ldrh	r1, [r3, #12]
   22622:	440a      	add	r2, r1
		buf = buf->frags;
   22624:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   22626:	2b00      	cmp	r3, #0
   22628:	d1fa      	bne.n	22620 <net_udp_insert_raw+0x80>

	net_buf_add_be16(udp, net_pkt_get_len(pkt) -
   2262a:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
   2262e:	1a51      	subs	r1, r2, r1
   22630:	b289      	uxth	r1, r1
   22632:	f895 203b 	ldrb.w	r2, [r5, #59]	; 0x3b
   22636:	1a89      	subs	r1, r1, r2
   22638:	b289      	uxth	r1, r1
   2263a:	3108      	adds	r1, #8
   2263c:	b289      	uxth	r1, r1
   2263e:	4630      	mov	r0, r6
   22640:	f7f7 fdd2 	bl	1a1e8 <net_buf_simple_add_be16>
			 net_pkt_ip_hdr_len(pkt) -
			 net_pkt_ipv6_ext_len(pkt) +
			 sizeof(struct net_udp_hdr));

	net_buf_add_be16(udp, 0); /* chksum */
   22644:	2100      	movs	r1, #0
   22646:	4630      	mov	r0, r6
   22648:	f7f7 fdce 	bl	1a1e8 <net_buf_simple_add_be16>

	net_buf_frag_insert(prev, udp);
   2264c:	4639      	mov	r1, r7
   2264e:	4620      	mov	r0, r4
   22650:	f7f7 fd7e 	bl	1a150 <net_buf_frag_insert>

	frag = net_frag_get_pos(pkt, net_pkt_ip_hdr_len(pkt) +
   22654:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
				net_pkt_ipv6_ext_len(pkt) +
   22658:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
	frag = net_frag_get_pos(pkt, net_pkt_ip_hdr_len(pkt) +
   2265c:	4419      	add	r1, r3
   2265e:	3108      	adds	r1, #8
   22660:	f10d 020e 	add.w	r2, sp, #14
   22664:	b289      	uxth	r1, r1
   22666:	4628      	mov	r0, r5
   22668:	f7fa fd8a 	bl	1d180 <net_frag_get_pos>
				sizeof(struct net_udp_hdr),
				&pos);
	if (frag) {
   2266c:	b168      	cbz	r0, 2268a <net_udp_insert_raw+0xea>
		net_pkt_set_appdata(pkt, frag->data + pos);
   2266e:	6883      	ldr	r3, [r0, #8]
   22670:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   22674:	4413      	add	r3, r2
	pkt->appdata = data;
   22676:	61ab      	str	r3, [r5, #24]
	}

	return pkt;
   22678:	4628      	mov	r0, r5

fail:
	NET_DBG("Cannot insert UDP header into %p", pkt);
	return NULL;
}
   2267a:	b005      	add	sp, #20
   2267c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return NULL;
   2267e:	2000      	movs	r0, #0
   22680:	e7fb      	b.n	2267a <net_udp_insert_raw+0xda>
	return NULL;
   22682:	2000      	movs	r0, #0
   22684:	e7f9      	b.n	2267a <net_udp_insert_raw+0xda>
   22686:	2000      	movs	r0, #0
   22688:	e7f7      	b.n	2267a <net_udp_insert_raw+0xda>
	return pkt;
   2268a:	4628      	mov	r0, r5
   2268c:	e7f5      	b.n	2267a <net_udp_insert_raw+0xda>

0002268e <net_udp_set_chksum>:

struct net_buf *net_udp_set_chksum(struct net_pkt *pkt, struct net_buf *frag)
{
   2268e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22692:	b086      	sub	sp, #24
   22694:	4606      	mov	r6, r0
   22696:	460d      	mov	r5, r1
	struct net_udp_hdr *hdr;
	u16_t chksum = 0;
   22698:	2300      	movs	r3, #0
   2269a:	f8ad 3016 	strh.w	r3, [sp, #22]
	u16_t pos;

	hdr = net_pkt_udp_data(pkt);
   2269e:	f7fa fda5 	bl	1d1ec <net_pkt_udp_data>
   226a2:	4604      	mov	r4, r0
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   226a4:	2208      	movs	r2, #8
   226a6:	4601      	mov	r1, r0
   226a8:	4630      	mov	r0, r6
   226aa:	f7fb f95d 	bl	1d968 <net_header_fits>
   226ae:	b170      	cbz	r0, 226ce <net_udp_set_chksum+0x40>
		return hdr;
   226b0:	4623      	mov	r3, r4
	if (net_udp_header_fits(pkt, hdr)) {
   226b2:	b173      	cbz	r3, 226d2 <net_udp_set_chksum+0x44>
		hdr->chksum = 0;
   226b4:	2300      	movs	r3, #0
   226b6:	71a3      	strb	r3, [r4, #6]
   226b8:	71e3      	strb	r3, [r4, #7]
	return net_calc_chksum(pkt, IPPROTO_UDP);
   226ba:	2111      	movs	r1, #17
   226bc:	4630      	mov	r0, r6
   226be:	f7fb f8fa 	bl	1d8b6 <net_calc_chksum>
		hdr->chksum = ~net_calc_chksum_udp(pkt);
   226c2:	43c0      	mvns	r0, r0
   226c4:	80e0      	strh	r0, [r4, #6]

		return frag;
   226c6:	4628      	mov	r0, r5
			     (u8_t *)&chksum, PKT_WAIT_TIME);

	NET_ASSERT(frag);

	return frag;
}
   226c8:	b006      	add	sp, #24
   226ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return NULL;
   226ce:	2300      	movs	r3, #0
   226d0:	e7ef      	b.n	226b2 <net_udp_set_chksum+0x24>
			     net_pkt_ip_hdr_len(pkt) +
   226d2:	f896 2033 	ldrb.w	r2, [r6, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt) +
   226d6:	f896 303b 	ldrb.w	r3, [r6, #59]	; 0x3b
			     net_pkt_ip_hdr_len(pkt) +
   226da:	441a      	add	r2, r3
	frag = net_pkt_write(pkt, frag,
   226dc:	3206      	adds	r2, #6
   226de:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
   226e2:	f8cd 8008 	str.w	r8, [sp, #8]
   226e6:	f10d 0416 	add.w	r4, sp, #22
   226ea:	9401      	str	r4, [sp, #4]
   226ec:	2702      	movs	r7, #2
   226ee:	9700      	str	r7, [sp, #0]
   226f0:	ab05      	add	r3, sp, #20
   226f2:	b292      	uxth	r2, r2
   226f4:	4629      	mov	r1, r5
   226f6:	4630      	mov	r0, r6
   226f8:	f7fa fc63 	bl	1cfc2 <net_pkt_write>
   226fc:	4605      	mov	r5, r0
	return net_calc_chksum(pkt, IPPROTO_UDP);
   226fe:	2111      	movs	r1, #17
   22700:	4630      	mov	r0, r6
   22702:	f7fb f8d8 	bl	1d8b6 <net_calc_chksum>
	chksum = ~net_calc_chksum_udp(pkt);
   22706:	43c0      	mvns	r0, r0
   22708:	f8ad 0016 	strh.w	r0, [sp, #22]
	frag = net_pkt_write(pkt, frag, pos - 2, &pos, sizeof(chksum),
   2270c:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   22710:	3a02      	subs	r2, #2
   22712:	f8cd 8008 	str.w	r8, [sp, #8]
   22716:	9401      	str	r4, [sp, #4]
   22718:	9700      	str	r7, [sp, #0]
   2271a:	ab05      	add	r3, sp, #20
   2271c:	b292      	uxth	r2, r2
   2271e:	4629      	mov	r1, r5
   22720:	4630      	mov	r0, r6
   22722:	f7fa fc4e 	bl	1cfc2 <net_pkt_write>
	return frag;
   22726:	e7cf      	b.n	226c8 <net_udp_set_chksum+0x3a>

00022728 <net_udp_get_chksum>:

u16_t net_udp_get_chksum(struct net_pkt *pkt, struct net_buf *frag)
{
   22728:	b570      	push	{r4, r5, r6, lr}
   2272a:	b084      	sub	sp, #16
   2272c:	4605      	mov	r5, r0
   2272e:	460e      	mov	r6, r1
	struct net_udp_hdr *hdr;
	u16_t chksum;
	u16_t pos;

	hdr = net_pkt_udp_data(pkt);
   22730:	f7fa fd5c 	bl	1d1ec <net_pkt_udp_data>
   22734:	4604      	mov	r4, r0
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   22736:	2208      	movs	r2, #8
   22738:	4601      	mov	r1, r0
   2273a:	4628      	mov	r0, r5
   2273c:	f7fb f914 	bl	1d968 <net_header_fits>
   22740:	b120      	cbz	r0, 2274c <net_udp_get_chksum+0x24>
		return hdr;
   22742:	4623      	mov	r3, r4
	if (net_udp_header_fits(pkt, hdr)) {
   22744:	b123      	cbz	r3, 22750 <net_udp_get_chksum+0x28>
		return hdr->chksum;
   22746:	88e0      	ldrh	r0, [r4, #6]
			     2 + 2 + 2 /* src + dst + len */,
			     &pos, sizeof(chksum), (u8_t *)&chksum);
	NET_ASSERT(frag);

	return chksum;
}
   22748:	b004      	add	sp, #16
   2274a:	bd70      	pop	{r4, r5, r6, pc}
	return NULL;
   2274c:	2300      	movs	r3, #0
   2274e:	e7f9      	b.n	22744 <net_udp_get_chksum+0x1c>
			     net_pkt_ip_hdr_len(pkt) +
   22750:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt) +
   22754:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
			     net_pkt_ip_hdr_len(pkt) +
   22758:	4419      	add	r1, r3
	frag = net_frag_read(frag,
   2275a:	3106      	adds	r1, #6
   2275c:	f10d 030e 	add.w	r3, sp, #14
   22760:	9300      	str	r3, [sp, #0]
   22762:	2302      	movs	r3, #2
   22764:	aa03      	add	r2, sp, #12
   22766:	b289      	uxth	r1, r1
   22768:	4630      	mov	r0, r6
   2276a:	f7fa fbb8 	bl	1cede <net_frag_read>
	return chksum;
   2276e:	f8bd 000e 	ldrh.w	r0, [sp, #14]
   22772:	e7e9      	b.n	22748 <net_udp_get_chksum+0x20>

00022774 <net_udp_get_hdr>:

struct net_udp_hdr *net_udp_get_hdr(struct net_pkt *pkt,
				    struct net_udp_hdr *hdr)
{
   22774:	b5f0      	push	{r4, r5, r6, r7, lr}
   22776:	b085      	sub	sp, #20
   22778:	4605      	mov	r5, r0
   2277a:	460f      	mov	r7, r1
	struct net_udp_hdr *udp_hdr;
	struct net_buf *frag;
	u16_t pos;

	udp_hdr = net_pkt_udp_data(pkt);
   2277c:	f7fa fd36 	bl	1d1ec <net_pkt_udp_data>
   22780:	4604      	mov	r4, r0
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   22782:	2208      	movs	r2, #8
   22784:	4601      	mov	r1, r0
   22786:	4628      	mov	r0, r5
   22788:	f7fb f8ee 	bl	1d968 <net_header_fits>
   2278c:	b120      	cbz	r0, 22798 <net_udp_get_hdr+0x24>
		return hdr;
   2278e:	4626      	mov	r6, r4
	if (net_udp_header_fits(pkt, udp_hdr)) {
   22790:	b126      	cbz	r6, 2279c <net_udp_get_hdr+0x28>
		NET_ASSERT(frag);
		return NULL;
	}

	return hdr;
}
   22792:	4620      	mov	r0, r4
   22794:	b005      	add	sp, #20
   22796:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return NULL;
   22798:	2600      	movs	r6, #0
   2279a:	e7f9      	b.n	22790 <net_udp_get_hdr+0x1c>
	frag = net_frag_read(pkt->frags, net_pkt_ip_hdr_len(pkt) +
   2279c:	68a8      	ldr	r0, [r5, #8]
   2279e:	f895 4033 	ldrb.w	r4, [r5, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt),
   227a2:	f895 103b 	ldrb.w	r1, [r5, #59]	; 0x3b
	frag = net_frag_read(pkt->frags, net_pkt_ip_hdr_len(pkt) +
   227a6:	9700      	str	r7, [sp, #0]
   227a8:	2302      	movs	r3, #2
   227aa:	f10d 020e 	add.w	r2, sp, #14
   227ae:	4421      	add	r1, r4
   227b0:	f7fa fb95 	bl	1cede <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->dst_port),
   227b4:	f8bd 100e 	ldrh.w	r1, [sp, #14]
			     (u8_t *)&hdr->dst_port);
   227b8:	1cbb      	adds	r3, r7, #2
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->dst_port),
   227ba:	9300      	str	r3, [sp, #0]
   227bc:	2302      	movs	r3, #2
   227be:	f10d 020e 	add.w	r2, sp, #14
   227c2:	f7fa fb8c 	bl	1cede <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->len),
   227c6:	f8bd 100e 	ldrh.w	r1, [sp, #14]
			     (u8_t *)&hdr->len);
   227ca:	1d3b      	adds	r3, r7, #4
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->len),
   227cc:	9300      	str	r3, [sp, #0]
   227ce:	2302      	movs	r3, #2
   227d0:	f10d 020e 	add.w	r2, sp, #14
   227d4:	f7fa fb83 	bl	1cede <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->chksum),
   227d8:	f8bd 100e 	ldrh.w	r1, [sp, #14]
			     (u8_t *)&hdr->chksum);
   227dc:	1dbb      	adds	r3, r7, #6
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->chksum),
   227de:	9300      	str	r3, [sp, #0]
   227e0:	2302      	movs	r3, #2
   227e2:	f10d 020e 	add.w	r2, sp, #14
   227e6:	f7fa fb7a 	bl	1cede <net_frag_read>
	if (!frag) {
   227ea:	b108      	cbz	r0, 227f0 <net_udp_get_hdr+0x7c>
	return hdr;
   227ec:	463c      	mov	r4, r7
   227ee:	e7d0      	b.n	22792 <net_udp_get_hdr+0x1e>
		return NULL;
   227f0:	4634      	mov	r4, r6
   227f2:	e7ce      	b.n	22792 <net_udp_get_hdr+0x1e>

000227f4 <net_udp_set_hdr>:

struct net_udp_hdr *net_udp_set_hdr(struct net_pkt *pkt,
				    struct net_udp_hdr *hdr)
{
   227f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   227f8:	b086      	sub	sp, #24
   227fa:	4606      	mov	r6, r0
   227fc:	460c      	mov	r4, r1
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   227fe:	2208      	movs	r2, #8
   22800:	f7fb f8b2 	bl	1d968 <net_header_fits>
   22804:	b128      	cbz	r0, 22812 <net_udp_set_hdr+0x1e>
		return hdr;
   22806:	4625      	mov	r5, r4
	struct net_buf *frag;
	u16_t pos;

	if (net_udp_header_fits(pkt, hdr)) {
   22808:	b12d      	cbz	r5, 22816 <net_udp_set_hdr+0x22>
		NET_ASSERT(frag);
		return NULL;
	}

	return hdr;
}
   2280a:	4620      	mov	r0, r4
   2280c:	b006      	add	sp, #24
   2280e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return NULL;
   22812:	2500      	movs	r5, #0
   22814:	e7f8      	b.n	22808 <net_udp_set_hdr+0x14>
	frag = net_pkt_write(pkt, pkt->frags, net_pkt_ip_hdr_len(pkt) +
   22816:	f896 1033 	ldrb.w	r1, [r6, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt),
   2281a:	f896 203b 	ldrb.w	r2, [r6, #59]	; 0x3b
	frag = net_pkt_write(pkt, pkt->frags, net_pkt_ip_hdr_len(pkt) +
   2281e:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
   22822:	f8cd 8008 	str.w	r8, [sp, #8]
   22826:	9401      	str	r4, [sp, #4]
   22828:	2702      	movs	r7, #2
   2282a:	9700      	str	r7, [sp, #0]
   2282c:	f10d 0316 	add.w	r3, sp, #22
   22830:	440a      	add	r2, r1
   22832:	68b1      	ldr	r1, [r6, #8]
   22834:	4630      	mov	r0, r6
   22836:	f7fa fbc4 	bl	1cfc2 <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->dst_port),
   2283a:	f8bd 2016 	ldrh.w	r2, [sp, #22]
			     (u8_t *)&hdr->dst_port, PKT_WAIT_TIME);
   2283e:	19e3      	adds	r3, r4, r7
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->dst_port),
   22840:	f8cd 8008 	str.w	r8, [sp, #8]
   22844:	9301      	str	r3, [sp, #4]
   22846:	9700      	str	r7, [sp, #0]
   22848:	f10d 0316 	add.w	r3, sp, #22
   2284c:	4601      	mov	r1, r0
   2284e:	4630      	mov	r0, r6
   22850:	f7fa fbb7 	bl	1cfc2 <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->len),
   22854:	f8bd 2016 	ldrh.w	r2, [sp, #22]
			     (u8_t *)&hdr->len, PKT_WAIT_TIME);
   22858:	1d23      	adds	r3, r4, #4
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->len),
   2285a:	f8cd 8008 	str.w	r8, [sp, #8]
   2285e:	9301      	str	r3, [sp, #4]
   22860:	9700      	str	r7, [sp, #0]
   22862:	f10d 0316 	add.w	r3, sp, #22
   22866:	4601      	mov	r1, r0
   22868:	4630      	mov	r0, r6
   2286a:	f7fa fbaa 	bl	1cfc2 <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->chksum),
   2286e:	f8bd 2016 	ldrh.w	r2, [sp, #22]
			     (u8_t *)&hdr->chksum, PKT_WAIT_TIME);
   22872:	1da3      	adds	r3, r4, #6
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->chksum),
   22874:	f8cd 8008 	str.w	r8, [sp, #8]
   22878:	9301      	str	r3, [sp, #4]
   2287a:	9700      	str	r7, [sp, #0]
   2287c:	f10d 0316 	add.w	r3, sp, #22
   22880:	4601      	mov	r1, r0
   22882:	4630      	mov	r0, r6
   22884:	f7fa fb9d 	bl	1cfc2 <net_pkt_write>
	if (!frag) {
   22888:	2800      	cmp	r0, #0
   2288a:	d1be      	bne.n	2280a <net_udp_set_hdr+0x16>
		return NULL;
   2288c:	462c      	mov	r4, r5
   2288e:	e7bc      	b.n	2280a <net_udp_set_hdr+0x16>

00022890 <net_udp_insert>:

struct net_pkt *net_udp_insert(struct net_context *context,
			       struct net_pkt *pkt,
			       u16_t offset,
			       u16_t port)
{
   22890:	b510      	push	{r4, lr}
   22892:	460c      	mov	r4, r1
   22894:	4611      	mov	r1, r2
	return net_udp_insert_raw(pkt,
   22896:	8942      	ldrh	r2, [r0, #10]
   22898:	4620      	mov	r0, r4
   2289a:	f7ff fe81 	bl	225a0 <net_udp_insert_raw>
				  offset,
				  net_sin((struct sockaddr *)
					  &context->local)->sin_port,
				  port);
}
   2289e:	bd10      	pop	{r4, pc}

000228a0 <net_udp_init>:
{
	return net_conn_unregister(handle);
}

void net_udp_init(void)
{
   228a0:	4770      	bx	lr

000228a2 <abort_connection>:
			pkt = net_pkt_ref(pkt);				\
		}							\
	} while (0)

static void abort_connection(struct net_tcp *tcp)
{
   228a2:	b538      	push	{r3, r4, r5, lr}
	struct net_context *ctx = tcp->context;
   228a4:	6804      	ldr	r4, [r0, #0]

	NET_DBG("[%p] segment retransmission exceeds %d, resetting context %p",
		tcp, CONFIG_NET_TCP_RETRY_COUNT, ctx);

	if (ctx->recv_cb) {
   228a6:	6b25      	ldr	r5, [r4, #48]	; 0x30
   228a8:	b12d      	cbz	r5, 228b6 <abort_connection+0x14>
		ctx->recv_cb(ctx, NULL, -ECONNRESET, tcp->recv_user_data);
   228aa:	6843      	ldr	r3, [r0, #4]
   228ac:	f06f 0267 	mvn.w	r2, #103	; 0x67
   228b0:	2100      	movs	r1, #0
   228b2:	4620      	mov	r0, r4
   228b4:	47a8      	blx	r5
	}

	net_context_unref(ctx);
   228b6:	4620      	mov	r0, r4
   228b8:	f7f9 fba8 	bl	1c00c <net_context_unref>
   228bc:	bd38      	pop	{r3, r4, r5, pc}

000228be <restart_timer>:

	return net_send_data(pkt);
}

static void restart_timer(struct net_tcp *tcp)
{
   228be:	b510      	push	{r4, lr}
   228c0:	4604      	mov	r4, r0
	return (!list->head);
   228c2:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
	if (!sys_slist_is_empty(&tcp->sent_list)) {
   228c6:	b17b      	cbz	r3, 228e8 <restart_timer+0x2a>
		tcp->flags |= NET_TCP_RETRYING;
   228c8:	f8b0 30a4 	ldrh.w	r3, [r0, #164]	; 0xa4
   228cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   228d0:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
		tcp->retry_timeout_shift = 0;
   228d4:	f36f 0304 	bfc	r3, #0, #5
   228d8:	f880 30a4 	strb.w	r3, [r0, #164]	; 0xa4
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_TIMER_START, k_timer_start, struct k_timer *, timer, s32_t, duration, s32_t, period);
   228dc:	2200      	movs	r2, #0
   228de:	21c8      	movs	r1, #200	; 0xc8
   228e0:	3058      	adds	r0, #88	; 0x58
   228e2:	f006 fb63 	bl	28fac <_impl_k_timer_start>
   228e6:	bd10      	pop	{r4, pc}
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_TIMER_STOP, k_timer_stop, struct k_timer *, timer);
   228e8:	3058      	adds	r0, #88	; 0x58
   228ea:	f006 fc17 	bl	2911c <_impl_k_timer_stop>
			k_timer_start(&tcp->retry_timer, TIME_WAIT_MS, 0);
			net_context_ref(tcp->context);
		}
	} else {
		k_timer_stop(&tcp->retry_timer);
		tcp->flags &= ~NET_TCP_RETRYING;
   228ee:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
   228f2:	f3c3 1247 	ubfx	r2, r3, #5, #8
   228f6:	f022 0210 	bic.w	r2, r2, #16
   228fa:	f362 134c 	bfi	r3, r2, #5, #8
   228fe:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
   22902:	bd10      	pop	{r4, pc}

00022904 <ack_timer_cancel>:
{
   22904:	b508      	push	{r3, lr}
	k_delayed_work_cancel(&tcp->ack_timer);
   22906:	3008      	adds	r0, #8
   22908:	f006 fd36 	bl	29378 <k_delayed_work_cancel>
   2290c:	bd08      	pop	{r3, pc}

0002290e <fin_timer_cancel>:
{
   2290e:	b508      	push	{r3, lr}
	k_delayed_work_cancel(&tcp->fin_timer);
   22910:	3030      	adds	r0, #48	; 0x30
   22912:	f006 fd31 	bl	29378 <k_delayed_work_cancel>
   22916:	bd08      	pop	{r3, pc}

00022918 <finalize_segment>:
{
   22918:	b508      	push	{r3, lr}
	return pkt->family;
   2291a:	f891 3038 	ldrb.w	r3, [r1, #56]	; 0x38
   2291e:	f3c3 03c3 	ubfx	r3, r3, #3, #4
	if (net_pkt_family(pkt) == AF_INET6) {
   22922:	2b0a      	cmp	r3, #10
   22924:	d001      	beq.n	2292a <finalize_segment+0x12>
	return 0;
   22926:	2000      	movs	r0, #0
}
   22928:	bd08      	pop	{r3, pc}
		return net_ipv6_finalize(context, pkt);
   2292a:	f7fc fe17 	bl	1f55c <net_ipv6_finalize>
   2292e:	bd08      	pop	{r3, pc}

00022930 <prepare_segment>:
{
   22930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22934:	b085      	sub	sp, #20
   22936:	4606      	mov	r6, r0
   22938:	460d      	mov	r5, r1
	struct net_context *context = tcp->context;
   2293a:	6807      	ldr	r7, [r0, #0]
	if (pkt) {
   2293c:	b192      	cbz	r2, 22964 <prepare_segment+0x34>
   2293e:	4614      	mov	r4, r2
		tail = pkt->frags;
   22940:	f8d2 8008 	ldr.w	r8, [r2, #8]
		pkt->frags = NULL;
   22944:	2300      	movs	r3, #0
   22946:	6093      	str	r3, [r2, #8]
		pkt_allocated = false;
   22948:	469a      	mov	sl, r3
   2294a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   2294e:	f3c3 03c3 	ubfx	r3, r3, #3, #4
	if (net_pkt_family(pkt) == AF_INET6) {
   22952:	2b0a      	cmp	r3, #10
   22954:	d013      	beq.n	2297e <prepare_segment+0x4e>
		if (pkt_allocated) {
   22956:	f1ba 0f00 	cmp.w	sl, #0
   2295a:	d174      	bne.n	22a46 <prepare_segment+0x116>
		return NULL;
   2295c:	2000      	movs	r0, #0
}
   2295e:	b005      	add	sp, #20
   22960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		pkt = net_pkt_get_tx(context, ALLOC_TIMEOUT);
   22964:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
   22968:	4638      	mov	r0, r7
   2296a:	f7fa f907 	bl	1cb7c <net_pkt_get_tx>
		if (!pkt) {
   2296e:	4604      	mov	r4, r0
   22970:	2800      	cmp	r0, #0
   22972:	d0f4      	beq.n	2295e <prepare_segment+0x2e>
		pkt_allocated = true;
   22974:	f04f 0a01 	mov.w	sl, #1
	struct net_buf *header, *tail = NULL;
   22978:	f04f 0800 	mov.w	r8, #0
   2297c:	e7e5      	b.n	2294a <prepare_segment+0x1a>
				net_sin6_ptr(segment->src_addr)->sin6_addr,
   2297e:	692a      	ldr	r2, [r5, #16]
				&(net_sin6(segment->dst_addr)->sin6_addr));
   22980:	696b      	ldr	r3, [r5, #20]
		net_ipv6_create(tcp->context, pkt,
   22982:	3304      	adds	r3, #4
   22984:	6852      	ldr	r2, [r2, #4]
   22986:	4621      	mov	r1, r4
   22988:	6830      	ldr	r0, [r6, #0]
   2298a:	f7fc fb8b 	bl	1f0a4 <net_ipv6_create>
		dst_port = net_sin6(segment->dst_addr)->sin6_port;
   2298e:	696b      	ldr	r3, [r5, #20]
   22990:	f8b3 b002 	ldrh.w	fp, [r3, #2]
		src_port = ((struct sockaddr_in6_ptr *)&context->local)->
   22994:	897b      	ldrh	r3, [r7, #10]
   22996:	9302      	str	r3, [sp, #8]
	return pkt->frags->data;
   22998:	68a3      	ldr	r3, [r4, #8]
   2299a:	689b      	ldr	r3, [r3, #8]
		NET_IPV6_HDR(pkt)->nexthdr = IPPROTO_TCP;
   2299c:	2206      	movs	r2, #6
   2299e:	719a      	strb	r2, [r3, #6]
	header = net_pkt_get_data(context, ALLOC_TIMEOUT);
   229a0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
   229a4:	4638      	mov	r0, r7
   229a6:	f7fa f8fb 	bl	1cba0 <net_pkt_get_data>
	if (!header) {
   229aa:	9001      	str	r0, [sp, #4]
   229ac:	2800      	cmp	r0, #0
   229ae:	d04f      	beq.n	22a50 <prepare_segment+0x120>
	net_pkt_frag_add(pkt, header);
   229b0:	9e01      	ldr	r6, [sp, #4]
   229b2:	4631      	mov	r1, r6
   229b4:	4620      	mov	r0, r4
   229b6:	f7fa f93e 	bl	1cc36 <net_pkt_frag_add>
	tcp_hdr = (struct net_tcp_hdr *)net_buf_add(header, NET_TCPH_LEN);
   229ba:	2114      	movs	r1, #20
   229bc:	f106 0008 	add.w	r0, r6, #8
   229c0:	f7f7 fbec 	bl	1a19c <net_buf_simple_add>
   229c4:	4606      	mov	r6, r0
	if (segment->options && segment->optlen) {
   229c6:	68eb      	ldr	r3, [r5, #12]
   229c8:	9303      	str	r3, [sp, #12]
   229ca:	2b00      	cmp	r3, #0
   229cc:	d05d      	beq.n	22a8a <prepare_segment+0x15a>
   229ce:	f895 900b 	ldrb.w	r9, [r5, #11]
   229d2:	f1b9 0f00 	cmp.w	r9, #0
   229d6:	d145      	bne.n	22a64 <prepare_segment+0x134>
	tcp_hdr->offset = (NET_TCPH_LEN + optlen) << 2;
   229d8:	f109 0914 	add.w	r9, r9, #20
   229dc:	fa5f f989 	uxtb.w	r9, r9
   229e0:	ea4f 0989 	mov.w	r9, r9, lsl #2
   229e4:	f886 900c 	strb.w	r9, [r6, #12]
	tcp_hdr->src_port = src_port;
   229e8:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   229ec:	8033      	strh	r3, [r6, #0]
	tcp_hdr->dst_port = dst_port;
   229ee:	f8a6 b002 	strh.w	fp, [r6, #2]
	sys_put_be32(segment->seq, tcp_hdr->seq);
   229f2:	682b      	ldr	r3, [r5, #0]
	sys_put_be16(val >> 16, dst);
   229f4:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val >> 8;
   229f6:	0a11      	lsrs	r1, r2, #8
   229f8:	7131      	strb	r1, [r6, #4]
	dst[1] = val;
   229fa:	7172      	strb	r2, [r6, #5]
	dst[0] = val >> 8;
   229fc:	f3c3 2207 	ubfx	r2, r3, #8, #8
   22a00:	71b2      	strb	r2, [r6, #6]
	dst[1] = val;
   22a02:	71f3      	strb	r3, [r6, #7]
	sys_put_be32(segment->ack, tcp_hdr->ack);
   22a04:	686b      	ldr	r3, [r5, #4]
	sys_put_be16(val >> 16, dst);
   22a06:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val >> 8;
   22a08:	0a11      	lsrs	r1, r2, #8
   22a0a:	7231      	strb	r1, [r6, #8]
	dst[1] = val;
   22a0c:	7272      	strb	r2, [r6, #9]
	dst[0] = val >> 8;
   22a0e:	f3c3 2207 	ubfx	r2, r3, #8, #8
   22a12:	72b2      	strb	r2, [r6, #10]
	dst[1] = val;
   22a14:	72f3      	strb	r3, [r6, #11]
	tcp_hdr->flags = segment->flags;
   22a16:	7aab      	ldrb	r3, [r5, #10]
   22a18:	7373      	strb	r3, [r6, #13]
	sys_put_be16(segment->wnd, tcp_hdr->wnd);
   22a1a:	892b      	ldrh	r3, [r5, #8]
	dst[0] = val >> 8;
   22a1c:	0a1a      	lsrs	r2, r3, #8
   22a1e:	73b2      	strb	r2, [r6, #14]
	dst[1] = val;
   22a20:	73f3      	strb	r3, [r6, #15]
	tcp_hdr->urg[0] = 0;
   22a22:	2300      	movs	r3, #0
   22a24:	74b3      	strb	r3, [r6, #18]
	tcp_hdr->urg[1] = 0;
   22a26:	74f3      	strb	r3, [r6, #19]
	if (tail) {
   22a28:	f1b8 0f00 	cmp.w	r8, #0
   22a2c:	d003      	beq.n	22a36 <prepare_segment+0x106>
		net_pkt_frag_add(pkt, tail);
   22a2e:	4641      	mov	r1, r8
   22a30:	4620      	mov	r0, r4
   22a32:	f7fa f900 	bl	1cc36 <net_pkt_frag_add>
	if (finalize_segment(context, pkt) < 0) {
   22a36:	4621      	mov	r1, r4
   22a38:	4638      	mov	r0, r7
   22a3a:	f7ff ff6d 	bl	22918 <finalize_segment>
   22a3e:	2800      	cmp	r0, #0
   22a40:	db26      	blt.n	22a90 <prepare_segment+0x160>
	return pkt;
   22a42:	4620      	mov	r0, r4
   22a44:	e78b      	b.n	2295e <prepare_segment+0x2e>
			net_pkt_unref(pkt);
   22a46:	4620      	mov	r0, r4
   22a48:	f7fa f8cb 	bl	1cbe2 <net_pkt_unref>
		return NULL;
   22a4c:	2000      	movs	r0, #0
   22a4e:	e786      	b.n	2295e <prepare_segment+0x2e>
		if (pkt_allocated) {
   22a50:	f1ba 0f00 	cmp.w	sl, #0
   22a54:	d101      	bne.n	22a5a <prepare_segment+0x12a>
		return NULL;
   22a56:	2000      	movs	r0, #0
   22a58:	e781      	b.n	2295e <prepare_segment+0x2e>
			net_pkt_unref(pkt);
   22a5a:	4620      	mov	r0, r4
   22a5c:	f7fa f8c1 	bl	1cbe2 <net_pkt_unref>
		return NULL;
   22a60:	2000      	movs	r0, #0
   22a62:	e77c      	b.n	2295e <prepare_segment+0x2e>
	memcpy(net_buf_add(header, len), data, len);
   22a64:	4649      	mov	r1, r9
   22a66:	9801      	ldr	r0, [sp, #4]
   22a68:	3008      	adds	r0, #8
   22a6a:	f7f7 fb97 	bl	1a19c <net_buf_simple_add>
   22a6e:	464a      	mov	r2, r9
   22a70:	9903      	ldr	r1, [sp, #12]
   22a72:	f7dd fc25 	bl	2c0 <memcpy>
	if ((len & 0x3u) != 0u) {
   22a76:	f019 0f03 	tst.w	r9, #3
   22a7a:	d0ad      	beq.n	229d8 <prepare_segment+0xa8>
		optlen = (len & 0xfffCu) + 4u;
   22a7c:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
   22a80:	f109 0904 	add.w	r9, r9, #4
   22a84:	fa5f f989 	uxtb.w	r9, r9
   22a88:	e7a6      	b.n	229d8 <prepare_segment+0xa8>
	u8_t optlen = 0;
   22a8a:	f04f 0900 	mov.w	r9, #0
   22a8e:	e7a3      	b.n	229d8 <prepare_segment+0xa8>
		if (pkt_allocated) {
   22a90:	f1ba 0f00 	cmp.w	sl, #0
   22a94:	d101      	bne.n	22a9a <prepare_segment+0x16a>
		return NULL;
   22a96:	2000      	movs	r0, #0
   22a98:	e761      	b.n	2295e <prepare_segment+0x2e>
			net_pkt_unref(pkt);
   22a9a:	4620      	mov	r0, r4
   22a9c:	f7fa f8a1 	bl	1cbe2 <net_pkt_unref>
		return NULL;
   22aa0:	2000      	movs	r0, #0
   22aa2:	e75c      	b.n	2295e <prepare_segment+0x2e>

00022aa4 <net_tcp_alloc>:
{
   22aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   22aa6:	f04f 0320 	mov.w	r3, #32
   22aaa:	f3ef 8411 	mrs	r4, BASEPRI
   22aae:	f383 8811 	msr	BASEPRI, r3
	for (i = 0; i < NET_MAX_TCP_CONTEXT; i++) {
   22ab2:	2300      	movs	r3, #0
   22ab4:	2b05      	cmp	r3, #5
   22ab6:	dc18      	bgt.n	22aea <net_tcp_alloc+0x46>
	return tcp->flags & NET_TCP_IN_USE;
   22ab8:	22c8      	movs	r2, #200	; 0xc8
   22aba:	492b      	ldr	r1, [pc, #172]	; (22b68 <net_tcp_alloc+0xc4>)
   22abc:	fb02 1203 	mla	r2, r2, r3, r1
   22ac0:	f8b2 20a4 	ldrh.w	r2, [r2, #164]	; 0xa4
   22ac4:	f3c2 1247 	ubfx	r2, r2, #5, #8
		if (!net_tcp_is_used(&tcp_context[i])) {
   22ac8:	f012 0f01 	tst.w	r2, #1
   22acc:	d001      	beq.n	22ad2 <net_tcp_alloc+0x2e>
	for (i = 0; i < NET_MAX_TCP_CONTEXT; i++) {
   22ace:	3301      	adds	r3, #1
   22ad0:	e7f0      	b.n	22ab4 <net_tcp_alloc+0x10>
			tcp_context[i].flags |= NET_TCP_IN_USE;
   22ad2:	21c8      	movs	r1, #200	; 0xc8
   22ad4:	4d24      	ldr	r5, [pc, #144]	; (22b68 <net_tcp_alloc+0xc4>)
   22ad6:	fb01 5103 	mla	r1, r1, r3, r5
   22ada:	f042 0201 	orr.w	r2, r2, #1
   22ade:	f8b1 50a4 	ldrh.w	r5, [r1, #164]	; 0xa4
   22ae2:	f362 154c 	bfi	r5, r2, #5, #8
   22ae6:	f8a1 50a4 	strh.w	r5, [r1, #164]	; 0xa4
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   22aea:	f384 8811 	msr	BASEPRI, r4
	if (i >= NET_MAX_TCP_CONTEXT) {
   22aee:	2b05      	cmp	r3, #5
   22af0:	dc37      	bgt.n	22b62 <net_tcp_alloc+0xbe>
   22af2:	4607      	mov	r7, r0
	memset(&tcp_context[i], 0, sizeof(struct net_tcp));
   22af4:	4e1c      	ldr	r6, [pc, #112]	; (22b68 <net_tcp_alloc+0xc4>)
   22af6:	22c8      	movs	r2, #200	; 0xc8
   22af8:	fb02 f403 	mul.w	r4, r2, r3
   22afc:	1935      	adds	r5, r6, r4
   22afe:	2100      	movs	r1, #0
   22b00:	4628      	mov	r0, r5
   22b02:	f007 ffbf 	bl	2aa84 <memset>
	tcp_context[i].flags = NET_TCP_IN_USE;
   22b06:	f8b5 20a4 	ldrh.w	r2, [r5, #164]	; 0xa4
   22b0a:	2101      	movs	r1, #1
   22b0c:	f361 124c 	bfi	r2, r1, #5, #8
   22b10:	f8a5 20a4 	strh.w	r2, [r5, #164]	; 0xa4
	tcp_context[i].state = NET_TCP_CLOSED;
   22b14:	f8d5 20a4 	ldr.w	r2, [r5, #164]	; 0xa4
   22b18:	f36f 3250 	bfc	r2, #13, #4
   22b1c:	f8c5 20a4 	str.w	r2, [r5, #164]	; 0xa4
	tcp_context[i].context = context;
   22b20:	5137      	str	r7, [r6, r4]
	return sys_rand32_get();
   22b22:	f7df fa77 	bl	2014 <sys_rand32_get>
	tcp_context[i].send_seq = tcp_init_isn();
   22b26:	f8c5 0098 	str.w	r0, [r5, #152]	; 0x98
	tcp_context[i].recv_max_ack = tcp_context[i].send_seq + 1u;
   22b2a:	3001      	adds	r0, #1
   22b2c:	f8c5 0094 	str.w	r0, [r5, #148]	; 0x94
	tcp_context[i].recv_wnd = min(NET_TCP_MAX_WIN, NET_TCP_BUF_MAX_LEN);
   22b30:	f44f 63a0 	mov.w	r3, #1280	; 0x500
   22b34:	f8a5 30c4 	strh.w	r3, [r5, #196]	; 0xc4
	tcp_context[i].accept_cb = NULL;
   22b38:	2700      	movs	r7, #0
   22b3a:	f8c5 70a8 	str.w	r7, [r5, #168]	; 0xa8
	k_timer_init(&tcp_context[i].retry_timer, tcp_retry_expired, NULL);
   22b3e:	f104 0058 	add.w	r0, r4, #88	; 0x58
   22b42:	463a      	mov	r2, r7
   22b44:	4909      	ldr	r1, [pc, #36]	; (22b6c <net_tcp_alloc+0xc8>)
   22b46:	4430      	add	r0, r6
   22b48:	f006 fa1c 	bl	28f84 <k_timer_init>
	k_sem_init(&tcp_context[i].connect_wait, 0, UINT_MAX);
   22b4c:	f104 03a8 	add.w	r3, r4, #168	; 0xa8
   22b50:	18f0      	adds	r0, r6, r3
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
   22b52:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   22b56:	4639      	mov	r1, r7
   22b58:	3004      	adds	r0, #4
   22b5a:	f005 fe15 	bl	28788 <_impl_k_sem_init>
}
   22b5e:	4628      	mov	r0, r5
   22b60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return NULL;
   22b62:	2500      	movs	r5, #0
   22b64:	e7fb      	b.n	22b5e <net_tcp_alloc+0xba>
   22b66:	bf00      	nop
   22b68:	20001ef8 	.word	0x20001ef8
   22b6c:	000234e1 	.word	0x000234e1

00022b70 <net_tcp_get_recv_wnd>:
}
   22b70:	f8b0 00c4 	ldrh.w	r0, [r0, #196]	; 0xc4
   22b74:	4770      	bx	lr

00022b76 <net_tcp_get_recv_mss>:
{
   22b76:	b508      	push	{r3, lr}
	sa_family_t family = net_context_get_family(tcp->context);
   22b78:	6802      	ldr	r2, [r0, #0]
	if (context->flags & NET_CONTEXT_FAMILY) {
   22b7a:	f892 305d 	ldrb.w	r3, [r2, #93]	; 0x5d
   22b7e:	f013 0f10 	tst.w	r3, #16
   22b82:	d006      	beq.n	22b92 <net_tcp_get_recv_mss+0x1c>
		return AF_INET6;
   22b84:	230a      	movs	r3, #10
	if (family == AF_INET) {
   22b86:	2b02      	cmp	r3, #2
   22b88:	d019      	beq.n	22bbe <net_tcp_get_recv_mss+0x48>
	else if (family == AF_INET6) {
   22b8a:	2b0a      	cmp	r3, #10
   22b8c:	d003      	beq.n	22b96 <net_tcp_get_recv_mss+0x20>
	return 0;
   22b8e:	2000      	movs	r0, #0
}
   22b90:	bd08      	pop	{r3, pc}
	return AF_INET;
   22b92:	2302      	movs	r3, #2
   22b94:	e7f7      	b.n	22b86 <net_tcp_get_recv_mss+0x10>
	return net_if_get_by_index(context->iface);
   22b96:	f892 005c 	ldrb.w	r0, [r2, #92]	; 0x5c
   22b9a:	f7f8 fddb 	bl	1b754 <net_if_get_by_index>
		if (iface && iface->mtu >= NET_IPV6TCPH_LEN) {
   22b9e:	b120      	cbz	r0, 22baa <net_tcp_get_recv_mss+0x34>
   22ba0:	8d00      	ldrh	r0, [r0, #40]	; 0x28
   22ba2:	283b      	cmp	r0, #59	; 0x3b
   22ba4:	d903      	bls.n	22bae <net_tcp_get_recv_mss+0x38>
			mss = iface->mtu - NET_IPV6TCPH_LEN;
   22ba6:	383c      	subs	r0, #60	; 0x3c
   22ba8:	e002      	b.n	22bb0 <net_tcp_get_recv_mss+0x3a>
		int mss = 0;
   22baa:	2000      	movs	r0, #0
   22bac:	e000      	b.n	22bb0 <net_tcp_get_recv_mss+0x3a>
   22bae:	2000      	movs	r0, #0
		if (mss < NET_IPV6_MTU) {
   22bb0:	f5b0 6fa0 	cmp.w	r0, #1280	; 0x500
   22bb4:	da01      	bge.n	22bba <net_tcp_get_recv_mss+0x44>
			mss = NET_IPV6_MTU;
   22bb6:	f44f 60a0 	mov.w	r0, #1280	; 0x500
		return mss;
   22bba:	b280      	uxth	r0, r0
   22bbc:	bd08      	pop	{r3, pc}
		return 0;
   22bbe:	2000      	movs	r0, #0
   22bc0:	bd08      	pop	{r3, pc}

00022bc2 <net_tcp_set_syn_opt>:
{
   22bc2:	b570      	push	{r4, r5, r6, lr}
   22bc4:	460e      	mov	r6, r1
   22bc6:	4614      	mov	r4, r2
	*optionlen = 0;
   22bc8:	2300      	movs	r3, #0
   22bca:	7013      	strb	r3, [r2, #0]
	if (!(tcp->flags & NET_TCP_RECV_MSS_SET)) {
   22bcc:	f8b0 30a4 	ldrh.w	r3, [r0, #164]	; 0xa4
   22bd0:	f413 6f80 	tst.w	r3, #1024	; 0x400
   22bd4:	d00f      	beq.n	22bf6 <net_tcp_set_syn_opt+0x34>
		recv_mss = 0;
   22bd6:	2000      	movs	r0, #0
	UNALIGNED_PUT(htonl((u32_t)recv_mss | NET_TCP_MSS_HEADER),
   22bd8:	7822      	ldrb	r2, [r4, #0]
   22bda:	0203      	lsls	r3, r0, #8
   22bdc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
   22be0:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
   22be4:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   22be8:	f040 0002 	orr.w	r0, r0, #2
   22bec:	50b0      	str	r0, [r6, r2]
	*optionlen += NET_TCP_MSS_SIZE;
   22bee:	7823      	ldrb	r3, [r4, #0]
   22bf0:	3304      	adds	r3, #4
   22bf2:	7023      	strb	r3, [r4, #0]
   22bf4:	bd70      	pop	{r4, r5, r6, pc}
   22bf6:	4605      	mov	r5, r0
		recv_mss = net_tcp_get_recv_mss(tcp);
   22bf8:	f7ff ffbd 	bl	22b76 <net_tcp_get_recv_mss>
		tcp->flags |= NET_TCP_RECV_MSS_SET;
   22bfc:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
   22c00:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   22c04:	f8a5 30a4 	strh.w	r3, [r5, #164]	; 0xa4
   22c08:	e7e6      	b.n	22bd8 <net_tcp_set_syn_opt+0x16>

00022c0a <net_tcp_prepare_reset>:
{
   22c0a:	b510      	push	{r4, lr}
   22c0c:	b086      	sub	sp, #24
	struct tcp_segment segment = { 0 };
   22c0e:	2300      	movs	r3, #0
   22c10:	9300      	str	r3, [sp, #0]
   22c12:	9301      	str	r3, [sp, #4]
   22c14:	9302      	str	r3, [sp, #8]
   22c16:	9303      	str	r3, [sp, #12]
   22c18:	9304      	str	r3, [sp, #16]
   22c1a:	9305      	str	r3, [sp, #20]
	if ((net_context_get_state(tcp->context) != NET_CONTEXT_UNCONNECTED) &&
   22c1c:	6803      	ldr	r3, [r0, #0]
	return (context->flags >> NET_CONTEXT_STATE_SHIFT) &
   22c1e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
   22c22:	f013 0f06 	tst.w	r3, #6
   22c26:	d01a      	beq.n	22c5e <net_tcp_prepare_reset+0x54>
	return (enum net_tcp_state)tcp->state;
   22c28:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
   22c2c:	f3c3 3343 	ubfx	r3, r3, #13, #4
   22c30:	2b02      	cmp	r3, #2
   22c32:	d014      	beq.n	22c5e <net_tcp_prepare_reset+0x54>
	    (net_tcp_get_state(tcp) != NET_TCP_SYN_SENT) &&
   22c34:	2b09      	cmp	r3, #9
   22c36:	d012      	beq.n	22c5e <net_tcp_prepare_reset+0x54>
   22c38:	4614      	mov	r4, r2
		segment.ack = tcp->send_ack;
   22c3a:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
   22c3e:	9301      	str	r3, [sp, #4]
		segment.flags = NET_TCP_RST | NET_TCP_ACK;
   22c40:	2314      	movs	r3, #20
   22c42:	f88d 300a 	strb.w	r3, [sp, #10]
		segment.seq = tcp->send_seq;
   22c46:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
   22c4a:	9300      	str	r3, [sp, #0]
		segment.src_addr = &tcp->context->local;
   22c4c:	6803      	ldr	r3, [r0, #0]
   22c4e:	3308      	adds	r3, #8
   22c50:	9304      	str	r3, [sp, #16]
		segment.dst_addr = remote;
   22c52:	9105      	str	r1, [sp, #20]
		*pkt = prepare_segment(tcp, &segment, NULL);
   22c54:	2200      	movs	r2, #0
   22c56:	4669      	mov	r1, sp
   22c58:	f7ff fe6a 	bl	22930 <prepare_segment>
   22c5c:	6020      	str	r0, [r4, #0]
}
   22c5e:	2000      	movs	r0, #0
   22c60:	b006      	add	sp, #24
   22c62:	bd10      	pop	{r4, pc}

00022c64 <net_tcp_state_str>:
}
   22c64:	4800      	ldr	r0, [pc, #0]	; (22c68 <net_tcp_state_str+0x4>)
   22c66:	4770      	bx	lr
   22c68:	0002f390 	.word	0x0002f390

00022c6c <net_tcp_init>:
		}
	}
}

void net_tcp_init(void)
{
   22c6c:	4770      	bx	lr

00022c6e <net_tcp_change_state>:
   22c6e:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
   22c72:	f3c3 3343 	ubfx	r3, r3, #13, #4
void net_tcp_change_state(struct net_tcp *tcp,
			  enum net_tcp_state new_state)
{
	NET_ASSERT(tcp);

	if (net_tcp_get_state(tcp) == new_state) {
   22c76:	428b      	cmp	r3, r1
   22c78:	d022      	beq.n	22cc0 <net_tcp_change_state+0x52>

#if defined(CONFIG_NET_DEBUG_TCP)
	validate_state_transition(tcp->state, new_state);
#endif /* CONFIG_NET_DEBUG_TCP */

	tcp->state = new_state;
   22c7a:	f001 010f 	and.w	r1, r1, #15
   22c7e:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
   22c82:	f361 3350 	bfi	r3, r1, #13, #4
   22c86:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4

	if (net_tcp_get_state(tcp) != NET_TCP_CLOSED) {
   22c8a:	b9c9      	cbnz	r1, 22cc0 <net_tcp_change_state+0x52>
		return;
	}

	if (!tcp->context) {
   22c8c:	6803      	ldr	r3, [r0, #0]
   22c8e:	b1bb      	cbz	r3, 22cc0 <net_tcp_change_state+0x52>
{
   22c90:	b530      	push	{r4, r5, lr}
   22c92:	b083      	sub	sp, #12
   22c94:	4604      	mov	r4, r0
		return;
	}

	/* Remove any port handlers if we are closing */
	if (tcp->context->conn_handler) {
   22c96:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
   22c98:	b120      	cbz	r0, 22ca4 <net_tcp_change_state+0x36>
	return net_conn_unregister(handle);
   22c9a:	f001 fcef 	bl	2467c <net_conn_unregister>
		net_tcp_unregister(tcp->context->conn_handler);
		tcp->context->conn_handler = NULL;
   22c9e:	6823      	ldr	r3, [r4, #0]
   22ca0:	2200      	movs	r2, #0
   22ca2:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	if (tcp->accept_cb) {
   22ca4:	f8d4 50a8 	ldr.w	r5, [r4, #168]	; 0xa8
   22ca8:	b145      	cbz	r5, 22cbc <net_tcp_change_state+0x4e>
		tcp->accept_cb(tcp->context,
   22caa:	6820      	ldr	r0, [r4, #0]
   22cac:	6803      	ldr	r3, [r0, #0]
   22cae:	9300      	str	r3, [sp, #0]
   22cb0:	f06f 037d 	mvn.w	r3, #125	; 0x7d
   22cb4:	2218      	movs	r2, #24
   22cb6:	f100 0114 	add.w	r1, r0, #20
   22cba:	47a8      	blx	r5
			       &tcp->context->remote,
			       sizeof(struct sockaddr),
			       -ENETRESET,
			       tcp->context->user_data);
	}
}
   22cbc:	b003      	add	sp, #12
   22cbe:	bd30      	pop	{r4, r5, pc}
   22cc0:	4770      	bx	lr
	...

00022cc4 <net_tcp_release>:
	if (!PART_OF_ARRAY(tcp_context, tcp)) {
   22cc4:	2800      	cmp	r0, #0
   22cc6:	d064      	beq.n	22d92 <net_tcp_release+0xce>
{
   22cc8:	b538      	push	{r3, r4, r5, lr}
   22cca:	4605      	mov	r5, r0
	if (!PART_OF_ARRAY(tcp_context, tcp)) {
   22ccc:	4b35      	ldr	r3, [pc, #212]	; (22da4 <net_tcp_release+0xe0>)
   22cce:	4298      	cmp	r0, r3
   22cd0:	d362      	bcc.n	22d98 <net_tcp_release+0xd4>
   22cd2:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
   22cd6:	4298      	cmp	r0, r3
   22cd8:	d261      	bcs.n	22d9e <net_tcp_release+0xda>
	return list->head;
   22cda:	f8d0 008c 	ldr.w	r0, [r0, #140]	; 0x8c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&tcp->sent_list, pkt, tmp,
   22cde:	b140      	cbz	r0, 22cf2 <net_tcp_release+0x2e>
   22ce0:	3834      	subs	r0, #52	; 0x34
   22ce2:	b140      	cbz	r0, 22cf6 <net_tcp_release+0x32>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   22ce4:	f110 0434 	adds.w	r4, r0, #52	; 0x34
   22ce8:	d000      	beq.n	22cec <net_tcp_release+0x28>
	return node->next;
   22cea:	6b44      	ldr	r4, [r0, #52]	; 0x34
   22cec:	b12c      	cbz	r4, 22cfa <net_tcp_release+0x36>
   22cee:	3c34      	subs	r4, #52	; 0x34
   22cf0:	e00d      	b.n	22d0e <net_tcp_release+0x4a>
   22cf2:	2000      	movs	r0, #0
   22cf4:	e7f5      	b.n	22ce2 <net_tcp_release+0x1e>
   22cf6:	4604      	mov	r4, r0
   22cf8:	e009      	b.n	22d0e <net_tcp_release+0x4a>
   22cfa:	2400      	movs	r4, #0
   22cfc:	e007      	b.n	22d0e <net_tcp_release+0x4a>
			list->tail = list->head;
   22cfe:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90
   22d02:	e00e      	b.n	22d22 <net_tcp_release+0x5e>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   22d04:	461a      	mov	r2, r3
   22d06:	e015      	b.n	22d34 <net_tcp_release+0x70>
   22d08:	3b34      	subs	r3, #52	; 0x34
   22d0a:	4620      	mov	r0, r4
   22d0c:	461c      	mov	r4, r3
   22d0e:	b1d0      	cbz	r0, 22d46 <net_tcp_release+0x82>
		sys_slist_remove(&tcp->sent_list, NULL, &pkt->sent_list);
   22d10:	f100 0334 	add.w	r3, r0, #52	; 0x34
		list->head = node->next;
   22d14:	6b42      	ldr	r2, [r0, #52]	; 0x34
   22d16:	f8c5 208c 	str.w	r2, [r5, #140]	; 0x8c
		if (list->tail == node) {
   22d1a:	f8d5 1090 	ldr.w	r1, [r5, #144]	; 0x90
   22d1e:	428b      	cmp	r3, r1
   22d20:	d0ed      	beq.n	22cfe <net_tcp_release+0x3a>
	node->next = NULL;
   22d22:	2300      	movs	r3, #0
   22d24:	6343      	str	r3, [r0, #52]	; 0x34
		net_pkt_unref(pkt);
   22d26:	f7f9 ff5c 	bl	1cbe2 <net_pkt_unref>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&tcp->sent_list, pkt, tmp,
   22d2a:	b144      	cbz	r4, 22d3e <net_tcp_release+0x7a>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   22d2c:	f114 0334 	adds.w	r3, r4, #52	; 0x34
   22d30:	d0e8      	beq.n	22d04 <net_tcp_release+0x40>
	return node->next;
   22d32:	6b62      	ldr	r2, [r4, #52]	; 0x34
   22d34:	b12a      	cbz	r2, 22d42 <net_tcp_release+0x7e>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   22d36:	2b00      	cmp	r3, #0
   22d38:	d0e6      	beq.n	22d08 <net_tcp_release+0x44>
	return node->next;
   22d3a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   22d3c:	e7e4      	b.n	22d08 <net_tcp_release+0x44>
   22d3e:	4623      	mov	r3, r4
   22d40:	e7e3      	b.n	22d0a <net_tcp_release+0x46>
   22d42:	2300      	movs	r3, #0
   22d44:	e7e1      	b.n	22d0a <net_tcp_release+0x46>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_TIMER_STOP, k_timer_stop, struct k_timer *, timer);
   22d46:	f105 0058 	add.w	r0, r5, #88	; 0x58
   22d4a:	f006 f9e7 	bl	2911c <_impl_k_timer_stop>
	sem->count = 0;
   22d4e:	2400      	movs	r4, #0
   22d50:	f8c5 40b4 	str.w	r4, [r5, #180]	; 0xb4
	ack_timer_cancel(tcp);
   22d54:	4628      	mov	r0, r5
   22d56:	f7ff fdd5 	bl	22904 <ack_timer_cancel>
	fin_timer_cancel(tcp);
   22d5a:	4628      	mov	r0, r5
   22d5c:	f7ff fdd7 	bl	2290e <fin_timer_cancel>
	net_tcp_change_state(tcp, NET_TCP_CLOSED);
   22d60:	4621      	mov	r1, r4
   22d62:	4628      	mov	r0, r5
   22d64:	f7ff ff83 	bl	22c6e <net_tcp_change_state>
	tcp->context = NULL;
   22d68:	602c      	str	r4, [r5, #0]
	__asm__ volatile(
   22d6a:	f04f 0320 	mov.w	r3, #32
   22d6e:	f3ef 8111 	mrs	r1, BASEPRI
   22d72:	f383 8811 	msr	BASEPRI, r3
	tcp->flags &= ~(NET_TCP_IN_USE | NET_TCP_RECV_MSS_SET);
   22d76:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
   22d7a:	f3c3 1247 	ubfx	r2, r3, #5, #8
   22d7e:	f022 0221 	bic.w	r2, r2, #33	; 0x21
   22d82:	f362 134c 	bfi	r3, r2, #5, #8
   22d86:	f8a5 30a4 	strh.w	r3, [r5, #164]	; 0xa4
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   22d8a:	f381 8811 	msr	BASEPRI, r1
	return 0;
   22d8e:	4620      	mov	r0, r4
   22d90:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   22d92:	f06f 0015 	mvn.w	r0, #21
   22d96:	4770      	bx	lr
   22d98:	f06f 0015 	mvn.w	r0, #21
   22d9c:	bd38      	pop	{r3, r4, r5, pc}
   22d9e:	f06f 0015 	mvn.w	r0, #21
}
   22da2:	bd38      	pop	{r3, r4, r5, pc}
   22da4:	20001ef8 	.word	0x20001ef8

00022da8 <net_tcp_prepare_segment>:
{
   22da8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   22dac:	b086      	sub	sp, #24
   22dae:	4604      	mov	r4, r0
   22db0:	460d      	mov	r5, r1
   22db2:	4692      	mov	sl, r2
   22db4:	4699      	mov	r9, r3
   22db6:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   22db8:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
	struct tcp_segment segment = { 0 };
   22dbc:	2300      	movs	r3, #0
   22dbe:	9300      	str	r3, [sp, #0]
   22dc0:	9301      	str	r3, [sp, #4]
   22dc2:	9302      	str	r3, [sp, #8]
   22dc4:	9303      	str	r3, [sp, #12]
   22dc6:	9304      	str	r3, [sp, #16]
   22dc8:	9305      	str	r3, [sp, #20]
	if (!local) {
   22dca:	2f00      	cmp	r7, #0
   22dcc:	d050      	beq.n	22e70 <net_tcp_prepare_segment+0xc8>
	seq = tcp->send_seq;
   22dce:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
	if (flags & NET_TCP_ACK) {
   22dd2:	f015 0f10 	tst.w	r5, #16
   22dd6:	d009      	beq.n	22dec <net_tcp_prepare_segment+0x44>
	return (enum net_tcp_state)tcp->state;
   22dd8:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   22ddc:	f3c3 3343 	ubfx	r3, r3, #13, #4
		if (net_tcp_get_state(tcp) == NET_TCP_FIN_WAIT_1) {
   22de0:	2b07      	cmp	r3, #7
   22de2:	d048      	beq.n	22e76 <net_tcp_prepare_segment+0xce>
		} else if (net_tcp_get_state(tcp) == NET_TCP_FIN_WAIT_2) {
   22de4:	2b08      	cmp	r3, #8
   22de6:	d055      	beq.n	22e94 <net_tcp_prepare_segment+0xec>
		} else if (net_tcp_get_state(tcp) == NET_TCP_CLOSE_WAIT) {
   22de8:	2b05      	cmp	r3, #5
   22dea:	d058      	beq.n	22e9e <net_tcp_prepare_segment+0xf6>
	if (flags & NET_TCP_FIN) {
   22dec:	f015 0f01 	tst.w	r5, #1
   22df0:	d010      	beq.n	22e14 <net_tcp_prepare_segment+0x6c>
		tcp->flags |= NET_TCP_FINAL_SENT;
   22df2:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
   22df6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   22dfa:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
		flags |= NET_TCP_ACK;
   22dfe:	f045 0510 	orr.w	r5, r5, #16
		seq += 2;
   22e02:	3602      	adds	r6, #2
   22e04:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   22e08:	f3c3 3343 	ubfx	r3, r3, #13, #4
		if (net_tcp_get_state(tcp) == NET_TCP_ESTABLISHED ||
   22e0c:	2b04      	cmp	r3, #4
   22e0e:	d053      	beq.n	22eb8 <net_tcp_prepare_segment+0x110>
   22e10:	2b03      	cmp	r3, #3
   22e12:	d051      	beq.n	22eb8 <net_tcp_prepare_segment+0x110>
	if (flags & NET_TCP_SYN) {
   22e14:	f015 0f02 	tst.w	r5, #2
   22e18:	d000      	beq.n	22e1c <net_tcp_prepare_segment+0x74>
		seq++;
   22e1a:	3601      	adds	r6, #1
	wnd = net_tcp_get_recv_wnd(tcp);
   22e1c:	4620      	mov	r0, r4
   22e1e:	f7ff fea7 	bl	22b70 <net_tcp_get_recv_wnd>
	segment.src_addr = (struct sockaddr_ptr *)local;
   22e22:	9704      	str	r7, [sp, #16]
	segment.dst_addr = remote;
   22e24:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   22e26:	9305      	str	r3, [sp, #20]
	segment.seq = tcp->send_seq;
   22e28:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   22e2c:	9300      	str	r3, [sp, #0]
	segment.ack = tcp->send_ack;
   22e2e:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
   22e32:	9301      	str	r3, [sp, #4]
	segment.flags = flags;
   22e34:	f88d 500a 	strb.w	r5, [sp, #10]
	segment.wnd = wnd;
   22e38:	f8ad 0008 	strh.w	r0, [sp, #8]
	segment.options = options;
   22e3c:	f8cd a00c 	str.w	sl, [sp, #12]
	segment.optlen = optlen;
   22e40:	f88d 900b 	strb.w	r9, [sp, #11]
	*send_pkt = prepare_segment(tcp, &segment, *send_pkt);
   22e44:	f8d8 2000 	ldr.w	r2, [r8]
   22e48:	4669      	mov	r1, sp
   22e4a:	4620      	mov	r0, r4
   22e4c:	f7ff fd70 	bl	22930 <prepare_segment>
   22e50:	f8c8 0000 	str.w	r0, [r8]
	if (!*send_pkt) {
   22e54:	b3a8      	cbz	r0, 22ec2 <net_tcp_prepare_segment+0x11a>
	tcp->send_seq = seq;
   22e56:	f8c4 6098 	str.w	r6, [r4, #152]	; 0x98
	if (net_tcp_seq_greater(tcp->send_seq, tcp->recv_max_ack)) {
   22e5a:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
	return (s32_t)(seq1 - seq2);
   22e5e:	1af3      	subs	r3, r6, r3
   22e60:	2b00      	cmp	r3, #0
   22e62:	dd31      	ble.n	22ec8 <net_tcp_prepare_segment+0x120>
		tcp->recv_max_ack = tcp->send_seq;
   22e64:	f8c4 6094 	str.w	r6, [r4, #148]	; 0x94
	return 0;
   22e68:	2000      	movs	r0, #0
}
   22e6a:	b006      	add	sp, #24
   22e6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		local = &tcp->context->local;
   22e70:	6807      	ldr	r7, [r0, #0]
   22e72:	3708      	adds	r7, #8
   22e74:	e7ab      	b.n	22dce <net_tcp_prepare_segment+0x26>
			if (flags & NET_TCP_FIN) {
   22e76:	f015 0f01 	tst.w	r5, #1
   22e7a:	d006      	beq.n	22e8a <net_tcp_prepare_segment+0xe2>
				flags &= ~NET_TCP_FIN;
   22e7c:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
				net_tcp_change_state(tcp, NET_TCP_TIME_WAIT);
   22e80:	2109      	movs	r1, #9
   22e82:	4620      	mov	r0, r4
   22e84:	f7ff fef3 	bl	22c6e <net_tcp_change_state>
   22e88:	e7b0      	b.n	22dec <net_tcp_prepare_segment+0x44>
				net_tcp_change_state(tcp, NET_TCP_CLOSING);
   22e8a:	210a      	movs	r1, #10
   22e8c:	4620      	mov	r0, r4
   22e8e:	f7ff feee 	bl	22c6e <net_tcp_change_state>
   22e92:	e7ab      	b.n	22dec <net_tcp_prepare_segment+0x44>
			net_tcp_change_state(tcp, NET_TCP_TIME_WAIT);
   22e94:	2109      	movs	r1, #9
   22e96:	4620      	mov	r0, r4
   22e98:	f7ff fee9 	bl	22c6e <net_tcp_change_state>
   22e9c:	e7a6      	b.n	22dec <net_tcp_prepare_segment+0x44>
			tcp->flags |= NET_TCP_IS_SHUTDOWN;
   22e9e:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
   22ea2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   22ea6:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
			flags |= NET_TCP_FIN;
   22eaa:	f045 0501 	orr.w	r5, r5, #1
			net_tcp_change_state(tcp, NET_TCP_LAST_ACK);
   22eae:	2106      	movs	r1, #6
   22eb0:	4620      	mov	r0, r4
   22eb2:	f7ff fedc 	bl	22c6e <net_tcp_change_state>
   22eb6:	e799      	b.n	22dec <net_tcp_prepare_segment+0x44>
			net_tcp_change_state(tcp, NET_TCP_FIN_WAIT_1);
   22eb8:	2107      	movs	r1, #7
   22eba:	4620      	mov	r0, r4
   22ebc:	f7ff fed7 	bl	22c6e <net_tcp_change_state>
   22ec0:	e7a8      	b.n	22e14 <net_tcp_prepare_segment+0x6c>
		return -EINVAL;
   22ec2:	f06f 0015 	mvn.w	r0, #21
   22ec6:	e7d0      	b.n	22e6a <net_tcp_prepare_segment+0xc2>
	return 0;
   22ec8:	2000      	movs	r0, #0
   22eca:	e7ce      	b.n	22e6a <net_tcp_prepare_segment+0xc2>

00022ecc <net_tcp_prepare_ack>:
{
   22ecc:	b570      	push	{r4, r5, r6, lr}
   22ece:	b088      	sub	sp, #32
   22ed0:	4604      	mov	r4, r0
   22ed2:	460d      	mov	r5, r1
   22ed4:	4616      	mov	r6, r2
   22ed6:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
   22eda:	f3c3 3343 	ubfx	r3, r3, #13, #4
	switch (net_tcp_get_state(tcp)) {
   22ede:	2b03      	cmp	r3, #3
   22ee0:	d011      	beq.n	22f06 <net_tcp_prepare_ack+0x3a>
   22ee2:	d327      	bcc.n	22f34 <net_tcp_prepare_ack+0x68>
   22ee4:	3b06      	subs	r3, #6
   22ee6:	2b01      	cmp	r3, #1
   22ee8:	d824      	bhi.n	22f34 <net_tcp_prepare_ack+0x68>
		tcp->send_seq--;
   22eea:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
   22eee:	3b01      	subs	r3, #1
   22ef0:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
		return net_tcp_prepare_segment(tcp, NET_TCP_FIN | NET_TCP_ACK,
   22ef4:	9202      	str	r2, [sp, #8]
   22ef6:	9101      	str	r1, [sp, #4]
   22ef8:	2200      	movs	r2, #0
   22efa:	9200      	str	r2, [sp, #0]
   22efc:	4613      	mov	r3, r2
   22efe:	2111      	movs	r1, #17
   22f00:	f7ff ff52 	bl	22da8 <net_tcp_prepare_segment>
   22f04:	e014      	b.n	22f30 <net_tcp_prepare_ack+0x64>
		tcp->send_seq--;
   22f06:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
   22f0a:	3b01      	subs	r3, #1
   22f0c:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
		net_tcp_set_syn_opt(tcp, options, &optionlen);
   22f10:	f10d 0217 	add.w	r2, sp, #23
   22f14:	a906      	add	r1, sp, #24
   22f16:	f7ff fe54 	bl	22bc2 <net_tcp_set_syn_opt>
		return net_tcp_prepare_segment(tcp, NET_TCP_SYN | NET_TCP_ACK,
   22f1a:	f89d 3017 	ldrb.w	r3, [sp, #23]
   22f1e:	9602      	str	r6, [sp, #8]
   22f20:	9501      	str	r5, [sp, #4]
   22f22:	2200      	movs	r2, #0
   22f24:	9200      	str	r2, [sp, #0]
   22f26:	aa06      	add	r2, sp, #24
   22f28:	2112      	movs	r1, #18
   22f2a:	4620      	mov	r0, r4
   22f2c:	f7ff ff3c 	bl	22da8 <net_tcp_prepare_segment>
}
   22f30:	b008      	add	sp, #32
   22f32:	bd70      	pop	{r4, r5, r6, pc}
		return net_tcp_prepare_segment(tcp, NET_TCP_ACK, 0, 0, NULL,
   22f34:	9602      	str	r6, [sp, #8]
   22f36:	9501      	str	r5, [sp, #4]
   22f38:	2200      	movs	r2, #0
   22f3a:	9200      	str	r2, [sp, #0]
   22f3c:	4613      	mov	r3, r2
   22f3e:	2110      	movs	r1, #16
   22f40:	4620      	mov	r0, r4
   22f42:	f7ff ff31 	bl	22da8 <net_tcp_prepare_segment>
   22f46:	e7f3      	b.n	22f30 <net_tcp_prepare_ack+0x64>

00022f48 <net_tcp_queue_data>:
{
   22f48:	b570      	push	{r4, r5, r6, lr}
   22f4a:	b086      	sub	sp, #24
   22f4c:	4605      	mov	r5, r0
   22f4e:	9105      	str	r1, [sp, #20]
	struct net_conn *conn = (struct net_conn *)context->conn_handler;
   22f50:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
	return net_buf_frags_len(pkt->frags);
   22f52:	688b      	ldr	r3, [r1, #8]
	size_t bytes = 0;
   22f54:	2400      	movs	r4, #0
   22f56:	e002      	b.n	22f5e <net_tcp_queue_data+0x16>
		bytes += buf->len;
   22f58:	899a      	ldrh	r2, [r3, #12]
   22f5a:	4414      	add	r4, r2
		buf = buf->frags;
   22f5c:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   22f5e:	2b00      	cmp	r3, #0
   22f60:	d1fa      	bne.n	22f58 <net_tcp_queue_data+0x10>
	ret = net_tcp_prepare_segment(context->tcp, NET_TCP_PSH | NET_TCP_ACK,
   22f62:	ab05      	add	r3, sp, #20
   22f64:	9302      	str	r3, [sp, #8]
   22f66:	9001      	str	r0, [sp, #4]
   22f68:	2200      	movs	r2, #0
   22f6a:	9200      	str	r2, [sp, #0]
   22f6c:	4613      	mov	r3, r2
   22f6e:	2118      	movs	r1, #24
   22f70:	6e28      	ldr	r0, [r5, #96]	; 0x60
   22f72:	f7ff ff19 	bl	22da8 <net_tcp_prepare_segment>
	if (ret) {
   22f76:	4606      	mov	r6, r0
   22f78:	bb10      	cbnz	r0, 22fc0 <net_tcp_queue_data+0x78>
	context->tcp->send_seq += data_len;
   22f7a:	6e2a      	ldr	r2, [r5, #96]	; 0x60
   22f7c:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
   22f80:	4423      	add	r3, r4
   22f82:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
	net_stats.tcp.bytes.sent += bytes;
   22f86:	4a1b      	ldr	r2, [pc, #108]	; (22ff4 <net_tcp_queue_data+0xac>)
   22f88:	6c93      	ldr	r3, [r2, #72]	; 0x48
   22f8a:	441c      	add	r4, r3
   22f8c:	6494      	str	r4, [r2, #72]	; 0x48
	sys_slist_append(&context->tcp->sent_list, &pkt->sent_list);
   22f8e:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   22f90:	9905      	ldr	r1, [sp, #20]
   22f92:	f101 0234 	add.w	r2, r1, #52	; 0x34
	node->next = NULL;
   22f96:	6348      	str	r0, [r1, #52]	; 0x34
	if (!list->tail) {
   22f98:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
   22f9c:	b199      	cbz	r1, 22fc6 <net_tcp_queue_data+0x7e>
		list->tail->next = node;
   22f9e:	600a      	str	r2, [r1, #0]
		list->tail = node;
   22fa0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	if (k_timer_remaining_get(&context->tcp->retry_timer) == 0) {
   22fa4:	6e28      	ldr	r0, [r5, #96]	; 0x60
	return _timeout_remaining_get(&timer->timeout);
   22fa6:	3058      	adds	r0, #88	; 0x58
   22fa8:	f006 f942 	bl	29230 <_timeout_remaining_get>
   22fac:	b180      	cbz	r0, 22fd0 <net_tcp_queue_data+0x88>
	do_ref_if_needed(context->tcp, pkt);
   22fae:	9805      	ldr	r0, [sp, #20]
	return pkt->family;
   22fb0:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   22fb4:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   22fb8:	2b0a      	cmp	r3, #10
   22fba:	d015      	beq.n	22fe8 <net_tcp_queue_data+0xa0>
   22fbc:	f7f9 fe02 	bl	1cbc4 <net_pkt_ref>
}
   22fc0:	4630      	mov	r0, r6
   22fc2:	b006      	add	sp, #24
   22fc4:	bd70      	pop	{r4, r5, r6, pc}
		list->tail = node;
   22fc6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		list->head = node;
   22fca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
   22fce:	e7e9      	b.n	22fa4 <net_tcp_queue_data+0x5c>
		k_timer_start(&context->tcp->retry_timer,
   22fd0:	6e28      	ldr	r0, [r5, #96]	; 0x60
	return ((u32_t)1 << tcp->retry_timeout_shift) * INIT_RETRY_MS;
   22fd2:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
   22fd6:	f003 031f 	and.w	r3, r3, #31
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_TIMER_START, k_timer_start, struct k_timer *, timer, s32_t, duration, s32_t, period);
   22fda:	2200      	movs	r2, #0
   22fdc:	21c8      	movs	r1, #200	; 0xc8
   22fde:	4099      	lsls	r1, r3
   22fe0:	3058      	adds	r0, #88	; 0x58
   22fe2:	f005 ffe3 	bl	28fac <_impl_k_timer_start>
   22fe6:	e7e2      	b.n	22fae <net_tcp_queue_data+0x66>
	do_ref_if_needed(context->tcp, pkt);
   22fe8:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
   22fec:	2b02      	cmp	r3, #2
   22fee:	d1e5      	bne.n	22fbc <net_tcp_queue_data+0x74>
   22ff0:	e7e6      	b.n	22fc0 <net_tcp_queue_data+0x78>
   22ff2:	bf00      	nop
   22ff4:	200029e8 	.word	0x200029e8

00022ff8 <net_tcp_foreach>:

void net_tcp_foreach(net_tcp_cb_t cb, void *user_data)
{
   22ff8:	b570      	push	{r4, r5, r6, lr}
   22ffa:	4606      	mov	r6, r0
   22ffc:	460d      	mov	r5, r1
	__asm__ volatile(
   22ffe:	f04f 0320 	mov.w	r3, #32
   23002:	f3ef 8111 	mrs	r1, BASEPRI
   23006:	f383 8811 	msr	BASEPRI, r3
	int i, key;

	key = irq_lock();

	for (i = 0; i < NET_MAX_TCP_CONTEXT; i++) {
   2300a:	2400      	movs	r4, #0
   2300c:	e000      	b.n	23010 <net_tcp_foreach+0x18>
   2300e:	3401      	adds	r4, #1
   23010:	2c05      	cmp	r4, #5
   23012:	dc16      	bgt.n	23042 <net_tcp_foreach+0x4a>
	return tcp->flags & NET_TCP_IN_USE;
   23014:	23c8      	movs	r3, #200	; 0xc8
   23016:	4a0c      	ldr	r2, [pc, #48]	; (23048 <net_tcp_foreach+0x50>)
   23018:	fb03 2304 	mla	r3, r3, r4, r2
   2301c:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
		if (!net_tcp_is_used(&tcp_context[i])) {
   23020:	f013 0f20 	tst.w	r3, #32
   23024:	d0f3      	beq.n	2300e <net_tcp_foreach+0x16>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   23026:	f381 8811 	msr	BASEPRI, r1
			continue;
		}

		irq_unlock(key);

		cb(&tcp_context[i], user_data);
   2302a:	4629      	mov	r1, r5
   2302c:	20c8      	movs	r0, #200	; 0xc8
   2302e:	fb00 2004 	mla	r0, r0, r4, r2
   23032:	47b0      	blx	r6
	__asm__ volatile(
   23034:	f04f 0320 	mov.w	r3, #32
   23038:	f3ef 8111 	mrs	r1, BASEPRI
   2303c:	f383 8811 	msr	BASEPRI, r3
   23040:	e7e5      	b.n	2300e <net_tcp_foreach+0x16>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   23042:	f381 8811 	msr	BASEPRI, r1
   23046:	bd70      	pop	{r4, r5, r6, pc}
   23048:	20001ef8 	.word	0x20001ef8

0002304c <net_tcp_get_hdr>:
					+ net_tcp_get_recv_wnd(tcp)) < 0);
}

struct net_tcp_hdr *net_tcp_get_hdr(struct net_pkt *pkt,
				    struct net_tcp_hdr *hdr)
{
   2304c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2304e:	b085      	sub	sp, #20
   23050:	4605      	mov	r5, r0
   23052:	460e      	mov	r6, r1
	struct net_tcp_hdr *tcp_hdr;
	struct net_buf *frag;
	u16_t pos;

	tcp_hdr = net_pkt_tcp_data(pkt);
   23054:	f7fa f8df 	bl	1d216 <net_pkt_tcp_data>
   23058:	4604      	mov	r4, r0
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   2305a:	2214      	movs	r2, #20
   2305c:	4601      	mov	r1, r0
   2305e:	4628      	mov	r0, r5
   23060:	f7fa fc82 	bl	1d968 <net_header_fits>
   23064:	b120      	cbz	r0, 23070 <net_tcp_get_hdr+0x24>
		return hdr;
   23066:	4627      	mov	r7, r4
	if (net_tcp_header_fits(pkt, tcp_hdr)) {
   23068:	b127      	cbz	r7, 23074 <net_tcp_get_hdr+0x28>

		return NULL;
	}

	return hdr;
}
   2306a:	4620      	mov	r0, r4
   2306c:	b005      	add	sp, #20
   2306e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return NULL;
   23070:	2700      	movs	r7, #0
   23072:	e7f9      	b.n	23068 <net_tcp_get_hdr+0x1c>
	frag = net_frag_read(pkt->frags, net_pkt_ip_hdr_len(pkt) +
   23074:	68a8      	ldr	r0, [r5, #8]
   23076:	f895 4033 	ldrb.w	r4, [r5, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt),
   2307a:	f895 103b 	ldrb.w	r1, [r5, #59]	; 0x3b
	frag = net_frag_read(pkt->frags, net_pkt_ip_hdr_len(pkt) +
   2307e:	9600      	str	r6, [sp, #0]
   23080:	2302      	movs	r3, #2
   23082:	f10d 020e 	add.w	r2, sp, #14
   23086:	4421      	add	r1, r4
   23088:	f7f9 ff29 	bl	1cede <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->dst_port),
   2308c:	f8bd 100e 	ldrh.w	r1, [sp, #14]
			     (u8_t *)&hdr->dst_port);
   23090:	1cb3      	adds	r3, r6, #2
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->dst_port),
   23092:	9300      	str	r3, [sp, #0]
   23094:	2302      	movs	r3, #2
   23096:	f10d 020e 	add.w	r2, sp, #14
   2309a:	f7f9 ff20 	bl	1cede <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->seq), hdr->seq);
   2309e:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   230a2:	1d33      	adds	r3, r6, #4
   230a4:	9300      	str	r3, [sp, #0]
   230a6:	2304      	movs	r3, #4
   230a8:	f10d 020e 	add.w	r2, sp, #14
   230ac:	f7f9 ff17 	bl	1cede <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->ack), hdr->ack);
   230b0:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   230b4:	f106 0308 	add.w	r3, r6, #8
   230b8:	9300      	str	r3, [sp, #0]
   230ba:	2304      	movs	r3, #4
   230bc:	f10d 020e 	add.w	r2, sp, #14
   230c0:	f7f9 ff0d 	bl	1cede <net_frag_read>
	frag = net_frag_read_u8(frag, pos, &pos, &hdr->offset);
   230c4:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   230c8:	f106 030c 	add.w	r3, r6, #12
	return net_frag_read(frag, offset, pos, 1, value);
   230cc:	9300      	str	r3, [sp, #0]
   230ce:	2301      	movs	r3, #1
   230d0:	f10d 020e 	add.w	r2, sp, #14
   230d4:	f7f9 ff03 	bl	1cede <net_frag_read>
	frag = net_frag_read_u8(frag, pos, &pos, &hdr->flags);
   230d8:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   230dc:	f106 030d 	add.w	r3, r6, #13
   230e0:	9300      	str	r3, [sp, #0]
   230e2:	2301      	movs	r3, #1
   230e4:	f10d 020e 	add.w	r2, sp, #14
   230e8:	f7f9 fef9 	bl	1cede <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->wnd), hdr->wnd);
   230ec:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   230f0:	f106 030e 	add.w	r3, r6, #14
   230f4:	9300      	str	r3, [sp, #0]
   230f6:	2302      	movs	r3, #2
   230f8:	f10d 020e 	add.w	r2, sp, #14
   230fc:	f7f9 feef 	bl	1cede <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->chksum),
   23100:	f8bd 100e 	ldrh.w	r1, [sp, #14]
			     (u8_t *)&hdr->chksum);
   23104:	f106 0310 	add.w	r3, r6, #16
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->chksum),
   23108:	9300      	str	r3, [sp, #0]
   2310a:	2302      	movs	r3, #2
   2310c:	f10d 020e 	add.w	r2, sp, #14
   23110:	f7f9 fee5 	bl	1cede <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->urg), hdr->urg);
   23114:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   23118:	f106 0312 	add.w	r3, r6, #18
   2311c:	9300      	str	r3, [sp, #0]
   2311e:	2302      	movs	r3, #2
   23120:	f10d 020e 	add.w	r2, sp, #14
   23124:	f7f9 fedb 	bl	1cede <net_frag_read>
	if (!frag && pos == 0xffff) {
   23128:	b108      	cbz	r0, 2312e <net_tcp_get_hdr+0xe2>
	return hdr;
   2312a:	4634      	mov	r4, r6
   2312c:	e79d      	b.n	2306a <net_tcp_get_hdr+0x1e>
	if (!frag && pos == 0xffff) {
   2312e:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   23132:	f64f 73ff 	movw	r3, #65535	; 0xffff
   23136:	429a      	cmp	r2, r3
   23138:	d001      	beq.n	2313e <net_tcp_get_hdr+0xf2>
	return hdr;
   2313a:	4634      	mov	r4, r6
   2313c:	e795      	b.n	2306a <net_tcp_get_hdr+0x1e>
		return NULL;
   2313e:	463c      	mov	r4, r7
   23140:	e793      	b.n	2306a <net_tcp_get_hdr+0x1e>

00023142 <net_tcp_validate_seq>:
{
   23142:	b570      	push	{r4, r5, r6, lr}
   23144:	b086      	sub	sp, #24
   23146:	4606      	mov	r6, r0
   23148:	4608      	mov	r0, r1
	tcp_hdr = net_tcp_get_hdr(pkt, &hdr);
   2314a:	a901      	add	r1, sp, #4
   2314c:	f7ff ff7e 	bl	2304c <net_tcp_get_hdr>
	if (!tcp_hdr) {
   23150:	b1e8      	cbz	r0, 2318e <net_tcp_validate_seq+0x4c>
   23152:	4603      	mov	r3, r0
	return ((u16_t)src[0] << 8) | src[1];
   23154:	7900      	ldrb	r0, [r0, #4]
   23156:	795c      	ldrb	r4, [r3, #5]
   23158:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
   2315c:	799a      	ldrb	r2, [r3, #6]
   2315e:	79dc      	ldrb	r4, [r3, #7]
   23160:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
	return ((u32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
   23164:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
	return (net_tcp_seq_cmp(sys_get_be32(tcp_hdr->seq),
   23168:	f8d6 509c 	ldr.w	r5, [r6, #156]	; 0x9c
   2316c:	1b63      	subs	r3, r4, r5
				tcp->send_ack) >= 0) &&
   2316e:	2b00      	cmp	r3, #0
   23170:	db0b      	blt.n	2318a <net_tcp_validate_seq+0x48>
					+ net_tcp_get_recv_wnd(tcp)) < 0);
   23172:	4630      	mov	r0, r6
   23174:	f7ff fcfc 	bl	22b70 <net_tcp_get_recv_wnd>
		(net_tcp_seq_cmp(sys_get_be32(tcp_hdr->seq),
   23178:	4428      	add	r0, r5
   2317a:	1a24      	subs	r4, r4, r0
				tcp->send_ack) >= 0) &&
   2317c:	2c00      	cmp	r4, #0
   2317e:	db02      	blt.n	23186 <net_tcp_validate_seq+0x44>
   23180:	2000      	movs	r0, #0
}
   23182:	b006      	add	sp, #24
   23184:	bd70      	pop	{r4, r5, r6, pc}
				tcp->send_ack) >= 0) &&
   23186:	2001      	movs	r0, #1
   23188:	e7fb      	b.n	23182 <net_tcp_validate_seq+0x40>
   2318a:	2000      	movs	r0, #0
   2318c:	e7f9      	b.n	23182 <net_tcp_validate_seq+0x40>
		return false;
   2318e:	2000      	movs	r0, #0
   23190:	e7f7      	b.n	23182 <net_tcp_validate_seq+0x40>

00023192 <net_tcp_set_hdr>:

struct net_tcp_hdr *net_tcp_set_hdr(struct net_pkt *pkt,
				    struct net_tcp_hdr *hdr)
{
   23192:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   23196:	b087      	sub	sp, #28
   23198:	4605      	mov	r5, r0
   2319a:	460c      	mov	r4, r1
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   2319c:	2214      	movs	r2, #20
   2319e:	f7fa fbe3 	bl	1d968 <net_header_fits>
   231a2:	b128      	cbz	r0, 231b0 <net_tcp_set_hdr+0x1e>
		return hdr;
   231a4:	4626      	mov	r6, r4
	struct net_buf *frag;
	u16_t pos;

	if (net_tcp_header_fits(pkt, hdr)) {
   231a6:	b12e      	cbz	r6, 231b4 <net_tcp_set_hdr+0x22>
		NET_ASSERT(frag);
		return NULL;
	}

	return hdr;
}
   231a8:	4620      	mov	r0, r4
   231aa:	b007      	add	sp, #28
   231ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return NULL;
   231b0:	2600      	movs	r6, #0
   231b2:	e7f8      	b.n	231a6 <net_tcp_set_hdr+0x14>
	frag = net_pkt_write(pkt, pkt->frags, net_pkt_ip_hdr_len(pkt) +
   231b4:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt),
   231b8:	f895 203b 	ldrb.w	r2, [r5, #59]	; 0x3b
	frag = net_pkt_write(pkt, pkt->frags, net_pkt_ip_hdr_len(pkt) +
   231bc:	f44f 77fa 	mov.w	r7, #500	; 0x1f4
   231c0:	9702      	str	r7, [sp, #8]
   231c2:	9401      	str	r4, [sp, #4]
   231c4:	f04f 0802 	mov.w	r8, #2
   231c8:	f8cd 8000 	str.w	r8, [sp]
   231cc:	f10d 0316 	add.w	r3, sp, #22
   231d0:	440a      	add	r2, r1
   231d2:	68a9      	ldr	r1, [r5, #8]
   231d4:	4628      	mov	r0, r5
   231d6:	f7f9 fef4 	bl	1cfc2 <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->dst_port),
   231da:	f8bd 2016 	ldrh.w	r2, [sp, #22]
			     (u8_t *)&hdr->dst_port, ALLOC_TIMEOUT);
   231de:	eb04 0308 	add.w	r3, r4, r8
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->dst_port),
   231e2:	9702      	str	r7, [sp, #8]
   231e4:	9301      	str	r3, [sp, #4]
   231e6:	f8cd 8000 	str.w	r8, [sp]
   231ea:	f10d 0316 	add.w	r3, sp, #22
   231ee:	4601      	mov	r1, r0
   231f0:	4628      	mov	r0, r5
   231f2:	f7f9 fee6 	bl	1cfc2 <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->seq), hdr->seq,
   231f6:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   231fa:	1d23      	adds	r3, r4, #4
   231fc:	9702      	str	r7, [sp, #8]
   231fe:	9301      	str	r3, [sp, #4]
   23200:	f04f 0904 	mov.w	r9, #4
   23204:	f8cd 9000 	str.w	r9, [sp]
   23208:	f10d 0316 	add.w	r3, sp, #22
   2320c:	4601      	mov	r1, r0
   2320e:	4628      	mov	r0, r5
   23210:	f7f9 fed7 	bl	1cfc2 <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->ack), hdr->ack,
   23214:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   23218:	f104 0308 	add.w	r3, r4, #8
   2321c:	9702      	str	r7, [sp, #8]
   2321e:	9301      	str	r3, [sp, #4]
   23220:	f8cd 9000 	str.w	r9, [sp]
   23224:	f10d 0316 	add.w	r3, sp, #22
   23228:	4601      	mov	r1, r0
   2322a:	4628      	mov	r0, r5
   2322c:	f7f9 fec9 	bl	1cfc2 <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->offset),
   23230:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   23234:	f104 030c 	add.w	r3, r4, #12
   23238:	9702      	str	r7, [sp, #8]
   2323a:	9301      	str	r3, [sp, #4]
   2323c:	f04f 0901 	mov.w	r9, #1
   23240:	f8cd 9000 	str.w	r9, [sp]
   23244:	f10d 0316 	add.w	r3, sp, #22
   23248:	4601      	mov	r1, r0
   2324a:	4628      	mov	r0, r5
   2324c:	f7f9 feb9 	bl	1cfc2 <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->flags),
   23250:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   23254:	f104 030d 	add.w	r3, r4, #13
   23258:	9702      	str	r7, [sp, #8]
   2325a:	9301      	str	r3, [sp, #4]
   2325c:	f8cd 9000 	str.w	r9, [sp]
   23260:	f10d 0316 	add.w	r3, sp, #22
   23264:	4601      	mov	r1, r0
   23266:	4628      	mov	r0, r5
   23268:	f7f9 feab 	bl	1cfc2 <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->wnd), hdr->wnd,
   2326c:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   23270:	f104 030e 	add.w	r3, r4, #14
   23274:	9702      	str	r7, [sp, #8]
   23276:	9301      	str	r3, [sp, #4]
   23278:	f8cd 8000 	str.w	r8, [sp]
   2327c:	f10d 0316 	add.w	r3, sp, #22
   23280:	4601      	mov	r1, r0
   23282:	4628      	mov	r0, r5
   23284:	f7f9 fe9d 	bl	1cfc2 <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->chksum),
   23288:	f8bd 2016 	ldrh.w	r2, [sp, #22]
			     (u8_t *)&hdr->chksum, ALLOC_TIMEOUT);
   2328c:	f104 0310 	add.w	r3, r4, #16
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->chksum),
   23290:	9702      	str	r7, [sp, #8]
   23292:	9301      	str	r3, [sp, #4]
   23294:	f8cd 8000 	str.w	r8, [sp]
   23298:	f10d 0316 	add.w	r3, sp, #22
   2329c:	4601      	mov	r1, r0
   2329e:	4628      	mov	r0, r5
   232a0:	f7f9 fe8f 	bl	1cfc2 <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->urg), hdr->urg,
   232a4:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   232a8:	f104 0312 	add.w	r3, r4, #18
   232ac:	9702      	str	r7, [sp, #8]
   232ae:	9301      	str	r3, [sp, #4]
   232b0:	f8cd 8000 	str.w	r8, [sp]
   232b4:	f10d 0316 	add.w	r3, sp, #22
   232b8:	4601      	mov	r1, r0
   232ba:	4628      	mov	r0, r5
   232bc:	f7f9 fe81 	bl	1cfc2 <net_pkt_write>
	if (!frag) {
   232c0:	2800      	cmp	r0, #0
   232c2:	f47f af71 	bne.w	231a8 <net_tcp_set_hdr+0x16>
		return NULL;
   232c6:	4634      	mov	r4, r6
   232c8:	e76e      	b.n	231a8 <net_tcp_set_hdr+0x16>

000232ca <net_tcp_get_chksum>:

u16_t net_tcp_get_chksum(struct net_pkt *pkt, struct net_buf *frag)
{
   232ca:	b570      	push	{r4, r5, r6, lr}
   232cc:	b084      	sub	sp, #16
   232ce:	4605      	mov	r5, r0
   232d0:	460e      	mov	r6, r1
	struct net_tcp_hdr *hdr;
	u16_t chksum;
	u16_t pos;

	hdr = net_pkt_tcp_data(pkt);
   232d2:	f7f9 ffa0 	bl	1d216 <net_pkt_tcp_data>
   232d6:	4604      	mov	r4, r0
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   232d8:	2214      	movs	r2, #20
   232da:	4601      	mov	r1, r0
   232dc:	4628      	mov	r0, r5
   232de:	f7fa fb43 	bl	1d968 <net_header_fits>
   232e2:	b120      	cbz	r0, 232ee <net_tcp_get_chksum+0x24>
		return hdr;
   232e4:	4623      	mov	r3, r4
	if (net_tcp_header_fits(pkt, hdr)) {
   232e6:	b123      	cbz	r3, 232f2 <net_tcp_get_chksum+0x28>
		return hdr->chksum;
   232e8:	8a20      	ldrh	r0, [r4, #16]
			     1 + 1 + 2 /* offset + flags + wnd */,
			     &pos, sizeof(chksum), (u8_t *)&chksum);
	NET_ASSERT(frag);

	return chksum;
}
   232ea:	b004      	add	sp, #16
   232ec:	bd70      	pop	{r4, r5, r6, pc}
	return NULL;
   232ee:	2300      	movs	r3, #0
   232f0:	e7f9      	b.n	232e6 <net_tcp_get_chksum+0x1c>
			     net_pkt_ip_hdr_len(pkt) +
   232f2:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt) +
   232f6:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
			     net_pkt_ip_hdr_len(pkt) +
   232fa:	4419      	add	r1, r3
	frag = net_frag_read(frag,
   232fc:	3110      	adds	r1, #16
   232fe:	f10d 030e 	add.w	r3, sp, #14
   23302:	9300      	str	r3, [sp, #0]
   23304:	2302      	movs	r3, #2
   23306:	aa03      	add	r2, sp, #12
   23308:	b289      	uxth	r1, r1
   2330a:	4630      	mov	r0, r6
   2330c:	f7f9 fde7 	bl	1cede <net_frag_read>
	return chksum;
   23310:	f8bd 000e 	ldrh.w	r0, [sp, #14]
   23314:	e7e9      	b.n	232ea <net_tcp_get_chksum+0x20>

00023316 <net_tcp_set_chksum>:

struct net_buf *net_tcp_set_chksum(struct net_pkt *pkt, struct net_buf *frag)
{
   23316:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2331a:	b086      	sub	sp, #24
   2331c:	4606      	mov	r6, r0
   2331e:	460d      	mov	r5, r1
	struct net_tcp_hdr *hdr;
	u16_t chksum = 0;
   23320:	2300      	movs	r3, #0
   23322:	f8ad 3016 	strh.w	r3, [sp, #22]
	u16_t pos;

	hdr = net_pkt_tcp_data(pkt);
   23326:	f7f9 ff76 	bl	1d216 <net_pkt_tcp_data>
   2332a:	4604      	mov	r4, r0
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   2332c:	2214      	movs	r2, #20
   2332e:	4601      	mov	r1, r0
   23330:	4630      	mov	r0, r6
   23332:	f7fa fb19 	bl	1d968 <net_header_fits>
   23336:	b170      	cbz	r0, 23356 <net_tcp_set_chksum+0x40>
		return hdr;
   23338:	4623      	mov	r3, r4
	if (net_tcp_header_fits(pkt, hdr)) {
   2333a:	b173      	cbz	r3, 2335a <net_tcp_set_chksum+0x44>
		hdr->chksum = 0;
   2333c:	2300      	movs	r3, #0
   2333e:	7423      	strb	r3, [r4, #16]
   23340:	7463      	strb	r3, [r4, #17]
	return net_calc_chksum(pkt, IPPROTO_TCP);
   23342:	2106      	movs	r1, #6
   23344:	4630      	mov	r0, r6
   23346:	f7fa fab6 	bl	1d8b6 <net_calc_chksum>
		hdr->chksum = ~net_calc_chksum_tcp(pkt);
   2334a:	43c0      	mvns	r0, r0
   2334c:	8220      	strh	r0, [r4, #16]

		return frag;
   2334e:	4628      	mov	r0, r5
			     (u8_t *)&chksum, ALLOC_TIMEOUT);

	NET_ASSERT(frag);

	return frag;
}
   23350:	b006      	add	sp, #24
   23352:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return NULL;
   23356:	2300      	movs	r3, #0
   23358:	e7ef      	b.n	2333a <net_tcp_set_chksum+0x24>
			     net_pkt_ip_hdr_len(pkt) +
   2335a:	f896 2033 	ldrb.w	r2, [r6, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt) +
   2335e:	f896 303b 	ldrb.w	r3, [r6, #59]	; 0x3b
			     net_pkt_ip_hdr_len(pkt) +
   23362:	441a      	add	r2, r3
	frag = net_pkt_write(pkt, frag,
   23364:	3210      	adds	r2, #16
   23366:	f44f 78fa 	mov.w	r8, #500	; 0x1f4
   2336a:	f8cd 8008 	str.w	r8, [sp, #8]
   2336e:	f10d 0416 	add.w	r4, sp, #22
   23372:	9401      	str	r4, [sp, #4]
   23374:	2702      	movs	r7, #2
   23376:	9700      	str	r7, [sp, #0]
   23378:	ab05      	add	r3, sp, #20
   2337a:	b292      	uxth	r2, r2
   2337c:	4629      	mov	r1, r5
   2337e:	4630      	mov	r0, r6
   23380:	f7f9 fe1f 	bl	1cfc2 <net_pkt_write>
   23384:	4605      	mov	r5, r0
	return net_calc_chksum(pkt, IPPROTO_TCP);
   23386:	2106      	movs	r1, #6
   23388:	4630      	mov	r0, r6
   2338a:	f7fa fa94 	bl	1d8b6 <net_calc_chksum>
	chksum = ~net_calc_chksum_tcp(pkt);
   2338e:	43c0      	mvns	r0, r0
   23390:	f8ad 0016 	strh.w	r0, [sp, #22]
	frag = net_pkt_write(pkt, frag, pos - 2, &pos, sizeof(chksum),
   23394:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   23398:	3a02      	subs	r2, #2
   2339a:	f8cd 8008 	str.w	r8, [sp, #8]
   2339e:	9401      	str	r4, [sp, #4]
   233a0:	9700      	str	r7, [sp, #0]
   233a2:	ab05      	add	r3, sp, #20
   233a4:	b292      	uxth	r2, r2
   233a6:	4629      	mov	r1, r5
   233a8:	4630      	mov	r0, r6
   233aa:	f7f9 fe0a 	bl	1cfc2 <net_pkt_write>
	return frag;
   233ae:	e7cf      	b.n	23350 <net_tcp_set_chksum+0x3a>

000233b0 <net_tcp_send_pkt>:
{
   233b0:	b570      	push	{r4, r5, r6, lr}
   233b2:	b086      	sub	sp, #24
   233b4:	4605      	mov	r5, r0
	return pkt->context;
   233b6:	68c6      	ldr	r6, [r0, #12]
	tcp_hdr = net_tcp_get_hdr(pkt, &hdr);
   233b8:	a901      	add	r1, sp, #4
   233ba:	f7ff fe47 	bl	2304c <net_tcp_get_hdr>
	if (!tcp_hdr) {
   233be:	2800      	cmp	r0, #0
   233c0:	f000 8086 	beq.w	234d0 <net_tcp_send_pkt+0x120>
   233c4:	4604      	mov	r4, r0
	return ((u16_t)src[0] << 8) | src[1];
   233c6:	7a02      	ldrb	r2, [r0, #8]
   233c8:	7a43      	ldrb	r3, [r0, #9]
   233ca:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
   233ce:	7a81      	ldrb	r1, [r0, #10]
   233d0:	7ac3      	ldrb	r3, [r0, #11]
   233d2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	return ((u32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
   233d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	if (sys_get_be32(tcp_hdr->ack) != ctx->tcp->send_ack) {
   233da:	6e32      	ldr	r2, [r6, #96]	; 0x60
   233dc:	f8d2 209c 	ldr.w	r2, [r2, #156]	; 0x9c
   233e0:	429a      	cmp	r2, r3
   233e2:	d039      	beq.n	23458 <net_tcp_send_pkt+0xa8>
	sys_put_be16(val >> 16, dst);
   233e4:	0c13      	lsrs	r3, r2, #16
	dst[0] = val >> 8;
   233e6:	0a19      	lsrs	r1, r3, #8
   233e8:	7201      	strb	r1, [r0, #8]
	dst[1] = val;
   233ea:	7243      	strb	r3, [r0, #9]
	dst[0] = val >> 8;
   233ec:	f3c2 2307 	ubfx	r3, r2, #8, #8
   233f0:	7283      	strb	r3, [r0, #10]
	dst[1] = val;
   233f2:	72c2      	strb	r2, [r0, #11]
		calc_chksum = true;
   233f4:	2201      	movs	r2, #1
	if (ctx->tcp->sent_ack != ctx->tcp->send_ack &&
   233f6:	6e33      	ldr	r3, [r6, #96]	; 0x60
   233f8:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
   233fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   23400:	4299      	cmp	r1, r3
   23402:	d007      	beq.n	23414 <net_tcp_send_pkt+0x64>
		(tcp_hdr->flags & NET_TCP_ACK) == 0) {
   23404:	7b63      	ldrb	r3, [r4, #13]
	if (ctx->tcp->sent_ack != ctx->tcp->send_ack &&
   23406:	f013 0f10 	tst.w	r3, #16
   2340a:	d103      	bne.n	23414 <net_tcp_send_pkt+0x64>
		tcp_hdr->flags |= NET_TCP_ACK;
   2340c:	f043 0310 	orr.w	r3, r3, #16
   23410:	7363      	strb	r3, [r4, #13]
		calc_chksum = true;
   23412:	2201      	movs	r2, #1
	if (calc_chksum) {
   23414:	bb12      	cbnz	r2, 2345c <net_tcp_send_pkt+0xac>
	if (tcp_hdr->flags & NET_TCP_FIN) {
   23416:	7b63      	ldrb	r3, [r4, #13]
   23418:	f013 0f01 	tst.w	r3, #1
   2341c:	d006      	beq.n	2342c <net_tcp_send_pkt+0x7c>
		ctx->tcp->fin_sent = 1;
   2341e:	6e32      	ldr	r2, [r6, #96]	; 0x60
   23420:	f892 30a6 	ldrb.w	r3, [r2, #166]	; 0xa6
   23424:	f043 0302 	orr.w	r3, r3, #2
   23428:	f882 30a6 	strb.w	r3, [r2, #166]	; 0xa6
	ctx->tcp->sent_ack = ctx->tcp->send_ack;
   2342c:	6e33      	ldr	r3, [r6, #96]	; 0x60
   2342e:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
   23432:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	net_tcp_set_hdr(pkt, tcp_hdr);
   23436:	4621      	mov	r1, r4
   23438:	4628      	mov	r0, r5
   2343a:	f7ff feaa 	bl	23192 <net_tcp_set_hdr>
	return pkt->family;
   2343e:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
   23442:	f3c3 03c3 	ubfx	r3, r3, #3, #4
	if (is_6lo_technology(pkt)) {
   23446:	2b0a      	cmp	r3, #10
   23448:	d00d      	beq.n	23466 <net_tcp_send_pkt+0xb6>
	return net_send_data(pkt);
   2344a:	4628      	mov	r0, r5
   2344c:	f7f6 ffc8 	bl	1a3e0 <net_send_data>
   23450:	4604      	mov	r4, r0
}
   23452:	4620      	mov	r0, r4
   23454:	b006      	add	sp, #24
   23456:	bd70      	pop	{r4, r5, r6, pc}
	bool calc_chksum = false;
   23458:	2200      	movs	r2, #0
   2345a:	e7cc      	b.n	233f6 <net_tcp_send_pkt+0x46>
		net_tcp_set_chksum(pkt, pkt->frags);
   2345c:	68a9      	ldr	r1, [r5, #8]
   2345e:	4628      	mov	r0, r5
   23460:	f7ff ff59 	bl	23316 <net_tcp_set_chksum>
   23464:	e7d7      	b.n	23416 <net_tcp_send_pkt+0x66>
	if (is_6lo_technology(pkt)) {
   23466:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
   2346a:	2b02      	cmp	r3, #2
   2346c:	d1ed      	bne.n	2344a <net_tcp_send_pkt+0x9a>
		SYS_SLIST_FOR_EACH_CONTAINER(&ctx->tcp->sent_list,
   2346e:	6e33      	ldr	r3, [r6, #96]	; 0x60
	return list->head;
   23470:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
   23474:	b10b      	cbz	r3, 2347a <net_tcp_send_pkt+0xca>
   23476:	3b34      	subs	r3, #52	; 0x34
   23478:	e006      	b.n	23488 <net_tcp_send_pkt+0xd8>
   2347a:	2300      	movs	r3, #0
   2347c:	e004      	b.n	23488 <net_tcp_send_pkt+0xd8>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   2347e:	4611      	mov	r1, r2
   23480:	e009      	b.n	23496 <net_tcp_send_pkt+0xe6>
	return node->next;
   23482:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   23484:	f1a2 0334 	sub.w	r3, r2, #52	; 0x34
   23488:	b163      	cbz	r3, 234a4 <net_tcp_send_pkt+0xf4>
			if (check_pkt == pkt) {
   2348a:	42ab      	cmp	r3, r5
   2348c:	d009      	beq.n	234a2 <net_tcp_send_pkt+0xf2>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   2348e:	f113 0234 	adds.w	r2, r3, #52	; 0x34
   23492:	d0f4      	beq.n	2347e <net_tcp_send_pkt+0xce>
	return node->next;
   23494:	6b59      	ldr	r1, [r3, #52]	; 0x34
		SYS_SLIST_FOR_EACH_CONTAINER(&ctx->tcp->sent_list,
   23496:	b111      	cbz	r1, 2349e <net_tcp_send_pkt+0xee>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   23498:	2a00      	cmp	r2, #0
   2349a:	d1f2      	bne.n	23482 <net_tcp_send_pkt+0xd2>
   2349c:	e7f2      	b.n	23484 <net_tcp_send_pkt+0xd4>
   2349e:	2300      	movs	r3, #0
   234a0:	e7f2      	b.n	23488 <net_tcp_send_pkt+0xd8>
				pkt_in_slist = true;
   234a2:	2301      	movs	r3, #1
		if (pkt_in_slist) {
   234a4:	2b00      	cmp	r3, #0
   234a6:	d0d0      	beq.n	2344a <net_tcp_send_pkt+0x9a>
			new_pkt = net_pkt_clone(pkt, ALLOC_TIMEOUT);
   234a8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
   234ac:	4628      	mov	r0, r5
   234ae:	f7f9 fec7 	bl	1d240 <net_pkt_clone>
			if (!new_pkt) {
   234b2:	4605      	mov	r5, r0
   234b4:	b178      	cbz	r0, 234d6 <net_tcp_send_pkt+0x126>
			ret = net_send_data(new_pkt);
   234b6:	f7f6 ff93 	bl	1a3e0 <net_send_data>
			if (ret < 0) {
   234ba:	1e04      	subs	r4, r0, #0
   234bc:	db04      	blt.n	234c8 <net_tcp_send_pkt+0x118>
	net_stats.tcp.rexmit++;
   234be:	4a07      	ldr	r2, [pc, #28]	; (234dc <net_tcp_send_pkt+0x12c>)
   234c0:	6f13      	ldr	r3, [r2, #112]	; 0x70
   234c2:	3301      	adds	r3, #1
   234c4:	6713      	str	r3, [r2, #112]	; 0x70
   234c6:	e7c4      	b.n	23452 <net_tcp_send_pkt+0xa2>
				net_pkt_unref(new_pkt);
   234c8:	4628      	mov	r0, r5
   234ca:	f7f9 fb8a 	bl	1cbe2 <net_pkt_unref>
   234ce:	e7c0      	b.n	23452 <net_tcp_send_pkt+0xa2>
		return -EMSGSIZE;
   234d0:	f06f 0479 	mvn.w	r4, #121	; 0x79
   234d4:	e7bd      	b.n	23452 <net_tcp_send_pkt+0xa2>
				return -ENOMEM;
   234d6:	f06f 040b 	mvn.w	r4, #11
   234da:	e7ba      	b.n	23452 <net_tcp_send_pkt+0xa2>
   234dc:	200029e8 	.word	0x200029e8

000234e0 <tcp_retry_expired>:
	return (!list->head);
   234e0:	6b43      	ldr	r3, [r0, #52]	; 0x34
	if (!sys_slist_is_empty(&tcp->sent_list)) {
   234e2:	2b00      	cmp	r3, #0
   234e4:	d05c      	beq.n	235a0 <tcp_retry_expired+0xc0>
{
   234e6:	b510      	push	{r4, lr}
   234e8:	f1a0 0158 	sub.w	r1, r0, #88	; 0x58
   234ec:	4604      	mov	r4, r0
		tcp->retry_timeout_shift++;
   234ee:	f890 204c 	ldrb.w	r2, [r0, #76]	; 0x4c
   234f2:	f002 031f 	and.w	r3, r2, #31
   234f6:	3301      	adds	r3, #1
   234f8:	f003 031f 	and.w	r3, r3, #31
   234fc:	f363 0204 	bfi	r2, r3, #0, #5
   23500:	f880 204c 	strb.w	r2, [r0, #76]	; 0x4c
		if (tcp->retry_timeout_shift > CONFIG_NET_TCP_RETRY_COUNT) {
   23504:	2b09      	cmp	r3, #9
   23506:	dc2f      	bgt.n	23568 <tcp_retry_expired+0x88>
   23508:	2200      	movs	r2, #0
   2350a:	21c8      	movs	r1, #200	; 0xc8
   2350c:	4099      	lsls	r1, r3
   2350e:	f005 fd4d 	bl	28fac <_impl_k_timer_start>
	return list->head;
   23512:	6b63      	ldr	r3, [r4, #52]	; 0x34
		pkt = CONTAINER_OF(sys_slist_peek_head(&tcp->sent_list),
   23514:	f1a3 0434 	sub.w	r4, r3, #52	; 0x34
	return pkt->sent_or_eof;
   23518:	791a      	ldrb	r2, [r3, #4]
		if (net_pkt_sent(pkt)) {
   2351a:	f012 0f01 	tst.w	r2, #1
   2351e:	d00d      	beq.n	2353c <tcp_retry_expired+0x5c>
	return pkt->family;
   23520:	f3c2 02c3 	ubfx	r2, r2, #3, #4
			do_ref_if_needed(tcp, pkt);
   23524:	2a0a      	cmp	r2, #10
   23526:	d023      	beq.n	23570 <tcp_retry_expired+0x90>
   23528:	4620      	mov	r0, r4
   2352a:	f7f9 fb4b 	bl	1cbc4 <net_pkt_ref>
   2352e:	4604      	mov	r4, r0
	pkt->sent_or_eof = sent;
   23530:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   23534:	f36f 0300 	bfc	r3, #0, #1
   23538:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	pkt->pkt_queued = send;
   2353c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   23540:	f043 0302 	orr.w	r3, r3, #2
   23544:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
		if (net_tcp_send_pkt(pkt) < 0 && !is_6lo_technology(pkt)) {
   23548:	4620      	mov	r0, r4
   2354a:	f7ff ff31 	bl	233b0 <net_tcp_send_pkt>
   2354e:	2800      	cmp	r0, #0
   23550:	db13      	blt.n	2357a <tcp_retry_expired+0x9a>
	return pkt->family;
   23552:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   23556:	f3c3 03c3 	ubfx	r3, r3, #3, #4
			if (IS_ENABLED(CONFIG_NET_STATISTICS_TCP) &&
   2355a:	2b0a      	cmp	r3, #10
   2355c:	d01b      	beq.n	23596 <tcp_retry_expired+0xb6>
   2355e:	4a11      	ldr	r2, [pc, #68]	; (235a4 <tcp_retry_expired+0xc4>)
   23560:	6f13      	ldr	r3, [r2, #112]	; 0x70
   23562:	3301      	adds	r3, #1
   23564:	6713      	str	r3, [r2, #112]	; 0x70
   23566:	bd10      	pop	{r4, pc}
			abort_connection(tcp);
   23568:	4608      	mov	r0, r1
   2356a:	f7ff f99a 	bl	228a2 <abort_connection>
			return;
   2356e:	bd10      	pop	{r4, pc}
			do_ref_if_needed(tcp, pkt);
   23570:	f813 3c07 	ldrb.w	r3, [r3, #-7]
   23574:	2b02      	cmp	r3, #2
   23576:	d1d7      	bne.n	23528 <tcp_retry_expired+0x48>
   23578:	e7da      	b.n	23530 <tcp_retry_expired+0x50>
   2357a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   2357e:	f3c3 03c3 	ubfx	r3, r3, #3, #4
		if (net_tcp_send_pkt(pkt) < 0 && !is_6lo_technology(pkt)) {
   23582:	2b0a      	cmp	r3, #10
   23584:	d103      	bne.n	2358e <tcp_retry_expired+0xae>
   23586:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   2358a:	2b02      	cmp	r3, #2
   2358c:	d0e1      	beq.n	23552 <tcp_retry_expired+0x72>
			net_pkt_unref(pkt);
   2358e:	4620      	mov	r0, r4
   23590:	f7f9 fb27 	bl	1cbe2 <net_pkt_unref>
   23594:	bd10      	pop	{r4, pc}
			    !is_6lo_technology(pkt)) {
   23596:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
			if (IS_ENABLED(CONFIG_NET_STATISTICS_TCP) &&
   2359a:	2b02      	cmp	r3, #2
   2359c:	d1df      	bne.n	2355e <tcp_retry_expired+0x7e>
   2359e:	e7e2      	b.n	23566 <tcp_retry_expired+0x86>
   235a0:	4770      	bx	lr
   235a2:	bf00      	nop
   235a4:	200029e8 	.word	0x200029e8

000235a8 <net_tcp_send_data>:
{
   235a8:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&context->tcp->sent_list, pkt, sent_list) {
   235aa:	6e03      	ldr	r3, [r0, #96]	; 0x60
   235ac:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
   235b0:	b10c      	cbz	r4, 235b6 <net_tcp_send_data+0xe>
   235b2:	3c34      	subs	r4, #52	; 0x34
   235b4:	e013      	b.n	235de <net_tcp_send_data+0x36>
   235b6:	2400      	movs	r4, #0
   235b8:	e011      	b.n	235de <net_tcp_send_data+0x36>
				net_pkt_unref(pkt);
   235ba:	4620      	mov	r0, r4
   235bc:	f7f9 fb11 	bl	1cbe2 <net_pkt_unref>
	pkt->pkt_queued = send;
   235c0:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   235c4:	f043 0302 	orr.w	r3, r3, #2
   235c8:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   235cc:	f114 0334 	adds.w	r3, r4, #52	; 0x34
   235d0:	d01e      	beq.n	23610 <net_tcp_send_data+0x68>
	return node->next;
   235d2:	6b62      	ldr	r2, [r4, #52]	; 0x34
	SYS_SLIST_FOR_EACH_CONTAINER(&context->tcp->sent_list, pkt, sent_list) {
   235d4:	b1f2      	cbz	r2, 23614 <net_tcp_send_data+0x6c>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   235d6:	b103      	cbz	r3, 235da <net_tcp_send_data+0x32>
	return node->next;
   235d8:	6b63      	ldr	r3, [r4, #52]	; 0x34
   235da:	f1a3 0434 	sub.w	r4, r3, #52	; 0x34
   235de:	b1dc      	cbz	r4, 23618 <net_tcp_send_data+0x70>
	return pkt->pkt_queued;
   235e0:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
		if (net_pkt_queued(pkt)) {
   235e4:	f013 0f02 	tst.w	r3, #2
   235e8:	d1f0      	bne.n	235cc <net_tcp_send_data+0x24>
		if (!net_pkt_sent(pkt)) {
   235ea:	f013 0f01 	tst.w	r3, #1
   235ee:	d1ed      	bne.n	235cc <net_tcp_send_data+0x24>
			ret = net_tcp_send_pkt(pkt);
   235f0:	4620      	mov	r0, r4
   235f2:	f7ff fedd 	bl	233b0 <net_tcp_send_pkt>
			if (ret < 0 && !is_6lo_technology(pkt)) {
   235f6:	2800      	cmp	r0, #0
   235f8:	dae2      	bge.n	235c0 <net_tcp_send_data+0x18>
	return pkt->family;
   235fa:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   235fe:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   23602:	2b0a      	cmp	r3, #10
   23604:	d1d9      	bne.n	235ba <net_tcp_send_data+0x12>
   23606:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   2360a:	2b02      	cmp	r3, #2
   2360c:	d1d5      	bne.n	235ba <net_tcp_send_data+0x12>
   2360e:	e7d7      	b.n	235c0 <net_tcp_send_data+0x18>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   23610:	461a      	mov	r2, r3
   23612:	e7df      	b.n	235d4 <net_tcp_send_data+0x2c>
	SYS_SLIST_FOR_EACH_CONTAINER(&context->tcp->sent_list, pkt, sent_list) {
   23614:	2400      	movs	r4, #0
   23616:	e7e2      	b.n	235de <net_tcp_send_data+0x36>
}
   23618:	2000      	movs	r0, #0
   2361a:	bd10      	pop	{r4, pc}

0002361c <net_tcp_ack_received>:
{
   2361c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   23620:	b087      	sub	sp, #28
   23622:	4681      	mov	r9, r0
   23624:	4688      	mov	r8, r1
	struct net_tcp *tcp = ctx->tcp;
   23626:	6e05      	ldr	r5, [r0, #96]	; 0x60
	return (!list->head);
   23628:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
	if (IS_ENABLED(CONFIG_NET_STATISTICS_TCP) &&
   2362c:	b10b      	cbz	r3, 23632 <net_tcp_ack_received+0x16>
		valid_ack = true;
   2362e:	2700      	movs	r7, #0
   23630:	e033      	b.n	2369a <net_tcp_ack_received+0x7e>
	net_stats.tcp.ackerr++;
   23632:	4a51      	ldr	r2, [pc, #324]	; (23778 <net_tcp_ack_received+0x15c>)
   23634:	6e53      	ldr	r3, [r2, #100]	; 0x64
   23636:	3301      	adds	r3, #1
   23638:	6653      	str	r3, [r2, #100]	; 0x64
   2363a:	e7f8      	b.n	2362e <net_tcp_ack_received+0x12>
		list->head = node->next;
   2363c:	6823      	ldr	r3, [r4, #0]
   2363e:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
		if (list->tail == node) {
   23642:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
   23646:	42a2      	cmp	r2, r4
   23648:	d005      	beq.n	23656 <net_tcp_ack_received+0x3a>
	node->next = NULL;
   2364a:	2300      	movs	r3, #0
   2364c:	6023      	str	r3, [r4, #0]
			net_pkt_unref(pkt);
   2364e:	4630      	mov	r0, r6
   23650:	f7f9 fac7 	bl	1cbe2 <net_pkt_unref>
   23654:	e021      	b.n	2369a <net_tcp_ack_received+0x7e>
			list->tail = list->head;
   23656:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
   2365a:	e7f6      	b.n	2364a <net_tcp_ack_received+0x2e>
   2365c:	4a46      	ldr	r2, [pc, #280]	; (23778 <net_tcp_ack_received+0x15c>)
   2365e:	6e53      	ldr	r3, [r2, #100]	; 0x64
   23660:	3301      	adds	r3, #1
   23662:	6653      	str	r3, [r2, #100]	; 0x64
	if (valid_ack && net_tcp_get_state(tcp) == NET_TCP_ESTABLISHED) {
   23664:	b12f      	cbz	r7, 23672 <net_tcp_ack_received+0x56>
	return (enum net_tcp_state)tcp->state;
   23666:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
   2366a:	f3c3 3343 	ubfx	r3, r3, #13, #4
   2366e:	2b04      	cmp	r3, #4
   23670:	d046      	beq.n	23700 <net_tcp_ack_received+0xe4>
}
   23672:	b007      	add	sp, #28
   23674:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				net_tcp_change_state(tcp, NET_TCP_FIN_WAIT_2);
   23678:	2108      	movs	r1, #8
   2367a:	4628      	mov	r0, r5
   2367c:	f7ff faf7 	bl	22c6e <net_tcp_change_state>
		list->head = node->next;
   23680:	6823      	ldr	r3, [r4, #0]
   23682:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
		if (list->tail == node) {
   23686:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
   2368a:	42a2      	cmp	r2, r4
   2368c:	d035      	beq.n	236fa <net_tcp_ack_received+0xde>
	node->next = NULL;
   2368e:	2300      	movs	r3, #0
   23690:	6023      	str	r3, [r4, #0]
		net_pkt_unref(pkt);
   23692:	4630      	mov	r0, r6
   23694:	f7f9 faa5 	bl	1cbe2 <net_pkt_unref>
		valid_ack = true;
   23698:	2701      	movs	r7, #1
	return (!list->head);
   2369a:	f8d5 408c 	ldr.w	r4, [r5, #140]	; 0x8c
	while (!sys_slist_is_empty(list)) {
   2369e:	2c00      	cmp	r4, #0
   236a0:	d0e0      	beq.n	23664 <net_tcp_ack_received+0x48>
		pkt = CONTAINER_OF(head, struct net_pkt, sent_list);
   236a2:	f1a4 0634 	sub.w	r6, r4, #52	; 0x34
		tcp_hdr = net_tcp_get_hdr(pkt, &hdr);
   236a6:	a901      	add	r1, sp, #4
   236a8:	4630      	mov	r0, r6
   236aa:	f7ff fccf 	bl	2304c <net_tcp_get_hdr>
		if (!tcp_hdr) {
   236ae:	4602      	mov	r2, r0
   236b0:	2800      	cmp	r0, #0
   236b2:	d0c3      	beq.n	2363c <net_tcp_ack_received+0x20>
	return ((u16_t)src[0] << 8) | src[1];
   236b4:	7903      	ldrb	r3, [r0, #4]
   236b6:	7941      	ldrb	r1, [r0, #5]
   236b8:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
   236bc:	7980      	ldrb	r0, [r0, #6]
   236be:	79d3      	ldrb	r3, [r2, #7]
   236c0:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
	return ((u32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
   236c4:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
	return pkt->appdatalen;
   236c8:	f834 3c04 	ldrh.w	r3, [r4, #-4]
		seq = sys_get_be32(tcp_hdr->seq) + net_pkt_appdatalen(pkt) - 1;
   236cc:	440b      	add	r3, r1
   236ce:	3b01      	subs	r3, #1
   236d0:	eba8 0303 	sub.w	r3, r8, r3
		if (!net_tcp_seq_greater(ack, seq)) {
   236d4:	2b00      	cmp	r3, #0
   236d6:	ddc1      	ble.n	2365c <net_tcp_ack_received+0x40>
		if (tcp_hdr->flags & NET_TCP_FIN) {
   236d8:	7b53      	ldrb	r3, [r2, #13]
   236da:	f013 0f01 	tst.w	r3, #1
   236de:	d0cf      	beq.n	23680 <net_tcp_ack_received+0x64>
   236e0:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
   236e4:	f3c3 3343 	ubfx	r3, r3, #13, #4
			if (s == NET_TCP_FIN_WAIT_1) {
   236e8:	2b07      	cmp	r3, #7
   236ea:	d0c5      	beq.n	23678 <net_tcp_ack_received+0x5c>
			} else if (s == NET_TCP_CLOSING) {
   236ec:	2b0a      	cmp	r3, #10
   236ee:	d1c7      	bne.n	23680 <net_tcp_ack_received+0x64>
				net_tcp_change_state(tcp, NET_TCP_TIME_WAIT);
   236f0:	2109      	movs	r1, #9
   236f2:	4628      	mov	r0, r5
   236f4:	f7ff fabb 	bl	22c6e <net_tcp_change_state>
   236f8:	e7c2      	b.n	23680 <net_tcp_ack_received+0x64>
			list->tail = list->head;
   236fa:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
   236fe:	e7c6      	b.n	2368e <net_tcp_ack_received+0x72>
		restart_timer(ctx->tcp);
   23700:	f8d9 0060 	ldr.w	r0, [r9, #96]	; 0x60
   23704:	f7ff f8db 	bl	228be <restart_timer>
		if (ctx->tcp->flags & NET_TCP_RETRYING) {
   23708:	f8d9 3060 	ldr.w	r3, [r9, #96]	; 0x60
   2370c:	f8b3 20a4 	ldrh.w	r2, [r3, #164]	; 0xa4
   23710:	f412 7f00 	tst.w	r2, #512	; 0x200
   23714:	d0ad      	beq.n	23672 <net_tcp_ack_received+0x56>
	return list->head;
   23716:	f8d3 008c 	ldr.w	r0, [r3, #140]	; 0x8c
			SYS_SLIST_FOR_EACH_CONTAINER(&ctx->tcp->sent_list, pkt,
   2371a:	b108      	cbz	r0, 23720 <net_tcp_ack_received+0x104>
   2371c:	3834      	subs	r0, #52	; 0x34
   2371e:	e013      	b.n	23748 <net_tcp_ack_received+0x12c>
   23720:	2000      	movs	r0, #0
   23722:	e011      	b.n	23748 <net_tcp_ack_received+0x12c>
					do_ref_if_needed(ctx->tcp, pkt);
   23724:	f7f9 fa4e 	bl	1cbc4 <net_pkt_ref>
	pkt->sent_or_eof = sent;
   23728:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   2372c:	f36f 0300 	bfc	r3, #0, #1
   23730:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
			SYS_SLIST_FOR_EACH_CONTAINER(&ctx->tcp->sent_list, pkt,
   23734:	b140      	cbz	r0, 23748 <net_tcp_ack_received+0x12c>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   23736:	f110 0334 	adds.w	r3, r0, #52	; 0x34
   2373a:	d014      	beq.n	23766 <net_tcp_ack_received+0x14a>
	return node->next;
   2373c:	6b42      	ldr	r2, [r0, #52]	; 0x34
   2373e:	b1a2      	cbz	r2, 2376a <net_tcp_ack_received+0x14e>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   23740:	b103      	cbz	r3, 23744 <net_tcp_ack_received+0x128>
	return node->next;
   23742:	6b43      	ldr	r3, [r0, #52]	; 0x34
   23744:	f1a3 0034 	sub.w	r0, r3, #52	; 0x34
   23748:	b188      	cbz	r0, 2376e <net_tcp_ack_received+0x152>
	return pkt->sent_or_eof;
   2374a:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
				if (net_pkt_sent(pkt)) {
   2374e:	f013 0f01 	tst.w	r3, #1
   23752:	d0ef      	beq.n	23734 <net_tcp_ack_received+0x118>
	return pkt->family;
   23754:	f3c3 03c3 	ubfx	r3, r3, #3, #4
					do_ref_if_needed(ctx->tcp, pkt);
   23758:	2b0a      	cmp	r3, #10
   2375a:	d1e3      	bne.n	23724 <net_tcp_ack_received+0x108>
   2375c:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
   23760:	2b02      	cmp	r3, #2
   23762:	d1df      	bne.n	23724 <net_tcp_ack_received+0x108>
   23764:	e7e0      	b.n	23728 <net_tcp_ack_received+0x10c>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   23766:	461a      	mov	r2, r3
   23768:	e7e9      	b.n	2373e <net_tcp_ack_received+0x122>
			SYS_SLIST_FOR_EACH_CONTAINER(&ctx->tcp->sent_list, pkt,
   2376a:	2000      	movs	r0, #0
   2376c:	e7ec      	b.n	23748 <net_tcp_ack_received+0x12c>
			net_tcp_send_data(ctx);
   2376e:	4648      	mov	r0, r9
   23770:	f7ff ff1a 	bl	235a8 <net_tcp_send_data>
}
   23774:	e77d      	b.n	23672 <net_tcp_ack_received+0x56>
   23776:	bf00      	nop
   23778:	200029e8 	.word	0x200029e8

0002377c <iface2str>:
	if (iface->l2 == &NET_L2_GET_NAME(BLUETOOTH)) {
   2377c:	6842      	ldr	r2, [r0, #4]
   2377e:	4b08      	ldr	r3, [pc, #32]	; (237a0 <iface2str+0x24>)
   23780:	429a      	cmp	r2, r3
   23782:	d004      	beq.n	2378e <iface2str+0x12>
	if (extra) {
   23784:	b151      	cbz	r1, 2379c <iface2str+0x20>
		*extra = "==============";
   23786:	4b07      	ldr	r3, [pc, #28]	; (237a4 <iface2str+0x28>)
   23788:	600b      	str	r3, [r1, #0]
	return "<unknown type>";
   2378a:	4807      	ldr	r0, [pc, #28]	; (237a8 <iface2str+0x2c>)
   2378c:	4770      	bx	lr
		if (extra) {
   2378e:	b119      	cbz	r1, 23798 <iface2str+0x1c>
			*extra = "=========";
   23790:	4b06      	ldr	r3, [pc, #24]	; (237ac <iface2str+0x30>)
   23792:	600b      	str	r3, [r1, #0]
		return "Bluetooth";
   23794:	4806      	ldr	r0, [pc, #24]	; (237b0 <iface2str+0x34>)
   23796:	4770      	bx	lr
   23798:	4805      	ldr	r0, [pc, #20]	; (237b0 <iface2str+0x34>)
   2379a:	4770      	bx	lr
	return "<unknown type>";
   2379c:	4802      	ldr	r0, [pc, #8]	; (237a8 <iface2str+0x2c>)
}
   2379e:	4770      	bx	lr
   237a0:	0002eddc 	.word	0x0002eddc
   237a4:	0002fc88 	.word	0x0002fc88
   237a8:	0002fc6c 	.word	0x0002fc6c
   237ac:	0002fc7c 	.word	0x0002fc7c
   237b0:	0002fc60 	.word	0x0002fc60

000237b4 <slab_pool_found_already>:
				    struct k_mem_slab *slab,
				    struct net_buf_pool *pool)
{
	int i;

	for (i = 0; i < CONFIG_NET_MAX_CONTEXTS; i++) {
   237b4:	2300      	movs	r3, #0
   237b6:	2b05      	cmp	r3, #5
   237b8:	dc18      	bgt.n	237ec <slab_pool_found_already+0x38>
{
   237ba:	b410      	push	{r4}
   237bc:	e008      	b.n	237d0 <slab_pool_found_already+0x1c>
		if (slab) {
			if (info->tx_slabs[i] == slab) {
				return true;
			}
		} else {
			if (info->data_pools[i] == pool) {
   237be:	f103 0408 	add.w	r4, r3, #8
   237c2:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
   237c6:	4294      	cmp	r4, r2
   237c8:	d00e      	beq.n	237e8 <slab_pool_found_already+0x34>
	for (i = 0; i < CONFIG_NET_MAX_CONTEXTS; i++) {
   237ca:	3301      	adds	r3, #1
   237cc:	2b05      	cmp	r3, #5
   237ce:	dc08      	bgt.n	237e2 <slab_pool_found_already+0x2e>
		if (slab) {
   237d0:	2900      	cmp	r1, #0
   237d2:	d0f4      	beq.n	237be <slab_pool_found_already+0xa>
			if (info->tx_slabs[i] == slab) {
   237d4:	1c9c      	adds	r4, r3, #2
   237d6:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
   237da:	42a1      	cmp	r1, r4
   237dc:	d1f5      	bne.n	237ca <slab_pool_found_already+0x16>
				return true;
   237de:	2001      	movs	r0, #1
   237e0:	e000      	b.n	237e4 <slab_pool_found_already+0x30>
				return true;
			}
		}
	}

	return false;
   237e2:	2000      	movs	r0, #0
}
   237e4:	bc10      	pop	{r4}
   237e6:	4770      	bx	lr
				return true;
   237e8:	2001      	movs	r0, #1
   237ea:	e7fb      	b.n	237e4 <slab_pool_found_already+0x30>
	return false;
   237ec:	2000      	movs	r0, #0
}
   237ee:	4770      	bx	lr

000237f0 <net_shell_cmd_allocs>:
{
   237f0:	b508      	push	{r3, lr}
	printk("Enable CONFIG_NET_DEBUG_NET_PKT to see allocations.\n");
   237f2:	4802      	ldr	r0, [pc, #8]	; (237fc <net_shell_cmd_allocs+0xc>)
   237f4:	f7df fba8 	bl	2f48 <printk>
}
   237f8:	2000      	movs	r0, #0
   237fa:	bd08      	pop	{r3, pc}
   237fc:	0002ff64 	.word	0x0002ff64

00023800 <net_shell_cmd_app>:
{
   23800:	b508      	push	{r3, lr}
	printk("Enable CONFIG_NET_DEBUG_APP and either CONFIG_NET_APP_CLIENT "
   23802:	4802      	ldr	r0, [pc, #8]	; (2380c <net_shell_cmd_app+0xc>)
   23804:	f7df fba0 	bl	2f48 <printk>
}
   23808:	2000      	movs	r0, #0
   2380a:	bd08      	pop	{r3, pc}
   2380c:	0002ff9c 	.word	0x0002ff9c

00023810 <net_shell_cmd_arp>:
{
   23810:	b508      	push	{r3, lr}
	printk("Enable CONFIG_NET_ARP, CONFIG_NET_IPV4 and "
   23812:	4802      	ldr	r0, [pc, #8]	; (2381c <net_shell_cmd_arp+0xc>)
   23814:	f7df fb98 	bl	2f48 <printk>
}
   23818:	2000      	movs	r0, #0
   2381a:	bd08      	pop	{r3, pc}
   2381c:	00030020 	.word	0x00030020

00023820 <net_shell_cmd_dns>:
{
   23820:	b508      	push	{r3, lr}
	printk("DNS resolver not supported.\n");
   23822:	4802      	ldr	r0, [pc, #8]	; (2382c <net_shell_cmd_dns+0xc>)
   23824:	f7df fb90 	bl	2f48 <printk>
}
   23828:	2000      	movs	r0, #0
   2382a:	bd08      	pop	{r3, pc}
   2382c:	00030120 	.word	0x00030120

00023830 <net_shell_cmd_http>:
{
   23830:	b508      	push	{r3, lr}
	printk("Enable CONFIG_NET_DEBUG_HTTP_CONN and CONFIG_HTTP_SERVER "
   23832:	4802      	ldr	r0, [pc, #8]	; (2383c <net_shell_cmd_http+0xc>)
   23834:	f7df fb88 	bl	2f48 <printk>
}
   23838:	2000      	movs	r0, #0
   2383a:	bd08      	pop	{r3, pc}
   2383c:	00030140 	.word	0x00030140

00023840 <context_info>:
	return context->flags & NET_CONTEXT_IN_USE;
   23840:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
#if defined(CONFIG_NET_CONTEXT_NET_PKT_POOL)
	struct ctx_info *info = user_data;
	struct k_mem_slab *slab;
	struct net_buf_pool *pool;

	if (!net_context_is_used(context)) {
   23844:	f013 0f01 	tst.w	r3, #1
   23848:	d032      	beq.n	238b0 <context_info+0x70>
{
   2384a:	b570      	push	{r4, r5, r6, lr}
   2384c:	460d      	mov	r5, r1
   2384e:	4604      	mov	r4, r0
		return;
	}

	if (context->tx_slab) {
   23850:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
   23852:	b19b      	cbz	r3, 2387c <context_info+0x3c>
		slab = context->tx_slab();
   23854:	4798      	blx	r3
   23856:	4606      	mov	r6, r0

		if (slab_pool_found_already(info, slab, NULL)) {
   23858:	2200      	movs	r2, #0
   2385a:	4601      	mov	r1, r0
   2385c:	4628      	mov	r0, r5
   2385e:	f7ff ffa9 	bl	237b4 <slab_pool_found_already>
   23862:	b100      	cbz	r0, 23866 <context_info+0x26>
   23864:	bd70      	pop	{r4, r5, r6, pc}
#if defined(CONFIG_NET_DEBUG_NET_PKT)
		printk("%p\t%zu\t%u\t%u\tETX\n",
		       slab, slab->num_blocks * slab->block_size,
		       slab->num_blocks, k_mem_slab_num_free_get(slab));
#else
		printk("%p\t%d\tETX\n", slab, slab->num_blocks);
   23866:	68b2      	ldr	r2, [r6, #8]
   23868:	4631      	mov	r1, r6
   2386a:	4812      	ldr	r0, [pc, #72]	; (238b4 <context_info+0x74>)
   2386c:	f7df fb6c 	bl	2f48 <printk>
#endif
		info->are_external_pools = true;
   23870:	2301      	movs	r3, #1
   23872:	712b      	strb	r3, [r5, #4]
		info->tx_slabs[info->pos] = slab;
   23874:	682b      	ldr	r3, [r5, #0]
   23876:	3302      	adds	r3, #2
   23878:	f845 6023 	str.w	r6, [r5, r3, lsl #2]
	}

	if (context->data_pool) {
   2387c:	6c23      	ldr	r3, [r4, #64]	; 0x40
   2387e:	b19b      	cbz	r3, 238a8 <context_info+0x68>
		pool = context->data_pool();
   23880:	4798      	blx	r3
   23882:	4604      	mov	r4, r0

		if (slab_pool_found_already(info, NULL, pool)) {
   23884:	4602      	mov	r2, r0
   23886:	2100      	movs	r1, #0
   23888:	4628      	mov	r0, r5
   2388a:	f7ff ff93 	bl	237b4 <slab_pool_found_already>
   2388e:	2800      	cmp	r0, #0
   23890:	d1e8      	bne.n	23864 <context_info+0x24>
#if defined(CONFIG_NET_DEBUG_NET_PKT)
		printk("%p\t%d\t%d\t%d\tEDATA (%s)\n",
		       pool, pool->pool_size, pool->buf_count,
		       pool->avail_count, pool->name);
#else
		printk("%p\t%d\tEDATA\n", pool, pool->buf_count);
   23892:	8a22      	ldrh	r2, [r4, #16]
   23894:	4621      	mov	r1, r4
   23896:	4808      	ldr	r0, [pc, #32]	; (238b8 <context_info+0x78>)
   23898:	f7df fb56 	bl	2f48 <printk>
#endif
		info->are_external_pools = true;
   2389c:	2301      	movs	r3, #1
   2389e:	712b      	strb	r3, [r5, #4]
		info->data_pools[info->pos] = pool;
   238a0:	682b      	ldr	r3, [r5, #0]
   238a2:	3308      	adds	r3, #8
   238a4:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
	}

	info->pos++;
   238a8:	682b      	ldr	r3, [r5, #0]
   238aa:	3301      	adds	r3, #1
   238ac:	602b      	str	r3, [r5, #0]
   238ae:	e7d9      	b.n	23864 <context_info+0x24>
   238b0:	4770      	bx	lr
   238b2:	bf00      	nop
   238b4:	0002fc24 	.word	0x0002fc24
   238b8:	0002fc30 	.word	0x0002fc30

000238bc <net_shell_cmd_rpl>:
}

#endif /* CONFIG_NET_RPL */

int net_shell_cmd_rpl(int argc, char *argv[])
{
   238bc:	b508      	push	{r3, lr}
		printk("No parents found.\n");
	}

	printk("\n");
#else
	printk("RPL not enabled, set CONFIG_NET_RPL to enable it.\n");
   238be:	4802      	ldr	r0, [pc, #8]	; (238c8 <net_shell_cmd_rpl+0xc>)
   238c0:	f7df fb42 	bl	2f48 <printk>
#endif

	return 0;
}
   238c4:	2000      	movs	r0, #0
   238c6:	bd08      	pop	{r3, pc}
   238c8:	00030350 	.word	0x00030350

000238cc <net_shell_cmd_stacks>:
extern K_THREAD_STACK_DEFINE(sys_work_q_stack,
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);
#endif

int net_shell_cmd_stacks(int argc, char *argv[])
{
   238cc:	b530      	push	{r4, r5, lr}
   238ce:	b087      	sub	sp, #28
	struct net_stack_info *info;

	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	for (info = __net_stack_start; info != __net_stack_end; info++) {
   238d0:	4d3f      	ldr	r5, [pc, #252]	; (239d0 <net_shell_cmd_stacks+0x104>)
   238d2:	e011      	b.n	238f8 <net_shell_cmd_stacks+0x2c>
						unsigned *unused)
{
	*unused = stack_unused_space_get(stack, size);

	/* Calculate the real size reserved for the stack */
	*pcnt = ((size - *unused) * 100) / size;
   238d4:	1a81      	subs	r1, r0, r2
   238d6:	2364      	movs	r3, #100	; 0x64
   238d8:	fb03 f301 	mul.w	r3, r3, r1
   238dc:	fbb3 f3f0 	udiv	r3, r3, r0
		net_analyze_stack_get_values(K_THREAD_STACK_BUFFER(info->stack),
					     info->size, &pcnt, &unused);

#if defined(CONFIG_INIT_STACKS)
		printk("%s [%s] stack size %zu/%zu bytes unused %u usage"
   238e0:	9304      	str	r3, [sp, #16]
   238e2:	9003      	str	r0, [sp, #12]
   238e4:	9102      	str	r1, [sp, #8]
   238e6:	9201      	str	r2, [sp, #4]
   238e8:	9000      	str	r0, [sp, #0]
   238ea:	68eb      	ldr	r3, [r5, #12]
   238ec:	68aa      	ldr	r2, [r5, #8]
   238ee:	6869      	ldr	r1, [r5, #4]
   238f0:	4838      	ldr	r0, [pc, #224]	; (239d4 <net_shell_cmd_stacks+0x108>)
   238f2:	f7df fb29 	bl	2f48 <printk>
	for (info = __net_stack_start; info != __net_stack_end; info++) {
   238f6:	3514      	adds	r5, #20
   238f8:	4b37      	ldr	r3, [pc, #220]	; (239d8 <net_shell_cmd_stacks+0x10c>)
   238fa:	429d      	cmp	r5, r3
   238fc:	d00b      	beq.n	23916 <net_shell_cmd_stacks+0x4a>
		net_analyze_stack_get_values(K_THREAD_STACK_BUFFER(info->stack),
   238fe:	682c      	ldr	r4, [r5, #0]
   23900:	6928      	ldr	r0, [r5, #16]
   23902:	2300      	movs	r3, #0
	size_t unused = 0;
   23904:	461a      	mov	r2, r3
	for (i = 0; i < size; i++) {
   23906:	4298      	cmp	r0, r3
   23908:	d9e4      	bls.n	238d4 <net_shell_cmd_stacks+0x8>
		if ((unsigned char)stack[i] == 0xaa) {
   2390a:	5ce1      	ldrb	r1, [r4, r3]
   2390c:	29aa      	cmp	r1, #170	; 0xaa
   2390e:	d1e1      	bne.n	238d4 <net_shell_cmd_stacks+0x8>
			unused++;
   23910:	3201      	adds	r2, #1
	for (i = 0; i < size; i++) {
   23912:	3301      	adds	r3, #1
   23914:	e7f7      	b.n	23906 <net_shell_cmd_stacks+0x3a>
   23916:	2300      	movs	r3, #0
   23918:	461a      	mov	r2, r3
   2391a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   2391e:	d206      	bcs.n	2392e <net_shell_cmd_stacks+0x62>
		if ((unsigned char)stack[i] == 0xaa) {
   23920:	492e      	ldr	r1, [pc, #184]	; (239dc <net_shell_cmd_stacks+0x110>)
   23922:	5cc9      	ldrb	r1, [r1, r3]
   23924:	29aa      	cmp	r1, #170	; 0xaa
   23926:	d102      	bne.n	2392e <net_shell_cmd_stacks+0x62>
			unused++;
   23928:	3201      	adds	r2, #1
	for (i = 0; i < size; i++) {
   2392a:	3301      	adds	r3, #1
   2392c:	e7f5      	b.n	2391a <net_shell_cmd_stacks+0x4e>
   2392e:	f5c2 6100 	rsb	r1, r2, #2048	; 0x800
   23932:	2364      	movs	r3, #100	; 0x64
   23934:	fb03 f301 	mul.w	r3, r3, r1
   23938:	0adb      	lsrs	r3, r3, #11

#if defined(CONFIG_INIT_STACKS)
	net_analyze_stack_get_values(K_THREAD_STACK_BUFFER(_main_stack),
				     K_THREAD_STACK_SIZEOF(_main_stack),
				     &pcnt, &unused);
	printk("%s [%s] stack size %d/%d bytes unused %u usage"
   2393a:	9304      	str	r3, [sp, #16]
   2393c:	f44f 6300 	mov.w	r3, #2048	; 0x800
   23940:	9303      	str	r3, [sp, #12]
   23942:	9102      	str	r1, [sp, #8]
   23944:	9201      	str	r2, [sp, #4]
   23946:	9300      	str	r3, [sp, #0]
   23948:	4a25      	ldr	r2, [pc, #148]	; (239e0 <net_shell_cmd_stacks+0x114>)
   2394a:	4926      	ldr	r1, [pc, #152]	; (239e4 <net_shell_cmd_stacks+0x118>)
   2394c:	4826      	ldr	r0, [pc, #152]	; (239e8 <net_shell_cmd_stacks+0x11c>)
   2394e:	f7df fafb 	bl	2f48 <printk>
   23952:	2300      	movs	r3, #0
	size_t unused = 0;
   23954:	461a      	mov	r2, r3
	for (i = 0; i < size; i++) {
   23956:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   2395a:	d206      	bcs.n	2396a <net_shell_cmd_stacks+0x9e>
		if ((unsigned char)stack[i] == 0xaa) {
   2395c:	4923      	ldr	r1, [pc, #140]	; (239ec <net_shell_cmd_stacks+0x120>)
   2395e:	5cc9      	ldrb	r1, [r1, r3]
   23960:	29aa      	cmp	r1, #170	; 0xaa
   23962:	d102      	bne.n	2396a <net_shell_cmd_stacks+0x9e>
			unused++;
   23964:	3201      	adds	r2, #1
	for (i = 0; i < size; i++) {
   23966:	3301      	adds	r3, #1
   23968:	e7f5      	b.n	23956 <net_shell_cmd_stacks+0x8a>
   2396a:	f5c2 6100 	rsb	r1, r2, #2048	; 0x800
   2396e:	2364      	movs	r3, #100	; 0x64
   23970:	fb03 f301 	mul.w	r3, r3, r1
   23974:	0adb      	lsrs	r3, r3, #11
	       CONFIG_MAIN_STACK_SIZE - unused, CONFIG_MAIN_STACK_SIZE, pcnt);

	net_analyze_stack_get_values(K_THREAD_STACK_BUFFER(_interrupt_stack),
				     K_THREAD_STACK_SIZEOF(_interrupt_stack),
				     &pcnt, &unused);
	printk("%s [%s] stack size %d/%d bytes unused %u usage"
   23976:	9304      	str	r3, [sp, #16]
   23978:	f44f 6300 	mov.w	r3, #2048	; 0x800
   2397c:	9303      	str	r3, [sp, #12]
   2397e:	9102      	str	r1, [sp, #8]
   23980:	9201      	str	r2, [sp, #4]
   23982:	9300      	str	r3, [sp, #0]
   23984:	4a1a      	ldr	r2, [pc, #104]	; (239f0 <net_shell_cmd_stacks+0x124>)
   23986:	491b      	ldr	r1, [pc, #108]	; (239f4 <net_shell_cmd_stacks+0x128>)
   23988:	4817      	ldr	r0, [pc, #92]	; (239e8 <net_shell_cmd_stacks+0x11c>)
   2398a:	f7df fadd 	bl	2f48 <printk>
   2398e:	2300      	movs	r3, #0
	size_t unused = 0;
   23990:	461a      	mov	r2, r3
	for (i = 0; i < size; i++) {
   23992:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   23996:	d206      	bcs.n	239a6 <net_shell_cmd_stacks+0xda>
		if ((unsigned char)stack[i] == 0xaa) {
   23998:	4917      	ldr	r1, [pc, #92]	; (239f8 <net_shell_cmd_stacks+0x12c>)
   2399a:	5cc9      	ldrb	r1, [r1, r3]
   2399c:	29aa      	cmp	r1, #170	; 0xaa
   2399e:	d102      	bne.n	239a6 <net_shell_cmd_stacks+0xda>
			unused++;
   239a0:	3201      	adds	r2, #1
	for (i = 0; i < size; i++) {
   239a2:	3301      	adds	r3, #1
   239a4:	e7f5      	b.n	23992 <net_shell_cmd_stacks+0xc6>
   239a6:	f5c2 6180 	rsb	r1, r2, #1024	; 0x400
   239aa:	2364      	movs	r3, #100	; 0x64
   239ac:	fb03 f301 	mul.w	r3, r3, r1
   239b0:	0a9b      	lsrs	r3, r3, #10
	       CONFIG_ISR_STACK_SIZE - unused, CONFIG_ISR_STACK_SIZE, pcnt);

	net_analyze_stack_get_values(K_THREAD_STACK_BUFFER(sys_work_q_stack),
				     K_THREAD_STACK_SIZEOF(sys_work_q_stack),
				     &pcnt, &unused);
	printk("%s [%s] stack size %d/%d bytes unused %u usage"
   239b2:	9304      	str	r3, [sp, #16]
   239b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
   239b8:	9303      	str	r3, [sp, #12]
   239ba:	9102      	str	r1, [sp, #8]
   239bc:	9201      	str	r2, [sp, #4]
   239be:	9300      	str	r3, [sp, #0]
   239c0:	4a0e      	ldr	r2, [pc, #56]	; (239fc <net_shell_cmd_stacks+0x130>)
   239c2:	490f      	ldr	r1, [pc, #60]	; (23a00 <net_shell_cmd_stacks+0x134>)
   239c4:	4808      	ldr	r0, [pc, #32]	; (239e8 <net_shell_cmd_stacks+0x11c>)
   239c6:	f7df fabf 	bl	2f48 <printk>
#else
	printk("Enable CONFIG_INIT_STACKS to see usage information.\n");
#endif

	return 0;
}
   239ca:	2000      	movs	r0, #0
   239cc:	b007      	add	sp, #28
   239ce:	bd30      	pop	{r4, r5, pc}
   239d0:	2000d414 	.word	0x2000d414
   239d4:	00030384 	.word	0x00030384
   239d8:	2000d450 	.word	0x2000d450
   239dc:	2000a2b8 	.word	0x2000a2b8
   239e0:	000303c8 	.word	0x000303c8
   239e4:	000303d4 	.word	0x000303d4
   239e8:	000303dc 	.word	0x000303dc
   239ec:	2000abf8 	.word	0x2000abf8
   239f0:	0003041c 	.word	0x0003041c
   239f4:	00030430 	.word	0x00030430
   239f8:	2000b3f8 	.word	0x2000b3f8
   239fc:	00030434 	.word	0x00030434
   23a00:	00030448 	.word	0x00030448

00023a04 <net_shell_cmd_stats>:

int net_shell_cmd_stats(int argc, char *argv[])
{
   23a04:	b510      	push	{r4, lr}
   23a06:	b082      	sub	sp, #8
	printk("IPv6 recv      %d\tsent\t%d\tdrop\t%d\tforwarded\t%d\n",
   23a08:	4c34      	ldr	r4, [pc, #208]	; (23adc <net_shell_cmd_stats+0xd8>)
   23a0a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   23a0c:	9300      	str	r3, [sp, #0]
   23a0e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   23a10:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   23a12:	6a61      	ldr	r1, [r4, #36]	; 0x24
   23a14:	4832      	ldr	r0, [pc, #200]	; (23ae0 <net_shell_cmd_stats+0xdc>)
   23a16:	f7df fa97 	bl	2f48 <printk>
	printk("IPv6 ND recv   %d\tsent\t%d\tdrop\t%d\n",
   23a1a:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   23a1e:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
   23a22:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
   23a26:	482f      	ldr	r0, [pc, #188]	; (23ae4 <net_shell_cmd_stats+0xe0>)
   23a28:	f7df fa8e 	bl	2f48 <printk>
	printk("IPv6 MLD recv  %d\tsent\t%d\tdrop\t%d\n",
   23a2c:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   23a30:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
   23a34:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
   23a38:	482b      	ldr	r0, [pc, #172]	; (23ae8 <net_shell_cmd_stats+0xe4>)
   23a3a:	f7df fa85 	bl	2f48 <printk>
	printk("IP vhlerr      %d\thblener\t%d\tlblener\t%d\n",
   23a3e:	6963      	ldr	r3, [r4, #20]
   23a40:	6922      	ldr	r2, [r4, #16]
   23a42:	68e1      	ldr	r1, [r4, #12]
   23a44:	4829      	ldr	r0, [pc, #164]	; (23aec <net_shell_cmd_stats+0xe8>)
   23a46:	f7df fa7f 	bl	2f48 <printk>
	printk("IP fragerr     %d\tchkerr\t%d\tprotoer\t%d\n",
   23a4a:	6a23      	ldr	r3, [r4, #32]
   23a4c:	69e2      	ldr	r2, [r4, #28]
   23a4e:	69a1      	ldr	r1, [r4, #24]
   23a50:	4827      	ldr	r0, [pc, #156]	; (23af0 <net_shell_cmd_stats+0xec>)
   23a52:	f7df fa79 	bl	2f48 <printk>
	printk("ICMP recv      %d\tsent\t%d\tdrop\t%d\n",
   23a56:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   23a58:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   23a5a:	6b61      	ldr	r1, [r4, #52]	; 0x34
   23a5c:	4825      	ldr	r0, [pc, #148]	; (23af4 <net_shell_cmd_stats+0xf0>)
   23a5e:	f7df fa73 	bl	2f48 <printk>
	printk("ICMP typeer    %d\tchkerr\t%d\n",
   23a62:	6c62      	ldr	r2, [r4, #68]	; 0x44
   23a64:	6c21      	ldr	r1, [r4, #64]	; 0x40
   23a66:	4824      	ldr	r0, [pc, #144]	; (23af8 <net_shell_cmd_stats+0xf4>)
   23a68:	f7df fa6e 	bl	2f48 <printk>
	printk("UDP recv       %d\tsent\t%d\tdrop\t%d\n",
   23a6c:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   23a6e:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
   23a72:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
   23a76:	4821      	ldr	r0, [pc, #132]	; (23afc <net_shell_cmd_stats+0xf8>)
   23a78:	f7df fa66 	bl	2f48 <printk>
	printk("UDP chkerr     %d\n",
   23a7c:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
   23a80:	481f      	ldr	r0, [pc, #124]	; (23b00 <net_shell_cmd_stats+0xfc>)
   23a82:	f7df fa61 	bl	2f48 <printk>
	printk("TCP bytes recv %u\tsent\t%d\n",
   23a86:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   23a88:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   23a8a:	481e      	ldr	r0, [pc, #120]	; (23b04 <net_shell_cmd_stats+0x100>)
   23a8c:	f7df fa5c 	bl	2f48 <printk>
	printk("TCP seg recv   %d\tsent\t%d\tdrop\t%d\n",
   23a90:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   23a92:	6da2      	ldr	r2, [r4, #88]	; 0x58
   23a94:	6d61      	ldr	r1, [r4, #84]	; 0x54
   23a96:	481c      	ldr	r0, [pc, #112]	; (23b08 <net_shell_cmd_stats+0x104>)
   23a98:	f7df fa56 	bl	2f48 <printk>
	printk("TCP seg resent %d\tchkerr\t%d\tackerr\t%d\n",
   23a9c:	6e63      	ldr	r3, [r4, #100]	; 0x64
   23a9e:	6e22      	ldr	r2, [r4, #96]	; 0x60
   23aa0:	6d21      	ldr	r1, [r4, #80]	; 0x50
   23aa2:	481a      	ldr	r0, [pc, #104]	; (23b0c <net_shell_cmd_stats+0x108>)
   23aa4:	f7df fa50 	bl	2f48 <printk>
	printk("TCP seg rsterr %d\trst\t%d\tre-xmit\t%d\n",
   23aa8:	6f23      	ldr	r3, [r4, #112]	; 0x70
   23aaa:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
   23aac:	6ea1      	ldr	r1, [r4, #104]	; 0x68
   23aae:	4818      	ldr	r0, [pc, #96]	; (23b10 <net_shell_cmd_stats+0x10c>)
   23ab0:	f7df fa4a 	bl	2f48 <printk>
	printk("TCP conn drop  %d\tconnrst\t%d\n",
   23ab4:	6fa2      	ldr	r2, [r4, #120]	; 0x78
   23ab6:	6f61      	ldr	r1, [r4, #116]	; 0x74
   23ab8:	4816      	ldr	r0, [pc, #88]	; (23b14 <net_shell_cmd_stats+0x110>)
   23aba:	f7df fa45 	bl	2f48 <printk>
	printk("Bytes received %u\n", GET_STAT(bytes.received));
   23abe:	68a1      	ldr	r1, [r4, #8]
   23ac0:	4815      	ldr	r0, [pc, #84]	; (23b18 <net_shell_cmd_stats+0x114>)
   23ac2:	f7df fa41 	bl	2f48 <printk>
	printk("Bytes sent     %u\n", GET_STAT(bytes.sent));
   23ac6:	6861      	ldr	r1, [r4, #4]
   23ac8:	4814      	ldr	r0, [pc, #80]	; (23b1c <net_shell_cmd_stats+0x118>)
   23aca:	f7df fa3d 	bl	2f48 <printk>
	printk("Processing err %d\n", GET_STAT(processing_error));
   23ace:	6821      	ldr	r1, [r4, #0]
   23ad0:	4813      	ldr	r0, [pc, #76]	; (23b20 <net_shell_cmd_stats+0x11c>)
   23ad2:	f7df fa39 	bl	2f48 <printk>
#else
	printk("Network statistics not compiled in.\n");
#endif

	return 0;
}
   23ad6:	2000      	movs	r0, #0
   23ad8:	b002      	add	sp, #8
   23ada:	bd10      	pop	{r4, pc}
   23adc:	200029e8 	.word	0x200029e8
   23ae0:	00030450 	.word	0x00030450
   23ae4:	00030480 	.word	0x00030480
   23ae8:	000304a4 	.word	0x000304a4
   23aec:	000304c8 	.word	0x000304c8
   23af0:	000304f4 	.word	0x000304f4
   23af4:	0003051c 	.word	0x0003051c
   23af8:	00030540 	.word	0x00030540
   23afc:	00030560 	.word	0x00030560
   23b00:	00030584 	.word	0x00030584
   23b04:	00030598 	.word	0x00030598
   23b08:	000305b4 	.word	0x000305b4
   23b0c:	000305d8 	.word	0x000305d8
   23b10:	00030600 	.word	0x00030600
   23b14:	00030628 	.word	0x00030628
   23b18:	00030648 	.word	0x00030648
   23b1c:	0003065c 	.word	0x0003065c
   23b20:	00030670 	.word	0x00030670

00023b24 <tcp_sent_cb>:

static void tcp_sent_cb(struct net_context *context,
			int status,
			void *token,
			void *user_data)
{
   23b24:	b508      	push	{r3, lr}
	printk("Message sent\n");
   23b26:	4802      	ldr	r0, [pc, #8]	; (23b30 <tcp_sent_cb+0xc>)
   23b28:	f7df fa0e 	bl	2f48 <printk>
   23b2c:	bd08      	pop	{r3, pc}
   23b2e:	bf00      	nop
   23b30:	00030930 	.word	0x00030930

00023b34 <net_shell_cmd_conn>:
{
   23b34:	b510      	push	{r4, lr}
   23b36:	b082      	sub	sp, #8
	int count = 0;
   23b38:	ac02      	add	r4, sp, #8
   23b3a:	2300      	movs	r3, #0
   23b3c:	f844 3d04 	str.w	r3, [r4, #-4]!
	printk("     Context   \tIface         Flags "
   23b40:	4810      	ldr	r0, [pc, #64]	; (23b84 <net_shell_cmd_conn+0x50>)
   23b42:	f7df fa01 	bl	2f48 <printk>
	net_context_foreach(context_cb, &count);
   23b46:	4621      	mov	r1, r4
   23b48:	480f      	ldr	r0, [pc, #60]	; (23b88 <net_shell_cmd_conn+0x54>)
   23b4a:	f7f8 ff03 	bl	1c954 <net_context_foreach>
	if (count == 0) {
   23b4e:	9b01      	ldr	r3, [sp, #4]
   23b50:	b17b      	cbz	r3, 23b72 <net_shell_cmd_conn+0x3e>
	printk("\nTCP        Src port  Dst port   Send-Seq   Send-Ack  MSS"
   23b52:	490e      	ldr	r1, [pc, #56]	; (23b8c <net_shell_cmd_conn+0x58>)
   23b54:	480e      	ldr	r0, [pc, #56]	; (23b90 <net_shell_cmd_conn+0x5c>)
   23b56:	f7df f9f7 	bl	2f48 <printk>
	count = 0;
   23b5a:	a902      	add	r1, sp, #8
   23b5c:	2300      	movs	r3, #0
   23b5e:	f841 3d04 	str.w	r3, [r1, #-4]!
	net_tcp_foreach(tcp_cb, &count);
   23b62:	480c      	ldr	r0, [pc, #48]	; (23b94 <net_shell_cmd_conn+0x60>)
   23b64:	f7ff fa48 	bl	22ff8 <net_tcp_foreach>
	if (count == 0) {
   23b68:	9b01      	ldr	r3, [sp, #4]
   23b6a:	b133      	cbz	r3, 23b7a <net_shell_cmd_conn+0x46>
}
   23b6c:	2000      	movs	r0, #0
   23b6e:	b002      	add	sp, #8
   23b70:	bd10      	pop	{r4, pc}
		printk("No connections\n");
   23b72:	4809      	ldr	r0, [pc, #36]	; (23b98 <net_shell_cmd_conn+0x64>)
   23b74:	f7df f9e8 	bl	2f48 <printk>
   23b78:	e7eb      	b.n	23b52 <net_shell_cmd_conn+0x1e>
		printk("No TCP connections\n");
   23b7a:	4808      	ldr	r0, [pc, #32]	; (23b9c <net_shell_cmd_conn+0x68>)
   23b7c:	f7df f9e4 	bl	2f48 <printk>
   23b80:	e7f4      	b.n	23b6c <net_shell_cmd_conn+0x38>
   23b82:	bf00      	nop
   23b84:	0003007c 	.word	0x0003007c
   23b88:	00023d11 	.word	0x00023d11
   23b8c:	0002f390 	.word	0x0002f390
   23b90:	000300cc 	.word	0x000300cc
   23b94:	00023ba1 	.word	0x00023ba1
   23b98:	000300bc 	.word	0x000300bc
   23b9c:	0003010c 	.word	0x0003010c

00023ba0 <tcp_cb>:
{
   23ba0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   23ba4:	b084      	sub	sp, #16
   23ba6:	4604      	mov	r4, r0
   23ba8:	460f      	mov	r7, r1
	u16_t recv_mss = net_tcp_get_recv_mss(tcp);
   23baa:	f7fe ffe4 	bl	22b76 <net_tcp_get_recv_mss>
   23bae:	4680      	mov	r8, r0
	       ntohs(net_sin6_ptr(&tcp->context->local)->sin6_port),
   23bb0:	6823      	ldr	r3, [r4, #0]
   23bb2:	895a      	ldrh	r2, [r3, #10]
   23bb4:	0215      	lsls	r5, r2, #8
   23bb6:	ea45 2512 	orr.w	r5, r5, r2, lsr #8
   23bba:	b2ad      	uxth	r5, r5
	       ntohs(net_sin6(&tcp->context->remote)->sin6_port),
   23bbc:	8adb      	ldrh	r3, [r3, #22]
   23bbe:	021e      	lsls	r6, r3, #8
   23bc0:	ea46 2613 	orr.w	r6, r6, r3, lsr #8
   23bc4:	b2b6      	uxth	r6, r6
	printk("%p    %5u     %5u %10u %10u %5u   %s\n",
   23bc6:	f8d4 9098 	ldr.w	r9, [r4, #152]	; 0x98
   23bca:	f8d4 a09c 	ldr.w	sl, [r4, #156]	; 0x9c
   23bce:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
   23bd2:	f3c0 3043 	ubfx	r0, r0, #13, #4
   23bd6:	f7ff f845 	bl	22c64 <net_tcp_state_str>
   23bda:	9003      	str	r0, [sp, #12]
   23bdc:	f8cd 8008 	str.w	r8, [sp, #8]
   23be0:	f8cd a004 	str.w	sl, [sp, #4]
   23be4:	f8cd 9000 	str.w	r9, [sp]
   23be8:	4633      	mov	r3, r6
   23bea:	462a      	mov	r2, r5
   23bec:	4621      	mov	r1, r4
   23bee:	4804      	ldr	r0, [pc, #16]	; (23c00 <tcp_cb+0x60>)
   23bf0:	f7df f9aa 	bl	2f48 <printk>
	(*count)++;
   23bf4:	683b      	ldr	r3, [r7, #0]
   23bf6:	3301      	adds	r3, #1
   23bf8:	603b      	str	r3, [r7, #0]
}
   23bfa:	b004      	add	sp, #16
   23bfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   23c00:	0003088c 	.word	0x0003088c

00023c04 <get_addresses>:
{
   23c04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   23c08:	b083      	sub	sp, #12
   23c0a:	460d      	mov	r5, r1
   23c0c:	4616      	mov	r6, r2
   23c0e:	461f      	mov	r7, r3
	if (context->local.family == AF_INET6) {
   23c10:	8903      	ldrh	r3, [r0, #8]
   23c12:	2b0a      	cmp	r3, #10
   23c14:	d008      	beq.n	23c28 <get_addresses+0x24>
	if (context->local.family == AF_UNSPEC) {
   23c16:	b393      	cbz	r3, 23c7e <get_addresses+0x7a>
		snprintk(addr_local, local_len, "AF_UNK(%d)",
   23c18:	4a1c      	ldr	r2, [pc, #112]	; (23c8c <get_addresses+0x88>)
   23c1a:	4631      	mov	r1, r6
   23c1c:	4628      	mov	r0, r5
   23c1e:	f7df f9a1 	bl	2f64 <snprintk>
}
   23c22:	b003      	add	sp, #12
   23c24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   23c28:	4604      	mov	r4, r0
	return net_addr_ntop(AF_INET6, addr, (char *)buf, sizeof(buf));
   23c2a:	f8df 9068 	ldr.w	r9, [pc, #104]	; 23c94 <get_addresses+0x90>
   23c2e:	2328      	movs	r3, #40	; 0x28
   23c30:	464a      	mov	r2, r9
   23c32:	68c1      	ldr	r1, [r0, #12]
   23c34:	200a      	movs	r0, #10
   23c36:	f7f9 fc1d 	bl	1d474 <net_addr_ntop>
			 ntohs(net_sin6_ptr(&context->local)->sin6_port));
   23c3a:	8962      	ldrh	r2, [r4, #10]
   23c3c:	0213      	lsls	r3, r2, #8
   23c3e:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
   23c42:	b29b      	uxth	r3, r3
		snprintk(addr_local, local_len, "[%s]:%u",
   23c44:	f8df 8050 	ldr.w	r8, [pc, #80]	; 23c98 <get_addresses+0x94>
   23c48:	9300      	str	r3, [sp, #0]
   23c4a:	4603      	mov	r3, r0
   23c4c:	4642      	mov	r2, r8
   23c4e:	4631      	mov	r1, r6
   23c50:	4628      	mov	r0, r5
   23c52:	f7df f987 	bl	2f64 <snprintk>
   23c56:	2328      	movs	r3, #40	; 0x28
   23c58:	464a      	mov	r2, r9
   23c5a:	f104 0118 	add.w	r1, r4, #24
   23c5e:	200a      	movs	r0, #10
   23c60:	f7f9 fc08 	bl	1d474 <net_addr_ntop>
			 ntohs(net_sin6(&context->remote)->sin6_port));
   23c64:	8ae2      	ldrh	r2, [r4, #22]
   23c66:	0213      	lsls	r3, r2, #8
   23c68:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
   23c6c:	b29b      	uxth	r3, r3
		snprintk(addr_remote, remote_len, "[%s]:%u",
   23c6e:	9300      	str	r3, [sp, #0]
   23c70:	4603      	mov	r3, r0
   23c72:	4642      	mov	r2, r8
   23c74:	990a      	ldr	r1, [sp, #40]	; 0x28
   23c76:	4638      	mov	r0, r7
   23c78:	f7df f974 	bl	2f64 <snprintk>
   23c7c:	e7d1      	b.n	23c22 <get_addresses+0x1e>
		snprintk(addr_local, local_len, "AF_UNSPEC");
   23c7e:	4a04      	ldr	r2, [pc, #16]	; (23c90 <get_addresses+0x8c>)
   23c80:	4631      	mov	r1, r6
   23c82:	4628      	mov	r0, r5
   23c84:	f7df f96e 	bl	2f64 <snprintk>
   23c88:	e7cb      	b.n	23c22 <get_addresses+0x1e>
   23c8a:	bf00      	nop
   23c8c:	0002fc54 	.word	0x0002fc54
   23c90:	0002fc48 	.word	0x0002fc48
   23c94:	200023c0 	.word	0x200023c0
   23c98:	0002fc40 	.word	0x0002fc40

00023c9c <print_connect_info>:
{
   23c9c:	b570      	push	{r4, r5, r6, lr}
	switch (family) {
   23c9e:	2802      	cmp	r0, #2
   23ca0:	d008      	beq.n	23cb4 <print_connect_info+0x18>
   23ca2:	460d      	mov	r5, r1
   23ca4:	4614      	mov	r4, r2
   23ca6:	280a      	cmp	r0, #10
   23ca8:	d008      	beq.n	23cbc <print_connect_info+0x20>
		printk("Unknown protocol family (%d)\n", family);
   23caa:	4601      	mov	r1, r0
   23cac:	4813      	ldr	r0, [pc, #76]	; (23cfc <print_connect_info+0x60>)
   23cae:	f7df f94b 	bl	2f48 <printk>
   23cb2:	bd70      	pop	{r4, r5, r6, pc}
		printk("IPv4 not supported\n");
   23cb4:	4812      	ldr	r0, [pc, #72]	; (23d00 <print_connect_info+0x64>)
   23cb6:	f7df f947 	bl	2f48 <printk>
		break;
   23cba:	bd70      	pop	{r4, r5, r6, pc}
   23cbc:	4e11      	ldr	r6, [pc, #68]	; (23d04 <print_connect_info+0x68>)
   23cbe:	2328      	movs	r3, #40	; 0x28
   23cc0:	4632      	mov	r2, r6
   23cc2:	3104      	adds	r1, #4
   23cc4:	200a      	movs	r0, #10
   23cc6:	f7f9 fbd5 	bl	1d474 <net_addr_ntop>
		       ntohs(net_sin6(myaddr)->sin6_port));
   23cca:	886b      	ldrh	r3, [r5, #2]
   23ccc:	021a      	lsls	r2, r3, #8
   23cce:	ea42 2213 	orr.w	r2, r2, r3, lsr #8
		printk("Connecting from [%s]:%u ",
   23cd2:	b292      	uxth	r2, r2
   23cd4:	4601      	mov	r1, r0
   23cd6:	480c      	ldr	r0, [pc, #48]	; (23d08 <print_connect_info+0x6c>)
   23cd8:	f7df f936 	bl	2f48 <printk>
   23cdc:	2328      	movs	r3, #40	; 0x28
   23cde:	4632      	mov	r2, r6
   23ce0:	1d21      	adds	r1, r4, #4
   23ce2:	200a      	movs	r0, #10
   23ce4:	f7f9 fbc6 	bl	1d474 <net_addr_ntop>
		       ntohs(net_sin6(addr)->sin6_port));
   23ce8:	8863      	ldrh	r3, [r4, #2]
   23cea:	021a      	lsls	r2, r3, #8
   23cec:	ea42 2213 	orr.w	r2, r2, r3, lsr #8
		printk("to [%s]:%u\n",
   23cf0:	b292      	uxth	r2, r2
   23cf2:	4601      	mov	r1, r0
   23cf4:	4805      	ldr	r0, [pc, #20]	; (23d0c <print_connect_info+0x70>)
   23cf6:	f7df f927 	bl	2f48 <printk>
		break;
   23cfa:	bd70      	pop	{r4, r5, r6, pc}
   23cfc:	00030824 	.word	0x00030824
   23d00:	000307e8 	.word	0x000307e8
   23d04:	200023c0 	.word	0x200023c0
   23d08:	000307fc 	.word	0x000307fc
   23d0c:	00030818 	.word	0x00030818

00023d10 <context_cb>:
{
   23d10:	b5f0      	push	{r4, r5, r6, r7, lr}
   23d12:	b09f      	sub	sp, #124	; 0x7c
   23d14:	4604      	mov	r4, r0
   23d16:	460d      	mov	r5, r1
	char addr_remote[ADDR_LEN + 7] = "";
   23d18:	2100      	movs	r1, #0
   23d1a:	9106      	str	r1, [sp, #24]
   23d1c:	222b      	movs	r2, #43	; 0x2b
   23d1e:	a807      	add	r0, sp, #28
   23d20:	f006 feb0 	bl	2aa84 <memset>
	get_addresses(context, addr_local, sizeof(addr_local),
   23d24:	222f      	movs	r2, #47	; 0x2f
   23d26:	9200      	str	r2, [sp, #0]
   23d28:	ab06      	add	r3, sp, #24
   23d2a:	a912      	add	r1, sp, #72	; 0x48
   23d2c:	4620      	mov	r0, r4
   23d2e:	f7ff ff69 	bl	23c04 <get_addresses>
	       (*count) + 1, context,
   23d32:	682e      	ldr	r6, [r5, #0]
	printk("[%2d] %p\t%p    %c%c%c   %16s\t%16s\n",
   23d34:	3601      	adds	r6, #1
	return net_if_get_by_index(context->iface);
   23d36:	f894 005c 	ldrb.w	r0, [r4, #92]	; 0x5c
   23d3a:	f7f7 fd0b 	bl	1b754 <net_if_get_by_index>
   23d3e:	4603      	mov	r3, r0
	if (context->flags & NET_CONTEXT_FAMILY) {
   23d40:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
   23d44:	f012 0f10 	tst.w	r2, #16
   23d48:	d022      	beq.n	23d90 <context_cb+0x80>
		return AF_INET6;
   23d4a:	210a      	movs	r1, #10
   23d4c:	290a      	cmp	r1, #10
   23d4e:	d021      	beq.n	23d94 <context_cb+0x84>
   23d50:	2134      	movs	r1, #52	; 0x34
	if (context->flags & NET_CONTEXT_TYPE) {
   23d52:	f012 0f20 	tst.w	r2, #32
   23d56:	d01f      	beq.n	23d98 <context_cb+0x88>
		return SOCK_STREAM;
   23d58:	2001      	movs	r0, #1
   23d5a:	2802      	cmp	r0, #2
   23d5c:	d01e      	beq.n	23d9c <context_cb+0x8c>
   23d5e:	2053      	movs	r0, #83	; 0x53
	if (context->flags & NET_CONTEXT_PROTO) {
   23d60:	f012 0f40 	tst.w	r2, #64	; 0x40
   23d64:	d01c      	beq.n	23da0 <context_cb+0x90>
		return IPPROTO_TCP;
   23d66:	2206      	movs	r2, #6
   23d68:	2a11      	cmp	r2, #17
   23d6a:	d01b      	beq.n	23da4 <context_cb+0x94>
   23d6c:	2754      	movs	r7, #84	; 0x54
   23d6e:	aa06      	add	r2, sp, #24
   23d70:	9204      	str	r2, [sp, #16]
   23d72:	aa12      	add	r2, sp, #72	; 0x48
   23d74:	9203      	str	r2, [sp, #12]
   23d76:	9702      	str	r7, [sp, #8]
   23d78:	9001      	str	r0, [sp, #4]
   23d7a:	9100      	str	r1, [sp, #0]
   23d7c:	4622      	mov	r2, r4
   23d7e:	4631      	mov	r1, r6
   23d80:	4809      	ldr	r0, [pc, #36]	; (23da8 <context_cb+0x98>)
   23d82:	f7df f8e1 	bl	2f48 <printk>
	(*count)++;
   23d86:	682b      	ldr	r3, [r5, #0]
   23d88:	3301      	adds	r3, #1
   23d8a:	602b      	str	r3, [r5, #0]
}
   23d8c:	b01f      	add	sp, #124	; 0x7c
   23d8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return AF_INET;
   23d90:	2102      	movs	r1, #2
   23d92:	e7db      	b.n	23d4c <context_cb+0x3c>
	printk("[%2d] %p\t%p    %c%c%c   %16s\t%16s\n",
   23d94:	2136      	movs	r1, #54	; 0x36
   23d96:	e7dc      	b.n	23d52 <context_cb+0x42>
	return SOCK_DGRAM;
   23d98:	2002      	movs	r0, #2
   23d9a:	e7de      	b.n	23d5a <context_cb+0x4a>
   23d9c:	2044      	movs	r0, #68	; 0x44
   23d9e:	e7df      	b.n	23d60 <context_cb+0x50>
	return IPPROTO_UDP;
   23da0:	2211      	movs	r2, #17
   23da2:	e7e1      	b.n	23d68 <context_cb+0x58>
   23da4:	2755      	movs	r7, #85	; 0x55
   23da6:	e7e2      	b.n	23d6e <context_cb+0x5e>
   23da8:	0002fc00 	.word	0x0002fc00

00023dac <net_shell_cmd_iface>:
{
   23dac:	b508      	push	{r3, lr}
	net_if_foreach(iface_cb, NULL);
   23dae:	2100      	movs	r1, #0
   23db0:	4802      	ldr	r0, [pc, #8]	; (23dbc <net_shell_cmd_iface+0x10>)
   23db2:	f7f7 fceb 	bl	1b78c <net_if_foreach>
}
   23db6:	2000      	movs	r0, #0
   23db8:	bd08      	pop	{r3, pc}
   23dba:	bf00      	nop
   23dbc:	0001e95d 	.word	0x0001e95d

00023dc0 <net_shell_cmd_route>:
{
   23dc0:	b508      	push	{r3, lr}
	net_if_foreach(iface_per_route_cb, NULL);
   23dc2:	2100      	movs	r1, #0
   23dc4:	4802      	ldr	r0, [pc, #8]	; (23dd0 <net_shell_cmd_route+0x10>)
   23dc6:	f7f7 fce1 	bl	1b78c <net_if_foreach>
}
   23dca:	2000      	movs	r0, #0
   23dcc:	bd08      	pop	{r3, pc}
   23dce:	bf00      	nop
   23dd0:	000241fd 	.word	0x000241fd

00023dd4 <net_shell_cmd_mem>:
{
   23dd4:	b500      	push	{lr}
   23dd6:	b093      	sub	sp, #76	; 0x4c
	net_pkt_get_info(&rx, &tx, &rx_data, &tx_data);
   23dd8:	ab0e      	add	r3, sp, #56	; 0x38
   23dda:	aa0f      	add	r2, sp, #60	; 0x3c
   23ddc:	a910      	add	r1, sp, #64	; 0x40
   23dde:	a811      	add	r0, sp, #68	; 0x44
   23de0:	f7f9 f9aa 	bl	1d138 <net_pkt_get_info>
	printk("Fragment length %d bytes\n", CONFIG_NET_BUF_DATA_SIZE);
   23de4:	f44f 7100 	mov.w	r1, #512	; 0x200
   23de8:	4819      	ldr	r0, [pc, #100]	; (23e50 <net_shell_cmd_mem+0x7c>)
   23dea:	f7df f8ad 	bl	2f48 <printk>
	printk("Network buffer pools:\n");
   23dee:	4819      	ldr	r0, [pc, #100]	; (23e54 <net_shell_cmd_mem+0x80>)
   23df0:	f7df f8aa 	bl	2f48 <printk>
	printk("(CONFIG_NET_BUF_POOL_USAGE to see free #s)\n");
   23df4:	4818      	ldr	r0, [pc, #96]	; (23e58 <net_shell_cmd_mem+0x84>)
   23df6:	f7df f8a7 	bl	2f48 <printk>
	printk("Address\t\tTotal\tName\n");
   23dfa:	4818      	ldr	r0, [pc, #96]	; (23e5c <net_shell_cmd_mem+0x88>)
   23dfc:	f7df f8a4 	bl	2f48 <printk>
	printk("%p\t%d\tRX\n", rx, rx->num_blocks);
   23e00:	9911      	ldr	r1, [sp, #68]	; 0x44
   23e02:	688a      	ldr	r2, [r1, #8]
   23e04:	4816      	ldr	r0, [pc, #88]	; (23e60 <net_shell_cmd_mem+0x8c>)
   23e06:	f7df f89f 	bl	2f48 <printk>
	printk("%p\t%d\tTX\n", tx, tx->num_blocks);
   23e0a:	9910      	ldr	r1, [sp, #64]	; 0x40
   23e0c:	688a      	ldr	r2, [r1, #8]
   23e0e:	4815      	ldr	r0, [pc, #84]	; (23e64 <net_shell_cmd_mem+0x90>)
   23e10:	f7df f89a 	bl	2f48 <printk>
	printk("%p\t%d\tRX DATA\n", rx_data, rx_data->buf_count);
   23e14:	990f      	ldr	r1, [sp, #60]	; 0x3c
   23e16:	8a0a      	ldrh	r2, [r1, #16]
   23e18:	4813      	ldr	r0, [pc, #76]	; (23e68 <net_shell_cmd_mem+0x94>)
   23e1a:	f7df f895 	bl	2f48 <printk>
	printk("%p\t%d\tTX DATA\n", tx_data, tx_data->buf_count);
   23e1e:	990e      	ldr	r1, [sp, #56]	; 0x38
   23e20:	8a0a      	ldrh	r2, [r1, #16]
   23e22:	4812      	ldr	r0, [pc, #72]	; (23e6c <net_shell_cmd_mem+0x98>)
   23e24:	f7df f890 	bl	2f48 <printk>
		memset(&info, 0, sizeof(info));
   23e28:	2238      	movs	r2, #56	; 0x38
   23e2a:	2100      	movs	r1, #0
   23e2c:	4668      	mov	r0, sp
   23e2e:	f006 fe29 	bl	2aa84 <memset>
		net_context_foreach(context_info, &info);
   23e32:	4669      	mov	r1, sp
   23e34:	480e      	ldr	r0, [pc, #56]	; (23e70 <net_shell_cmd_mem+0x9c>)
   23e36:	f7f8 fd8d 	bl	1c954 <net_context_foreach>
		if (!info.are_external_pools) {
   23e3a:	f89d 3004 	ldrb.w	r3, [sp, #4]
   23e3e:	b11b      	cbz	r3, 23e48 <net_shell_cmd_mem+0x74>
}
   23e40:	2000      	movs	r0, #0
   23e42:	b013      	add	sp, #76	; 0x4c
   23e44:	f85d fb04 	ldr.w	pc, [sp], #4
			printk("No external memory pools found.\n");
   23e48:	480a      	ldr	r0, [pc, #40]	; (23e74 <net_shell_cmd_mem+0xa0>)
   23e4a:	f7df f87d 	bl	2f48 <printk>
   23e4e:	e7f7      	b.n	23e40 <net_shell_cmd_mem+0x6c>
   23e50:	000301a4 	.word	0x000301a4
   23e54:	000301c0 	.word	0x000301c0
   23e58:	000301d8 	.word	0x000301d8
   23e5c:	00030204 	.word	0x00030204
   23e60:	0003021c 	.word	0x0003021c
   23e64:	00030228 	.word	0x00030228
   23e68:	00030234 	.word	0x00030234
   23e6c:	00030244 	.word	0x00030244
   23e70:	00023841 	.word	0x00023841
   23e74:	00030254 	.word	0x00030254

00023e78 <net_shell_cmd_nbr>:
{
   23e78:	b510      	push	{r4, lr}
   23e7a:	b086      	sub	sp, #24
	int count = 0;
   23e7c:	2300      	movs	r3, #0
   23e7e:	9305      	str	r3, [sp, #20]
	if (argv[arg]) {
   23e80:	6848      	ldr	r0, [r1, #4]
   23e82:	b1d8      	cbz	r0, 23ebc <net_shell_cmd_nbr+0x44>
   23e84:	460c      	mov	r4, r1
		if (strcmp(argv[arg], "rm")) {
   23e86:	4920      	ldr	r1, [pc, #128]	; (23f08 <net_shell_cmd_nbr+0x90>)
   23e88:	f7dc fabe 	bl	408 <strcmp>
   23e8c:	b9f8      	cbnz	r0, 23ece <net_shell_cmd_nbr+0x56>
		if (!argv[++arg]) {
   23e8e:	68a1      	ldr	r1, [r4, #8]
   23e90:	b311      	cbz	r1, 23ed8 <net_shell_cmd_nbr+0x60>
		ret = net_addr_pton(AF_INET6, argv[arg], &addr);
   23e92:	aa01      	add	r2, sp, #4
   23e94:	200a      	movs	r0, #10
   23e96:	f7f9 fbc4 	bl	1d622 <net_addr_pton>
		if (ret < 0) {
   23e9a:	2800      	cmp	r0, #0
   23e9c:	db20      	blt.n	23ee0 <net_shell_cmd_nbr+0x68>
		if (!net_ipv6_nbr_rm(NULL, &addr)) {
   23e9e:	a901      	add	r1, sp, #4
   23ea0:	2000      	movs	r0, #0
   23ea2:	f7fb f83f 	bl	1ef24 <net_ipv6_nbr_rm>
   23ea6:	bb00      	cbnz	r0, 23eea <net_shell_cmd_nbr+0x72>
   23ea8:	2328      	movs	r3, #40	; 0x28
   23eaa:	4a18      	ldr	r2, [pc, #96]	; (23f0c <net_shell_cmd_nbr+0x94>)
   23eac:	a901      	add	r1, sp, #4
   23eae:	200a      	movs	r0, #10
   23eb0:	f7f9 fae0 	bl	1d474 <net_addr_ntop>
			printk("Cannot remove neighbor %s\n",
   23eb4:	4601      	mov	r1, r0
   23eb6:	4816      	ldr	r0, [pc, #88]	; (23f10 <net_shell_cmd_nbr+0x98>)
   23eb8:	f7df f846 	bl	2f48 <printk>
	net_ipv6_nbr_foreach(nbr_cb, &count);
   23ebc:	a905      	add	r1, sp, #20
   23ebe:	4815      	ldr	r0, [pc, #84]	; (23f14 <net_shell_cmd_nbr+0x9c>)
   23ec0:	f7fb f822 	bl	1ef08 <net_ipv6_nbr_foreach>
	if (count == 0) {
   23ec4:	9b05      	ldr	r3, [sp, #20]
   23ec6:	b1db      	cbz	r3, 23f00 <net_shell_cmd_nbr+0x88>
}
   23ec8:	2000      	movs	r0, #0
   23eca:	b006      	add	sp, #24
   23ecc:	bd10      	pop	{r4, pc}
			printk("Unknown command '%s'\n", argv[arg]);
   23ece:	6861      	ldr	r1, [r4, #4]
   23ed0:	4811      	ldr	r0, [pc, #68]	; (23f18 <net_shell_cmd_nbr+0xa0>)
   23ed2:	f7df f839 	bl	2f48 <printk>
			return 0;
   23ed6:	e7f7      	b.n	23ec8 <net_shell_cmd_nbr+0x50>
			printk("Neighbor IPv6 address missing.\n");
   23ed8:	4810      	ldr	r0, [pc, #64]	; (23f1c <net_shell_cmd_nbr+0xa4>)
   23eda:	f7df f835 	bl	2f48 <printk>
			return 0;
   23ede:	e7f3      	b.n	23ec8 <net_shell_cmd_nbr+0x50>
			printk("Cannot parse '%s'\n", argv[arg]);
   23ee0:	68a1      	ldr	r1, [r4, #8]
   23ee2:	480f      	ldr	r0, [pc, #60]	; (23f20 <net_shell_cmd_nbr+0xa8>)
   23ee4:	f7df f830 	bl	2f48 <printk>
			return 0;
   23ee8:	e7ee      	b.n	23ec8 <net_shell_cmd_nbr+0x50>
   23eea:	2328      	movs	r3, #40	; 0x28
   23eec:	4a07      	ldr	r2, [pc, #28]	; (23f0c <net_shell_cmd_nbr+0x94>)
   23eee:	a901      	add	r1, sp, #4
   23ef0:	200a      	movs	r0, #10
   23ef2:	f7f9 fabf 	bl	1d474 <net_addr_ntop>
			printk("Neighbor %s removed.\n",
   23ef6:	4601      	mov	r1, r0
   23ef8:	480a      	ldr	r0, [pc, #40]	; (23f24 <net_shell_cmd_nbr+0xac>)
   23efa:	f7df f825 	bl	2f48 <printk>
   23efe:	e7dd      	b.n	23ebc <net_shell_cmd_nbr+0x44>
		printk("No neighbors.\n");
   23f00:	4809      	ldr	r0, [pc, #36]	; (23f28 <net_shell_cmd_nbr+0xb0>)
   23f02:	f7df f821 	bl	2f48 <printk>
   23f06:	e7df      	b.n	23ec8 <net_shell_cmd_nbr+0x50>
   23f08:	00030278 	.word	0x00030278
   23f0c:	200023c0 	.word	0x200023c0
   23f10:	000302c8 	.word	0x000302c8
   23f14:	00023fd1 	.word	0x00023fd1
   23f18:	0003027c 	.word	0x0003027c
   23f1c:	00030294 	.word	0x00030294
   23f20:	000302b4 	.word	0x000302b4
   23f24:	000302e4 	.word	0x000302e4
   23f28:	000302fc 	.word	0x000302fc

00023f2c <route_cb>:
{
   23f2c:	b538      	push	{r3, r4, r5, lr}
	if (entry->iface != iface) {
   23f2e:	68c3      	ldr	r3, [r0, #12]
   23f30:	428b      	cmp	r3, r1
   23f32:	d000      	beq.n	23f36 <route_cb+0xa>
   23f34:	bd38      	pop	{r3, r4, r5, pc}
   23f36:	4604      	mov	r4, r0
   23f38:	2328      	movs	r3, #40	; 0x28
   23f3a:	4a1e      	ldr	r2, [pc, #120]	; (23fb4 <route_cb+0x88>)
   23f3c:	f100 0110 	add.w	r1, r0, #16
   23f40:	200a      	movs	r0, #10
   23f42:	f7f9 fa97 	bl	1d474 <net_addr_ntop>
	printk("IPv6 prefix : %s/%d\n",
   23f46:	f894 2020 	ldrb.w	r2, [r4, #32]
   23f4a:	4601      	mov	r1, r0
   23f4c:	481a      	ldr	r0, [pc, #104]	; (23fb8 <route_cb+0x8c>)
   23f4e:	f7de fffb 	bl	2f48 <printk>
	return list->head;
   23f52:	6864      	ldr	r4, [r4, #4]
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   23f54:	2500      	movs	r5, #0
   23f56:	e009      	b.n	23f6c <route_cb+0x40>
			printk("addr : <unknown>\n");
   23f58:	4818      	ldr	r0, [pc, #96]	; (23fbc <route_cb+0x90>)
   23f5a:	f7de fff5 	bl	2f48 <printk>
		count++;
   23f5e:	3501      	adds	r5, #1
	SYS_SLIST_FOR_EACH_CONTAINER(&entry->nexthop, nexthop_route, node) {
   23f60:	4622      	mov	r2, r4
   23f62:	b1dc      	cbz	r4, 23f9c <route_cb+0x70>
	return node->next;
   23f64:	6823      	ldr	r3, [r4, #0]
   23f66:	b1db      	cbz	r3, 23fa0 <route_cb+0x74>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   23f68:	b1e2      	cbz	r2, 23fa4 <route_cb+0x78>
	return node->next;
   23f6a:	6824      	ldr	r4, [r4, #0]
   23f6c:	b1e4      	cbz	r4, 23fa8 <route_cb+0x7c>
		if (!nexthop_route->nbr) {
   23f6e:	6861      	ldr	r1, [r4, #4]
   23f70:	2900      	cmp	r1, #0
   23f72:	d0f5      	beq.n	23f60 <route_cb+0x34>
		printk("\tneighbor : %p\t", nexthop_route->nbr);
   23f74:	4812      	ldr	r0, [pc, #72]	; (23fc0 <route_cb+0x94>)
   23f76:	f7de ffe7 	bl	2f48 <printk>
		if (nexthop_route->nbr->idx == NET_NBR_LLADDR_UNKNOWN) {
   23f7a:	6863      	ldr	r3, [r4, #4]
   23f7c:	7858      	ldrb	r0, [r3, #1]
   23f7e:	28ff      	cmp	r0, #255	; 0xff
   23f80:	d0ea      	beq.n	23f58 <route_cb+0x2c>
			lladdr = net_nbr_get_lladdr(nexthop_route->nbr->idx);
   23f82:	f7fa fcc1 	bl	1e908 <net_nbr_get_lladdr>
	return net_sprint_ll_addr_buf(ll, ll_len, (char *)buf, sizeof(buf));
   23f86:	2318      	movs	r3, #24
   23f88:	4a0e      	ldr	r2, [pc, #56]	; (23fc4 <route_cb+0x98>)
   23f8a:	7841      	ldrb	r1, [r0, #1]
   23f8c:	3002      	adds	r0, #2
   23f8e:	f7f9 fa47 	bl	1d420 <net_sprint_ll_addr_buf>
			printk("addr : %s\n",
   23f92:	4601      	mov	r1, r0
   23f94:	480c      	ldr	r0, [pc, #48]	; (23fc8 <route_cb+0x9c>)
   23f96:	f7de ffd7 	bl	2f48 <printk>
   23f9a:	e7e0      	b.n	23f5e <route_cb+0x32>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   23f9c:	4623      	mov	r3, r4
   23f9e:	e7e2      	b.n	23f66 <route_cb+0x3a>
	SYS_SLIST_FOR_EACH_CONTAINER(&entry->nexthop, nexthop_route, node) {
   23fa0:	2400      	movs	r4, #0
   23fa2:	e7e3      	b.n	23f6c <route_cb+0x40>
   23fa4:	2400      	movs	r4, #0
   23fa6:	e7e1      	b.n	23f6c <route_cb+0x40>
	if (count == 0) {
   23fa8:	2d00      	cmp	r5, #0
   23faa:	d1c3      	bne.n	23f34 <route_cb+0x8>
		printk("\t<none>\n");
   23fac:	4807      	ldr	r0, [pc, #28]	; (23fcc <route_cb+0xa0>)
   23fae:	f7de ffcb 	bl	2f48 <printk>
   23fb2:	e7bf      	b.n	23f34 <route_cb+0x8>
   23fb4:	200023c0 	.word	0x200023c0
   23fb8:	00030844 	.word	0x00030844
   23fbc:	0003086c 	.word	0x0003086c
   23fc0:	0003085c 	.word	0x0003085c
   23fc4:	200023a8 	.word	0x200023a8
   23fc8:	00030880 	.word	0x00030880
   23fcc:	0002fd80 	.word	0x0002fd80

00023fd0 <nbr_cb>:
{
   23fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23fd4:	b08f      	sub	sp, #60	; 0x3c
   23fd6:	4604      	mov	r4, r0
   23fd8:	460d      	mov	r5, r1
	if (*count == 0) {
   23fda:	680b      	ldr	r3, [r1, #0]
   23fdc:	2b00      	cmp	r3, #0
   23fde:	d052      	beq.n	24086 <nbr_cb+0xb6>
	(*count)++;
   23fe0:	682b      	ldr	r3, [r5, #0]
   23fe2:	3301      	adds	r3, #1
   23fe4:	602b      	str	r3, [r5, #0]
   23fe6:	68e3      	ldr	r3, [r4, #12]
	state_str = net_ipv6_nbr_state2str(net_ipv6_nbr_data(nbr)->state);
   23fe8:	f893 0064 	ldrb.w	r0, [r3, #100]	; 0x64
   23fec:	f7fa ff68 	bl	1eec0 <net_ipv6_nbr_state2str>
   23ff0:	900b      	str	r0, [sp, #44]	; 0x2c
	if (strlen(state_str) == 5) {
   23ff2:	f7dc fb85 	bl	700 <strlen>
   23ff6:	2805      	cmp	r0, #5
   23ff8:	d04a      	beq.n	24090 <nbr_cb+0xc0>
	char *state_pad = "";
   23ffa:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 240a4 <nbr_cb+0xd4>
	printk("[%2d] %p %p %5d/%d/%d/%d %s%s %6d  %17s%s %s\n",
   23ffe:	682b      	ldr	r3, [r5, #0]
   24000:	930c      	str	r3, [sp, #48]	; 0x30
   24002:	68a3      	ldr	r3, [r4, #8]
   24004:	930d      	str	r3, [sp, #52]	; 0x34
   24006:	68e0      	ldr	r0, [r4, #12]
	       net_ipv6_nbr_data(nbr)->link_metric,
   24008:	f8b0 5066 	ldrh.w	r5, [r0, #102]	; 0x66
	       nbr->ref,
   2400c:	7826      	ldrb	r6, [r4, #0]
	       net_ipv6_nbr_data(nbr)->ns_count,
   2400e:	f890 7068 	ldrb.w	r7, [r0, #104]	; 0x68
	       net_ipv6_nbr_data(nbr)->is_router,
   24012:	f890 8069 	ldrb.w	r8, [r0, #105]	; 0x69
	return _timeout_remaining_get(&work->timeout);
   24016:	3020      	adds	r0, #32
   24018:	f005 f90a 	bl	29230 <_timeout_remaining_get>
   2401c:	4682      	mov	sl, r0
	       nbr->idx == NET_NBR_LLADDR_UNKNOWN ? "?" :
   2401e:	7860      	ldrb	r0, [r4, #1]
	printk("[%2d] %p %p %5d/%d/%d/%d %s%s %6d  %17s%s %s\n",
   24020:	28ff      	cmp	r0, #255	; 0xff
   24022:	d038      	beq.n	24096 <nbr_cb+0xc6>
		       net_nbr_get_lladdr(nbr->idx)->addr,
   24024:	f7fa fc70 	bl	1e908 <net_nbr_get_lladdr>
   24028:	f100 0b02 	add.w	fp, r0, #2
		       net_nbr_get_lladdr(nbr->idx)->len),
   2402c:	7860      	ldrb	r0, [r4, #1]
   2402e:	f7fa fc6b 	bl	1e908 <net_nbr_get_lladdr>
   24032:	2318      	movs	r3, #24
   24034:	4a19      	ldr	r2, [pc, #100]	; (2409c <nbr_cb+0xcc>)
   24036:	7841      	ldrb	r1, [r0, #1]
   24038:	4658      	mov	r0, fp
   2403a:	f7f9 f9f1 	bl	1d420 <net_sprint_ll_addr_buf>
   2403e:	4683      	mov	fp, r0
	       net_nbr_get_lladdr(nbr->idx)->len == 8 ? "" : padding,
   24040:	7860      	ldrb	r0, [r4, #1]
   24042:	f7fa fc61 	bl	1e908 <net_nbr_get_lladdr>
   24046:	68e1      	ldr	r1, [r4, #12]
	return net_addr_ntop(AF_INET6, addr, (char *)buf, sizeof(buf));
   24048:	2328      	movs	r3, #40	; 0x28
   2404a:	4a15      	ldr	r2, [pc, #84]	; (240a0 <nbr_cb+0xd0>)
   2404c:	3104      	adds	r1, #4
   2404e:	200a      	movs	r0, #10
   24050:	f7f9 fa10 	bl	1d474 <net_addr_ntop>
	printk("[%2d] %p %p %5d/%d/%d/%d %s%s %6d  %17s%s %s\n",
   24054:	9009      	str	r0, [sp, #36]	; 0x24
   24056:	4b13      	ldr	r3, [pc, #76]	; (240a4 <nbr_cb+0xd4>)
   24058:	9308      	str	r3, [sp, #32]
   2405a:	f8cd b01c 	str.w	fp, [sp, #28]
   2405e:	f8cd a018 	str.w	sl, [sp, #24]
   24062:	f8cd 9014 	str.w	r9, [sp, #20]
   24066:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   24068:	9304      	str	r3, [sp, #16]
   2406a:	f8cd 800c 	str.w	r8, [sp, #12]
   2406e:	9702      	str	r7, [sp, #8]
   24070:	9601      	str	r6, [sp, #4]
   24072:	9500      	str	r5, [sp, #0]
   24074:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   24076:	4622      	mov	r2, r4
   24078:	990c      	ldr	r1, [sp, #48]	; 0x30
   2407a:	480b      	ldr	r0, [pc, #44]	; (240a8 <nbr_cb+0xd8>)
   2407c:	f7de ff64 	bl	2f48 <printk>
}
   24080:	b00f      	add	sp, #60	; 0x3c
   24082:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		printk("     Neighbor   Interface        Flags State     "
   24086:	4907      	ldr	r1, [pc, #28]	; (240a4 <nbr_cb+0xd4>)
   24088:	4808      	ldr	r0, [pc, #32]	; (240ac <nbr_cb+0xdc>)
   2408a:	f7de ff5d 	bl	2f48 <printk>
   2408e:	e7a7      	b.n	23fe0 <nbr_cb+0x10>
		state_pad = "    ";
   24090:	f8df 901c 	ldr.w	r9, [pc, #28]	; 240b0 <nbr_cb+0xe0>
   24094:	e7b3      	b.n	23ffe <nbr_cb+0x2e>
	printk("[%2d] %p %p %5d/%d/%d/%d %s%s %6d  %17s%s %s\n",
   24096:	f8df b01c 	ldr.w	fp, [pc, #28]	; 240b4 <nbr_cb+0xe4>
   2409a:	e7d1      	b.n	24040 <nbr_cb+0x70>
   2409c:	200023a8 	.word	0x200023a8
   240a0:	200023c0 	.word	0x200023c0
   240a4:	0002f390 	.word	0x0002f390
   240a8:	0002ff34 	.word	0x0002ff34
   240ac:	0002fedc 	.word	0x0002fedc
   240b0:	0002fed0 	.word	0x0002fed0
   240b4:	0002fed8 	.word	0x0002fed8

000240b8 <_ping_ipv6>:
{
   240b8:	b570      	push	{r4, r5, r6, lr}
   240ba:	b084      	sub	sp, #16
   240bc:	4605      	mov	r5, r0
	struct net_if *iface = net_if_get_default();
   240be:	f7f6 fbb1 	bl	1a824 <net_if_get_default>
   240c2:	4604      	mov	r4, r0
	if (net_addr_pton(AF_INET6, host, &ipv6_target) < 0) {
   240c4:	466a      	mov	r2, sp
   240c6:	4629      	mov	r1, r5
   240c8:	200a      	movs	r0, #10
   240ca:	f7f9 faaa 	bl	1d622 <net_addr_pton>
   240ce:	2800      	cmp	r0, #0
   240d0:	db26      	blt.n	24120 <_ping_ipv6+0x68>
	net_icmpv6_register_handler(&ping6_handler);
   240d2:	4815      	ldr	r0, [pc, #84]	; (24128 <_ping_ipv6+0x70>)
   240d4:	f7f9 fe0c 	bl	1dcf0 <net_icmpv6_register_handler>
	nbr = net_ipv6_nbr_lookup(NULL, &ipv6_target);
   240d8:	4669      	mov	r1, sp
   240da:	2000      	movs	r0, #0
   240dc:	f7fb fa4c 	bl	1f578 <net_ipv6_nbr_lookup>
	if (nbr) {
   240e0:	b100      	cbz	r0, 240e4 <_ping_ipv6+0x2c>
		iface = nbr->iface;
   240e2:	6884      	ldr	r4, [r0, #8]
	route = net_route_lookup(NULL, &ipv6_target);
   240e4:	4669      	mov	r1, sp
   240e6:	2000      	movs	r0, #0
   240e8:	f7fd ffc4 	bl	22074 <net_route_lookup>
	if (route) {
   240ec:	b100      	cbz	r0, 240f0 <_ping_ipv6+0x38>
		iface = route->iface;
   240ee:	68c4      	ldr	r4, [r0, #12]
					   sys_rand32_get(),
   240f0:	f7dd ff90 	bl	2014 <sys_rand32_get>
	ret = net_icmpv6_send_echo_request(iface,
   240f4:	b286      	uxth	r6, r0
					   sys_rand32_get());
   240f6:	f7dd ff8d 	bl	2014 <sys_rand32_get>
	ret = net_icmpv6_send_echo_request(iface,
   240fa:	b283      	uxth	r3, r0
   240fc:	4632      	mov	r2, r6
   240fe:	4669      	mov	r1, sp
   24100:	4620      	mov	r0, r4
   24102:	f7fa fa8f 	bl	1e624 <net_icmpv6_send_echo_request>
	if (ret) {
   24106:	4604      	mov	r4, r0
   24108:	b930      	cbnz	r0, 24118 <_ping_ipv6+0x60>
		printk("Sent a ping to %s\n", host);
   2410a:	4629      	mov	r1, r5
   2410c:	4807      	ldr	r0, [pc, #28]	; (2412c <_ping_ipv6+0x74>)
   2410e:	f7de ff1b 	bl	2f48 <printk>
}
   24112:	4620      	mov	r0, r4
   24114:	b004      	add	sp, #16
   24116:	bd70      	pop	{r4, r5, r6, pc}
	net_icmpv6_unregister_handler(&ping6_handler);
   24118:	4803      	ldr	r0, [pc, #12]	; (24128 <_ping_ipv6+0x70>)
   2411a:	f7f9 fdf5 	bl	1dd08 <net_icmpv6_unregister_handler>
   2411e:	e7f8      	b.n	24112 <_ping_ipv6+0x5a>
		return -EINVAL;
   24120:	f06f 0415 	mvn.w	r4, #21
   24124:	e7f5      	b.n	24112 <_ping_ipv6+0x5a>
   24126:	bf00      	nop
   24128:	2000c48c 	.word	0x2000c48c
   2412c:	0002fbec 	.word	0x0002fbec

00024130 <net_shell_cmd_ping>:
{
   24130:	b510      	push	{r4, lr}
   24132:	460c      	mov	r4, r1
	if (!strcmp(argv[0], "ping")) {
   24134:	4912      	ldr	r1, [pc, #72]	; (24180 <net_shell_cmd_ping+0x50>)
   24136:	6820      	ldr	r0, [r4, #0]
   24138:	f7dc f966 	bl	408 <strcmp>
   2413c:	b958      	cbnz	r0, 24156 <net_shell_cmd_ping+0x26>
		host = argv[1];
   2413e:	6860      	ldr	r0, [r4, #4]
	ret = _ping_ipv6(host);
   24140:	f7ff ffba 	bl	240b8 <_ping_ipv6>
	if (!ret) {
   24144:	b168      	cbz	r0, 24162 <net_shell_cmd_ping+0x32>
	} else if (ret == -EIO) {
   24146:	f110 0f05 	cmn.w	r0, #5
   2414a:	d006      	beq.n	2415a <net_shell_cmd_ping+0x2a>
			printk("Invalid IP address\n");
   2414c:	480d      	ldr	r0, [pc, #52]	; (24184 <net_shell_cmd_ping+0x54>)
   2414e:	f7de fefb 	bl	2f48 <printk>
}
   24152:	2000      	movs	r0, #0
   24154:	bd10      	pop	{r4, pc}
		host = argv[2];
   24156:	68a0      	ldr	r0, [r4, #8]
   24158:	e7f2      	b.n	24140 <net_shell_cmd_ping+0x10>
		printk("Cannot send IPv6 ping\n");
   2415a:	480b      	ldr	r0, [pc, #44]	; (24188 <net_shell_cmd_ping+0x58>)
   2415c:	f7de fef4 	bl	2f48 <printk>
		return 0;
   24160:	e7f7      	b.n	24152 <net_shell_cmd_ping+0x22>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   24162:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   24166:	4809      	ldr	r0, [pc, #36]	; (2418c <net_shell_cmd_ping+0x5c>)
   24168:	f004 fb2a 	bl	287c0 <_impl_k_sem_take>
	if (ret == -EAGAIN) {
   2416c:	f110 0f0b 	cmn.w	r0, #11
   24170:	d1ef      	bne.n	24152 <net_shell_cmd_ping+0x22>
		printk("Ping timeout\n");
   24172:	4807      	ldr	r0, [pc, #28]	; (24190 <net_shell_cmd_ping+0x60>)
   24174:	f7de fee8 	bl	2f48 <printk>
	net_icmpv6_unregister_handler(&ping6_handler);
   24178:	4806      	ldr	r0, [pc, #24]	; (24194 <net_shell_cmd_ping+0x64>)
   2417a:	f7f9 fdc5 	bl	1dd08 <net_icmpv6_unregister_handler>
   2417e:	e7e8      	b.n	24152 <net_shell_cmd_ping+0x22>
   24180:	0003030c 	.word	0x0003030c
   24184:	0003032c 	.word	0x0003032c
   24188:	00030314 	.word	0x00030314
   2418c:	2000cfd4 	.word	0x2000cfd4
   24190:	00030340 	.word	0x00030340
   24194:	2000c48c 	.word	0x2000c48c

00024198 <_handle_ipv6_echo_reply>:
{
   24198:	b530      	push	{r4, r5, lr}
   2419a:	b08b      	sub	sp, #44	; 0x2c
   2419c:	4605      	mov	r5, r0
	return pkt->frags->data;
   2419e:	6883      	ldr	r3, [r0, #8]
   241a0:	6899      	ldr	r1, [r3, #8]
   241a2:	4c11      	ldr	r4, [pc, #68]	; (241e8 <_handle_ipv6_echo_reply+0x50>)
   241a4:	2328      	movs	r3, #40	; 0x28
   241a6:	4622      	mov	r2, r4
   241a8:	3118      	adds	r1, #24
   241aa:	200a      	movs	r0, #10
   241ac:	f7f9 f962 	bl	1d474 <net_addr_ntop>
	snprintk(addr, sizeof(addr), "%s",
   241b0:	4603      	mov	r3, r0
   241b2:	4a0e      	ldr	r2, [pc, #56]	; (241ec <_handle_ipv6_echo_reply+0x54>)
   241b4:	2128      	movs	r1, #40	; 0x28
   241b6:	4668      	mov	r0, sp
   241b8:	f7de fed4 	bl	2f64 <snprintk>
   241bc:	68ab      	ldr	r3, [r5, #8]
   241be:	6899      	ldr	r1, [r3, #8]
   241c0:	2328      	movs	r3, #40	; 0x28
   241c2:	4622      	mov	r2, r4
   241c4:	3108      	adds	r1, #8
   241c6:	200a      	movs	r0, #10
   241c8:	f7f9 f954 	bl	1d474 <net_addr_ntop>
	printk("Received echo reply from %s to %s\n",
   241cc:	466a      	mov	r2, sp
   241ce:	4601      	mov	r1, r0
   241d0:	4807      	ldr	r0, [pc, #28]	; (241f0 <_handle_ipv6_echo_reply+0x58>)
   241d2:	f7de feb9 	bl	2f48 <printk>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   241d6:	4807      	ldr	r0, [pc, #28]	; (241f4 <_handle_ipv6_echo_reply+0x5c>)
   241d8:	f004 fadf 	bl	2879a <_impl_k_sem_give>
	net_icmpv6_unregister_handler(&ping6_handler);
   241dc:	4806      	ldr	r0, [pc, #24]	; (241f8 <_handle_ipv6_echo_reply+0x60>)
   241de:	f7f9 fd93 	bl	1dd08 <net_icmpv6_unregister_handler>
}
   241e2:	2000      	movs	r0, #0
   241e4:	b00b      	add	sp, #44	; 0x2c
   241e6:	bd30      	pop	{r4, r5, pc}
   241e8:	200023c0 	.word	0x200023c0
   241ec:	0002eecc 	.word	0x0002eecc
   241f0:	0002fbc8 	.word	0x0002fbc8
   241f4:	2000cfd4 	.word	0x2000cfd4
   241f8:	2000c48c 	.word	0x2000c48c

000241fc <iface_per_route_cb>:
{
   241fc:	b510      	push	{r4, lr}
   241fe:	b082      	sub	sp, #8
   24200:	4604      	mov	r4, r0
	printk("\nIPv6 routes for interface %p (%s)\n", iface,
   24202:	a901      	add	r1, sp, #4
   24204:	f7ff faba 	bl	2377c <iface2str>
   24208:	4602      	mov	r2, r0
   2420a:	4621      	mov	r1, r4
   2420c:	4806      	ldr	r0, [pc, #24]	; (24228 <iface_per_route_cb+0x2c>)
   2420e:	f7de fe9b 	bl	2f48 <printk>
	printk("=======================================%s\n", extra);
   24212:	9901      	ldr	r1, [sp, #4]
   24214:	4805      	ldr	r0, [pc, #20]	; (2422c <iface_per_route_cb+0x30>)
   24216:	f7de fe97 	bl	2f48 <printk>
	net_route_foreach(route_cb, iface);
   2421a:	4621      	mov	r1, r4
   2421c:	4804      	ldr	r0, [pc, #16]	; (24230 <iface_per_route_cb+0x34>)
   2421e:	f7fe f829 	bl	22274 <net_route_foreach>
}
   24222:	b002      	add	sp, #8
   24224:	bd10      	pop	{r4, pc}
   24226:	bf00      	nop
   24228:	0002fe80 	.word	0x0002fe80
   2422c:	0002fea4 	.word	0x0002fea4
   24230:	00023f2d 	.word	0x00023f2d

00024234 <tcp_connected>:
{
   24234:	b510      	push	{r4, lr}
	if (status < 0) {
   24236:	2900      	cmp	r1, #0
   24238:	db03      	blt.n	24242 <tcp_connected+0xe>
		printk("TCP connected\n");
   2423a:	4807      	ldr	r0, [pc, #28]	; (24258 <tcp_connected+0x24>)
   2423c:	f7de fe84 	bl	2f48 <printk>
   24240:	bd10      	pop	{r4, pc}
   24242:	4604      	mov	r4, r0
		printk("TCP connection failed (%d)\n", status);
   24244:	4805      	ldr	r0, [pc, #20]	; (2425c <tcp_connected+0x28>)
   24246:	f7de fe7f 	bl	2f48 <printk>
		net_context_put(context);
   2424a:	4620      	mov	r0, r4
   2424c:	f7f8 f834 	bl	1c2b8 <net_context_put>
		tcp_ctx = NULL;
   24250:	2200      	movs	r2, #0
   24252:	4b03      	ldr	r3, [pc, #12]	; (24260 <tcp_connected+0x2c>)
   24254:	601a      	str	r2, [r3, #0]
   24256:	bd10      	pop	{r4, pc}
   24258:	00030920 	.word	0x00030920
   2425c:	00030904 	.word	0x00030904
   24260:	200023e8 	.word	0x200023e8

00024264 <get_my_ipv6_addr>:
{
   24264:	b538      	push	{r3, r4, r5, lr}
   24266:	460c      	mov	r4, r1
	my6addr = net_if_ipv6_select_src_addr(iface,
   24268:	1d0d      	adds	r5, r1, #4
   2426a:	4629      	mov	r1, r5
   2426c:	f7f7 f81e 	bl	1b2ac <net_if_ipv6_select_src_addr>
	memcpy(&net_sin6(myaddr)->sin6_addr, my6addr, sizeof(struct in6_addr));
   24270:	2210      	movs	r2, #16
   24272:	4601      	mov	r1, r0
   24274:	4628      	mov	r0, r5
   24276:	f7dc f823 	bl	2c0 <memcpy>
	net_sin6(myaddr)->sin6_port = 0; /* let the IP stack to select */
   2427a:	2300      	movs	r3, #0
   2427c:	8063      	strh	r3, [r4, #2]
   2427e:	bd38      	pop	{r3, r4, r5, pc}

00024280 <tcp_connect>:
{
   24280:	b5f0      	push	{r4, r5, r6, r7, lr}
   24282:	b08f      	sub	sp, #60	; 0x3c
   24284:	4607      	mov	r7, r0
   24286:	460c      	mov	r4, r1
   24288:	4615      	mov	r5, r2
	struct net_if *iface = net_if_get_default();
   2428a:	f7f6 facb 	bl	1a824 <net_if_get_default>
   2428e:	4606      	mov	r6, r0
	ret = net_addr_pton(AF_INET6, host, &net_sin6(&addr)->sin6_addr);
   24290:	aa09      	add	r2, sp, #36	; 0x24
   24292:	4639      	mov	r1, r7
   24294:	200a      	movs	r0, #10
   24296:	f7f9 f9c4 	bl	1d622 <net_addr_pton>
	if (ret < 0) {
   2429a:	2800      	cmp	r0, #0
   2429c:	db34      	blt.n	24308 <tcp_connect+0x88>
	net_sin6(&addr)->sin6_port = htons(port);
   2429e:	0a21      	lsrs	r1, r4, #8
   242a0:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
   242a4:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
	nbr = net_ipv6_nbr_lookup(NULL, &net_sin6(&addr)->sin6_addr);
   242a8:	a909      	add	r1, sp, #36	; 0x24
   242aa:	2000      	movs	r0, #0
   242ac:	f7fb f964 	bl	1f578 <net_ipv6_nbr_lookup>
	if (nbr) {
   242b0:	b100      	cbz	r0, 242b4 <tcp_connect+0x34>
		iface = nbr->iface;
   242b2:	6886      	ldr	r6, [r0, #8]
	get_my_ipv6_addr(iface, &myaddr);
   242b4:	a902      	add	r1, sp, #8
   242b6:	4630      	mov	r0, r6
   242b8:	f7ff ffd4 	bl	24264 <get_my_ipv6_addr>
	family = addr.sa_family = myaddr.sa_family = AF_INET6;
   242bc:	240a      	movs	r4, #10
   242be:	f8ad 4008 	strh.w	r4, [sp, #8]
   242c2:	aa0e      	add	r2, sp, #56	; 0x38
   242c4:	f822 4d18 	strh.w	r4, [r2, #-24]!
	print_connect_info(family, &myaddr, &addr);
   242c8:	a902      	add	r1, sp, #8
   242ca:	4620      	mov	r0, r4
   242cc:	f7ff fce6 	bl	23c9c <print_connect_info>
	ret = net_context_get(family, SOCK_STREAM, IPPROTO_TCP, ctx);
   242d0:	462b      	mov	r3, r5
   242d2:	2206      	movs	r2, #6
   242d4:	2101      	movs	r1, #1
   242d6:	4620      	mov	r0, r4
   242d8:	f7f7 fd82 	bl	1bde0 <net_context_get>
	if (ret < 0) {
   242dc:	1e04      	subs	r4, r0, #0
   242de:	db18      	blt.n	24312 <tcp_connect+0x92>
	ret = net_context_bind(*ctx, &myaddr, addrlen);
   242e0:	2218      	movs	r2, #24
   242e2:	a902      	add	r1, sp, #8
   242e4:	6828      	ldr	r0, [r5, #0]
   242e6:	f7f8 f829 	bl	1c33c <net_context_bind>
	if (ret < 0) {
   242ea:	1e04      	subs	r4, r0, #0
   242ec:	db16      	blt.n	2431c <tcp_connect+0x9c>
	return net_context_connect(*ctx, &addr, addrlen, tcp_connected,
   242ee:	6828      	ldr	r0, [r5, #0]
   242f0:	2300      	movs	r3, #0
   242f2:	9301      	str	r3, [sp, #4]
   242f4:	9300      	str	r3, [sp, #0]
   242f6:	4b0c      	ldr	r3, [pc, #48]	; (24328 <tcp_connect+0xa8>)
   242f8:	2218      	movs	r2, #24
   242fa:	a908      	add	r1, sp, #32
   242fc:	f7f8 f9b0 	bl	1c660 <net_context_connect>
   24300:	4604      	mov	r4, r0
}
   24302:	4620      	mov	r0, r4
   24304:	b00f      	add	sp, #60	; 0x3c
   24306:	bdf0      	pop	{r4, r5, r6, r7, pc}
		printk("Invalid IPv6 address\n");
   24308:	4808      	ldr	r0, [pc, #32]	; (2432c <tcp_connect+0xac>)
   2430a:	f7de fe1d 	bl	2f48 <printk>
		return 0;
   2430e:	2400      	movs	r4, #0
   24310:	e7f7      	b.n	24302 <tcp_connect+0x82>
		printk("Cannot get TCP context (%d)\n", ret);
   24312:	4621      	mov	r1, r4
   24314:	4806      	ldr	r0, [pc, #24]	; (24330 <tcp_connect+0xb0>)
   24316:	f7de fe17 	bl	2f48 <printk>
		return ret;
   2431a:	e7f2      	b.n	24302 <tcp_connect+0x82>
		printk("Cannot bind TCP (%d)\n", ret);
   2431c:	4621      	mov	r1, r4
   2431e:	4805      	ldr	r0, [pc, #20]	; (24334 <tcp_connect+0xb4>)
   24320:	f7de fe12 	bl	2f48 <printk>
		return ret;
   24324:	e7ed      	b.n	24302 <tcp_connect+0x82>
   24326:	bf00      	nop
   24328:	00024235 	.word	0x00024235
   2432c:	000308b4 	.word	0x000308b4
   24330:	000308cc 	.word	0x000308cc
   24334:	000308ec 	.word	0x000308ec

00024338 <net_shell_cmd_tcp>:
}
#endif

int net_shell_cmd_tcp(int argc, char *argv[])
{
   24338:	b5f0      	push	{r4, r5, r6, r7, lr}
   2433a:	b083      	sub	sp, #12
#if defined(CONFIG_NET_TCP)
	int arg = 1;
	int ret;

	if (argv[arg]) {
   2433c:	6848      	ldr	r0, [r1, #4]
   2433e:	2800      	cmp	r0, #0
   24340:	f000 8099 	beq.w	24476 <net_shell_cmd_tcp+0x13e>
   24344:	460c      	mov	r4, r1
		if (!strcmp(argv[arg], "connect")) {
   24346:	4954      	ldr	r1, [pc, #336]	; (24498 <net_shell_cmd_tcp+0x160>)
   24348:	f7dc f85e 	bl	408 <strcmp>
   2434c:	4605      	mov	r5, r0
   2434e:	bb20      	cbnz	r0, 2439a <net_shell_cmd_tcp+0x62>
			/* tcp connect <ip> port */
			char *ip;
			u16_t port;

			if (tcp_ctx && net_context_is_used(tcp_ctx)) {
   24350:	4b52      	ldr	r3, [pc, #328]	; (2449c <net_shell_cmd_tcp+0x164>)
   24352:	681b      	ldr	r3, [r3, #0]
   24354:	b123      	cbz	r3, 24360 <net_shell_cmd_tcp+0x28>
	return context->flags & NET_CONTEXT_IN_USE;
   24356:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
   2435a:	f013 0f01 	tst.w	r3, #1
   2435e:	d110      	bne.n	24382 <net_shell_cmd_tcp+0x4a>
				printk("Already connected\n");
				return 0;
			}

			if (!argv[++arg]) {
   24360:	68a6      	ldr	r6, [r4, #8]
   24362:	b196      	cbz	r6, 2438a <net_shell_cmd_tcp+0x52>
				return 0;
			}

			ip = argv[arg];

			if (!argv[++arg]) {
   24364:	68e0      	ldr	r0, [r4, #12]
   24366:	b1a0      	cbz	r0, 24392 <net_shell_cmd_tcp+0x5a>
				printk("Peer port missing.\n");
				return 0;
			}

			port = strtol(argv[arg], NULL, 10);
   24368:	220a      	movs	r2, #10
   2436a:	2100      	movs	r1, #0
   2436c:	f007 f8a4 	bl	2b4b8 <strtol>

			return tcp_connect(ip, port, &tcp_ctx);
   24370:	4a4a      	ldr	r2, [pc, #296]	; (2449c <net_shell_cmd_tcp+0x164>)
   24372:	b281      	uxth	r1, r0
   24374:	4630      	mov	r0, r6
   24376:	f7ff ff83 	bl	24280 <tcp_connect>
   2437a:	4605      	mov	r5, r0
#else
	printk("TCP not enabled.\n");
#endif /* CONFIG_NET_TCP */

	return 0;
}
   2437c:	4628      	mov	r0, r5
   2437e:	b003      	add	sp, #12
   24380:	bdf0      	pop	{r4, r5, r6, r7, pc}
				printk("Already connected\n");
   24382:	4847      	ldr	r0, [pc, #284]	; (244a0 <net_shell_cmd_tcp+0x168>)
   24384:	f7de fde0 	bl	2f48 <printk>
				return 0;
   24388:	e7f8      	b.n	2437c <net_shell_cmd_tcp+0x44>
				printk("Peer IP address missing.\n");
   2438a:	4846      	ldr	r0, [pc, #280]	; (244a4 <net_shell_cmd_tcp+0x16c>)
   2438c:	f7de fddc 	bl	2f48 <printk>
				return 0;
   24390:	e7f4      	b.n	2437c <net_shell_cmd_tcp+0x44>
				printk("Peer port missing.\n");
   24392:	4845      	ldr	r0, [pc, #276]	; (244a8 <net_shell_cmd_tcp+0x170>)
   24394:	f7de fdd8 	bl	2f48 <printk>
				return 0;
   24398:	e7f0      	b.n	2437c <net_shell_cmd_tcp+0x44>
		if (!strcmp(argv[arg], "send")) {
   2439a:	4944      	ldr	r1, [pc, #272]	; (244ac <net_shell_cmd_tcp+0x174>)
   2439c:	6860      	ldr	r0, [r4, #4]
   2439e:	f7dc f833 	bl	408 <strcmp>
   243a2:	4605      	mov	r5, r0
   243a4:	2800      	cmp	r0, #0
   243a6:	d140      	bne.n	2442a <net_shell_cmd_tcp+0xf2>
			if (!tcp_ctx || !net_context_is_used(tcp_ctx)) {
   243a8:	4b3c      	ldr	r3, [pc, #240]	; (2449c <net_shell_cmd_tcp+0x164>)
   243aa:	6818      	ldr	r0, [r3, #0]
   243ac:	b300      	cbz	r0, 243f0 <net_shell_cmd_tcp+0xb8>
   243ae:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
   243b2:	f013 0f01 	tst.w	r3, #1
   243b6:	d01b      	beq.n	243f0 <net_shell_cmd_tcp+0xb8>
			if (!argv[++arg]) {
   243b8:	68a3      	ldr	r3, [r4, #8]
   243ba:	b1eb      	cbz	r3, 243f8 <net_shell_cmd_tcp+0xc0>
			pkt = net_pkt_get_tx(tcp_ctx, TCP_TIMEOUT);
   243bc:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   243c0:	f7f8 fbdc 	bl	1cb7c <net_pkt_get_tx>
			if (!pkt) {
   243c4:	4606      	mov	r6, r0
   243c6:	b1d8      	cbz	r0, 24400 <net_shell_cmd_tcp+0xc8>
			ret = net_pkt_append_all(pkt, strlen(argv[arg]),
   243c8:	68a0      	ldr	r0, [r4, #8]
   243ca:	f7dc f999 	bl	700 <strlen>
   243ce:	b287      	uxth	r7, r0
	return net_pkt_append(pkt, len, data, timeout) == len;
   243d0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
   243d4:	68a2      	ldr	r2, [r4, #8]
   243d6:	4639      	mov	r1, r7
   243d8:	4630      	mov	r0, r6
   243da:	f7f8 fd3a 	bl	1ce52 <net_pkt_append>
			if (!ret) {
   243de:	4287      	cmp	r7, r0
   243e0:	d012      	beq.n	24408 <net_shell_cmd_tcp+0xd0>
				printk("Cannot build msg (out of pkts)\n");
   243e2:	4833      	ldr	r0, [pc, #204]	; (244b0 <net_shell_cmd_tcp+0x178>)
   243e4:	f7de fdb0 	bl	2f48 <printk>
				net_pkt_unref(pkt);
   243e8:	4630      	mov	r0, r6
   243ea:	f7f8 fbfa 	bl	1cbe2 <net_pkt_unref>
				return 0;
   243ee:	e7c5      	b.n	2437c <net_shell_cmd_tcp+0x44>
				printk("Not connected\n");
   243f0:	4830      	ldr	r0, [pc, #192]	; (244b4 <net_shell_cmd_tcp+0x17c>)
   243f2:	f7de fda9 	bl	2f48 <printk>
				return 0;
   243f6:	e7c1      	b.n	2437c <net_shell_cmd_tcp+0x44>
				printk("No data to send.\n");
   243f8:	482f      	ldr	r0, [pc, #188]	; (244b8 <net_shell_cmd_tcp+0x180>)
   243fa:	f7de fda5 	bl	2f48 <printk>
				return 0;
   243fe:	e7bd      	b.n	2437c <net_shell_cmd_tcp+0x44>
				printk("Out of pkts, msg cannot be sent.\n");
   24400:	482e      	ldr	r0, [pc, #184]	; (244bc <net_shell_cmd_tcp+0x184>)
   24402:	f7de fda1 	bl	2f48 <printk>
				return 0;
   24406:	e7b9      	b.n	2437c <net_shell_cmd_tcp+0x44>
			ret = net_context_send(pkt, tcp_sent_cb, TCP_TIMEOUT,
   24408:	2300      	movs	r3, #0
   2440a:	9300      	str	r3, [sp, #0]
   2440c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   24410:	492b      	ldr	r1, [pc, #172]	; (244c0 <net_shell_cmd_tcp+0x188>)
   24412:	4630      	mov	r0, r6
   24414:	f7f8 fa12 	bl	1c83c <net_context_send>
			if (ret < 0) {
   24418:	1e01      	subs	r1, r0, #0
   2441a:	daaf      	bge.n	2437c <net_shell_cmd_tcp+0x44>
				printk("Cannot send msg (%d)\n", ret);
   2441c:	4829      	ldr	r0, [pc, #164]	; (244c4 <net_shell_cmd_tcp+0x18c>)
   2441e:	f7de fd93 	bl	2f48 <printk>
				net_pkt_unref(pkt);
   24422:	4630      	mov	r0, r6
   24424:	f7f8 fbdd 	bl	1cbe2 <net_pkt_unref>
				return 0;
   24428:	e7a8      	b.n	2437c <net_shell_cmd_tcp+0x44>
		if (!strcmp(argv[arg], "close")) {
   2442a:	4927      	ldr	r1, [pc, #156]	; (244c8 <net_shell_cmd_tcp+0x190>)
   2442c:	6860      	ldr	r0, [r4, #4]
   2442e:	f7db ffeb 	bl	408 <strcmp>
   24432:	4605      	mov	r5, r0
   24434:	b9d0      	cbnz	r0, 2446c <net_shell_cmd_tcp+0x134>
			if (!tcp_ctx || !net_context_is_used(tcp_ctx)) {
   24436:	4b19      	ldr	r3, [pc, #100]	; (2449c <net_shell_cmd_tcp+0x164>)
   24438:	6818      	ldr	r0, [r3, #0]
   2443a:	b120      	cbz	r0, 24446 <net_shell_cmd_tcp+0x10e>
   2443c:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
   24440:	f013 0f01 	tst.w	r3, #1
   24444:	d103      	bne.n	2444e <net_shell_cmd_tcp+0x116>
				printk("Not connected\n");
   24446:	481b      	ldr	r0, [pc, #108]	; (244b4 <net_shell_cmd_tcp+0x17c>)
   24448:	f7de fd7e 	bl	2f48 <printk>
				return 0;
   2444c:	e796      	b.n	2437c <net_shell_cmd_tcp+0x44>
			ret = net_context_put(tcp_ctx);
   2444e:	f7f7 ff33 	bl	1c2b8 <net_context_put>
			if (ret < 0) {
   24452:	1e01      	subs	r1, r0, #0
   24454:	db06      	blt.n	24464 <net_shell_cmd_tcp+0x12c>
			printk("Connection closed.\n");
   24456:	481d      	ldr	r0, [pc, #116]	; (244cc <net_shell_cmd_tcp+0x194>)
   24458:	f7de fd76 	bl	2f48 <printk>
			tcp_ctx = NULL;
   2445c:	2200      	movs	r2, #0
   2445e:	4b0f      	ldr	r3, [pc, #60]	; (2449c <net_shell_cmd_tcp+0x164>)
   24460:	601a      	str	r2, [r3, #0]
			return 0;
   24462:	e78b      	b.n	2437c <net_shell_cmd_tcp+0x44>
				printk("Cannot close the connection (%d)\n",
   24464:	481a      	ldr	r0, [pc, #104]	; (244d0 <net_shell_cmd_tcp+0x198>)
   24466:	f7de fd6f 	bl	2f48 <printk>
				return 0;
   2446a:	e787      	b.n	2437c <net_shell_cmd_tcp+0x44>
		printk("Unknown command '%s'\n", argv[arg]);
   2446c:	6861      	ldr	r1, [r4, #4]
   2446e:	4819      	ldr	r0, [pc, #100]	; (244d4 <net_shell_cmd_tcp+0x19c>)
   24470:	f7de fd6a 	bl	2f48 <printk>
		goto usage;
   24474:	e002      	b.n	2447c <net_shell_cmd_tcp+0x144>
		printk("Invalid command.\n");
   24476:	4818      	ldr	r0, [pc, #96]	; (244d8 <net_shell_cmd_tcp+0x1a0>)
   24478:	f7de fd66 	bl	2f48 <printk>
		printk("Usage:\n");
   2447c:	4817      	ldr	r0, [pc, #92]	; (244dc <net_shell_cmd_tcp+0x1a4>)
   2447e:	f7de fd63 	bl	2f48 <printk>
		printk("\ttcp connect <ipaddr> port\n");
   24482:	4817      	ldr	r0, [pc, #92]	; (244e0 <net_shell_cmd_tcp+0x1a8>)
   24484:	f7de fd60 	bl	2f48 <printk>
		printk("\ttcp send <data>\n");
   24488:	4816      	ldr	r0, [pc, #88]	; (244e4 <net_shell_cmd_tcp+0x1ac>)
   2448a:	f7de fd5d 	bl	2f48 <printk>
		printk("\ttcp close\n");
   2448e:	4816      	ldr	r0, [pc, #88]	; (244e8 <net_shell_cmd_tcp+0x1b0>)
   24490:	f7de fd5a 	bl	2f48 <printk>
	return 0;
   24494:	2500      	movs	r5, #0
   24496:	e771      	b.n	2437c <net_shell_cmd_tcp+0x44>
   24498:	0002f020 	.word	0x0002f020
   2449c:	200023e8 	.word	0x200023e8
   244a0:	00030684 	.word	0x00030684
   244a4:	00030698 	.word	0x00030698
   244a8:	000306b4 	.word	0x000306b4
   244ac:	000306c8 	.word	0x000306c8
   244b0:	00030718 	.word	0x00030718
   244b4:	000306d0 	.word	0x000306d0
   244b8:	000306e0 	.word	0x000306e0
   244bc:	000306f4 	.word	0x000306f4
   244c0:	00023b25 	.word	0x00023b25
   244c4:	00030738 	.word	0x00030738
   244c8:	00030750 	.word	0x00030750
   244cc:	0003077c 	.word	0x0003077c
   244d0:	00030758 	.word	0x00030758
   244d4:	0003027c 	.word	0x0003027c
   244d8:	00030790 	.word	0x00030790
   244dc:	000307a4 	.word	0x000307a4
   244e0:	000307ac 	.word	0x000307ac
   244e4:	000307c8 	.word	0x000307c8
   244e8:	000307dc 	.word	0x000307dc

000244ec <find_conn_handler>:
static int find_conn_handler(enum net_ip_protocol proto,
			     const struct sockaddr *remote_addr,
			     const struct sockaddr *local_addr,
			     u16_t remote_port,
			     u16_t local_port)
{
   244ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   244f0:	4605      	mov	r5, r0
   244f2:	460e      	mov	r6, r1
   244f4:	4617      	mov	r7, r2
   244f6:	4699      	mov	r9, r3
   244f8:	f8bd 8020 	ldrh.w	r8, [sp, #32]
	int i;

	for (i = 0; i < CONFIG_NET_MAX_CONN; i++) {
   244fc:	2400      	movs	r4, #0
   244fe:	e012      	b.n	24526 <find_conn_handler+0x3a>
#endif
			{
				continue;
			}
		} else {
			if (conns[i].flags & NET_CONN_REMOTE_ADDR_SET) {
   24500:	f013 0f02 	tst.w	r3, #2
   24504:	d10e      	bne.n	24524 <find_conn_handler+0x38>
				continue;
			}
		}

		if (local_addr) {
   24506:	2f00      	cmp	r7, #0
   24508:	d051      	beq.n	245ae <find_conn_handler+0xc2>
			if (!(conns[i].flags & NET_CONN_LOCAL_ADDR_SET)) {
   2450a:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   2450e:	009a      	lsls	r2, r3, #2
   24510:	4b3c      	ldr	r3, [pc, #240]	; (24604 <find_conn_handler+0x118>)
   24512:	4413      	add	r3, r2
   24514:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
   24518:	f013 0f04 	tst.w	r3, #4
   2451c:	d002      	beq.n	24524 <find_conn_handler+0x38>
				continue;
			}

#if defined(CONFIG_NET_IPV6)
			if (local_addr->sa_family == AF_INET6 &&
   2451e:	883b      	ldrh	r3, [r7, #0]
   24520:	2b0a      	cmp	r3, #10
   24522:	d030      	beq.n	24586 <find_conn_handler+0x9a>
	for (i = 0; i < CONFIG_NET_MAX_CONN; i++) {
   24524:	3401      	adds	r4, #1
   24526:	2c03      	cmp	r4, #3
   24528:	dc67      	bgt.n	245fa <find_conn_handler+0x10e>
		if (!(conns[i].flags & NET_CONN_IN_USE)) {
   2452a:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   2452e:	009a      	lsls	r2, r3, #2
   24530:	4b34      	ldr	r3, [pc, #208]	; (24604 <find_conn_handler+0x118>)
   24532:	4413      	add	r3, r2
   24534:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
   24538:	f013 0f01 	tst.w	r3, #1
   2453c:	d0f2      	beq.n	24524 <find_conn_handler+0x38>
		if (conns[i].proto != proto) {
   2453e:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   24542:	0091      	lsls	r1, r2, #2
   24544:	4a2f      	ldr	r2, [pc, #188]	; (24604 <find_conn_handler+0x118>)
   24546:	440a      	add	r2, r1
   24548:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
   2454c:	42aa      	cmp	r2, r5
   2454e:	d1e9      	bne.n	24524 <find_conn_handler+0x38>
		if (remote_addr) {
   24550:	2e00      	cmp	r6, #0
   24552:	d0d5      	beq.n	24500 <find_conn_handler+0x14>
			if (!(conns[i].flags & NET_CONN_REMOTE_ADDR_SET)) {
   24554:	f013 0f02 	tst.w	r3, #2
   24558:	d0e4      	beq.n	24524 <find_conn_handler+0x38>
			if (remote_addr->sa_family == AF_INET6 &&
   2455a:	8833      	ldrh	r3, [r6, #0]
   2455c:	2b0a      	cmp	r3, #10
   2455e:	d1e1      	bne.n	24524 <find_conn_handler+0x38>
			    conns[i].remote_addr.sa_family) {
   24560:	ebc4 1104 	rsb	r1, r4, r4, lsl #4
   24564:	008a      	lsls	r2, r1, #2
   24566:	4927      	ldr	r1, [pc, #156]	; (24604 <find_conn_handler+0x118>)
   24568:	5a8a      	ldrh	r2, [r1, r2]
			if (remote_addr->sa_family == AF_INET6 &&
   2456a:	4293      	cmp	r3, r2
   2456c:	d1da      	bne.n	24524 <find_conn_handler+0x38>
					    &net_sin6(&conns[i].remote_addr)->
   2456e:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   24572:	0093      	lsls	r3, r2, #2
   24574:	4419      	add	r1, r3
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   24576:	2210      	movs	r2, #16
   24578:	3104      	adds	r1, #4
   2457a:	1d30      	adds	r0, r6, #4
   2457c:	f006 f9ee 	bl	2a95c <memcmp>
				if (!net_ipv6_addr_cmp(
   24580:	2800      	cmp	r0, #0
   24582:	d1cf      	bne.n	24524 <find_conn_handler+0x38>
   24584:	e7bf      	b.n	24506 <find_conn_handler+0x1a>
			    local_addr->sa_family ==
			    conns[i].local_addr.sa_family) {
   24586:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   2458a:	0091      	lsls	r1, r2, #2
   2458c:	4a1d      	ldr	r2, [pc, #116]	; (24604 <find_conn_handler+0x118>)
   2458e:	440a      	add	r2, r1
   24590:	8b12      	ldrh	r2, [r2, #24]
			if (local_addr->sa_family == AF_INET6 &&
   24592:	4293      	cmp	r3, r2
   24594:	d1c6      	bne.n	24524 <find_conn_handler+0x38>
				if (!net_ipv6_addr_cmp(
					    &net_sin6(local_addr)->sin6_addr,
					    &net_sin6(&conns[i].local_addr)->
   24596:	460b      	mov	r3, r1
   24598:	3318      	adds	r3, #24
   2459a:	4a1a      	ldr	r2, [pc, #104]	; (24604 <find_conn_handler+0x118>)
   2459c:	4413      	add	r3, r2
   2459e:	2210      	movs	r2, #16
   245a0:	1d19      	adds	r1, r3, #4
   245a2:	1d38      	adds	r0, r7, #4
   245a4:	f006 f9da 	bl	2a95c <memcmp>
				if (!net_ipv6_addr_cmp(
   245a8:	2800      	cmp	r0, #0
   245aa:	d1bb      	bne.n	24524 <find_conn_handler+0x38>
   245ac:	e009      	b.n	245c2 <find_conn_handler+0xd6>
#endif
			{
				continue;
			}
		} else {
			if (conns[i].flags & NET_CONN_LOCAL_ADDR_SET) {
   245ae:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   245b2:	009a      	lsls	r2, r3, #2
   245b4:	4b13      	ldr	r3, [pc, #76]	; (24604 <find_conn_handler+0x118>)
   245b6:	4413      	add	r3, r2
   245b8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
   245bc:	f013 0f04 	tst.w	r3, #4
   245c0:	d1b0      	bne.n	24524 <find_conn_handler+0x38>
				continue;
			}
		}

		if (net_sin(&conns[i].remote_addr)->sin_port !=
   245c2:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   245c6:	009a      	lsls	r2, r3, #2
   245c8:	4b0e      	ldr	r3, [pc, #56]	; (24604 <find_conn_handler+0x118>)
   245ca:	4413      	add	r3, r2
   245cc:	885a      	ldrh	r2, [r3, #2]
		    htons(remote_port)) {
   245ce:	ea4f 2319 	mov.w	r3, r9, lsr #8
   245d2:	ea43 2309 	orr.w	r3, r3, r9, lsl #8
   245d6:	b29b      	uxth	r3, r3
		if (net_sin(&conns[i].remote_addr)->sin_port !=
   245d8:	429a      	cmp	r2, r3
   245da:	d1a3      	bne.n	24524 <find_conn_handler+0x38>
			continue;
		}

		if (net_sin(&conns[i].local_addr)->sin_port !=
   245dc:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   245e0:	0093      	lsls	r3, r2, #2
   245e2:	3318      	adds	r3, #24
   245e4:	4a07      	ldr	r2, [pc, #28]	; (24604 <find_conn_handler+0x118>)
   245e6:	4413      	add	r3, r2
   245e8:	885a      	ldrh	r2, [r3, #2]
		    htons(local_port)) {
   245ea:	ea4f 2318 	mov.w	r3, r8, lsr #8
   245ee:	ea43 2308 	orr.w	r3, r3, r8, lsl #8
   245f2:	b29b      	uxth	r3, r3
		if (net_sin(&conns[i].local_addr)->sin_port !=
   245f4:	429a      	cmp	r2, r3
   245f6:	d195      	bne.n	24524 <find_conn_handler+0x38>
   245f8:	e001      	b.n	245fe <find_conn_handler+0x112>
		}

		return i;
	}

	return -ENOENT;
   245fa:	f06f 0401 	mvn.w	r4, #1
}
   245fe:	4620      	mov	r0, r4
   24600:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   24604:	2000043c 	.word	0x2000043c

00024608 <check_addr>:
}

static bool check_addr(struct net_pkt *pkt,
		       struct sockaddr *addr,
		       bool is_remote)
{
   24608:	b538      	push	{r3, r4, r5, lr}
	if (addr->sa_family != net_pkt_family(pkt)) {
   2460a:	880c      	ldrh	r4, [r1, #0]
	return pkt->family;
   2460c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   24610:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   24614:	b29d      	uxth	r5, r3
   24616:	42ac      	cmp	r4, r5
   24618:	d002      	beq.n	24620 <check_addr+0x18>
		return false;
   2461a:	2400      	movs	r4, #0
		}
	}
#endif /* CONFIG_NET_IPV4 */

	return true;
}
   2461c:	4620      	mov	r0, r4
   2461e:	bd38      	pop	{r3, r4, r5, pc}
	if (net_pkt_family(pkt) == AF_INET6 && addr->sa_family == AF_INET6) {
   24620:	2b0a      	cmp	r3, #10
   24622:	d001      	beq.n	24628 <check_addr+0x20>
	return true;
   24624:	2401      	movs	r4, #1
   24626:	e7f9      	b.n	2461c <check_addr+0x14>
	if (net_pkt_family(pkt) == AF_INET6 && addr->sa_family == AF_INET6) {
   24628:	2c0a      	cmp	r4, #10
   2462a:	d001      	beq.n	24630 <check_addr+0x28>
	return true;
   2462c:	2401      	movs	r4, #1
   2462e:	e7f5      	b.n	2461c <check_addr+0x14>
		if (is_remote) {
   24630:	b162      	cbz	r2, 2464c <check_addr+0x44>
	return pkt->frags->data;
   24632:	6883      	ldr	r3, [r0, #8]
   24634:	689b      	ldr	r3, [r3, #8]
			addr6 = &NET_IPV6_HDR(pkt)->src;
   24636:	3308      	adds	r3, #8
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   24638:	684a      	ldr	r2, [r1, #4]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   2463a:	b95a      	cbnz	r2, 24654 <check_addr+0x4c>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   2463c:	688a      	ldr	r2, [r1, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   2463e:	b9ba      	cbnz	r2, 24670 <check_addr+0x68>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   24640:	68ca      	ldr	r2, [r1, #12]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   24642:	b9ba      	cbnz	r2, 24674 <check_addr+0x6c>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   24644:	690a      	ldr	r2, [r1, #16]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   24646:	b1ba      	cbz	r2, 24678 <check_addr+0x70>
   24648:	2200      	movs	r2, #0
   2464a:	e004      	b.n	24656 <check_addr+0x4e>
   2464c:	6883      	ldr	r3, [r0, #8]
   2464e:	689b      	ldr	r3, [r3, #8]
			addr6 = &NET_IPV6_HDR(pkt)->dst;
   24650:	3318      	adds	r3, #24
   24652:	e7f1      	b.n	24638 <check_addr+0x30>
   24654:	2200      	movs	r2, #0
		if (!net_is_ipv6_addr_unspecified(
   24656:	4614      	mov	r4, r2
   24658:	2a00      	cmp	r2, #0
   2465a:	d1df      	bne.n	2461c <check_addr+0x14>
   2465c:	4608      	mov	r0, r1
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   2465e:	2210      	movs	r2, #16
   24660:	4619      	mov	r1, r3
   24662:	3004      	adds	r0, #4
   24664:	f006 f97a 	bl	2a95c <memcmp>
			if (!net_ipv6_addr_cmp(&net_sin6(addr)->sin6_addr,
   24668:	2800      	cmp	r0, #0
   2466a:	d1d7      	bne.n	2461c <check_addr+0x14>
		return true;
   2466c:	2401      	movs	r4, #1
   2466e:	e7d5      	b.n	2461c <check_addr+0x14>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   24670:	2200      	movs	r2, #0
   24672:	e7f0      	b.n	24656 <check_addr+0x4e>
   24674:	2200      	movs	r2, #0
   24676:	e7ee      	b.n	24656 <check_addr+0x4e>
   24678:	2201      	movs	r2, #1
   2467a:	e7ec      	b.n	24656 <check_addr+0x4e>

0002467c <net_conn_unregister>:
{
   2467c:	b508      	push	{r3, lr}
	if (conn < &conns[0] || conn > &conns[CONFIG_NET_MAX_CONN]) {
   2467e:	4b0d      	ldr	r3, [pc, #52]	; (246b4 <net_conn_unregister+0x38>)
   24680:	4298      	cmp	r0, r3
   24682:	d30d      	bcc.n	246a0 <net_conn_unregister+0x24>
   24684:	33f0      	adds	r3, #240	; 0xf0
   24686:	4298      	cmp	r0, r3
   24688:	d80d      	bhi.n	246a6 <net_conn_unregister+0x2a>
	if (!(conn->flags & NET_CONN_IN_USE)) {
   2468a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
   2468e:	f013 0f01 	tst.w	r3, #1
   24692:	d00b      	beq.n	246ac <net_conn_unregister+0x30>
	memset(conn, 0, sizeof(*conn));
   24694:	223c      	movs	r2, #60	; 0x3c
   24696:	2100      	movs	r1, #0
   24698:	f006 f9f4 	bl	2aa84 <memset>
	return 0;
   2469c:	2000      	movs	r0, #0
   2469e:	bd08      	pop	{r3, pc}
		return -EINVAL;
   246a0:	f06f 0015 	mvn.w	r0, #21
   246a4:	bd08      	pop	{r3, pc}
   246a6:	f06f 0015 	mvn.w	r0, #21
   246aa:	bd08      	pop	{r3, pc}
		return -ENOENT;
   246ac:	f06f 0001 	mvn.w	r0, #1
}
   246b0:	bd08      	pop	{r3, pc}
   246b2:	bf00      	nop
   246b4:	2000043c 	.word	0x2000043c

000246b8 <net_conn_register>:
{
   246b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   246bc:	b082      	sub	sp, #8
   246be:	4681      	mov	r9, r0
   246c0:	460d      	mov	r5, r1
   246c2:	4616      	mov	r6, r2
   246c4:	4698      	mov	r8, r3
   246c6:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
	i = find_conn_handler(proto, remote_addr, local_addr, remote_port,
   246ca:	9700      	str	r7, [sp, #0]
   246cc:	f7ff ff0e 	bl	244ec <find_conn_handler>
	if (i != -ENOENT) {
   246d0:	f110 0f02 	cmn.w	r0, #2
   246d4:	f040 80ba 	bne.w	2484c <net_conn_register+0x194>
   246d8:	2400      	movs	r4, #0
	for (i = 0; i < CONFIG_NET_MAX_CONN; i++) {
   246da:	2c03      	cmp	r4, #3
   246dc:	f300 80aa 	bgt.w	24834 <net_conn_register+0x17c>
		if (conns[i].flags & NET_CONN_IN_USE) {
   246e0:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   246e4:	009a      	lsls	r2, r3, #2
   246e6:	4b60      	ldr	r3, [pc, #384]	; (24868 <net_conn_register+0x1b0>)
   246e8:	4413      	add	r3, r2
   246ea:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
   246ee:	f013 0f01 	tst.w	r3, #1
   246f2:	d001      	beq.n	246f8 <net_conn_register+0x40>
	for (i = 0; i < CONFIG_NET_MAX_CONN; i++) {
   246f4:	3401      	adds	r4, #1
   246f6:	e7f0      	b.n	246da <net_conn_register+0x22>
		if (remote_addr) {
   246f8:	2d00      	cmp	r5, #0
   246fa:	d04b      	beq.n	24794 <net_conn_register+0xdc>
			if (remote_addr->sa_family == AF_INET6) {
   246fc:	882b      	ldrh	r3, [r5, #0]
   246fe:	2b0a      	cmp	r3, #10
   24700:	f040 80a7 	bne.w	24852 <net_conn_register+0x19a>
				memcpy(&conns[i].remote_addr, remote_addr,
   24704:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   24708:	0093      	lsls	r3, r2, #2
   2470a:	2218      	movs	r2, #24
   2470c:	4629      	mov	r1, r5
   2470e:	4856      	ldr	r0, [pc, #344]	; (24868 <net_conn_register+0x1b0>)
   24710:	4418      	add	r0, r3
   24712:	f7db fdd5 	bl	2c0 <memcpy>
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   24716:	686b      	ldr	r3, [r5, #4]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   24718:	b93b      	cbnz	r3, 2472a <net_conn_register+0x72>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   2471a:	68ab      	ldr	r3, [r5, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   2471c:	bb8b      	cbnz	r3, 24782 <net_conn_register+0xca>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   2471e:	68eb      	ldr	r3, [r5, #12]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   24720:	bb8b      	cbnz	r3, 24786 <net_conn_register+0xce>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   24722:	692b      	ldr	r3, [r5, #16]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   24724:	b38b      	cbz	r3, 2478a <net_conn_register+0xd2>
   24726:	2300      	movs	r3, #0
   24728:	e000      	b.n	2472c <net_conn_register+0x74>
   2472a:	2300      	movs	r3, #0
				if (net_is_ipv6_addr_unspecified(
   2472c:	b37b      	cbz	r3, 2478e <net_conn_register+0xd6>
					rank |= NET_RANK_REMOTE_UNSPEC_ADDR;
   2472e:	f04f 0a08 	mov.w	sl, #8
			conns[i].flags |= NET_CONN_REMOTE_ADDR_SET;
   24732:	0122      	lsls	r2, r4, #4
   24734:	1b12      	subs	r2, r2, r4
   24736:	0091      	lsls	r1, r2, #2
   24738:	4b4b      	ldr	r3, [pc, #300]	; (24868 <net_conn_register+0x1b0>)
   2473a:	440b      	add	r3, r1
   2473c:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
   24740:	f042 0202 	orr.w	r2, r2, #2
   24744:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		if (local_addr) {
   24748:	2e00      	cmp	r6, #0
   2474a:	d036      	beq.n	247ba <net_conn_register+0x102>
			if (local_addr->sa_family == AF_INET6) {
   2474c:	8833      	ldrh	r3, [r6, #0]
   2474e:	2b0a      	cmp	r3, #10
   24750:	f040 8082 	bne.w	24858 <net_conn_register+0x1a0>
				memcpy(&conns[i].local_addr, local_addr,
   24754:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   24758:	0098      	lsls	r0, r3, #2
   2475a:	3018      	adds	r0, #24
   2475c:	2218      	movs	r2, #24
   2475e:	4631      	mov	r1, r6
   24760:	4b41      	ldr	r3, [pc, #260]	; (24868 <net_conn_register+0x1b0>)
   24762:	4418      	add	r0, r3
   24764:	f7db fdac 	bl	2c0 <memcpy>
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   24768:	6873      	ldr	r3, [r6, #4]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   2476a:	b9b3      	cbnz	r3, 2479a <net_conn_register+0xe2>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   2476c:	68b3      	ldr	r3, [r6, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   2476e:	2b00      	cmp	r3, #0
   24770:	d163      	bne.n	2483a <net_conn_register+0x182>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   24772:	68f3      	ldr	r3, [r6, #12]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   24774:	2b00      	cmp	r3, #0
   24776:	d162      	bne.n	2483e <net_conn_register+0x186>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   24778:	6933      	ldr	r3, [r6, #16]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   2477a:	2b00      	cmp	r3, #0
   2477c:	d061      	beq.n	24842 <net_conn_register+0x18a>
   2477e:	2300      	movs	r3, #0
   24780:	e00c      	b.n	2479c <net_conn_register+0xe4>
   24782:	2300      	movs	r3, #0
   24784:	e7d2      	b.n	2472c <net_conn_register+0x74>
   24786:	2300      	movs	r3, #0
   24788:	e7d0      	b.n	2472c <net_conn_register+0x74>
   2478a:	2301      	movs	r3, #1
   2478c:	e7ce      	b.n	2472c <net_conn_register+0x74>
					rank |= NET_RANK_REMOTE_SPEC_ADDR;
   2478e:	f04f 0a20 	mov.w	sl, #32
   24792:	e7ce      	b.n	24732 <net_conn_register+0x7a>
	u8_t rank = 0;
   24794:	f04f 0a00 	mov.w	sl, #0
   24798:	e7d6      	b.n	24748 <net_conn_register+0x90>
   2479a:	2300      	movs	r3, #0
				if (net_is_ipv6_addr_unspecified(
   2479c:	2b00      	cmp	r3, #0
   2479e:	d052      	beq.n	24846 <net_conn_register+0x18e>
					rank |= NET_RANK_LOCAL_UNSPEC_ADDR;
   247a0:	f04a 0a04 	orr.w	sl, sl, #4
			conns[i].flags |= NET_CONN_LOCAL_ADDR_SET;
   247a4:	0122      	lsls	r2, r4, #4
   247a6:	1b12      	subs	r2, r2, r4
   247a8:	0091      	lsls	r1, r2, #2
   247aa:	4b2f      	ldr	r3, [pc, #188]	; (24868 <net_conn_register+0x1b0>)
   247ac:	440b      	add	r3, r1
   247ae:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
   247b2:	f042 0204 	orr.w	r2, r2, #4
   247b6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		if (remote_addr && local_addr) {
   247ba:	b125      	cbz	r5, 247c6 <net_conn_register+0x10e>
   247bc:	b11e      	cbz	r6, 247c6 <net_conn_register+0x10e>
			if (remote_addr->sa_family != local_addr->sa_family) {
   247be:	882a      	ldrh	r2, [r5, #0]
   247c0:	8833      	ldrh	r3, [r6, #0]
   247c2:	429a      	cmp	r2, r3
   247c4:	d14b      	bne.n	2485e <net_conn_register+0x1a6>
		if (remote_port) {
   247c6:	f1b8 0f00 	cmp.w	r8, #0
   247ca:	d00c      	beq.n	247e6 <net_conn_register+0x12e>
			rank |= NET_RANK_REMOTE_PORT;
   247cc:	f04a 0a02 	orr.w	sl, sl, #2
			net_sin(&conns[i].remote_addr)->sin_port =
   247d0:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   247d4:	009a      	lsls	r2, r3, #2
   247d6:	4b24      	ldr	r3, [pc, #144]	; (24868 <net_conn_register+0x1b0>)
   247d8:	4413      	add	r3, r2
				htons(remote_port);
   247da:	ea4f 2218 	mov.w	r2, r8, lsr #8
   247de:	ea42 2808 	orr.w	r8, r2, r8, lsl #8
			net_sin(&conns[i].remote_addr)->sin_port =
   247e2:	f8a3 8002 	strh.w	r8, [r3, #2]
		if (local_port) {
   247e6:	b15f      	cbz	r7, 24800 <net_conn_register+0x148>
			rank |= NET_RANK_LOCAL_PORT;
   247e8:	f04a 0a01 	orr.w	sl, sl, #1
			net_sin(&conns[i].local_addr)->sin_port =
   247ec:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   247f0:	0093      	lsls	r3, r2, #2
   247f2:	3318      	adds	r3, #24
   247f4:	4a1c      	ldr	r2, [pc, #112]	; (24868 <net_conn_register+0x1b0>)
   247f6:	4413      	add	r3, r2
				htons(local_port);
   247f8:	0a3a      	lsrs	r2, r7, #8
   247fa:	ea42 2707 	orr.w	r7, r2, r7, lsl #8
			net_sin(&conns[i].local_addr)->sin_port =
   247fe:	805f      	strh	r7, [r3, #2]
		conns[i].flags |= NET_CONN_IN_USE;
   24800:	0122      	lsls	r2, r4, #4
   24802:	1b12      	subs	r2, r2, r4
   24804:	0091      	lsls	r1, r2, #2
   24806:	4b18      	ldr	r3, [pc, #96]	; (24868 <net_conn_register+0x1b0>)
   24808:	440b      	add	r3, r1
   2480a:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
   2480e:	f042 0201 	orr.w	r2, r2, #1
   24812:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		conns[i].cb = cb;
   24816:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   24818:	631a      	str	r2, [r3, #48]	; 0x30
		conns[i].user_data = user_data;
   2481a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   2481c:	635a      	str	r2, [r3, #52]	; 0x34
		conns[i].rank = rank;
   2481e:	f883 a03a 	strb.w	sl, [r3, #58]	; 0x3a
		conns[i].proto = proto;
   24822:	f883 9038 	strb.w	r9, [r3, #56]	; 0x38
		if (handle) {
   24826:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   24828:	b1e3      	cbz	r3, 24864 <net_conn_register+0x1ac>
			*handle = (struct net_conn_handle *)&conns[i];
   2482a:	4b0f      	ldr	r3, [pc, #60]	; (24868 <net_conn_register+0x1b0>)
   2482c:	440b      	add	r3, r1
   2482e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   24830:	6013      	str	r3, [r2, #0]
		return 0;
   24832:	2000      	movs	r0, #0
}
   24834:	b002      	add	sp, #8
   24836:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2483a:	2300      	movs	r3, #0
   2483c:	e7ae      	b.n	2479c <net_conn_register+0xe4>
   2483e:	2300      	movs	r3, #0
   24840:	e7ac      	b.n	2479c <net_conn_register+0xe4>
   24842:	2301      	movs	r3, #1
   24844:	e7aa      	b.n	2479c <net_conn_register+0xe4>
					rank |= NET_RANK_LOCAL_SPEC_ADDR;
   24846:	f04a 0a10 	orr.w	sl, sl, #16
   2484a:	e7ab      	b.n	247a4 <net_conn_register+0xec>
		return -EALREADY;
   2484c:	f06f 0077 	mvn.w	r0, #119	; 0x77
   24850:	e7f0      	b.n	24834 <net_conn_register+0x17c>
				return -EINVAL;
   24852:	f06f 0015 	mvn.w	r0, #21
   24856:	e7ed      	b.n	24834 <net_conn_register+0x17c>
				return -EINVAL;
   24858:	f06f 0015 	mvn.w	r0, #21
   2485c:	e7ea      	b.n	24834 <net_conn_register+0x17c>
				return -EINVAL;
   2485e:	f06f 0015 	mvn.w	r0, #21
   24862:	e7e7      	b.n	24834 <net_conn_register+0x17c>
		return 0;
   24864:	2000      	movs	r0, #0
   24866:	e7e5      	b.n	24834 <net_conn_register+0x17c>
   24868:	2000043c 	.word	0x2000043c

0002486c <net_conn_input>:
#endif /* CONFIG_NET_IPV4 */
	}
}

enum net_verdict net_conn_input(enum net_ip_protocol proto, struct net_pkt *pkt)
{
   2486c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24870:	b089      	sub	sp, #36	; 0x24
   24872:	4605      	mov	r5, r0
   24874:	460e      	mov	r6, r1

	/* This is only used for getting source and destination ports.
	 * Because both TCP and UDP header have these in the same
	 * location, we can check them both using the UDP struct.
	 */
	if (IS_ENABLED(CONFIG_NET_UDP) && proto == IPPROTO_UDP) {
   24876:	2811      	cmp	r0, #17
   24878:	d005      	beq.n	24886 <net_conn_input+0x1a>
		}

		src_port = udp_hdr->src_port;
		dst_port = udp_hdr->dst_port;
		chksum = udp_hdr->chksum;
	} else if (IS_ENABLED(CONFIG_NET_TCP) && proto == IPPROTO_TCP) {
   2487a:	2806      	cmp	r0, #6
   2487c:	d015      	beq.n	248aa <net_conn_input+0x3e>
		src_port = tcp_hdr->src_port;
		dst_port = tcp_hdr->dst_port;
		chksum = tcp_hdr->chksum;
	} else {
		NET_DBG("No UDP or TCP configured, dropping packet.");
		return NET_DROP;
   2487e:	2002      	movs	r0, #2

drop:
	net_stats_update_per_proto_drop(proto);

	return NET_DROP;
}
   24880:	b009      	add	sp, #36	; 0x24
   24882:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		udp_hdr = net_udp_get_hdr(pkt, &hdr);
   24886:	a903      	add	r1, sp, #12
   24888:	4630      	mov	r0, r6
   2488a:	f7fd ff73 	bl	22774 <net_udp_get_hdr>
		if (!udp_hdr) {
   2488e:	b150      	cbz	r0, 248a6 <net_conn_input+0x3a>
		src_port = udp_hdr->src_port;
   24890:	f8b0 9000 	ldrh.w	r9, [r0]
		dst_port = udp_hdr->dst_port;
   24894:	f8b0 b002 	ldrh.w	fp, [r0, #2]
		chksum = udp_hdr->chksum;
   24898:	f8b0 a006 	ldrh.w	sl, [r0, #6]
	s16_t best_rank = -1;
   2489c:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
	int i, best_match = -1;
   248a0:	4647      	mov	r7, r8
	for (i = 0; i < CONFIG_NET_MAX_CONN; i++) {
   248a2:	2400      	movs	r4, #0
   248a4:	e01b      	b.n	248de <net_conn_input+0x72>
			return NET_DROP;
   248a6:	2002      	movs	r0, #2
   248a8:	e7ea      	b.n	24880 <net_conn_input+0x14>
		tcp_hdr = net_tcp_get_hdr(pkt, &hdr);
   248aa:	a903      	add	r1, sp, #12
   248ac:	4630      	mov	r0, r6
   248ae:	f7fe fbcd 	bl	2304c <net_tcp_get_hdr>
		if (!tcp_hdr) {
   248b2:	b130      	cbz	r0, 248c2 <net_conn_input+0x56>
		src_port = tcp_hdr->src_port;
   248b4:	f8b0 9000 	ldrh.w	r9, [r0]
		dst_port = tcp_hdr->dst_port;
   248b8:	f8b0 b002 	ldrh.w	fp, [r0, #2]
		chksum = tcp_hdr->chksum;
   248bc:	f8b0 a010 	ldrh.w	sl, [r0, #16]
   248c0:	e7ec      	b.n	2489c <net_conn_input+0x30>
			return NET_DROP;
   248c2:	2002      	movs	r0, #2
   248c4:	e7dc      	b.n	24880 <net_conn_input+0x14>
		if (net_sin(&conns[i].local_addr)->sin_port) {
   248c6:	ebc4 1004 	rsb	r0, r4, r4, lsl #4
   248ca:	0082      	lsls	r2, r0, #2
   248cc:	3218      	adds	r2, #24
   248ce:	4866      	ldr	r0, [pc, #408]	; (24a68 <net_conn_input+0x1fc>)
   248d0:	1882      	adds	r2, r0, r2
   248d2:	9201      	str	r2, [sp, #4]
   248d4:	8852      	ldrh	r2, [r2, #2]
   248d6:	b1fa      	cbz	r2, 24918 <net_conn_input+0xac>
			if (net_sin(&conns[i].local_addr)->sin_port !=
   248d8:	4593      	cmp	fp, r2
   248da:	d01d      	beq.n	24918 <net_conn_input+0xac>
	for (i = 0; i < CONFIG_NET_MAX_CONN; i++) {
   248dc:	3401      	adds	r4, #1
   248de:	2c03      	cmp	r4, #3
   248e0:	dc4d      	bgt.n	2497e <net_conn_input+0x112>
		if (!(conns[i].flags & NET_CONN_IN_USE)) {
   248e2:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   248e6:	009a      	lsls	r2, r3, #2
   248e8:	4b5f      	ldr	r3, [pc, #380]	; (24a68 <net_conn_input+0x1fc>)
   248ea:	4413      	add	r3, r2
   248ec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
   248f0:	f013 0f01 	tst.w	r3, #1
   248f4:	d0f2      	beq.n	248dc <net_conn_input+0x70>
		if (conns[i].proto != proto) {
   248f6:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   248fa:	0091      	lsls	r1, r2, #2
   248fc:	4a5a      	ldr	r2, [pc, #360]	; (24a68 <net_conn_input+0x1fc>)
   248fe:	440a      	add	r2, r1
   24900:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
   24904:	4295      	cmp	r5, r2
   24906:	d1e9      	bne.n	248dc <net_conn_input+0x70>
		if (net_sin(&conns[i].remote_addr)->sin_port) {
   24908:	4a57      	ldr	r2, [pc, #348]	; (24a68 <net_conn_input+0x1fc>)
   2490a:	4411      	add	r1, r2
   2490c:	884a      	ldrh	r2, [r1, #2]
   2490e:	2a00      	cmp	r2, #0
   24910:	d0d9      	beq.n	248c6 <net_conn_input+0x5a>
			if (net_sin(&conns[i].remote_addr)->sin_port !=
   24912:	4591      	cmp	r9, r2
   24914:	d1e2      	bne.n	248dc <net_conn_input+0x70>
   24916:	e7d6      	b.n	248c6 <net_conn_input+0x5a>
		if (conns[i].flags & NET_CONN_REMOTE_ADDR_SET) {
   24918:	f013 0f02 	tst.w	r3, #2
   2491c:	d120      	bne.n	24960 <net_conn_input+0xf4>
		if (conns[i].flags & NET_CONN_LOCAL_ADDR_SET) {
   2491e:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   24922:	009a      	lsls	r2, r3, #2
   24924:	4b50      	ldr	r3, [pc, #320]	; (24a68 <net_conn_input+0x1fc>)
   24926:	4413      	add	r3, r2
   24928:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
   2492c:	f013 0f04 	tst.w	r3, #4
   24930:	d11d      	bne.n	2496e <net_conn_input+0x102>
		if (best_match >= 0 &&
   24932:	2f00      	cmp	r7, #0
   24934:	db07      	blt.n	24946 <net_conn_input+0xda>
		    net_sin(&conns[best_match].remote_addr)->sin_port) {
   24936:	ebc7 1307 	rsb	r3, r7, r7, lsl #4
   2493a:	009a      	lsls	r2, r3, #2
   2493c:	4b4a      	ldr	r3, [pc, #296]	; (24a68 <net_conn_input+0x1fc>)
   2493e:	4413      	add	r3, r2
   24940:	885b      	ldrh	r3, [r3, #2]
		if (best_match >= 0 &&
   24942:	2b00      	cmp	r3, #0
   24944:	d1ca      	bne.n	248dc <net_conn_input+0x70>
		if (best_rank < conns[i].rank) {
   24946:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   2494a:	009a      	lsls	r2, r3, #2
   2494c:	4b46      	ldr	r3, [pc, #280]	; (24a68 <net_conn_input+0x1fc>)
   2494e:	4413      	add	r3, r2
   24950:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   24954:	4598      	cmp	r8, r3
   24956:	dac1      	bge.n	248dc <net_conn_input+0x70>
			best_rank = conns[i].rank;
   24958:	fa0f f883 	sxth.w	r8, r3
			best_match = i;
   2495c:	4627      	mov	r7, r4
   2495e:	e7bd      	b.n	248dc <net_conn_input+0x70>
			if (!check_addr(pkt, &conns[i].remote_addr, true)) {
   24960:	2201      	movs	r2, #1
   24962:	4630      	mov	r0, r6
   24964:	f7ff fe50 	bl	24608 <check_addr>
   24968:	2800      	cmp	r0, #0
   2496a:	d0b7      	beq.n	248dc <net_conn_input+0x70>
   2496c:	e7d7      	b.n	2491e <net_conn_input+0xb2>
			if (!check_addr(pkt, &conns[i].local_addr, false)) {
   2496e:	2200      	movs	r2, #0
   24970:	9901      	ldr	r1, [sp, #4]
   24972:	4630      	mov	r0, r6
   24974:	f7ff fe48 	bl	24608 <check_addr>
   24978:	2800      	cmp	r0, #0
   2497a:	d0af      	beq.n	248dc <net_conn_input+0x70>
   2497c:	e7d9      	b.n	24932 <net_conn_input+0xc6>
	if (best_match >= 0) {
   2497e:	2f00      	cmp	r7, #0
   24980:	db44      	blt.n	24a0c <net_conn_input+0x1a0>
		if (IS_ENABLED(CONFIG_NET_UDP_CHECKSUM) &&
   24982:	2d11      	cmp	r5, #17
   24984:	d014      	beq.n	249b0 <net_conn_input+0x144>
		} else if (IS_ENABLED(CONFIG_NET_TCP_CHECKSUM) &&
   24986:	2d06      	cmp	r5, #6
   24988:	d023      	beq.n	249d2 <net_conn_input+0x166>
		if (conns[best_match].cb(&conns[best_match], pkt,
   2498a:	4c37      	ldr	r4, [pc, #220]	; (24a68 <net_conn_input+0x1fc>)
   2498c:	013a      	lsls	r2, r7, #4
   2498e:	1bd1      	subs	r1, r2, r7
   24990:	008b      	lsls	r3, r1, #2
   24992:	4423      	add	r3, r4
   24994:	f8d3 8030 	ldr.w	r8, [r3, #48]	; 0x30
   24998:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   2499a:	4631      	mov	r1, r6
   2499c:	4618      	mov	r0, r3
   2499e:	47c0      	blx	r8
   249a0:	2802      	cmp	r0, #2
   249a2:	d03d      	beq.n	24a20 <net_conn_input+0x1b4>
	if (IS_ENABLED(CONFIG_NET_UDP) && proto == IPPROTO_UDP) {
   249a4:	2d11      	cmp	r5, #17
   249a6:	d023      	beq.n	249f0 <net_conn_input+0x184>
	} else if (IS_ENABLED(CONFIG_NET_TCP) && proto == IPPROTO_TCP) {
   249a8:	2d06      	cmp	r5, #6
   249aa:	d029      	beq.n	24a00 <net_conn_input+0x194>
		return NET_OK;
   249ac:	2000      	movs	r0, #0
   249ae:	e767      	b.n	24880 <net_conn_input+0x14>
			net_udp_set_chksum(pkt, pkt->frags);
   249b0:	68b1      	ldr	r1, [r6, #8]
   249b2:	4630      	mov	r0, r6
   249b4:	f7fd fe6b 	bl	2268e <net_udp_set_chksum>
			chksum_calc = net_udp_get_chksum(pkt, pkt->frags);
   249b8:	68b1      	ldr	r1, [r6, #8]
   249ba:	4630      	mov	r0, r6
   249bc:	f7fd feb4 	bl	22728 <net_udp_get_chksum>
			if (chksum != chksum_calc) {
   249c0:	4582      	cmp	sl, r0
   249c2:	d0e2      	beq.n	2498a <net_conn_input+0x11e>
	net_stats.udp.chkerr++;
   249c4:	4a29      	ldr	r2, [pc, #164]	; (24a6c <net_conn_input+0x200>)
   249c6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
   249ca:	3301      	adds	r3, #1
   249cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
   249d0:	e026      	b.n	24a20 <net_conn_input+0x1b4>
			net_tcp_set_chksum(pkt, pkt->frags);
   249d2:	68b1      	ldr	r1, [r6, #8]
   249d4:	4630      	mov	r0, r6
   249d6:	f7fe fc9e 	bl	23316 <net_tcp_set_chksum>
			chksum_calc = net_tcp_get_chksum(pkt, pkt->frags);
   249da:	68b1      	ldr	r1, [r6, #8]
   249dc:	4630      	mov	r0, r6
   249de:	f7fe fc74 	bl	232ca <net_tcp_get_chksum>
			if (chksum != chksum_calc) {
   249e2:	4582      	cmp	sl, r0
   249e4:	d0d1      	beq.n	2498a <net_conn_input+0x11e>
	net_stats.tcp.chkerr++;
   249e6:	4a21      	ldr	r2, [pc, #132]	; (24a6c <net_conn_input+0x200>)
   249e8:	6e13      	ldr	r3, [r2, #96]	; 0x60
   249ea:	3301      	adds	r3, #1
   249ec:	6613      	str	r3, [r2, #96]	; 0x60
   249ee:	e017      	b.n	24a20 <net_conn_input+0x1b4>
	net_stats.udp.recv++;
   249f0:	4a1e      	ldr	r2, [pc, #120]	; (24a6c <net_conn_input+0x200>)
   249f2:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
   249f6:	3301      	adds	r3, #1
   249f8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
		return NET_OK;
   249fc:	2000      	movs	r0, #0
   249fe:	e73f      	b.n	24880 <net_conn_input+0x14>
	net_stats.tcp.recv++;
   24a00:	4a1a      	ldr	r2, [pc, #104]	; (24a6c <net_conn_input+0x200>)
   24a02:	6d53      	ldr	r3, [r2, #84]	; 0x54
   24a04:	3301      	adds	r3, #1
   24a06:	6553      	str	r3, [r2, #84]	; 0x54
   24a08:	2000      	movs	r0, #0
   24a0a:	e739      	b.n	24880 <net_conn_input+0x14>
	return pkt->family;
   24a0c:	f896 3038 	ldrb.w	r3, [r6, #56]	; 0x38
   24a10:	f3c3 03c3 	ubfx	r3, r3, #3, #4
	if (net_pkt_family(pkt) == AF_INET6 &&
   24a14:	2b0a      	cmp	r3, #10
   24a16:	d009      	beq.n	24a2c <net_conn_input+0x1c0>
	if (net_pkt_family(pkt) == AF_INET6) {
   24a18:	2b0a      	cmp	r3, #10
   24a1a:	d00d      	beq.n	24a38 <net_conn_input+0x1cc>
		if (IS_ENABLED(CONFIG_NET_TCP) && proto == IPPROTO_TCP) {
   24a1c:	2d06      	cmp	r5, #6
   24a1e:	d012      	beq.n	24a46 <net_conn_input+0x1da>
	if (IS_ENABLED(CONFIG_NET_UDP) && proto == IPPROTO_UDP) {
   24a20:	2d11      	cmp	r5, #17
   24a22:	d015      	beq.n	24a50 <net_conn_input+0x1e4>
	} else if (IS_ENABLED(CONFIG_NET_TCP) && proto == IPPROTO_TCP) {
   24a24:	2d06      	cmp	r5, #6
   24a26:	d019      	beq.n	24a5c <net_conn_input+0x1f0>
	return NET_DROP;
   24a28:	2002      	movs	r0, #2
   24a2a:	e729      	b.n	24880 <net_conn_input+0x14>
	return pkt->frags->data;
   24a2c:	68b2      	ldr	r2, [r6, #8]
   24a2e:	6892      	ldr	r2, [r2, #8]
	return addr->s6_addr[0] == 0xFF;
   24a30:	7e12      	ldrb	r2, [r2, #24]
	if (net_pkt_family(pkt) == AF_INET6 &&
   24a32:	2aff      	cmp	r2, #255	; 0xff
   24a34:	d1f0      	bne.n	24a18 <net_conn_input+0x1ac>
   24a36:	e7f3      	b.n	24a20 <net_conn_input+0x1b4>
		net_icmpv6_send_error(pkt, NET_ICMPV6_DST_UNREACH,
   24a38:	2300      	movs	r3, #0
   24a3a:	2204      	movs	r2, #4
   24a3c:	2101      	movs	r1, #1
   24a3e:	4630      	mov	r0, r6
   24a40:	f7f9 fc94 	bl	1e36c <net_icmpv6_send_error>
   24a44:	e7ea      	b.n	24a1c <net_conn_input+0x1b0>
	net_stats.tcp.connrst++;
   24a46:	4a09      	ldr	r2, [pc, #36]	; (24a6c <net_conn_input+0x200>)
   24a48:	6f93      	ldr	r3, [r2, #120]	; 0x78
   24a4a:	3301      	adds	r3, #1
   24a4c:	6793      	str	r3, [r2, #120]	; 0x78
   24a4e:	e7e7      	b.n	24a20 <net_conn_input+0x1b4>
	net_stats.udp.drop++;
   24a50:	4a06      	ldr	r2, [pc, #24]	; (24a6c <net_conn_input+0x200>)
   24a52:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
   24a54:	3301      	adds	r3, #1
   24a56:	67d3      	str	r3, [r2, #124]	; 0x7c
	return NET_DROP;
   24a58:	2002      	movs	r0, #2
   24a5a:	e711      	b.n	24880 <net_conn_input+0x14>
	net_stats.tcp.drop++;
   24a5c:	4a03      	ldr	r2, [pc, #12]	; (24a6c <net_conn_input+0x200>)
   24a5e:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
   24a60:	3301      	adds	r3, #1
   24a62:	65d3      	str	r3, [r2, #92]	; 0x5c
   24a64:	2002      	movs	r0, #2
   24a66:	e70b      	b.n	24880 <net_conn_input+0x14>
   24a68:	2000043c 	.word	0x2000043c
   24a6c:	200029e8 	.word	0x200029e8

00024a70 <net_conn_init>:
		cb(&conns[i], user_data);
	}
}

void net_conn_init(void)
{
   24a70:	4770      	bx	lr

00024a72 <compute_rlen_size>:
 * @retval -EINVAL
 */
static
int compute_rlen_size(u16_t *size, u32_t len)
{
	if (len <= 127) {
   24a72:	297f      	cmp	r1, #127	; 0x7f
   24a74:	d912      	bls.n	24a9c <compute_rlen_size+0x2a>
		*size = 1;
	} else if (len >= 128 && len <= 16383) {
   24a76:	f1a1 0380 	sub.w	r3, r1, #128	; 0x80
   24a7a:	f5b3 5f7e 	cmp.w	r3, #16256	; 0x3f80
   24a7e:	d311      	bcc.n	24aa4 <compute_rlen_size+0x32>
		*size = 2;
	} else if (len >= 16384 && len <= 2097151) {
   24a80:	f5a1 4380 	sub.w	r3, r1, #16384	; 0x4000
   24a84:	f5b3 1ffe 	cmp.w	r3, #2080768	; 0x1fc000
   24a88:	d310      	bcc.n	24aac <compute_rlen_size+0x3a>
		*size = 3;
	} else if (len >= 2097152 && len <= 268435455) {
   24a8a:	f5a1 1100 	sub.w	r1, r1, #2097152	; 0x200000
   24a8e:	f1b1 6f7e 	cmp.w	r1, #266338304	; 0xfe00000
   24a92:	d20f      	bcs.n	24ab4 <compute_rlen_size+0x42>
		*size = 4;
   24a94:	2304      	movs	r3, #4
   24a96:	8003      	strh	r3, [r0, #0]
	} else {
		return -EINVAL;
	}

	return 0;
   24a98:	2000      	movs	r0, #0
   24a9a:	4770      	bx	lr
		*size = 1;
   24a9c:	2301      	movs	r3, #1
   24a9e:	8003      	strh	r3, [r0, #0]
	return 0;
   24aa0:	2000      	movs	r0, #0
   24aa2:	4770      	bx	lr
		*size = 2;
   24aa4:	2302      	movs	r3, #2
   24aa6:	8003      	strh	r3, [r0, #0]
	return 0;
   24aa8:	2000      	movs	r0, #0
   24aaa:	4770      	bx	lr
		*size = 3;
   24aac:	2303      	movs	r3, #3
   24aae:	8003      	strh	r3, [r0, #0]
	return 0;
   24ab0:	2000      	movs	r0, #0
   24ab2:	4770      	bx	lr
		return -EINVAL;
   24ab4:	f06f 0015 	mvn.w	r0, #21
}
   24ab8:	4770      	bx	lr

00024aba <rlen_encode>:
 * @param [in] len Value to encode
 *
 * @retval 0 always
 */
static int rlen_encode(u8_t *buf, u32_t len)
{
   24aba:	b410      	push	{r4}
	u8_t encoded;
	u8_t i;

	i = 0;
   24abc:	2200      	movs	r2, #0
   24abe:	e004      	b.n	24aca <rlen_encode+0x10>
		 * set the top bit of this byte
		 */
		if (len > 0) {
			encoded = encoded | 128;
		}
		buf[i++] = encoded;
   24ac0:	1c53      	adds	r3, r2, #1
   24ac2:	b2db      	uxtb	r3, r3
   24ac4:	5484      	strb	r4, [r0, r2]
	} while (len > 0);
   24ac6:	b139      	cbz	r1, 24ad8 <rlen_encode+0x1e>
		buf[i++] = encoded;
   24ac8:	461a      	mov	r2, r3
		encoded = len % 128;
   24aca:	f001 047f 	and.w	r4, r1, #127	; 0x7f
		if (len > 0) {
   24ace:	09c9      	lsrs	r1, r1, #7
   24ad0:	d0f6      	beq.n	24ac0 <rlen_encode+0x6>
			encoded = encoded | 128;
   24ad2:	f044 0480 	orr.w	r4, r4, #128	; 0x80
   24ad6:	e7f3      	b.n	24ac0 <rlen_encode+0x6>

	return 0;
}
   24ad8:	2000      	movs	r0, #0
   24ada:	bc10      	pop	{r4}
   24adc:	4770      	bx	lr

00024ade <rlen_decode>:
 * @retval 0 on success
 * @retval -ENOMEM if size < 4
 */
static int rlen_decode(u32_t *rlen, u16_t *rlen_size,
		       u8_t *buf, u16_t size)
{
   24ade:	b5f0      	push	{r4, r5, r6, r7, lr}
	u32_t value = 0;
	u32_t mult = 1;
	u16_t i = 0;
   24ae0:	2400      	movs	r4, #0
	u32_t mult = 1;
   24ae2:	2601      	movs	r6, #1
	u32_t value = 0;
   24ae4:	4627      	mov	r7, r4
   24ae6:	e000      	b.n	24aea <rlen_decode+0xc>
	do {
		if (i >= ENCLENBUF_MAX_SIZE || i >= size) {
			return -ENOMEM;
		}

		encoded = buf[i++];
   24ae8:	462c      	mov	r4, r5
		if (i >= ENCLENBUF_MAX_SIZE || i >= size) {
   24aea:	2c03      	cmp	r4, #3
   24aec:	d810      	bhi.n	24b10 <rlen_decode+0x32>
   24aee:	429c      	cmp	r4, r3
   24af0:	d211      	bcs.n	24b16 <rlen_decode+0x38>
		encoded = buf[i++];
   24af2:	1c65      	adds	r5, r4, #1
   24af4:	b2ad      	uxth	r5, r5
   24af6:	5d14      	ldrb	r4, [r2, r4]
		value += (encoded & 127) * mult;
   24af8:	f004 0e7f 	and.w	lr, r4, #127	; 0x7f
   24afc:	fb0e 7706 	mla	r7, lr, r6, r7
		mult *= 128;
   24b00:	01f6      	lsls	r6, r6, #7
	} while ((encoded & 128) != 0);
   24b02:	f014 0f80 	tst.w	r4, #128	; 0x80
   24b06:	d1ef      	bne.n	24ae8 <rlen_decode+0xa>

	*rlen = value;
   24b08:	6007      	str	r7, [r0, #0]
	*rlen_size = i;
   24b0a:	800d      	strh	r5, [r1, #0]

	return 0;
   24b0c:	2000      	movs	r0, #0
   24b0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -ENOMEM;
   24b10:	f06f 000b 	mvn.w	r0, #11
   24b14:	bdf0      	pop	{r4, r5, r6, r7, pc}
   24b16:	f06f 000b 	mvn.w	r0, #11
}
   24b1a:	bdf0      	pop	{r4, r5, r6, r7, pc}

00024b1c <pack_pkt_id>:
 * @retval -ENOMEM if size < 4
 */
static
int pack_pkt_id(u8_t *buf, u16_t *length, u16_t size,
		enum mqtt_packet type, u8_t reserved, u16_t pkt_id)
{
   24b1c:	b410      	push	{r4}
   24b1e:	f8bd 4008 	ldrh.w	r4, [sp, #8]
	if (size < MSG_PKTID_ONLY_SIZE) {
   24b22:	2a03      	cmp	r2, #3
   24b24:	d912      	bls.n	24b4c <pack_pkt_id+0x30>
		return -ENOMEM;
	}

	buf[0] = (type << 4) + (reserved & 0x0F);
   24b26:	011b      	lsls	r3, r3, #4
   24b28:	b2db      	uxtb	r3, r3
   24b2a:	f89d 2004 	ldrb.w	r2, [sp, #4]
   24b2e:	f002 020f 	and.w	r2, r2, #15
   24b32:	4413      	add	r3, r2
   24b34:	7003      	strb	r3, [r0, #0]
	buf[1] = PACKET_ID_SIZE;
   24b36:	2302      	movs	r3, #2
   24b38:	7043      	strb	r3, [r0, #1]
	UNALIGNED_PUT(htons(pkt_id), (u16_t *)(buf + PACKET_ID_SIZE));
   24b3a:	0a23      	lsrs	r3, r4, #8
   24b3c:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
   24b40:	8043      	strh	r3, [r0, #2]
	*length = MSG_PKTID_ONLY_SIZE;
   24b42:	2304      	movs	r3, #4
   24b44:	800b      	strh	r3, [r1, #0]

	return 0;
   24b46:	2000      	movs	r0, #0
}
   24b48:	bc10      	pop	{r4}
   24b4a:	4770      	bx	lr
		return -ENOMEM;
   24b4c:	f06f 000b 	mvn.w	r0, #11
   24b50:	e7fa      	b.n	24b48 <pack_pkt_id+0x2c>

00024b52 <pack_zerolen>:
 */
static
int pack_zerolen(u8_t *buf, u16_t *length, u16_t size,
		 enum mqtt_packet pkt_type, u8_t reserved)
{
	if (size < MSG_ZEROLEN_SIZE) {
   24b52:	2a01      	cmp	r2, #1
   24b54:	d90d      	bls.n	24b72 <pack_zerolen+0x20>
		return -ENOMEM;
	}

	buf[0] = (pkt_type << 4) + (reserved & 0x0F);
   24b56:	011b      	lsls	r3, r3, #4
   24b58:	b2db      	uxtb	r3, r3
   24b5a:	f89d 2000 	ldrb.w	r2, [sp]
   24b5e:	f002 020f 	and.w	r2, r2, #15
   24b62:	4413      	add	r3, r2
   24b64:	7003      	strb	r3, [r0, #0]
	buf[1] = 0x00;
   24b66:	2300      	movs	r3, #0
   24b68:	7043      	strb	r3, [r0, #1]
	*length = MSG_ZEROLEN_SIZE;
   24b6a:	2202      	movs	r2, #2
   24b6c:	800a      	strh	r2, [r1, #0]

	return 0;
   24b6e:	4618      	mov	r0, r3
   24b70:	4770      	bx	lr
		return -ENOMEM;
   24b72:	f06f 000b 	mvn.w	r0, #11
}
   24b76:	4770      	bx	lr

00024b78 <unpack_pktid>:
 */
static
int unpack_pktid(u8_t *buf, u16_t length, enum mqtt_packet *type,
		 u8_t *reserved, u16_t *pkt_id)
{
	if (length < MSG_PKTID_ONLY_SIZE) {
   24b78:	2903      	cmp	r1, #3
   24b7a:	d911      	bls.n	24ba0 <unpack_pktid+0x28>
		return -EINVAL;
	}

	if (buf[1] != PACKET_ID_SIZE) {
   24b7c:	7841      	ldrb	r1, [r0, #1]
   24b7e:	2902      	cmp	r1, #2
   24b80:	d111      	bne.n	24ba6 <unpack_pktid+0x2e>
		return -EINVAL;
	}

	*type = buf[0] >> 4;
   24b82:	7801      	ldrb	r1, [r0, #0]
   24b84:	0909      	lsrs	r1, r1, #4
   24b86:	7011      	strb	r1, [r2, #0]
	*reserved = buf[0] & 0x0F;
   24b88:	7802      	ldrb	r2, [r0, #0]
   24b8a:	f002 020f 	and.w	r2, r2, #15
   24b8e:	701a      	strb	r2, [r3, #0]
	*pkt_id = ntohs(*(u16_t *)(buf + 2));
   24b90:	8842      	ldrh	r2, [r0, #2]
   24b92:	0a13      	lsrs	r3, r2, #8
   24b94:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   24b98:	9a00      	ldr	r2, [sp, #0]
   24b9a:	8013      	strh	r3, [r2, #0]

	return 0;
   24b9c:	2000      	movs	r0, #0
   24b9e:	4770      	bx	lr
		return -EINVAL;
   24ba0:	f06f 0015 	mvn.w	r0, #21
   24ba4:	4770      	bx	lr
		return -EINVAL;
   24ba6:	f06f 0015 	mvn.w	r0, #21
}
   24baa:	4770      	bx	lr

00024bac <unpack_pktid_validate>:
 * @retval -EINVAL
 */
static
int unpack_pktid_validate(u8_t *buf, u16_t length, u16_t *pkt_id,
			  u8_t expected_type, u8_t expected_reserv)
{
   24bac:	b510      	push	{r4, lr}
   24bae:	b084      	sub	sp, #16
   24bb0:	461c      	mov	r4, r3
	enum mqtt_packet type;
	u8_t reserved;
	int rc;

	rc = unpack_pktid(buf, length, &type, &reserved, pkt_id);
   24bb2:	9200      	str	r2, [sp, #0]
   24bb4:	f10d 030e 	add.w	r3, sp, #14
   24bb8:	f10d 020f 	add.w	r2, sp, #15
   24bbc:	f7ff ffdc 	bl	24b78 <unpack_pktid>
	if (rc != 0) {
   24bc0:	4603      	mov	r3, r0
   24bc2:	b948      	cbnz	r0, 24bd8 <unpack_pktid_validate+0x2c>
		return rc;
	}

	if (type != expected_type || reserved != expected_reserv) {
   24bc4:	f89d 200f 	ldrb.w	r2, [sp, #15]
   24bc8:	42a2      	cmp	r2, r4
   24bca:	d10b      	bne.n	24be4 <unpack_pktid_validate+0x38>
   24bcc:	f89d 100e 	ldrb.w	r1, [sp, #14]
   24bd0:	f89d 2018 	ldrb.w	r2, [sp, #24]
   24bd4:	4291      	cmp	r1, r2
   24bd6:	d102      	bne.n	24bde <unpack_pktid_validate+0x32>
		return -EINVAL;
	}

	return 0;
}
   24bd8:	4618      	mov	r0, r3
   24bda:	b004      	add	sp, #16
   24bdc:	bd10      	pop	{r4, pc}
		return -EINVAL;
   24bde:	f06f 0315 	mvn.w	r3, #21
   24be2:	e7f9      	b.n	24bd8 <unpack_pktid_validate+0x2c>
   24be4:	f06f 0315 	mvn.w	r3, #21
   24be8:	e7f6      	b.n	24bd8 <unpack_pktid_validate+0x2c>

00024bea <unpack_zerolen>:
 */
static
int unpack_zerolen(u8_t *buf, u16_t length, enum mqtt_packet *pkt_type,
		   u8_t *reserved)
{
	if (length < MSG_ZEROLEN_SIZE) {
   24bea:	2901      	cmp	r1, #1
   24bec:	d90d      	bls.n	24c0a <unpack_zerolen+0x20>
		return -EINVAL;
	}

	*pkt_type = buf[0] >> 4;
   24bee:	7801      	ldrb	r1, [r0, #0]
   24bf0:	0909      	lsrs	r1, r1, #4
   24bf2:	7011      	strb	r1, [r2, #0]
	*reserved = buf[0] & 0x0F;
   24bf4:	7802      	ldrb	r2, [r0, #0]
   24bf6:	f002 020f 	and.w	r2, r2, #15
   24bfa:	701a      	strb	r2, [r3, #0]

	if (buf[1] != 0) {
   24bfc:	7843      	ldrb	r3, [r0, #1]
   24bfe:	b90b      	cbnz	r3, 24c04 <unpack_zerolen+0x1a>
		return -EINVAL;
	}

	return 0;
   24c00:	2000      	movs	r0, #0
}
   24c02:	4770      	bx	lr
		return -EINVAL;
   24c04:	f06f 0015 	mvn.w	r0, #21
   24c08:	4770      	bx	lr
		return -EINVAL;
   24c0a:	f06f 0015 	mvn.w	r0, #21
   24c0e:	4770      	bx	lr

00024c10 <unpack_zerolen_validate>:
 */
static
int unpack_zerolen_validate(u8_t *buf, u16_t length,
			    enum mqtt_packet expected_type,
			    u8_t expected_reserved)
{
   24c10:	b530      	push	{r4, r5, lr}
   24c12:	b083      	sub	sp, #12
   24c14:	4614      	mov	r4, r2
   24c16:	461d      	mov	r5, r3
	enum mqtt_packet pkt_type;
	u8_t reserved;
	int rc;

	rc = unpack_zerolen(buf, length, &pkt_type, &reserved);
   24c18:	f10d 0306 	add.w	r3, sp, #6
   24c1c:	f10d 0207 	add.w	r2, sp, #7
   24c20:	f7ff ffe3 	bl	24bea <unpack_zerolen>
	if (rc != 0) {
   24c24:	4603      	mov	r3, r0
   24c26:	b938      	cbnz	r0, 24c38 <unpack_zerolen_validate+0x28>
		return rc;
	}

	if (pkt_type != expected_type || reserved != expected_reserved) {
   24c28:	f89d 2007 	ldrb.w	r2, [sp, #7]
   24c2c:	42a2      	cmp	r2, r4
   24c2e:	d109      	bne.n	24c44 <unpack_zerolen_validate+0x34>
   24c30:	f89d 2006 	ldrb.w	r2, [sp, #6]
   24c34:	42aa      	cmp	r2, r5
   24c36:	d102      	bne.n	24c3e <unpack_zerolen_validate+0x2e>
		return -EINVAL;
	}

	return 0;
}
   24c38:	4618      	mov	r0, r3
   24c3a:	b003      	add	sp, #12
   24c3c:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   24c3e:	f06f 0315 	mvn.w	r3, #21
   24c42:	e7f9      	b.n	24c38 <unpack_zerolen_validate+0x28>
   24c44:	f06f 0315 	mvn.w	r3, #21
   24c48:	e7f6      	b.n	24c38 <unpack_zerolen_validate+0x28>

00024c4a <mqtt_pack_puback>:
{
   24c4a:	b500      	push	{lr}
   24c4c:	b083      	sub	sp, #12
	return pack_pkt_id(buf, length, size, MQTT_PUBACK, 0, pkt_id);
   24c4e:	9301      	str	r3, [sp, #4]
   24c50:	2300      	movs	r3, #0
   24c52:	9300      	str	r3, [sp, #0]
   24c54:	2304      	movs	r3, #4
   24c56:	f7ff ff61 	bl	24b1c <pack_pkt_id>
}
   24c5a:	b003      	add	sp, #12
   24c5c:	f85d fb04 	ldr.w	pc, [sp], #4

00024c60 <mqtt_pack_pubrec>:
{
   24c60:	b500      	push	{lr}
   24c62:	b083      	sub	sp, #12
	return pack_pkt_id(buf, length, size, MQTT_PUBREC, 0, pkt_id);
   24c64:	9301      	str	r3, [sp, #4]
   24c66:	2300      	movs	r3, #0
   24c68:	9300      	str	r3, [sp, #0]
   24c6a:	2305      	movs	r3, #5
   24c6c:	f7ff ff56 	bl	24b1c <pack_pkt_id>
}
   24c70:	b003      	add	sp, #12
   24c72:	f85d fb04 	ldr.w	pc, [sp], #4

00024c76 <mqtt_pack_pubrel>:
{
   24c76:	b500      	push	{lr}
   24c78:	b083      	sub	sp, #12
	return pack_pkt_id(buf, length, size, MQTT_PUBREL, PUBREL_RESERVED,
   24c7a:	9301      	str	r3, [sp, #4]
   24c7c:	2302      	movs	r3, #2
   24c7e:	9300      	str	r3, [sp, #0]
   24c80:	2306      	movs	r3, #6
   24c82:	f7ff ff4b 	bl	24b1c <pack_pkt_id>
}
   24c86:	b003      	add	sp, #12
   24c88:	f85d fb04 	ldr.w	pc, [sp], #4

00024c8c <mqtt_pack_pubcomp>:
{
   24c8c:	b500      	push	{lr}
   24c8e:	b083      	sub	sp, #12
	return pack_pkt_id(buf, length, size, MQTT_PUBCOMP, 0, pkt_id);
   24c90:	9301      	str	r3, [sp, #4]
   24c92:	2300      	movs	r3, #0
   24c94:	9300      	str	r3, [sp, #0]
   24c96:	2307      	movs	r3, #7
   24c98:	f7ff ff40 	bl	24b1c <pack_pkt_id>
}
   24c9c:	b003      	add	sp, #12
   24c9e:	f85d fb04 	ldr.w	pc, [sp], #4

00024ca2 <mqtt_pack_connect>:
{
   24ca2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   24ca6:	b082      	sub	sp, #8
   24ca8:	4605      	mov	r5, r0
   24caa:	460e      	mov	r6, r1
   24cac:	4617      	mov	r7, r2
   24cae:	461c      	mov	r4, r3
	pkt_size += msg->client_id_len;
   24cb0:	891b      	ldrh	r3, [r3, #8]
   24cb2:	1c99      	adds	r1, r3, #2
   24cb4:	b289      	uxth	r1, r1
	if (msg->will_flag) {
   24cb6:	7aa2      	ldrb	r2, [r4, #10]
   24cb8:	f012 0f01 	tst.w	r2, #1
   24cbc:	d009      	beq.n	24cd2 <mqtt_pack_connect+0x30>
		pkt_size += INT_SIZE;
   24cbe:	1d19      	adds	r1, r3, #4
		pkt_size += msg->will_topic_len;
   24cc0:	8aa3      	ldrh	r3, [r4, #20]
   24cc2:	fa13 f181 	uxtah	r1, r3, r1
   24cc6:	b289      	uxth	r1, r1
		pkt_size += INT_SIZE;
   24cc8:	3102      	adds	r1, #2
		pkt_size += msg->will_msg_len;
   24cca:	8ba3      	ldrh	r3, [r4, #28]
   24ccc:	fa13 f181 	uxtah	r1, r3, r1
   24cd0:	b289      	uxth	r1, r1
	if (msg->user_name) {
   24cd2:	6a23      	ldr	r3, [r4, #32]
   24cd4:	b123      	cbz	r3, 24ce0 <mqtt_pack_connect+0x3e>
		pkt_size += INT_SIZE;
   24cd6:	3102      	adds	r1, #2
		pkt_size += msg->user_name_len;
   24cd8:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   24cda:	fa13 f181 	uxtah	r1, r3, r1
   24cde:	b289      	uxth	r1, r1
	if (msg->password) {
   24ce0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   24ce2:	b123      	cbz	r3, 24cee <mqtt_pack_connect+0x4c>
		pkt_size += INT_SIZE;
   24ce4:	3102      	adds	r1, #2
		pkt_size += msg->password_len;
   24ce6:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
   24ce8:	fa13 f181 	uxtah	r1, r3, r1
   24cec:	b289      	uxth	r1, r1
	pkt_size += CONNECT_VARIABLE_HDR_SIZE;
   24cee:	310a      	adds	r1, #10
   24cf0:	fa1f fa81 	uxth.w	sl, r1
	rc = compute_rlen_size(&rlen_size, pkt_size);
   24cf4:	4651      	mov	r1, sl
   24cf6:	f10d 0006 	add.w	r0, sp, #6
   24cfa:	f7ff feba 	bl	24a72 <compute_rlen_size>
	if (rc != 0) {
   24cfe:	4681      	mov	r9, r0
   24d00:	2800      	cmp	r0, #0
   24d02:	f040 80b6 	bne.w	24e72 <mqtt_pack_connect+0x1d0>
	total_buf_size = PACKET_TYPE_SIZE + rlen_size + pkt_size;
   24d06:	f8bd 8006 	ldrh.w	r8, [sp, #6]
   24d0a:	44d0      	add	r8, sl
   24d0c:	fa1f f888 	uxth.w	r8, r8
   24d10:	f108 0801 	add.w	r8, r8, #1
   24d14:	fa1f f888 	uxth.w	r8, r8
	if (total_buf_size > size) {
   24d18:	45b8      	cmp	r8, r7
   24d1a:	f200 80ad 	bhi.w	24e78 <mqtt_pack_connect+0x1d6>
	buf[0] = MQTT_CONNECT << 4;
   24d1e:	4628      	mov	r0, r5
   24d20:	2310      	movs	r3, #16
   24d22:	f800 3b01 	strb.w	r3, [r0], #1
	rlen_encode(buf + PACKET_TYPE_SIZE, pkt_size);
   24d26:	4651      	mov	r1, sl
   24d28:	f7ff fec7 	bl	24aba <rlen_encode>
	offset = PACKET_TYPE_SIZE + rlen_size;
   24d2c:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   24d30:	1c43      	adds	r3, r0, #1
   24d32:	b29b      	uxth	r3, r3
	buf[offset + 0] = 0x00;
   24d34:	2200      	movs	r2, #0
   24d36:	54ea      	strb	r2, [r5, r3]
	buf[offset + 1] = 0x04;
   24d38:	1c59      	adds	r1, r3, #1
   24d3a:	2204      	movs	r2, #4
   24d3c:	546a      	strb	r2, [r5, r1]
	buf[offset + 2] = 'M';
   24d3e:	1c99      	adds	r1, r3, #2
   24d40:	274d      	movs	r7, #77	; 0x4d
   24d42:	546f      	strb	r7, [r5, r1]
	buf[offset + 3] = 'Q';
   24d44:	1cd9      	adds	r1, r3, #3
   24d46:	2751      	movs	r7, #81	; 0x51
   24d48:	546f      	strb	r7, [r5, r1]
	buf[offset + 4] = 'T';
   24d4a:	189f      	adds	r7, r3, r2
   24d4c:	2154      	movs	r1, #84	; 0x54
   24d4e:	55e9      	strb	r1, [r5, r7]
	buf[offset + 5] = 'T';
   24d50:	1d5f      	adds	r7, r3, #5
   24d52:	55e9      	strb	r1, [r5, r7]
	buf[offset + 6] = 0x04;
   24d54:	1d99      	adds	r1, r3, #6
   24d56:	546a      	strb	r2, [r5, r1]
	buf[offset + 7] = (msg->user_name ? 1 << 7 : 0) |
   24d58:	1ddf      	adds	r7, r3, #7
   24d5a:	6a22      	ldr	r2, [r4, #32]
   24d5c:	2a00      	cmp	r2, #0
   24d5e:	d05f      	beq.n	24e20 <mqtt_pack_connect+0x17e>
   24d60:	f06f 017f 	mvn.w	r1, #127	; 0x7f
			  (msg->password_len ? 1 << 6 : 0) |
   24d64:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
	buf[offset + 7] = (msg->user_name ? 1 << 7 : 0) |
   24d66:	2a00      	cmp	r2, #0
   24d68:	d05c      	beq.n	24e24 <mqtt_pack_connect+0x182>
   24d6a:	2240      	movs	r2, #64	; 0x40
   24d6c:	4311      	orrs	r1, r2
			  (msg->will_retain ? 1 << 5 : 0) |
   24d6e:	7b22      	ldrb	r2, [r4, #12]
			  (msg->password_len ? 1 << 6 : 0) |
   24d70:	f012 0f01 	tst.w	r2, #1
   24d74:	d058      	beq.n	24e28 <mqtt_pack_connect+0x186>
   24d76:	2220      	movs	r2, #32
   24d78:	4311      	orrs	r1, r2
			  ((msg->will_qos & 0x03) << 3) |
   24d7a:	7ae2      	ldrb	r2, [r4, #11]
   24d7c:	00d2      	lsls	r2, r2, #3
   24d7e:	f002 0218 	and.w	r2, r2, #24
			  (msg->will_retain ? 1 << 5 : 0) |
   24d82:	430a      	orrs	r2, r1
			  (msg->will_flag ? 1 << 2 : 0) |
   24d84:	7aa1      	ldrb	r1, [r4, #10]
			  ((msg->will_qos & 0x03) << 3) |
   24d86:	f011 0f01 	tst.w	r1, #1
   24d8a:	d04f      	beq.n	24e2c <mqtt_pack_connect+0x18a>
   24d8c:	2104      	movs	r1, #4
   24d8e:	4311      	orrs	r1, r2
			  (msg->clean_session ? 1 << 1 : 0);
   24d90:	7822      	ldrb	r2, [r4, #0]
			  (msg->will_flag ? 1 << 2 : 0) |
   24d92:	f012 0f01 	tst.w	r2, #1
   24d96:	d04b      	beq.n	24e30 <mqtt_pack_connect+0x18e>
   24d98:	2202      	movs	r2, #2
   24d9a:	430a      	orrs	r2, r1
	buf[offset + 7] = (msg->user_name ? 1 << 7 : 0) |
   24d9c:	55ea      	strb	r2, [r5, r7]
	UNALIGNED_PUT(htons(msg->keep_alive), (u16_t *)(buf + offset + 8));
   24d9e:	3308      	adds	r3, #8
   24da0:	8be1      	ldrh	r1, [r4, #30]
   24da2:	0a0a      	lsrs	r2, r1, #8
   24da4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   24da8:	52ea      	strh	r2, [r5, r3]
	offset += 8 + INT_SIZE;
   24daa:	f100 030b 	add.w	r3, r0, #11
   24dae:	b29b      	uxth	r3, r3
	UNALIGNED_PUT(htons(msg->client_id_len),
   24db0:	8921      	ldrh	r1, [r4, #8]
   24db2:	0a0a      	lsrs	r2, r1, #8
   24db4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   24db8:	52ea      	strh	r2, [r5, r3]
	offset += INT_SIZE;
   24dba:	300d      	adds	r0, #13
   24dbc:	b287      	uxth	r7, r0
	memcpy(buf + offset, msg->client_id, msg->client_id_len);
   24dbe:	8922      	ldrh	r2, [r4, #8]
   24dc0:	6861      	ldr	r1, [r4, #4]
   24dc2:	19e8      	adds	r0, r5, r7
   24dc4:	f7db fa7c 	bl	2c0 <memcpy>
	offset += msg->client_id_len;
   24dc8:	8920      	ldrh	r0, [r4, #8]
   24dca:	4438      	add	r0, r7
   24dcc:	b280      	uxth	r0, r0
	if (msg->will_flag) {
   24dce:	7aa3      	ldrb	r3, [r4, #10]
   24dd0:	f013 0f01 	tst.w	r3, #1
   24dd4:	d12e      	bne.n	24e34 <mqtt_pack_connect+0x192>
	if (msg->user_name) {
   24dd6:	6a23      	ldr	r3, [r4, #32]
   24dd8:	b173      	cbz	r3, 24df8 <mqtt_pack_connect+0x156>
		UNALIGNED_PUT(htons(msg->user_name_len),
   24dda:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
   24ddc:	0a13      	lsrs	r3, r2, #8
   24dde:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   24de2:	522b      	strh	r3, [r5, r0]
		offset += INT_SIZE;
   24de4:	3002      	adds	r0, #2
   24de6:	b287      	uxth	r7, r0
		memcpy(buf + offset, msg->user_name, msg->user_name_len);
   24de8:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
   24dea:	6a21      	ldr	r1, [r4, #32]
   24dec:	19e8      	adds	r0, r5, r7
   24dee:	f7db fa67 	bl	2c0 <memcpy>
		offset += msg->user_name_len;
   24df2:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
   24df4:	4438      	add	r0, r7
   24df6:	b280      	uxth	r0, r0
	if (msg->password) {
   24df8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   24dfa:	b15b      	cbz	r3, 24e14 <mqtt_pack_connect+0x172>
		UNALIGNED_PUT(htons(msg->password_len),
   24dfc:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
   24dfe:	0a13      	lsrs	r3, r2, #8
   24e00:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   24e04:	522b      	strh	r3, [r5, r0]
		offset += INT_SIZE;
   24e06:	3002      	adds	r0, #2
		memcpy(buf + offset, msg->password, msg->password_len);
   24e08:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
   24e0a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   24e0c:	fa15 f080 	uxtah	r0, r5, r0
   24e10:	f7db fa56 	bl	2c0 <memcpy>
	*length = total_buf_size;
   24e14:	f8a6 8000 	strh.w	r8, [r6]
}
   24e18:	4648      	mov	r0, r9
   24e1a:	b002      	add	sp, #8
   24e1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	buf[offset + 7] = (msg->user_name ? 1 << 7 : 0) |
   24e20:	2100      	movs	r1, #0
   24e22:	e79f      	b.n	24d64 <mqtt_pack_connect+0xc2>
   24e24:	2200      	movs	r2, #0
   24e26:	e7a1      	b.n	24d6c <mqtt_pack_connect+0xca>
			  (msg->password_len ? 1 << 6 : 0) |
   24e28:	2200      	movs	r2, #0
   24e2a:	e7a5      	b.n	24d78 <mqtt_pack_connect+0xd6>
			  ((msg->will_qos & 0x03) << 3) |
   24e2c:	2100      	movs	r1, #0
   24e2e:	e7ae      	b.n	24d8e <mqtt_pack_connect+0xec>
			  (msg->will_flag ? 1 << 2 : 0) |
   24e30:	2200      	movs	r2, #0
   24e32:	e7b2      	b.n	24d9a <mqtt_pack_connect+0xf8>
		UNALIGNED_PUT(htons(msg->will_topic_len),
   24e34:	8aa2      	ldrh	r2, [r4, #20]
   24e36:	0a13      	lsrs	r3, r2, #8
   24e38:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   24e3c:	522b      	strh	r3, [r5, r0]
		offset += INT_SIZE;
   24e3e:	3002      	adds	r0, #2
   24e40:	b287      	uxth	r7, r0
		memcpy(buf + offset, msg->will_topic,
   24e42:	8aa2      	ldrh	r2, [r4, #20]
   24e44:	6921      	ldr	r1, [r4, #16]
   24e46:	19e8      	adds	r0, r5, r7
   24e48:	f7db fa3a 	bl	2c0 <memcpy>
		offset += msg->will_topic_len;
   24e4c:	8aa0      	ldrh	r0, [r4, #20]
   24e4e:	4407      	add	r7, r0
   24e50:	b2bf      	uxth	r7, r7
		UNALIGNED_PUT(htons(msg->will_msg_len),
   24e52:	8ba2      	ldrh	r2, [r4, #28]
   24e54:	0a13      	lsrs	r3, r2, #8
   24e56:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   24e5a:	53eb      	strh	r3, [r5, r7]
		offset += INT_SIZE;
   24e5c:	3702      	adds	r7, #2
   24e5e:	b2bf      	uxth	r7, r7
		memcpy(buf + offset, msg->will_msg, msg->will_msg_len);
   24e60:	8ba2      	ldrh	r2, [r4, #28]
   24e62:	69a1      	ldr	r1, [r4, #24]
   24e64:	19e8      	adds	r0, r5, r7
   24e66:	f7db fa2b 	bl	2c0 <memcpy>
		offset += msg->will_msg_len;
   24e6a:	8ba0      	ldrh	r0, [r4, #28]
   24e6c:	4438      	add	r0, r7
   24e6e:	b280      	uxth	r0, r0
   24e70:	e7b1      	b.n	24dd6 <mqtt_pack_connect+0x134>
		return -EINVAL;
   24e72:	f06f 0915 	mvn.w	r9, #21
   24e76:	e7cf      	b.n	24e18 <mqtt_pack_connect+0x176>
		return -ENOMEM;
   24e78:	f06f 090b 	mvn.w	r9, #11
   24e7c:	e7cc      	b.n	24e18 <mqtt_pack_connect+0x176>
	...

00024e80 <mqtt_unpack_suback>:
{
   24e80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   24e84:	b087      	sub	sp, #28
   24e86:	461d      	mov	r5, r3
   24e88:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
   24e8c:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
	*pkt_id = 0;
   24e8e:	2300      	movs	r3, #0
   24e90:	8013      	strh	r3, [r2, #0]
	*items = 0;
   24e92:	702b      	strb	r3, [r5, #0]
	if (elements <= 0) {
   24e94:	2f00      	cmp	r7, #0
   24e96:	d037      	beq.n	24f08 <mqtt_unpack_suback+0x88>
   24e98:	4604      	mov	r4, r0
   24e9a:	4689      	mov	r9, r1
   24e9c:	4690      	mov	r8, r2
	if ((buf[0] & 0xF0) != (MQTT_SUBACK << 4)) {
   24e9e:	7803      	ldrb	r3, [r0, #0]
   24ea0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
   24ea4:	2a90      	cmp	r2, #144	; 0x90
   24ea6:	d138      	bne.n	24f1a <mqtt_unpack_suback+0x9a>
	rc = rlen_decode(&rlen, &rlen_size, buf + PACKET_TYPE_SIZE,
   24ea8:	1e4b      	subs	r3, r1, #1
   24eaa:	b29b      	uxth	r3, r3
   24eac:	1c42      	adds	r2, r0, #1
   24eae:	f10d 0116 	add.w	r1, sp, #22
   24eb2:	a804      	add	r0, sp, #16
   24eb4:	f7ff fe13 	bl	24ade <rlen_decode>
	if (rc != 0) {
   24eb8:	4603      	mov	r3, r0
   24eba:	2800      	cmp	r0, #0
   24ebc:	d136      	bne.n	24f2c <mqtt_unpack_suback+0xac>
	if (PACKET_TYPE_SIZE + rlen + rlen_size > length) {
   24ebe:	f8bd 1016 	ldrh.w	r1, [sp, #22]
   24ec2:	9804      	ldr	r0, [sp, #16]
   24ec4:	180a      	adds	r2, r1, r0
   24ec6:	3201      	adds	r2, #1
   24ec8:	454a      	cmp	r2, r9
   24eca:	d838      	bhi.n	24f3e <mqtt_unpack_suback+0xbe>
	offset = PACKET_TYPE_SIZE + rlen_size;
   24ecc:	1c4a      	adds	r2, r1, #1
	val_u16 = UNALIGNED_GET((u16_t *)(buf + offset));
   24ece:	fa14 f282 	uxtah	r2, r4, r2
   24ed2:	8810      	ldrh	r0, [r2, #0]
	*pkt_id = ntohs(val_u16);
   24ed4:	0a02      	lsrs	r2, r0, #8
   24ed6:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
   24eda:	f8a8 2000 	strh.w	r2, [r8]
	offset += PACKET_ID_SIZE;
   24ede:	3103      	adds	r1, #3
   24ee0:	b289      	uxth	r1, r1
	*items = rlen - PACKET_ID_SIZE;
   24ee2:	9a04      	ldr	r2, [sp, #16]
   24ee4:	3a02      	subs	r2, #2
   24ee6:	b2d2      	uxtb	r2, r2
   24ee8:	702a      	strb	r2, [r5, #0]
	if (*items > elements) {
   24eea:	4297      	cmp	r7, r2
   24eec:	d335      	bcc.n	24f5a <mqtt_unpack_suback+0xda>
   24eee:	2200      	movs	r2, #0
	for (i = 0; i < *items; i++) {
   24ef0:	7828      	ldrb	r0, [r5, #0]
   24ef2:	4282      	cmp	r2, r0
   24ef4:	d242      	bcs.n	24f7c <mqtt_unpack_suback+0xfc>
		qos = *(buf + offset);
   24ef6:	5c60      	ldrb	r0, [r4, r1]
		if (qos < MQTT_QoS0 || qos > MQTT_QoS2) {
   24ef8:	2802      	cmp	r0, #2
   24efa:	d837      	bhi.n	24f6c <mqtt_unpack_suback+0xec>
		granted_qos[i] = qos;
   24efc:	54b0      	strb	r0, [r6, r2]
		offset += QoS_SIZE;
   24efe:	3101      	adds	r1, #1
   24f00:	b289      	uxth	r1, r1
	for (i = 0; i < *items; i++) {
   24f02:	3201      	adds	r2, #1
   24f04:	b2d2      	uxtb	r2, r2
   24f06:	e7f3      	b.n	24ef0 <mqtt_unpack_suback+0x70>
		printk("[%s:%d] elements <= 0\n", __func__, __LINE__);
   24f08:	f240 321a 	movw	r2, #794	; 0x31a
   24f0c:	491d      	ldr	r1, [pc, #116]	; (24f84 <mqtt_unpack_suback+0x104>)
   24f0e:	481e      	ldr	r0, [pc, #120]	; (24f88 <mqtt_unpack_suback+0x108>)
   24f10:	f7de f81a 	bl	2f48 <printk>
		return -EINVAL;
   24f14:	f06f 0315 	mvn.w	r3, #21
   24f18:	e030      	b.n	24f7c <mqtt_unpack_suback+0xfc>
		printk("[%s:%d] buf[0](%x) != MQTT_SUBACK << 4\n", __func__, __LINE__, buf[0]);
   24f1a:	f240 321f 	movw	r2, #799	; 0x31f
   24f1e:	4919      	ldr	r1, [pc, #100]	; (24f84 <mqtt_unpack_suback+0x104>)
   24f20:	481a      	ldr	r0, [pc, #104]	; (24f8c <mqtt_unpack_suback+0x10c>)
   24f22:	f7de f811 	bl	2f48 <printk>
		return -EINVAL;
   24f26:	f06f 0315 	mvn.w	r3, #21
   24f2a:	e027      	b.n	24f7c <mqtt_unpack_suback+0xfc>
		printk("[%s:%d] rlen_decode returned %d\n", __func__, __LINE__, rc);
   24f2c:	f240 3226 	movw	r2, #806	; 0x326
   24f30:	4914      	ldr	r1, [pc, #80]	; (24f84 <mqtt_unpack_suback+0x104>)
   24f32:	4817      	ldr	r0, [pc, #92]	; (24f90 <mqtt_unpack_suback+0x110>)
   24f34:	f7de f808 	bl	2f48 <printk>
		return -EINVAL;
   24f38:	f06f 0315 	mvn.w	r3, #21
   24f3c:	e01e      	b.n	24f7c <mqtt_unpack_suback+0xfc>
		printk("[%s:%d] PACKET_TYPE_SIZE(%d) + rlen(%d) + rlen_size(%d) > length(%d)\n"
   24f3e:	f8cd 9008 	str.w	r9, [sp, #8]
   24f42:	9101      	str	r1, [sp, #4]
   24f44:	9000      	str	r0, [sp, #0]
   24f46:	2301      	movs	r3, #1
   24f48:	f240 322d 	movw	r2, #813	; 0x32d
   24f4c:	490d      	ldr	r1, [pc, #52]	; (24f84 <mqtt_unpack_suback+0x104>)
   24f4e:	4811      	ldr	r0, [pc, #68]	; (24f94 <mqtt_unpack_suback+0x114>)
   24f50:	f7dd fffa 	bl	2f48 <printk>
		return -EINVAL;
   24f54:	f06f 0315 	mvn.w	r3, #21
   24f58:	e010      	b.n	24f7c <mqtt_unpack_suback+0xfc>
		printk("[%s:%d] not enough space to store elements\n", __func__, __LINE__);
   24f5a:	f240 323b 	movw	r2, #827	; 0x33b
   24f5e:	4909      	ldr	r1, [pc, #36]	; (24f84 <mqtt_unpack_suback+0x104>)
   24f60:	480d      	ldr	r0, [pc, #52]	; (24f98 <mqtt_unpack_suback+0x118>)
   24f62:	f7dd fff1 	bl	2f48 <printk>
		return -EINVAL;
   24f66:	f06f 0315 	mvn.w	r3, #21
   24f6a:	e007      	b.n	24f7c <mqtt_unpack_suback+0xfc>
			printk("[%s:%d] invalid qos\n", __func__, __LINE__);
   24f6c:	f240 3242 	movw	r2, #834	; 0x342
   24f70:	4904      	ldr	r1, [pc, #16]	; (24f84 <mqtt_unpack_suback+0x104>)
   24f72:	480a      	ldr	r0, [pc, #40]	; (24f9c <mqtt_unpack_suback+0x11c>)
   24f74:	f7dd ffe8 	bl	2f48 <printk>
			return -EINVAL;
   24f78:	f06f 0315 	mvn.w	r3, #21
}
   24f7c:	4618      	mov	r0, r3
   24f7e:	b007      	add	sp, #28
   24f80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   24f84:	00030940 	.word	0x00030940
   24f88:	00030954 	.word	0x00030954
   24f8c:	0003096c 	.word	0x0003096c
   24f90:	00030994 	.word	0x00030994
   24f94:	000309b8 	.word	0x000309b8
   24f98:	00030a00 	.word	0x00030a00
   24f9c:	00030a2c 	.word	0x00030a2c

00024fa0 <mqtt_pack_publish>:
{
   24fa0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   24fa4:	b083      	sub	sp, #12
	if (msg->qos < MQTT_QoS0 || msg->qos > MQTT_QoS2) {
   24fa6:	785c      	ldrb	r4, [r3, #1]
   24fa8:	2c02      	cmp	r4, #2
   24faa:	d860      	bhi.n	2506e <mqtt_pack_publish+0xce>
	payload = INT_SIZE + msg->topic_len +
   24fac:	f8b3 c00c 	ldrh.w	ip, [r3, #12]
   24fb0:	2c00      	cmp	r4, #0
   24fb2:	d057      	beq.n	25064 <mqtt_pack_publish+0xc4>
   24fb4:	f04f 0e02 	mov.w	lr, #2
   24fb8:	461c      	mov	r4, r3
   24fba:	4615      	mov	r5, r2
   24fbc:	460f      	mov	r7, r1
   24fbe:	4606      	mov	r6, r0
   24fc0:	eb0e 030c 	add.w	r3, lr, ip
		  (msg->qos > MQTT_QoS0 ? PACKET_ID_SIZE : 0) + msg->msg_len;
   24fc4:	8aa2      	ldrh	r2, [r4, #20]
   24fc6:	fa12 f383 	uxtah	r3, r2, r3
   24fca:	b29b      	uxth	r3, r3
	payload = INT_SIZE + msg->topic_len +
   24fcc:	3302      	adds	r3, #2
   24fce:	fa1f f983 	uxth.w	r9, r3
	rc = compute_rlen_size(&rlen_size, payload);
   24fd2:	4649      	mov	r1, r9
   24fd4:	f10d 0006 	add.w	r0, sp, #6
   24fd8:	f7ff fd4b 	bl	24a72 <compute_rlen_size>
	if (rc != 0) {
   24fdc:	4680      	mov	r8, r0
   24fde:	2800      	cmp	r0, #0
   24fe0:	d148      	bne.n	25074 <mqtt_pack_publish+0xd4>
	if (PACKET_TYPE_SIZE + rlen_size + payload > size) {
   24fe2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   24fe6:	3301      	adds	r3, #1
   24fe8:	444b      	add	r3, r9
   24fea:	42ab      	cmp	r3, r5
   24fec:	dc45      	bgt.n	2507a <mqtt_pack_publish+0xda>
	buf[0] = (MQTT_PUBLISH << 4) | ((msg->dup ? 1 : 0) << 3) |
   24fee:	7823      	ldrb	r3, [r4, #0]
   24ff0:	2b00      	cmp	r3, #0
   24ff2:	d03a      	beq.n	2506a <mqtt_pack_publish+0xca>
   24ff4:	2338      	movs	r3, #56	; 0x38
		 (msg->qos << 1) | (msg->retain ? 1 : 0);
   24ff6:	7862      	ldrb	r2, [r4, #1]
	buf[0] = (MQTT_PUBLISH << 4) | ((msg->dup ? 1 : 0) << 3) |
   24ff8:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
   24ffc:	b25b      	sxtb	r3, r3
		 (msg->qos << 1) | (msg->retain ? 1 : 0);
   24ffe:	78a2      	ldrb	r2, [r4, #2]
   25000:	2a00      	cmp	r2, #0
   25002:	bf18      	it	ne
   25004:	f043 0301 	orrne.w	r3, r3, #1
	buf[0] = (MQTT_PUBLISH << 4) | ((msg->dup ? 1 : 0) << 3) |
   25008:	4630      	mov	r0, r6
   2500a:	f800 3b01 	strb.w	r3, [r0], #1
	rlen_encode(buf + PACKET_TYPE_SIZE, payload);
   2500e:	4649      	mov	r1, r9
   25010:	f7ff fd53 	bl	24aba <rlen_encode>
	offset = PACKET_TYPE_SIZE + rlen_size;
   25014:	f8bd 5006 	ldrh.w	r5, [sp, #6]
   25018:	1c6b      	adds	r3, r5, #1
   2501a:	b29b      	uxth	r3, r3
	UNALIGNED_PUT(htons(msg->topic_len), (u16_t *)(buf + offset));
   2501c:	89a1      	ldrh	r1, [r4, #12]
   2501e:	0a0a      	lsrs	r2, r1, #8
   25020:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   25024:	52f2      	strh	r2, [r6, r3]
	offset += INT_SIZE;
   25026:	3503      	adds	r5, #3
   25028:	b2ad      	uxth	r5, r5
	memcpy(buf + offset, msg->topic, msg->topic_len);
   2502a:	89a2      	ldrh	r2, [r4, #12]
   2502c:	68a1      	ldr	r1, [r4, #8]
   2502e:	1970      	adds	r0, r6, r5
   25030:	f7db f946 	bl	2c0 <memcpy>
	offset += msg->topic_len;
   25034:	89a3      	ldrh	r3, [r4, #12]
   25036:	441d      	add	r5, r3
   25038:	b2ad      	uxth	r5, r5
	if (msg->qos > MQTT_QoS0) {
   2503a:	7863      	ldrb	r3, [r4, #1]
   2503c:	b133      	cbz	r3, 2504c <mqtt_pack_publish+0xac>
		UNALIGNED_PUT(htons(msg->pkt_id), (u16_t *)(buf + offset));
   2503e:	88a2      	ldrh	r2, [r4, #4]
   25040:	0a13      	lsrs	r3, r2, #8
   25042:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   25046:	5373      	strh	r3, [r6, r5]
		offset += PACKET_ID_SIZE;
   25048:	3502      	adds	r5, #2
   2504a:	b2ad      	uxth	r5, r5
	memcpy(buf + offset, msg->msg, msg->msg_len);
   2504c:	8aa2      	ldrh	r2, [r4, #20]
   2504e:	6921      	ldr	r1, [r4, #16]
   25050:	1970      	adds	r0, r6, r5
   25052:	f7db f935 	bl	2c0 <memcpy>
	offset += msg->msg_len;
   25056:	8aa3      	ldrh	r3, [r4, #20]
   25058:	441d      	add	r5, r3
	*length = offset;
   2505a:	803d      	strh	r5, [r7, #0]
}
   2505c:	4640      	mov	r0, r8
   2505e:	b003      	add	sp, #12
   25060:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	payload = INT_SIZE + msg->topic_len +
   25064:	f04f 0e00 	mov.w	lr, #0
   25068:	e7a6      	b.n	24fb8 <mqtt_pack_publish+0x18>
	buf[0] = (MQTT_PUBLISH << 4) | ((msg->dup ? 1 : 0) << 3) |
   2506a:	2330      	movs	r3, #48	; 0x30
   2506c:	e7c3      	b.n	24ff6 <mqtt_pack_publish+0x56>
		return -EINVAL;
   2506e:	f06f 0815 	mvn.w	r8, #21
   25072:	e7f3      	b.n	2505c <mqtt_pack_publish+0xbc>
		return -EINVAL;
   25074:	f06f 0815 	mvn.w	r8, #21
   25078:	e7f0      	b.n	2505c <mqtt_pack_publish+0xbc>
		return -ENOMEM;
   2507a:	f06f 080b 	mvn.w	r8, #11
   2507e:	e7ed      	b.n	2505c <mqtt_pack_publish+0xbc>

00025080 <mqtt_unpack_publish>:
{
   25080:	b5f0      	push	{r4, r5, r6, r7, lr}
   25082:	b083      	sub	sp, #12
	if (buf[0] >> 4 != MQTT_PUBLISH) {
   25084:	7807      	ldrb	r7, [r0, #0]
   25086:	093b      	lsrs	r3, r7, #4
   25088:	2b03      	cmp	r3, #3
   2508a:	d148      	bne.n	2511e <mqtt_unpack_publish+0x9e>
   2508c:	4615      	mov	r5, r2
   2508e:	460e      	mov	r6, r1
   25090:	4604      	mov	r4, r0
	msg->dup = (buf[0] & 0x08) >> 3;
   25092:	f3c7 07c0 	ubfx	r7, r7, #3, #1
   25096:	7017      	strb	r7, [r2, #0]
	msg->qos = (buf[0] & 0x06) >> 1;
   25098:	7803      	ldrb	r3, [r0, #0]
   2509a:	f3c3 0341 	ubfx	r3, r3, #1, #2
   2509e:	7053      	strb	r3, [r2, #1]
	msg->retain = buf[0] & 0x01;
   250a0:	4602      	mov	r2, r0
   250a2:	f812 3b01 	ldrb.w	r3, [r2], #1
   250a6:	f003 0301 	and.w	r3, r3, #1
   250aa:	70ab      	strb	r3, [r5, #2]
	rc = rlen_decode(&rmlen, &rmlen_size, buf + PACKET_TYPE_SIZE,
   250ac:	1e4b      	subs	r3, r1, #1
   250ae:	b29b      	uxth	r3, r3
   250b0:	f10d 0106 	add.w	r1, sp, #6
   250b4:	4668      	mov	r0, sp
   250b6:	f7ff fd12 	bl	24ade <rlen_decode>
	if (rc != 0) {
   250ba:	4607      	mov	r7, r0
   250bc:	2800      	cmp	r0, #0
   250be:	d131      	bne.n	25124 <mqtt_unpack_publish+0xa4>
	if ((PACKET_TYPE_SIZE + rmlen_size + rmlen) > length) {
   250c0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   250c4:	9b00      	ldr	r3, [sp, #0]
   250c6:	4413      	add	r3, r2
   250c8:	3301      	adds	r3, #1
   250ca:	42b3      	cmp	r3, r6
   250cc:	d82d      	bhi.n	2512a <mqtt_unpack_publish+0xaa>
	offset = PACKET_TYPE_SIZE + rmlen_size;
   250ce:	1c53      	adds	r3, r2, #1
	val_u16 = UNALIGNED_GET((u16_t *)(buf + offset));
   250d0:	fa14 f383 	uxtah	r3, r4, r3
   250d4:	8819      	ldrh	r1, [r3, #0]
	msg->topic_len = ntohs(val_u16);
   250d6:	0a0b      	lsrs	r3, r1, #8
   250d8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   250dc:	b29b      	uxth	r3, r3
   250de:	81ab      	strh	r3, [r5, #12]
	offset += INT_SIZE;
   250e0:	3203      	adds	r2, #3
   250e2:	b292      	uxth	r2, r2
	if (offset + msg->topic_len > length) {
   250e4:	18d1      	adds	r1, r2, r3
   250e6:	42b1      	cmp	r1, r6
   250e8:	dc22      	bgt.n	25130 <mqtt_unpack_publish+0xb0>
	msg->topic = (char *)(buf + offset);
   250ea:	18a1      	adds	r1, r4, r2
   250ec:	60a9      	str	r1, [r5, #8]
	offset += msg->topic_len;
   250ee:	4413      	add	r3, r2
   250f0:	b29b      	uxth	r3, r3
	val_u16 = UNALIGNED_GET((u16_t *)(buf + offset));
   250f2:	5ae1      	ldrh	r1, [r4, r3]
	if (msg->qos == MQTT_QoS1 || msg->qos == MQTT_QoS2) {
   250f4:	786a      	ldrb	r2, [r5, #1]
   250f6:	3a01      	subs	r2, #1
   250f8:	b2d2      	uxtb	r2, r2
   250fa:	2a01      	cmp	r2, #1
   250fc:	d908      	bls.n	25110 <mqtt_unpack_publish+0x90>
		msg->pkt_id = 0;
   250fe:	2200      	movs	r2, #0
   25100:	80aa      	strh	r2, [r5, #4]
	msg->msg_len = length - offset;
   25102:	1af6      	subs	r6, r6, r3
   25104:	82ae      	strh	r6, [r5, #20]
	msg->msg = buf + offset;
   25106:	4423      	add	r3, r4
   25108:	612b      	str	r3, [r5, #16]
}
   2510a:	4638      	mov	r0, r7
   2510c:	b003      	add	sp, #12
   2510e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		msg->pkt_id = ntohs(val_u16);
   25110:	0a0a      	lsrs	r2, r1, #8
   25112:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
   25116:	80a9      	strh	r1, [r5, #4]
		offset += PACKET_ID_SIZE;
   25118:	3302      	adds	r3, #2
   2511a:	b29b      	uxth	r3, r3
   2511c:	e7f1      	b.n	25102 <mqtt_unpack_publish+0x82>
		return -EINVAL;
   2511e:	f06f 0715 	mvn.w	r7, #21
   25122:	e7f2      	b.n	2510a <mqtt_unpack_publish+0x8a>
		return -EINVAL;
   25124:	f06f 0715 	mvn.w	r7, #21
   25128:	e7ef      	b.n	2510a <mqtt_unpack_publish+0x8a>
		return -EINVAL;
   2512a:	f06f 0715 	mvn.w	r7, #21
   2512e:	e7ec      	b.n	2510a <mqtt_unpack_publish+0x8a>
		return -EINVAL;
   25130:	f06f 0715 	mvn.w	r7, #21
   25134:	e7e9      	b.n	2510a <mqtt_unpack_publish+0x8a>

00025136 <mqtt_unpack_connack>:
	if (length < CONNACK_SIZE) {
   25136:	2903      	cmp	r1, #3
   25138:	d90d      	bls.n	25156 <mqtt_unpack_connack+0x20>
	if (buf[0] != (MQTT_CONNACK << 4) || buf[1] != 2) {
   2513a:	7801      	ldrb	r1, [r0, #0]
   2513c:	2920      	cmp	r1, #32
   2513e:	d10d      	bne.n	2515c <mqtt_unpack_connack+0x26>
   25140:	7841      	ldrb	r1, [r0, #1]
   25142:	2902      	cmp	r1, #2
   25144:	d10d      	bne.n	25162 <mqtt_unpack_connack+0x2c>
	if (buf[2] > 1) {
   25146:	7881      	ldrb	r1, [r0, #2]
   25148:	2901      	cmp	r1, #1
   2514a:	d80d      	bhi.n	25168 <mqtt_unpack_connack+0x32>
	*session = buf[2];
   2514c:	7011      	strb	r1, [r2, #0]
	*connect_rc = buf[3];
   2514e:	78c2      	ldrb	r2, [r0, #3]
   25150:	701a      	strb	r2, [r3, #0]
	return 0;
   25152:	2000      	movs	r0, #0
   25154:	4770      	bx	lr
		return -EINVAL;
   25156:	f06f 0015 	mvn.w	r0, #21
   2515a:	4770      	bx	lr
		return -EINVAL;
   2515c:	f06f 0015 	mvn.w	r0, #21
   25160:	4770      	bx	lr
   25162:	f06f 0015 	mvn.w	r0, #21
   25166:	4770      	bx	lr
		return -EINVAL;
   25168:	f06f 0015 	mvn.w	r0, #21
}
   2516c:	4770      	bx	lr

0002516e <mqtt_pack_disconnect>:
{
   2516e:	b500      	push	{lr}
   25170:	b083      	sub	sp, #12
	return pack_zerolen(buf, length, size, MQTT_DISCONNECT, 0x00);
   25172:	2300      	movs	r3, #0
   25174:	9300      	str	r3, [sp, #0]
   25176:	230e      	movs	r3, #14
   25178:	f7ff fceb 	bl	24b52 <pack_zerolen>
}
   2517c:	b003      	add	sp, #12
   2517e:	f85d fb04 	ldr.w	pc, [sp], #4

00025182 <mqtt_unpack_puback>:
{
   25182:	b500      	push	{lr}
   25184:	b083      	sub	sp, #12
	return unpack_pktid_validate(buf, length, pkt_id, MQTT_PUBACK,
   25186:	2300      	movs	r3, #0
   25188:	9300      	str	r3, [sp, #0]
   2518a:	2304      	movs	r3, #4
   2518c:	f7ff fd0e 	bl	24bac <unpack_pktid_validate>
}
   25190:	b003      	add	sp, #12
   25192:	f85d fb04 	ldr.w	pc, [sp], #4

00025196 <mqtt_unpack_pubrec>:
{
   25196:	b500      	push	{lr}
   25198:	b083      	sub	sp, #12
	return unpack_pktid_validate(buf, length, pkt_id, MQTT_PUBREC,
   2519a:	2300      	movs	r3, #0
   2519c:	9300      	str	r3, [sp, #0]
   2519e:	2305      	movs	r3, #5
   251a0:	f7ff fd04 	bl	24bac <unpack_pktid_validate>
}
   251a4:	b003      	add	sp, #12
   251a6:	f85d fb04 	ldr.w	pc, [sp], #4

000251aa <mqtt_unpack_pubrel>:
{
   251aa:	b500      	push	{lr}
   251ac:	b083      	sub	sp, #12
	return unpack_pktid_validate(buf, length, pkt_id, MQTT_PUBREL,
   251ae:	2302      	movs	r3, #2
   251b0:	9300      	str	r3, [sp, #0]
   251b2:	2306      	movs	r3, #6
   251b4:	f7ff fcfa 	bl	24bac <unpack_pktid_validate>
}
   251b8:	b003      	add	sp, #12
   251ba:	f85d fb04 	ldr.w	pc, [sp], #4

000251be <mqtt_unpack_pubcomp>:
{
   251be:	b500      	push	{lr}
   251c0:	b083      	sub	sp, #12
	return unpack_pktid_validate(buf, length, pkt_id, MQTT_PUBCOMP,
   251c2:	2300      	movs	r3, #0
   251c4:	9300      	str	r3, [sp, #0]
   251c6:	2307      	movs	r3, #7
   251c8:	f7ff fcf0 	bl	24bac <unpack_pktid_validate>
}
   251cc:	b003      	add	sp, #12
   251ce:	f85d fb04 	ldr.w	pc, [sp], #4

000251d2 <mqtt_unpack_pingresp>:
{
	return unpack_zerolen_validate(buf, length, MQTT_PINGREQ, 0x00);
}

int mqtt_unpack_pingresp(u8_t *buf, u16_t length)
{
   251d2:	b508      	push	{r3, lr}
	return unpack_zerolen_validate(buf, length, MQTT_PINGRESP, 0x00);
   251d4:	2300      	movs	r3, #0
   251d6:	220d      	movs	r2, #13
   251d8:	f7ff fd1a 	bl	24c10 <unpack_zerolen_validate>
}
   251dc:	bd08      	pop	{r3, pc}
	...

000251e0 <mqtt_rx_pub_msgs>:
 * @retval -EINVAL on error
 */
static
int mqtt_rx_pub_msgs(struct mqtt_ctx *ctx, struct net_buf *rx,
		     enum mqtt_packet type)
{
   251e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   251e2:	b083      	sub	sp, #12
	u16_t pkt_id;
	u16_t len;
	u8_t *data;
	int rc;

	switch (type) {
   251e4:	1f13      	subs	r3, r2, #4
   251e6:	2b03      	cmp	r3, #3
   251e8:	d840      	bhi.n	2526c <mqtt_rx_pub_msgs+0x8c>
   251ea:	e8df f003 	tbb	[pc, r3]
   251ee:	0502      	.short	0x0502
   251f0:	0b08      	.short	0x0b08
	int (*response)(struct mqtt_ctx *, u16_t) = NULL;
   251f2:	2600      	movs	r6, #0
	case MQTT_PUBACK:
		unpack = mqtt_unpack_puback;
   251f4:	4f22      	ldr	r7, [pc, #136]	; (25280 <mqtt_rx_pub_msgs+0xa0>)
   251f6:	e007      	b.n	25208 <mqtt_rx_pub_msgs+0x28>
	case MQTT_PUBCOMP:
		unpack = mqtt_unpack_pubcomp;
		break;
	case MQTT_PUBREC:
		unpack = mqtt_unpack_pubrec;
		response = mqtt_tx_pubrel;
   251f8:	4e22      	ldr	r6, [pc, #136]	; (25284 <mqtt_rx_pub_msgs+0xa4>)
		unpack = mqtt_unpack_pubrec;
   251fa:	4f23      	ldr	r7, [pc, #140]	; (25288 <mqtt_rx_pub_msgs+0xa8>)
		break;
   251fc:	e004      	b.n	25208 <mqtt_rx_pub_msgs+0x28>
	case MQTT_PUBREL:
		unpack = mqtt_unpack_pubrel;
		response = mqtt_tx_pubcomp;
   251fe:	4e23      	ldr	r6, [pc, #140]	; (2528c <mqtt_rx_pub_msgs+0xac>)
		unpack = mqtt_unpack_pubrel;
   25200:	4f23      	ldr	r7, [pc, #140]	; (25290 <mqtt_rx_pub_msgs+0xb0>)
		break;
   25202:	e001      	b.n	25208 <mqtt_rx_pub_msgs+0x28>
	int (*response)(struct mqtt_ctx *, u16_t) = NULL;
   25204:	2600      	movs	r6, #0
		unpack = mqtt_unpack_pubcomp;
   25206:	4f23      	ldr	r7, [pc, #140]	; (25294 <mqtt_rx_pub_msgs+0xb4>)
   25208:	4614      	mov	r4, r2
   2520a:	460b      	mov	r3, r1
   2520c:	4605      	mov	r5, r0

	data = rx->data;
	len = rx->len;

	/* 4 bytes message */
	rc = unpack(data, len, &pkt_id);
   2520e:	f10d 0206 	add.w	r2, sp, #6
   25212:	8989      	ldrh	r1, [r1, #12]
   25214:	6898      	ldr	r0, [r3, #8]
   25216:	47b8      	blx	r7
	if (rc != 0) {
   25218:	bb58      	cbnz	r0, 25272 <mqtt_rx_pub_msgs+0x92>
	}

	/* Only MQTT_APP_SUBSCRIBER, MQTT_APP_PUBLISHER_SUBSCRIBER and
	 * MQTT_APP_SERVER apps must receive the MQTT_PUBREL msg.
	 */
	if (type == MQTT_PUBREL) {
   2521a:	2c06      	cmp	r4, #6
   2521c:	d012      	beq.n	25244 <mqtt_rx_pub_msgs+0x64>
			rc = ctx->publish_rx(ctx, NULL, pkt_id, MQTT_PUBREL);
		} else {
			rc = -EINVAL;
		}
	} else {
		rc = ctx->publish_tx(ctx, pkt_id, type);
   2521e:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
   25222:	4622      	mov	r2, r4
   25224:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   25228:	4628      	mov	r0, r5
   2522a:	4798      	blx	r3
   2522c:	4603      	mov	r3, r0
	}

	if (rc != 0) {
   2522e:	bb1b      	cbnz	r3, 25278 <mqtt_rx_pub_msgs+0x98>
		return -EINVAL;
	}

	if (!response)  {
   25230:	b12e      	cbz	r6, 2523e <mqtt_rx_pub_msgs+0x5e>
		return 0;
	}

	rc = response(ctx, pkt_id);
   25232:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   25236:	4628      	mov	r0, r5
   25238:	47b0      	blx	r6
	if (rc != 0) {
   2523a:	4603      	mov	r3, r0
   2523c:	b998      	cbnz	r0, 25266 <mqtt_rx_pub_msgs+0x86>
		return -EINVAL;
	}

	return 0;
}
   2523e:	4618      	mov	r0, r3
   25240:	b003      	add	sp, #12
   25242:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (ctx->app_type != MQTT_APP_PUBLISHER) {
   25244:	f895 30a8 	ldrb.w	r3, [r5, #168]	; 0xa8
   25248:	2b01      	cmp	r3, #1
   2524a:	d009      	beq.n	25260 <mqtt_rx_pub_msgs+0x80>
			rc = ctx->publish_rx(ctx, NULL, pkt_id, MQTT_PUBREL);
   2524c:	f8d5 4094 	ldr.w	r4, [r5, #148]	; 0x94
   25250:	2306      	movs	r3, #6
   25252:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   25256:	2100      	movs	r1, #0
   25258:	4628      	mov	r0, r5
   2525a:	47a0      	blx	r4
   2525c:	4603      	mov	r3, r0
   2525e:	e7e6      	b.n	2522e <mqtt_rx_pub_msgs+0x4e>
			rc = -EINVAL;
   25260:	f06f 0315 	mvn.w	r3, #21
   25264:	e7e3      	b.n	2522e <mqtt_rx_pub_msgs+0x4e>
		return -EINVAL;
   25266:	f06f 0315 	mvn.w	r3, #21
   2526a:	e7e8      	b.n	2523e <mqtt_rx_pub_msgs+0x5e>
		return -EINVAL;
   2526c:	f06f 0315 	mvn.w	r3, #21
   25270:	e7e5      	b.n	2523e <mqtt_rx_pub_msgs+0x5e>
		return -EINVAL;
   25272:	f06f 0315 	mvn.w	r3, #21
   25276:	e7e2      	b.n	2523e <mqtt_rx_pub_msgs+0x5e>
		return -EINVAL;
   25278:	f06f 0315 	mvn.w	r3, #21
   2527c:	e7df      	b.n	2523e <mqtt_rx_pub_msgs+0x5e>
   2527e:	bf00      	nop
   25280:	00025183 	.word	0x00025183
   25284:	00025377 	.word	0x00025377
   25288:	00025197 	.word	0x00025197
   2528c:	0002536d 	.word	0x0002536d
   25290:	000251ab 	.word	0x000251ab
   25294:	000251bf 	.word	0x000251bf

00025298 <app_connected>:
	return rc;
}

static
void app_connected(struct net_app_ctx *ctx, int status, void *data)
{
   25298:	4770      	bx	lr

0002529a <app_recv>:
	struct mqtt_ctx *mqtt = (struct mqtt_ctx *)data;

	/* net_app_ctx is already referenced to by the mqtt_ctx struct */
	ARG_UNUSED(ctx);

	if (status || !pkt) {
   2529a:	b96a      	cbnz	r2, 252b8 <app_recv+0x1e>
   2529c:	b161      	cbz	r1, 252b8 <app_recv+0x1e>
{
   2529e:	b510      	push	{r4, lr}
   252a0:	460c      	mov	r4, r1
	return pkt->appdatalen;
   252a2:	8e0a      	ldrh	r2, [r1, #48]	; 0x30
		return;
	}

	if (net_pkt_appdatalen(pkt) == 0) {
   252a4:	b91a      	cbnz	r2, 252ae <app_recv+0x14>
	}

	mqtt->rcv(mqtt, pkt);

lb_exit:
	net_pkt_unref(pkt);
   252a6:	4620      	mov	r0, r4
   252a8:	f7f7 fc9b 	bl	1cbe2 <net_pkt_unref>
   252ac:	bd10      	pop	{r4, pc}
	mqtt->rcv(mqtt, pkt);
   252ae:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
   252b2:	4618      	mov	r0, r3
   252b4:	4790      	blx	r2
   252b6:	e7f6      	b.n	252a6 <app_recv+0xc>
   252b8:	4770      	bx	lr

000252ba <mqtt_tx_pub_msgs>:
{
   252ba:	b570      	push	{r4, r5, r6, lr}
   252bc:	b084      	sub	sp, #16
   252be:	4604      	mov	r4, r0
	switch (pkt_type) {
   252c0:	3a04      	subs	r2, #4
   252c2:	2a03      	cmp	r2, #3
   252c4:	d849      	bhi.n	2535a <mqtt_tx_pub_msgs+0xa0>
   252c6:	e8df f002 	tbb	[pc, r2]
   252ca:	2c02      	.short	0x2c02
   252cc:	2434      	.short	0x2434
		rc = mqtt_pack_puback(msg, &len, sizeof(msg), id);
   252ce:	460b      	mov	r3, r1
   252d0:	2204      	movs	r2, #4
   252d2:	f10d 010a 	add.w	r1, sp, #10
   252d6:	a803      	add	r0, sp, #12
   252d8:	f7ff fcb7 	bl	24c4a <mqtt_pack_puback>
	if (rc != 0) {
   252dc:	2800      	cmp	r0, #0
   252de:	d13f      	bne.n	25360 <mqtt_tx_pub_msgs+0xa6>
	tx = net_app_get_net_pkt(&ctx->net_app_ctx,
   252e0:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
   252e2:	2100      	movs	r1, #0
   252e4:	4620      	mov	r0, r4
   252e6:	f000 fe09 	bl	25efc <net_app_get_net_pkt>
	if (tx == NULL) {
   252ea:	4605      	mov	r5, r0
   252ec:	2800      	cmp	r0, #0
   252ee:	d03a      	beq.n	25366 <mqtt_tx_pub_msgs+0xac>
	rc = net_pkt_append_all(tx, len, msg, ctx->net_timeout);
   252f0:	f8bd 600a 	ldrh.w	r6, [sp, #10]
	return net_pkt_append(pkt, len, data, timeout) == len;
   252f4:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   252f6:	aa03      	add	r2, sp, #12
   252f8:	4631      	mov	r1, r6
   252fa:	f7f7 fdaa 	bl	1ce52 <net_pkt_append>
	if (rc != true) {
   252fe:	4286      	cmp	r6, r0
   25300:	d01f      	beq.n	25342 <mqtt_tx_pub_msgs+0x88>
		rc = -ENOMEM;
   25302:	f06f 040b 	mvn.w	r4, #11
	net_pkt_unref(tx);
   25306:	4628      	mov	r0, r5
   25308:	f7f7 fc6b 	bl	1cbe2 <net_pkt_unref>
}
   2530c:	4620      	mov	r0, r4
   2530e:	b004      	add	sp, #16
   25310:	bd70      	pop	{r4, r5, r6, pc}
		rc = mqtt_pack_pubcomp(msg, &len, sizeof(msg), id);
   25312:	460b      	mov	r3, r1
   25314:	2204      	movs	r2, #4
   25316:	f10d 010a 	add.w	r1, sp, #10
   2531a:	a803      	add	r0, sp, #12
   2531c:	f7ff fcb6 	bl	24c8c <mqtt_pack_pubcomp>
		break;
   25320:	e7dc      	b.n	252dc <mqtt_tx_pub_msgs+0x22>
		rc = mqtt_pack_pubrec(msg, &len, sizeof(msg), id);
   25322:	460b      	mov	r3, r1
   25324:	2204      	movs	r2, #4
   25326:	f10d 010a 	add.w	r1, sp, #10
   2532a:	a803      	add	r0, sp, #12
   2532c:	f7ff fc98 	bl	24c60 <mqtt_pack_pubrec>
		break;
   25330:	e7d4      	b.n	252dc <mqtt_tx_pub_msgs+0x22>
		rc = mqtt_pack_pubrel(msg, &len, sizeof(msg), id);
   25332:	460b      	mov	r3, r1
   25334:	2204      	movs	r2, #4
   25336:	f10d 010a 	add.w	r1, sp, #10
   2533a:	a803      	add	r0, sp, #12
   2533c:	f7ff fc9b 	bl	24c76 <mqtt_pack_pubrel>
		break;
   25340:	e7cc      	b.n	252dc <mqtt_tx_pub_msgs+0x22>
	rc = net_app_send_pkt(&ctx->net_app_ctx,
   25342:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   25344:	2200      	movs	r2, #0
   25346:	9201      	str	r2, [sp, #4]
   25348:	9300      	str	r3, [sp, #0]
   2534a:	4613      	mov	r3, r2
   2534c:	4629      	mov	r1, r5
   2534e:	4620      	mov	r0, r4
   25350:	f000 fd58 	bl	25e04 <net_app_send_pkt>
	if (rc < 0) {
   25354:	1e04      	subs	r4, r0, #0
   25356:	dad9      	bge.n	2530c <mqtt_tx_pub_msgs+0x52>
   25358:	e7d5      	b.n	25306 <mqtt_tx_pub_msgs+0x4c>
		return -EINVAL;
   2535a:	f06f 0415 	mvn.w	r4, #21
   2535e:	e7d5      	b.n	2530c <mqtt_tx_pub_msgs+0x52>
		return -EINVAL;
   25360:	f06f 0415 	mvn.w	r4, #21
   25364:	e7d2      	b.n	2530c <mqtt_tx_pub_msgs+0x52>
		return -ENOMEM;
   25366:	f06f 040b 	mvn.w	r4, #11
   2536a:	e7cf      	b.n	2530c <mqtt_tx_pub_msgs+0x52>

0002536c <mqtt_tx_pubcomp>:
{
   2536c:	b508      	push	{r3, lr}
	return mqtt_tx_pub_msgs(ctx, id, MQTT_PUBCOMP);
   2536e:	2207      	movs	r2, #7
   25370:	f7ff ffa3 	bl	252ba <mqtt_tx_pub_msgs>
}
   25374:	bd08      	pop	{r3, pc}

00025376 <mqtt_tx_pubrel>:
{
   25376:	b508      	push	{r3, lr}
	return mqtt_tx_pub_msgs(ctx, id, MQTT_PUBREL);
   25378:	2206      	movs	r2, #6
   2537a:	f7ff ff9e 	bl	252ba <mqtt_tx_pub_msgs>
}
   2537e:	bd08      	pop	{r3, pc}

00025380 <mqtt_linearize_packet>:
{
   25380:	b570      	push	{r4, r5, r6, lr}
	return pkt->appdatalen;
   25382:	8e0d      	ldrh	r5, [r1, #48]	; 0x30
	if (data_len < min_size || data_len > CONFIG_MQTT_MSG_MAX_SIZE) {
   25384:	42aa      	cmp	r2, r5
   25386:	d820      	bhi.n	253ca <mqtt_linearize_packet+0x4a>
   25388:	2d80      	cmp	r5, #128	; 0x80
   2538a:	d820      	bhi.n	253ce <mqtt_linearize_packet+0x4e>
   2538c:	460c      	mov	r4, r1
	data = net_buf_alloc(&mqtt_msg_pool, ctx->net_timeout);
   2538e:	6fc1      	ldr	r1, [r0, #124]	; 0x7c
   25390:	4810      	ldr	r0, [pc, #64]	; (253d4 <mqtt_linearize_packet+0x54>)
   25392:	f7f4 fe49 	bl	1a028 <net_buf_alloc>
	if (data == NULL) {
   25396:	4606      	mov	r6, r0
   25398:	b180      	cbz	r0, 253bc <mqtt_linearize_packet+0x3c>
	return net_buf_frags_len(pkt->frags);
   2539a:	68a1      	ldr	r1, [r4, #8]
   2539c:	460c      	mov	r4, r1
	size_t bytes = 0;
   2539e:	2200      	movs	r2, #0
   253a0:	e002      	b.n	253a8 <mqtt_linearize_packet+0x28>
		bytes += buf->len;
   253a2:	89a3      	ldrh	r3, [r4, #12]
   253a4:	441a      	add	r2, r3
		buf = buf->frags;
   253a6:	6824      	ldr	r4, [r4, #0]
	while (buf) {
   253a8:	2c00      	cmp	r4, #0
   253aa:	d1fa      	bne.n	253a2 <mqtt_linearize_packet+0x22>
	offset = net_pkt_get_len(rx) - data_len;
   253ac:	b292      	uxth	r2, r2
   253ae:	1b52      	subs	r2, r2, r5
	rc = net_frag_linear_copy(data, rx->frags, offset, data_len);
   253b0:	462b      	mov	r3, r5
   253b2:	b292      	uxth	r2, r2
   253b4:	4630      	mov	r0, r6
   253b6:	f7f7 fcc7 	bl	1cd48 <net_frag_linear_copy>
	if (rc != 0) {
   253ba:	b908      	cbnz	r0, 253c0 <mqtt_linearize_packet+0x40>
}
   253bc:	4630      	mov	r0, r6
   253be:	bd70      	pop	{r4, r5, r6, pc}
	net_pkt_frag_unref(data);
   253c0:	4630      	mov	r0, r6
   253c2:	f7f7 fc08 	bl	1cbd6 <net_pkt_frag_unref>
	return NULL;
   253c6:	4626      	mov	r6, r4
   253c8:	e7f8      	b.n	253bc <mqtt_linearize_packet+0x3c>
		return NULL;
   253ca:	2600      	movs	r6, #0
   253cc:	e7f6      	b.n	253bc <mqtt_linearize_packet+0x3c>
   253ce:	2600      	movs	r6, #0
   253d0:	e7f4      	b.n	253bc <mqtt_linearize_packet+0x3c>
   253d2:	bf00      	nop
   253d4:	2000d0e4 	.word	0x2000d0e4

000253d8 <mqtt_tx_connect>:
{
   253d8:	b570      	push	{r4, r5, r6, lr}
   253da:	b082      	sub	sp, #8
   253dc:	4604      	mov	r4, r0
   253de:	460e      	mov	r6, r1
	data = net_buf_alloc(&mqtt_msg_pool, ctx->net_timeout);
   253e0:	6fc1      	ldr	r1, [r0, #124]	; 0x7c
   253e2:	481d      	ldr	r0, [pc, #116]	; (25458 <mqtt_tx_connect+0x80>)
   253e4:	f7f4 fe20 	bl	1a028 <net_buf_alloc>
	if (data == NULL) {
   253e8:	b398      	cbz	r0, 25452 <mqtt_tx_connect+0x7a>
   253ea:	4605      	mov	r5, r0
	ctx->clean_session = msg->clean_session ? 1 : 0;
   253ec:	7832      	ldrb	r2, [r6, #0]
   253ee:	f894 30a9 	ldrb.w	r3, [r4, #169]	; 0xa9
   253f2:	f362 0300 	bfi	r3, r2, #0, #1
   253f6:	f884 30a9 	strb.w	r3, [r4, #169]	; 0xa9
	rc = mqtt_pack_connect(data->data, &data->len, MSG_SIZE, msg);
   253fa:	4633      	mov	r3, r6
   253fc:	2280      	movs	r2, #128	; 0x80
   253fe:	f100 010c 	add.w	r1, r0, #12
   25402:	6880      	ldr	r0, [r0, #8]
   25404:	f7ff fc4d 	bl	24ca2 <mqtt_pack_connect>
	if (rc != 0) {
   25408:	b9c0      	cbnz	r0, 2543c <mqtt_tx_connect+0x64>
	tx = net_app_get_net_pkt(&ctx->net_app_ctx,
   2540a:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
   2540c:	2100      	movs	r1, #0
   2540e:	4620      	mov	r0, r4
   25410:	f000 fd74 	bl	25efc <net_app_get_net_pkt>
	if (tx == NULL) {
   25414:	4606      	mov	r6, r0
   25416:	b1c8      	cbz	r0, 2544c <mqtt_tx_connect+0x74>
	net_pkt_frag_add(tx, data);
   25418:	4629      	mov	r1, r5
   2541a:	f7f7 fc0c 	bl	1cc36 <net_pkt_frag_add>
	rc = net_app_send_pkt(&ctx->net_app_ctx,
   2541e:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   25420:	2200      	movs	r2, #0
   25422:	9201      	str	r2, [sp, #4]
   25424:	9300      	str	r3, [sp, #0]
   25426:	4613      	mov	r3, r2
   25428:	4631      	mov	r1, r6
   2542a:	4620      	mov	r0, r4
   2542c:	f000 fcea 	bl	25e04 <net_app_send_pkt>
	if (rc < 0) {
   25430:	1e04      	subs	r4, r0, #0
   25432:	da08      	bge.n	25446 <mqtt_tx_connect+0x6e>
		net_pkt_unref(tx);
   25434:	4630      	mov	r0, r6
   25436:	f7f7 fbd4 	bl	1cbe2 <net_pkt_unref>
   2543a:	e004      	b.n	25446 <mqtt_tx_connect+0x6e>
		rc = -EINVAL;
   2543c:	f06f 0415 	mvn.w	r4, #21
	net_pkt_frag_unref(data);
   25440:	4628      	mov	r0, r5
   25442:	f7f7 fbc8 	bl	1cbd6 <net_pkt_frag_unref>
}
   25446:	4620      	mov	r0, r4
   25448:	b002      	add	sp, #8
   2544a:	bd70      	pop	{r4, r5, r6, pc}
		rc = -ENOMEM;
   2544c:	f06f 040b 	mvn.w	r4, #11
   25450:	e7f6      	b.n	25440 <mqtt_tx_connect+0x68>
		return -ENOMEM;
   25452:	f06f 040b 	mvn.w	r4, #11
   25456:	e7f6      	b.n	25446 <mqtt_tx_connect+0x6e>
   25458:	2000d0e4 	.word	0x2000d0e4

0002545c <mqtt_tx_disconnect>:
{
   2545c:	b570      	push	{r4, r5, r6, lr}
   2545e:	b084      	sub	sp, #16
   25460:	4604      	mov	r4, r0
	rc = mqtt_pack_disconnect(msg, &len, sizeof(msg));
   25462:	2202      	movs	r2, #2
   25464:	f10d 010a 	add.w	r1, sp, #10
   25468:	a803      	add	r0, sp, #12
   2546a:	f7ff fe80 	bl	2516e <mqtt_pack_disconnect>
	if (rc != 0) {
   2546e:	bb78      	cbnz	r0, 254d0 <mqtt_tx_disconnect+0x74>
	tx = net_app_get_net_pkt(&ctx->net_app_ctx,
   25470:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
   25472:	2100      	movs	r1, #0
   25474:	4620      	mov	r0, r4
   25476:	f000 fd41 	bl	25efc <net_app_get_net_pkt>
	if (tx == NULL) {
   2547a:	4605      	mov	r5, r0
   2547c:	b358      	cbz	r0, 254d6 <mqtt_tx_disconnect+0x7a>
	rc = net_pkt_append_all(tx, len, msg, ctx->net_timeout);
   2547e:	f8bd 600a 	ldrh.w	r6, [sp, #10]
	return net_pkt_append(pkt, len, data, timeout) == len;
   25482:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   25484:	aa03      	add	r2, sp, #12
   25486:	4631      	mov	r1, r6
   25488:	f7f7 fce3 	bl	1ce52 <net_pkt_append>
	if (rc != true) {
   2548c:	4286      	cmp	r6, r0
   2548e:	d007      	beq.n	254a0 <mqtt_tx_disconnect+0x44>
		rc = -ENOMEM;
   25490:	f06f 060b 	mvn.w	r6, #11
	net_pkt_unref(tx);
   25494:	4628      	mov	r0, r5
   25496:	f7f7 fba4 	bl	1cbe2 <net_pkt_unref>
}
   2549a:	4630      	mov	r0, r6
   2549c:	b004      	add	sp, #16
   2549e:	bd70      	pop	{r4, r5, r6, pc}
	rc = net_app_send_pkt(&ctx->net_app_ctx,
   254a0:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   254a2:	2200      	movs	r2, #0
   254a4:	9201      	str	r2, [sp, #4]
   254a6:	9300      	str	r3, [sp, #0]
   254a8:	4613      	mov	r3, r2
   254aa:	4629      	mov	r1, r5
   254ac:	4620      	mov	r0, r4
   254ae:	f000 fca9 	bl	25e04 <net_app_send_pkt>
	if (rc < 0) {
   254b2:	1e06      	subs	r6, r0, #0
   254b4:	dbee      	blt.n	25494 <mqtt_tx_disconnect+0x38>
	ctx->connected = 0;
   254b6:	f894 30a9 	ldrb.w	r3, [r4, #169]	; 0xa9
   254ba:	f36f 0341 	bfc	r3, #1, #1
   254be:	f884 30a9 	strb.w	r3, [r4, #169]	; 0xa9
	if (ctx->disconnect) {
   254c2:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   254c6:	2b00      	cmp	r3, #0
   254c8:	d0e7      	beq.n	2549a <mqtt_tx_disconnect+0x3e>
		ctx->disconnect(ctx);
   254ca:	4620      	mov	r0, r4
   254cc:	4798      	blx	r3
   254ce:	e7e4      	b.n	2549a <mqtt_tx_disconnect+0x3e>
		return -EINVAL;
   254d0:	f06f 0615 	mvn.w	r6, #21
   254d4:	e7e1      	b.n	2549a <mqtt_tx_disconnect+0x3e>
		return -ENOMEM;
   254d6:	f06f 060b 	mvn.w	r6, #11
   254da:	e7de      	b.n	2549a <mqtt_tx_disconnect+0x3e>

000254dc <mqtt_tx_puback>:
{
   254dc:	b508      	push	{r3, lr}
	return mqtt_tx_pub_msgs(ctx, id, MQTT_PUBACK);
   254de:	2204      	movs	r2, #4
   254e0:	f7ff feeb 	bl	252ba <mqtt_tx_pub_msgs>
}
   254e4:	bd08      	pop	{r3, pc}

000254e6 <mqtt_tx_pubrec>:
{
   254e6:	b508      	push	{r3, lr}
	return mqtt_tx_pub_msgs(ctx, id, MQTT_PUBREC);
   254e8:	2205      	movs	r2, #5
   254ea:	f7ff fee6 	bl	252ba <mqtt_tx_pub_msgs>
}
   254ee:	bd08      	pop	{r3, pc}

000254f0 <mqtt_tx_publish>:
{
   254f0:	b570      	push	{r4, r5, r6, lr}
   254f2:	b082      	sub	sp, #8
   254f4:	4605      	mov	r5, r0
   254f6:	460e      	mov	r6, r1
	data = net_buf_alloc(&mqtt_msg_pool, ctx->net_timeout);
   254f8:	6fc1      	ldr	r1, [r0, #124]	; 0x7c
   254fa:	481a      	ldr	r0, [pc, #104]	; (25564 <mqtt_tx_publish+0x74>)
   254fc:	f7f4 fd94 	bl	1a028 <net_buf_alloc>
	if (data == NULL) {
   25500:	b360      	cbz	r0, 2555c <mqtt_tx_publish+0x6c>
   25502:	4604      	mov	r4, r0
	rc = mqtt_pack_publish(data->data, &data->len, data->size, msg);
   25504:	4633      	mov	r3, r6
   25506:	89c2      	ldrh	r2, [r0, #14]
   25508:	f100 010c 	add.w	r1, r0, #12
   2550c:	6880      	ldr	r0, [r0, #8]
   2550e:	f7ff fd47 	bl	24fa0 <mqtt_pack_publish>
	if (rc != 0) {
   25512:	b9c0      	cbnz	r0, 25546 <mqtt_tx_publish+0x56>
	tx = net_app_get_net_pkt(&ctx->net_app_ctx,
   25514:	6fea      	ldr	r2, [r5, #124]	; 0x7c
   25516:	2100      	movs	r1, #0
   25518:	4628      	mov	r0, r5
   2551a:	f000 fcef 	bl	25efc <net_app_get_net_pkt>
	if (tx == NULL) {
   2551e:	4606      	mov	r6, r0
   25520:	b1c8      	cbz	r0, 25556 <mqtt_tx_publish+0x66>
	net_pkt_frag_add(tx, data);
   25522:	4621      	mov	r1, r4
   25524:	f7f7 fb87 	bl	1cc36 <net_pkt_frag_add>
	rc = net_app_send_pkt(&ctx->net_app_ctx,
   25528:	6feb      	ldr	r3, [r5, #124]	; 0x7c
   2552a:	2200      	movs	r2, #0
   2552c:	9201      	str	r2, [sp, #4]
   2552e:	9300      	str	r3, [sp, #0]
   25530:	4613      	mov	r3, r2
   25532:	4631      	mov	r1, r6
   25534:	4628      	mov	r0, r5
   25536:	f000 fc65 	bl	25e04 <net_app_send_pkt>
	if (rc < 0) {
   2553a:	1e05      	subs	r5, r0, #0
   2553c:	da08      	bge.n	25550 <mqtt_tx_publish+0x60>
		net_pkt_unref(tx);
   2553e:	4630      	mov	r0, r6
   25540:	f7f7 fb4f 	bl	1cbe2 <net_pkt_unref>
   25544:	e004      	b.n	25550 <mqtt_tx_publish+0x60>
		rc = -EINVAL;
   25546:	f06f 0515 	mvn.w	r5, #21
	net_pkt_frag_unref(data);
   2554a:	4620      	mov	r0, r4
   2554c:	f7f7 fb43 	bl	1cbd6 <net_pkt_frag_unref>
}
   25550:	4628      	mov	r0, r5
   25552:	b002      	add	sp, #8
   25554:	bd70      	pop	{r4, r5, r6, pc}
		rc = -ENOMEM;
   25556:	f06f 050b 	mvn.w	r5, #11
   2555a:	e7f6      	b.n	2554a <mqtt_tx_publish+0x5a>
		return -ENOMEM;
   2555c:	f06f 050b 	mvn.w	r5, #11
   25560:	e7f6      	b.n	25550 <mqtt_tx_publish+0x60>
   25562:	bf00      	nop
   25564:	2000d0e4 	.word	0x2000d0e4

00025568 <mqtt_rx_connack>:
{
   25568:	b570      	push	{r4, r5, r6, lr}
   2556a:	b082      	sub	sp, #8
   2556c:	4604      	mov	r4, r0
   2556e:	4608      	mov	r0, r1
   25570:	4616      	mov	r6, r2
	rc = mqtt_unpack_connack(data, len, &session, &connect_rc);
   25572:	f10d 0307 	add.w	r3, sp, #7
   25576:	f10d 0206 	add.w	r2, sp, #6
   2557a:	8989      	ldrh	r1, [r1, #12]
   2557c:	6880      	ldr	r0, [r0, #8]
   2557e:	f7ff fdda 	bl	25136 <mqtt_unpack_connack>
	if (rc != 0) {
   25582:	b998      	cbnz	r0, 255ac <mqtt_rx_connack+0x44>
   25584:	4605      	mov	r5, r0
	switch (clean_session) {
   25586:	2e01      	cmp	r6, #1
   25588:	d113      	bne.n	255b2 <mqtt_rx_connack+0x4a>
		if (/*session == 0 && */connect_rc == 0) {
   2558a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2558e:	b99b      	cbnz	r3, 255b8 <mqtt_rx_connack+0x50>
	ctx->connected = 1;
   25590:	f894 30a9 	ldrb.w	r3, [r4, #169]	; 0xa9
   25594:	f043 0302 	orr.w	r3, r3, #2
   25598:	f884 30a9 	strb.w	r3, [r4, #169]	; 0xa9
	if (ctx->connect) {
   2559c:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   255a0:	b10b      	cbz	r3, 255a6 <mqtt_rx_connack+0x3e>
		ctx->connect(ctx);
   255a2:	4620      	mov	r0, r4
   255a4:	4798      	blx	r3
}
   255a6:	4628      	mov	r0, r5
   255a8:	b002      	add	sp, #8
   255aa:	bd70      	pop	{r4, r5, r6, pc}
		rc = -EINVAL;
   255ac:	f06f 0515 	mvn.w	r5, #21
   255b0:	e7f9      	b.n	255a6 <mqtt_rx_connack+0x3e>
		rc = -EINVAL;
   255b2:	f06f 0515 	mvn.w	r5, #21
   255b6:	e7f6      	b.n	255a6 <mqtt_rx_connack+0x3e>
			rc = -EINVAL;
   255b8:	f06f 0515 	mvn.w	r5, #21
	return rc;
   255bc:	e7f3      	b.n	255a6 <mqtt_rx_connack+0x3e>

000255be <mqtt_rx_puback>:
{
   255be:	b508      	push	{r3, lr}
	return mqtt_rx_pub_msgs(ctx, rx, MQTT_PUBACK);
   255c0:	2204      	movs	r2, #4
   255c2:	f7ff fe0d 	bl	251e0 <mqtt_rx_pub_msgs>
}
   255c6:	bd08      	pop	{r3, pc}

000255c8 <mqtt_rx_pubcomp>:
{
   255c8:	b508      	push	{r3, lr}
	return mqtt_rx_pub_msgs(ctx, rx, MQTT_PUBCOMP);
   255ca:	2207      	movs	r2, #7
   255cc:	f7ff fe08 	bl	251e0 <mqtt_rx_pub_msgs>
}
   255d0:	bd08      	pop	{r3, pc}

000255d2 <mqtt_rx_pubrec>:
{
   255d2:	b508      	push	{r3, lr}
	return mqtt_rx_pub_msgs(ctx, rx, MQTT_PUBREC);
   255d4:	2205      	movs	r2, #5
   255d6:	f7ff fe03 	bl	251e0 <mqtt_rx_pub_msgs>
}
   255da:	bd08      	pop	{r3, pc}

000255dc <mqtt_rx_pubrel>:
{
   255dc:	b508      	push	{r3, lr}
	return mqtt_rx_pub_msgs(ctx, rx, MQTT_PUBREL);
   255de:	2206      	movs	r2, #6
   255e0:	f7ff fdfe 	bl	251e0 <mqtt_rx_pub_msgs>
}
   255e4:	bd08      	pop	{r3, pc}

000255e6 <mqtt_rx_pingresp>:
{
   255e6:	b508      	push	{r3, lr}
   255e8:	460b      	mov	r3, r1
	rc = mqtt_unpack_pingresp(rx->data, rx->len);
   255ea:	8989      	ldrh	r1, [r1, #12]
   255ec:	6898      	ldr	r0, [r3, #8]
   255ee:	f7ff fdf0 	bl	251d2 <mqtt_unpack_pingresp>
	if (rc != 0) {
   255f2:	4603      	mov	r3, r0
   255f4:	b908      	cbnz	r0, 255fa <mqtt_rx_pingresp+0x14>
}
   255f6:	4618      	mov	r0, r3
   255f8:	bd08      	pop	{r3, pc}
		return -EINVAL;
   255fa:	f06f 0315 	mvn.w	r3, #21
   255fe:	e7fa      	b.n	255f6 <mqtt_rx_pingresp+0x10>

00025600 <mqtt_rx_suback>:
{
   25600:	b530      	push	{r4, r5, lr}
   25602:	b085      	sub	sp, #20
   25604:	4604      	mov	r4, r0
	data = rx->data;
   25606:	6888      	ldr	r0, [r1, #8]
	len = rx->len;
   25608:	8989      	ldrh	r1, [r1, #12]
	rc = mqtt_unpack_suback(data, len, &pkt_id, &items,
   2560a:	ab03      	add	r3, sp, #12
   2560c:	9301      	str	r3, [sp, #4]
   2560e:	2301      	movs	r3, #1
   25610:	9300      	str	r3, [sp, #0]
   25612:	f10d 0309 	add.w	r3, sp, #9
   25616:	f10d 020a 	add.w	r2, sp, #10
   2561a:	f7ff fc31 	bl	24e80 <mqtt_unpack_suback>
	if (rc != 0) {
   2561e:	b988      	cbnz	r0, 25644 <mqtt_rx_suback+0x44>
	if (!ctx->subscribe) {
   25620:	f8d4 5098 	ldr.w	r5, [r4, #152]	; 0x98
   25624:	b18d      	cbz	r5, 2564a <mqtt_rx_suback+0x4a>
	rc = ctx->subscribe(ctx, pkt_id, items, suback_qos);
   25626:	ab03      	add	r3, sp, #12
   25628:	f89d 2009 	ldrb.w	r2, [sp, #9]
   2562c:	f8bd 100a 	ldrh.w	r1, [sp, #10]
   25630:	4620      	mov	r0, r4
   25632:	47a8      	blx	r5
	if (rc != 0) {
   25634:	4603      	mov	r3, r0
   25636:	b910      	cbnz	r0, 2563e <mqtt_rx_suback+0x3e>
}
   25638:	4618      	mov	r0, r3
   2563a:	b005      	add	sp, #20
   2563c:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   2563e:	f06f 0315 	mvn.w	r3, #21
   25642:	e7f9      	b.n	25638 <mqtt_rx_suback+0x38>
		return -EINVAL;
   25644:	f06f 0315 	mvn.w	r3, #21
   25648:	e7f6      	b.n	25638 <mqtt_rx_suback+0x38>
		return -EINVAL;
   2564a:	f06f 0315 	mvn.w	r3, #21
   2564e:	e7f3      	b.n	25638 <mqtt_rx_suback+0x38>

00025650 <mqtt_rx_publish>:
{
   25650:	b530      	push	{r4, r5, lr}
   25652:	b087      	sub	sp, #28
   25654:	4604      	mov	r4, r0
   25656:	460b      	mov	r3, r1
	rc = mqtt_unpack_publish(rx->data, rx->len, &msg);
   25658:	466a      	mov	r2, sp
   2565a:	8989      	ldrh	r1, [r1, #12]
   2565c:	6898      	ldr	r0, [r3, #8]
   2565e:	f7ff fd0f 	bl	25080 <mqtt_unpack_publish>
	if (rc != 0) {
   25662:	bb00      	cbnz	r0, 256a6 <mqtt_rx_publish+0x56>
	rc = ctx->publish_rx(ctx, &msg, msg.pkt_id, MQTT_PUBLISH);
   25664:	f8d4 5094 	ldr.w	r5, [r4, #148]	; 0x94
   25668:	2303      	movs	r3, #3
   2566a:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   2566e:	4669      	mov	r1, sp
   25670:	4620      	mov	r0, r4
   25672:	47a8      	blx	r5
	if (rc != 0) {
   25674:	4602      	mov	r2, r0
   25676:	b9c8      	cbnz	r0, 256ac <mqtt_rx_publish+0x5c>
	switch (msg.qos) {
   25678:	f89d 3001 	ldrb.w	r3, [sp, #1]
   2567c:	2b01      	cmp	r3, #1
   2567e:	d00b      	beq.n	25698 <mqtt_rx_publish+0x48>
   25680:	b13b      	cbz	r3, 25692 <mqtt_rx_publish+0x42>
   25682:	2b02      	cmp	r3, #2
   25684:	d115      	bne.n	256b2 <mqtt_rx_publish+0x62>
		rc = mqtt_tx_pubrec(ctx, msg.pkt_id);
   25686:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   2568a:	4620      	mov	r0, r4
   2568c:	f7ff ff2b 	bl	254e6 <mqtt_tx_pubrec>
   25690:	4602      	mov	r2, r0
}
   25692:	4610      	mov	r0, r2
   25694:	b007      	add	sp, #28
   25696:	bd30      	pop	{r4, r5, pc}
		rc = mqtt_tx_puback(ctx, msg.pkt_id);
   25698:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   2569c:	4620      	mov	r0, r4
   2569e:	f7ff ff1d 	bl	254dc <mqtt_tx_puback>
   256a2:	4602      	mov	r2, r0
		break;
   256a4:	e7f5      	b.n	25692 <mqtt_rx_publish+0x42>
		return -EINVAL;
   256a6:	f06f 0215 	mvn.w	r2, #21
   256aa:	e7f2      	b.n	25692 <mqtt_rx_publish+0x42>
		return -EINVAL;
   256ac:	f06f 0215 	mvn.w	r2, #21
   256b0:	e7ef      	b.n	25692 <mqtt_rx_publish+0x42>
		rc = -EINVAL;
   256b2:	f06f 0215 	mvn.w	r2, #21
   256b6:	e7ec      	b.n	25692 <mqtt_rx_publish+0x42>

000256b8 <mqtt_parser>:
{
   256b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   256ba:	4606      	mov	r6, r0
	data = mqtt_linearize_packet(ctx, rx, MQTT_PUBLISHER_MIN_MSG_SIZE);
   256bc:	2202      	movs	r2, #2
   256be:	f7ff fe5f 	bl	25380 <mqtt_linearize_packet>
	if (!data) {
   256c2:	2800      	cmp	r0, #0
   256c4:	d057      	beq.n	25776 <mqtt_parser+0xbe>
   256c6:	4604      	mov	r4, r0
	pkt_type = MQTT_PACKET_TYPE(data->data[0]);
   256c8:	6883      	ldr	r3, [r0, #8]
   256ca:	781b      	ldrb	r3, [r3, #0]
   256cc:	091b      	lsrs	r3, r3, #4
   256ce:	b29f      	uxth	r7, r3
	switch (pkt_type) {
   256d0:	3b02      	subs	r3, #2
   256d2:	2b0b      	cmp	r3, #11
   256d4:	d84c      	bhi.n	25770 <mqtt_parser+0xb8>
   256d6:	e8df f003 	tbb	[pc, r3]
   256da:	3906      	.short	0x3906
   256dc:	2d3f2716 	.word	0x2d3f2716
   256e0:	4b4b454b 	.word	0x4b4b454b
   256e4:	334b      	.short	0x334b
		if (!ctx->connected) {
   256e6:	f896 30a9 	ldrb.w	r3, [r6, #169]	; 0xa9
   256ea:	f013 0f02 	tst.w	r3, #2
   256ee:	d002      	beq.n	256f6 <mqtt_parser+0x3e>
			rc = -EINVAL;
   256f0:	f06f 0515 	mvn.w	r5, #21
   256f4:	e00c      	b.n	25710 <mqtt_parser+0x58>
			rc = mqtt_rx_connack(ctx, data, ctx->clean_session);
   256f6:	f003 0201 	and.w	r2, r3, #1
   256fa:	4601      	mov	r1, r0
   256fc:	4630      	mov	r0, r6
   256fe:	f7ff ff33 	bl	25568 <mqtt_rx_connack>
   25702:	4605      	mov	r5, r0
   25704:	e004      	b.n	25710 <mqtt_parser+0x58>
		rc = mqtt_rx_puback(ctx, data);
   25706:	4601      	mov	r1, r0
   25708:	4630      	mov	r0, r6
   2570a:	f7ff ff58 	bl	255be <mqtt_rx_puback>
   2570e:	4605      	mov	r5, r0
	if (rc != 0 && ctx->malformed) {
   25710:	b12d      	cbz	r5, 2571e <mqtt_parser+0x66>
   25712:	f8d6 30a0 	ldr.w	r3, [r6, #160]	; 0xa0
   25716:	b113      	cbz	r3, 2571e <mqtt_parser+0x66>
		ctx->malformed(ctx, pkt_type);
   25718:	4639      	mov	r1, r7
   2571a:	4630      	mov	r0, r6
   2571c:	4798      	blx	r3
	net_pkt_frag_unref(data);
   2571e:	4620      	mov	r0, r4
   25720:	f7f7 fa59 	bl	1cbd6 <net_pkt_frag_unref>
}
   25724:	4628      	mov	r0, r5
   25726:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rc = mqtt_rx_pubrec(ctx, data);
   25728:	4601      	mov	r1, r0
   2572a:	4630      	mov	r0, r6
   2572c:	f7ff ff51 	bl	255d2 <mqtt_rx_pubrec>
   25730:	4605      	mov	r5, r0
		break;
   25732:	e7ed      	b.n	25710 <mqtt_parser+0x58>
		rc = mqtt_rx_pubcomp(ctx, data);
   25734:	4601      	mov	r1, r0
   25736:	4630      	mov	r0, r6
   25738:	f7ff ff46 	bl	255c8 <mqtt_rx_pubcomp>
   2573c:	4605      	mov	r5, r0
		break;
   2573e:	e7e7      	b.n	25710 <mqtt_parser+0x58>
		rc = mqtt_rx_pingresp(ctx, data);
   25740:	4601      	mov	r1, r0
   25742:	4630      	mov	r0, r6
   25744:	f7ff ff4f 	bl	255e6 <mqtt_rx_pingresp>
   25748:	4605      	mov	r5, r0
		break;
   2574a:	e7e1      	b.n	25710 <mqtt_parser+0x58>
		rc = mqtt_rx_publish(ctx, data);
   2574c:	4601      	mov	r1, r0
   2574e:	4630      	mov	r0, r6
   25750:	f7ff ff7e 	bl	25650 <mqtt_rx_publish>
   25754:	4605      	mov	r5, r0
		break;
   25756:	e7db      	b.n	25710 <mqtt_parser+0x58>
		rc = mqtt_rx_pubrel(ctx, data);
   25758:	4601      	mov	r1, r0
   2575a:	4630      	mov	r0, r6
   2575c:	f7ff ff3e 	bl	255dc <mqtt_rx_pubrel>
   25760:	4605      	mov	r5, r0
		break;
   25762:	e7d5      	b.n	25710 <mqtt_parser+0x58>
		rc = mqtt_rx_suback(ctx, data);
   25764:	4601      	mov	r1, r0
   25766:	4630      	mov	r0, r6
   25768:	f7ff ff4a 	bl	25600 <mqtt_rx_suback>
   2576c:	4605      	mov	r5, r0
		break;
   2576e:	e7cf      	b.n	25710 <mqtt_parser+0x58>
		rc = -EINVAL;
   25770:	f06f 0515 	mvn.w	r5, #21
   25774:	e7cc      	b.n	25710 <mqtt_parser+0x58>
		return -ENOMEM;
   25776:	f06f 050b 	mvn.w	r5, #11
   2577a:	e7d3      	b.n	25724 <mqtt_parser+0x6c>

0002577c <mqtt_connect>:
}

int mqtt_connect(struct mqtt_ctx *ctx)
{
   2577c:	b530      	push	{r4, r5, lr}
   2577e:	b087      	sub	sp, #28
	int rc = 0;

	if (!ctx) {
   25780:	b348      	cbz	r0, 257d6 <mqtt_connect+0x5a>
   25782:	4604      	mov	r4, r0
	}

	rc = net_app_init_tcp_client(&ctx->net_app_ctx,
			NULL,
			NULL,
			ctx->peer_addr_str,
   25784:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
	rc = net_app_init_tcp_client(&ctx->net_app_ctx,
   25788:	f8b0 2084 	ldrh.w	r2, [r0, #132]	; 0x84
   2578c:	6f81      	ldr	r1, [r0, #120]	; 0x78
					  const char *peer_addr_str,
					  u16_t peer_port,
					  s32_t timeout,
					  void *user_data)
{
	return net_app_init_client(ctx,
   2578e:	9004      	str	r0, [sp, #16]
   25790:	9103      	str	r1, [sp, #12]
   25792:	9202      	str	r2, [sp, #8]
   25794:	9301      	str	r3, [sp, #4]
   25796:	2300      	movs	r3, #0
   25798:	9300      	str	r3, [sp, #0]
   2579a:	2206      	movs	r2, #6
   2579c:	2101      	movs	r1, #1
   2579e:	f000 f913 	bl	259c8 <net_app_init_client>
			ctx->peer_port,
			ctx->net_init_timeout,
			ctx);
	if (rc < 0) {
   257a2:	1e05      	subs	r5, r0, #0
   257a4:	db0e      	blt.n	257c4 <mqtt_connect+0x48>
		goto error_connect;
	}

	rc = net_app_set_cb(&ctx->net_app_ctx,
   257a6:	2300      	movs	r3, #0
   257a8:	9300      	str	r3, [sp, #0]
   257aa:	4a0c      	ldr	r2, [pc, #48]	; (257dc <mqtt_connect+0x60>)
   257ac:	490c      	ldr	r1, [pc, #48]	; (257e0 <mqtt_connect+0x64>)
   257ae:	4620      	mov	r0, r4
   257b0:	f000 fb11 	bl	25dd6 <net_app_set_cb>
			app_connected,
			app_recv,
			NULL,
			NULL);
	if (rc < 0) {
   257b4:	1e05      	subs	r5, r0, #0
   257b6:	db05      	blt.n	257c4 <mqtt_connect+0x48>
	if (rc < 0) {
		goto error_connect;
	}
#endif

	rc = net_app_connect(&ctx->net_app_ctx, ctx->net_timeout);
   257b8:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
   257ba:	4620      	mov	r0, r4
   257bc:	f000 f9ec 	bl	25b98 <net_app_connect>
	if (rc < 0) {
   257c0:	1e05      	subs	r5, r0, #0
   257c2:	da05      	bge.n	257d0 <mqtt_connect+0x54>

	return rc;

error_connect:
	/* clean net app context, so mqtt_connect() can be called repeatedly */
	net_app_close(&ctx->net_app_ctx);
   257c4:	4620      	mov	r0, r4
   257c6:	f000 fbbd 	bl	25f44 <net_app_close>
	net_app_release(&ctx->net_app_ctx);
   257ca:	4620      	mov	r0, r4
   257cc:	f000 fab8 	bl	25d40 <net_app_release>

	return rc;
}
   257d0:	4628      	mov	r0, r5
   257d2:	b007      	add	sp, #28
   257d4:	bd30      	pop	{r4, r5, pc}
		return -EFAULT;
   257d6:	f06f 050d 	mvn.w	r5, #13
   257da:	e7f9      	b.n	257d0 <mqtt_connect+0x54>
   257dc:	0002529b 	.word	0x0002529b
   257e0:	00025299 	.word	0x00025299

000257e4 <mqtt_init>:

int mqtt_init(struct mqtt_ctx *ctx, enum mqtt_app app_type)
{
	/* So far, only clean session = 1 is supported */
	ctx->clean_session = 1;
   257e4:	f890 30a9 	ldrb.w	r3, [r0, #169]	; 0xa9
	ctx->connected = 0;
   257e8:	f043 0301 	orr.w	r3, r3, #1
   257ec:	f36f 0341 	bfc	r3, #1, #1
   257f0:	f880 30a9 	strb.w	r3, [r0, #169]	; 0xa9

	ctx->app_type = app_type;
   257f4:	f880 10a8 	strb.w	r1, [r0, #168]	; 0xa8
	ctx->rcv = mqtt_parser;
   257f8:	4b02      	ldr	r3, [pc, #8]	; (25804 <mqtt_init+0x20>)
   257fa:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4

	k_sem_init(&ctx->tls_hs_wait, 0, 1);
#endif

	return 0;
}
   257fe:	2000      	movs	r0, #0
   25800:	4770      	bx	lr
   25802:	bf00      	nop
   25804:	000256b9 	.word	0x000256b9

00025808 <mqtt_close>:

int mqtt_close(struct mqtt_ctx *ctx)
{
	if (!ctx) {
   25808:	b178      	cbz	r0, 2582a <mqtt_close+0x22>
{
   2580a:	b510      	push	{r4, lr}
   2580c:	4604      	mov	r4, r0
		return -EFAULT;
	}

	if (ctx->net_app_ctx.is_init) {
   2580e:	f890 2077 	ldrb.w	r2, [r0, #119]	; 0x77
   25812:	f012 0f01 	tst.w	r2, #1
   25816:	d101      	bne.n	2581c <mqtt_close+0x14>
		net_app_close(&ctx->net_app_ctx);
		net_app_release(&ctx->net_app_ctx);
	}

	return 0;
   25818:	2000      	movs	r0, #0
}
   2581a:	bd10      	pop	{r4, pc}
		net_app_close(&ctx->net_app_ctx);
   2581c:	f000 fb92 	bl	25f44 <net_app_close>
		net_app_release(&ctx->net_app_ctx);
   25820:	4620      	mov	r0, r4
   25822:	f000 fa8d 	bl	25d40 <net_app_release>
	return 0;
   25826:	2000      	movs	r0, #0
   25828:	bd10      	pop	{r4, pc}
		return -EFAULT;
   2582a:	f06f 000d 	mvn.w	r0, #13
   2582e:	4770      	bx	lr

00025830 <net_app_init>:
#else
#define setup_ipv6(...)
#endif /* CONFIG_NET_IPV6 */

int net_app_init(const char *app_info, u32_t flags, s32_t timeout)
{
   25830:	b570      	push	{r4, r5, r6, lr}
   25832:	460c      	mov	r4, r1
   25834:	4616      	mov	r6, r2
#define LOOP_DIVIDER 10
	struct net_if *iface = net_if_get_default();
   25836:	f7f4 fff5 	bl	1a824 <net_if_get_default>
	int loop = timeout / LOOP_DIVIDER;
   2583a:	4b20      	ldr	r3, [pc, #128]	; (258bc <net_app_init+0x8c>)
   2583c:	fb83 2306 	smull	r2, r3, r3, r6
   25840:	17f5      	asrs	r5, r6, #31
   25842:	ebc5 05a3 	rsb	r5, r5, r3, asr #2

	if (app_info) {
		NET_INFO("%s", app_info);
	}

	if (!iface) {
   25846:	b380      	cbz	r0, 258aa <net_app_init+0x7a>
		NET_ERR("No network interfaces");
		return -ENODEV;
	}

	if (flags & NET_APP_NEED_IPV6) {
   25848:	f014 0f02 	tst.w	r4, #2
   2584c:	d114      	bne.n	25878 <net_app_init+0x48>
	int count = 0;
   2584e:	2100      	movs	r1, #0
		count++;
	}

	if (flags & NET_APP_NEED_IPV4) {
   25850:	f014 0f04 	tst.w	r4, #4
   25854:	d000      	beq.n	25858 <net_app_init+0x28>
		count++;
   25856:	3101      	adds	r1, #1
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
   25858:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2585c:	4818      	ldr	r0, [pc, #96]	; (258c0 <net_app_init+0x90>)
   2585e:	f002 ff93 	bl	28788 <_impl_k_sem_init>

	setup_dhcpv4(iface);

	setup_ipv6(iface, flags);

	if (timeout < 0) {
   25862:	2e00      	cmp	r6, #0
   25864:	db0a      	blt.n	2587c <net_app_init+0x4c>
		count = -1;
	} else if (timeout == 0) {
   25866:	b166      	cbz	r6, 25882 <net_app_init+0x52>
		count = 0;
	} else {
		count = timeout / 1000 + 1;
   25868:	4a16      	ldr	r2, [pc, #88]	; (258c4 <net_app_init+0x94>)
   2586a:	fb82 3206 	smull	r3, r2, r2, r6
   2586e:	17f3      	asrs	r3, r6, #31
   25870:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
   25874:	3301      	adds	r3, #1
   25876:	e007      	b.n	25888 <net_app_init+0x58>
		count++;
   25878:	2101      	movs	r1, #1
   2587a:	e7e9      	b.n	25850 <net_app_init+0x20>
		count = -1;
   2587c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   25880:	e002      	b.n	25888 <net_app_init+0x58>
		count = 0;
   25882:	2300      	movs	r3, #0
   25884:	e000      	b.n	25888 <net_app_init+0x58>
   25886:	4623      	mov	r3, r4
	}

	/* Loop here until until we are ready to continue. As we might need
	 * to wait multiple events, sleep smaller amounts of data.
	 */
	while (count--) {
   25888:	1e5c      	subs	r4, r3, #1
   2588a:	b153      	cbz	r3, 258a2 <net_app_init+0x72>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   2588c:	4629      	mov	r1, r5
   2588e:	480e      	ldr	r0, [pc, #56]	; (258c8 <net_app_init+0x98>)
   25890:	f002 ff96 	bl	287c0 <_impl_k_sem_take>
		if (k_sem_take(&waiter, loop)) {
   25894:	2800      	cmp	r0, #0
   25896:	d0f6      	beq.n	25886 <net_app_init+0x56>
	return sem->count;
   25898:	4b09      	ldr	r3, [pc, #36]	; (258c0 <net_app_init+0x90>)
   2589a:	689a      	ldr	r2, [r3, #8]
   2589c:	4623      	mov	r3, r4
			if (!k_sem_count_get(&counter)) {
   2589e:	2a00      	cmp	r2, #0
   258a0:	d1f2      	bne.n	25888 <net_app_init+0x58>
				break;
			}
		}
	}

	if (!count && timeout) {
   258a2:	b92c      	cbnz	r4, 258b0 <net_app_init+0x80>
   258a4:	b936      	cbnz	r6, 258b4 <net_app_init+0x84>
		NET_ERR("Timeout while waiting setup");
		return -ETIMEDOUT;
	}

	return 0;
   258a6:	2000      	movs	r0, #0
   258a8:	bd70      	pop	{r4, r5, r6, pc}
		return -ENODEV;
   258aa:	f06f 0012 	mvn.w	r0, #18
   258ae:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
   258b0:	2000      	movs	r0, #0
   258b2:	bd70      	pop	{r4, r5, r6, pc}
		return -ETIMEDOUT;
   258b4:	f06f 0073 	mvn.w	r0, #115	; 0x73
}
   258b8:	bd70      	pop	{r4, r5, r6, pc}
   258ba:	bf00      	nop
   258bc:	66666667 	.word	0x66666667
   258c0:	200023ec 	.word	0x200023ec
   258c4:	10624dd3 	.word	0x10624dd3
   258c8:	2000d034 	.word	0x2000d034

000258cc <init_net_app>:

#if defined(CONFIG_NET_APP_AUTO_INIT)
static int init_net_app(struct device *device)
{
   258cc:	b508      	push	{r3, lr}
	ret = _net_app_ieee802154_setup();
	if (ret < 0) {
		NET_ERR("Cannot setup IEEE 802.15.4 interface (%d)", ret);
	}

	ret = _net_app_bt_setup();
   258ce:	f000 fb5b 	bl	25f88 <_net_app_bt_setup>
	if (IS_ENABLED(CONFIG_NET_APP_NEED_IPV4)) {
		flags |= NET_APP_NEED_IPV4;
	}

	/* Initialize the application automatically if needed */
	ret = net_app_init("Initializing network", flags,
   258d2:	f247 5230 	movw	r2, #30000	; 0x7530
   258d6:	2100      	movs	r1, #0
   258d8:	4801      	ldr	r0, [pc, #4]	; (258e0 <init_net_app+0x14>)
   258da:	f7ff ffa9 	bl	25830 <net_app_init>
	if (ret < 0) {
		NET_ERR("Network initialization failed (%d)", ret);
	}

	return ret;
}
   258de:	bd08      	pop	{r3, pc}
   258e0:	00030a44 	.word	0x00030a44

000258e4 <try_resolve>:
		NET_ERR("Cannot resolve %s (%d)", peer_addr_str, ret);
	}

	return ret;
#endif
}
   258e4:	f06f 0015 	mvn.w	r0, #21
   258e8:	4770      	bx	lr

000258ea <set_remote_addr>:
static int set_remote_addr(struct net_app_ctx *ctx,
			   struct sockaddr *remote_addr,
			   const char *peer_addr_str,
			   bool peer_addr_ok,
			   s32_t timeout)
{
   258ea:	b510      	push	{r4, lr}
   258ec:	4604      	mov	r4, r0
   258ee:	4610      	mov	r0, r2
	int ret;

	if (peer_addr_ok && remote_addr->sa_family == AF_INET6) {
   258f0:	461a      	mov	r2, r3
   258f2:	b113      	cbz	r3, 258fa <set_remote_addr+0x10>
   258f4:	880b      	ldrh	r3, [r1, #0]
   258f6:	2b0a      	cmp	r3, #10
   258f8:	d00e      	beq.n	25918 <set_remote_addr+0x2e>
#else
		return -EAFNOSUPPORT;
#endif
	}

	if (peer_addr_ok && remote_addr->sa_family == AF_INET) {
   258fa:	b112      	cbz	r2, 25902 <set_remote_addr+0x18>
   258fc:	880b      	ldrh	r3, [r1, #0]
   258fe:	2b02      	cmp	r3, #2
   25900:	d012      	beq.n	25928 <set_remote_addr+0x3e>
#endif
	}

#if defined(CONFIG_NET_IPV6) && !defined(CONFIG_NET_IPV4)
	/* Could be hostname, try DNS if configured. */
	ret = try_resolve(ctx, peer_addr_str, DNS_QUERY_TYPE_AAAA, timeout);
   25902:	9b02      	ldr	r3, [sp, #8]
   25904:	221c      	movs	r2, #28
   25906:	4601      	mov	r1, r0
   25908:	4620      	mov	r0, r4
   2590a:	f7ff ffeb 	bl	258e4 <try_resolve>
	if (ret < 0) {
   2590e:	2800      	cmp	r0, #0
   25910:	db0c      	blt.n	2592c <set_remote_addr+0x42>
		return ret;
	}

	ctx->default_ctx = &ctx->ipv6;
   25912:	6364      	str	r4, [r4, #52]	; 0x34
	return 0;
   25914:	2000      	movs	r0, #0
   25916:	bd10      	pop	{r4, pc}
		memcpy(&ctx->ipv6.remote, remote_addr,
   25918:	2218      	movs	r2, #24
   2591a:	f104 001c 	add.w	r0, r4, #28
   2591e:	f7da fccf 	bl	2c0 <memcpy>
		ctx->default_ctx = &ctx->ipv6;
   25922:	6364      	str	r4, [r4, #52]	; 0x34
		return 0;
   25924:	2000      	movs	r0, #0
   25926:	bd10      	pop	{r4, pc}
		return -EAFNOSUPPORT;
   25928:	f06f 0069 	mvn.w	r0, #105	; 0x69
	}

	ctx->default_ctx = &ctx->ipv4;
	return 0;
#endif /* IPV4 && IPV6 */
}
   2592c:	bd10      	pop	{r4, pc}

0002592e <close_net_ctx>:
}

static void close_net_ctx(struct net_app_ctx *ctx)
{
#if defined(CONFIG_NET_IPV6)
	if (ctx->ipv6.ctx) {
   2592e:	6803      	ldr	r3, [r0, #0]
   25930:	b13b      	cbz	r3, 25942 <close_net_ctx+0x14>
{
   25932:	b510      	push	{r4, lr}
   25934:	4604      	mov	r4, r0
		net_context_put(ctx->ipv6.ctx);
   25936:	4618      	mov	r0, r3
   25938:	f7f6 fcbe 	bl	1c2b8 <net_context_put>
		ctx->ipv6.ctx = NULL;
   2593c:	2300      	movs	r3, #0
   2593e:	6023      	str	r3, [r4, #0]
   25940:	bd10      	pop	{r4, pc}
   25942:	4770      	bx	lr

00025944 <get_port_number>:
	if (peer_addr_str[0] == '[') {
   25944:	7803      	ldrb	r3, [r0, #0]
   25946:	2b5b      	cmp	r3, #91	; 0x5b
   25948:	d002      	beq.n	25950 <get_port_number+0xc>
   2594a:	2300      	movs	r3, #0
   2594c:	4619      	mov	r1, r3
   2594e:	e019      	b.n	25984 <get_port_number+0x40>
{
   25950:	b570      	push	{r4, r5, r6, lr}
   25952:	460d      	mov	r5, r1
   25954:	4604      	mov	r4, r0
		ptr = strstr(peer_addr_str, "]:");
   25956:	4913      	ldr	r1, [pc, #76]	; (259a4 <get_port_number+0x60>)
   25958:	f005 fc0e 	bl	2b178 <strstr>
		if (!ptr) {
   2595c:	4606      	mov	r6, r0
   2595e:	b1f0      	cbz	r0, 2599e <get_port_number+0x5a>
		end = min(INET6_ADDRSTRLEN, ptr - (peer_addr_str + 1));
   25960:	1c61      	adds	r1, r4, #1
   25962:	1a44      	subs	r4, r0, r1
   25964:	2c2e      	cmp	r4, #46	; 0x2e
   25966:	bfa8      	it	ge
   25968:	242e      	movge	r4, #46	; 0x2e
		memcpy(buf, peer_addr_str + 1, end);
   2596a:	4622      	mov	r2, r4
   2596c:	4628      	mov	r0, r5
   2596e:	f7da fca7 	bl	2c0 <memcpy>
		buf[end] = '\0';
   25972:	2100      	movs	r1, #0
   25974:	5529      	strb	r1, [r5, r4]
		port = strtol(ptr + 2, NULL, 10);
   25976:	220a      	movs	r2, #10
   25978:	1cb0      	adds	r0, r6, #2
   2597a:	f005 fd9d 	bl	2b4b8 <strtol>
   2597e:	b280      	uxth	r0, r0
		return port;
   25980:	bd70      	pop	{r4, r5, r6, pc}
		i++;
   25982:	3301      	adds	r3, #1
	while (peer_addr_str[i]) {
   25984:	5cc2      	ldrb	r2, [r0, r3]
   25986:	b11a      	cbz	r2, 25990 <get_port_number+0x4c>
		if (peer_addr_str[i] == ':') {
   25988:	2a3a      	cmp	r2, #58	; 0x3a
   2598a:	d1fa      	bne.n	25982 <get_port_number+0x3e>
			count++;
   2598c:	3101      	adds	r1, #1
   2598e:	e7f8      	b.n	25982 <get_port_number+0x3e>
	if (count == 1) {
   25990:	2901      	cmp	r1, #1
   25992:	d001      	beq.n	25998 <get_port_number+0x54>
	return 0;
   25994:	2000      	movs	r0, #0
   25996:	4770      	bx	lr
		return -EAFNOSUPPORT;
   25998:	f06f 0069 	mvn.w	r0, #105	; 0x69
   2599c:	4770      	bx	lr
			return -EINVAL;
   2599e:	f06f 0015 	mvn.w	r0, #21
   259a2:	bd70      	pop	{r4, r5, r6, pc}
   259a4:	00030a5c 	.word	0x00030a5c

000259a8 <_app_connected>:
}

static void _app_connected(struct net_context *net_ctx,
			   int status,
			   void *user_data)
{
   259a8:	b538      	push	{r3, r4, r5, lr}
   259aa:	460d      	mov	r5, r1
   259ac:	4614      	mov	r4, r2
	if (ctx->is_tls) {
		k_sem_give(&ctx->client.connect_wait);
	}
#endif

	net_context_recv(net_ctx, ctx->recv_cb, K_NO_WAIT, ctx);
   259ae:	4613      	mov	r3, r2
   259b0:	2200      	movs	r2, #0
   259b2:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   259b4:	f7f6 ff88 	bl	1c8c8 <net_context_recv>
		 */
		NET_DBG("Postponing TLS connection cb for ctx %p", ctx);
	} else
#endif
	{
		if (ctx->cb.connect) {
   259b8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   259ba:	b11b      	cbz	r3, 259c4 <_app_connected+0x1c>
			ctx->cb.connect(ctx, status, ctx->user_data);
   259bc:	6f22      	ldr	r2, [r4, #112]	; 0x70
   259be:	4629      	mov	r1, r5
   259c0:	4620      	mov	r0, r4
   259c2:	4798      	blx	r3
   259c4:	bd38      	pop	{r3, r4, r5, pc}
	...

000259c8 <net_app_init_client>:
{
   259c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   259cc:	b09a      	sub	sp, #104	; 0x68
   259ce:	9e22      	ldr	r6, [sp, #136]	; 0x88
   259d0:	f8bd 8090 	ldrh.w	r8, [sp, #144]	; 0x90
	if (!ctx) {
   259d4:	2800      	cmp	r0, #0
   259d6:	f000 80c9 	beq.w	25b6c <net_app_init_client+0x1a4>
   259da:	4604      	mov	r4, r0
	if (ctx->is_init) {
   259dc:	f890 0077 	ldrb.w	r0, [r0, #119]	; 0x77
   259e0:	f010 0f01 	tst.w	r0, #1
   259e4:	f040 80c5 	bne.w	25b72 <net_app_init_client+0x1aa>
   259e8:	4699      	mov	r9, r3
   259ea:	4617      	mov	r7, r2
   259ec:	460d      	mov	r5, r1
	memset(&addr, 0, sizeof(addr));
   259ee:	2218      	movs	r2, #24
   259f0:	2100      	movs	r1, #0
   259f2:	a802      	add	r0, sp, #8
   259f4:	f005 f846 	bl	2aa84 <memset>
	memset(&remote_addr, 0, sizeof(remote_addr));
   259f8:	2218      	movs	r2, #24
   259fa:	2100      	movs	r1, #0
   259fc:	a808      	add	r0, sp, #32
   259fe:	f005 f841 	bl	2aa84 <memset>
	if (peer_addr) {
   25a02:	2e00      	cmp	r6, #0
   25a04:	d03c      	beq.n	25a80 <net_app_init_client+0xb8>
		memcpy(&remote_addr, peer_addr, sizeof(remote_addr));
   25a06:	2218      	movs	r2, #24
   25a08:	4631      	mov	r1, r6
   25a0a:	a808      	add	r0, sp, #32
   25a0c:	f7da fc58 	bl	2c0 <memcpy>
	int ret, addr_ok = false;
   25a10:	f04f 0a00 	mov.w	sl, #0
	if (client_addr) {
   25a14:	f1b9 0f00 	cmp.w	r9, #0
   25a18:	d05e      	beq.n	25ad8 <net_app_init_client+0x110>
		memcpy(&addr, client_addr, sizeof(addr));
   25a1a:	2218      	movs	r2, #24
   25a1c:	4649      	mov	r1, r9
   25a1e:	a802      	add	r0, sp, #8
   25a20:	f7da fc4e 	bl	2c0 <memcpy>
		if (addr.sa_family != remote_addr.sa_family) {
   25a24:	f8bd 2008 	ldrh.w	r2, [sp, #8]
   25a28:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   25a2c:	429a      	cmp	r2, r3
   25a2e:	f040 80a3 	bne.w	25b78 <net_app_init_client+0x1b0>
	ctx->app_type = NET_APP_CLIENT;
   25a32:	2302      	movs	r3, #2
   25a34:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
	ctx->user_data = user_data;
   25a38:	9b26      	ldr	r3, [sp, #152]	; 0x98
   25a3a:	6723      	str	r3, [r4, #112]	; 0x70
	ctx->send_data = net_context_sendto;
   25a3c:	4b54      	ldr	r3, [pc, #336]	; (25b90 <net_app_init_client+0x1c8>)
   25a3e:	63a3      	str	r3, [r4, #56]	; 0x38
	ctx->recv_cb = _net_app_received;
   25a40:	4b54      	ldr	r3, [pc, #336]	; (25b94 <net_app_init_client+0x1cc>)
   25a42:	64e3      	str	r3, [r4, #76]	; 0x4c
	ctx->proto = proto;
   25a44:	f884 7075 	strb.w	r7, [r4, #117]	; 0x75
	ctx->sock_type = sock_type;
   25a48:	f884 5074 	strb.w	r5, [r4, #116]	; 0x74
	ret = _net_app_config_local_ctx(ctx, sock_type, proto, &addr);
   25a4c:	ab02      	add	r3, sp, #8
   25a4e:	463a      	mov	r2, r7
   25a50:	4629      	mov	r1, r5
   25a52:	4620      	mov	r0, r4
   25a54:	f000 f949 	bl	25cea <_net_app_config_local_ctx>
	if (ret < 0) {
   25a58:	1e05      	subs	r5, r0, #0
   25a5a:	db42      	blt.n	25ae2 <net_app_init_client+0x11a>
	if (peer_addr) {
   25a5c:	2e00      	cmp	r6, #0
   25a5e:	d04c      	beq.n	25afa <net_app_init_client+0x132>
		if (peer_addr->sa_family == AF_INET) {
   25a60:	8833      	ldrh	r3, [r6, #0]
   25a62:	2b02      	cmp	r3, #2
   25a64:	f000 808b 	beq.w	25b7e <net_app_init_client+0x1b6>
		} else if (peer_addr->sa_family == AF_INET6) {
   25a68:	2b0a      	cmp	r3, #10
   25a6a:	d03e      	beq.n	25aea <net_app_init_client+0x122>
	ctx->is_init = true;
   25a6c:	f894 3077 	ldrb.w	r3, [r4, #119]	; 0x77
   25a70:	f043 0301 	orr.w	r3, r3, #1
   25a74:	f884 3077 	strb.w	r3, [r4, #119]	; 0x77
}
   25a78:	4628      	mov	r0, r5
   25a7a:	b01a      	add	sp, #104	; 0x68
   25a7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (peer_addr_str) {
   25a80:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   25a82:	b333      	cbz	r3, 25ad2 <net_app_init_client+0x10a>
		ret = get_port_number(peer_addr_str, base_addr_str,
   25a84:	222f      	movs	r2, #47	; 0x2f
   25a86:	a90e      	add	r1, sp, #56	; 0x38
   25a88:	4618      	mov	r0, r3
   25a8a:	f7ff ff5b 	bl	25944 <get_port_number>
		if (ret > 0) {
   25a8e:	2800      	cmp	r0, #0
   25a90:	dd17      	ble.n	25ac2 <net_app_init_client+0xfa>
			peer_port = ret;
   25a92:	fa1f f880 	uxth.w	r8, r0
			base_peer_addr = base_addr_str;
   25a96:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
		addr_ok = net_ipaddr_parse(base_peer_addr,
   25a9a:	4650      	mov	r0, sl
   25a9c:	f7da fe30 	bl	700 <strlen>
   25aa0:	aa08      	add	r2, sp, #32
   25aa2:	4601      	mov	r1, r0
   25aa4:	4650      	mov	r0, sl
   25aa6:	f7f7 ff72 	bl	1d98e <net_ipaddr_parse>
   25aaa:	4682      	mov	sl, r0
		if (remote_addr.sa_family == AF_INET6) {
   25aac:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   25ab0:	2b0a      	cmp	r3, #10
   25ab2:	d1af      	bne.n	25a14 <net_app_init_client+0x4c>
			net_sin6(&remote_addr)->sin6_port = htons(peer_port);
   25ab4:	ea4f 2318 	mov.w	r3, r8, lsr #8
   25ab8:	ea43 2808 	orr.w	r8, r3, r8, lsl #8
   25abc:	f8ad 8022 	strh.w	r8, [sp, #34]	; 0x22
   25ac0:	e7a8      	b.n	25a14 <net_app_init_client+0x4c>
			strncpy(base_addr_str, peer_addr_str,
   25ac2:	222e      	movs	r2, #46	; 0x2e
   25ac4:	9923      	ldr	r1, [sp, #140]	; 0x8c
   25ac6:	a80e      	add	r0, sp, #56	; 0x38
   25ac8:	f005 f9ba 	bl	2ae40 <strncpy>
	const char *base_peer_addr = peer_addr_str;
   25acc:	f8dd a08c 	ldr.w	sl, [sp, #140]	; 0x8c
   25ad0:	e7e3      	b.n	25a9a <net_app_init_client+0xd2>
	int ret, addr_ok = false;
   25ad2:	f04f 0a00 	mov.w	sl, #0
   25ad6:	e79d      	b.n	25a14 <net_app_init_client+0x4c>
		addr.sa_family = remote_addr.sa_family;
   25ad8:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   25adc:	f8ad 3008 	strh.w	r3, [sp, #8]
   25ae0:	e7a7      	b.n	25a32 <net_app_init_client+0x6a>
		close_net_ctx(ctx);
   25ae2:	4620      	mov	r0, r4
   25ae4:	f7ff ff23 	bl	2592e <close_net_ctx>
		goto fail;
   25ae8:	e7c6      	b.n	25a78 <net_app_init_client+0xb0>
			memcpy(&ctx->ipv6.remote, peer_addr,
   25aea:	2218      	movs	r2, #24
   25aec:	4631      	mov	r1, r6
   25aee:	f104 001c 	add.w	r0, r4, #28
   25af2:	f7da fbe5 	bl	2c0 <memcpy>
			ctx->default_ctx = &ctx->ipv6;
   25af6:	6364      	str	r4, [r4, #52]	; 0x34
   25af8:	e7b8      	b.n	25a6c <net_app_init_client+0xa4>
	if (!peer_addr_str) {
   25afa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   25afc:	b363      	cbz	r3, 25b58 <net_app_init_client+0x190>
	ret = set_remote_addr(ctx, &remote_addr, base_addr_str,
   25afe:	9b25      	ldr	r3, [sp, #148]	; 0x94
   25b00:	9300      	str	r3, [sp, #0]
   25b02:	f11a 0300 	adds.w	r3, sl, #0
   25b06:	bf18      	it	ne
   25b08:	2301      	movne	r3, #1
   25b0a:	aa0e      	add	r2, sp, #56	; 0x38
   25b0c:	a908      	add	r1, sp, #32
   25b0e:	4620      	mov	r0, r4
   25b10:	f7ff feeb 	bl	258ea <set_remote_addr>
	if (ret < 0) {
   25b14:	1e05      	subs	r5, r0, #0
   25b16:	db25      	blt.n	25b64 <net_app_init_client+0x19c>
	if (!ctx->default_ctx ||
   25b18:	6b63      	ldr	r3, [r4, #52]	; 0x34
   25b1a:	b39b      	cbz	r3, 25b84 <net_app_init_client+0x1bc>
	    ctx->default_ctx->remote.sa_family == AF_UNSPEC) {
   25b1c:	8b9b      	ldrh	r3, [r3, #28]
	if (!ctx->default_ctx ||
   25b1e:	b3a3      	cbz	r3, 25b8a <net_app_init_client+0x1c2>
	if (ctx->ipv6.remote.sa_family == AF_INET6) {
   25b20:	8ba3      	ldrh	r3, [r4, #28]
   25b22:	2b0a      	cmp	r3, #10
   25b24:	d1a2      	bne.n	25a6c <net_app_init_client+0xa4>
		ctx->ipv6.local.sa_family = AF_INET6;
   25b26:	4625      	mov	r5, r4
   25b28:	f825 3f04 	strh.w	r3, [r5, #4]!
		_net_app_set_local_addr(&ctx->ipv6.local, NULL,
   25b2c:	88e2      	ldrh	r2, [r4, #6]
   25b2e:	2100      	movs	r1, #0
   25b30:	4628      	mov	r0, r5
   25b32:	f000 f8a3 	bl	25c7c <_net_app_set_local_addr>
		ret = _net_app_set_net_ctx(ctx, ctx->ipv6.ctx,
   25b36:	6821      	ldr	r1, [r4, #0]
   25b38:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
   25b3c:	9300      	str	r3, [sp, #0]
   25b3e:	2318      	movs	r3, #24
   25b40:	462a      	mov	r2, r5
   25b42:	4620      	mov	r0, r4
   25b44:	f000 f886 	bl	25c54 <_net_app_set_net_ctx>
		if (ret < 0) {
   25b48:	1e05      	subs	r5, r0, #0
   25b4a:	da8f      	bge.n	25a6c <net_app_init_client+0xa4>
			net_context_put(ctx->ipv6.ctx);
   25b4c:	6820      	ldr	r0, [r4, #0]
   25b4e:	f7f6 fbb3 	bl	1c2b8 <net_context_put>
			ctx->ipv6.ctx = NULL;
   25b52:	2300      	movs	r3, #0
   25b54:	6023      	str	r3, [r4, #0]
   25b56:	e789      	b.n	25a6c <net_app_init_client+0xa4>
		close_net_ctx(ctx);
   25b58:	4620      	mov	r0, r4
   25b5a:	f7ff fee8 	bl	2592e <close_net_ctx>
		ret = -EINVAL;
   25b5e:	f06f 0515 	mvn.w	r5, #21
		goto fail;
   25b62:	e789      	b.n	25a78 <net_app_init_client+0xb0>
		close_net_ctx(ctx);
   25b64:	4620      	mov	r0, r4
   25b66:	f7ff fee2 	bl	2592e <close_net_ctx>
		goto fail;
   25b6a:	e785      	b.n	25a78 <net_app_init_client+0xb0>
		return -EINVAL;
   25b6c:	f06f 0515 	mvn.w	r5, #21
   25b70:	e782      	b.n	25a78 <net_app_init_client+0xb0>
		return -EALREADY;
   25b72:	f06f 0577 	mvn.w	r5, #119	; 0x77
   25b76:	e77f      	b.n	25a78 <net_app_init_client+0xb0>
			return -EINVAL;
   25b78:	f06f 0515 	mvn.w	r5, #21
   25b7c:	e77c      	b.n	25a78 <net_app_init_client+0xb0>
			return -EPROTONOSUPPORT;
   25b7e:	f06f 057a 	mvn.w	r5, #122	; 0x7a
   25b82:	e779      	b.n	25a78 <net_app_init_client+0xb0>
		return -EPFNOSUPPORT;
   25b84:	f06f 055f 	mvn.w	r5, #95	; 0x5f
   25b88:	e776      	b.n	25a78 <net_app_init_client+0xb0>
   25b8a:	f06f 055f 	mvn.w	r5, #95	; 0x5f
   25b8e:	e773      	b.n	25a78 <net_app_init_client+0xb0>
   25b90:	0001c887 	.word	0x0001c887
   25b94:	00025c2b 	.word	0x00025c2b

00025b98 <net_app_connect>:
{
	struct net_context *net_ctx;
	bool started = false;
	int ret;

	if (!ctx) {
   25b98:	b1d0      	cbz	r0, 25bd0 <net_app_connect+0x38>
{
   25b9a:	b570      	push	{r4, r5, r6, lr}
   25b9c:	b082      	sub	sp, #8
   25b9e:	4604      	mov	r4, r0
		return -EINVAL;
	}

	if (!ctx->is_init) {
   25ba0:	f890 2077 	ldrb.w	r2, [r0, #119]	; 0x77
   25ba4:	f012 0f01 	tst.w	r2, #1
   25ba8:	d015      	beq.n	25bd6 <net_app_connect+0x3e>
		return -ENOENT;
	}

	if (ctx->app_type != NET_APP_CLIENT) {
   25baa:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
   25bae:	2a02      	cmp	r2, #2
   25bb0:	d114      	bne.n	25bdc <net_app_connect+0x44>
   25bb2:	460d      	mov	r5, r1
		return -EINVAL;
	}

	net_ctx = _net_app_select_net_ctx(ctx, NULL);
   25bb4:	2100      	movs	r1, #0
   25bb6:	f000 f8df 	bl	25d78 <_net_app_select_net_ctx>
	if (!net_ctx) {
   25bba:	b190      	cbz	r0, 25be2 <net_app_connect+0x4a>
		}
	} else
#endif /* CONFIG_NET_APP_DTLS */
	{
		ret = net_context_connect(net_ctx,
					  &ctx->default_ctx->remote,
   25bbc:	6b61      	ldr	r1, [r4, #52]	; 0x34
		ret = net_context_connect(net_ctx,
   25bbe:	9401      	str	r4, [sp, #4]
   25bc0:	9500      	str	r5, [sp, #0]
   25bc2:	4b09      	ldr	r3, [pc, #36]	; (25be8 <net_app_connect+0x50>)
   25bc4:	2218      	movs	r2, #24
   25bc6:	311c      	adds	r1, #28
   25bc8:	f7f6 fd4a 	bl	1c660 <net_context_connect>
		}
#endif
	}

	return ret;
}
   25bcc:	b002      	add	sp, #8
   25bce:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   25bd0:	f06f 0015 	mvn.w	r0, #21
   25bd4:	4770      	bx	lr
		return -ENOENT;
   25bd6:	f06f 0001 	mvn.w	r0, #1
   25bda:	e7f7      	b.n	25bcc <net_app_connect+0x34>
		return -EINVAL;
   25bdc:	f06f 0015 	mvn.w	r0, #21
   25be0:	e7f4      	b.n	25bcc <net_app_connect+0x34>
		return -EAFNOSUPPORT;
   25be2:	f06f 0069 	mvn.w	r0, #105	; 0x69
   25be6:	e7f1      	b.n	25bcc <net_app_connect+0x34>
   25be8:	000259a9 	.word	0x000259a9

00025bec <select_default_ctx>:

#if defined(CONFIG_NET_APP_SERVER) || defined(CONFIG_NET_APP_CLIENT)
static void select_default_ctx(struct net_app_ctx *ctx)
{
#if defined(CONFIG_NET_IPV6)
	ctx->default_ctx = &ctx->ipv6;
   25bec:	6340      	str	r0, [r0, #52]	; 0x34
   25bee:	4770      	bx	lr

00025bf0 <_app_send>:
	struct net_app_ctx *ctx = user_data;

	ARG_UNUSED(ctx);

#if defined(CONFIG_NET_APP_CLIENT)
	if (ctx->app_type == NET_APP_CLIENT && ctx->cb.send) {
   25bf0:	f893 0076 	ldrb.w	r0, [r3, #118]	; 0x76
   25bf4:	2802      	cmp	r0, #2
   25bf6:	d000      	beq.n	25bfa <_app_send+0xa>
   25bf8:	4770      	bx	lr
{
   25bfa:	b510      	push	{r4, lr}
	if (ctx->app_type == NET_APP_CLIENT && ctx->cb.send) {
   25bfc:	6c5c      	ldr	r4, [r3, #68]	; 0x44
   25bfe:	b114      	cbz	r4, 25c06 <_app_send+0x16>
   25c00:	4618      	mov	r0, r3
		ctx->cb.send(ctx, status, token, ctx->user_data);
   25c02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   25c04:	47a0      	blx	r4
   25c06:	bd10      	pop	{r4, pc}

00025c08 <setup_ipv6_ctx>:
{
   25c08:	b510      	push	{r4, lr}
   25c0a:	4604      	mov	r4, r0
	ret = net_context_get(AF_INET6, sock_type, proto, &ctx->ipv6.ctx);
   25c0c:	4603      	mov	r3, r0
   25c0e:	200a      	movs	r0, #10
   25c10:	f7f6 f8e6 	bl	1bde0 <net_context_get>
	if (ret < 0) {
   25c14:	2800      	cmp	r0, #0
   25c16:	db05      	blt.n	25c24 <setup_ipv6_ctx+0x1c>
	net_context_setup_pools(ctx->ipv6.ctx, ctx->tx_slab,
   25c18:	6823      	ldr	r3, [r4, #0]
   25c1a:	6ea1      	ldr	r1, [r4, #104]	; 0x68
   25c1c:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
					   net_pkt_get_slab_func_t tx_slab,
					   net_pkt_get_pool_func_t data_pool)
{
	NET_ASSERT(context);

	context->tx_slab = tx_slab;
   25c1e:	63d9      	str	r1, [r3, #60]	; 0x3c
	context->data_pool = data_pool;
   25c20:	641a      	str	r2, [r3, #64]	; 0x40
}
   25c22:	bd10      	pop	{r4, pc}
		ctx->ipv6.ctx = NULL;
   25c24:	2300      	movs	r3, #0
   25c26:	6023      	str	r3, [r4, #0]
		return ret;
   25c28:	bd10      	pop	{r4, pc}

00025c2a <_net_app_received>:
	if (ctx->app_type == NET_APP_CLIENT) {
   25c2a:	f893 0076 	ldrb.w	r0, [r3, #118]	; 0x76
   25c2e:	2802      	cmp	r0, #2
   25c30:	d000      	beq.n	25c34 <_net_app_received+0xa>
   25c32:	4770      	bx	lr
{
   25c34:	b538      	push	{r3, r4, r5, lr}
   25c36:	4618      	mov	r0, r3
   25c38:	4614      	mov	r4, r2
		if (!pkt) {
   25c3a:	b121      	cbz	r1, 25c46 <_net_app_received+0x1c>
		if (ctx->cb.recv) {
   25c3c:	6c1d      	ldr	r5, [r3, #64]	; 0x40
   25c3e:	b10d      	cbz	r5, 25c44 <_net_app_received+0x1a>
			ctx->cb.recv(ctx, pkt, status, ctx->user_data);
   25c40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   25c42:	47a8      	blx	r5
   25c44:	bd38      	pop	{r3, r4, r5, pc}
			if (ctx->cb.close) {
   25c46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   25c48:	2b00      	cmp	r3, #0
   25c4a:	d0fb      	beq.n	25c44 <_net_app_received+0x1a>
				ctx->cb.close(ctx, status, ctx->user_data);
   25c4c:	6f02      	ldr	r2, [r0, #112]	; 0x70
   25c4e:	4621      	mov	r1, r4
   25c50:	4798      	blx	r3
   25c52:	bd38      	pop	{r3, r4, r5, pc}

00025c54 <_net_app_set_net_ctx>:
	if (!net_ctx || !net_context_is_used(net_ctx)) {
   25c54:	b161      	cbz	r1, 25c70 <_net_app_set_net_ctx+0x1c>
{
   25c56:	b510      	push	{r4, lr}
   25c58:	4614      	mov	r4, r2
   25c5a:	4608      	mov	r0, r1
	return context->flags & NET_CONTEXT_IN_USE;
   25c5c:	f891 205d 	ldrb.w	r2, [r1, #93]	; 0x5d
	if (!net_ctx || !net_context_is_used(net_ctx)) {
   25c60:	f012 0f01 	tst.w	r2, #1
   25c64:	d007      	beq.n	25c76 <_net_app_set_net_ctx+0x22>
   25c66:	461a      	mov	r2, r3
   25c68:	4621      	mov	r1, r4
	ret = net_context_bind(net_ctx, addr, socklen);
   25c6a:	f7f6 fb67 	bl	1c33c <net_context_bind>
	return ret;
   25c6e:	bd10      	pop	{r4, pc}
		return -ENOENT;
   25c70:	f06f 0001 	mvn.w	r0, #1
   25c74:	4770      	bx	lr
   25c76:	f06f 0001 	mvn.w	r0, #1
}
   25c7a:	bd10      	pop	{r4, pc}

00025c7c <_net_app_set_local_addr>:
{
   25c7c:	b570      	push	{r4, r5, r6, lr}
   25c7e:	b084      	sub	sp, #16
   25c80:	4604      	mov	r4, r0
	if (myaddr) {
   25c82:	b169      	cbz	r1, 25ca0 <_net_app_set_local_addr+0x24>
		if (addr->sa_family == AF_INET) {
   25c84:	8800      	ldrh	r0, [r0, #0]
   25c86:	2802      	cmp	r0, #2
   25c88:	d029      	beq.n	25cde <_net_app_set_local_addr+0x62>
		} else if (addr->sa_family == AF_INET6) {
   25c8a:	280a      	cmp	r0, #10
   25c8c:	d12a      	bne.n	25ce4 <_net_app_set_local_addr+0x68>
			net_sin6(addr)->sin6_port = htons(port);
   25c8e:	0a13      	lsrs	r3, r2, #8
   25c90:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
   25c94:	8062      	strh	r2, [r4, #2]
		return net_addr_pton(addr->sa_family, myaddr, inaddr);
   25c96:	1d22      	adds	r2, r4, #4
   25c98:	f7f7 fcc3 	bl	1d622 <net_addr_pton>
}
   25c9c:	b004      	add	sp, #16
   25c9e:	bd70      	pop	{r4, r5, r6, pc}
	if (addr->sa_family == AF_INET6) {
   25ca0:	8803      	ldrh	r3, [r0, #0]
   25ca2:	2b0a      	cmp	r3, #10
   25ca4:	d003      	beq.n	25cae <_net_app_set_local_addr+0x32>
	} else if (addr->sa_family == AF_INET) {
   25ca6:	2b02      	cmp	r3, #2
   25ca8:	d016      	beq.n	25cd8 <_net_app_set_local_addr+0x5c>
	return 0;
   25caa:	2000      	movs	r0, #0
   25cac:	e7f6      	b.n	25c9c <_net_app_set_local_addr+0x20>
		net_ipaddr_copy(&net_sin6(addr)->sin6_addr,
   25cae:	f7f9 f959 	bl	1ef64 <net_ipv6_unspecified_address>
   25cb2:	4601      	mov	r1, r0
   25cb4:	2000      	movs	r0, #0
   25cb6:	f7f5 faf9 	bl	1b2ac <net_if_ipv6_select_src_addr>
   25cba:	4603      	mov	r3, r0
   25cbc:	466d      	mov	r5, sp
   25cbe:	6800      	ldr	r0, [r0, #0]
   25cc0:	6859      	ldr	r1, [r3, #4]
   25cc2:	689a      	ldr	r2, [r3, #8]
   25cc4:	68db      	ldr	r3, [r3, #12]
   25cc6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   25cc8:	466d      	mov	r5, sp
   25cca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   25ccc:	6060      	str	r0, [r4, #4]
   25cce:	60a1      	str	r1, [r4, #8]
   25cd0:	60e2      	str	r2, [r4, #12]
   25cd2:	6123      	str	r3, [r4, #16]
	return 0;
   25cd4:	2000      	movs	r0, #0
   25cd6:	e7e1      	b.n	25c9c <_net_app_set_local_addr+0x20>
		return -EPFNOSUPPORT;
   25cd8:	f06f 005f 	mvn.w	r0, #95	; 0x5f
   25cdc:	e7de      	b.n	25c9c <_net_app_set_local_addr+0x20>
			return -EPFNOSUPPORT;
   25cde:	f06f 005f 	mvn.w	r0, #95	; 0x5f
   25ce2:	e7db      	b.n	25c9c <_net_app_set_local_addr+0x20>
			return -EAFNOSUPPORT;
   25ce4:	f06f 0069 	mvn.w	r0, #105	; 0x69
   25ce8:	e7d8      	b.n	25c9c <_net_app_set_local_addr+0x20>

00025cea <_net_app_config_local_ctx>:
{
   25cea:	b538      	push	{r3, r4, r5, lr}
   25cec:	4604      	mov	r4, r0
	if (!addr) {
   25cee:	b163      	cbz	r3, 25d0a <_net_app_config_local_ctx+0x20>
		if (addr->sa_family == AF_INET6) {
   25cf0:	881b      	ldrh	r3, [r3, #0]
   25cf2:	2b0a      	cmp	r3, #10
   25cf4:	d015      	beq.n	25d22 <_net_app_config_local_ctx+0x38>
		} else if (addr->sa_family == AF_INET) {
   25cf6:	2b02      	cmp	r3, #2
   25cf8:	d01c      	beq.n	25d34 <_net_app_config_local_ctx+0x4a>
		} else if (addr->sa_family == AF_UNSPEC) {
   25cfa:	b9f3      	cbnz	r3, 25d3a <_net_app_config_local_ctx+0x50>
			ret = setup_ipv6_ctx(ctx, sock_type, proto);
   25cfc:	4620      	mov	r0, r4
   25cfe:	f7ff ff83 	bl	25c08 <setup_ipv6_ctx>
   25d02:	4605      	mov	r5, r0
			ctx->default_ctx = &ctx->ipv6;
   25d04:	6364      	str	r4, [r4, #52]	; 0x34
}
   25d06:	4628      	mov	r0, r5
   25d08:	bd38      	pop	{r3, r4, r5, pc}
		if (ctx->ipv6.local.sa_family == AF_INET6 ||
   25d0a:	8883      	ldrh	r3, [r0, #4]
   25d0c:	2b0a      	cmp	r3, #10
   25d0e:	d000      	beq.n	25d12 <_net_app_config_local_ctx+0x28>
   25d10:	b96b      	cbnz	r3, 25d2e <_net_app_config_local_ctx+0x44>
			ret = setup_ipv6_ctx(ctx, sock_type, proto);
   25d12:	4620      	mov	r0, r4
   25d14:	f7ff ff78 	bl	25c08 <setup_ipv6_ctx>
   25d18:	4605      	mov	r5, r0
		select_default_ctx(ctx);
   25d1a:	4620      	mov	r0, r4
   25d1c:	f7ff ff66 	bl	25bec <select_default_ctx>
   25d20:	e7f1      	b.n	25d06 <_net_app_config_local_ctx+0x1c>
			ret = setup_ipv6_ctx(ctx, sock_type, proto);
   25d22:	4620      	mov	r0, r4
   25d24:	f7ff ff70 	bl	25c08 <setup_ipv6_ctx>
   25d28:	4605      	mov	r5, r0
			ctx->default_ctx = &ctx->ipv6;
   25d2a:	6364      	str	r4, [r4, #52]	; 0x34
   25d2c:	e7eb      	b.n	25d06 <_net_app_config_local_ctx+0x1c>
			ret = -EPFNOSUPPORT;
   25d2e:	f06f 055f 	mvn.w	r5, #95	; 0x5f
   25d32:	e7e8      	b.n	25d06 <_net_app_config_local_ctx+0x1c>
			ret = -EPFNOSUPPORT;
   25d34:	f06f 055f 	mvn.w	r5, #95	; 0x5f
   25d38:	e7e5      	b.n	25d06 <_net_app_config_local_ctx+0x1c>
			ret = -EINVAL;
   25d3a:	f06f 0515 	mvn.w	r5, #21
	return ret;
   25d3e:	e7e2      	b.n	25d06 <_net_app_config_local_ctx+0x1c>

00025d40 <net_app_release>:
	if (!ctx) {
   25d40:	b1a0      	cbz	r0, 25d6c <net_app_release+0x2c>
{
   25d42:	b510      	push	{r4, lr}
   25d44:	4604      	mov	r4, r0
	if (!ctx->is_init) {
   25d46:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
   25d4a:	f013 0f01 	tst.w	r3, #1
   25d4e:	d010      	beq.n	25d72 <net_app_release+0x32>
	if (ctx->ipv6.ctx) {
   25d50:	6800      	ldr	r0, [r0, #0]
   25d52:	b118      	cbz	r0, 25d5c <net_app_release+0x1c>
		net_context_put(ctx->ipv6.ctx);
   25d54:	f7f6 fab0 	bl	1c2b8 <net_context_put>
		ctx->ipv6.ctx = NULL;
   25d58:	2300      	movs	r3, #0
   25d5a:	6023      	str	r3, [r4, #0]
	ctx->is_init = false;
   25d5c:	f894 3077 	ldrb.w	r3, [r4, #119]	; 0x77
   25d60:	f36f 0300 	bfc	r3, #0, #1
   25d64:	f884 3077 	strb.w	r3, [r4, #119]	; 0x77
	return 0;
   25d68:	2000      	movs	r0, #0
   25d6a:	bd10      	pop	{r4, pc}
		return -EINVAL;
   25d6c:	f06f 0015 	mvn.w	r0, #21
   25d70:	4770      	bx	lr
		return -ENOENT;
   25d72:	f06f 0001 	mvn.w	r0, #1
}
   25d76:	bd10      	pop	{r4, pc}

00025d78 <_net_app_select_net_ctx>:
	if (ctx->app_type == NET_APP_CLIENT) {
   25d78:	f890 3076 	ldrb.w	r3, [r0, #118]	; 0x76
   25d7c:	2b02      	cmp	r3, #2
   25d7e:	d128      	bne.n	25dd2 <_net_app_select_net_ctx+0x5a>
	if (ctx->proto == IPPROTO_UDP) {
   25d80:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   25d84:	2b11      	cmp	r3, #17
   25d86:	d009      	beq.n	25d9c <_net_app_select_net_ctx+0x24>
		if (!dst) {
   25d88:	b1c1      	cbz	r1, 25dbc <_net_app_select_net_ctx+0x44>
			if (dst->sa_family == AF_INET) {
   25d8a:	880b      	ldrh	r3, [r1, #0]
   25d8c:	2b02      	cmp	r3, #2
   25d8e:	d01c      	beq.n	25dca <_net_app_select_net_ctx+0x52>
			if (dst->sa_family == AF_INET6) {
   25d90:	2b0a      	cmp	r3, #10
   25d92:	d016      	beq.n	25dc2 <_net_app_select_net_ctx+0x4a>
			if (dst->sa_family == AF_UNSPEC) {
   25d94:	b9db      	cbnz	r3, 25dce <_net_app_select_net_ctx+0x56>
				return ctx->default_ctx->ctx;
   25d96:	6b43      	ldr	r3, [r0, #52]	; 0x34
   25d98:	6818      	ldr	r0, [r3, #0]
   25d9a:	4770      	bx	lr
		if (!dst) {
   25d9c:	b131      	cbz	r1, 25dac <_net_app_select_net_ctx+0x34>
			if (ctx->is_tls) {
   25d9e:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
   25da2:	f013 0f02 	tst.w	r3, #2
   25da6:	d0f0      	beq.n	25d8a <_net_app_select_net_ctx+0x12>
				return NULL;
   25da8:	2000      	movs	r0, #0
   25daa:	4770      	bx	lr
			if (ctx->is_tls) {
   25dac:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
   25db0:	f013 0f02 	tst.w	r3, #2
   25db4:	d107      	bne.n	25dc6 <_net_app_select_net_ctx+0x4e>
				return ctx->default_ctx->ctx;
   25db6:	6b43      	ldr	r3, [r0, #52]	; 0x34
   25db8:	6818      	ldr	r0, [r3, #0]
   25dba:	4770      	bx	lr
			return ctx->default_ctx->ctx;
   25dbc:	6b43      	ldr	r3, [r0, #52]	; 0x34
   25dbe:	6818      	ldr	r0, [r3, #0]
   25dc0:	4770      	bx	lr
				return ctx->ipv6.ctx;
   25dc2:	6800      	ldr	r0, [r0, #0]
   25dc4:	4770      	bx	lr
				return NULL;
   25dc6:	2000      	movs	r0, #0
   25dc8:	4770      	bx	lr
				return NULL;
   25dca:	2000      	movs	r0, #0
   25dcc:	4770      	bx	lr
	return NULL;
   25dce:	2000      	movs	r0, #0
   25dd0:	4770      	bx	lr
	struct net_context *net_ctx = NULL;
   25dd2:	2000      	movs	r0, #0
}
   25dd4:	4770      	bx	lr

00025dd6 <net_app_set_cb>:
	if (!ctx) {
   25dd6:	b170      	cbz	r0, 25df6 <net_app_set_cb+0x20>
{
   25dd8:	b410      	push	{r4}
   25dda:	4604      	mov	r4, r0
	if (!ctx->is_init) {
   25ddc:	f890 0077 	ldrb.w	r0, [r0, #119]	; 0x77
   25de0:	f010 0f01 	tst.w	r0, #1
   25de4:	d00a      	beq.n	25dfc <net_app_set_cb+0x26>
	ctx->cb.connect = connect_cb;
   25de6:	63e1      	str	r1, [r4, #60]	; 0x3c
	ctx->cb.recv = recv_cb;
   25de8:	6422      	str	r2, [r4, #64]	; 0x40
	ctx->cb.send = send_cb;
   25dea:	6463      	str	r3, [r4, #68]	; 0x44
	ctx->cb.close = close_cb;
   25dec:	9b01      	ldr	r3, [sp, #4]
   25dee:	64a3      	str	r3, [r4, #72]	; 0x48
	return 0;
   25df0:	2000      	movs	r0, #0
}
   25df2:	bc10      	pop	{r4}
   25df4:	4770      	bx	lr
		return -EINVAL;
   25df6:	f06f 0015 	mvn.w	r0, #21
   25dfa:	4770      	bx	lr
		return -ENOENT;
   25dfc:	f06f 0001 	mvn.w	r0, #1
   25e00:	e7f7      	b.n	25df2 <net_app_set_cb+0x1c>
	...

00025e04 <net_app_send_pkt>:
		     s32_t timeout,
		     void *user_data_send)
{
	int ret;

	if (!ctx) {
   25e04:	2800      	cmp	r0, #0
   25e06:	d064      	beq.n	25ed2 <net_app_send_pkt+0xce>
{
   25e08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25e0c:	b08a      	sub	sp, #40	; 0x28
   25e0e:	460d      	mov	r5, r1
   25e10:	4616      	mov	r6, r2
   25e12:	461f      	mov	r7, r3
   25e14:	4604      	mov	r4, r0
		return -EINVAL;
	}

	if (!ctx->is_init) {
   25e16:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
   25e1a:	f013 0f01 	tst.w	r3, #1
   25e1e:	d05b      	beq.n	25ed8 <net_app_send_pkt+0xd4>
	return pkt->appdatalen;
   25e20:	8e08      	ldrh	r0, [r1, #48]	; 0x30
	 * will be put back just before sending the packet. Normally the
	 * data that is sent does not contain IP header, but if the caller
	 * replies the packet directly back, the IP header could be there
	 * at this point.
	 */
	if (net_pkt_appdatalen(pkt) > 0) {
   25e22:	b188      	cbz	r0, 25e48 <net_app_send_pkt+0x44>
		int header_len;

		header_len = net_buf_frags_len(pkt->frags) -
   25e24:	f8d1 e008 	ldr.w	lr, [r1, #8]
   25e28:	4673      	mov	r3, lr
	size_t bytes = 0;
   25e2a:	2100      	movs	r1, #0
   25e2c:	e002      	b.n	25e34 <net_app_send_pkt+0x30>
		bytes += buf->len;
   25e2e:	899a      	ldrh	r2, [r3, #12]
   25e30:	4411      	add	r1, r2
		buf = buf->frags;
   25e32:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   25e34:	2b00      	cmp	r3, #0
   25e36:	d1fa      	bne.n	25e2e <net_app_send_pkt+0x2a>
   25e38:	1a09      	subs	r1, r1, r0
			net_pkt_appdatalen(pkt);
		if (header_len > 0) {
   25e3a:	2900      	cmp	r1, #0
   25e3c:	dd0d      	ble.n	25e5a <net_app_send_pkt+0x56>
			net_buf_pull(pkt->frags, header_len);
   25e3e:	f10e 0008 	add.w	r0, lr, #8
   25e42:	f7f4 f9f8 	bl	1a236 <net_buf_simple_pull>
   25e46:	e008      	b.n	25e5a <net_app_send_pkt+0x56>
		}
	} else {
		net_pkt_set_appdatalen(pkt, net_buf_frags_len(pkt->frags));
   25e48:	688b      	ldr	r3, [r1, #8]
	size_t bytes = 0;
   25e4a:	2200      	movs	r2, #0
   25e4c:	e002      	b.n	25e54 <net_app_send_pkt+0x50>
		bytes += buf->len;
   25e4e:	8999      	ldrh	r1, [r3, #12]
   25e50:	440a      	add	r2, r1
		buf = buf->frags;
   25e52:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   25e54:	2b00      	cmp	r3, #0
   25e56:	d1fa      	bne.n	25e4e <net_app_send_pkt+0x4a>
	pkt->appdatalen = len;
   25e58:	862a      	strh	r2, [r5, #48]	; 0x30
	}

	if (ctx->proto == IPPROTO_UDP) {
   25e5a:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
   25e5e:	2b11      	cmp	r3, #17
   25e60:	d00e      	beq.n	25e80 <net_app_send_pkt+0x7c>
				}
			}
		}
	}

	ret = ctx->send_data(pkt, dst, dst_len, _app_send, timeout,
   25e62:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
   25e66:	9402      	str	r4, [sp, #8]
   25e68:	9b11      	ldr	r3, [sp, #68]	; 0x44
   25e6a:	9301      	str	r3, [sp, #4]
   25e6c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   25e6e:	9300      	str	r3, [sp, #0]
   25e70:	4b21      	ldr	r3, [pc, #132]	; (25ef8 <net_app_send_pkt+0xf4>)
   25e72:	463a      	mov	r2, r7
   25e74:	4631      	mov	r1, r6
   25e76:	4628      	mov	r0, r5
   25e78:	47c0      	blx	r8
	if (ret < 0) {
		NET_DBG("Cannot send to peer (%d)", ret);
	}

	return ret;
}
   25e7a:	b00a      	add	sp, #40	; 0x28
   25e7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!dst) {
   25e80:	b1de      	cbz	r6, 25eba <net_app_send_pkt+0xb6>
	return pkt->family;
   25e82:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
   25e86:	f3c3 03c3 	ubfx	r3, r3, #3, #4
			if (net_pkt_family(pkt) == AF_INET) {
   25e8a:	2b02      	cmp	r3, #2
   25e8c:	d02d      	beq.n	25eea <net_app_send_pkt+0xe6>
				if (net_pkt_family(pkt) == AF_INET6) {
   25e8e:	2b0a      	cmp	r3, #10
   25e90:	d12e      	bne.n	25ef0 <net_app_send_pkt+0xec>
					net_ipaddr_copy(
   25e92:	af04      	add	r7, sp, #16
   25e94:	6830      	ldr	r0, [r6, #0]
   25e96:	6871      	ldr	r1, [r6, #4]
   25e98:	68b2      	ldr	r2, [r6, #8]
   25e9a:	68f3      	ldr	r3, [r6, #12]
   25e9c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   25e9e:	6930      	ldr	r0, [r6, #16]
   25ea0:	6971      	ldr	r1, [r6, #20]
   25ea2:	c703      	stmia	r7!, {r0, r1}
   25ea4:	af04      	add	r7, sp, #16
   25ea6:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   25ea8:	61e0      	str	r0, [r4, #28]
   25eaa:	6221      	str	r1, [r4, #32]
   25eac:	6262      	str	r2, [r4, #36]	; 0x24
   25eae:	62a3      	str	r3, [r4, #40]	; 0x28
   25eb0:	cf03      	ldmia	r7!, {r0, r1}
   25eb2:	62e0      	str	r0, [r4, #44]	; 0x2c
   25eb4:	6321      	str	r1, [r4, #48]	; 0x30
					dst_len = sizeof(struct sockaddr_in6);
   25eb6:	2718      	movs	r7, #24
   25eb8:	e7d3      	b.n	25e62 <net_app_send_pkt+0x5e>
   25eba:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
   25ebe:	f3c3 03c3 	ubfx	r3, r3, #3, #4
			if (net_pkt_family(pkt) == AF_INET) {
   25ec2:	2b02      	cmp	r3, #2
   25ec4:	d00b      	beq.n	25ede <net_app_send_pkt+0xda>
				if (net_pkt_family(pkt) == AF_INET6) {
   25ec6:	2b0a      	cmp	r3, #10
   25ec8:	d10c      	bne.n	25ee4 <net_app_send_pkt+0xe0>
					dst = &ctx->ipv6.remote;
   25eca:	f104 061c 	add.w	r6, r4, #28
					dst_len = sizeof(struct sockaddr_in6);
   25ece:	2718      	movs	r7, #24
   25ed0:	e7c7      	b.n	25e62 <net_app_send_pkt+0x5e>
		return -EINVAL;
   25ed2:	f06f 0015 	mvn.w	r0, #21
   25ed6:	4770      	bx	lr
		return -ENOENT;
   25ed8:	f06f 0001 	mvn.w	r0, #1
   25edc:	e7cd      	b.n	25e7a <net_app_send_pkt+0x76>
				return -EPFNOSUPPORT;
   25ede:	f06f 005f 	mvn.w	r0, #95	; 0x5f
   25ee2:	e7ca      	b.n	25e7a <net_app_send_pkt+0x76>
					return -EPFNOSUPPORT;
   25ee4:	f06f 005f 	mvn.w	r0, #95	; 0x5f
   25ee8:	e7c7      	b.n	25e7a <net_app_send_pkt+0x76>
				return -EPFNOSUPPORT;
   25eea:	f06f 005f 	mvn.w	r0, #95	; 0x5f
   25eee:	e7c4      	b.n	25e7a <net_app_send_pkt+0x76>
					return -EPFNOSUPPORT;
   25ef0:	f06f 005f 	mvn.w	r0, #95	; 0x5f
   25ef4:	e7c1      	b.n	25e7a <net_app_send_pkt+0x76>
   25ef6:	bf00      	nop
   25ef8:	00025bf1 	.word	0x00025bf1

00025efc <net_app_get_net_pkt>:
}

struct net_pkt *net_app_get_net_pkt(struct net_app_ctx *ctx,
				    sa_family_t family,
				    s32_t timeout)
{
   25efc:	b510      	push	{r4, lr}
   25efe:	b086      	sub	sp, #24
	struct net_context *net_ctx;
	struct sockaddr dst = { 0 };
   25f00:	2300      	movs	r3, #0
   25f02:	9300      	str	r3, [sp, #0]
   25f04:	9301      	str	r3, [sp, #4]
   25f06:	9302      	str	r3, [sp, #8]
   25f08:	9303      	str	r3, [sp, #12]
   25f0a:	9304      	str	r3, [sp, #16]
   25f0c:	9305      	str	r3, [sp, #20]

	if (!ctx) {
   25f0e:	b198      	cbz	r0, 25f38 <net_app_get_net_pkt+0x3c>
   25f10:	4603      	mov	r3, r0
		return NULL;
	}

	if (!ctx->is_init) {
   25f12:	f890 0077 	ldrb.w	r0, [r0, #119]	; 0x77
   25f16:	f010 0f01 	tst.w	r0, #1
   25f1a:	d00f      	beq.n	25f3c <net_app_get_net_pkt+0x40>
   25f1c:	4618      	mov	r0, r3
   25f1e:	4614      	mov	r4, r2
   25f20:	460b      	mov	r3, r1
		return NULL;
	}

	dst.sa_family = family;
   25f22:	a906      	add	r1, sp, #24
   25f24:	f821 3d18 	strh.w	r3, [r1, #-24]!

	net_ctx = _net_app_select_net_ctx(ctx, &dst);
   25f28:	f7ff ff26 	bl	25d78 <_net_app_select_net_ctx>
	if (!net_ctx) {
   25f2c:	b140      	cbz	r0, 25f40 <net_app_get_net_pkt+0x44>
		return NULL;
	}

	return net_pkt_get_tx(net_ctx, timeout);
   25f2e:	4621      	mov	r1, r4
   25f30:	f7f6 fe24 	bl	1cb7c <net_pkt_get_tx>
}
   25f34:	b006      	add	sp, #24
   25f36:	bd10      	pop	{r4, pc}
		return NULL;
   25f38:	2000      	movs	r0, #0
   25f3a:	e7fb      	b.n	25f34 <net_app_get_net_pkt+0x38>
		return NULL;
   25f3c:	2000      	movs	r0, #0
   25f3e:	e7f9      	b.n	25f34 <net_app_get_net_pkt+0x38>
		return NULL;
   25f40:	2000      	movs	r0, #0
   25f42:	e7f7      	b.n	25f34 <net_app_get_net_pkt+0x38>

00025f44 <net_app_close>:

int net_app_close(struct net_app_ctx *ctx)
{
	struct net_context *net_ctx;

	if (!ctx) {
   25f44:	b1c0      	cbz	r0, 25f78 <net_app_close+0x34>
{
   25f46:	b538      	push	{r3, r4, r5, lr}
   25f48:	4604      	mov	r4, r0
		return -EINVAL;
	}

	if (!ctx->is_init) {
   25f4a:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
   25f4e:	f013 0f01 	tst.w	r3, #1
   25f52:	d014      	beq.n	25f7e <net_app_close+0x3a>
		ctx->tls.close_requested = true;
		return -EINPROGRESS;
	}
#endif

	net_ctx = _net_app_select_net_ctx(ctx, NULL);
   25f54:	2100      	movs	r1, #0
   25f56:	f7ff ff0f 	bl	25d78 <_net_app_select_net_ctx>
   25f5a:	4605      	mov	r5, r0

	if (ctx->cb.close) {
   25f5c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   25f5e:	b11b      	cbz	r3, 25f68 <net_app_close+0x24>
		ctx->cb.close(ctx, 0, ctx->user_data);
   25f60:	6f22      	ldr	r2, [r4, #112]	; 0x70
   25f62:	2100      	movs	r1, #0
   25f64:	4620      	mov	r0, r4
   25f66:	4798      	blx	r3
			}
		}
	}
#endif

	if (net_ctx) {
   25f68:	b165      	cbz	r5, 25f84 <net_app_close+0x40>
		net_ctx->net_app = NULL;
   25f6a:	2400      	movs	r4, #0
   25f6c:	666c      	str	r4, [r5, #100]	; 0x64
		net_context_put(net_ctx);
   25f6e:	4628      	mov	r0, r5
   25f70:	f7f6 f9a2 	bl	1c2b8 <net_context_put>
	}

	return 0;
   25f74:	4620      	mov	r0, r4
   25f76:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   25f78:	f06f 0015 	mvn.w	r0, #21
   25f7c:	4770      	bx	lr
		return -ENOENT;
   25f7e:	f06f 0001 	mvn.w	r0, #1
   25f82:	bd38      	pop	{r3, r4, r5, pc}
	return 0;
   25f84:	2000      	movs	r0, #0
}
   25f86:	bd38      	pop	{r3, r4, r5, pc}

00025f88 <_net_app_bt_setup>:

static struct bt_gatt_service ipss_svc = BT_GATT_SERVICE(attrs);
#endif

int _net_app_bt_setup(void)
{
   25f88:	b510      	push	{r4, lr}
	struct net_if *iface;
	struct device *dev;
	int err;

	err = bt_enable(NULL);
   25f8a:	2000      	movs	r0, #0
   25f8c:	f7df fdec 	bl	5b68 <bt_enable>
	if (err < 0 && err != -EALREADY) {
   25f90:	1e03      	subs	r3, r0, #0
   25f92:	db14      	blt.n	25fbe <_net_app_bt_setup+0x36>
		return err;
	}

	dev = device_get_binding("net_bt");
   25f94:	4810      	ldr	r0, [pc, #64]	; (25fd8 <_net_app_bt_setup+0x50>)
   25f96:	f001 f939 	bl	2720c <device_get_binding>
	if (!dev) {
   25f9a:	b1b8      	cbz	r0, 25fcc <_net_app_bt_setup+0x44>
		return -ENODEV;
	}

	iface = net_if_lookup_by_dev(dev);
   25f9c:	f7f4 fc30 	bl	1a800 <net_if_lookup_by_dev>
	if (!iface) {
   25fa0:	4604      	mov	r4, r0
   25fa2:	b1b0      	cbz	r0, 25fd2 <_net_app_bt_setup+0x4a>
		return -EINVAL;
	}

#if defined(CONFIG_NET_APP_BT_NODE)
	bt_gatt_service_register(&ipss_svc);
   25fa4:	480d      	ldr	r0, [pc, #52]	; (25fdc <_net_app_bt_setup+0x54>)
   25fa6:	f7e3 fcf9 	bl	999c <bt_gatt_service_register>

	if (net_mgmt(NET_REQUEST_BT_ADVERTISE, iface, ADV_STR,
   25faa:	2303      	movs	r3, #3
   25fac:	4a0c      	ldr	r2, [pc, #48]	; (25fe0 <_net_app_bt_setup+0x58>)
   25fae:	4621      	mov	r1, r4
   25fb0:	480c      	ldr	r0, [pc, #48]	; (25fe4 <_net_app_bt_setup+0x5c>)
   25fb2:	f7f7 fe6b 	bl	1dc8c <net_mgmt_NET_REQUEST_BT_ADVERTISE>
   25fb6:	4603      	mov	r3, r0
   25fb8:	b928      	cbnz	r0, 25fc6 <_net_app_bt_setup+0x3e>
		return -EINVAL;
	}
#endif

	return 0;
}
   25fba:	4618      	mov	r0, r3
   25fbc:	bd10      	pop	{r4, pc}
	if (err < 0 && err != -EALREADY) {
   25fbe:	f113 0f78 	cmn.w	r3, #120	; 0x78
   25fc2:	d1fa      	bne.n	25fba <_net_app_bt_setup+0x32>
   25fc4:	e7e6      	b.n	25f94 <_net_app_bt_setup+0xc>
		return -EINVAL;
   25fc6:	f06f 0315 	mvn.w	r3, #21
   25fca:	e7f6      	b.n	25fba <_net_app_bt_setup+0x32>
		return -ENODEV;
   25fcc:	f06f 0312 	mvn.w	r3, #18
   25fd0:	e7f3      	b.n	25fba <_net_app_bt_setup+0x32>
		return -EINVAL;
   25fd2:	f06f 0315 	mvn.w	r3, #21
   25fd6:	e7f0      	b.n	25fba <_net_app_bt_setup+0x32>
   25fd8:	0002f738 	.word	0x0002f738
   25fdc:	2000c4ac 	.word	0x2000c4ac
   25fe0:	0002fb60 	.word	0x0002fb60
   25fe4:	61550001 	.word	0x61550001

00025fe8 <shell_run>:
#include <init.h>

#define SHELL_PROMPT "shell> "

int shell_run(struct device *dev)
{
   25fe8:	b508      	push	{r3, lr}
	ARG_UNUSED(dev);

	shell_init(SHELL_PROMPT);
   25fea:	4802      	ldr	r0, [pc, #8]	; (25ff4 <shell_run+0xc>)
   25fec:	f000 fbbe 	bl	2676c <shell_init>
	return 0;
}
   25ff0:	2000      	movs	r0, #0
   25ff2:	bd08      	pop	{r3, pc}
   25ff4:	00030a60 	.word	0x00030a60

00025ff8 <get_prompt>:

static shell_cmd_function_t app_cmd_handler;
static shell_prompt_function_t app_prompt_handler;

static const char *get_prompt(void)
{
   25ff8:	b508      	push	{r3, lr}
	if (app_prompt_handler) {
   25ffa:	4b0f      	ldr	r3, [pc, #60]	; (26038 <get_prompt+0x40>)
   25ffc:	681b      	ldr	r3, [r3, #0]
   25ffe:	b123      	cbz	r3, 2600a <get_prompt+0x12>
		const char *str;

		str = app_prompt_handler();
   26000:	4798      	blx	r3
		if (str) {
   26002:	4603      	mov	r3, r0
   26004:	b108      	cbz	r0, 2600a <get_prompt+0x12>

		return default_module_prompt;
	}

	return prompt;
}
   26006:	4618      	mov	r0, r3
   26008:	bd08      	pop	{r3, pc}
	if (default_module != -1) {
   2600a:	4b0c      	ldr	r3, [pc, #48]	; (2603c <get_prompt+0x44>)
   2600c:	681b      	ldr	r3, [r3, #0]
   2600e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   26012:	d00c      	beq.n	2602e <get_prompt+0x36>
		if (__shell_cmd_start[default_module].prompt) {
   26014:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   26018:	009a      	lsls	r2, r3, #2
   2601a:	4b09      	ldr	r3, [pc, #36]	; (26040 <get_prompt+0x48>)
   2601c:	4413      	add	r3, r2
   2601e:	689b      	ldr	r3, [r3, #8]
   26020:	b143      	cbz	r3, 26034 <get_prompt+0x3c>
			ret = __shell_cmd_start[default_module].prompt();
   26022:	4798      	blx	r3
			if (ret) {
   26024:	4603      	mov	r3, r0
   26026:	2800      	cmp	r0, #0
   26028:	d1ed      	bne.n	26006 <get_prompt+0xe>
		return default_module_prompt;
   2602a:	4b06      	ldr	r3, [pc, #24]	; (26044 <get_prompt+0x4c>)
   2602c:	e7eb      	b.n	26006 <get_prompt+0xe>
	return prompt;
   2602e:	4b06      	ldr	r3, [pc, #24]	; (26048 <get_prompt+0x50>)
   26030:	681b      	ldr	r3, [r3, #0]
   26032:	e7e8      	b.n	26006 <get_prompt+0xe>
		return default_module_prompt;
   26034:	4b03      	ldr	r3, [pc, #12]	; (26044 <get_prompt+0x4c>)
   26036:	e7e6      	b.n	26006 <get_prompt+0xe>
   26038:	20002408 	.word	0x20002408
   2603c:	2000c4b8 	.word	0x2000c4b8
   26040:	2000cf78 	.word	0x2000cf78
   26044:	200025b8 	.word	0x200025b8
   26048:	200025d0 	.word	0x200025d0

0002604c <exit_module>:
	return set_default_module(argv[1]);
}

static int exit_module(int argc, char *argv[])
{
	if (argc == 1) {
   2604c:	2801      	cmp	r0, #1
   2604e:	d001      	beq.n	26054 <exit_module+0x8>
		default_module = -1;
	}

	return 0;
}
   26050:	2000      	movs	r0, #0
   26052:	4770      	bx	lr
		default_module = -1;
   26054:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   26058:	4b01      	ldr	r3, [pc, #4]	; (26060 <exit_module+0x14>)
   2605a:	601a      	str	r2, [r3, #0]
   2605c:	e7f8      	b.n	26050 <exit_module+0x4>
   2605e:	bf00      	nop
   26060:	2000c4b8 	.word	0x2000c4b8

00026064 <print_module_commands>:
{
   26064:	b538      	push	{r3, r4, r5, lr}
   26066:	4605      	mov	r5, r0
	printk("help\n");
   26068:	480a      	ldr	r0, [pc, #40]	; (26094 <print_module_commands+0x30>)
   2606a:	f7dc ff6d 	bl	2f48 <printk>
	for (i = 0; shell_module->commands[i].cmd_name; i++) {
   2606e:	2400      	movs	r4, #0
   26070:	e003      	b.n	2607a <print_module_commands+0x16>
		printk("%s\n", shell_module->commands[i].cmd_name);
   26072:	4809      	ldr	r0, [pc, #36]	; (26098 <print_module_commands+0x34>)
   26074:	f7dc ff68 	bl	2f48 <printk>
	for (i = 0; shell_module->commands[i].cmd_name; i++) {
   26078:	3401      	adds	r4, #1
   2607a:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   2607e:	009a      	lsls	r2, r3, #2
   26080:	4b06      	ldr	r3, [pc, #24]	; (2609c <print_module_commands+0x38>)
   26082:	4413      	add	r3, r2
   26084:	6859      	ldr	r1, [r3, #4]
   26086:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   2608a:	0093      	lsls	r3, r2, #2
   2608c:	58c9      	ldr	r1, [r1, r3]
   2608e:	2900      	cmp	r1, #0
   26090:	d1ef      	bne.n	26072 <print_module_commands+0xe>
}
   26092:	bd38      	pop	{r3, r4, r5, pc}
   26094:	00030b1c 	.word	0x00030b1c
   26098:	0002fd38 	.word	0x0002fd38
   2609c:	2000cf78 	.word	0x2000cf78

000260a0 <line2argv>:
{
   260a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   260a2:	4604      	mov	r4, r0
   260a4:	460e      	mov	r6, r1
   260a6:	4617      	mov	r7, r2
	if (!strlen(str)) {
   260a8:	f7da fb2a 	bl	700 <strlen>
   260ac:	b918      	cbnz	r0, 260b6 <line2argv+0x16>
   260ae:	4605      	mov	r5, r0
}
   260b0:	4628      	mov	r0, r5
   260b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		str++;
   260b4:	3401      	adds	r4, #1
	while (*str && *str == ' ') {
   260b6:	7823      	ldrb	r3, [r4, #0]
   260b8:	2b20      	cmp	r3, #32
   260ba:	d0fb      	beq.n	260b4 <line2argv+0x14>
	if (!*str) {
   260bc:	b30b      	cbz	r3, 26102 <line2argv+0x62>
	argv[argc++] = str;
   260be:	6034      	str	r4, [r6, #0]
   260c0:	2501      	movs	r5, #1
	while ((str = strchr(str, ' '))) {
   260c2:	e00a      	b.n	260da <line2argv+0x3a>
			str++;
   260c4:	3401      	adds	r4, #1
		while (*str && *str == ' ') {
   260c6:	7823      	ldrb	r3, [r4, #0]
   260c8:	2b20      	cmp	r3, #32
   260ca:	d0fb      	beq.n	260c4 <line2argv+0x24>
		if (!*str) {
   260cc:	b1ab      	cbz	r3, 260fa <line2argv+0x5a>
		argv[argc++] = str;
   260ce:	1c6b      	adds	r3, r5, #1
   260d0:	f846 4025 	str.w	r4, [r6, r5, lsl #2]
		if (argc == size) {
   260d4:	42bb      	cmp	r3, r7
   260d6:	d00a      	beq.n	260ee <line2argv+0x4e>
		argv[argc++] = str;
   260d8:	461d      	mov	r5, r3
	while ((str = strchr(str, ' '))) {
   260da:	2120      	movs	r1, #32
   260dc:	4620      	mov	r0, r4
   260de:	f004 fd8b 	bl	2abf8 <strchr>
   260e2:	4603      	mov	r3, r0
   260e4:	b148      	cbz	r0, 260fa <line2argv+0x5a>
		*str++ = '\0';
   260e6:	1c5c      	adds	r4, r3, #1
   260e8:	2200      	movs	r2, #0
   260ea:	701a      	strb	r2, [r3, #0]
		while (*str && *str == ' ') {
   260ec:	e7eb      	b.n	260c6 <line2argv+0x26>
			printk("Too many parameters (max %zu)\n", size - 1);
   260ee:	1e79      	subs	r1, r7, #1
   260f0:	4805      	ldr	r0, [pc, #20]	; (26108 <line2argv+0x68>)
   260f2:	f7dc ff29 	bl	2f48 <printk>
			return 0;
   260f6:	2500      	movs	r5, #0
   260f8:	e7da      	b.n	260b0 <line2argv+0x10>
	argv[argc] = NULL;
   260fa:	2300      	movs	r3, #0
   260fc:	f846 3025 	str.w	r3, [r6, r5, lsl #2]
	return argc;
   26100:	e7d6      	b.n	260b0 <line2argv+0x10>
		return 0;
   26102:	2500      	movs	r5, #0
   26104:	e7d4      	b.n	260b0 <line2argv+0x10>
   26106:	bf00      	nop
   26108:	00030afc 	.word	0x00030afc

0002610c <get_destination_module>:
{
   2610c:	b538      	push	{r3, r4, r5, lr}
   2610e:	4605      	mov	r5, r0
	for (i = 0; i < NUM_OF_SHELL_ENTITIES; i++) {
   26110:	2400      	movs	r4, #0
   26112:	4a0c      	ldr	r2, [pc, #48]	; (26144 <get_destination_module+0x38>)
   26114:	4b0c      	ldr	r3, [pc, #48]	; (26148 <get_destination_module+0x3c>)
   26116:	1a9b      	subs	r3, r3, r2
   26118:	109b      	asrs	r3, r3, #2
   2611a:	4a0c      	ldr	r2, [pc, #48]	; (2614c <get_destination_module+0x40>)
   2611c:	fb02 f303 	mul.w	r3, r2, r3
   26120:	429c      	cmp	r4, r3
   26122:	da0b      	bge.n	2613c <get_destination_module+0x30>
		if (!strncmp(module_str,
   26124:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   26128:	0093      	lsls	r3, r2, #2
   2612a:	2214      	movs	r2, #20
   2612c:	4905      	ldr	r1, [pc, #20]	; (26144 <get_destination_module+0x38>)
   2612e:	58c9      	ldr	r1, [r1, r3]
   26130:	4628      	mov	r0, r5
   26132:	f004 fe33 	bl	2ad9c <strncmp>
   26136:	b118      	cbz	r0, 26140 <get_destination_module+0x34>
	for (i = 0; i < NUM_OF_SHELL_ENTITIES; i++) {
   26138:	3401      	adds	r4, #1
   2613a:	e7ea      	b.n	26112 <get_destination_module+0x6>
	return -1;
   2613c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
   26140:	4620      	mov	r0, r4
   26142:	bd38      	pop	{r3, r4, r5, pc}
   26144:	2000cf78 	.word	0x2000cf78
   26148:	2000cf84 	.word	0x2000cf84
   2614c:	aaaaaaab 	.word	0xaaaaaaab

00026150 <set_default_module>:
{
   26150:	b538      	push	{r3, r4, r5, lr}
   26152:	4604      	mov	r4, r0
	if (strlen(name) > MODULE_NAME_MAX_LEN) {
   26154:	f7da fad4 	bl	700 <strlen>
   26158:	2814      	cmp	r0, #20
   2615a:	d813      	bhi.n	26184 <set_default_module+0x34>
	module = get_destination_module(name);
   2615c:	4620      	mov	r0, r4
   2615e:	f7ff ffd5 	bl	2610c <get_destination_module>
	if (module == -1) {
   26162:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   26166:	d014      	beq.n	26192 <set_default_module+0x42>
	default_module = module;
   26168:	4b0d      	ldr	r3, [pc, #52]	; (261a0 <set_default_module+0x50>)
   2616a:	6018      	str	r0, [r3, #0]
	strncpy(default_module_prompt, name, MODULE_NAME_MAX_LEN);
   2616c:	4d0d      	ldr	r5, [pc, #52]	; (261a4 <set_default_module+0x54>)
   2616e:	2214      	movs	r2, #20
   26170:	4621      	mov	r1, r4
   26172:	4628      	mov	r0, r5
   26174:	f004 fe64 	bl	2ae40 <strncpy>
	strcat(default_module_prompt, "> ");
   26178:	490b      	ldr	r1, [pc, #44]	; (261a8 <set_default_module+0x58>)
   2617a:	4628      	mov	r0, r5
   2617c:	f004 fd1c 	bl	2abb8 <strcat>
	return 0;
   26180:	2000      	movs	r0, #0
}
   26182:	bd38      	pop	{r3, r4, r5, pc}
		printk("Module name %s is too long, default is not changed\n",
   26184:	4621      	mov	r1, r4
   26186:	4809      	ldr	r0, [pc, #36]	; (261ac <set_default_module+0x5c>)
   26188:	f7dc fede 	bl	2f48 <printk>
		return -EINVAL;
   2618c:	f06f 0015 	mvn.w	r0, #21
   26190:	bd38      	pop	{r3, r4, r5, pc}
		printk("Illegal module %s, default is not changed\n", name);
   26192:	4621      	mov	r1, r4
   26194:	4806      	ldr	r0, [pc, #24]	; (261b0 <set_default_module+0x60>)
   26196:	f7dc fed7 	bl	2f48 <printk>
		return -EINVAL;
   2619a:	f06f 0015 	mvn.w	r0, #21
   2619e:	bd38      	pop	{r3, r4, r5, pc}
   261a0:	2000c4b8 	.word	0x2000c4b8
   261a4:	200025b8 	.word	0x200025b8
   261a8:	00030b84 	.word	0x00030b84
   261ac:	00030b24 	.word	0x00030b24
   261b0:	00030b58 	.word	0x00030b58

000261b4 <select_module>:
{
   261b4:	b508      	push	{r3, lr}
	if (argc == 1) {
   261b6:	2801      	cmp	r0, #1
   261b8:	d003      	beq.n	261c2 <select_module+0xe>
	return set_default_module(argv[1]);
   261ba:	6848      	ldr	r0, [r1, #4]
   261bc:	f7ff ffc8 	bl	26150 <set_default_module>
}
   261c0:	bd08      	pop	{r3, pc}
		default_module = -1;
   261c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   261c6:	4b02      	ldr	r3, [pc, #8]	; (261d0 <select_module+0x1c>)
   261c8:	601a      	str	r2, [r3, #0]
		return 0;
   261ca:	2000      	movs	r0, #0
   261cc:	bd08      	pop	{r3, pc}
   261ce:	bf00      	nop
   261d0:	2000c4b8 	.word	0x2000c4b8

000261d4 <get_command_and_module>:
{
   261d4:	b538      	push	{r3, r4, r5, lr}
   261d6:	4604      	mov	r4, r0
	*module = -1;
   261d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   261dc:	600b      	str	r3, [r1, #0]
	if (!argv[0]) {
   261de:	6800      	ldr	r0, [r0, #0]
   261e0:	b140      	cbz	r0, 261f4 <get_command_and_module+0x20>
   261e2:	460d      	mov	r5, r1
	if (default_module == -1) {
   261e4:	4b12      	ldr	r3, [pc, #72]	; (26230 <get_command_and_module+0x5c>)
   261e6:	681b      	ldr	r3, [r3, #0]
   261e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   261ec:	d007      	beq.n	261fe <get_command_and_module+0x2a>
	*module = default_module;
   261ee:	600b      	str	r3, [r1, #0]
	return argv[0];
   261f0:	6820      	ldr	r0, [r4, #0]
}
   261f2:	bd38      	pop	{r3, r4, r5, pc}
		printk("Unrecognized command\n");
   261f4:	480f      	ldr	r0, [pc, #60]	; (26234 <get_command_and_module+0x60>)
   261f6:	f7dc fea7 	bl	2f48 <printk>
		return NULL;
   261fa:	2000      	movs	r0, #0
   261fc:	bd38      	pop	{r3, r4, r5, pc}
		if (!argv[1] || argv[1][0] == '\0') {
   261fe:	6863      	ldr	r3, [r4, #4]
   26200:	b14b      	cbz	r3, 26216 <get_command_and_module+0x42>
   26202:	781b      	ldrb	r3, [r3, #0]
   26204:	b13b      	cbz	r3, 26216 <get_command_and_module+0x42>
		*module = get_destination_module(argv[0]);
   26206:	f7ff ff81 	bl	2610c <get_destination_module>
   2620a:	6028      	str	r0, [r5, #0]
		if (*module == -1) {
   2620c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   26210:	d007      	beq.n	26222 <get_command_and_module+0x4e>
		return argv[1];
   26212:	6860      	ldr	r0, [r4, #4]
   26214:	bd38      	pop	{r3, r4, r5, pc}
			printk("Unrecognized command: %s\n", argv[0]);
   26216:	4601      	mov	r1, r0
   26218:	4807      	ldr	r0, [pc, #28]	; (26238 <get_command_and_module+0x64>)
   2621a:	f7dc fe95 	bl	2f48 <printk>
			return NULL;
   2621e:	2000      	movs	r0, #0
   26220:	bd38      	pop	{r3, r4, r5, pc}
			printk("Illegal module %s\n", argv[0]);
   26222:	6821      	ldr	r1, [r4, #0]
   26224:	4805      	ldr	r0, [pc, #20]	; (2623c <get_command_and_module+0x68>)
   26226:	f7dc fe8f 	bl	2f48 <printk>
			return NULL;
   2622a:	2000      	movs	r0, #0
   2622c:	bd38      	pop	{r3, r4, r5, pc}
   2622e:	bf00      	nop
   26230:	2000c4b8 	.word	0x2000c4b8
   26234:	00030ab4 	.word	0x00030ab4
   26238:	00030acc 	.word	0x00030acc
   2623c:	00030ae8 	.word	0x00030ae8

00026240 <get_cb>:

static shell_cmd_function_t get_cb(int *argc, char *argv[], int *module)
{
   26240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const char *first_string = argv[0];
   26242:	680c      	ldr	r4, [r1, #0]
	const struct shell_module *shell_module;
	const char *command;
	int i;

	if (!first_string || first_string[0] == '\0') {
   26244:	b15c      	cbz	r4, 2625e <get_cb+0x1e>
   26246:	4606      	mov	r6, r0
   26248:	460d      	mov	r5, r1
   2624a:	4617      	mov	r7, r2
   2624c:	7823      	ldrb	r3, [r4, #0]
   2624e:	b133      	cbz	r3, 2625e <get_cb+0x1e>
		printk("Illegal parameter\n");
		return NULL;
	}

	if (!strcmp(first_string, "help")) {
   26250:	4929      	ldr	r1, [pc, #164]	; (262f8 <get_cb+0xb8>)
   26252:	4620      	mov	r0, r4
   26254:	f7da f8d8 	bl	408 <strcmp>
   26258:	b930      	cbnz	r0, 26268 <get_cb+0x28>
		return show_help;
   2625a:	4828      	ldr	r0, [pc, #160]	; (262fc <get_cb+0xbc>)
   2625c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		printk("Illegal parameter\n");
   2625e:	4828      	ldr	r0, [pc, #160]	; (26300 <get_cb+0xc0>)
   26260:	f7dc fe72 	bl	2f48 <printk>
		return NULL;
   26264:	2000      	movs	r0, #0
   26266:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}

	if (!strcmp(first_string, "select")) {
   26268:	4926      	ldr	r1, [pc, #152]	; (26304 <get_cb+0xc4>)
   2626a:	4620      	mov	r0, r4
   2626c:	f7da f8cc 	bl	408 <strcmp>
   26270:	b908      	cbnz	r0, 26276 <get_cb+0x36>
		return select_module;
   26272:	4825      	ldr	r0, [pc, #148]	; (26308 <get_cb+0xc8>)
   26274:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}

	if (!strcmp(first_string, "exit")) {
   26276:	4925      	ldr	r1, [pc, #148]	; (2630c <get_cb+0xcc>)
   26278:	4620      	mov	r0, r4
   2627a:	f7da f8c5 	bl	408 <strcmp>
   2627e:	2800      	cmp	r0, #0
   26280:	d034      	beq.n	262ec <get_cb+0xac>
		return exit_module;
	}

	if ((*argc == 1) && (default_module == -1)) {
   26282:	6833      	ldr	r3, [r6, #0]
   26284:	2b01      	cmp	r3, #1
   26286:	d01c      	beq.n	262c2 <get_cb+0x82>
		printk("Missing parameter\n");
		return NULL;
	}

	command = get_command_and_module(argv, module);
   26288:	4639      	mov	r1, r7
   2628a:	4628      	mov	r0, r5
   2628c:	f7ff ffa2 	bl	261d4 <get_command_and_module>
   26290:	4606      	mov	r6, r0
	if ((*module == -1) || (command == NULL)) {
   26292:	683d      	ldr	r5, [r7, #0]
   26294:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   26298:	d02a      	beq.n	262f0 <get_cb+0xb0>
   2629a:	b358      	cbz	r0, 262f4 <get_cb+0xb4>
   2629c:	2400      	movs	r4, #0
		return NULL;
	}

	shell_module = &__shell_cmd_start[*module];
	for (i = 0; shell_module->commands[i].cmd_name; i++) {
   2629e:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   262a2:	009a      	lsls	r2, r3, #2
   262a4:	4b1a      	ldr	r3, [pc, #104]	; (26310 <get_cb+0xd0>)
   262a6:	4413      	add	r3, r2
   262a8:	6859      	ldr	r1, [r3, #4]
   262aa:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   262ae:	0093      	lsls	r3, r2, #2
   262b0:	461f      	mov	r7, r3
   262b2:	58c9      	ldr	r1, [r1, r3]
   262b4:	b1c1      	cbz	r1, 262e8 <get_cb+0xa8>
		if (!strcmp(command, shell_module->commands[i].cmd_name)) {
   262b6:	4630      	mov	r0, r6
   262b8:	f7da f8a6 	bl	408 <strcmp>
   262bc:	b158      	cbz	r0, 262d6 <get_cb+0x96>
	for (i = 0; shell_module->commands[i].cmd_name; i++) {
   262be:	3401      	adds	r4, #1
   262c0:	e7ed      	b.n	2629e <get_cb+0x5e>
	if ((*argc == 1) && (default_module == -1)) {
   262c2:	4b14      	ldr	r3, [pc, #80]	; (26314 <get_cb+0xd4>)
   262c4:	681b      	ldr	r3, [r3, #0]
   262c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   262ca:	d1dd      	bne.n	26288 <get_cb+0x48>
		printk("Missing parameter\n");
   262cc:	4812      	ldr	r0, [pc, #72]	; (26318 <get_cb+0xd8>)
   262ce:	f7dc fe3b 	bl	2f48 <printk>
		return NULL;
   262d2:	2000      	movs	r0, #0
   262d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return shell_module->commands[i].cb;
   262d6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   262da:	00aa      	lsls	r2, r5, #2
   262dc:	4b0c      	ldr	r3, [pc, #48]	; (26310 <get_cb+0xd0>)
   262de:	4413      	add	r3, r2
   262e0:	685b      	ldr	r3, [r3, #4]
   262e2:	441f      	add	r7, r3
   262e4:	6878      	ldr	r0, [r7, #4]
   262e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
	}

	return NULL;
   262e8:	2000      	movs	r0, #0
   262ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return exit_module;
   262ec:	480b      	ldr	r0, [pc, #44]	; (2631c <get_cb+0xdc>)
   262ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return NULL;
   262f0:	2000      	movs	r0, #0
   262f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   262f4:	2000      	movs	r0, #0
}
   262f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   262f8:	00030a88 	.word	0x00030a88
   262fc:	000263c1 	.word	0x000263c1
   26300:	00030a74 	.word	0x00030a74
   26304:	00030a90 	.word	0x00030a90
   26308:	000261b5 	.word	0x000261b5
   2630c:	00030a98 	.word	0x00030a98
   26310:	2000cf78 	.word	0x2000cf78
   26314:	2000c4b8 	.word	0x2000c4b8
   26318:	00030aa0 	.word	0x00030aa0
   2631c:	0002604d 	.word	0x0002604d

00026320 <show_cmd_help>:
{
   26320:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   26324:	b083      	sub	sp, #12
   26326:	4607      	mov	r7, r0
	int module = -1;
   26328:	a902      	add	r1, sp, #8
   2632a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2632e:	f841 3d04 	str.w	r3, [r1, #-4]!
	command = get_command_and_module(argv, &module);
   26332:	f7ff ff4f 	bl	261d4 <get_command_and_module>
	if ((module == -1) || (command == NULL)) {
   26336:	9d01      	ldr	r5, [sp, #4]
   26338:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   2633c:	d031      	beq.n	263a2 <show_cmd_help+0x82>
   2633e:	4606      	mov	r6, r0
   26340:	b390      	cbz	r0, 263a8 <show_cmd_help+0x88>
   26342:	2400      	movs	r4, #0
	for (i = 0; shell_module->commands[i].cmd_name; i++) {
   26344:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   26348:	009a      	lsls	r2, r3, #2
   2634a:	4b19      	ldr	r3, [pc, #100]	; (263b0 <show_cmd_help+0x90>)
   2634c:	4413      	add	r3, r2
   2634e:	6859      	ldr	r1, [r3, #4]
   26350:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   26354:	0093      	lsls	r3, r2, #2
   26356:	4698      	mov	r8, r3
   26358:	58c9      	ldr	r1, [r1, r3]
   2635a:	b1c1      	cbz	r1, 2638e <show_cmd_help+0x6e>
		if (!strcmp(command, shell_module->commands[i].cmd_name)) {
   2635c:	4630      	mov	r0, r6
   2635e:	f7da f853 	bl	408 <strcmp>
   26362:	4681      	mov	r9, r0
   26364:	b108      	cbz	r0, 2636a <show_cmd_help+0x4a>
	for (i = 0; shell_module->commands[i].cmd_name; i++) {
   26366:	3401      	adds	r4, #1
   26368:	e7ec      	b.n	26344 <show_cmd_help+0x24>
			       shell_module->commands[i].cmd_name,
   2636a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   2636e:	00aa      	lsls	r2, r5, #2
   26370:	4b0f      	ldr	r3, [pc, #60]	; (263b0 <show_cmd_help+0x90>)
   26372:	4413      	add	r3, r2
   26374:	685b      	ldr	r3, [r3, #4]
   26376:	eb03 0208 	add.w	r2, r3, r8
			printk("%s %s\n",
   2637a:	f853 1008 	ldr.w	r1, [r3, r8]
			       shell_module->commands[i].help ?
   2637e:	6892      	ldr	r2, [r2, #8]
			printk("%s %s\n",
   26380:	b11a      	cbz	r2, 2638a <show_cmd_help+0x6a>
   26382:	480c      	ldr	r0, [pc, #48]	; (263b4 <show_cmd_help+0x94>)
   26384:	f7dc fde0 	bl	2f48 <printk>
			return 0;
   26388:	e007      	b.n	2639a <show_cmd_help+0x7a>
			printk("%s %s\n",
   2638a:	4a0b      	ldr	r2, [pc, #44]	; (263b8 <show_cmd_help+0x98>)
   2638c:	e7f9      	b.n	26382 <show_cmd_help+0x62>
	printk("Unrecognized command: %s\n", argv[0]);
   2638e:	6839      	ldr	r1, [r7, #0]
   26390:	480a      	ldr	r0, [pc, #40]	; (263bc <show_cmd_help+0x9c>)
   26392:	f7dc fdd9 	bl	2f48 <printk>
	return -EINVAL;
   26396:	f06f 0915 	mvn.w	r9, #21
}
   2639a:	4648      	mov	r0, r9
   2639c:	b003      	add	sp, #12
   2639e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return 0;
   263a2:	f04f 0900 	mov.w	r9, #0
   263a6:	e7f8      	b.n	2639a <show_cmd_help+0x7a>
   263a8:	f04f 0900 	mov.w	r9, #0
   263ac:	e7f5      	b.n	2639a <show_cmd_help+0x7a>
   263ae:	bf00      	nop
   263b0:	2000cf78 	.word	0x2000cf78
   263b4:	00030bb4 	.word	0x00030bb4
   263b8:	0002f390 	.word	0x0002f390
   263bc:	00030acc 	.word	0x00030acc

000263c0 <show_help>:
{
   263c0:	b510      	push	{r4, lr}
   263c2:	460c      	mov	r4, r1
	if ((argc > 2) || ((default_module != -1) && (argc == 2))) {
   263c4:	2802      	cmp	r0, #2
   263c6:	dc12      	bgt.n	263ee <show_help+0x2e>
   263c8:	4b23      	ldr	r3, [pc, #140]	; (26458 <show_help+0x98>)
   263ca:	681b      	ldr	r3, [r3, #0]
   263cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   263d0:	d001      	beq.n	263d6 <show_help+0x16>
   263d2:	2802      	cmp	r0, #2
   263d4:	d00b      	beq.n	263ee <show_help+0x2e>
	if ((argc == 2) || ((default_module != -1) && (argc == 1))) {
   263d6:	2802      	cmp	r0, #2
   263d8:	d00d      	beq.n	263f6 <show_help+0x36>
   263da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   263de:	d001      	beq.n	263e4 <show_help+0x24>
   263e0:	2801      	cmp	r0, #1
   263e2:	d008      	beq.n	263f6 <show_help+0x36>
		printk("Available modules:\n");
   263e4:	481d      	ldr	r0, [pc, #116]	; (2645c <show_help+0x9c>)
   263e6:	f7dc fdaf 	bl	2f48 <printk>
		for (module = 0; module < NUM_OF_SHELL_ENTITIES; module++) {
   263ea:	2400      	movs	r4, #0
   263ec:	e025      	b.n	2643a <show_help+0x7a>
		return show_cmd_help(&argv[1]);
   263ee:	1d20      	adds	r0, r4, #4
   263f0:	f7ff ff96 	bl	26320 <show_cmd_help>
   263f4:	bd10      	pop	{r4, pc}
		if (default_module == -1) {
   263f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   263fa:	d007      	beq.n	2640c <show_help+0x4c>
		print_module_commands(module);
   263fc:	4618      	mov	r0, r3
   263fe:	f7ff fe31 	bl	26064 <print_module_commands>
		printk("\nEnter 'exit' to leave current module.\n");
   26402:	4817      	ldr	r0, [pc, #92]	; (26460 <show_help+0xa0>)
   26404:	f7dc fda0 	bl	2f48 <printk>
	return 0;
   26408:	2000      	movs	r0, #0
		printk("\nEnter 'exit' to leave current module.\n");
   2640a:	bd10      	pop	{r4, pc}
			module = get_destination_module(argv[1]);
   2640c:	6860      	ldr	r0, [r4, #4]
   2640e:	f7ff fe7d 	bl	2610c <get_destination_module>
   26412:	4603      	mov	r3, r0
			if (module == -1) {
   26414:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   26418:	d1f0      	bne.n	263fc <show_help+0x3c>
				printk("Illegal module %s\n", argv[1]);
   2641a:	6861      	ldr	r1, [r4, #4]
   2641c:	4811      	ldr	r0, [pc, #68]	; (26464 <show_help+0xa4>)
   2641e:	f7dc fd93 	bl	2f48 <printk>
				return -EINVAL;
   26422:	f06f 0015 	mvn.w	r0, #21
   26426:	bd10      	pop	{r4, pc}
			printk("%s\n", __shell_cmd_start[module].module_name);
   26428:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   2642c:	0093      	lsls	r3, r2, #2
   2642e:	4a0e      	ldr	r2, [pc, #56]	; (26468 <show_help+0xa8>)
   26430:	58d1      	ldr	r1, [r2, r3]
   26432:	480e      	ldr	r0, [pc, #56]	; (2646c <show_help+0xac>)
   26434:	f7dc fd88 	bl	2f48 <printk>
		for (module = 0; module < NUM_OF_SHELL_ENTITIES; module++) {
   26438:	3401      	adds	r4, #1
   2643a:	4a0b      	ldr	r2, [pc, #44]	; (26468 <show_help+0xa8>)
   2643c:	4b0c      	ldr	r3, [pc, #48]	; (26470 <show_help+0xb0>)
   2643e:	1a9b      	subs	r3, r3, r2
   26440:	109b      	asrs	r3, r3, #2
   26442:	4a0c      	ldr	r2, [pc, #48]	; (26474 <show_help+0xb4>)
   26444:	fb02 f303 	mul.w	r3, r2, r3
   26448:	429c      	cmp	r4, r3
   2644a:	dbed      	blt.n	26428 <show_help+0x68>
		printk("\nTo select a module, enter 'select <module name>'.\n");
   2644c:	480a      	ldr	r0, [pc, #40]	; (26478 <show_help+0xb8>)
   2644e:	f7dc fd7b 	bl	2f48 <printk>
	return 0;
   26452:	2000      	movs	r0, #0
}
   26454:	bd10      	pop	{r4, pc}
   26456:	bf00      	nop
   26458:	2000c4b8 	.word	0x2000c4b8
   2645c:	00030be4 	.word	0x00030be4
   26460:	00030bbc 	.word	0x00030bbc
   26464:	00030ae8 	.word	0x00030ae8
   26468:	2000cf78 	.word	0x2000cf78
   2646c:	0002fd38 	.word	0x0002fd38
   26470:	2000cf84 	.word	0x2000cf84
   26474:	aaaaaaab 	.word	0xaaaaaaab
   26478:	00030bf8 	.word	0x00030bf8

0002647c <get_command_to_complete>:
		k_fifo_put(&avail_queue, cmd);
	}
}

static int get_command_to_complete(char *str, char **command_prefix)
{
   2647c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26480:	b086      	sub	sp, #24
   26482:	4604      	mov	r4, r0
   26484:	4688      	mov	r8, r1
	char dest_str[MODULE_NAME_MAX_LEN];
	int dest = -1;
	char *start;

	/* remove ' ' at the beginning of the line */
	while (*str && *str == ' ') {
   26486:	e000      	b.n	2648a <get_command_to_complete+0xe>
		str++;
   26488:	3401      	adds	r4, #1
	while (*str && *str == ' ') {
   2648a:	7823      	ldrb	r3, [r4, #0]
   2648c:	2b20      	cmp	r3, #32
   2648e:	d0fb      	beq.n	26488 <get_command_to_complete+0xc>
	}

	if (!*str) {
   26490:	b3a3      	cbz	r3, 264fc <get_command_to_complete+0x80>
		return -1;
	}

	start = str;

	if (default_module != -1) {
   26492:	4b1f      	ldr	r3, [pc, #124]	; (26510 <get_command_to_complete+0x94>)
   26494:	681d      	ldr	r5, [r3, #0]
   26496:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   2649a:	d001      	beq.n	264a0 <get_command_to_complete+0x24>
		dest = default_module;
		/* caller function already checks str len and put '\0' */
		*command_prefix = str;
   2649c:	f8c8 4000 	str.w	r4, [r8]

	/*
	 * In case of a default module: only one parameter is possible.
	 * Otherwise, only two parameters are possibles.
	 */
	str = strchr(str, ' ');
   264a0:	2120      	movs	r1, #32
   264a2:	4620      	mov	r0, r4
   264a4:	f004 fba8 	bl	2abf8 <strchr>
   264a8:	4606      	mov	r6, r0
	if (default_module != -1) {
   264aa:	4b19      	ldr	r3, [pc, #100]	; (26510 <get_command_to_complete+0x94>)
   264ac:	681f      	ldr	r7, [r3, #0]
   264ae:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
   264b2:	d004      	beq.n	264be <get_command_to_complete+0x42>
		return (str == NULL) ? dest : -1;
   264b4:	bb28      	cbnz	r0, 26502 <get_command_to_complete+0x86>
	*command_prefix = str;
	str = strchr(str, ' ');

	/* only two parameters are possibles in case of no default module */
	return (str == NULL) ? dest : -1;
}
   264b6:	4628      	mov	r0, r5
   264b8:	b006      	add	sp, #24
   264ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (str == NULL) {
   264be:	b318      	cbz	r0, 26508 <get_command_to_complete+0x8c>
	if ((str - start + 1) >= MODULE_NAME_MAX_LEN) {
   264c0:	1b05      	subs	r5, r0, r4
   264c2:	1c6a      	adds	r2, r5, #1
   264c4:	2a13      	cmp	r2, #19
   264c6:	dc21      	bgt.n	2650c <get_command_to_complete+0x90>
	strncpy(dest_str, start, (str - start + 1));
   264c8:	4621      	mov	r1, r4
   264ca:	a801      	add	r0, sp, #4
   264cc:	f004 fcb8 	bl	2ae40 <strncpy>
	dest_str[str - start] = '\0';
   264d0:	ab06      	add	r3, sp, #24
   264d2:	441d      	add	r5, r3
   264d4:	2300      	movs	r3, #0
   264d6:	f805 3c14 	strb.w	r3, [r5, #-20]
	dest = get_destination_module(dest_str);
   264da:	a801      	add	r0, sp, #4
   264dc:	f7ff fe16 	bl	2610c <get_destination_module>
   264e0:	4605      	mov	r5, r0
	if (dest == -1) {
   264e2:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   264e6:	d0e6      	beq.n	264b6 <get_command_to_complete+0x3a>
	str++;
   264e8:	1c70      	adds	r0, r6, #1
	*command_prefix = str;
   264ea:	f8c8 0000 	str.w	r0, [r8]
	str = strchr(str, ' ');
   264ee:	2120      	movs	r1, #32
   264f0:	f004 fb82 	bl	2abf8 <strchr>
	return (str == NULL) ? dest : -1;
   264f4:	2800      	cmp	r0, #0
   264f6:	d0de      	beq.n	264b6 <get_command_to_complete+0x3a>
   264f8:	463d      	mov	r5, r7
   264fa:	e7dc      	b.n	264b6 <get_command_to_complete+0x3a>
		return -1;
   264fc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   26500:	e7d9      	b.n	264b6 <get_command_to_complete+0x3a>
		return (str == NULL) ? dest : -1;
   26502:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   26506:	e7d6      	b.n	264b6 <get_command_to_complete+0x3a>
		return -1;
   26508:	463d      	mov	r5, r7
   2650a:	e7d4      	b.n	264b6 <get_command_to_complete+0x3a>
		return -1;
   2650c:	463d      	mov	r5, r7
   2650e:	e7d2      	b.n	264b6 <get_command_to_complete+0x3a>
   26510:	2000c4b8 	.word	0x2000c4b8

00026514 <completion>:

static u8_t completion(char *line, u8_t len)
{
   26514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26518:	b087      	sub	sp, #28
   2651a:	9002      	str	r0, [sp, #8]
	int common_chars = -1, space = 0;
	int i, dest, command_len;
	const struct shell_module *module;
	char *command_prefix;

	if (len >= (MODULE_NAME_MAX_LEN + COMMAND_MAX_LEN - 1)) {
   2651c:	2944      	cmp	r1, #68	; 0x44
   2651e:	d903      	bls.n	26528 <completion+0x14>
		return 0;
   26520:	2000      	movs	r0, #0
		printk(" ");
		line[len] = ' ';
	}

	return common_chars - command_len + space;
}
   26522:	b007      	add	sp, #28
   26524:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26528:	4689      	mov	r9, r1
	line[len] = '\0';
   2652a:	2300      	movs	r3, #0
   2652c:	5443      	strb	r3, [r0, r1]
	dest = get_command_to_complete(line, &command_prefix);
   2652e:	a905      	add	r1, sp, #20
   26530:	f7ff ffa4 	bl	2647c <get_command_to_complete>
   26534:	4605      	mov	r5, r0
	if (dest == -1) {
   26536:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   2653a:	f000 808f 	beq.w	2665c <completion+0x148>
	command_len = strlen(command_prefix);
   2653e:	9805      	ldr	r0, [sp, #20]
   26540:	f7da f8de 	bl	700 <strlen>
   26544:	9001      	str	r0, [sp, #4]
	for (i = 0; module->commands[i].cmd_name; i++) {
   26546:	f04f 0b00 	mov.w	fp, #0
	int common_chars = -1, space = 0;
   2654a:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
	const char *first_match = NULL;
   2654e:	465f      	mov	r7, fp
   26550:	9003      	str	r0, [sp, #12]
	for (i = 0; module->commands[i].cmd_name; i++) {
   26552:	e01f      	b.n	26594 <completion+0x80>
			first_match = module->commands[i].cmd_name;
   26554:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   26558:	009a      	lsls	r2, r3, #2
   2655a:	4b42      	ldr	r3, [pc, #264]	; (26664 <completion+0x150>)
   2655c:	4413      	add	r3, r2
   2655e:	685b      	ldr	r3, [r3, #4]
   26560:	f853 700a 	ldr.w	r7, [r3, sl]
			continue;
   26564:	e014      	b.n	26590 <completion+0x7c>
			printk("\n%s\n", first_match);
   26566:	4639      	mov	r1, r7
   26568:	483f      	ldr	r0, [pc, #252]	; (26668 <completion+0x154>)
   2656a:	f7dc fced 	bl	2f48 <printk>
			common_chars = strlen(first_match);
   2656e:	4638      	mov	r0, r7
   26570:	f7da f8c6 	bl	700 <strlen>
   26574:	4606      	mov	r6, r0
		for (j = 0; j < common_chars; j++) {
   26576:	e026      	b.n	265c6 <completion+0xb2>
		printk("%s\n", module->commands[i].cmd_name);
   26578:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   2657c:	009a      	lsls	r2, r3, #2
   2657e:	4b39      	ldr	r3, [pc, #228]	; (26664 <completion+0x150>)
   26580:	4413      	add	r3, r2
   26582:	685b      	ldr	r3, [r3, #4]
   26584:	f853 100a 	ldr.w	r1, [r3, sl]
   26588:	4838      	ldr	r0, [pc, #224]	; (2666c <completion+0x158>)
   2658a:	f7dc fcdd 	bl	2f48 <printk>
		common_chars = j;
   2658e:	4626      	mov	r6, r4
	for (i = 0; module->commands[i].cmd_name; i++) {
   26590:	f10b 0b01 	add.w	fp, fp, #1
   26594:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   26598:	009a      	lsls	r2, r3, #2
   2659a:	4b32      	ldr	r3, [pc, #200]	; (26664 <completion+0x150>)
   2659c:	4413      	add	r3, r2
   2659e:	685a      	ldr	r2, [r3, #4]
   265a0:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
   265a4:	ea4f 0a83 	mov.w	sl, r3, lsl #2
   265a8:	46d0      	mov	r8, sl
   265aa:	f852 100a 	ldr.w	r1, [r2, sl]
   265ae:	b1d1      	cbz	r1, 265e6 <completion+0xd2>
		if (strncmp(command_prefix,
   265b0:	9a01      	ldr	r2, [sp, #4]
   265b2:	9805      	ldr	r0, [sp, #20]
   265b4:	f004 fbf2 	bl	2ad9c <strncmp>
   265b8:	4604      	mov	r4, r0
   265ba:	2800      	cmp	r0, #0
   265bc:	d1e8      	bne.n	26590 <completion+0x7c>
		if (!first_match) {
   265be:	2f00      	cmp	r7, #0
   265c0:	d0c8      	beq.n	26554 <completion+0x40>
		if (first_match && (common_chars < 0)) {
   265c2:	2e00      	cmp	r6, #0
   265c4:	dbcf      	blt.n	26566 <completion+0x52>
		for (j = 0; j < common_chars; j++) {
   265c6:	42a6      	cmp	r6, r4
   265c8:	ddd6      	ble.n	26578 <completion+0x64>
			if (first_match[j] != module->commands[i].cmd_name[j]) {
   265ca:	5d39      	ldrb	r1, [r7, r4]
   265cc:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   265d0:	009a      	lsls	r2, r3, #2
   265d2:	4b24      	ldr	r3, [pc, #144]	; (26664 <completion+0x150>)
   265d4:	4413      	add	r3, r2
   265d6:	685b      	ldr	r3, [r3, #4]
   265d8:	f853 3008 	ldr.w	r3, [r3, r8]
   265dc:	5d1b      	ldrb	r3, [r3, r4]
   265de:	4299      	cmp	r1, r3
   265e0:	d1ca      	bne.n	26578 <completion+0x64>
		for (j = 0; j < common_chars; j++) {
   265e2:	3401      	adds	r4, #1
   265e4:	e7ef      	b.n	265c6 <completion+0xb2>
   265e6:	f8dd a00c 	ldr.w	sl, [sp, #12]
	if (!first_match) {
   265ea:	2f00      	cmp	r7, #0
   265ec:	d038      	beq.n	26660 <completion+0x14c>
	if (common_chars >= 0) {
   265ee:	2e00      	cmp	r6, #0
   265f0:	db0d      	blt.n	2660e <completion+0xfa>
		printk("%s", get_prompt());
   265f2:	f7ff fd01 	bl	25ff8 <get_prompt>
   265f6:	4c1e      	ldr	r4, [pc, #120]	; (26670 <completion+0x15c>)
   265f8:	4601      	mov	r1, r0
   265fa:	4620      	mov	r0, r4
   265fc:	f7dc fca4 	bl	2f48 <printk>
		printk("%s", line);
   26600:	9d02      	ldr	r5, [sp, #8]
   26602:	4629      	mov	r1, r5
   26604:	4620      	mov	r0, r4
   26606:	f7dc fc9f 	bl	2f48 <printk>
	int common_chars = -1, space = 0;
   2660a:	2400      	movs	r4, #0
   2660c:	e015      	b.n	2663a <completion+0x126>
		common_chars = strlen(first_match);
   2660e:	4638      	mov	r0, r7
   26610:	f7da f876 	bl	700 <strlen>
   26614:	4606      	mov	r6, r0
		space = 1;
   26616:	2401      	movs	r4, #1
   26618:	9d02      	ldr	r5, [sp, #8]
	for (i = command_len; i < common_chars; i++) {
   2661a:	e00e      	b.n	2663a <completion+0x126>
		printk("%c", first_match[i]);
   2661c:	f817 100a 	ldrb.w	r1, [r7, sl]
   26620:	4814      	ldr	r0, [pc, #80]	; (26674 <completion+0x160>)
   26622:	f7dc fc91 	bl	2f48 <printk>
		line[len++] = first_match[i];
   26626:	f109 0301 	add.w	r3, r9, #1
   2662a:	f817 200a 	ldrb.w	r2, [r7, sl]
   2662e:	f805 2009 	strb.w	r2, [r5, r9]
	for (i = command_len; i < common_chars; i++) {
   26632:	f10a 0a01 	add.w	sl, sl, #1
		line[len++] = first_match[i];
   26636:	fa5f f983 	uxtb.w	r9, r3
	for (i = command_len; i < common_chars; i++) {
   2663a:	4556      	cmp	r6, sl
   2663c:	dcee      	bgt.n	2661c <completion+0x108>
	if (space) {
   2663e:	b92c      	cbnz	r4, 2664c <completion+0x138>
	return common_chars - command_len + space;
   26640:	9b01      	ldr	r3, [sp, #4]
   26642:	1af0      	subs	r0, r6, r3
   26644:	fa54 f080 	uxtab	r0, r4, r0
   26648:	b2c0      	uxtb	r0, r0
   2664a:	e76a      	b.n	26522 <completion+0xe>
		printk(" ");
   2664c:	480a      	ldr	r0, [pc, #40]	; (26678 <completion+0x164>)
   2664e:	f7dc fc7b 	bl	2f48 <printk>
		line[len] = ' ';
   26652:	2320      	movs	r3, #32
   26654:	9a02      	ldr	r2, [sp, #8]
   26656:	f802 3009 	strb.w	r3, [r2, r9]
   2665a:	e7f1      	b.n	26640 <completion+0x12c>
		return 0;
   2665c:	2000      	movs	r0, #0
   2665e:	e760      	b.n	26522 <completion+0xe>
		return 0;
   26660:	2000      	movs	r0, #0
   26662:	e75e      	b.n	26522 <completion+0xe>
   26664:	2000cf78 	.word	0x2000cf78
   26668:	00030a68 	.word	0x00030a68
   2666c:	0002fd38 	.word	0x0002fd38
   26670:	0002eecc 	.word	0x0002eecc
   26674:	00030a70 	.word	0x00030a70
   26678:	000310bc 	.word	0x000310bc

0002667c <line_queue_init>:
{
   2667c:	b510      	push	{r4, lr}
	for (i = 0; i < MAX_CMD_QUEUED; i++) {
   2667e:	2400      	movs	r4, #0
   26680:	e008      	b.n	26694 <line_queue_init+0x18>
		k_fifo_put(&avail_queue, &buf[i]);
   26682:	eb04 1244 	add.w	r2, r4, r4, lsl #5
   26686:	0093      	lsls	r3, r2, #2
   26688:	4904      	ldr	r1, [pc, #16]	; (2669c <line_queue_init+0x20>)
   2668a:	4419      	add	r1, r3
   2668c:	4804      	ldr	r0, [pc, #16]	; (266a0 <line_queue_init+0x24>)
   2668e:	f001 fced 	bl	2806c <k_queue_append>
	for (i = 0; i < MAX_CMD_QUEUED; i++) {
   26692:	3401      	adds	r4, #1
   26694:	2c02      	cmp	r4, #2
   26696:	ddf4      	ble.n	26682 <line_queue_init+0x6>
}
   26698:	bd10      	pop	{r4, pc}
   2669a:	bf00      	nop
   2669c:	2000241c 	.word	0x2000241c
   266a0:	2000240c 	.word	0x2000240c

000266a4 <shell_exec>:
{
   266a4:	b510      	push	{r4, lr}
   266a6:	b08e      	sub	sp, #56	; 0x38
	int module = default_module;
   266a8:	4b1e      	ldr	r3, [pc, #120]	; (26724 <shell_exec+0x80>)
   266aa:	681b      	ldr	r3, [r3, #0]
   266ac:	9301      	str	r3, [sp, #4]
	argc = line2argv(line, argv, ARRAY_SIZE(argv));
   266ae:	220b      	movs	r2, #11
   266b0:	a903      	add	r1, sp, #12
   266b2:	f7ff fcf5 	bl	260a0 <line2argv>
   266b6:	9002      	str	r0, [sp, #8]
	if (!argc) {
   266b8:	2800      	cmp	r0, #0
   266ba:	d02f      	beq.n	2671c <shell_exec+0x78>
	cb = get_cb(&argc, argv, &module);
   266bc:	aa01      	add	r2, sp, #4
   266be:	a903      	add	r1, sp, #12
   266c0:	a802      	add	r0, sp, #8
   266c2:	f7ff fdbd 	bl	26240 <get_cb>
	if (!cb) {
   266c6:	4602      	mov	r2, r0
   266c8:	b168      	cbz	r0, 266e6 <shell_exec+0x42>
	if (module != -1 && module != default_module) {
   266ca:	9b01      	ldr	r3, [sp, #4]
   266cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   266d0:	d017      	beq.n	26702 <shell_exec+0x5e>
   266d2:	4914      	ldr	r1, [pc, #80]	; (26724 <shell_exec+0x80>)
   266d4:	6809      	ldr	r1, [r1, #0]
   266d6:	428b      	cmp	r3, r1
   266d8:	d013      	beq.n	26702 <shell_exec+0x5e>
		err = cb(argc - 1, &argv[1]);
   266da:	a904      	add	r1, sp, #16
   266dc:	9802      	ldr	r0, [sp, #8]
   266de:	3801      	subs	r0, #1
   266e0:	4790      	blx	r2
   266e2:	4604      	mov	r4, r0
   266e4:	e011      	b.n	2670a <shell_exec+0x66>
		if (app_cmd_handler != NULL) {
   266e6:	4b10      	ldr	r3, [pc, #64]	; (26728 <shell_exec+0x84>)
   266e8:	681a      	ldr	r2, [r3, #0]
   266ea:	2a00      	cmp	r2, #0
   266ec:	d1ed      	bne.n	266ca <shell_exec+0x26>
	printk("Unrecognized command: %s\n", argv);
   266ee:	9903      	ldr	r1, [sp, #12]
   266f0:	480e      	ldr	r0, [pc, #56]	; (2672c <shell_exec+0x88>)
   266f2:	f7dc fc29 	bl	2f48 <printk>
	printk("Type 'help' for list of available commands\n");
   266f6:	480e      	ldr	r0, [pc, #56]	; (26730 <shell_exec+0x8c>)
   266f8:	f7dc fc26 	bl	2f48 <printk>
			return -EINVAL;
   266fc:	f06f 0415 	mvn.w	r4, #21
   26700:	e005      	b.n	2670e <shell_exec+0x6a>
		err = cb(argc, argv);
   26702:	a903      	add	r1, sp, #12
   26704:	9802      	ldr	r0, [sp, #8]
   26706:	4790      	blx	r2
   26708:	4604      	mov	r4, r0
	if (err < 0) {
   2670a:	2c00      	cmp	r4, #0
   2670c:	db02      	blt.n	26714 <shell_exec+0x70>
}
   2670e:	4620      	mov	r0, r4
   26710:	b00e      	add	sp, #56	; 0x38
   26712:	bd10      	pop	{r4, pc}
		show_cmd_help(argv);
   26714:	a803      	add	r0, sp, #12
   26716:	f7ff fe03 	bl	26320 <show_cmd_help>
   2671a:	e7f8      	b.n	2670e <shell_exec+0x6a>
		return -EINVAL;
   2671c:	f06f 0415 	mvn.w	r4, #21
   26720:	e7f5      	b.n	2670e <shell_exec+0x6a>
   26722:	bf00      	nop
   26724:	2000c4b8 	.word	0x2000c4b8
   26728:	20002404 	.word	0x20002404
   2672c:	00030acc 	.word	0x00030acc
   26730:	00030b88 	.word	0x00030b88

00026734 <shell>:
{
   26734:	b510      	push	{r4, lr}
		printk("%s", get_prompt());
   26736:	f7ff fc5f 	bl	25ff8 <get_prompt>
   2673a:	4601      	mov	r1, r0
   2673c:	4808      	ldr	r0, [pc, #32]	; (26760 <shell+0x2c>)
   2673e:	f7dc fc03 	bl	2f48 <printk>
		cmd = k_fifo_get(&cmds_queue, K_FOREVER);
   26742:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   26746:	4807      	ldr	r0, [pc, #28]	; (26764 <shell+0x30>)
   26748:	f001 fcb8 	bl	280bc <k_queue_get>
   2674c:	4604      	mov	r4, r0
		shell_exec(cmd->line);
   2674e:	3004      	adds	r0, #4
   26750:	f7ff ffa8 	bl	266a4 <shell_exec>
		k_fifo_put(&avail_queue, cmd);
   26754:	4621      	mov	r1, r4
   26756:	4804      	ldr	r0, [pc, #16]	; (26768 <shell+0x34>)
   26758:	f001 fc88 	bl	2806c <k_queue_append>
   2675c:	e7eb      	b.n	26736 <shell+0x2>
   2675e:	bf00      	nop
   26760:	0002eecc 	.word	0x0002eecc
   26764:	200025a8 	.word	0x200025a8
   26768:	2000240c 	.word	0x2000240c

0002676c <shell_init>:


void shell_init(const char *str)
{
   2676c:	b510      	push	{r4, lr}
   2676e:	b086      	sub	sp, #24
   26770:	4604      	mov	r4, r0
	k_fifo_init(&cmds_queue);
   26772:	4812      	ldr	r0, [pc, #72]	; (267bc <shell_init+0x50>)
   26774:	f001 fc47 	bl	28006 <k_queue_init>
	k_fifo_init(&avail_queue);
   26778:	4811      	ldr	r0, [pc, #68]	; (267c0 <shell_init+0x54>)
   2677a:	f001 fc44 	bl	28006 <k_queue_init>

	line_queue_init();
   2677e:	f7ff ff7d 	bl	2667c <line_queue_init>

	prompt = str ? str : "";
   26782:	b1c4      	cbz	r4, 267b6 <shell_init+0x4a>
   26784:	4b0f      	ldr	r3, [pc, #60]	; (267c4 <shell_init+0x58>)
   26786:	601c      	str	r4, [r3, #0]
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay);
   26788:	2300      	movs	r3, #0
   2678a:	9305      	str	r3, [sp, #20]
   2678c:	9304      	str	r3, [sp, #16]
   2678e:	f06f 0208 	mvn.w	r2, #8
   26792:	9203      	str	r2, [sp, #12]
   26794:	9302      	str	r3, [sp, #8]
   26796:	9301      	str	r3, [sp, #4]
   26798:	9300      	str	r3, [sp, #0]
   2679a:	4b0b      	ldr	r3, [pc, #44]	; (267c8 <shell_init+0x5c>)
   2679c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   267a0:	490a      	ldr	r1, [pc, #40]	; (267cc <shell_init+0x60>)
   267a2:	480b      	ldr	r0, [pc, #44]	; (267d0 <shell_init+0x64>)
   267a4:	f002 fa78 	bl	28c98 <_impl_k_thread_create>
	k_thread_create(&shell_thread, stack, STACKSIZE, shell, NULL, NULL,
			NULL, K_PRIO_COOP(7), 0, K_NO_WAIT);

	/* Register serial console handler */
#ifdef CONFIG_UART_CONSOLE
	uart_register_input(&avail_queue, &cmds_queue, completion);
   267a8:	4a0a      	ldr	r2, [pc, #40]	; (267d4 <shell_init+0x68>)
   267aa:	4904      	ldr	r1, [pc, #16]	; (267bc <shell_init+0x50>)
   267ac:	4804      	ldr	r0, [pc, #16]	; (267c0 <shell_init+0x54>)
   267ae:	f7db fc0b 	bl	1fc8 <uart_register_input>
#endif
#ifdef CONFIG_TELNET_CONSOLE
	telnet_register_input(&avail_queue, &cmds_queue, completion);
#endif
}
   267b2:	b006      	add	sp, #24
   267b4:	bd10      	pop	{r4, pc}
	prompt = str ? str : "";
   267b6:	4c08      	ldr	r4, [pc, #32]	; (267d8 <shell_init+0x6c>)
   267b8:	e7e4      	b.n	26784 <shell_init+0x18>
   267ba:	bf00      	nop
   267bc:	200025a8 	.word	0x200025a8
   267c0:	2000240c 	.word	0x2000240c
   267c4:	200025d0 	.word	0x200025d0
   267c8:	00026735 	.word	0x00026735
   267cc:	20009ae8 	.word	0x20009ae8
   267d0:	200025d4 	.word	0x200025d4
   267d4:	00026515 	.word	0x00026515
   267d8:	0002f390 	.word	0x0002f390

000267dc <ftpan_32>:
#define __SYSTEM_CLOCK_64M (64000000UL)

#ifdef CONFIG_SOC_NRF52832
static bool ftpan_32(void)
{
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
   267dc:	4b0e      	ldr	r3, [pc, #56]	; (26818 <ftpan_32+0x3c>)
   267de:	781b      	ldrb	r3, [r3, #0]
   267e0:	2b06      	cmp	r3, #6
   267e2:	d001      	beq.n	267e8 <ftpan_32+0xc>
			(((*(u32_t *)0xF0000FEC) & 0x000000F0) == 0x0)) {
			return true;
		}
	}

	return false;
   267e4:	2000      	movs	r0, #0
   267e6:	4770      	bx	lr
		(((*(u32_t *)0xF0000FE4) & 0x0000000F) == 0x0)) {
   267e8:	4b0c      	ldr	r3, [pc, #48]	; (2681c <ftpan_32+0x40>)
   267ea:	681b      	ldr	r3, [r3, #0]
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
   267ec:	f013 0f0f 	tst.w	r3, #15
   267f0:	d10e      	bne.n	26810 <ftpan_32+0x34>
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) &&
   267f2:	4b0b      	ldr	r3, [pc, #44]	; (26820 <ftpan_32+0x44>)
   267f4:	681b      	ldr	r3, [r3, #0]
   267f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   267fa:	2b30      	cmp	r3, #48	; 0x30
   267fc:	d001      	beq.n	26802 <ftpan_32+0x26>
	return false;
   267fe:	2000      	movs	r0, #0
   26800:	4770      	bx	lr
			(((*(u32_t *)0xF0000FEC) & 0x000000F0) == 0x0)) {
   26802:	4b08      	ldr	r3, [pc, #32]	; (26824 <ftpan_32+0x48>)
   26804:	681b      	ldr	r3, [r3, #0]
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) &&
   26806:	f013 0ff0 	tst.w	r3, #240	; 0xf0
   2680a:	d003      	beq.n	26814 <ftpan_32+0x38>
	return false;
   2680c:	2000      	movs	r0, #0
   2680e:	4770      	bx	lr
   26810:	2000      	movs	r0, #0
   26812:	4770      	bx	lr
			return true;
   26814:	2001      	movs	r0, #1
}
   26816:	4770      	bx	lr
   26818:	f0000fe0 	.word	0xf0000fe0
   2681c:	f0000fe4 	.word	0xf0000fe4
   26820:	f0000fe8 	.word	0xf0000fe8
   26824:	f0000fec 	.word	0xf0000fec

00026828 <ftpan_37>:

static bool ftpan_37(void)
{
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
   26828:	4b0e      	ldr	r3, [pc, #56]	; (26864 <ftpan_37+0x3c>)
   2682a:	781b      	ldrb	r3, [r3, #0]
   2682c:	2b06      	cmp	r3, #6
   2682e:	d001      	beq.n	26834 <ftpan_37+0xc>
			(((*(u32_t *)0xF0000FEC) & 0x000000F0) == 0x0)) {
			return true;
		}
	}

	return false;
   26830:	2000      	movs	r0, #0
   26832:	4770      	bx	lr
		(((*(u32_t *)0xF0000FE4) & 0x0000000F) == 0x0)) {
   26834:	4b0c      	ldr	r3, [pc, #48]	; (26868 <ftpan_37+0x40>)
   26836:	681b      	ldr	r3, [r3, #0]
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
   26838:	f013 0f0f 	tst.w	r3, #15
   2683c:	d10e      	bne.n	2685c <ftpan_37+0x34>
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) &&
   2683e:	4b0b      	ldr	r3, [pc, #44]	; (2686c <ftpan_37+0x44>)
   26840:	681b      	ldr	r3, [r3, #0]
   26842:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   26846:	2b30      	cmp	r3, #48	; 0x30
   26848:	d001      	beq.n	2684e <ftpan_37+0x26>
	return false;
   2684a:	2000      	movs	r0, #0
   2684c:	4770      	bx	lr
			(((*(u32_t *)0xF0000FEC) & 0x000000F0) == 0x0)) {
   2684e:	4b08      	ldr	r3, [pc, #32]	; (26870 <ftpan_37+0x48>)
   26850:	681b      	ldr	r3, [r3, #0]
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) &&
   26852:	f013 0ff0 	tst.w	r3, #240	; 0xf0
   26856:	d003      	beq.n	26860 <ftpan_37+0x38>
	return false;
   26858:	2000      	movs	r0, #0
   2685a:	4770      	bx	lr
   2685c:	2000      	movs	r0, #0
   2685e:	4770      	bx	lr
			return true;
   26860:	2001      	movs	r0, #1
}
   26862:	4770      	bx	lr
   26864:	f0000fe0 	.word	0xf0000fe0
   26868:	f0000fe4 	.word	0xf0000fe4
   2686c:	f0000fe8 	.word	0xf0000fe8
   26870:	f0000fec 	.word	0xf0000fec

00026874 <ftpan_36>:

static bool ftpan_36(void)
{
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
   26874:	4b0e      	ldr	r3, [pc, #56]	; (268b0 <ftpan_36+0x3c>)
   26876:	781b      	ldrb	r3, [r3, #0]
   26878:	2b06      	cmp	r3, #6
   2687a:	d001      	beq.n	26880 <ftpan_36+0xc>
			(((*(u32_t *)0xF0000FEC) & 0x000000F0) == 0x0)) {
			return true;
		}
	}

	return false;
   2687c:	2000      	movs	r0, #0
   2687e:	4770      	bx	lr
		(((*(u32_t *)0xF0000FE4) & 0x0000000F) == 0x0)) {
   26880:	4b0c      	ldr	r3, [pc, #48]	; (268b4 <ftpan_36+0x40>)
   26882:	681b      	ldr	r3, [r3, #0]
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
   26884:	f013 0f0f 	tst.w	r3, #15
   26888:	d10e      	bne.n	268a8 <ftpan_36+0x34>
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) &&
   2688a:	4b0b      	ldr	r3, [pc, #44]	; (268b8 <ftpan_36+0x44>)
   2688c:	681b      	ldr	r3, [r3, #0]
   2688e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   26892:	2b30      	cmp	r3, #48	; 0x30
   26894:	d001      	beq.n	2689a <ftpan_36+0x26>
	return false;
   26896:	2000      	movs	r0, #0
   26898:	4770      	bx	lr
			(((*(u32_t *)0xF0000FEC) & 0x000000F0) == 0x0)) {
   2689a:	4b08      	ldr	r3, [pc, #32]	; (268bc <ftpan_36+0x48>)
   2689c:	681b      	ldr	r3, [r3, #0]
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) &&
   2689e:	f013 0ff0 	tst.w	r3, #240	; 0xf0
   268a2:	d003      	beq.n	268ac <ftpan_36+0x38>
	return false;
   268a4:	2000      	movs	r0, #0
   268a6:	4770      	bx	lr
   268a8:	2000      	movs	r0, #0
   268aa:	4770      	bx	lr
			return true;
   268ac:	2001      	movs	r0, #1
}
   268ae:	4770      	bx	lr
   268b0:	f0000fe0 	.word	0xf0000fe0
   268b4:	f0000fe4 	.word	0xf0000fe4
   268b8:	f0000fe8 	.word	0xf0000fe8
   268bc:	f0000fec 	.word	0xf0000fec

000268c0 <errata_136_nrf52832>:

static bool errata_136_nrf52832(void)
{
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
   268c0:	4b0f      	ldr	r3, [pc, #60]	; (26900 <errata_136_nrf52832+0x40>)
   268c2:	781b      	ldrb	r3, [r3, #0]
   268c4:	2b06      	cmp	r3, #6
   268c6:	d001      	beq.n	268cc <errata_136_nrf52832+0xc>
		if (((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x50) {
			return true;
		}
	}

	return false;
   268c8:	2000      	movs	r0, #0
   268ca:	4770      	bx	lr
	    (((*(u32_t *)0xF0000FE4) & 0x0000000F) == 0x0)) {
   268cc:	4b0d      	ldr	r3, [pc, #52]	; (26904 <errata_136_nrf52832+0x44>)
   268ce:	681b      	ldr	r3, [r3, #0]
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
   268d0:	f013 0f0f 	tst.w	r3, #15
   268d4:	d10b      	bne.n	268ee <errata_136_nrf52832+0x2e>
		if (((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) {
   268d6:	4b0c      	ldr	r3, [pc, #48]	; (26908 <errata_136_nrf52832+0x48>)
   268d8:	681b      	ldr	r3, [r3, #0]
   268da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   268de:	2b30      	cmp	r3, #48	; 0x30
   268e0:	d007      	beq.n	268f2 <errata_136_nrf52832+0x32>
		if (((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x40) {
   268e2:	2b40      	cmp	r3, #64	; 0x40
   268e4:	d007      	beq.n	268f6 <errata_136_nrf52832+0x36>
		if (((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x50) {
   268e6:	2b50      	cmp	r3, #80	; 0x50
   268e8:	d007      	beq.n	268fa <errata_136_nrf52832+0x3a>
	return false;
   268ea:	2000      	movs	r0, #0
   268ec:	4770      	bx	lr
   268ee:	2000      	movs	r0, #0
   268f0:	4770      	bx	lr
			return true;
   268f2:	2001      	movs	r0, #1
   268f4:	4770      	bx	lr
			return true;
   268f6:	2001      	movs	r0, #1
   268f8:	4770      	bx	lr
			return true;
   268fa:	2001      	movs	r0, #1
}
   268fc:	4770      	bx	lr
   268fe:	bf00      	nop
   26900:	f0000fe0 	.word	0xf0000fe0
   26904:	f0000fe4 	.word	0xf0000fe4
   26908:	f0000fe8 	.word	0xf0000fe8

0002690c <nordicsemi_nrf52832_init>:

static void nordicsemi_nrf52832_init(void)
{
   2690c:	b508      	push	{r3, lr}
	/* Workaround for FTPAN-32 "DIF: Debug session automatically
	* enables TracePort pins" found at Product Anomaly document
	* for your device located at https://www.nordicsemi.com/
	*/
	if (ftpan_32()) {
   2690e:	f7ff ff65 	bl	267dc <ftpan_32>
   26912:	b120      	cbz	r0, 2691e <nordicsemi_nrf52832_init+0x12>
		CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
   26914:	4a32      	ldr	r2, [pc, #200]	; (269e0 <nordicsemi_nrf52832_init+0xd4>)
   26916:	68d3      	ldr	r3, [r2, #12]
   26918:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   2691c:	60d3      	str	r3, [r2, #12]

	/* Workaround for FTPAN-37 "AMLI: EasyDMA is slow with Radio,
	* ECB, AAR and CCM." found at Product Anomaly document
	* for your device located at https://www.nordicsemi.com/
	*/
	if (ftpan_37()) {
   2691e:	f7ff ff83 	bl	26828 <ftpan_37>
   26922:	b110      	cbz	r0, 2692a <nordicsemi_nrf52832_init+0x1e>
		*(volatile u32_t *)0x400005A0 = 0x3;
   26924:	2203      	movs	r2, #3
   26926:	4b2f      	ldr	r3, [pc, #188]	; (269e4 <nordicsemi_nrf52832_init+0xd8>)
   26928:	601a      	str	r2, [r3, #0]

	/* Workaround for FTPAN-36 "CLOCK: Some registers are not
	* reset when expected." found at Product Anomaly document
	* for your device located at https://www.nordicsemi.com/
	*/
	if (ftpan_36()) {
   2692a:	f7ff ffa3 	bl	26874 <ftpan_36>
   2692e:	b130      	cbz	r0, 2693e <nordicsemi_nrf52832_init+0x32>
		NRF_CLOCK->EVENTS_DONE = 0;
   26930:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   26934:	2200      	movs	r2, #0
   26936:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
		NRF_CLOCK->EVENTS_CTTO = 0;
   2693a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110

	/* Workaround for Errata 136 "System: Bits in RESETREAS are set when
	 * they should not be" found at the Errata document for your device
	 * located at https://infocenter.nordicsemi.com/
	 */
	if (errata_136_nrf52832()) {
   2693e:	f7ff ffbf 	bl	268c0 <errata_136_nrf52832>
   26942:	b160      	cbz	r0, 2695e <nordicsemi_nrf52832_init+0x52>
		if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk) {
   26944:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   26948:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   2694c:	f013 0f01 	tst.w	r3, #1
   26950:	d005      	beq.n	2695e <nordicsemi_nrf52832_init+0x52>
			NRF_POWER->RESETREAS = ~POWER_RESETREAS_RESETPIN_Msk;
   26952:	f06f 0201 	mvn.w	r2, #1
   26956:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2695a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
	* defined, pin reset will not be available. One GPIO (see
	* Product Specification to see which one) will then be
	* reserved for PinReset and not available as normal GPIO.
	*/
#if defined(CONFIG_GPIO_AS_PINRESET)
	if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) !=
   2695e:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   26962:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
   26966:	2b00      	cmp	r3, #0
   26968:	db06      	blt.n	26978 <nordicsemi_nrf52832_init+0x6c>
	     (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
	    ((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) !=
   2696a:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   2696e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
	     (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   26972:	2b00      	cmp	r3, #0
   26974:	db00      	blt.n	26978 <nordicsemi_nrf52832_init+0x6c>
   26976:	bd08      	pop	{r3, pc}
	     (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))) {

		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
   26978:	2201      	movs	r2, #1
   2697a:	4b1b      	ldr	r3, [pc, #108]	; (269e8 <nordicsemi_nrf52832_init+0xdc>)
   2697c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
   26980:	4b19      	ldr	r3, [pc, #100]	; (269e8 <nordicsemi_nrf52832_init+0xdc>)
   26982:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   26986:	2b00      	cmp	r3, #0
   26988:	d0fa      	beq.n	26980 <nordicsemi_nrf52832_init+0x74>
			;
		}
		NRF_UICR->PSELRESET[0] = 21;
   2698a:	2215      	movs	r2, #21
   2698c:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   26990:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
   26994:	4b14      	ldr	r3, [pc, #80]	; (269e8 <nordicsemi_nrf52832_init+0xdc>)
   26996:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   2699a:	2b00      	cmp	r3, #0
   2699c:	d0fa      	beq.n	26994 <nordicsemi_nrf52832_init+0x88>
			;
		}
		NRF_UICR->PSELRESET[1] = 21;
   2699e:	2215      	movs	r2, #21
   269a0:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   269a4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
   269a8:	4b0f      	ldr	r3, [pc, #60]	; (269e8 <nordicsemi_nrf52832_init+0xdc>)
   269aa:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   269ae:	2b00      	cmp	r3, #0
   269b0:	d0fa      	beq.n	269a8 <nordicsemi_nrf52832_init+0x9c>
			;
		}
		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
   269b2:	2200      	movs	r2, #0
   269b4:	4b0c      	ldr	r3, [pc, #48]	; (269e8 <nordicsemi_nrf52832_init+0xdc>)
   269b6:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
   269ba:	4b0b      	ldr	r3, [pc, #44]	; (269e8 <nordicsemi_nrf52832_init+0xdc>)
   269bc:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   269c0:	2b00      	cmp	r3, #0
   269c2:	d0fa      	beq.n	269ba <nordicsemi_nrf52832_init+0xae>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   269c4:	f3bf 8f4f 	dsb	sy
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   269c8:	4908      	ldr	r1, [pc, #32]	; (269ec <nordicsemi_nrf52832_init+0xe0>)
   269ca:	68ca      	ldr	r2, [r1, #12]
   269cc:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   269d0:	4b07      	ldr	r3, [pc, #28]	; (269f0 <nordicsemi_nrf52832_init+0xe4>)
   269d2:	4313      	orrs	r3, r2
   269d4:	60cb      	str	r3, [r1, #12]
   269d6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
   269da:	bf00      	nop
   269dc:	e7fd      	b.n	269da <nordicsemi_nrf52832_init+0xce>
   269de:	bf00      	nop
   269e0:	e000edf0 	.word	0xe000edf0
   269e4:	400005a0 	.word	0x400005a0
   269e8:	4001e000 	.word	0x4001e000
   269ec:	e000ed00 	.word	0xe000ed00
   269f0:	05fa0004 	.word	0x05fa0004

000269f4 <clock_init>:

uint32_t SystemCoreClock __used = __SYSTEM_CLOCK_64M;

static void clock_init(void)
{
	SystemCoreClock = __SYSTEM_CLOCK_64M;
   269f4:	4a01      	ldr	r2, [pc, #4]	; (269fc <clock_init+0x8>)
   269f6:	4b02      	ldr	r3, [pc, #8]	; (26a00 <clock_init+0xc>)
   269f8:	601a      	str	r2, [r3, #0]
   269fa:	4770      	bx	lr
   269fc:	03d09000 	.word	0x03d09000
   26a00:	2000c4bc 	.word	0x2000c4bc

00026a04 <nordicsemi_nrf52_init>:
}

static int nordicsemi_nrf52_init(struct device *arg)
{
   26a04:	b510      	push	{r4, lr}
	__asm__ volatile(
   26a06:	f04f 0320 	mov.w	r3, #32
   26a0a:	f3ef 8411 	mrs	r4, BASEPRI
   26a0e:	f383 8811 	msr	BASEPRI, r3
	ARG_UNUSED(arg);

	key = irq_lock();

#ifdef CONFIG_SOC_NRF52832
	nordicsemi_nrf52832_init();
   26a12:	f7ff ff7b 	bl	2690c <nordicsemi_nrf52832_init>
static ALWAYS_INLINE void _ClearFaults(void)
{
#if defined(CONFIG_ARMV6_M)
#elif defined(CONFIG_ARMV7_M)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   26a16:	4b05      	ldr	r3, [pc, #20]	; (26a2c <nordicsemi_nrf52_init+0x28>)
   26a18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   26a1c:	629a      	str	r2, [r3, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   26a1e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif

	_ClearFaults();

	/* Setup master clock */
	clock_init();
   26a20:	f7ff ffe8 	bl	269f4 <clock_init>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   26a24:	f384 8811 	msr	BASEPRI, r4
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   26a28:	2000      	movs	r0, #0
   26a2a:	bd10      	pop	{r4, pc}
   26a2c:	e000ed00 	.word	0xe000ed00

00026a30 <_ExcExit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, _ExcExit)

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
   26a30:	4808      	ldr	r0, [pc, #32]	; (26a54 <_EXIT_EXC+0x2>)

    ldr r1, [r0, #_kernel_offset_to_current]
   26a32:	6881      	ldr	r1, [r0, #8]

    /*
     * Non-preemptible thread ? Do not schedule (see explanation of
     * preempt field in kernel_struct.h).
     */
    ldrh r2, [r1, #_thread_offset_to_preempt]
   26a34:	894a      	ldrh	r2, [r1, #10]
    cmp r2, #_PREEMPT_THRESHOLD
   26a36:	2a7f      	cmp	r2, #127	; 0x7f
    bhi _EXIT_EXC
   26a38:	d80b      	bhi.n	26a52 <_EXIT_EXC>

    ldr r0, [r0, _kernel_offset_to_ready_q_cache]
   26a3a:	6980      	ldr	r0, [r0, #24]
    cmp r0, r1
   26a3c:	4288      	cmp	r0, r1
    beq _EXIT_EXC
   26a3e:	d008      	beq.n	26a52 <_EXIT_EXC>

#ifdef CONFIG_TIMESLICING
    push {lr}
   26a40:	b500      	push	{lr}
    bl _update_time_slice_before_swap
   26a42:	f001 fd1f 	bl	28484 <_update_time_slice_before_swap>
#if defined(CONFIG_ARMV6_M)
    pop {r0}
    mov lr, r0
#else
    pop {lr}
   26a46:	f85d eb04 	ldr.w	lr, [sp], #4
#endif /* CONFIG_ARMV6_M */
#endif /* CONFIG_TIMESLICING */

    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
   26a4a:	4903      	ldr	r1, [pc, #12]	; (26a58 <_EXIT_EXC+0x6>)
    ldr r2, =_SCS_ICSR_PENDSV
   26a4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
   26a50:	600a      	str	r2, [r1, #0]

00026a52 <_EXIT_EXC>:
#else
    pop {lr}
#endif /* CONFIG_ARMV6_M */
#endif /* CONFIG_STACK_SENTINEL */

    bx lr
   26a52:	4770      	bx	lr
    ldr r0, =_kernel
   26a54:	20002710 	.word	0x20002710
    ldr r1, =_SCS_ICSR
   26a58:	e000ed04 	.word	0xe000ed04

00026a5c <_IntLibInit>:
 * @return N/A
 */

void _IntLibInit(void)
{
	int irq = 0;
   26a5c:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   26a5e:	e00a      	b.n	26a76 <_IntLibInit+0x1a>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
   26a60:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) < 0)
   26a62:	2b00      	cmp	r3, #0
   26a64:	db0a      	blt.n	26a7c <_IntLibInit+0x20>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   26a66:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   26a6a:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
   26a6e:	2120      	movs	r1, #32
   26a70:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
	for (; irq < CONFIG_NUM_IRQS; irq++) {
   26a74:	3201      	adds	r2, #1
   26a76:	2a26      	cmp	r2, #38	; 0x26
   26a78:	ddf2      	ble.n	26a60 <_IntLibInit+0x4>
	}
}
   26a7a:	4770      	bx	lr
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   26a7c:	f002 010f 	and.w	r1, r2, #15
   26a80:	4b02      	ldr	r3, [pc, #8]	; (26a8c <_IntLibInit+0x30>)
   26a82:	440b      	add	r3, r1
   26a84:	2120      	movs	r1, #32
   26a86:	7619      	strb	r1, [r3, #24]
   26a88:	e7f4      	b.n	26a74 <_IntLibInit+0x18>
   26a8a:	bf00      	nop
   26a8c:	e000ecfc 	.word	0xe000ecfc

00026a90 <__pendsv>:
    pop {lr}
#endif /* CONFIG_ARMV6_M */
#endif /* CONFIG_KERNEL_EVENT_LOGGER_CONTEXT_SWITCH  */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   26a90:	490e      	ldr	r1, [pc, #56]	; (26acc <__pendsv+0x3c>)
    ldr r2, [r1, #_kernel_offset_to_current]
   26a92:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   26a94:	f04f 0028 	mov.w	r0, #40	; 0x28
    add r0, r2
   26a98:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
    mrs ip, PSP
   26a9a:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M)
    stmia r0, {v1-v8, ip}
   26a9e:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
     * don't clear it yet. PendSV must not be cleared until
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
    ldr v4, =_SCS_ICSR
   26aa2:	4f0b      	ldr	r7, [pc, #44]	; (26ad0 <__pendsv+0x40>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   26aa4:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000

    /* protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M)
    cpsid i
#elif defined(CONFIG_ARMV7_M)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   26aa8:	2020      	movs	r0, #32
    msr BASEPRI, r0
   26aaa:	f380 8811 	msr	BASEPRI, r0
#endif /* CONFIG_ARMV6_M */

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, _kernel_offset_to_ready_q_cache]
   26aae:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
   26ab0:	608a      	str	r2, [r1, #8]
     * since they were based on the previous kernel state and this
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
    str v3, [v4, #0]
   26ab2:	603e      	str	r6, [r7, #0]

    /* Restore previous interrupt disable state (irq_lock key) */
    ldr r0, [r2, #_thread_offset_to_basepri]
   26ab4:	6e10      	ldr	r0, [r2, #96]	; 0x60
    movs.n r3, #0
   26ab6:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   26ab8:	6613      	str	r3, [r2, #96]	; 0x60
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   26aba:	f380 8811 	msr	BASEPRI, r0
    blx configure_mpu_mem_domain
    pop {r2, lr}
#endif /* CONFIG_USERSPACE */

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   26abe:	f102 0028 	add.w	r0, r2, #40	; 0x28
    ldmia r0, {v1-v8, ip}
   26ac2:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

    msr PSP, ip
   26ac6:	f38c 8809 	msr	PSP, ip
#endif /* CONFIG_ARMV6_M */
    ldm sp!,{r0-r3} /* Load back regs ro to r4 */
#endif /* CONFIG_EXECUTION_BENCHMARKING */

    /* exc return */
    bx lr
   26aca:	4770      	bx	lr
    ldr r1, =_kernel
   26acc:	20002710 	.word	0x20002710
    ldr v4, =_SCS_ICSR
   26ad0:	e000ed04 	.word	0xe000ed04

00026ad4 <__svc>:
 * @return N/A
 */

SECTION_FUNC(TEXT, __svc)

    tst lr, #0x4    /* did we come from thread mode ? */
   26ad4:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   26ad8:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   26ada:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   26ade:	f3ef 8009 	mrsne	r0, PSP

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   26ae2:	6981      	ldr	r1, [r0, #24]
    /* SVC is a two-byte instruction, point to it and read  encoding */
    ldrh r1, [r1, #-2]
   26ae4:	f831 1c02 	ldrh.w	r1, [r1, #-2]
    * 1: irq_offload (if configured)
    * 2: kernel panic or oops (software generated fatal exception)
    * Planned implementation of system calls for memory protection will
    * expand this case.
    */
    ands r1, #0xff
   26ae8:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    beq _context_switch
   26aec:	d001      	beq.n	26af2 <_context_switch>

    cmp r1, #2
   26aee:	2902      	cmp	r1, #2
    beq _oops
   26af0:	d007      	beq.n	26b02 <_oops>

00026af2 <_context_switch>:
    /*
     * Unlock interrupts:
     * - in a SVC call, so protected against context switches
     * - allow PendSV, since it's running at prio 0xff
     */
    eors.n r0, r0
   26af2:	4040      	eors	r0, r0
    msr BASEPRI, r0
   26af4:	f380 8811 	msr	BASEPRI, r0

     /* set PENDSV bit, pending the PendSV exception */
    ldr r1, =_SCS_ICSR
   26af8:	4904      	ldr	r1, [pc, #16]	; (26b0c <_oops+0xa>)
    ldr r2, =_SCS_ICSR_PENDSV
   26afa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1, #0]
   26afe:	600a      	str	r2, [r1, #0]

    /* handler mode exit, to PendSV */
    bx lr
   26b00:	4770      	bx	lr

00026b02 <_oops>:

_oops:
    push {lr}
   26b02:	b500      	push	{lr}
    blx _do_kernel_oops
   26b04:	f000 fa82 	bl	2700c <_do_kernel_oops>
    pop {pc}
   26b08:	bd00      	pop	{pc}
   26b0a:	0000      	.short	0x0000
    ldr r1, =_SCS_ICSR
   26b0c:	e000ed04 	.word	0xe000ed04

00026b10 <__swap>:
    mov lr,r3
#else
    pop {lr}
#endif /* CONFIG_ARMV6_M */
#endif /* CONFIG_EXECUTION_BENCHMARKING */
    ldr r1, =_kernel
   26b10:	4904      	ldr	r1, [pc, #16]	; (26b24 <__swap+0x14>)
    ldr r2, [r1, #_kernel_offset_to_current]
   26b12:	688a      	ldr	r2, [r1, #8]
    str r0, [r2, #_thread_offset_to_basepri]
   26b14:	6610      	str	r0, [r2, #96]	; 0x60

    /*
     * Set __swap()'s default return code to -EAGAIN. This eliminates the need
     * for the timeout code to set it itself.
     */
    ldr r1, =_k_neg_eagain
   26b16:	4904      	ldr	r1, [pc, #16]	; (26b28 <__swap+0x18>)
    ldr r1, [r1]
   26b18:	6809      	ldr	r1, [r1, #0]
    str r1, [r2, #_thread_offset_to_swap_return_value]
   26b1a:	6651      	str	r1, [r2, #100]	; 0x64
     * PendSV handler will be called if there are no other interrupts
     * of a higher priority pending.
     */
    cpsie i
#elif defined(CONFIG_ARMV7_M)
    svc #0
   26b1c:	df00      	svc	0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

    /* coming back from exception, r2 still holds the pointer to _current */
    ldr r0, [r2, #_thread_offset_to_swap_return_value]
   26b1e:	6e50      	ldr	r0, [r2, #100]	; 0x64
    bx lr
   26b20:	4770      	bx	lr
   26b22:	0000      	.short	0x0000
    ldr r1, =_kernel
   26b24:	20002710 	.word	0x20002710
    ldr r1, =_k_neg_eagain
   26b28:	00031090 	.word	0x00031090

00026b2c <_DebugMonitor>:
 * See _FaultDump() for example.
 *
 * @return N/A
 */
static void _DebugMonitor(const NANO_ESF *esf)
{
   26b2c:	b508      	push	{r3, lr}
	ARG_UNUSED(esf);

	PR_EXC("***** Debug monitor exception (not implemented) *****\n");
   26b2e:	4802      	ldr	r0, [pc, #8]	; (26b38 <_DebugMonitor+0xc>)
   26b30:	f7dc fa0a 	bl	2f48 <printk>
   26b34:	bd08      	pop	{r3, pc}
   26b36:	bf00      	nop
   26b38:	00030ccc 	.word	0x00030ccc

00026b3c <_ReservedException>:
 * See _FaultDump() for example.
 *
 * @return N/A
 */
static void _ReservedException(const NANO_ESF *esf, int fault)
{
   26b3c:	b508      	push	{r3, lr}
   26b3e:	460a      	mov	r2, r1
	ARG_UNUSED(esf);

	PR_EXC("***** %s %d) *****\n",
   26b40:	290f      	cmp	r1, #15
   26b42:	dd05      	ble.n	26b50 <_ReservedException+0x14>
   26b44:	4903      	ldr	r1, [pc, #12]	; (26b54 <_ReservedException+0x18>)
   26b46:	3a10      	subs	r2, #16
   26b48:	4803      	ldr	r0, [pc, #12]	; (26b58 <_ReservedException+0x1c>)
   26b4a:	f7dc f9fd 	bl	2f48 <printk>
   26b4e:	bd08      	pop	{r3, pc}
   26b50:	4902      	ldr	r1, [pc, #8]	; (26b5c <_ReservedException+0x20>)
   26b52:	e7f8      	b.n	26b46 <_ReservedException+0xa>
   26b54:	00030e54 	.word	0x00030e54
   26b58:	00030e70 	.word	0x00030e70
   26b5c:	00030e3c 	.word	0x00030e3c

00026b60 <_FaultThreadShow>:
{
   26b60:	b510      	push	{r4, lr}
   26b62:	4604      	mov	r4, r0
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
   26b64:	f001 fc60 	bl	28428 <_impl_k_current_get>
	PR_EXC("  Executing thread ID (thread): %p\n"
   26b68:	69a2      	ldr	r2, [r4, #24]
   26b6a:	4601      	mov	r1, r0
   26b6c:	4801      	ldr	r0, [pc, #4]	; (26b74 <_FaultThreadShow+0x14>)
   26b6e:	f7dc f9eb 	bl	2f48 <printk>
   26b72:	bd10      	pop	{r4, pc}
   26b74:	00030d04 	.word	0x00030d04

00026b78 <_MpuFault>:
{
   26b78:	b538      	push	{r3, r4, r5, lr}
   26b7a:	4604      	mov	r4, r0
   26b7c:	460d      	mov	r5, r1
	PR_EXC("***** MPU FAULT *****\n");
   26b7e:	481e      	ldr	r0, [pc, #120]	; (26bf8 <_MpuFault+0x80>)
   26b80:	f7dc f9e2 	bl	2f48 <printk>
	_FaultThreadShow(esf);
   26b84:	4620      	mov	r0, r4
   26b86:	f7ff ffeb 	bl	26b60 <_FaultThreadShow>
	if (SCB->CFSR & CFSR_MSTKERR_Msk) {
   26b8a:	4b1c      	ldr	r3, [pc, #112]	; (26bfc <_MpuFault+0x84>)
   26b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   26b8e:	f013 0f10 	tst.w	r3, #16
   26b92:	d10f      	bne.n	26bb4 <_MpuFault+0x3c>
	} else if (SCB->CFSR & CFSR_MUNSTKERR_Msk) {
   26b94:	4b19      	ldr	r3, [pc, #100]	; (26bfc <_MpuFault+0x84>)
   26b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   26b98:	f013 0f08 	tst.w	r3, #8
   26b9c:	d10e      	bne.n	26bbc <_MpuFault+0x44>
	} else if (SCB->CFSR & CFSR_DACCVIOL_Msk) {
   26b9e:	4b17      	ldr	r3, [pc, #92]	; (26bfc <_MpuFault+0x84>)
   26ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   26ba2:	f013 0f02 	tst.w	r3, #2
   26ba6:	d10d      	bne.n	26bc4 <_MpuFault+0x4c>
	} else if (SCB->CFSR & CFSR_IACCVIOL_Msk) {
   26ba8:	4b14      	ldr	r3, [pc, #80]	; (26bfc <_MpuFault+0x84>)
   26baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   26bac:	f013 0f01 	tst.w	r3, #1
   26bb0:	d11d      	bne.n	26bee <_MpuFault+0x76>
   26bb2:	bd38      	pop	{r3, r4, r5, pc}
		PR_EXC("  Stacking error\n");
   26bb4:	4812      	ldr	r0, [pc, #72]	; (26c00 <_MpuFault+0x88>)
   26bb6:	f7dc f9c7 	bl	2f48 <printk>
   26bba:	bd38      	pop	{r3, r4, r5, pc}
		PR_EXC("  Unstacking error\n");
   26bbc:	4811      	ldr	r0, [pc, #68]	; (26c04 <_MpuFault+0x8c>)
   26bbe:	f7dc f9c3 	bl	2f48 <printk>
   26bc2:	bd38      	pop	{r3, r4, r5, pc}
		PR_EXC("  Data Access Violation\n");
   26bc4:	4810      	ldr	r0, [pc, #64]	; (26c08 <_MpuFault+0x90>)
   26bc6:	f7dc f9bf 	bl	2f48 <printk>
		if (SCB->CFSR & CFSR_MMARVALID_Msk) {
   26bca:	4b0c      	ldr	r3, [pc, #48]	; (26bfc <_MpuFault+0x84>)
   26bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   26bce:	f013 0f80 	tst.w	r3, #128	; 0x80
   26bd2:	d0ee      	beq.n	26bb2 <_MpuFault+0x3a>
			PR_EXC("  Address: 0x%x\n", (u32_t)SCB->MMFAR);
   26bd4:	4b09      	ldr	r3, [pc, #36]	; (26bfc <_MpuFault+0x84>)
   26bd6:	6b59      	ldr	r1, [r3, #52]	; 0x34
   26bd8:	480c      	ldr	r0, [pc, #48]	; (26c0c <_MpuFault+0x94>)
   26bda:	f7dc f9b5 	bl	2f48 <printk>
			if (fromHardFault) {
   26bde:	2d00      	cmp	r5, #0
   26be0:	d0e7      	beq.n	26bb2 <_MpuFault+0x3a>
				SCB->CFSR &= ~CFSR_MMARVALID_Msk;
   26be2:	4a06      	ldr	r2, [pc, #24]	; (26bfc <_MpuFault+0x84>)
   26be4:	6a93      	ldr	r3, [r2, #40]	; 0x28
   26be6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   26bea:	6293      	str	r3, [r2, #40]	; 0x28
   26bec:	bd38      	pop	{r3, r4, r5, pc}
		PR_EXC("  Instruction Access Violation\n");
   26bee:	4808      	ldr	r0, [pc, #32]	; (26c10 <_MpuFault+0x98>)
   26bf0:	f7dc f9aa 	bl	2f48 <printk>
}
   26bf4:	e7dd      	b.n	26bb2 <_MpuFault+0x3a>
   26bf6:	bf00      	nop
   26bf8:	00030dac 	.word	0x00030dac
   26bfc:	e000ed00 	.word	0xe000ed00
   26c00:	00030dc4 	.word	0x00030dc4
   26c04:	00030dd8 	.word	0x00030dd8
   26c08:	00030dec 	.word	0x00030dec
   26c0c:	00030e08 	.word	0x00030e08
   26c10:	00030e1c 	.word	0x00030e1c

00026c14 <_BusFault>:
{
   26c14:	b538      	push	{r3, r4, r5, lr}
   26c16:	4604      	mov	r4, r0
   26c18:	460d      	mov	r5, r1
	PR_EXC("***** BUS FAULT *****\n");
   26c1a:	4827      	ldr	r0, [pc, #156]	; (26cb8 <_BusFault+0xa4>)
   26c1c:	f7dc f994 	bl	2f48 <printk>
	_FaultThreadShow(esf);
   26c20:	4620      	mov	r0, r4
   26c22:	f7ff ff9d 	bl	26b60 <_FaultThreadShow>
	if (SCB->CFSR & CFSR_STKERR_Msk) {
   26c26:	4b25      	ldr	r3, [pc, #148]	; (26cbc <_BusFault+0xa8>)
   26c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   26c2a:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   26c2e:	d114      	bne.n	26c5a <_BusFault+0x46>
	} else if (SCB->CFSR & CFSR_UNSTKERR_Msk) {
   26c30:	4b22      	ldr	r3, [pc, #136]	; (26cbc <_BusFault+0xa8>)
   26c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   26c34:	f413 6f00 	tst.w	r3, #2048	; 0x800
   26c38:	d113      	bne.n	26c62 <_BusFault+0x4e>
	} else if (SCB->CFSR & CFSR_PRECISERR_Msk) {
   26c3a:	4b20      	ldr	r3, [pc, #128]	; (26cbc <_BusFault+0xa8>)
   26c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   26c3e:	f413 7f00 	tst.w	r3, #512	; 0x200
   26c42:	d112      	bne.n	26c6a <_BusFault+0x56>
	} else if (SCB->CFSR & CFSR_IMPRECISERR_Msk) {
   26c44:	4b1d      	ldr	r3, [pc, #116]	; (26cbc <_BusFault+0xa8>)
   26c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   26c48:	f413 6f80 	tst.w	r3, #1024	; 0x400
   26c4c:	d12b      	bne.n	26ca6 <_BusFault+0x92>
	} else if (SCB->CFSR & CFSR_IBUSERR_Msk) {
   26c4e:	4b1b      	ldr	r3, [pc, #108]	; (26cbc <_BusFault+0xa8>)
   26c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   26c52:	f413 7f80 	tst.w	r3, #256	; 0x100
   26c56:	d12a      	bne.n	26cae <_BusFault+0x9a>
   26c58:	bd38      	pop	{r3, r4, r5, pc}
		PR_EXC("  Stacking error\n");
   26c5a:	4819      	ldr	r0, [pc, #100]	; (26cc0 <_BusFault+0xac>)
   26c5c:	f7dc f974 	bl	2f48 <printk>
   26c60:	bd38      	pop	{r3, r4, r5, pc}
		PR_EXC("  Unstacking error\n");
   26c62:	4818      	ldr	r0, [pc, #96]	; (26cc4 <_BusFault+0xb0>)
   26c64:	f7dc f970 	bl	2f48 <printk>
   26c68:	bd38      	pop	{r3, r4, r5, pc}
		PR_EXC("  Precise data bus error\n");
   26c6a:	4817      	ldr	r0, [pc, #92]	; (26cc8 <_BusFault+0xb4>)
   26c6c:	f7dc f96c 	bl	2f48 <printk>
		if (SCB->CFSR & CFSR_BFARVALID_Msk) {
   26c70:	4b12      	ldr	r3, [pc, #72]	; (26cbc <_BusFault+0xa8>)
   26c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   26c74:	f413 4f00 	tst.w	r3, #32768	; 0x8000
   26c78:	d108      	bne.n	26c8c <_BusFault+0x78>
		if (SCB->CFSR & CFSR_IMPRECISERR_Msk) {
   26c7a:	4b10      	ldr	r3, [pc, #64]	; (26cbc <_BusFault+0xa8>)
   26c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   26c7e:	f413 6f80 	tst.w	r3, #1024	; 0x400
   26c82:	d0e9      	beq.n	26c58 <_BusFault+0x44>
			PR_EXC("  Imprecise data bus error\n");
   26c84:	4811      	ldr	r0, [pc, #68]	; (26ccc <_BusFault+0xb8>)
   26c86:	f7dc f95f 	bl	2f48 <printk>
   26c8a:	bd38      	pop	{r3, r4, r5, pc}
			PR_EXC("  Address: 0x%x\n", (u32_t)SCB->BFAR);
   26c8c:	4b0b      	ldr	r3, [pc, #44]	; (26cbc <_BusFault+0xa8>)
   26c8e:	6b99      	ldr	r1, [r3, #56]	; 0x38
   26c90:	480f      	ldr	r0, [pc, #60]	; (26cd0 <_BusFault+0xbc>)
   26c92:	f7dc f959 	bl	2f48 <printk>
			if (fromHardFault) {
   26c96:	2d00      	cmp	r5, #0
   26c98:	d0ef      	beq.n	26c7a <_BusFault+0x66>
				SCB->CFSR &= ~CFSR_BFARVALID_Msk;
   26c9a:	4a08      	ldr	r2, [pc, #32]	; (26cbc <_BusFault+0xa8>)
   26c9c:	6a93      	ldr	r3, [r2, #40]	; 0x28
   26c9e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   26ca2:	6293      	str	r3, [r2, #40]	; 0x28
   26ca4:	e7e9      	b.n	26c7a <_BusFault+0x66>
		PR_EXC("  Imprecise data bus error\n");
   26ca6:	4809      	ldr	r0, [pc, #36]	; (26ccc <_BusFault+0xb8>)
   26ca8:	f7dc f94e 	bl	2f48 <printk>
   26cac:	bd38      	pop	{r3, r4, r5, pc}
		PR_EXC("  Instruction bus error\n");
   26cae:	4809      	ldr	r0, [pc, #36]	; (26cd4 <_BusFault+0xc0>)
   26cb0:	f7dc f94a 	bl	2f48 <printk>
}
   26cb4:	e7d0      	b.n	26c58 <_BusFault+0x44>
   26cb6:	bf00      	nop
   26cb8:	00030c60 	.word	0x00030c60
   26cbc:	e000ed00 	.word	0xe000ed00
   26cc0:	00030dc4 	.word	0x00030dc4
   26cc4:	00030dd8 	.word	0x00030dd8
   26cc8:	00030c78 	.word	0x00030c78
   26ccc:	00030c94 	.word	0x00030c94
   26cd0:	00030e08 	.word	0x00030e08
   26cd4:	00030cb0 	.word	0x00030cb0

00026cd8 <_UsageFault>:
{
   26cd8:	b510      	push	{r4, lr}
   26cda:	4604      	mov	r4, r0
	PR_EXC("***** USAGE FAULT *****\n");
   26cdc:	4821      	ldr	r0, [pc, #132]	; (26d64 <_UsageFault+0x8c>)
   26cde:	f7dc f933 	bl	2f48 <printk>
	_FaultThreadShow(esf);
   26ce2:	4620      	mov	r0, r4
   26ce4:	f7ff ff3c 	bl	26b60 <_FaultThreadShow>
	if (SCB->CFSR & CFSR_DIVBYZERO_Msk) {
   26ce8:	4b1f      	ldr	r3, [pc, #124]	; (26d68 <_UsageFault+0x90>)
   26cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   26cec:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
   26cf0:	d120      	bne.n	26d34 <_UsageFault+0x5c>
	if (SCB->CFSR & CFSR_UNALIGNED_Msk) {
   26cf2:	4b1d      	ldr	r3, [pc, #116]	; (26d68 <_UsageFault+0x90>)
   26cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   26cf6:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   26cfa:	d11f      	bne.n	26d3c <_UsageFault+0x64>
	if (SCB->CFSR & CFSR_NOCP_Msk) {
   26cfc:	4b1a      	ldr	r3, [pc, #104]	; (26d68 <_UsageFault+0x90>)
   26cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   26d00:	f413 2f00 	tst.w	r3, #524288	; 0x80000
   26d04:	d11e      	bne.n	26d44 <_UsageFault+0x6c>
	if (SCB->CFSR & CFSR_INVPC_Msk) {
   26d06:	4b18      	ldr	r3, [pc, #96]	; (26d68 <_UsageFault+0x90>)
   26d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   26d0a:	f413 2f80 	tst.w	r3, #262144	; 0x40000
   26d0e:	d11d      	bne.n	26d4c <_UsageFault+0x74>
	if (SCB->CFSR & CFSR_INVSTATE_Msk) {
   26d10:	4b15      	ldr	r3, [pc, #84]	; (26d68 <_UsageFault+0x90>)
   26d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   26d14:	f413 3f00 	tst.w	r3, #131072	; 0x20000
   26d18:	d11c      	bne.n	26d54 <_UsageFault+0x7c>
	if (SCB->CFSR & CFSR_UNDEFINSTR_Msk) {
   26d1a:	4b13      	ldr	r3, [pc, #76]	; (26d68 <_UsageFault+0x90>)
   26d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   26d1e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   26d22:	d11b      	bne.n	26d5c <_UsageFault+0x84>
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   26d24:	4a10      	ldr	r2, [pc, #64]	; (26d68 <_UsageFault+0x90>)
   26d26:	6a93      	ldr	r3, [r2, #40]	; 0x28
   26d28:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   26d2c:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   26d30:	6293      	str	r3, [r2, #40]	; 0x28
   26d32:	bd10      	pop	{r4, pc}
		PR_EXC("  Division by zero\n");
   26d34:	480d      	ldr	r0, [pc, #52]	; (26d6c <_UsageFault+0x94>)
   26d36:	f7dc f907 	bl	2f48 <printk>
   26d3a:	e7da      	b.n	26cf2 <_UsageFault+0x1a>
		PR_EXC("  Unaligned memory access\n");
   26d3c:	480c      	ldr	r0, [pc, #48]	; (26d70 <_UsageFault+0x98>)
   26d3e:	f7dc f903 	bl	2f48 <printk>
   26d42:	e7db      	b.n	26cfc <_UsageFault+0x24>
		PR_EXC("  No coprocessor instructions\n");
   26d44:	480b      	ldr	r0, [pc, #44]	; (26d74 <_UsageFault+0x9c>)
   26d46:	f7dc f8ff 	bl	2f48 <printk>
   26d4a:	e7dc      	b.n	26d06 <_UsageFault+0x2e>
		PR_EXC("  Illegal load of EXC_RETURN into PC\n");
   26d4c:	480a      	ldr	r0, [pc, #40]	; (26d78 <_UsageFault+0xa0>)
   26d4e:	f7dc f8fb 	bl	2f48 <printk>
   26d52:	e7dd      	b.n	26d10 <_UsageFault+0x38>
		PR_EXC("  Illegal use of the EPSR\n");
   26d54:	4809      	ldr	r0, [pc, #36]	; (26d7c <_UsageFault+0xa4>)
   26d56:	f7dc f8f7 	bl	2f48 <printk>
   26d5a:	e7de      	b.n	26d1a <_UsageFault+0x42>
		PR_EXC("  Attempt to execute undefined instruction\n");
   26d5c:	4808      	ldr	r0, [pc, #32]	; (26d80 <_UsageFault+0xa8>)
   26d5e:	f7dc f8f3 	bl	2f48 <printk>
   26d62:	e7df      	b.n	26d24 <_UsageFault+0x4c>
   26d64:	00030e84 	.word	0x00030e84
   26d68:	e000ed00 	.word	0xe000ed00
   26d6c:	00030ea0 	.word	0x00030ea0
   26d70:	00030eb4 	.word	0x00030eb4
   26d74:	00030ed0 	.word	0x00030ed0
   26d78:	00030ef0 	.word	0x00030ef0
   26d7c:	00030f18 	.word	0x00030f18
   26d80:	00030f34 	.word	0x00030f34

00026d84 <_HardFault>:
{
   26d84:	b510      	push	{r4, lr}
   26d86:	4604      	mov	r4, r0
	PR_EXC("***** HARD FAULT *****\n");
   26d88:	4816      	ldr	r0, [pc, #88]	; (26de4 <_HardFault+0x60>)
   26d8a:	f7dc f8dd 	bl	2f48 <printk>
	if (SCB->HFSR & SCB_HFSR_VECTTBL_Msk) {
   26d8e:	4b16      	ldr	r3, [pc, #88]	; (26de8 <_HardFault+0x64>)
   26d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   26d92:	f013 0f02 	tst.w	r3, #2
   26d96:	d105      	bne.n	26da4 <_HardFault+0x20>
	} else if (SCB->HFSR & SCB_HFSR_FORCED_Msk) {
   26d98:	4b13      	ldr	r3, [pc, #76]	; (26de8 <_HardFault+0x64>)
   26d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   26d9c:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   26da0:	d104      	bne.n	26dac <_HardFault+0x28>
   26da2:	bd10      	pop	{r4, pc}
		PR_EXC("  Bus fault on vector table read\n");
   26da4:	4811      	ldr	r0, [pc, #68]	; (26dec <_HardFault+0x68>)
   26da6:	f7dc f8cf 	bl	2f48 <printk>
   26daa:	bd10      	pop	{r4, pc}
		PR_EXC("  Fault escalation (see below)\n");
   26dac:	4810      	ldr	r0, [pc, #64]	; (26df0 <_HardFault+0x6c>)
   26dae:	f7dc f8cb 	bl	2f48 <printk>
		if (SCB_MMFSR) {
   26db2:	4b10      	ldr	r3, [pc, #64]	; (26df4 <_HardFault+0x70>)
   26db4:	781b      	ldrb	r3, [r3, #0]
   26db6:	b95b      	cbnz	r3, 26dd0 <_HardFault+0x4c>
		} else if (SCB_BFSR) {
   26db8:	4b0f      	ldr	r3, [pc, #60]	; (26df8 <_HardFault+0x74>)
   26dba:	781b      	ldrb	r3, [r3, #0]
   26dbc:	b96b      	cbnz	r3, 26dda <_HardFault+0x56>
		} else if (SCB_UFSR) {
   26dbe:	4b0f      	ldr	r3, [pc, #60]	; (26dfc <_HardFault+0x78>)
   26dc0:	881b      	ldrh	r3, [r3, #0]
   26dc2:	b29b      	uxth	r3, r3
   26dc4:	2b00      	cmp	r3, #0
   26dc6:	d0ec      	beq.n	26da2 <_HardFault+0x1e>
			_UsageFault(esf);
   26dc8:	4620      	mov	r0, r4
   26dca:	f7ff ff85 	bl	26cd8 <_UsageFault>
}
   26dce:	e7e8      	b.n	26da2 <_HardFault+0x1e>
			_MpuFault(esf, 1);
   26dd0:	2101      	movs	r1, #1
   26dd2:	4620      	mov	r0, r4
   26dd4:	f7ff fed0 	bl	26b78 <_MpuFault>
   26dd8:	bd10      	pop	{r4, pc}
			_BusFault(esf, 1);
   26dda:	2101      	movs	r1, #1
   26ddc:	4620      	mov	r0, r4
   26dde:	f7ff ff19 	bl	26c14 <_BusFault>
   26de2:	bd10      	pop	{r4, pc}
   26de4:	00030d50 	.word	0x00030d50
   26de8:	e000ed00 	.word	0xe000ed00
   26dec:	00030d68 	.word	0x00030d68
   26df0:	00030d8c 	.word	0x00030d8c
   26df4:	e000ed28 	.word	0xe000ed28
   26df8:	e000ed29 	.word	0xe000ed29
   26dfc:	e000ed2c 	.word	0xe000ed2c

00026e00 <_FaultDump>:
 *   Address: 0xff001234
 *
 * @return N/A
 */
static void _FaultDump(const NANO_ESF *esf, int fault)
{
   26e00:	b508      	push	{r3, lr}
	switch (fault) {
   26e02:	1ecb      	subs	r3, r1, #3
   26e04:	2b09      	cmp	r3, #9
   26e06:	d817      	bhi.n	26e38 <_FaultDump+0x38>
   26e08:	e8df f003 	tbb	[pc, r3]
   26e0c:	100c0805 	.word	0x100c0805
   26e10:	16161616 	.word	0x16161616
   26e14:	1316      	.short	0x1316
	case 3:
		_HardFault(esf);
   26e16:	f7ff ffb5 	bl	26d84 <_HardFault>
		break;
   26e1a:	bd08      	pop	{r3, pc}
#if defined(CONFIG_ARMV6_M)
#elif defined(CONFIG_ARMV7_M)
	case 4:
		_MpuFault(esf, 0);
   26e1c:	2100      	movs	r1, #0
   26e1e:	f7ff feab 	bl	26b78 <_MpuFault>
		break;
   26e22:	bd08      	pop	{r3, pc}
	case 5:
		_BusFault(esf, 0);
   26e24:	2100      	movs	r1, #0
   26e26:	f7ff fef5 	bl	26c14 <_BusFault>
		break;
   26e2a:	bd08      	pop	{r3, pc}
	case 6:
		_UsageFault(esf);
   26e2c:	f7ff ff54 	bl	26cd8 <_UsageFault>
		break;
   26e30:	bd08      	pop	{r3, pc}
	case 12:
		_DebugMonitor(esf);
   26e32:	f7ff fe7b 	bl	26b2c <_DebugMonitor>
		break;
   26e36:	bd08      	pop	{r3, pc}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */
	default:
		_ReservedException(esf, fault);
   26e38:	f7ff fe80 	bl	26b3c <_ReservedException>
   26e3c:	bd08      	pop	{r3, pc}
	...

00026e40 <_Fault>:
 *
 * @param esf ESF on the stack, either MSP or PSP depending at what processor
 *            state the exception was taken.
 */
void _Fault(const NANO_ESF *esf)
{
   26e40:	b510      	push	{r4, lr}
   26e42:	4604      	mov	r4, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   26e44:	4b05      	ldr	r3, [pc, #20]	; (26e5c <_Fault+0x1c>)
   26e46:	6859      	ldr	r1, [r3, #4]

	FAULT_DUMP(esf, fault);
   26e48:	f3c1 0108 	ubfx	r1, r1, #0, #9
   26e4c:	f7ff ffd8 	bl	26e00 <_FaultDump>

	_SysFatalErrorHandler(_NANO_ERR_HW_EXCEPTION, esf);
   26e50:	4621      	mov	r1, r4
   26e52:	2000      	movs	r0, #0
   26e54:	f000 f8e0 	bl	27018 <_SysFatalErrorHandler>
   26e58:	bd10      	pop	{r4, pc}
   26e5a:	bf00      	nop
   26e5c:	e000ed00 	.word	0xe000ed00

00026e60 <_FaultInit>:
 */
void _FaultInit(void)
{
#if defined(CONFIG_ARMV6_M)
#elif defined(CONFIG_ARMV7_M)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   26e60:	4a02      	ldr	r2, [pc, #8]	; (26e6c <_FaultInit+0xc>)
   26e62:	6953      	ldr	r3, [r2, #20]
   26e64:	f043 0310 	orr.w	r3, r3, #16
   26e68:	6153      	str	r3, [r2, #20]
   26e6a:	4770      	bx	lr
   26e6c:	e000ed00 	.word	0xe000ed00

00026e70 <_arch_irq_enable>:
 *
 * @return N/A
 */
void _arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   26e70:	b243      	sxtb	r3, r0
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   26e72:	095b      	lsrs	r3, r3, #5
   26e74:	f000 001f 	and.w	r0, r0, #31
   26e78:	2201      	movs	r2, #1
   26e7a:	fa02 f000 	lsl.w	r0, r2, r0
   26e7e:	4a02      	ldr	r2, [pc, #8]	; (26e88 <_arch_irq_enable+0x18>)
   26e80:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
   26e84:	4770      	bx	lr
   26e86:	bf00      	nop
   26e88:	e000e100 	.word	0xe000e100

00026e8c <_arch_irq_disable>:
 *
 * @return N/A
 */
void _arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   26e8c:	b243      	sxtb	r3, r0
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   26e8e:	095b      	lsrs	r3, r3, #5
   26e90:	f000 001f 	and.w	r0, r0, #31
   26e94:	2201      	movs	r2, #1
   26e96:	fa02 f000 	lsl.w	r0, r2, r0
   26e9a:	3320      	adds	r3, #32
   26e9c:	4a01      	ldr	r2, [pc, #4]	; (26ea4 <_arch_irq_disable+0x18>)
   26e9e:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
   26ea2:	4770      	bx	lr
   26ea4:	e000e100 	.word	0xe000e100

00026ea8 <_arch_irq_is_enabled>:
 * @param irq IRQ line
 * @return interrupt enable state, true or false
 */
int _arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & (1 << BIT_FROM_IRQ(irq));
   26ea8:	0942      	lsrs	r2, r0, #5
   26eaa:	4b05      	ldr	r3, [pc, #20]	; (26ec0 <_arch_irq_is_enabled+0x18>)
   26eac:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   26eb0:	f000 001f 	and.w	r0, r0, #31
   26eb4:	2301      	movs	r3, #1
   26eb6:	fa03 f000 	lsl.w	r0, r3, r0
}
   26eba:	4010      	ands	r0, r2
   26ebc:	4770      	bx	lr
   26ebe:	bf00      	nop
   26ec0:	e000e100 	.word	0xe000e100

00026ec4 <_irq_priority_set>:
	} else {
		prio += _IRQ_PRIO_OFFSET;
	}
#else
	ARG_UNUSED(flags);
	prio += _IRQ_PRIO_OFFSET;
   26ec4:	3101      	adds	r1, #1
	 */
	__ASSERT(prio <= ((1 << CONFIG_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %d\n",
		 prio - _IRQ_PRIO_OFFSET,
		 (1 << CONFIG_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   26ec6:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) < 0)
   26ec8:	2b00      	cmp	r3, #0
   26eca:	db08      	blt.n	26ede <_irq_priority_set+0x1a>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   26ecc:	0149      	lsls	r1, r1, #5
   26ece:	b2c9      	uxtb	r1, r1
   26ed0:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   26ed4:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
   26ed8:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
   26edc:	4770      	bx	lr
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   26ede:	f000 000f 	and.w	r0, r0, #15
   26ee2:	0149      	lsls	r1, r1, #5
   26ee4:	b2c9      	uxtb	r1, r1
   26ee6:	4b01      	ldr	r3, [pc, #4]	; (26eec <_irq_priority_set+0x28>)
   26ee8:	5419      	strb	r1, [r3, r0]
   26eea:	4770      	bx	lr
   26eec:	e000ed14 	.word	0xe000ed14

00026ef0 <_irq_spurious>:
 * See __reserved().
 *
 * @return N/A
 */
void _irq_spurious(void *unused)
{
   26ef0:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);
	__reserved();
   26ef2:	f000 f847 	bl	26f84 <__bus_fault>
   26ef6:	bd08      	pop	{r3, pc}

00026ef8 <_arch_isr_direct_pm>:
 * See https://jira.zephyrproject.org/browse/ZEP-1595
 */

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
   26ef8:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   26efa:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

	if (_kernel.idle) {
   26efc:	4b04      	ldr	r3, [pc, #16]	; (26f10 <_arch_isr_direct_pm+0x18>)
   26efe:	6958      	ldr	r0, [r3, #20]
   26f00:	b908      	cbnz	r0, 26f06 <_arch_isr_direct_pm+0xe>
	}

#if defined(CONFIG_ARMV6_M)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M)
	__asm__ volatile("cpsie i" : : : "memory");
   26f02:	b662      	cpsie	i
   26f04:	bd08      	pop	{r3, pc}
		_kernel.idle = 0;
   26f06:	2200      	movs	r2, #0
   26f08:	615a      	str	r2, [r3, #20]
		_sys_power_save_idle_exit(idle_val);
   26f0a:	f000 f9b5 	bl	27278 <_sys_power_save_idle_exit>
   26f0e:	e7f8      	b.n	26f02 <_arch_isr_direct_pm+0xa>
   26f10:	20002710 	.word	0x20002710

00026f14 <_new_thread>:

void _new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		 size_t stackSize, k_thread_entry_t pEntry,
		 void *parameter1, void *parameter2, void *parameter3,
		 int priority, unsigned int options)
{
   26f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26f16:	4605      	mov	r5, r0
   26f18:	460c      	mov	r4, r1
   26f1a:	4616      	mov	r6, r2
   26f1c:	461f      	mov	r7, r3
	ARG_UNUSED(pStack);
	ARG_UNUSED(stackSize);
#endif

#ifdef CONFIG_INIT_STACKS
	memset(pStack, 0xaa, stackSize);
   26f1e:	21aa      	movs	r1, #170	; 0xaa
   26f20:	4620      	mov	r0, r4
   26f22:	f003 fdaf 	bl	2aa84 <memset>
	 * if it isn't.
	 */
	*((u32_t *)pStack) = STACK_SENTINEL;
#endif /* CONFIG_STACK_SENTINEL */
	/* Initialize various struct k_thread members */
	_init_thread_base(&thread->base, prio, _THREAD_PRESTART, options);
   26f26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   26f28:	2204      	movs	r2, #4
   26f2a:	9909      	ldr	r1, [sp, #36]	; 0x24
   26f2c:	4628      	mov	r0, r5
   26f2e:	f001 ff51 	bl	28dd4 <_init_thread_base>

	/* static threads overwrite it afterwards with real value */
	thread->init_data = NULL;
   26f32:	2300      	movs	r3, #0
   26f34:	64eb      	str	r3, [r5, #76]	; 0x4c
	thread->fn_abort = NULL;
   26f36:	652b      	str	r3, [r5, #80]	; 0x50
#if defined(CONFIG_USERSPACE)
	thread->mem_domain_info.mem_domain = NULL;
#endif /* CONFIG_USERSPACE */

#if defined(CONFIG_THREAD_STACK_INFO)
	thread->stack_info.start = (u32_t)pStack;
   26f38:	65ac      	str	r4, [r5, #88]	; 0x58
	thread->stack_info.size = (u32_t)stackSize;
   26f3a:	65ee      	str	r6, [r5, #92]	; 0x5c
	struct __esf *pInitCtx;
	_new_thread_init(thread, pStackMem, stackSize, priority, options);

	/* carve the thread entry struct from the "base" of the stack */

	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
   26f3c:	f1a6 0120 	sub.w	r1, r6, #32
   26f40:	4421      	add	r1, r4
   26f42:	f021 0107 	bic.w	r1, r1, #7
						     sizeof(struct __esf)));

	pInitCtx->pc = ((u32_t)_thread_entry) & 0xfffffffe;
   26f46:	4a08      	ldr	r2, [pc, #32]	; (26f68 <_new_thread+0x54>)
   26f48:	f022 0201 	bic.w	r2, r2, #1
   26f4c:	618a      	str	r2, [r1, #24]
	pInitCtx->a1 = (u32_t)pEntry;
   26f4e:	600f      	str	r7, [r1, #0]
	pInitCtx->a2 = (u32_t)parameter1;
   26f50:	9a06      	ldr	r2, [sp, #24]
   26f52:	604a      	str	r2, [r1, #4]
	pInitCtx->a3 = (u32_t)parameter2;
   26f54:	9a07      	ldr	r2, [sp, #28]
   26f56:	608a      	str	r2, [r1, #8]
	pInitCtx->a4 = (u32_t)parameter3;
   26f58:	9a08      	ldr	r2, [sp, #32]
   26f5a:	60ca      	str	r2, [r1, #12]
	pInitCtx->xpsr =
   26f5c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   26f60:	61ca      	str	r2, [r1, #28]
	 * and the corresponding parameters.
	 */
	thread->entry = (struct __thread_entry *)(pInitCtx);
#endif

	thread->callee_saved.psp = (u32_t)pInitCtx;
   26f62:	64a9      	str	r1, [r5, #72]	; 0x48
	thread->arch.basepri = 0;
   26f64:	662b      	str	r3, [r5, #96]	; 0x60
   26f66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   26f68:	00028abd 	.word	0x00028abd

00026f6c <_CpuIdleInit>:
 *
 * void _CpuIdleInit (void);
 */

SECTION_FUNC(TEXT, _CpuIdleInit)
	ldr r1, =_SCB_SCR
   26f6c:	4901      	ldr	r1, [pc, #4]	; (26f74 <_CpuIdleInit+0x8>)
	movs.n r2, #_SCR_INIT_BITS
   26f6e:	2210      	movs	r2, #16
	str r2, [r1]
   26f70:	600a      	str	r2, [r1, #0]
	bx lr
   26f72:	4770      	bx	lr
	ldr r1, =_SCB_SCR
   26f74:	e000ed10 	.word	0xe000ed10

00026f78 <k_cpu_idle>:

#if defined(CONFIG_ARMV6_M)
	cpsie i
#elif defined(CONFIG_ARMV7_M)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
   26f78:	4040      	eors	r0, r0
	msr BASEPRI, r0
   26f7a:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

	wfi
   26f7e:	bf30      	wfi

	bx lr
   26f80:	4770      	bx	lr
   26f82:	bf00      	nop

00026f84 <__bus_fault>:
	mrs r0, MSP
_stack_frame_endif:

#elif defined(CONFIG_ARMV7_M)
	/* force unlock interrupts */
	eors.n r0, r0
   26f84:	4040      	eors	r0, r0
	msr BASEPRI, r0
   26f86:	f380 8811 	msr	BASEPRI, r0

	/* this checks to see if we are in a nested exception */
	ldr ip, =_SCS_ICSR
   26f8a:	f8df c01c 	ldr.w	ip, [pc, #28]	; 26fa8 <__bus_fault+0x24>
	ldr ip, [ip]
   26f8e:	f8dc c000 	ldr.w	ip, [ip]
	ands.w ip, #_SCS_ICSR_RETTOBASE
   26f92:	f41c 6c00 	ands.w	ip, ip, #2048	; 0x800

	ite eq			/* is the RETTOBASE bit zero ? */
   26f96:	bf0c      	ite	eq
		mrseq r0, MSP	/* if so, we're not returning to thread mode,
   26f98:	f3ef 8008 	mrseq	r0, MSP
				 * thus this is a nested exception: the stack
				 * frame is on the MSP */
		mrsne r0, PSP	/* if not, we are returning to thread mode, thus
   26f9c:	f3ef 8009 	mrsne	r0, PSP
				 * frame is on the PSP */
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

	push {lr}
   26fa0:	b500      	push	{lr}
	bl _Fault
   26fa2:	f7ff ff4d 	bl	26e40 <_Fault>

	pop {pc}
   26fa6:	bd00      	pop	{pc}
	ldr ip, =_SCS_ICSR
   26fa8:	e000ed04 	.word	0xe000ed04

00026fac <_NanoFatalErrorHandler>:
 * @param reason the reason that the handler was called
 * @param pEsf pointer to the exception stack frame
 */
void _NanoFatalErrorHandler(unsigned int reason,
					  const NANO_ESF *pEsf)
{
   26fac:	b538      	push	{r3, r4, r5, lr}
   26fae:	4604      	mov	r4, r0
   26fb0:	460d      	mov	r5, r1
	switch (reason) {
   26fb2:	2804      	cmp	r0, #4
   26fb4:	d017      	beq.n	26fe6 <_NanoFatalErrorHandler+0x3a>
   26fb6:	2805      	cmp	r0, #5
   26fb8:	d019      	beq.n	26fee <_NanoFatalErrorHandler+0x42>
   26fba:	2803      	cmp	r0, #3
   26fbc:	d004      	beq.n	26fc8 <_NanoFatalErrorHandler+0x1c>
	case _NANO_ERR_KERNEL_PANIC:
		printk("***** Kernel Panic! *****\n");
		break;

	default:
		printk("**** Unknown Fatal Error %d! ****\n", reason);
   26fbe:	4601      	mov	r1, r0
   26fc0:	480d      	ldr	r0, [pc, #52]	; (26ff8 <_NanoFatalErrorHandler+0x4c>)
   26fc2:	f7db ffc1 	bl	2f48 <printk>
		break;
   26fc6:	e002      	b.n	26fce <_NanoFatalErrorHandler+0x22>
		printk("**** Kernel Allocation Failure! ****\n");
   26fc8:	480c      	ldr	r0, [pc, #48]	; (26ffc <_NanoFatalErrorHandler+0x50>)
   26fca:	f7db ffbd 	bl	2f48 <printk>
   26fce:	f001 fa2b 	bl	28428 <_impl_k_current_get>
	}
	printk("Current thread ID = %p\n"
   26fd2:	69aa      	ldr	r2, [r5, #24]
   26fd4:	4601      	mov	r1, r0
   26fd6:	480a      	ldr	r0, [pc, #40]	; (27000 <_NanoFatalErrorHandler+0x54>)
   26fd8:	f7db ffb6 	bl	2f48 <printk>
	 * to respond to the error.  The decisions as to what responses are
	 * appropriate to the various errors are something the customer must
	 * decide.
	 */

	_SysFatalErrorHandler(reason, pEsf);
   26fdc:	4629      	mov	r1, r5
   26fde:	4620      	mov	r0, r4
   26fe0:	f000 f81a 	bl	27018 <_SysFatalErrorHandler>
   26fe4:	bd38      	pop	{r3, r4, r5, pc}
		printk("***** Kernel OOPS! *****\n");
   26fe6:	4807      	ldr	r0, [pc, #28]	; (27004 <_NanoFatalErrorHandler+0x58>)
   26fe8:	f7db ffae 	bl	2f48 <printk>
		break;
   26fec:	e7ef      	b.n	26fce <_NanoFatalErrorHandler+0x22>
		printk("***** Kernel Panic! *****\n");
   26fee:	4806      	ldr	r0, [pc, #24]	; (27008 <_NanoFatalErrorHandler+0x5c>)
   26ff0:	f7db ffaa 	bl	2f48 <printk>
		break;
   26ff4:	e7eb      	b.n	26fce <_NanoFatalErrorHandler+0x22>
   26ff6:	bf00      	nop
   26ff8:	00030fc0 	.word	0x00030fc0
   26ffc:	00030f60 	.word	0x00030f60
   27000:	00030fe4 	.word	0x00030fe4
   27004:	00030f88 	.word	0x00030f88
   27008:	00030fa4 	.word	0x00030fa4

0002700c <_do_kernel_oops>:
}

void _do_kernel_oops(const NANO_ESF *esf)
{
   2700c:	b508      	push	{r3, lr}
	_NanoFatalErrorHandler(esf->r0, esf);
   2700e:	4601      	mov	r1, r0
   27010:	6800      	ldr	r0, [r0, #0]
   27012:	f7ff ffcb 	bl	26fac <_NanoFatalErrorHandler>
   27016:	bd08      	pop	{r3, pc}

00027018 <_SysFatalErrorHandler>:
 *
 * @return N/A
 */
void __weak _SysFatalErrorHandler(unsigned int reason,
					 const NANO_ESF *pEsf)
{
   27018:	b510      	push	{r4, lr}
#ifdef CONFIG_STACK_SENTINEL
	if (reason == _NANO_ERR_STACK_CHK_FAIL) {
		goto hang_system;
	}
#endif
	if (reason == _NANO_ERR_KERNEL_PANIC) {
   2701a:	2805      	cmp	r0, #5
   2701c:	d00c      	beq.n	27038 <_SysFatalErrorHandler+0x20>
		goto hang_system;
	}
	if (k_is_in_isr() || _is_thread_essential()) {
   2701e:	f001 fd31 	bl	28a84 <k_is_in_isr>
   27022:	b910      	cbnz	r0, 2702a <_SysFatalErrorHandler+0x12>
   27024:	f001 fd42 	bl	28aac <_is_thread_essential>
   27028:	b158      	cbz	r0, 27042 <_SysFatalErrorHandler+0x2a>
		printk("Fatal fault in %s! Spinning...\n",
		       k_is_in_isr() ? "ISR" : "essential thread");
   2702a:	f001 fd2b 	bl	28a84 <k_is_in_isr>
		printk("Fatal fault in %s! Spinning...\n",
   2702e:	b130      	cbz	r0, 2703e <_SysFatalErrorHandler+0x26>
   27030:	4908      	ldr	r1, [pc, #32]	; (27054 <_SysFatalErrorHandler+0x3c>)
   27032:	4809      	ldr	r0, [pc, #36]	; (27058 <_SysFatalErrorHandler+0x40>)
   27034:	f7db ff88 	bl	2f48 <printk>
#else
	ARG_UNUSED(reason);
#endif

	for (;;) {
		k_cpu_idle();
   27038:	f7ff ff9e 	bl	26f78 <k_cpu_idle>
   2703c:	e7fc      	b.n	27038 <_SysFatalErrorHandler+0x20>
		printk("Fatal fault in %s! Spinning...\n",
   2703e:	4907      	ldr	r1, [pc, #28]	; (2705c <_SysFatalErrorHandler+0x44>)
   27040:	e7f7      	b.n	27032 <_SysFatalErrorHandler+0x1a>
	printk("Fatal fault in thread %p! Aborting.\n", _current);
   27042:	4c07      	ldr	r4, [pc, #28]	; (27060 <_SysFatalErrorHandler+0x48>)
   27044:	68a1      	ldr	r1, [r4, #8]
   27046:	4807      	ldr	r0, [pc, #28]	; (27064 <_SysFatalErrorHandler+0x4c>)
   27048:	f7db ff7e 	bl	2f48 <printk>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread);
   2704c:	68a0      	ldr	r0, [r4, #8]
   2704e:	f000 f80b 	bl	27068 <_impl_k_thread_abort>
	return;
   27052:	bd10      	pop	{r4, pc}
   27054:	00030430 	.word	0x00030430
   27058:	00031034 	.word	0x00031034
   2705c:	00031020 	.word	0x00031020
   27060:	20002710 	.word	0x20002710
   27064:	00031054 	.word	0x00031054

00027068 <_impl_k_thread_abort>:
#include <misc/__assert.h>

extern void _k_thread_single_abort(struct k_thread *thread);

void _impl_k_thread_abort(k_tid_t thread)
{
   27068:	b538      	push	{r3, r4, r5, lr}
   2706a:	4605      	mov	r5, r0
	__asm__ volatile(
   2706c:	f04f 0320 	mov.w	r3, #32
   27070:	f3ef 8411 	mrs	r4, BASEPRI
   27074:	f383 8811 	msr	BASEPRI, r3
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	_k_thread_single_abort(thread);
   27078:	f001 fe28 	bl	28ccc <_k_thread_single_abort>
	_thread_monitor_exit(thread);

	if (_current == thread) {
   2707c:	4b0b      	ldr	r3, [pc, #44]	; (270ac <_impl_k_thread_abort+0x44>)
   2707e:	689b      	ldr	r3, [r3, #8]
   27080:	429d      	cmp	r5, r3
   27082:	d003      	beq.n	2708c <_impl_k_thread_abort+0x24>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
		}
	}

	/* The abort handler might have altered the ready queue. */
	_reschedule_threads(key);
   27084:	4620      	mov	r0, r4
   27086:	f001 fa03 	bl	28490 <_reschedule_threads>
   2708a:	bd38      	pop	{r3, r4, r5, pc}
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
   2708c:	4b08      	ldr	r3, [pc, #32]	; (270b0 <_impl_k_thread_abort+0x48>)
   2708e:	685b      	ldr	r3, [r3, #4]
   27090:	f3c3 0308 	ubfx	r3, r3, #0, #9
   27094:	b12b      	cbz	r3, 270a2 <_impl_k_thread_abort+0x3a>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   27096:	4a06      	ldr	r2, [pc, #24]	; (270b0 <_impl_k_thread_abort+0x48>)
   27098:	6853      	ldr	r3, [r2, #4]
   2709a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   2709e:	6053      	str	r3, [r2, #4]
   270a0:	e7f0      	b.n	27084 <_impl_k_thread_abort+0x1c>

#ifdef CONFIG_STACK_SENTINEL
	_check_stack_sentinel();
#endif
#ifdef CONFIG_TIMESLICING
	_update_time_slice_before_swap();
   270a2:	f001 f9ef 	bl	28484 <_update_time_slice_before_swap>
#endif

	return __swap(key);
   270a6:	4620      	mov	r0, r4
   270a8:	f7ff fd32 	bl	26b10 <__swap>
   270ac:	20002710 	.word	0x20002710
   270b0:	e000ed00 	.word	0xe000ed00

000270b4 <_isr_wrapper>:
 *
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

	push {lr}		/* lr is now the first item on the stack */
   270b4:	b500      	push	{lr}
	 * for the next timer deadline is not interrupted.  For non-tickless idle,
	 * this ensures that the clearing of the kernel idle state is not
	 * interrupted.  In each case, _sys_power_save_idle_exit is called with
	 * interrupts disabled.
	 */
	cpsid i  /* PRIMASK = 1 */
   270b6:	b672      	cpsid	i

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   270b8:	4a0b      	ldr	r2, [pc, #44]	; (270e8 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   270ba:	6950      	ldr	r0, [r2, #20]
	cmp r0, #0
   270bc:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	blx _sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M)
	ittt ne
   270be:	bf1e      	ittt	ne
	movne	r1, #0
   270c0:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   270c2:	6151      	strne	r1, [r2, #20]
		blxne	_sys_power_save_idle_exit
   270c4:	f000 f8d8 	blne	27278 <_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   270c8:	b662      	cpsie	i
#endif

	mrs r0, IPSR	/* get exception number */
   270ca:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M)
	sub r0, r0, #16	/* get IRQ number */
   270ce:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   270d2:	ea4f 00c0 	mov.w	r0, r0, lsl #3
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */
	ldr r1, =_sw_isr_table
   270d6:	4905      	ldr	r1, [pc, #20]	; (270ec <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   270d8:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   270da:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {lr}
#endif
	ldm sp!,{r0-r3} /* Restore r0 to r4 regs */
#endif
	blx r3		/* call ISR */
   270dc:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M)
	pop {r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M)
	pop {lr}
   270de:	f85d eb04 	ldr.w	lr, [sp], #4
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

	/* exception return is done in _IntExit() */
	b _IntExit
   270e2:	f7ff bca5 	b.w	26a30 <_ExcExit>
   270e6:	0000      	.short	0x0000
	ldr r2, =_kernel
   270e8:	20002710 	.word	0x20002710
	ldr r1, =_sw_isr_table
   270ec:	000000dc 	.word	0x000000dc

000270f0 <__reset>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M)
    cpsid i
#elif defined(CONFIG_ARMV7_M)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   270f0:	2020      	movs	r0, #32
    msr BASEPRI, r0
   270f2:	f380 8811 	msr	BASEPRI, r0
    /* board-specific watchdog initialization is necessary */
    bl _WdogInit
#endif

#ifdef CONFIG_INIT_STACKS
    ldr r0, =_interrupt_stack
   270f6:	4809      	ldr	r0, [pc, #36]	; (2711c <__reset+0x2c>)
    ldr r1, =0xaa
   270f8:	f04f 01aa 	mov.w	r1, #170	; 0xaa
    ldr r2, =CONFIG_ISR_STACK_SIZE
   270fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
    bl memset
   27100:	f003 fcc0 	bl	2aa84 <memset>

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during nanoInit().
     */
    ldr r0, =_interrupt_stack
   27104:	4805      	ldr	r0, [pc, #20]	; (2711c <__reset+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
   27106:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
   2710a:	1840      	adds	r0, r0, r1
    msr PSP, r0
   2710c:	f380 8809 	msr	PSP, r0
    movs.n r0, #2	/* switch to using PSP (bit1 of CONTROL reg) */
   27110:	2002      	movs	r0, #2
    msr CONTROL, r0
   27112:	f380 8814 	msr	CONTROL, r0

    b _PrepC
   27116:	f000 b807 	b.w	27128 <_PrepC>
   2711a:	0000      	.short	0x0000
    ldr r0, =_interrupt_stack
   2711c:	2000abf8 	.word	0x2000abf8

00027120 <_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(_SysNmiOnReset)

SECTION_FUNC(TEXT, _SysNmiOnReset)
    wfi
   27120:	bf30      	wfi
    b _SysNmiOnReset
   27122:	f7ff bffd 	b.w	27120 <_SysNmiOnReset>
   27126:	bf00      	nop

00027128 <_PrepC>:

#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	extern u64_t __start_time_stamp;
#endif
void _PrepC(void)
{
   27128:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   2712a:	4a07      	ldr	r2, [pc, #28]	; (27148 <_PrepC+0x20>)
   2712c:	4b07      	ldr	r3, [pc, #28]	; (2714c <_PrepC+0x24>)
   2712e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   27132:	6093      	str	r3, [r2, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   27134:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   27138:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
	enable_floating_point();
	_bss_zero();
   2713c:	f000 f9d6 	bl	274ec <_bss_zero>
	_data_copy();
   27140:	f000 f9e0 	bl	27504 <_data_copy>
#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	__start_time_stamp = 0;
#endif
	_Cstart();
   27144:	f000 fa00 	bl	27548 <_Cstart>
   27148:	e000ed00 	.word	0xe000ed00
   2714c:	00000000 	.word	0x00000000

00027150 <__nmi>:
 *
 * @return N/A
 */

void __nmi(void)
{
   27150:	b508      	push	{r3, lr}
	handler();
   27152:	f7ff ffe5 	bl	27120 <_SysNmiOnReset>
	_ExcExit();
   27156:	f7ff fc6b 	bl	26a30 <_ExcExit>
   2715a:	bd08      	pop	{r3, pc}

0002715c <_region_init>:

static void _region_init(u32_t index, u32_t region_addr,
			 u32_t region_attr)
{
	/* Select the region you want to access */
	ARM_MPU_DEV->rnr = index;
   2715c:	4b05      	ldr	r3, [pc, #20]	; (27174 <_region_init+0x18>)
   2715e:	6098      	str	r0, [r3, #8]
	/* Configure the region */
	ARM_MPU_DEV->rbar = (region_addr & REGION_BASE_ADDR_MASK)
   27160:	f021 011f 	bic.w	r1, r1, #31
				| REGION_VALID | index;
   27164:	4308      	orrs	r0, r1
   27166:	f040 0010 	orr.w	r0, r0, #16
	ARM_MPU_DEV->rbar = (region_addr & REGION_BASE_ADDR_MASK)
   2716a:	60d8      	str	r0, [r3, #12]
	ARM_MPU_DEV->rasr = region_attr | REGION_ENABLE;
   2716c:	f042 0201 	orr.w	r2, r2, #1
   27170:	611a      	str	r2, [r3, #16]
   27172:	4770      	bx	lr
   27174:	e000ed90 	.word	0xe000ed90

00027178 <_arm_mpu_config>:
static void _arm_mpu_config(void)
{
	u32_t r_index;

	/* ARM MPU supports up to 16 Regions */
	if (mpu_config.num_regions > _get_num_regions()) {
   27178:	4b14      	ldr	r3, [pc, #80]	; (271cc <_arm_mpu_config+0x54>)
   2717a:	681a      	ldr	r2, [r3, #0]
	u32_t type = ARM_MPU_DEV->type;
   2717c:	4b14      	ldr	r3, [pc, #80]	; (271d0 <_arm_mpu_config+0x58>)
   2717e:	681b      	ldr	r3, [r3, #0]
	if (mpu_config.num_regions > _get_num_regions()) {
   27180:	f3c3 2307 	ubfx	r3, r3, #8, #8
   27184:	429a      	cmp	r2, r3
   27186:	d81f      	bhi.n	271c8 <_arm_mpu_config+0x50>
{
   27188:	b510      	push	{r4, lr}
		return;
	}

	/* Disable MPU */
	ARM_MPU_DEV->ctrl = 0;
   2718a:	2400      	movs	r4, #0
   2718c:	4b10      	ldr	r3, [pc, #64]	; (271d0 <_arm_mpu_config+0x58>)
   2718e:	605c      	str	r4, [r3, #4]

	/* Configure regions */
	for (r_index = 0; r_index < mpu_config.num_regions; r_index++) {
   27190:	e00b      	b.n	271aa <_arm_mpu_config+0x32>
		_region_init(r_index,
			     mpu_config.mpu_regions[r_index].base,
   27192:	4b0e      	ldr	r3, [pc, #56]	; (271cc <_arm_mpu_config+0x54>)
   27194:	6859      	ldr	r1, [r3, #4]
   27196:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   2719a:	0093      	lsls	r3, r2, #2
   2719c:	18ca      	adds	r2, r1, r3
		_region_init(r_index,
   2719e:	6892      	ldr	r2, [r2, #8]
   271a0:	58c9      	ldr	r1, [r1, r3]
   271a2:	4620      	mov	r0, r4
   271a4:	f7ff ffda 	bl	2715c <_region_init>
	for (r_index = 0; r_index < mpu_config.num_regions; r_index++) {
   271a8:	3401      	adds	r4, #1
   271aa:	4b08      	ldr	r3, [pc, #32]	; (271cc <_arm_mpu_config+0x54>)
   271ac:	681b      	ldr	r3, [r3, #0]
   271ae:	429c      	cmp	r4, r3
   271b0:	d3ef      	bcc.n	27192 <_arm_mpu_config+0x1a>
			     mpu_config.mpu_regions[r_index].attr);
	}

	/* Enable MPU */
	ARM_MPU_DEV->ctrl = ARM_MPU_ENABLE | ARM_MPU_PRIVDEFENA;
   271b2:	2205      	movs	r2, #5
   271b4:	4b06      	ldr	r3, [pc, #24]	; (271d0 <_arm_mpu_config+0x58>)
   271b6:	605a      	str	r2, [r3, #4]

	arm_mpu_enabled = 1;
   271b8:	2201      	movs	r2, #1
   271ba:	4b06      	ldr	r3, [pc, #24]	; (271d4 <_arm_mpu_config+0x5c>)
   271bc:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
   271be:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   271c2:	f3bf 8f6f 	isb	sy
   271c6:	bd10      	pop	{r4, pc}
   271c8:	4770      	bx	lr
   271ca:	bf00      	nop
   271cc:	2000c4c0 	.word	0x2000c4c0
   271d0:	e000ed90 	.word	0xe000ed90
   271d4:	2000263c 	.word	0x2000263c

000271d8 <arm_mpu_init>:
	__DSB();
	__ISB();
}

static int arm_mpu_init(struct device *arg)
{
   271d8:	b508      	push	{r3, lr}
	ARG_UNUSED(arg);

	_arm_mpu_config();
   271da:	f7ff ffcd 	bl	27178 <_arm_mpu_config>

	return 0;
}
   271de:	2000      	movs	r0, #0
   271e0:	bd08      	pop	{r3, pc}
	...

000271e4 <_sys_device_do_config_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void _sys_device_do_config_level(int level)
{
   271e4:	b538      	push	{r3, r4, r5, lr}
   271e6:	4605      	mov	r5, r0
	struct device *info;

	for (info = config_levels[level]; info < config_levels[level+1];
   271e8:	4b07      	ldr	r3, [pc, #28]	; (27208 <_sys_device_do_config_level+0x24>)
   271ea:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   271ee:	e004      	b.n	271fa <_sys_device_do_config_level+0x16>
								info++) {
		struct device_config *device = info->config;
   271f0:	6823      	ldr	r3, [r4, #0]

		device->init(info);
   271f2:	685b      	ldr	r3, [r3, #4]
   271f4:	4620      	mov	r0, r4
   271f6:	4798      	blx	r3
								info++) {
   271f8:	340c      	adds	r4, #12
	for (info = config_levels[level]; info < config_levels[level+1];
   271fa:	1c6b      	adds	r3, r5, #1
   271fc:	4a02      	ldr	r2, [pc, #8]	; (27208 <_sys_device_do_config_level+0x24>)
   271fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   27202:	429c      	cmp	r4, r3
   27204:	d3f4      	bcc.n	271f0 <_sys_device_do_config_level+0xc>
		_k_object_init(info);
	}
}
   27206:	bd38      	pop	{r3, r4, r5, pc}
   27208:	0003107c 	.word	0x0003107c

0002720c <device_get_binding>:

struct device *device_get_binding(const char *name)
{
   2720c:	b538      	push	{r3, r4, r5, lr}
   2720e:	4605      	mov	r5, r0
	struct device *info;

	for (info = __device_init_start; info != __device_init_end; info++) {
   27210:	4c0a      	ldr	r4, [pc, #40]	; (2723c <device_get_binding+0x30>)
   27212:	e000      	b.n	27216 <device_get_binding+0xa>
   27214:	340c      	adds	r4, #12
   27216:	4b0a      	ldr	r3, [pc, #40]	; (27240 <device_get_binding+0x34>)
   27218:	429c      	cmp	r4, r3
   2721a:	d00c      	beq.n	27236 <device_get_binding+0x2a>
		if (!info->driver_api) {
   2721c:	6863      	ldr	r3, [r4, #4]
   2721e:	2b00      	cmp	r3, #0
   27220:	d0f8      	beq.n	27214 <device_get_binding+0x8>
			continue;
		}

		if (name == info->config->name) {
   27222:	6823      	ldr	r3, [r4, #0]
   27224:	6819      	ldr	r1, [r3, #0]
   27226:	42a9      	cmp	r1, r5
   27228:	d006      	beq.n	27238 <device_get_binding+0x2c>
			return info;
		}

		if (!strcmp(name, info->config->name)) {
   2722a:	4628      	mov	r0, r5
   2722c:	f7d9 f8ec 	bl	408 <strcmp>
   27230:	2800      	cmp	r0, #0
   27232:	d1ef      	bne.n	27214 <device_get_binding+0x8>
   27234:	e000      	b.n	27238 <device_get_binding+0x2c>
			return info;
		}
	}

	return NULL;
   27236:	2400      	movs	r4, #0
}
   27238:	4620      	mov	r0, r4
   2723a:	bd38      	pop	{r3, r4, r5, pc}
   2723c:	2000ceb8 	.word	0x2000ceb8
   27240:	2000cf78 	.word	0x2000cf78

00027244 <set_kernel_idle_time_in_ticks>:
 *
 * @return N/A
 */
static void set_kernel_idle_time_in_ticks(s32_t ticks)
{
	_kernel.idle = ticks;
   27244:	4b01      	ldr	r3, [pc, #4]	; (2724c <set_kernel_idle_time_in_ticks+0x8>)
   27246:	6158      	str	r0, [r3, #20]
   27248:	4770      	bx	lr
   2724a:	bf00      	nop
   2724c:	20002710 	.word	0x20002710

00027250 <_sys_power_save_idle>:
#else
#define set_kernel_idle_time_in_ticks(x) do { } while (0)
#endif

static void _sys_power_save_idle(s32_t ticks)
{
   27250:	b510      	push	{r4, lr}
   27252:	4604      	mov	r4, r0
			k_cpu_idle();
			return;
		}
	}
#endif
	if (_must_enter_tickless_idle(ticks)) {
   27254:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   27258:	d003      	beq.n	27262 <_sys_power_save_idle+0x12>
   2725a:	4b06      	ldr	r3, [pc, #24]	; (27274 <_sys_power_save_idle+0x24>)
   2725c:	681b      	ldr	r3, [r3, #0]
   2725e:	4298      	cmp	r0, r3
   27260:	db02      	blt.n	27268 <_sys_power_save_idle+0x18>
		/*
		 * In the case of tickless kernel, timer driver should
		 * reprogram timer only if the currently programmed time
		 * duration is smaller than the idle time.
		 */
		_timer_idle_enter(ticks);
   27262:	4620      	mov	r0, r4
   27264:	f7db f8e4 	bl	2430 <_timer_idle_enter>
	}

	set_kernel_idle_time_in_ticks(ticks);
   27268:	4620      	mov	r0, r4
   2726a:	f7ff ffeb 	bl	27244 <set_kernel_idle_time_in_ticks>
	if (_sys_soc_suspend(ticks) == SYS_PM_NOT_HANDLED) {
		_sys_pm_idle_exit_notify = 0;
		k_cpu_idle();
	}
#else
	k_cpu_idle();
   2726e:	f7ff fe83 	bl	26f78 <k_cpu_idle>
   27272:	bd10      	pop	{r4, pc}
   27274:	2000c504 	.word	0x2000c504

00027278 <_sys_power_save_idle_exit>:
#endif
}

void _sys_power_save_idle_exit(s32_t ticks)
{
   27278:	b508      	push	{r3, lr}
	if (_sys_pm_idle_exit_notify) {
		_sys_soc_resume();
	}
#endif

	if (_must_enter_tickless_idle(ticks)) {
   2727a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   2727e:	d003      	beq.n	27288 <_sys_power_save_idle_exit+0x10>
   27280:	4b03      	ldr	r3, [pc, #12]	; (27290 <_sys_power_save_idle_exit+0x18>)
   27282:	681b      	ldr	r3, [r3, #0]
   27284:	4298      	cmp	r0, r3
   27286:	db01      	blt.n	2728c <_sys_power_save_idle_exit+0x14>
		/* Resume normal periodic system timer interrupts */
		_timer_idle_exit();
   27288:	f7db f8e8 	bl	245c <_timer_idle_exit>
   2728c:	bd08      	pop	{r3, pc}
   2728e:	bf00      	nop
   27290:	2000c504 	.word	0x2000c504

00027294 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while ((0))
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
   27294:	b508      	push	{r3, lr}
   27296:	e005      	b.n	272a4 <idle+0x10>
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   27298:	2300      	movs	r3, #0
   2729a:	e00e      	b.n	272ba <idle+0x26>
static inline s32_t _get_next_timeout_expiry(void)
{
	struct _timeout *t = (struct _timeout *)
			     sys_dlist_peek_head(&_timeout_q);

	return t ? t->delta_ticks_from_prev : K_FOREVER;
   2729c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	__idle_time_stamp = (u64_t)k_cycle_get_32();
#endif

	for (;;) {
		(void)irq_lock();
		_sys_power_save_idle(_get_next_timeout_expiry());
   272a0:	f7ff ffd6 	bl	27250 <_sys_power_save_idle>
   272a4:	f04f 0220 	mov.w	r2, #32
   272a8:	f3ef 8311 	mrs	r3, BASEPRI
   272ac:	f382 8811 	msr	BASEPRI, r2
	return list->head == list;
   272b0:	4a04      	ldr	r2, [pc, #16]	; (272c4 <idle+0x30>)
   272b2:	f852 3f0c 	ldr.w	r3, [r2, #12]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   272b6:	4293      	cmp	r3, r2
   272b8:	d0ee      	beq.n	27298 <idle+0x4>
   272ba:	2b00      	cmp	r3, #0
   272bc:	d0ee      	beq.n	2729c <idle+0x8>
   272be:	6918      	ldr	r0, [r3, #16]
   272c0:	e7ee      	b.n	272a0 <idle+0xc>
   272c2:	bf00      	nop
   272c4:	20002710 	.word	0x20002710

000272c8 <switch_to_main_thread>:

	kernel_arch_init();
}

static void switch_to_main_thread(void)
{
   272c8:	b480      	push	{r7}
   272ca:	af00      	add	r7, sp, #0
	/* get high address of the stack, i.e. its start (stack grows down) */
	char *start_of_main_stack;

	start_of_main_stack =
		K_THREAD_STACK_BUFFER(main_stack) + main_stack_size;
	start_of_main_stack = (void *)STACK_ROUND_DOWN(start_of_main_stack);
   272cc:	4b07      	ldr	r3, [pc, #28]	; (272ec <switch_to_main_thread+0x24>)
   272ce:	f023 0307 	bic.w	r3, r3, #7

	_current = main_thread;
   272d2:	4907      	ldr	r1, [pc, #28]	; (272f0 <switch_to_main_thread+0x28>)
   272d4:	4a07      	ldr	r2, [pc, #28]	; (272f4 <switch_to_main_thread+0x2c>)
   272d6:	6091      	str	r1, [r2, #8]

	/* the ready queue cache already contains the main thread */

	__asm__ __volatile__(
   272d8:	4c07      	ldr	r4, [pc, #28]	; (272f8 <switch_to_main_thread+0x30>)
   272da:	4a08      	ldr	r2, [pc, #32]	; (272fc <switch_to_main_thread+0x34>)
   272dc:	f383 8809 	msr	PSP, r3
   272e0:	2100      	movs	r1, #0
   272e2:	f381 8811 	msr	BASEPRI, r1
   272e6:	4610      	mov	r0, r2
   272e8:	4720      	bx	r4
   272ea:	bf00      	nop
   272ec:	2000aab8 	.word	0x2000aab8
   272f0:	200026a8 	.word	0x200026a8
   272f4:	20002710 	.word	0x20002710
   272f8:	00028abd 	.word	0x00028abd
   272fc:	00027521 	.word	0x00027521

00027300 <prepare_multithreading>:
{
   27300:	b5f0      	push	{r4, r5, r6, r7, lr}
   27302:	b087      	sub	sp, #28
	_IntLibInit();
   27304:	f7ff fbaa 	bl	26a5c <_IntLibInit>
	for (int ii = 0; ii < K_NUM_PRIORITIES; ii++) {
   27308:	2300      	movs	r3, #0
   2730a:	e007      	b.n	2731c <prepare_multithreading+0x1c>
		sys_dlist_init(&_ready_q.q[ii]);
   2730c:	1d18      	adds	r0, r3, #4
   2730e:	4927      	ldr	r1, [pc, #156]	; (273ac <prepare_multithreading+0xac>)
   27310:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
	list->head = (sys_dnode_t *)list;
   27314:	f841 2030 	str.w	r2, [r1, r0, lsl #3]
	list->tail = (sys_dnode_t *)list;
   27318:	6052      	str	r2, [r2, #4]
	for (int ii = 0; ii < K_NUM_PRIORITIES; ii++) {
   2731a:	3301      	adds	r3, #1
   2731c:	2b1f      	cmp	r3, #31
   2731e:	ddf5      	ble.n	2730c <prepare_multithreading+0xc>
	_ready_q.cache = _main_thread;
   27320:	4e22      	ldr	r6, [pc, #136]	; (273ac <prepare_multithreading+0xac>)
   27322:	4d23      	ldr	r5, [pc, #140]	; (273b0 <prepare_multithreading+0xb0>)
   27324:	61b5      	str	r5, [r6, #24]
	_setup_new_thread(_main_thread, _main_stack,
   27326:	2701      	movs	r7, #1
   27328:	9704      	str	r7, [sp, #16]
   2732a:	2400      	movs	r4, #0
   2732c:	9403      	str	r4, [sp, #12]
   2732e:	9402      	str	r4, [sp, #8]
   27330:	9401      	str	r4, [sp, #4]
   27332:	9400      	str	r4, [sp, #0]
   27334:	4b1f      	ldr	r3, [pc, #124]	; (273b4 <prepare_multithreading+0xb4>)
   27336:	f44f 6200 	mov.w	r2, #2048	; 0x800
   2733a:	491f      	ldr	r1, [pc, #124]	; (273b8 <prepare_multithreading+0xb8>)
   2733c:	4628      	mov	r0, r5
   2733e:	f001 fc9b 	bl	28c78 <_setup_new_thread>
 *
 * This routine must be called with interrupts locked.
 */
static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   27342:	7a6b      	ldrb	r3, [r5, #9]
   27344:	f023 0304 	bic.w	r3, r3, #4
   27348:	726b      	strb	r3, [r5, #9]
	_add_thread_to_ready_q(_main_thread);
   2734a:	4628      	mov	r0, r5
   2734c:	f000 ff08 	bl	28160 <_add_thread_to_ready_q>
	_setup_new_thread(_idle_thread, _idle_stack,
   27350:	4d1a      	ldr	r5, [pc, #104]	; (273bc <prepare_multithreading+0xbc>)
   27352:	9704      	str	r7, [sp, #16]
   27354:	230f      	movs	r3, #15
   27356:	9303      	str	r3, [sp, #12]
   27358:	9402      	str	r4, [sp, #8]
   2735a:	9401      	str	r4, [sp, #4]
   2735c:	9400      	str	r4, [sp, #0]
   2735e:	4b18      	ldr	r3, [pc, #96]	; (273c0 <prepare_multithreading+0xc0>)
   27360:	f44f 72a0 	mov.w	r2, #320	; 0x140
   27364:	4917      	ldr	r1, [pc, #92]	; (273c4 <prepare_multithreading+0xc4>)
   27366:	4628      	mov	r0, r5
   27368:	f001 fc86 	bl	28c78 <_setup_new_thread>
   2736c:	7a6b      	ldrb	r3, [r5, #9]
   2736e:	f023 0304 	bic.w	r3, r3, #4
   27372:	726b      	strb	r3, [r5, #9]
	_add_thread_to_ready_q(_idle_thread);
   27374:	4628      	mov	r0, r5
   27376:	f000 fef3 	bl	28160 <_add_thread_to_ready_q>
	list->head = (sys_dnode_t *)list;
   2737a:	f106 030c 	add.w	r3, r6, #12
   2737e:	60f3      	str	r3, [r6, #12]
	list->tail = (sys_dnode_t *)list;
   27380:	6133      	str	r3, [r6, #16]
 *
 * @return N/A
 */
static ALWAYS_INLINE void _InterruptStackSetup(void)
{
	u32_t msp = (u32_t)(K_THREAD_STACK_BUFFER(_interrupt_stack) +
   27382:	4b11      	ldr	r3, [pc, #68]	; (273c8 <prepare_multithreading+0xc8>)
 * @return N/A
 */
static ALWAYS_INLINE void _MspSet(u32_t msp /* value to store in MSP */
				  )
{
	__asm__ volatile("msr MSP, %0\n\t" :  : "r"(msp));
   27384:	f383 8808 	msr	MSP, r3
   27388:	4b10      	ldr	r3, [pc, #64]	; (273cc <prepare_multithreading+0xcc>)
   2738a:	22e0      	movs	r2, #224	; 0xe0
   2738c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
   27390:	77dc      	strb	r4, [r3, #31]
   27392:	761c      	strb	r4, [r3, #24]
   27394:	765c      	strb	r4, [r3, #25]
   27396:	769c      	strb	r4, [r3, #26]
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   27398:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   2739a:	f442 22e0 	orr.w	r2, r2, #458752	; 0x70000
   2739e:	625a      	str	r2, [r3, #36]	; 0x24
	_FaultInit();
   273a0:	f7ff fd5e 	bl	26e60 <_FaultInit>
	_CpuIdleInit();
   273a4:	f7ff fde2 	bl	26f6c <_CpuIdleInit>
}
   273a8:	b007      	add	sp, #28
   273aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   273ac:	20002710 	.word	0x20002710
   273b0:	200026a8 	.word	0x200026a8
   273b4:	00027521 	.word	0x00027521
   273b8:	2000a2b8 	.word	0x2000a2b8
   273bc:	20002640 	.word	0x20002640
   273c0:	00027295 	.word	0x00027295
   273c4:	2000aab8 	.word	0x2000aab8
   273c8:	2000b3f8 	.word	0x2000b3f8
   273cc:	e000ed00 	.word	0xe000ed00

000273d0 <k_call_stacks_analyze>:
{
   273d0:	b500      	push	{lr}
   273d2:	b085      	sub	sp, #20
	printk("Kernel stacks:\n");
   273d4:	483a      	ldr	r0, [pc, #232]	; (274c0 <k_call_stacks_analyze+0xf0>)
   273d6:	f7db fdb7 	bl	2f48 <printk>
   273da:	2200      	movs	r2, #0
	size_t unused = 0;
   273dc:	4613      	mov	r3, r2
	for (i = 0; i < size; i++) {
   273de:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
   273e2:	d206      	bcs.n	273f2 <k_call_stacks_analyze+0x22>
		if ((unsigned char)stack[i] == 0xaa) {
   273e4:	4937      	ldr	r1, [pc, #220]	; (274c4 <k_call_stacks_analyze+0xf4>)
   273e6:	5c89      	ldrb	r1, [r1, r2]
   273e8:	29aa      	cmp	r1, #170	; 0xaa
   273ea:	d102      	bne.n	273f2 <k_call_stacks_analyze+0x22>
			unused++;
   273ec:	3301      	adds	r3, #1
	for (i = 0; i < size; i++) {
   273ee:	3201      	adds	r2, #1
   273f0:	e7f5      	b.n	273de <k_call_stacks_analyze+0xe>
	pcnt = ((size - unused) * 100) / size;
   273f2:	f5c3 6100 	rsb	r1, r3, #2048	; 0x800
   273f6:	2264      	movs	r2, #100	; 0x64
   273f8:	fb02 f201 	mul.w	r2, r2, r1
   273fc:	0ad2      	lsrs	r2, r2, #11
	printk("%s (real size %u):\tunused %u\tusage %u / %u (%u %%)\n", name,
   273fe:	9202      	str	r2, [sp, #8]
   27400:	f44f 6200 	mov.w	r2, #2048	; 0x800
   27404:	9201      	str	r2, [sp, #4]
   27406:	9100      	str	r1, [sp, #0]
   27408:	492f      	ldr	r1, [pc, #188]	; (274c8 <k_call_stacks_analyze+0xf8>)
   2740a:	4830      	ldr	r0, [pc, #192]	; (274cc <k_call_stacks_analyze+0xfc>)
   2740c:	f7db fd9c 	bl	2f48 <printk>
	for (i = 0; i < size; i++) {
   27410:	2200      	movs	r2, #0
	size_t unused = 0;
   27412:	4613      	mov	r3, r2
	for (i = 0; i < size; i++) {
   27414:	f5b2 7fa0 	cmp.w	r2, #320	; 0x140
   27418:	d206      	bcs.n	27428 <k_call_stacks_analyze+0x58>
		if ((unsigned char)stack[i] == 0xaa) {
   2741a:	492d      	ldr	r1, [pc, #180]	; (274d0 <k_call_stacks_analyze+0x100>)
   2741c:	5c89      	ldrb	r1, [r1, r2]
   2741e:	29aa      	cmp	r1, #170	; 0xaa
   27420:	d102      	bne.n	27428 <k_call_stacks_analyze+0x58>
			unused++;
   27422:	3301      	adds	r3, #1
	for (i = 0; i < size; i++) {
   27424:	3201      	adds	r2, #1
   27426:	e7f5      	b.n	27414 <k_call_stacks_analyze+0x44>
	pcnt = ((size - unused) * 100) / size;
   27428:	f5c3 71a0 	rsb	r1, r3, #320	; 0x140
   2742c:	2264      	movs	r2, #100	; 0x64
   2742e:	fb02 f201 	mul.w	r2, r2, r1
   27432:	4828      	ldr	r0, [pc, #160]	; (274d4 <k_call_stacks_analyze+0x104>)
   27434:	fba0 0202 	umull	r0, r2, r0, r2
   27438:	0a12      	lsrs	r2, r2, #8
	printk("%s (real size %u):\tunused %u\tusage %u / %u (%u %%)\n", name,
   2743a:	9202      	str	r2, [sp, #8]
   2743c:	f44f 72a0 	mov.w	r2, #320	; 0x140
   27440:	9201      	str	r2, [sp, #4]
   27442:	9100      	str	r1, [sp, #0]
   27444:	4924      	ldr	r1, [pc, #144]	; (274d8 <k_call_stacks_analyze+0x108>)
   27446:	4821      	ldr	r0, [pc, #132]	; (274cc <k_call_stacks_analyze+0xfc>)
   27448:	f7db fd7e 	bl	2f48 <printk>
	for (i = 0; i < size; i++) {
   2744c:	2200      	movs	r2, #0
	size_t unused = 0;
   2744e:	4613      	mov	r3, r2
	for (i = 0; i < size; i++) {
   27450:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
   27454:	d206      	bcs.n	27464 <k_call_stacks_analyze+0x94>
		if ((unsigned char)stack[i] == 0xaa) {
   27456:	4921      	ldr	r1, [pc, #132]	; (274dc <k_call_stacks_analyze+0x10c>)
   27458:	5c89      	ldrb	r1, [r1, r2]
   2745a:	29aa      	cmp	r1, #170	; 0xaa
   2745c:	d102      	bne.n	27464 <k_call_stacks_analyze+0x94>
			unused++;
   2745e:	3301      	adds	r3, #1
	for (i = 0; i < size; i++) {
   27460:	3201      	adds	r2, #1
   27462:	e7f5      	b.n	27450 <k_call_stacks_analyze+0x80>
	pcnt = ((size - unused) * 100) / size;
   27464:	f5c3 6100 	rsb	r1, r3, #2048	; 0x800
   27468:	2264      	movs	r2, #100	; 0x64
   2746a:	fb02 f201 	mul.w	r2, r2, r1
   2746e:	0ad2      	lsrs	r2, r2, #11
	printk("%s (real size %u):\tunused %u\tusage %u / %u (%u %%)\n", name,
   27470:	9202      	str	r2, [sp, #8]
   27472:	f44f 6200 	mov.w	r2, #2048	; 0x800
   27476:	9201      	str	r2, [sp, #4]
   27478:	9100      	str	r1, [sp, #0]
   2747a:	4919      	ldr	r1, [pc, #100]	; (274e0 <k_call_stacks_analyze+0x110>)
   2747c:	4813      	ldr	r0, [pc, #76]	; (274cc <k_call_stacks_analyze+0xfc>)
   2747e:	f7db fd63 	bl	2f48 <printk>
	for (i = 0; i < size; i++) {
   27482:	2200      	movs	r2, #0
	size_t unused = 0;
   27484:	4613      	mov	r3, r2
	for (i = 0; i < size; i++) {
   27486:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   2748a:	d206      	bcs.n	2749a <k_call_stacks_analyze+0xca>
		if ((unsigned char)stack[i] == 0xaa) {
   2748c:	4915      	ldr	r1, [pc, #84]	; (274e4 <k_call_stacks_analyze+0x114>)
   2748e:	5c89      	ldrb	r1, [r1, r2]
   27490:	29aa      	cmp	r1, #170	; 0xaa
   27492:	d102      	bne.n	2749a <k_call_stacks_analyze+0xca>
			unused++;
   27494:	3301      	adds	r3, #1
	for (i = 0; i < size; i++) {
   27496:	3201      	adds	r2, #1
   27498:	e7f5      	b.n	27486 <k_call_stacks_analyze+0xb6>
	pcnt = ((size - unused) * 100) / size;
   2749a:	f5c3 6180 	rsb	r1, r3, #1024	; 0x400
   2749e:	2264      	movs	r2, #100	; 0x64
   274a0:	fb02 f201 	mul.w	r2, r2, r1
   274a4:	0a92      	lsrs	r2, r2, #10
	printk("%s (real size %u):\tunused %u\tusage %u / %u (%u %%)\n", name,
   274a6:	9202      	str	r2, [sp, #8]
   274a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
   274ac:	9201      	str	r2, [sp, #4]
   274ae:	9100      	str	r1, [sp, #0]
   274b0:	490d      	ldr	r1, [pc, #52]	; (274e8 <k_call_stacks_analyze+0x118>)
   274b2:	4806      	ldr	r0, [pc, #24]	; (274cc <k_call_stacks_analyze+0xfc>)
   274b4:	f7db fd48 	bl	2f48 <printk>
}
   274b8:	b005      	add	sp, #20
   274ba:	f85d fb04 	ldr.w	pc, [sp], #4
   274be:	bf00      	nop
   274c0:	00031098 	.word	0x00031098
   274c4:	2000a2b8 	.word	0x2000a2b8
   274c8:	000310a8 	.word	0x000310a8
   274cc:	0002f448 	.word	0x0002f448
   274d0:	2000aab8 	.word	0x2000aab8
   274d4:	cccccccd 	.word	0xcccccccd
   274d8:	000310b4 	.word	0x000310b4
   274dc:	2000abf8 	.word	0x2000abf8
   274e0:	000310c0 	.word	0x000310c0
   274e4:	2000b3f8 	.word	0x2000b3f8
   274e8:	000310cc 	.word	0x000310cc

000274ec <_bss_zero>:
{
   274ec:	b508      	push	{r3, lr}
		 ((u32_t) &__bss_end - (u32_t) &__bss_start));
   274ee:	4803      	ldr	r0, [pc, #12]	; (274fc <_bss_zero+0x10>)
	memset(&__bss_start, 0,
   274f0:	4a03      	ldr	r2, [pc, #12]	; (27500 <_bss_zero+0x14>)
   274f2:	1a12      	subs	r2, r2, r0
   274f4:	2100      	movs	r1, #0
   274f6:	f003 fac5 	bl	2aa84 <memset>
   274fa:	bd08      	pop	{r3, pc}
   274fc:	20000000 	.word	0x20000000
   27500:	20002ba8 	.word	0x20002ba8

00027504 <_data_copy>:
{
   27504:	b508      	push	{r3, lr}
		 ((u32_t) &__data_ram_end - (u32_t) &__data_ram_start));
   27506:	4803      	ldr	r0, [pc, #12]	; (27514 <_data_copy+0x10>)
	memcpy(&__data_ram_start, &__data_rom_start,
   27508:	4a03      	ldr	r2, [pc, #12]	; (27518 <_data_copy+0x14>)
   2750a:	1a12      	subs	r2, r2, r0
   2750c:	4903      	ldr	r1, [pc, #12]	; (2751c <_data_copy+0x18>)
   2750e:	f7d8 fed7 	bl	2c0 <memcpy>
   27512:	bd08      	pop	{r3, pc}
   27514:	2000b7f8 	.word	0x2000b7f8
   27518:	2000d454 	.word	0x2000d454
   2751c:	0003152c 	.word	0x0003152c

00027520 <_main>:
{
   27520:	b508      	push	{r3, lr}
	_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
   27522:	2002      	movs	r0, #2
   27524:	f7ff fe5e 	bl	271e4 <_sys_device_do_config_level>
	_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
   27528:	2003      	movs	r0, #3
   2752a:	f7ff fe5b 	bl	271e4 <_sys_device_do_config_level>
	_init_static_threads();
   2752e:	f001 fc11 	bl	28d54 <_init_static_threads>
	main();
   27532:	f7da fa15 	bl	1960 <main>
	_main_thread->base.user_options &= ~K_ESSENTIAL;
   27536:	4a03      	ldr	r2, [pc, #12]	; (27544 <_main+0x24>)
   27538:	7a13      	ldrb	r3, [r2, #8]
   2753a:	f023 0301 	bic.w	r3, r3, #1
   2753e:	7213      	strb	r3, [r2, #8]
   27540:	bd08      	pop	{r3, pc}
   27542:	bf00      	nop
   27544:	200026a8 	.word	0x200026a8

00027548 <_Cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void _Cstart(void)
{
   27548:	b508      	push	{r3, lr}
	 * Initialize kernel data structures. This step includes
	 * initializing the interrupt subsystem, which must be performed
	 * before the hardware initialization phase.
	 */

	prepare_multithreading(dummy_thread);
   2754a:	2000      	movs	r0, #0
   2754c:	f7ff fed8 	bl	27300 <prepare_multithreading>

	/* perform basic hardware initialization */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   27550:	2000      	movs	r0, #0
   27552:	f7ff fe47 	bl	271e4 <_sys_device_do_config_level>
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   27556:	2001      	movs	r0, #1
   27558:	f7ff fe44 	bl	271e4 <_sys_device_do_config_level>
	__stack_chk_guard = (void *)sys_rand32_get();
#endif

	/* display boot banner */

	switch_to_main_thread();
   2755c:	f7ff feb4 	bl	272c8 <switch_to_main_thread>

00027560 <create_free_list>:
static void create_free_list(struct k_mem_slab *slab)
{
	u32_t j;
	char *p;

	slab->free_list = NULL;
   27560:	2200      	movs	r2, #0
   27562:	6142      	str	r2, [r0, #20]
	p = slab->buffer;
   27564:	6903      	ldr	r3, [r0, #16]

	for (j = 0; j < slab->num_blocks; j++) {
   27566:	e005      	b.n	27574 <create_free_list+0x14>
		*(char **)p = slab->free_list;
   27568:	6941      	ldr	r1, [r0, #20]
   2756a:	6019      	str	r1, [r3, #0]
		slab->free_list = p;
   2756c:	6143      	str	r3, [r0, #20]
		p += slab->block_size;
   2756e:	68c1      	ldr	r1, [r0, #12]
   27570:	440b      	add	r3, r1
	for (j = 0; j < slab->num_blocks; j++) {
   27572:	3201      	adds	r2, #1
   27574:	6881      	ldr	r1, [r0, #8]
   27576:	428a      	cmp	r2, r1
   27578:	d3f6      	bcc.n	27568 <create_free_list+0x8>
	}
}
   2757a:	4770      	bx	lr

0002757c <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(struct device *dev)
{
   2757c:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	struct k_mem_slab *slab;

	for (slab = _k_mem_slab_list_start;
   2757e:	4c05      	ldr	r4, [pc, #20]	; (27594 <init_mem_slab_module+0x18>)
   27580:	e003      	b.n	2758a <init_mem_slab_module+0xe>
	     slab < _k_mem_slab_list_end;
	     slab++) {
		create_free_list(slab);
   27582:	4620      	mov	r0, r4
   27584:	f7ff ffec 	bl	27560 <create_free_list>
	     slab++) {
   27588:	341c      	adds	r4, #28
	for (slab = _k_mem_slab_list_start;
   2758a:	4b03      	ldr	r3, [pc, #12]	; (27598 <init_mem_slab_module+0x1c>)
   2758c:	429c      	cmp	r4, r3
   2758e:	d3f8      	bcc.n	27582 <init_mem_slab_module+0x6>
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
	}
	return 0;
}
   27590:	2000      	movs	r0, #0
   27592:	bd10      	pop	{r4, pc}
   27594:	2000cf84 	.word	0x2000cf84
   27598:	2000cfbc 	.word	0x2000cfbc

0002759c <k_mem_slab_alloc>:

	_k_object_init(slab);
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, s32_t timeout)
{
   2759c:	b538      	push	{r3, r4, r5, lr}
   2759e:	f04f 0320 	mov.w	r3, #32
   275a2:	f3ef 8411 	mrs	r4, BASEPRI
   275a6:	f383 8811 	msr	BASEPRI, r3
	unsigned int key = irq_lock();
	int result;

	if (slab->free_list != NULL) {
   275aa:	6943      	ldr	r3, [r0, #20]
   275ac:	b15b      	cbz	r3, 275c6 <k_mem_slab_alloc+0x2a>
		/* take a free block */
		*mem = slab->free_list;
   275ae:	600b      	str	r3, [r1, #0]
		slab->free_list = *(char **)(slab->free_list);
   275b0:	6943      	ldr	r3, [r0, #20]
   275b2:	681b      	ldr	r3, [r3, #0]
   275b4:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   275b6:	6983      	ldr	r3, [r0, #24]
   275b8:	3301      	adds	r3, #1
   275ba:	6183      	str	r3, [r0, #24]
		result = 0;
   275bc:	2300      	movs	r3, #0
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   275be:	f384 8811 	msr	BASEPRI, r4
	}

	irq_unlock(key);

	return result;
}
   275c2:	4618      	mov	r0, r3
   275c4:	bd38      	pop	{r3, r4, r5, pc}
	} else if (timeout == K_NO_WAIT) {
   275c6:	b922      	cbnz	r2, 275d2 <k_mem_slab_alloc+0x36>
		*mem = NULL;
   275c8:	2300      	movs	r3, #0
   275ca:	600b      	str	r3, [r1, #0]
		result = -ENOMEM;
   275cc:	f06f 030b 	mvn.w	r3, #11
   275d0:	e7f5      	b.n	275be <k_mem_slab_alloc+0x22>
   275d2:	460d      	mov	r5, r1
		_pend_current_thread(&slab->wait_q, timeout);
   275d4:	4611      	mov	r1, r2
   275d6:	f000 fed7 	bl	28388 <_pend_current_thread>
	_update_time_slice_before_swap();
   275da:	f000 ff53 	bl	28484 <_update_time_slice_before_swap>
	return __swap(key);
   275de:	4620      	mov	r0, r4
   275e0:	f7ff fa96 	bl	26b10 <__swap>
		if (result == 0) {
   275e4:	4603      	mov	r3, r0
   275e6:	2800      	cmp	r0, #0
   275e8:	d1eb      	bne.n	275c2 <k_mem_slab_alloc+0x26>
			*mem = _current->base.swap_data;
   275ea:	4a02      	ldr	r2, [pc, #8]	; (275f4 <k_mem_slab_alloc+0x58>)
   275ec:	6892      	ldr	r2, [r2, #8]
   275ee:	68d2      	ldr	r2, [r2, #12]
   275f0:	602a      	str	r2, [r5, #0]
   275f2:	e7e6      	b.n	275c2 <k_mem_slab_alloc+0x26>
   275f4:	20002710 	.word	0x20002710

000275f8 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   275f8:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   275fa:	f04f 0320 	mov.w	r3, #32
   275fe:	f3ef 8411 	mrs	r4, BASEPRI
   27602:	f383 8811 	msr	BASEPRI, r3
_find_first_thread_to_unpend(_wait_q_t *wait_q, struct k_thread *from)
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	extern volatile int _handling_timeouts;

	if (_handling_timeouts) {
   27606:	4b3d      	ldr	r3, [pc, #244]	; (276fc <k_mem_slab_free+0x104>)
   27608:	681b      	ldr	r3, [r3, #0]
   2760a:	2b00      	cmp	r3, #0
   2760c:	d13a      	bne.n	27684 <k_mem_slab_free+0x8c>
	return list->head == list;
   2760e:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   27610:	4298      	cmp	r0, r3
   27612:	d048      	beq.n	276a6 <k_mem_slab_free+0xae>
/* must be called with interrupts locked */
static inline struct k_thread *_unpend_first_thread(_wait_q_t *wait_q)
{
	struct k_thread *thread = _find_first_thread_to_unpend(wait_q, NULL);

	if (thread) {
   27614:	b14b      	cbz	r3, 2762a <k_mem_slab_free+0x32>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   27616:	685a      	ldr	r2, [r3, #4]
   27618:	681d      	ldr	r5, [r3, #0]
   2761a:	6015      	str	r5, [r2, #0]
	node->next->prev = node->prev;
   2761c:	681a      	ldr	r2, [r3, #0]
   2761e:	685d      	ldr	r5, [r3, #4]
   27620:	6055      	str	r5, [r2, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   27622:	7a5a      	ldrb	r2, [r3, #9]
   27624:	f022 0202 	bic.w	r2, r2, #2
   27628:	725a      	strb	r2, [r3, #9]
	int key = irq_lock();
	struct k_thread *pending_thread = _unpend_first_thread(&slab->wait_q);

	if (pending_thread) {
   2762a:	2b00      	cmp	r3, #0
   2762c:	d05c      	beq.n	276e8 <k_mem_slab_free+0xf0>
		_set_thread_return_value_with_data(pending_thread, 0, *mem);
   2762e:	680a      	ldr	r2, [r1, #0]
}

static ALWAYS_INLINE void
_set_thread_return_value(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   27630:	2100      	movs	r1, #0
   27632:	6659      	str	r1, [r3, #100]	; 0x64
	thread->base.swap_data = data;
   27634:	60da      	str	r2, [r3, #12]
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   27636:	6a19      	ldr	r1, [r3, #32]
   27638:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   2763c:	d013      	beq.n	27666 <k_mem_slab_free+0x6e>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   2763e:	f103 0210 	add.w	r2, r3, #16
	return list->tail == node;
   27642:	482f      	ldr	r0, [pc, #188]	; (27700 <k_mem_slab_free+0x108>)
   27644:	6900      	ldr	r0, [r0, #16]
   27646:	4282      	cmp	r2, r0
   27648:	d004      	beq.n	27654 <k_mem_slab_free+0x5c>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2764a:	b102      	cbz	r2, 2764e <k_mem_slab_free+0x56>
	return (node == list->tail) ? NULL : node->next;
   2764c:	691a      	ldr	r2, [r3, #16]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   2764e:	6910      	ldr	r0, [r2, #16]
   27650:	4401      	add	r1, r0
   27652:	6111      	str	r1, [r2, #16]
	node->prev->next = node->next;
   27654:	695a      	ldr	r2, [r3, #20]
   27656:	6919      	ldr	r1, [r3, #16]
   27658:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
   2765a:	691a      	ldr	r2, [r3, #16]
   2765c:	6959      	ldr	r1, [r3, #20]
   2765e:	6051      	str	r1, [r2, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   27660:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   27664:	621a      	str	r2, [r3, #32]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   27666:	7a5a      	ldrb	r2, [r3, #9]
   27668:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
   2766c:	725a      	strb	r2, [r3, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   2766e:	f012 0f1b 	tst.w	r2, #27
   27672:	d11c      	bne.n	276ae <k_mem_slab_free+0xb6>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   27674:	6a1a      	ldr	r2, [r3, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   27676:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   2767a:	d016      	beq.n	276aa <k_mem_slab_free+0xb2>
   2767c:	2200      	movs	r2, #0
   2767e:	e017      	b.n	276b0 <k_mem_slab_free+0xb8>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   27680:	2300      	movs	r3, #0
   27682:	e003      	b.n	2768c <k_mem_slab_free+0x94>
   27684:	4605      	mov	r5, r0
	return list->head == list;
   27686:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   27688:	4298      	cmp	r0, r3
   2768a:	d0f9      	beq.n	27680 <k_mem_slab_free+0x88>
		SYS_DLIST_ITERATE_FROM_NODE(q, cur) {
   2768c:	2b00      	cmp	r3, #0
   2768e:	d0c1      	beq.n	27614 <k_mem_slab_free+0x1c>
	return thread->base.timeout.delta_ticks_from_prev == _EXPIRED;
   27690:	6a1a      	ldr	r2, [r3, #32]
			if (_is_thread_timeout_expired(thread)) {
   27692:	f112 0f02 	cmn.w	r2, #2
   27696:	d1bd      	bne.n	27614 <k_mem_slab_free+0x1c>
	return (node == list->tail) ? NULL : node->next;
   27698:	686a      	ldr	r2, [r5, #4]
   2769a:	4293      	cmp	r3, r2
   2769c:	d001      	beq.n	276a2 <k_mem_slab_free+0xaa>
   2769e:	681b      	ldr	r3, [r3, #0]
   276a0:	e7f4      	b.n	2768c <k_mem_slab_free+0x94>
   276a2:	2300      	movs	r3, #0
   276a4:	e7f2      	b.n	2768c <k_mem_slab_free+0x94>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   276a6:	2300      	movs	r3, #0
   276a8:	e7b4      	b.n	27614 <k_mem_slab_free+0x1c>
	return !(_is_thread_prevented_from_running(thread) ||
   276aa:	2201      	movs	r2, #1
   276ac:	e000      	b.n	276b0 <k_mem_slab_free+0xb8>
   276ae:	2200      	movs	r2, #0
	if (_is_thread_ready(thread)) {
   276b0:	b94a      	cbnz	r2, 276c6 <k_mem_slab_free+0xce>
	return _is_preempt(_current) && __must_switch_threads();
   276b2:	4b13      	ldr	r3, [pc, #76]	; (27700 <k_mem_slab_free+0x108>)
   276b4:	689b      	ldr	r3, [r3, #8]
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   276b6:	895b      	ldrh	r3, [r3, #10]
	return _is_preempt(_current) && __must_switch_threads();
   276b8:	2b7f      	cmp	r3, #127	; 0x7f
   276ba:	d908      	bls.n	276ce <k_mem_slab_free+0xd6>
   276bc:	2300      	movs	r3, #0
		_abort_thread_timeout(pending_thread);
		_ready_thread(pending_thread);
		if (_must_switch_threads()) {
   276be:	b96b      	cbnz	r3, 276dc <k_mem_slab_free+0xe4>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   276c0:	f384 8811 	msr	BASEPRI, r4
   276c4:	bd38      	pop	{r3, r4, r5, pc}
		_add_thread_to_ready_q(thread);
   276c6:	4618      	mov	r0, r3
   276c8:	f000 fd4a 	bl	28160 <_add_thread_to_ready_q>
   276cc:	e7f1      	b.n	276b2 <k_mem_slab_free+0xba>
	return _is_preempt(_current) && __must_switch_threads();
   276ce:	f000 fe6b 	bl	283a8 <__must_switch_threads>
   276d2:	4603      	mov	r3, r0
   276d4:	2800      	cmp	r0, #0
   276d6:	d0f2      	beq.n	276be <k_mem_slab_free+0xc6>
   276d8:	2301      	movs	r3, #1
   276da:	e7f0      	b.n	276be <k_mem_slab_free+0xc6>
	_update_time_slice_before_swap();
   276dc:	f000 fed2 	bl	28484 <_update_time_slice_before_swap>
	return __swap(key);
   276e0:	4620      	mov	r0, r4
   276e2:	f7ff fa15 	bl	26b10 <__swap>
   276e6:	bd38      	pop	{r3, r4, r5, pc}
			_Swap(key);
			return;
		}
	} else {
		**(char ***)mem = slab->free_list;
   276e8:	680b      	ldr	r3, [r1, #0]
   276ea:	6942      	ldr	r2, [r0, #20]
   276ec:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)mem;
   276ee:	680b      	ldr	r3, [r1, #0]
   276f0:	6143      	str	r3, [r0, #20]
		slab->num_used--;
   276f2:	6983      	ldr	r3, [r0, #24]
   276f4:	3b01      	subs	r3, #1
   276f6:	6183      	str	r3, [r0, #24]
   276f8:	e7e2      	b.n	276c0 <k_mem_slab_free+0xc8>
   276fa:	bf00      	nop
   276fc:	20002af8 	.word	0x20002af8
   27700:	20002710 	.word	0x20002710

00027704 <new_prio_for_inheritance>:
}
#endif

static int new_prio_for_inheritance(int target, int limit)
{
	int new_prio = _is_prio_higher(target, limit) ? target : limit;
   27704:	4288      	cmp	r0, r1
   27706:	da00      	bge.n	2770a <new_prio_for_inheritance+0x6>
   27708:	4601      	mov	r1, r0
	return _is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   2770a:	2900      	cmp	r1, #0
   2770c:	db01      	blt.n	27712 <new_prio_for_inheritance+0xe>
   2770e:	4608      	mov	r0, r1
   27710:	4770      	bx	lr
   27712:	2000      	movs	r0, #0

	new_prio = _get_new_prio_with_ceiling(new_prio);

	return new_prio;
}
   27714:	4770      	bx	lr

00027716 <adjust_owner_prio>:

static void adjust_owner_prio(struct k_mutex *mutex, int new_prio)
{
   27716:	b538      	push	{r3, r4, r5, lr}
	if (mutex->owner->base.prio != new_prio) {
   27718:	6884      	ldr	r4, [r0, #8]
   2771a:	f994 300a 	ldrsb.w	r3, [r4, #10]
   2771e:	428b      	cmp	r3, r1
   27720:	d00e      	beq.n	27740 <adjust_owner_prio+0x2a>
	u8_t state = thread->base.thread_state;
   27722:	7a63      	ldrb	r3, [r4, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   27724:	f013 0f1f 	tst.w	r3, #31
   27728:	d107      	bne.n	2773a <adjust_owner_prio+0x24>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   2772a:	6a23      	ldr	r3, [r4, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   2772c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   27730:	d001      	beq.n	27736 <adjust_owner_prio+0x20>
   27732:	2300      	movs	r3, #0
   27734:	e002      	b.n	2773c <adjust_owner_prio+0x26>
   27736:	2301      	movs	r3, #1
   27738:	e000      	b.n	2773c <adjust_owner_prio+0x26>
   2773a:	2300      	movs	r3, #0
	if (_is_thread_ready(thread)) {
   2773c:	b90b      	cbnz	r3, 27742 <adjust_owner_prio+0x2c>
		thread->base.prio = prio;
   2773e:	72a1      	strb	r1, [r4, #10]
   27740:	bd38      	pop	{r3, r4, r5, pc}
   27742:	460d      	mov	r5, r1
		_remove_thread_from_ready_q(thread);
   27744:	4620      	mov	r0, r4
   27746:	f000 fd2b 	bl	281a0 <_remove_thread_from_ready_q>
		thread->base.prio = prio;
   2774a:	72a5      	strb	r5, [r4, #10]
		_add_thread_to_ready_q(thread);
   2774c:	4620      	mov	r0, r4
   2774e:	f000 fd07 	bl	28160 <_add_thread_to_ready_q>
   27752:	bd38      	pop	{r3, r4, r5, pc}

00027754 <_impl_k_mutex_lock>:
		_thread_priority_set(mutex->owner, new_prio);
	}
}

int _impl_k_mutex_lock(struct k_mutex *mutex, s32_t timeout)
{
   27754:	b570      	push	{r4, r5, r6, lr}
   27756:	4604      	mov	r4, r0
	--_current->base.sched_locked;
   27758:	4b32      	ldr	r3, [pc, #200]	; (27824 <_impl_k_mutex_lock+0xd0>)
   2775a:	689a      	ldr	r2, [r3, #8]
   2775c:	7ad3      	ldrb	r3, [r2, #11]
   2775e:	3b01      	subs	r3, #1
   27760:	72d3      	strb	r3, [r2, #11]
	int new_prio, key;

	_sched_lock();

	if (likely(mutex->lock_count == 0 || mutex->owner == _current)) {
   27762:	68c3      	ldr	r3, [r0, #12]
   27764:	b97b      	cbnz	r3, 27786 <_impl_k_mutex_lock+0x32>

		RECORD_STATE_CHANGE();

		mutex->owner_orig_prio = mutex->lock_count == 0 ?
					_current->base.prio :
   27766:	2b00      	cmp	r3, #0
   27768:	d133      	bne.n	277d2 <_impl_k_mutex_lock+0x7e>
   2776a:	4a2e      	ldr	r2, [pc, #184]	; (27824 <_impl_k_mutex_lock+0xd0>)
   2776c:	6892      	ldr	r2, [r2, #8]
   2776e:	f992 200a 	ldrsb.w	r2, [r2, #10]
		mutex->owner_orig_prio = mutex->lock_count == 0 ?
   27772:	6122      	str	r2, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
   27774:	3301      	adds	r3, #1
   27776:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   27778:	4b2a      	ldr	r3, [pc, #168]	; (27824 <_impl_k_mutex_lock+0xd0>)
   2777a:	689b      	ldr	r3, [r3, #8]
   2777c:	60a3      	str	r3, [r4, #8]

		K_DEBUG("%p took mutex %p, count: %d, orig prio: %d\n",
			_current, mutex, mutex->lock_count,
			mutex->owner_orig_prio);

		k_sched_unlock();
   2777e:	f000 fea1 	bl	284c4 <k_sched_unlock>

		return 0;
   27782:	2000      	movs	r0, #0
   27784:	bd70      	pop	{r4, r5, r6, pc}
   27786:	460d      	mov	r5, r1
	if (likely(mutex->lock_count == 0 || mutex->owner == _current)) {
   27788:	6881      	ldr	r1, [r0, #8]
   2778a:	4a26      	ldr	r2, [pc, #152]	; (27824 <_impl_k_mutex_lock+0xd0>)
   2778c:	6892      	ldr	r2, [r2, #8]
   2778e:	4291      	cmp	r1, r2
   27790:	d0e9      	beq.n	27766 <_impl_k_mutex_lock+0x12>
	}

	RECORD_CONFLICT();

	if (unlikely(timeout == K_NO_WAIT)) {
   27792:	b305      	cbz	r5, 277d6 <_impl_k_mutex_lock+0x82>
	if (_is_prio_higher(_current->prio, mutex->owner->prio)) {
		new_prio = _current->prio;
	}
	new_prio = _get_new_prio_with_ceiling(new_prio);
#endif
	new_prio = new_prio_for_inheritance(_current->base.prio,
   27794:	f991 100a 	ldrsb.w	r1, [r1, #10]
   27798:	f992 000a 	ldrsb.w	r0, [r2, #10]
   2779c:	f7ff ffb2 	bl	27704 <new_prio_for_inheritance>
	__asm__ volatile(
   277a0:	f04f 0320 	mov.w	r3, #32
   277a4:	f3ef 8611 	mrs	r6, BASEPRI
   277a8:	f383 8811 	msr	BASEPRI, r3

	key = irq_lock();

	K_DEBUG("adjusting prio up on mutex %p\n", mutex);

	if (_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   277ac:	68a3      	ldr	r3, [r4, #8]
   277ae:	f993 300a 	ldrsb.w	r3, [r3, #10]
   277b2:	4298      	cmp	r0, r3
   277b4:	db14      	blt.n	277e0 <_impl_k_mutex_lock+0x8c>
		adjust_owner_prio(mutex, new_prio);
	}

	_pend_current_thread(&mutex->wait_q, timeout);
   277b6:	4629      	mov	r1, r5
   277b8:	4620      	mov	r0, r4
   277ba:	f000 fde5 	bl	28388 <_pend_current_thread>
	_update_time_slice_before_swap();
   277be:	f000 fe61 	bl	28484 <_update_time_slice_before_swap>
	return __swap(key);
   277c2:	4630      	mov	r0, r6
   277c4:	f7ff f9a4 	bl	26b10 <__swap>
	K_DEBUG("on mutex %p got_mutex value: %d\n", mutex, got_mutex);

	K_DEBUG("%p got mutex %p (y/n): %c\n", _current, mutex,
		got_mutex ? 'y' : 'n');

	if (got_mutex == 0) {
   277c8:	b978      	cbnz	r0, 277ea <_impl_k_mutex_lock+0x96>
		k_sched_unlock();
   277ca:	f000 fe7b 	bl	284c4 <k_sched_unlock>
		return 0;
   277ce:	2000      	movs	r0, #0
   277d0:	bd70      	pop	{r4, r5, r6, pc}
					_current->base.prio :
   277d2:	6922      	ldr	r2, [r4, #16]
   277d4:	e7cd      	b.n	27772 <_impl_k_mutex_lock+0x1e>
		k_sched_unlock();
   277d6:	f000 fe75 	bl	284c4 <k_sched_unlock>
		return -EBUSY;
   277da:	f06f 000f 	mvn.w	r0, #15
   277de:	bd70      	pop	{r4, r5, r6, pc}
		adjust_owner_prio(mutex, new_prio);
   277e0:	4601      	mov	r1, r0
   277e2:	4620      	mov	r0, r4
   277e4:	f7ff ff97 	bl	27716 <adjust_owner_prio>
   277e8:	e7e5      	b.n	277b6 <_impl_k_mutex_lock+0x62>
	return list->head == list;
   277ea:	6823      	ldr	r3, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   277ec:	429c      	cmp	r4, r3
   277ee:	d016      	beq.n	2781e <_impl_k_mutex_lock+0xca>
	K_DEBUG("%p timeout on mutex %p\n", _current, mutex);

	struct k_thread *waiter =
		(struct k_thread *)sys_dlist_peek_head(&mutex->wait_q);

	new_prio = mutex->owner_orig_prio;
   277f0:	6921      	ldr	r1, [r4, #16]
	new_prio = waiter ? new_prio_for_inheritance(waiter->base.prio,
						     new_prio) : new_prio;
   277f2:	b123      	cbz	r3, 277fe <_impl_k_mutex_lock+0xaa>
   277f4:	f993 000a 	ldrsb.w	r0, [r3, #10]
   277f8:	f7ff ff84 	bl	27704 <new_prio_for_inheritance>
   277fc:	4601      	mov	r1, r0
   277fe:	f04f 0320 	mov.w	r3, #32
   27802:	f3ef 8511 	mrs	r5, BASEPRI
   27806:	f383 8811 	msr	BASEPRI, r3

	K_DEBUG("adjusting prio down on mutex %p\n", mutex);

	key = irq_lock();
	adjust_owner_prio(mutex, new_prio);
   2780a:	4620      	mov	r0, r4
   2780c:	f7ff ff83 	bl	27716 <adjust_owner_prio>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   27810:	f385 8811 	msr	BASEPRI, r5
	irq_unlock(key);

	k_sched_unlock();
   27814:	f000 fe56 	bl	284c4 <k_sched_unlock>

	return -EAGAIN;
   27818:	f06f 000a 	mvn.w	r0, #10
}
   2781c:	bd70      	pop	{r4, r5, r6, pc}
   2781e:	2300      	movs	r3, #0
   27820:	e7e6      	b.n	277f0 <_impl_k_mutex_lock+0x9c>
   27822:	bf00      	nop
   27824:	20002710 	.word	0x20002710

00027828 <_impl_k_mutex_unlock>:
	return _impl_k_mutex_lock((struct k_mutex *)mutex, (s32_t)timeout);
}
#endif

void _impl_k_mutex_unlock(struct k_mutex *mutex)
{
   27828:	b570      	push	{r4, r5, r6, lr}
   2782a:	4b40      	ldr	r3, [pc, #256]	; (2792c <_impl_k_mutex_unlock+0x104>)
   2782c:	689a      	ldr	r2, [r3, #8]
   2782e:	7ad3      	ldrb	r3, [r2, #11]
   27830:	3b01      	subs	r3, #1
   27832:	72d3      	strb	r3, [r2, #11]

	_sched_lock();

	RECORD_STATE_CHANGE();

	mutex->lock_count--;
   27834:	68c3      	ldr	r3, [r0, #12]
   27836:	3b01      	subs	r3, #1
   27838:	60c3      	str	r3, [r0, #12]

	K_DEBUG("mutex %p lock_count: %d\n", mutex, mutex->lock_count);

	if (mutex->lock_count != 0) {
   2783a:	2b00      	cmp	r3, #0
   2783c:	d143      	bne.n	278c6 <_impl_k_mutex_unlock+0x9e>
   2783e:	4605      	mov	r5, r0
	__asm__ volatile(
   27840:	f04f 0320 	mov.w	r3, #32
   27844:	f3ef 8611 	mrs	r6, BASEPRI
   27848:	f383 8811 	msr	BASEPRI, r3
		return;
	}

	key = irq_lock();

	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   2784c:	6901      	ldr	r1, [r0, #16]
   2784e:	f7ff ff62 	bl	27716 <adjust_owner_prio>

	struct k_thread *new_owner = _unpend_first_thread(&mutex->wait_q);
   27852:	462a      	mov	r2, r5
	if (_handling_timeouts) {
   27854:	4b36      	ldr	r3, [pc, #216]	; (27930 <_impl_k_mutex_unlock+0x108>)
   27856:	681b      	ldr	r3, [r3, #0]
   27858:	2b00      	cmp	r3, #0
   2785a:	d139      	bne.n	278d0 <_impl_k_mutex_unlock+0xa8>
	return list->head == list;
   2785c:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2785e:	42a5      	cmp	r5, r4
   27860:	d046      	beq.n	278f0 <_impl_k_mutex_unlock+0xc8>
	if (thread) {
   27862:	b14c      	cbz	r4, 27878 <_impl_k_mutex_unlock+0x50>
	node->prev->next = node->next;
   27864:	6863      	ldr	r3, [r4, #4]
   27866:	6822      	ldr	r2, [r4, #0]
   27868:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   2786a:	6823      	ldr	r3, [r4, #0]
   2786c:	6862      	ldr	r2, [r4, #4]
   2786e:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   27870:	7a63      	ldrb	r3, [r4, #9]
   27872:	f023 0302 	bic.w	r3, r3, #2
   27876:	7263      	strb	r3, [r4, #9]

	K_DEBUG("new owner of mutex %p: %p (prio: %d)\n",
		mutex, new_owner, new_owner ? new_owner->base.prio : -1000);

	if (new_owner) {
   27878:	2c00      	cmp	r4, #0
   2787a:	d051      	beq.n	27920 <_impl_k_mutex_unlock+0xf8>
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   2787c:	6a22      	ldr	r2, [r4, #32]
   2787e:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   27882:	d013      	beq.n	278ac <_impl_k_mutex_unlock+0x84>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   27884:	f104 0310 	add.w	r3, r4, #16
	return list->tail == node;
   27888:	4928      	ldr	r1, [pc, #160]	; (2792c <_impl_k_mutex_unlock+0x104>)
   2788a:	6909      	ldr	r1, [r1, #16]
   2788c:	428b      	cmp	r3, r1
   2788e:	d004      	beq.n	2789a <_impl_k_mutex_unlock+0x72>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   27890:	b103      	cbz	r3, 27894 <_impl_k_mutex_unlock+0x6c>
	return (node == list->tail) ? NULL : node->next;
   27892:	6923      	ldr	r3, [r4, #16]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   27894:	6919      	ldr	r1, [r3, #16]
   27896:	440a      	add	r2, r1
   27898:	611a      	str	r2, [r3, #16]
	node->prev->next = node->next;
   2789a:	6963      	ldr	r3, [r4, #20]
   2789c:	6922      	ldr	r2, [r4, #16]
   2789e:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   278a0:	6923      	ldr	r3, [r4, #16]
   278a2:	6962      	ldr	r2, [r4, #20]
   278a4:	605a      	str	r2, [r3, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   278a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   278aa:	6223      	str	r3, [r4, #32]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   278ac:	7a63      	ldrb	r3, [r4, #9]
   278ae:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   278b2:	7263      	strb	r3, [r4, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   278b4:	f013 0f1b 	tst.w	r3, #27
   278b8:	d11e      	bne.n	278f8 <_impl_k_mutex_unlock+0xd0>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   278ba:	6a23      	ldr	r3, [r4, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   278bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   278c0:	d018      	beq.n	278f4 <_impl_k_mutex_unlock+0xcc>
   278c2:	2300      	movs	r3, #0
   278c4:	e019      	b.n	278fa <_impl_k_mutex_unlock+0xd2>
		k_sched_unlock();
   278c6:	f000 fdfd 	bl	284c4 <k_sched_unlock>
		return;
   278ca:	bd70      	pop	{r4, r5, r6, pc}
	return sys_dlist_is_empty(list) ? NULL : list->head;
   278cc:	2400      	movs	r4, #0
   278ce:	e002      	b.n	278d6 <_impl_k_mutex_unlock+0xae>
	return list->head == list;
   278d0:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   278d2:	42a5      	cmp	r5, r4
   278d4:	d0fa      	beq.n	278cc <_impl_k_mutex_unlock+0xa4>
		SYS_DLIST_ITERATE_FROM_NODE(q, cur) {
   278d6:	2c00      	cmp	r4, #0
   278d8:	d0c3      	beq.n	27862 <_impl_k_mutex_unlock+0x3a>
	return thread->base.timeout.delta_ticks_from_prev == _EXPIRED;
   278da:	6a23      	ldr	r3, [r4, #32]
			if (_is_thread_timeout_expired(thread)) {
   278dc:	f113 0f02 	cmn.w	r3, #2
   278e0:	d1bf      	bne.n	27862 <_impl_k_mutex_unlock+0x3a>
	return (node == list->tail) ? NULL : node->next;
   278e2:	6853      	ldr	r3, [r2, #4]
   278e4:	429c      	cmp	r4, r3
   278e6:	d001      	beq.n	278ec <_impl_k_mutex_unlock+0xc4>
   278e8:	6824      	ldr	r4, [r4, #0]
   278ea:	e7f4      	b.n	278d6 <_impl_k_mutex_unlock+0xae>
   278ec:	2400      	movs	r4, #0
   278ee:	e7f2      	b.n	278d6 <_impl_k_mutex_unlock+0xae>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   278f0:	2400      	movs	r4, #0
   278f2:	e7b6      	b.n	27862 <_impl_k_mutex_unlock+0x3a>
	return !(_is_thread_prevented_from_running(thread) ||
   278f4:	2301      	movs	r3, #1
   278f6:	e000      	b.n	278fa <_impl_k_mutex_unlock+0xd2>
   278f8:	2300      	movs	r3, #0
	if (_is_thread_ready(thread)) {
   278fa:	b96b      	cbnz	r3, 27918 <_impl_k_mutex_unlock+0xf0>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   278fc:	f386 8811 	msr	BASEPRI, r6
   27900:	2300      	movs	r3, #0
   27902:	6663      	str	r3, [r4, #100]	; 0x64
		/*
		 * new owner is already of higher or equal prio than first
		 * waiter since the wait queue is priority-based: no need to
		 * ajust its priority
		 */
		mutex->owner = new_owner;
   27904:	60ac      	str	r4, [r5, #8]
		mutex->lock_count++;
   27906:	68eb      	ldr	r3, [r5, #12]
   27908:	3301      	adds	r3, #1
   2790a:	60eb      	str	r3, [r5, #12]
		mutex->owner_orig_prio = new_owner->base.prio;
   2790c:	f994 300a 	ldrsb.w	r3, [r4, #10]
   27910:	612b      	str	r3, [r5, #16]
	} else {
		irq_unlock(key);
		mutex->owner = NULL;
	}

	k_sched_unlock();
   27912:	f000 fdd7 	bl	284c4 <k_sched_unlock>
   27916:	bd70      	pop	{r4, r5, r6, pc}
		_add_thread_to_ready_q(thread);
   27918:	4620      	mov	r0, r4
   2791a:	f000 fc21 	bl	28160 <_add_thread_to_ready_q>
   2791e:	e7ed      	b.n	278fc <_impl_k_mutex_unlock+0xd4>
   27920:	f386 8811 	msr	BASEPRI, r6
		mutex->owner = NULL;
   27924:	2300      	movs	r3, #0
   27926:	60ab      	str	r3, [r5, #8]
   27928:	e7f3      	b.n	27912 <_impl_k_mutex_unlock+0xea>
   2792a:	bf00      	nop
   2792c:	20002710 	.word	0x20002710
   27930:	20002af8 	.word	0x20002af8

00027934 <_signal_poll_event>:
}

/* must be called with interrupts locked */
static int _signal_poll_event(struct k_poll_event *event, u32_t state,
			      int *must_reschedule)
{
   27934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27936:	4604      	mov	r4, r0
   27938:	460d      	mov	r5, r1
	*must_reschedule = 0;
   2793a:	2300      	movs	r3, #0
   2793c:	6013      	str	r3, [r2, #0]

	if (!event->poller) {
   2793e:	6883      	ldr	r3, [r0, #8]
   27940:	2b00      	cmp	r3, #0
   27942:	d042      	beq.n	279ca <_signal_poll_event+0x96>
   27944:	4616      	mov	r6, r2
		goto ready_event;
	}

	struct k_thread *thread = event->poller->thread;
   27946:	6818      	ldr	r0, [r3, #0]
	thread->base.thread_state &= ~states;
   27948:	7a43      	ldrb	r3, [r0, #9]
   2794a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   2794e:	7243      	strb	r3, [r0, #9]

	__ASSERT(event->poller->thread, "poller should have a thread\n");

	clear_polling_state(thread);

	if (!_is_thread_pending(thread)) {
   27950:	f013 0f02 	tst.w	r3, #2
   27954:	d039      	beq.n	279ca <_signal_poll_event+0x96>
	return thread->base.timeout.delta_ticks_from_prev == _EXPIRED;
   27956:	6a03      	ldr	r3, [r0, #32]
		goto ready_event;
	}

	if (_is_thread_timeout_expired(thread)) {
   27958:	f113 0f02 	cmn.w	r3, #2
   2795c:	d060      	beq.n	27a20 <_signal_poll_event+0xec>
	node->prev->next = node->next;
   2795e:	6843      	ldr	r3, [r0, #4]
   27960:	6802      	ldr	r2, [r0, #0]
   27962:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   27964:	6803      	ldr	r3, [r0, #0]
   27966:	6842      	ldr	r2, [r0, #4]
   27968:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   2796a:	7a43      	ldrb	r3, [r0, #9]
   2796c:	f023 0302 	bic.w	r3, r3, #2
   27970:	7243      	strb	r3, [r0, #9]
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   27972:	6a02      	ldr	r2, [r0, #32]
   27974:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   27978:	d013      	beq.n	279a2 <_signal_poll_event+0x6e>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   2797a:	f100 0310 	add.w	r3, r0, #16
	return list->tail == node;
   2797e:	492a      	ldr	r1, [pc, #168]	; (27a28 <_signal_poll_event+0xf4>)
   27980:	6909      	ldr	r1, [r1, #16]
   27982:	428b      	cmp	r3, r1
   27984:	d004      	beq.n	27990 <_signal_poll_event+0x5c>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   27986:	b103      	cbz	r3, 2798a <_signal_poll_event+0x56>
	return (node == list->tail) ? NULL : node->next;
   27988:	6903      	ldr	r3, [r0, #16]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   2798a:	6919      	ldr	r1, [r3, #16]
   2798c:	440a      	add	r2, r1
   2798e:	611a      	str	r2, [r3, #16]
	node->prev->next = node->next;
   27990:	6943      	ldr	r3, [r0, #20]
   27992:	6902      	ldr	r2, [r0, #16]
   27994:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   27996:	6903      	ldr	r3, [r0, #16]
   27998:	6942      	ldr	r2, [r0, #20]
   2799a:	605a      	str	r2, [r3, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   2799c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   279a0:	6203      	str	r3, [r0, #32]
		return -EAGAIN;
	}

	_unpend_thread(thread);
	_abort_thread_timeout(thread);
	_set_thread_return_value(thread,
   279a2:	b965      	cbnz	r5, 279be <_signal_poll_event+0x8a>
   279a4:	f06f 0303 	mvn.w	r3, #3
   279a8:	6643      	str	r3, [r0, #100]	; 0x64
	u8_t state = thread->base.thread_state;
   279aa:	7a43      	ldrb	r3, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   279ac:	f013 0f1f 	tst.w	r3, #31
   279b0:	d109      	bne.n	279c6 <_signal_poll_event+0x92>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   279b2:	6a03      	ldr	r3, [r0, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   279b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   279b8:	d003      	beq.n	279c2 <_signal_poll_event+0x8e>
   279ba:	2700      	movs	r7, #0
   279bc:	e004      	b.n	279c8 <_signal_poll_event+0x94>
   279be:	2300      	movs	r3, #0
   279c0:	e7f2      	b.n	279a8 <_signal_poll_event+0x74>
   279c2:	2701      	movs	r7, #1
   279c4:	e000      	b.n	279c8 <_signal_poll_event+0x94>
   279c6:	2700      	movs	r7, #0
				 state == K_POLL_STATE_NOT_READY ? -EINTR : 0);

	if (!_is_thread_ready(thread)) {
   279c8:	b947      	cbnz	r7, 279dc <_signal_poll_event+0xa8>
	event->poller = NULL;
   279ca:	2000      	movs	r0, #0
   279cc:	60a0      	str	r0, [r4, #8]
	event->state |= state;
   279ce:	7b63      	ldrb	r3, [r4, #13]
   279d0:	ea45 1513 	orr.w	r5, r5, r3, lsr #4
   279d4:	f365 1307 	bfi	r3, r5, #4, #4
   279d8:	7363      	strb	r3, [r4, #13]
	_add_thread_to_ready_q(thread);
	*must_reschedule = !_is_in_isr() && _must_switch_threads();

ready_event:
	set_event_ready(event, state);
	return 0;
   279da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	_add_thread_to_ready_q(thread);
   279dc:	f000 fbc0 	bl	28160 <_add_thread_to_ready_q>
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(vector));
   279e0:	f3ef 8305 	mrs	r3, IPSR
		|| (vector && !(SCB->ICSR & SCB_ICSR_RETTOBASE_Msk))
   279e4:	2b0d      	cmp	r3, #13
   279e6:	d807      	bhi.n	279f8 <_signal_poll_event+0xc4>
   279e8:	b19b      	cbz	r3, 27a12 <_signal_poll_event+0xde>
   279ea:	4b10      	ldr	r3, [pc, #64]	; (27a2c <_signal_poll_event+0xf8>)
   279ec:	685b      	ldr	r3, [r3, #4]
   279ee:	f413 6f00 	tst.w	r3, #2048	; 0x800
   279f2:	d010      	beq.n	27a16 <_signal_poll_event+0xe2>
   279f4:	2300      	movs	r3, #0
   279f6:	e000      	b.n	279fa <_signal_poll_event+0xc6>
   279f8:	463b      	mov	r3, r7
	*must_reschedule = !_is_in_isr() && _must_switch_threads();
   279fa:	b973      	cbnz	r3, 27a1a <_signal_poll_event+0xe6>
	return _is_preempt(_current) && __must_switch_threads();
   279fc:	4a0a      	ldr	r2, [pc, #40]	; (27a28 <_signal_poll_event+0xf4>)
   279fe:	6892      	ldr	r2, [r2, #8]
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   27a00:	8952      	ldrh	r2, [r2, #10]
	return _is_preempt(_current) && __must_switch_threads();
   27a02:	2a7f      	cmp	r2, #127	; 0x7f
   27a04:	d80a      	bhi.n	27a1c <_signal_poll_event+0xe8>
   27a06:	f000 fccf 	bl	283a8 <__must_switch_threads>
   27a0a:	4603      	mov	r3, r0
   27a0c:	b130      	cbz	r0, 27a1c <_signal_poll_event+0xe8>
   27a0e:	463b      	mov	r3, r7
   27a10:	e004      	b.n	27a1c <_signal_poll_event+0xe8>
   27a12:	2300      	movs	r3, #0
   27a14:	e7f1      	b.n	279fa <_signal_poll_event+0xc6>
   27a16:	463b      	mov	r3, r7
   27a18:	e7ef      	b.n	279fa <_signal_poll_event+0xc6>
   27a1a:	2300      	movs	r3, #0
   27a1c:	6033      	str	r3, [r6, #0]
   27a1e:	e7d4      	b.n	279ca <_signal_poll_event+0x96>
		return -EAGAIN;
   27a20:	f06f 000a 	mvn.w	r0, #10
}
   27a24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   27a26:	bf00      	nop
   27a28:	20002710 	.word	0x20002710
   27a2c:	e000ed00 	.word	0xe000ed00

00027a30 <k_poll_event_init>:
{
   27a30:	b430      	push	{r4, r5}
	event->poller = NULL;
   27a32:	2500      	movs	r5, #0
   27a34:	6085      	str	r5, [r0, #8]
	event->type = type;
   27a36:	7b44      	ldrb	r4, [r0, #13]
   27a38:	f361 0403 	bfi	r4, r1, #0, #4
	event->state = K_POLL_STATE_NOT_READY;
   27a3c:	f365 1407 	bfi	r4, r5, #4, #4
   27a40:	7344      	strb	r4, [r0, #13]
	event->mode = mode;
   27a42:	7b81      	ldrb	r1, [r0, #14]
   27a44:	f362 0100 	bfi	r1, r2, #0, #1
   27a48:	7381      	strb	r1, [r0, #14]
	event->unused = 0;
   27a4a:	89c2      	ldrh	r2, [r0, #14]
   27a4c:	f365 024f 	bfi	r2, r5, #1, #15
   27a50:	81c2      	strh	r2, [r0, #14]
	event->obj = obj;
   27a52:	6103      	str	r3, [r0, #16]
}
   27a54:	bc30      	pop	{r4, r5}
   27a56:	4770      	bx	lr

00027a58 <k_poll>:
{
   27a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27a5c:	b085      	sub	sp, #20
   27a5e:	4691      	mov	r9, r2
	__asm__ volatile(
   27a60:	f04f 0320 	mov.w	r3, #32
   27a64:	f3ef 8511 	mrs	r5, BASEPRI
   27a68:	f383 8811 	msr	BASEPRI, r3
	set_polling_state(_current);
   27a6c:	4ab7      	ldr	r2, [pc, #732]	; (27d4c <k_poll+0x2f4>)
   27a6e:	6894      	ldr	r4, [r2, #8]
	thread->base.thread_state |= states;
   27a70:	7a63      	ldrb	r3, [r4, #9]
   27a72:	f043 0320 	orr.w	r3, r3, #32
   27a76:	7263      	strb	r3, [r4, #9]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   27a78:	f385 8811 	msr	BASEPRI, r5
	struct _poller poller = { .thread = _current };
   27a7c:	6893      	ldr	r3, [r2, #8]
   27a7e:	9303      	str	r3, [sp, #12]
	for (int ii = 0; ii < num_events; ii++) {
   27a80:	2300      	movs	r3, #0
	int last_registered = -1, rc;
   27a82:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	for (int ii = 0; ii < num_events; ii++) {
   27a86:	e01e      	b.n	27ac6 <k_poll+0x6e>
		if (k_sem_count_get(event->sem) > 0) {
   27a88:	6917      	ldr	r7, [r2, #16]
   27a8a:	68bf      	ldr	r7, [r7, #8]
   27a8c:	b14f      	cbz	r7, 27aa2 <k_poll+0x4a>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   27a8e:	f04f 0e02 	mov.w	lr, #2
			return 1;
   27a92:	2701      	movs	r7, #1
   27a94:	e005      	b.n	27aa2 <k_poll+0x4a>
		if (!k_queue_is_empty(event->queue)) {
   27a96:	6917      	ldr	r7, [r2, #16]
	return (!list->head);
   27a98:	683f      	ldr	r7, [r7, #0]
   27a9a:	b117      	cbz	r7, 27aa2 <k_poll+0x4a>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   27a9c:	f04f 0e04 	mov.w	lr, #4
			return 1;
   27aa0:	2701      	movs	r7, #1
		if (is_condition_met(&events[ii], &state)) {
   27aa2:	b387      	cbz	r7, 27b06 <k_poll+0xae>
	event->poller = NULL;
   27aa4:	2500      	movs	r5, #0
   27aa6:	6095      	str	r5, [r2, #8]
	event->state |= state;
   27aa8:	7b55      	ldrb	r5, [r2, #13]
   27aaa:	ea4e 1715 	orr.w	r7, lr, r5, lsr #4
   27aae:	f367 1507 	bfi	r5, r7, #4, #4
   27ab2:	7355      	strb	r5, [r2, #13]
			clear_polling_state(_current);
   27ab4:	4aa5      	ldr	r2, [pc, #660]	; (27d4c <k_poll+0x2f4>)
   27ab6:	6895      	ldr	r5, [r2, #8]
	thread->base.thread_state &= ~states;
   27ab8:	7a6a      	ldrb	r2, [r5, #9]
   27aba:	f022 0220 	bic.w	r2, r2, #32
   27abe:	726a      	strb	r2, [r5, #9]
   27ac0:	f386 8811 	msr	BASEPRI, r6
	for (int ii = 0; ii < num_events; ii++) {
   27ac4:	3301      	adds	r3, #1
   27ac6:	428b      	cmp	r3, r1
   27ac8:	f280 8191 	bge.w	27dee <k_poll+0x396>
	__asm__ volatile(
   27acc:	f04f 0220 	mov.w	r2, #32
   27ad0:	f3ef 8611 	mrs	r6, BASEPRI
   27ad4:	f382 8811 	msr	BASEPRI, r2
		if (is_condition_met(&events[ii], &state)) {
   27ad8:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   27adc:	0095      	lsls	r5, r2, #2
   27ade:	1942      	adds	r2, r0, r5
	switch (event->type) {
   27ae0:	7b57      	ldrb	r7, [r2, #13]
   27ae2:	f007 070f 	and.w	r7, r7, #15
   27ae6:	2f02      	cmp	r7, #2
   27ae8:	d0ce      	beq.n	27a88 <k_poll+0x30>
   27aea:	2f04      	cmp	r7, #4
   27aec:	d0d3      	beq.n	27a96 <k_poll+0x3e>
   27aee:	2f01      	cmp	r7, #1
   27af0:	d001      	beq.n	27af6 <k_poll+0x9e>
		return 0;
   27af2:	2700      	movs	r7, #0
   27af4:	e7d5      	b.n	27aa2 <k_poll+0x4a>
		if (event->signal->signaled) {
   27af6:	6917      	ldr	r7, [r2, #16]
   27af8:	68bf      	ldr	r7, [r7, #8]
   27afa:	2f00      	cmp	r7, #0
   27afc:	d0d1      	beq.n	27aa2 <k_poll+0x4a>
			*state = K_POLL_STATE_SIGNALED;
   27afe:	f04f 0e01 	mov.w	lr, #1
			return 1;
   27b02:	4677      	mov	r7, lr
   27b04:	e7cd      	b.n	27aa2 <k_poll+0x4a>
		} else if (timeout != K_NO_WAIT && is_polling()) {
   27b06:	f1b9 0f00 	cmp.w	r9, #0
   27b0a:	d0d9      	beq.n	27ac0 <k_poll+0x68>
	return _is_thread_polling(_current);
   27b0c:	4f8f      	ldr	r7, [pc, #572]	; (27d4c <k_poll+0x2f4>)
   27b0e:	68bf      	ldr	r7, [r7, #8]
	return !!(thread->base.thread_state & state);
   27b10:	7a7f      	ldrb	r7, [r7, #9]
		} else if (timeout != K_NO_WAIT && is_polling()) {
   27b12:	f017 0f20 	tst.w	r7, #32
   27b16:	d0d3      	beq.n	27ac0 <k_poll+0x68>
	switch (event->type) {
   27b18:	7b57      	ldrb	r7, [r2, #13]
   27b1a:	f007 070f 	and.w	r7, r7, #15
   27b1e:	2f02      	cmp	r7, #2
   27b20:	d008      	beq.n	27b34 <k_poll+0xdc>
   27b22:	2f04      	cmp	r7, #4
   27b24:	d07a      	beq.n	27c1c <k_poll+0x1c4>
   27b26:	2f01      	cmp	r7, #1
   27b28:	f000 80ec 	beq.w	27d04 <k_poll+0x2ac>
	event->poller = poller;
   27b2c:	ad03      	add	r5, sp, #12
   27b2e:	6095      	str	r5, [r2, #8]
				++last_registered;
   27b30:	3401      	adds	r4, #1
   27b32:	e7c5      	b.n	27ac0 <k_poll+0x68>
		add_event(&event->sem->poll_events, event, poller);
   27b34:	6917      	ldr	r7, [r2, #16]
   27b36:	f107 0c10 	add.w	ip, r7, #16
	return list->head == list;
   27b3a:	f8d7 8010 	ldr.w	r8, [r7, #16]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   27b3e:	45c4      	cmp	ip, r8
   27b40:	d010      	beq.n	27b64 <k_poll+0x10c>
   27b42:	f8dc 7004 	ldr.w	r7, [ip, #4]
	if (!pending || _is_t1_higher_prio_than_t2(pending->poller->thread,
   27b46:	b17f      	cbz	r7, 27b68 <k_poll+0x110>
   27b48:	68bf      	ldr	r7, [r7, #8]
   27b4a:	683f      	ldr	r7, [r7, #0]
	return _is_prio1_higher_than_prio2(t1->base.prio, t2->base.prio);
   27b4c:	f997 a00a 	ldrsb.w	sl, [r7, #10]
   27b50:	9f03      	ldr	r7, [sp, #12]
   27b52:	f997 b00a 	ldrsb.w	fp, [r7, #10]
   27b56:	45da      	cmp	sl, fp
   27b58:	db06      	blt.n	27b68 <k_poll+0x110>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   27b5a:	45c4      	cmp	ip, r8
   27b5c:	d12e      	bne.n	27bbc <k_poll+0x164>
   27b5e:	f04f 0800 	mov.w	r8, #0
   27b62:	e02b      	b.n	27bbc <k_poll+0x164>
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   27b64:	2700      	movs	r7, #0
   27b66:	e7ee      	b.n	27b46 <k_poll+0xee>
	node->next = list;
   27b68:	f840 c005 	str.w	ip, [r0, r5]
	node->prev = list->tail;
   27b6c:	f8dc 5004 	ldr.w	r5, [ip, #4]
   27b70:	6055      	str	r5, [r2, #4]
	list->tail->next = node;
   27b72:	f8dc 5004 	ldr.w	r5, [ip, #4]
   27b76:	602a      	str	r2, [r5, #0]
	list->tail = node;
   27b78:	f8cc 2004 	str.w	r2, [ip, #4]
   27b7c:	e7d6      	b.n	27b2c <k_poll+0xd4>
	if (!insert_point) {
   27b7e:	f1b8 0f00 	cmp.w	r8, #0
   27b82:	d00a      	beq.n	27b9a <k_poll+0x142>
		node->prev = insert_point->prev;
   27b84:	f8d8 7004 	ldr.w	r7, [r8, #4]
   27b88:	6057      	str	r7, [r2, #4]
		node->next = insert_point;
   27b8a:	f840 8005 	str.w	r8, [r0, r5]
		insert_point->prev->next = node;
   27b8e:	f8d8 5004 	ldr.w	r5, [r8, #4]
   27b92:	602a      	str	r2, [r5, #0]
		insert_point->prev = node;
   27b94:	f8c8 2004 	str.w	r2, [r8, #4]
   27b98:	e7c8      	b.n	27b2c <k_poll+0xd4>
	node->next = list;
   27b9a:	f840 c005 	str.w	ip, [r0, r5]
	node->prev = list->tail;
   27b9e:	f8dc 5004 	ldr.w	r5, [ip, #4]
   27ba2:	6055      	str	r5, [r2, #4]
	list->tail->next = node;
   27ba4:	f8dc 5004 	ldr.w	r5, [ip, #4]
   27ba8:	602a      	str	r2, [r5, #0]
	list->tail = node;
   27baa:	f8cc 2004 	str.w	r2, [ip, #4]
   27bae:	e7bd      	b.n	27b2c <k_poll+0xd4>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   27bb0:	4647      	mov	r7, r8
   27bb2:	e017      	b.n	27be4 <k_poll+0x18c>
	return (node == list->tail) ? NULL : node->next;
   27bb4:	2700      	movs	r7, #0
   27bb6:	e015      	b.n	27be4 <k_poll+0x18c>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   27bb8:	f04f 0800 	mov.w	r8, #0
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   27bbc:	f1b8 0f00 	cmp.w	r8, #0
   27bc0:	d021      	beq.n	27c06 <k_poll+0x1ae>
					       pending->poller->thread)) {
   27bc2:	f8d8 7008 	ldr.w	r7, [r8, #8]
		if (_is_t1_higher_prio_than_t2(poller->thread,
   27bc6:	683f      	ldr	r7, [r7, #0]
   27bc8:	f997 700a 	ldrsb.w	r7, [r7, #10]
   27bcc:	45bb      	cmp	fp, r7
   27bce:	dbd6      	blt.n	27b7e <k_poll+0x126>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   27bd0:	46c2      	mov	sl, r8
   27bd2:	f1b8 0f00 	cmp.w	r8, #0
   27bd6:	d0eb      	beq.n	27bb0 <k_poll+0x158>
	return (node == list->tail) ? NULL : node->next;
   27bd8:	f8dc 7004 	ldr.w	r7, [ip, #4]
   27bdc:	45b8      	cmp	r8, r7
   27bde:	d0e9      	beq.n	27bb4 <k_poll+0x15c>
   27be0:	f8d8 7000 	ldr.w	r7, [r8]
   27be4:	b167      	cbz	r7, 27c00 <k_poll+0x1a8>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   27be6:	f1ba 0f00 	cmp.w	sl, #0
   27bea:	d0e5      	beq.n	27bb8 <k_poll+0x160>
	return (node == list->tail) ? NULL : node->next;
   27bec:	f8dc 7004 	ldr.w	r7, [ip, #4]
   27bf0:	45ba      	cmp	sl, r7
   27bf2:	d002      	beq.n	27bfa <k_poll+0x1a2>
   27bf4:	f8d8 8000 	ldr.w	r8, [r8]
   27bf8:	e7e0      	b.n	27bbc <k_poll+0x164>
   27bfa:	f04f 0800 	mov.w	r8, #0
   27bfe:	e7dd      	b.n	27bbc <k_poll+0x164>
   27c00:	f04f 0800 	mov.w	r8, #0
   27c04:	e7da      	b.n	27bbc <k_poll+0x164>
	node->next = list;
   27c06:	f840 c005 	str.w	ip, [r0, r5]
	node->prev = list->tail;
   27c0a:	f8dc 5004 	ldr.w	r5, [ip, #4]
   27c0e:	6055      	str	r5, [r2, #4]
	list->tail->next = node;
   27c10:	f8dc 5004 	ldr.w	r5, [ip, #4]
   27c14:	602a      	str	r2, [r5, #0]
	list->tail = node;
   27c16:	f8cc 2004 	str.w	r2, [ip, #4]
   27c1a:	e787      	b.n	27b2c <k_poll+0xd4>
		add_event(&event->queue->poll_events, event, poller);
   27c1c:	6917      	ldr	r7, [r2, #16]
   27c1e:	f107 0c08 	add.w	ip, r7, #8
	return list->head == list;
   27c22:	f8d7 8008 	ldr.w	r8, [r7, #8]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   27c26:	45c4      	cmp	ip, r8
   27c28:	d010      	beq.n	27c4c <k_poll+0x1f4>
   27c2a:	f8dc 7004 	ldr.w	r7, [ip, #4]
	if (!pending || _is_t1_higher_prio_than_t2(pending->poller->thread,
   27c2e:	b17f      	cbz	r7, 27c50 <k_poll+0x1f8>
   27c30:	68bf      	ldr	r7, [r7, #8]
   27c32:	683f      	ldr	r7, [r7, #0]
   27c34:	f997 a00a 	ldrsb.w	sl, [r7, #10]
   27c38:	9f03      	ldr	r7, [sp, #12]
   27c3a:	f997 b00a 	ldrsb.w	fp, [r7, #10]
   27c3e:	45da      	cmp	sl, fp
   27c40:	db06      	blt.n	27c50 <k_poll+0x1f8>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   27c42:	45c4      	cmp	ip, r8
   27c44:	d12e      	bne.n	27ca4 <k_poll+0x24c>
   27c46:	f04f 0800 	mov.w	r8, #0
   27c4a:	e02b      	b.n	27ca4 <k_poll+0x24c>
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   27c4c:	2700      	movs	r7, #0
   27c4e:	e7ee      	b.n	27c2e <k_poll+0x1d6>
	node->next = list;
   27c50:	f840 c005 	str.w	ip, [r0, r5]
	node->prev = list->tail;
   27c54:	f8dc 5004 	ldr.w	r5, [ip, #4]
   27c58:	6055      	str	r5, [r2, #4]
	list->tail->next = node;
   27c5a:	f8dc 5004 	ldr.w	r5, [ip, #4]
   27c5e:	602a      	str	r2, [r5, #0]
	list->tail = node;
   27c60:	f8cc 2004 	str.w	r2, [ip, #4]
   27c64:	e762      	b.n	27b2c <k_poll+0xd4>
	if (!insert_point) {
   27c66:	f1b8 0f00 	cmp.w	r8, #0
   27c6a:	d00a      	beq.n	27c82 <k_poll+0x22a>
		node->prev = insert_point->prev;
   27c6c:	f8d8 7004 	ldr.w	r7, [r8, #4]
   27c70:	6057      	str	r7, [r2, #4]
		node->next = insert_point;
   27c72:	f840 8005 	str.w	r8, [r0, r5]
		insert_point->prev->next = node;
   27c76:	f8d8 5004 	ldr.w	r5, [r8, #4]
   27c7a:	602a      	str	r2, [r5, #0]
		insert_point->prev = node;
   27c7c:	f8c8 2004 	str.w	r2, [r8, #4]
   27c80:	e754      	b.n	27b2c <k_poll+0xd4>
	node->next = list;
   27c82:	f840 c005 	str.w	ip, [r0, r5]
	node->prev = list->tail;
   27c86:	f8dc 5004 	ldr.w	r5, [ip, #4]
   27c8a:	6055      	str	r5, [r2, #4]
	list->tail->next = node;
   27c8c:	f8dc 5004 	ldr.w	r5, [ip, #4]
   27c90:	602a      	str	r2, [r5, #0]
	list->tail = node;
   27c92:	f8cc 2004 	str.w	r2, [ip, #4]
   27c96:	e749      	b.n	27b2c <k_poll+0xd4>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   27c98:	4647      	mov	r7, r8
   27c9a:	e017      	b.n	27ccc <k_poll+0x274>
	return (node == list->tail) ? NULL : node->next;
   27c9c:	2700      	movs	r7, #0
   27c9e:	e015      	b.n	27ccc <k_poll+0x274>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   27ca0:	f04f 0800 	mov.w	r8, #0
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   27ca4:	f1b8 0f00 	cmp.w	r8, #0
   27ca8:	d021      	beq.n	27cee <k_poll+0x296>
					       pending->poller->thread)) {
   27caa:	f8d8 7008 	ldr.w	r7, [r8, #8]
		if (_is_t1_higher_prio_than_t2(poller->thread,
   27cae:	683f      	ldr	r7, [r7, #0]
   27cb0:	f997 700a 	ldrsb.w	r7, [r7, #10]
   27cb4:	45bb      	cmp	fp, r7
   27cb6:	dbd6      	blt.n	27c66 <k_poll+0x20e>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   27cb8:	46c2      	mov	sl, r8
   27cba:	f1b8 0f00 	cmp.w	r8, #0
   27cbe:	d0eb      	beq.n	27c98 <k_poll+0x240>
	return (node == list->tail) ? NULL : node->next;
   27cc0:	f8dc 7004 	ldr.w	r7, [ip, #4]
   27cc4:	45b8      	cmp	r8, r7
   27cc6:	d0e9      	beq.n	27c9c <k_poll+0x244>
   27cc8:	f8d8 7000 	ldr.w	r7, [r8]
   27ccc:	b167      	cbz	r7, 27ce8 <k_poll+0x290>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   27cce:	f1ba 0f00 	cmp.w	sl, #0
   27cd2:	d0e5      	beq.n	27ca0 <k_poll+0x248>
	return (node == list->tail) ? NULL : node->next;
   27cd4:	f8dc 7004 	ldr.w	r7, [ip, #4]
   27cd8:	45ba      	cmp	sl, r7
   27cda:	d002      	beq.n	27ce2 <k_poll+0x28a>
   27cdc:	f8d8 8000 	ldr.w	r8, [r8]
   27ce0:	e7e0      	b.n	27ca4 <k_poll+0x24c>
   27ce2:	f04f 0800 	mov.w	r8, #0
   27ce6:	e7dd      	b.n	27ca4 <k_poll+0x24c>
   27ce8:	f04f 0800 	mov.w	r8, #0
   27cec:	e7da      	b.n	27ca4 <k_poll+0x24c>
	node->next = list;
   27cee:	f840 c005 	str.w	ip, [r0, r5]
	node->prev = list->tail;
   27cf2:	f8dc 5004 	ldr.w	r5, [ip, #4]
   27cf6:	6055      	str	r5, [r2, #4]
	list->tail->next = node;
   27cf8:	f8dc 5004 	ldr.w	r5, [ip, #4]
   27cfc:	602a      	str	r2, [r5, #0]
	list->tail = node;
   27cfe:	f8cc 2004 	str.w	r2, [ip, #4]
   27d02:	e713      	b.n	27b2c <k_poll+0xd4>
		add_event(&event->signal->poll_events, event, poller);
   27d04:	f8d2 c010 	ldr.w	ip, [r2, #16]
	return list->head == list;
   27d08:	f8dc 8000 	ldr.w	r8, [ip]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   27d0c:	45c4      	cmp	ip, r8
   27d0e:	d010      	beq.n	27d32 <k_poll+0x2da>
   27d10:	f8dc 7004 	ldr.w	r7, [ip, #4]
	if (!pending || _is_t1_higher_prio_than_t2(pending->poller->thread,
   27d14:	b17f      	cbz	r7, 27d36 <k_poll+0x2de>
   27d16:	68bf      	ldr	r7, [r7, #8]
   27d18:	683f      	ldr	r7, [r7, #0]
   27d1a:	f997 a00a 	ldrsb.w	sl, [r7, #10]
   27d1e:	9f03      	ldr	r7, [sp, #12]
   27d20:	f997 b00a 	ldrsb.w	fp, [r7, #10]
   27d24:	45da      	cmp	sl, fp
   27d26:	db06      	blt.n	27d36 <k_poll+0x2de>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   27d28:	45c4      	cmp	ip, r8
   27d2a:	d130      	bne.n	27d8e <k_poll+0x336>
   27d2c:	f04f 0800 	mov.w	r8, #0
   27d30:	e02d      	b.n	27d8e <k_poll+0x336>
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   27d32:	2700      	movs	r7, #0
   27d34:	e7ee      	b.n	27d14 <k_poll+0x2bc>
	node->next = list;
   27d36:	f840 c005 	str.w	ip, [r0, r5]
	node->prev = list->tail;
   27d3a:	f8dc 5004 	ldr.w	r5, [ip, #4]
   27d3e:	6055      	str	r5, [r2, #4]
	list->tail->next = node;
   27d40:	f8dc 5004 	ldr.w	r5, [ip, #4]
   27d44:	602a      	str	r2, [r5, #0]
	list->tail = node;
   27d46:	f8cc 2004 	str.w	r2, [ip, #4]
   27d4a:	e6ef      	b.n	27b2c <k_poll+0xd4>
   27d4c:	20002710 	.word	0x20002710
	if (!insert_point) {
   27d50:	f1b8 0f00 	cmp.w	r8, #0
   27d54:	d00a      	beq.n	27d6c <k_poll+0x314>
		node->prev = insert_point->prev;
   27d56:	f8d8 7004 	ldr.w	r7, [r8, #4]
   27d5a:	6057      	str	r7, [r2, #4]
		node->next = insert_point;
   27d5c:	f840 8005 	str.w	r8, [r0, r5]
		insert_point->prev->next = node;
   27d60:	f8d8 5004 	ldr.w	r5, [r8, #4]
   27d64:	602a      	str	r2, [r5, #0]
		insert_point->prev = node;
   27d66:	f8c8 2004 	str.w	r2, [r8, #4]
   27d6a:	e6df      	b.n	27b2c <k_poll+0xd4>
	node->next = list;
   27d6c:	f840 c005 	str.w	ip, [r0, r5]
	node->prev = list->tail;
   27d70:	f8dc 5004 	ldr.w	r5, [ip, #4]
   27d74:	6055      	str	r5, [r2, #4]
	list->tail->next = node;
   27d76:	f8dc 5004 	ldr.w	r5, [ip, #4]
   27d7a:	602a      	str	r2, [r5, #0]
	list->tail = node;
   27d7c:	f8cc 2004 	str.w	r2, [ip, #4]
   27d80:	e6d4      	b.n	27b2c <k_poll+0xd4>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   27d82:	4647      	mov	r7, r8
   27d84:	e017      	b.n	27db6 <k_poll+0x35e>
	return (node == list->tail) ? NULL : node->next;
   27d86:	2700      	movs	r7, #0
   27d88:	e015      	b.n	27db6 <k_poll+0x35e>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   27d8a:	f04f 0800 	mov.w	r8, #0
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   27d8e:	f1b8 0f00 	cmp.w	r8, #0
   27d92:	d021      	beq.n	27dd8 <k_poll+0x380>
					       pending->poller->thread)) {
   27d94:	f8d8 7008 	ldr.w	r7, [r8, #8]
		if (_is_t1_higher_prio_than_t2(poller->thread,
   27d98:	683f      	ldr	r7, [r7, #0]
   27d9a:	f997 700a 	ldrsb.w	r7, [r7, #10]
   27d9e:	45bb      	cmp	fp, r7
   27da0:	dbd6      	blt.n	27d50 <k_poll+0x2f8>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   27da2:	46c2      	mov	sl, r8
   27da4:	f1b8 0f00 	cmp.w	r8, #0
   27da8:	d0eb      	beq.n	27d82 <k_poll+0x32a>
	return (node == list->tail) ? NULL : node->next;
   27daa:	f8dc 7004 	ldr.w	r7, [ip, #4]
   27dae:	45b8      	cmp	r8, r7
   27db0:	d0e9      	beq.n	27d86 <k_poll+0x32e>
   27db2:	f8d8 7000 	ldr.w	r7, [r8]
   27db6:	b167      	cbz	r7, 27dd2 <k_poll+0x37a>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   27db8:	f1ba 0f00 	cmp.w	sl, #0
   27dbc:	d0e5      	beq.n	27d8a <k_poll+0x332>
	return (node == list->tail) ? NULL : node->next;
   27dbe:	f8dc 7004 	ldr.w	r7, [ip, #4]
   27dc2:	45ba      	cmp	sl, r7
   27dc4:	d002      	beq.n	27dcc <k_poll+0x374>
   27dc6:	f8d8 8000 	ldr.w	r8, [r8]
   27dca:	e7e0      	b.n	27d8e <k_poll+0x336>
   27dcc:	f04f 0800 	mov.w	r8, #0
   27dd0:	e7dd      	b.n	27d8e <k_poll+0x336>
   27dd2:	f04f 0800 	mov.w	r8, #0
   27dd6:	e7da      	b.n	27d8e <k_poll+0x336>
	node->next = list;
   27dd8:	f840 c005 	str.w	ip, [r0, r5]
	node->prev = list->tail;
   27ddc:	f8dc 5004 	ldr.w	r5, [ip, #4]
   27de0:	6055      	str	r5, [r2, #4]
	list->tail->next = node;
   27de2:	f8dc 5004 	ldr.w	r5, [ip, #4]
   27de6:	602a      	str	r2, [r5, #0]
	list->tail = node;
   27de8:	f8cc 2004 	str.w	r2, [ip, #4]
   27dec:	e69e      	b.n	27b2c <k_poll+0xd4>
   27dee:	f04f 0320 	mov.w	r3, #32
   27df2:	f3ef 8511 	mrs	r5, BASEPRI
   27df6:	f383 8811 	msr	BASEPRI, r3
	return _is_thread_polling(_current);
   27dfa:	4b46      	ldr	r3, [pc, #280]	; (27f14 <k_poll+0x4bc>)
   27dfc:	689a      	ldr	r2, [r3, #8]
	return !!(thread->base.thread_state & state);
   27dfe:	7a53      	ldrb	r3, [r2, #9]
	if (!is_polling()) {
   27e00:	f013 0f20 	tst.w	r3, #32
   27e04:	d047      	beq.n	27e96 <k_poll+0x43e>
	thread->base.thread_state &= ~states;
   27e06:	f023 0320 	bic.w	r3, r3, #32
   27e0a:	7253      	strb	r3, [r2, #9]
	if (timeout == K_NO_WAIT) {
   27e0c:	f1b9 0f00 	cmp.w	r9, #0
   27e10:	d049      	beq.n	27ea6 <k_poll+0x44e>
   27e12:	4649      	mov	r1, r9
   27e14:	4606      	mov	r6, r0
	_wait_q_t wait_q = _WAIT_Q_INIT(&wait_q);
   27e16:	a801      	add	r0, sp, #4
   27e18:	9001      	str	r0, [sp, #4]
   27e1a:	9002      	str	r0, [sp, #8]
	_pend_current_thread(&wait_q, timeout);
   27e1c:	f000 fab4 	bl	28388 <_pend_current_thread>
	_update_time_slice_before_swap();
   27e20:	f000 fb30 	bl	28484 <_update_time_slice_before_swap>
	return __swap(key);
   27e24:	4628      	mov	r0, r5
   27e26:	f7fe fe73 	bl	26b10 <__swap>
   27e2a:	f04f 0320 	mov.w	r3, #32
   27e2e:	f3ef 8e11 	mrs	lr, BASEPRI
   27e32:	f383 8811 	msr	BASEPRI, r3
   27e36:	4675      	mov	r5, lr
   27e38:	e049      	b.n	27ece <k_poll+0x476>
	node->prev->next = node->next;
   27e3a:	6853      	ldr	r3, [r2, #4]
   27e3c:	5847      	ldr	r7, [r0, r1]
   27e3e:	601f      	str	r7, [r3, #0]
	node->next->prev = node->prev;
   27e40:	5843      	ldr	r3, [r0, r1]
   27e42:	6852      	ldr	r2, [r2, #4]
   27e44:	605a      	str	r2, [r3, #4]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   27e46:	f386 8811 	msr	BASEPRI, r6
	__asm__ volatile(
   27e4a:	f04f 0320 	mov.w	r3, #32
   27e4e:	f3ef 8611 	mrs	r6, BASEPRI
   27e52:	f383 8811 	msr	BASEPRI, r3
	for (; last_registered >= 0; last_registered--) {
   27e56:	3c01      	subs	r4, #1
   27e58:	2c00      	cmp	r4, #0
   27e5a:	db1e      	blt.n	27e9a <k_poll+0x442>
		clear_event_registration(&events[last_registered]);
   27e5c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   27e60:	0099      	lsls	r1, r3, #2
   27e62:	1842      	adds	r2, r0, r1
	event->poller = NULL;
   27e64:	2300      	movs	r3, #0
   27e66:	6093      	str	r3, [r2, #8]
	switch (event->type) {
   27e68:	7b53      	ldrb	r3, [r2, #13]
   27e6a:	f003 030f 	and.w	r3, r3, #15
   27e6e:	2b02      	cmp	r3, #2
   27e70:	d0e3      	beq.n	27e3a <k_poll+0x3e2>
   27e72:	2b04      	cmp	r3, #4
   27e74:	d008      	beq.n	27e88 <k_poll+0x430>
   27e76:	2b01      	cmp	r3, #1
   27e78:	d1e5      	bne.n	27e46 <k_poll+0x3ee>
	node->prev->next = node->next;
   27e7a:	6853      	ldr	r3, [r2, #4]
   27e7c:	5847      	ldr	r7, [r0, r1]
   27e7e:	601f      	str	r7, [r3, #0]
	node->next->prev = node->prev;
   27e80:	5843      	ldr	r3, [r0, r1]
   27e82:	6852      	ldr	r2, [r2, #4]
   27e84:	605a      	str	r2, [r3, #4]
   27e86:	e7de      	b.n	27e46 <k_poll+0x3ee>
	node->prev->next = node->next;
   27e88:	6853      	ldr	r3, [r2, #4]
   27e8a:	5847      	ldr	r7, [r0, r1]
   27e8c:	601f      	str	r7, [r3, #0]
	node->next->prev = node->prev;
   27e8e:	5843      	ldr	r3, [r0, r1]
   27e90:	6852      	ldr	r2, [r2, #4]
   27e92:	605a      	str	r2, [r3, #4]
   27e94:	e7d7      	b.n	27e46 <k_poll+0x3ee>
   27e96:	462e      	mov	r6, r5
   27e98:	e7de      	b.n	27e58 <k_poll+0x400>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   27e9a:	f385 8811 	msr	BASEPRI, r5
		return 0;
   27e9e:	2000      	movs	r0, #0
}
   27ea0:	b005      	add	sp, #20
   27ea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27ea6:	f385 8811 	msr	BASEPRI, r5
		return -EAGAIN;
   27eaa:	f06f 000a 	mvn.w	r0, #10
   27eae:	e7f7      	b.n	27ea0 <k_poll+0x448>
	node->prev->next = node->next;
   27eb0:	6853      	ldr	r3, [r2, #4]
   27eb2:	5877      	ldr	r7, [r6, r1]
   27eb4:	601f      	str	r7, [r3, #0]
	node->next->prev = node->prev;
   27eb6:	5873      	ldr	r3, [r6, r1]
   27eb8:	6852      	ldr	r2, [r2, #4]
   27eba:	605a      	str	r2, [r3, #4]
   27ebc:	f385 8811 	msr	BASEPRI, r5
	__asm__ volatile(
   27ec0:	f04f 0320 	mov.w	r3, #32
   27ec4:	f3ef 8511 	mrs	r5, BASEPRI
   27ec8:	f383 8811 	msr	BASEPRI, r3
	for (; last_registered >= 0; last_registered--) {
   27ecc:	3c01      	subs	r4, #1
   27ece:	2c00      	cmp	r4, #0
   27ed0:	db1c      	blt.n	27f0c <k_poll+0x4b4>
		clear_event_registration(&events[last_registered]);
   27ed2:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   27ed6:	0099      	lsls	r1, r3, #2
   27ed8:	1872      	adds	r2, r6, r1
	event->poller = NULL;
   27eda:	2300      	movs	r3, #0
   27edc:	6093      	str	r3, [r2, #8]
	switch (event->type) {
   27ede:	7b53      	ldrb	r3, [r2, #13]
   27ee0:	f003 030f 	and.w	r3, r3, #15
   27ee4:	2b02      	cmp	r3, #2
   27ee6:	d0e3      	beq.n	27eb0 <k_poll+0x458>
   27ee8:	2b04      	cmp	r3, #4
   27eea:	d008      	beq.n	27efe <k_poll+0x4a6>
   27eec:	2b01      	cmp	r3, #1
   27eee:	d1e5      	bne.n	27ebc <k_poll+0x464>
	node->prev->next = node->next;
   27ef0:	6853      	ldr	r3, [r2, #4]
   27ef2:	5877      	ldr	r7, [r6, r1]
   27ef4:	601f      	str	r7, [r3, #0]
	node->next->prev = node->prev;
   27ef6:	5873      	ldr	r3, [r6, r1]
   27ef8:	6852      	ldr	r2, [r2, #4]
   27efa:	605a      	str	r2, [r3, #4]
   27efc:	e7de      	b.n	27ebc <k_poll+0x464>
	node->prev->next = node->next;
   27efe:	6853      	ldr	r3, [r2, #4]
   27f00:	5877      	ldr	r7, [r6, r1]
   27f02:	601f      	str	r7, [r3, #0]
	node->next->prev = node->prev;
   27f04:	5873      	ldr	r3, [r6, r1]
   27f06:	6852      	ldr	r2, [r2, #4]
   27f08:	605a      	str	r2, [r3, #4]
   27f0a:	e7d7      	b.n	27ebc <k_poll+0x464>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   27f0c:	f38e 8811 	msr	BASEPRI, lr
	return swap_rc;
   27f10:	e7c6      	b.n	27ea0 <k_poll+0x448>
   27f12:	bf00      	nop
   27f14:	20002710 	.word	0x20002710

00027f18 <_handle_obj_poll_events>:
	return list->head == list;
   27f18:	6803      	ldr	r3, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node;

	if (sys_dlist_is_empty(list)) {
   27f1a:	4298      	cmp	r0, r3
   27f1c:	d010      	beq.n	27f40 <_handle_obj_poll_events+0x28>
	node->prev->next = node->next;
   27f1e:	685a      	ldr	r2, [r3, #4]
   27f20:	6818      	ldr	r0, [r3, #0]
   27f22:	6010      	str	r0, [r2, #0]
	node->next->prev = node->prev;
   27f24:	681a      	ldr	r2, [r3, #0]
   27f26:	6858      	ldr	r0, [r3, #4]
   27f28:	6050      	str	r0, [r2, #4]
{
	struct k_poll_event *poll_event;
	int must_reschedule;

	poll_event = (struct k_poll_event *)sys_dlist_get(events);
	if (!poll_event) {
   27f2a:	b15b      	cbz	r3, 27f44 <_handle_obj_poll_events+0x2c>
{
   27f2c:	b500      	push	{lr}
   27f2e:	b083      	sub	sp, #12
		return 0;
	}

	(void)_signal_poll_event(poll_event, state, &must_reschedule);
   27f30:	aa01      	add	r2, sp, #4
   27f32:	4618      	mov	r0, r3
   27f34:	f7ff fcfe 	bl	27934 <_signal_poll_event>
	return must_reschedule;
   27f38:	9801      	ldr	r0, [sp, #4]
}
   27f3a:	b003      	add	sp, #12
   27f3c:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
   27f40:	2300      	movs	r3, #0
   27f42:	e7f2      	b.n	27f2a <_handle_obj_poll_events+0x12>
		return 0;
   27f44:	2000      	movs	r0, #0
   27f46:	4770      	bx	lr

00027f48 <k_poll_signal>:
	signal->signaled = 0;
	/* signal->result is left unitialized */
}

int k_poll_signal(struct k_poll_signal *signal, int result)
{
   27f48:	b530      	push	{r4, r5, lr}
   27f4a:	b083      	sub	sp, #12
	__asm__ volatile(
   27f4c:	f04f 0320 	mov.w	r3, #32
   27f50:	f3ef 8511 	mrs	r5, BASEPRI
   27f54:	f383 8811 	msr	BASEPRI, r3
	unsigned int key = irq_lock();
	struct k_poll_event *poll_event;
	int must_reschedule;

	signal->result = result;
   27f58:	60c1      	str	r1, [r0, #12]
	signal->signaled = 1;
   27f5a:	2301      	movs	r3, #1
   27f5c:	6083      	str	r3, [r0, #8]
	return list->head == list;
   27f5e:	6803      	ldr	r3, [r0, #0]
	if (sys_dlist_is_empty(list)) {
   27f60:	4298      	cmp	r0, r3
   27f62:	d013      	beq.n	27f8c <k_poll_signal+0x44>
	node->prev->next = node->next;
   27f64:	685a      	ldr	r2, [r3, #4]
   27f66:	6819      	ldr	r1, [r3, #0]
   27f68:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
   27f6a:	681a      	ldr	r2, [r3, #0]
   27f6c:	6859      	ldr	r1, [r3, #4]
   27f6e:	6051      	str	r1, [r2, #4]

	poll_event = (struct k_poll_event *)sys_dlist_get(&signal->poll_events);
	if (!poll_event) {
   27f70:	b173      	cbz	r3, 27f90 <k_poll_signal+0x48>
		irq_unlock(key);
		return 0;
	}

	int rc = _signal_poll_event(poll_event, K_POLL_STATE_SIGNALED,
   27f72:	aa01      	add	r2, sp, #4
   27f74:	2101      	movs	r1, #1
   27f76:	4618      	mov	r0, r3
   27f78:	f7ff fcdc 	bl	27934 <_signal_poll_event>
   27f7c:	4604      	mov	r4, r0
				    &must_reschedule);

	if (must_reschedule) {
   27f7e:	9b01      	ldr	r3, [sp, #4]
   27f80:	b953      	cbnz	r3, 27f98 <k_poll_signal+0x50>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   27f82:	f385 8811 	msr	BASEPRI, r5
	} else {
		irq_unlock(key);
	}

	return rc;
}
   27f86:	4620      	mov	r0, r4
   27f88:	b003      	add	sp, #12
   27f8a:	bd30      	pop	{r4, r5, pc}
		return NULL;
   27f8c:	2300      	movs	r3, #0
   27f8e:	e7ef      	b.n	27f70 <k_poll_signal+0x28>
   27f90:	f385 8811 	msr	BASEPRI, r5
		return 0;
   27f94:	2400      	movs	r4, #0
   27f96:	e7f6      	b.n	27f86 <k_poll_signal+0x3e>
	_update_time_slice_before_swap();
   27f98:	f000 fa74 	bl	28484 <_update_time_slice_before_swap>
	return __swap(key);
   27f9c:	4628      	mov	r0, r5
   27f9e:	f7fe fdb7 	bl	26b10 <__swap>
   27fa2:	e7f0      	b.n	27f86 <k_poll_signal+0x3e>

00027fa4 <k_queue_poll>:
	sys_slist_init(list);
}

#if defined(CONFIG_POLL)
static void *k_queue_poll(struct k_queue *queue, s32_t timeout)
{
   27fa4:	b530      	push	{r4, r5, lr}
   27fa6:	b087      	sub	sp, #28
   27fa8:	4604      	mov	r4, r0
   27faa:	460d      	mov	r5, r1
	struct k_poll_event event;
	int err;
	unsigned int key;
	void *val;

	k_poll_event_init(&event, K_POLL_TYPE_FIFO_DATA_AVAILABLE,
   27fac:	4603      	mov	r3, r0
   27fae:	2200      	movs	r2, #0
   27fb0:	2104      	movs	r1, #4
   27fb2:	eb0d 0001 	add.w	r0, sp, r1
   27fb6:	f7ff fd3b 	bl	27a30 <k_poll_event_init>
   27fba:	e005      	b.n	27fc8 <k_queue_poll+0x24>
   27fbc:	f383 8811 	msr	BASEPRI, r3
		 * irq_lock.
		 */
		key = irq_lock();
		val = sys_slist_get(&queue->data_q);
		irq_unlock(key);
	} while (!val && timeout == K_FOREVER);
   27fc0:	b9f8      	cbnz	r0, 28002 <k_queue_poll+0x5e>
   27fc2:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   27fc6:	d11c      	bne.n	28002 <k_queue_poll+0x5e>
		event.state = K_POLL_STATE_NOT_READY;
   27fc8:	f89d 3011 	ldrb.w	r3, [sp, #17]
   27fcc:	f36f 1307 	bfc	r3, #4, #4
   27fd0:	f88d 3011 	strb.w	r3, [sp, #17]
		err = k_poll(&event, 1, timeout);
   27fd4:	462a      	mov	r2, r5
   27fd6:	2101      	movs	r1, #1
   27fd8:	a801      	add	r0, sp, #4
   27fda:	f7ff fd3d 	bl	27a58 <k_poll>
		if (err) {
   27fde:	b978      	cbnz	r0, 28000 <k_queue_poll+0x5c>
	__asm__ volatile(
   27fe0:	f04f 0220 	mov.w	r2, #32
   27fe4:	f3ef 8311 	mrs	r3, BASEPRI
   27fe8:	f382 8811 	msr	BASEPRI, r2
   27fec:	6820      	ldr	r0, [r4, #0]
	return sys_slist_is_empty(list) ? NULL : sys_slist_get_not_empty(list);
   27fee:	2800      	cmp	r0, #0
   27ff0:	d0e4      	beq.n	27fbc <k_queue_poll+0x18>
	list->head = node->next;
   27ff2:	6802      	ldr	r2, [r0, #0]
   27ff4:	6022      	str	r2, [r4, #0]
	if (list->tail == node) {
   27ff6:	6861      	ldr	r1, [r4, #4]
   27ff8:	4288      	cmp	r0, r1
   27ffa:	d1df      	bne.n	27fbc <k_queue_poll+0x18>
		list->tail = list->head;
   27ffc:	6062      	str	r2, [r4, #4]
   27ffe:	e7dd      	b.n	27fbc <k_queue_poll+0x18>
			return NULL;
   28000:	2000      	movs	r0, #0

	return val;
}
   28002:	b007      	add	sp, #28
   28004:	bd30      	pop	{r4, r5, pc}

00028006 <k_queue_init>:
	list->head = NULL;
   28006:	2300      	movs	r3, #0
   28008:	6003      	str	r3, [r0, #0]
	list->tail = NULL;
   2800a:	6043      	str	r3, [r0, #4]
	sys_dlist_init(&queue->poll_events);
   2800c:	f100 0308 	add.w	r3, r0, #8
	list->head = (sys_dnode_t *)list;
   28010:	6083      	str	r3, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   28012:	60c3      	str	r3, [r0, #12]
   28014:	4770      	bx	lr

00028016 <k_queue_insert>:
{
   28016:	b510      	push	{r4, lr}
   28018:	f04f 0320 	mov.w	r3, #32
   2801c:	f3ef 8411 	mrs	r4, BASEPRI
   28020:	f383 8811 	msr	BASEPRI, r3
	if (!prev) {
   28024:	b159      	cbz	r1, 2803e <k_queue_insert+0x28>
	} else if (!prev->next) {
   28026:	680b      	ldr	r3, [r1, #0]
   28028:	b18b      	cbz	r3, 2804e <k_queue_insert+0x38>
		node->next = prev->next;
   2802a:	6013      	str	r3, [r2, #0]
		prev->next = node;
   2802c:	600a      	str	r2, [r1, #0]
	return _handle_obj_poll_events(&queue->poll_events, state);
   2802e:	2104      	movs	r1, #4
   28030:	3008      	adds	r0, #8
   28032:	f7ff ff71 	bl	27f18 <_handle_obj_poll_events>
	if (handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE)) {
   28036:	b998      	cbnz	r0, 28060 <k_queue_insert+0x4a>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   28038:	f384 8811 	msr	BASEPRI, r4
   2803c:	bd10      	pop	{r4, pc}
	node->next = list->head;
   2803e:	6803      	ldr	r3, [r0, #0]
   28040:	6013      	str	r3, [r2, #0]
	list->head = node;
   28042:	6002      	str	r2, [r0, #0]
	if (!list->tail) {
   28044:	6843      	ldr	r3, [r0, #4]
   28046:	2b00      	cmp	r3, #0
   28048:	d1f1      	bne.n	2802e <k_queue_insert+0x18>
		list->tail = list->head;
   2804a:	6042      	str	r2, [r0, #4]
   2804c:	e7ef      	b.n	2802e <k_queue_insert+0x18>
	node->next = NULL;
   2804e:	6013      	str	r3, [r2, #0]
	if (!list->tail) {
   28050:	6843      	ldr	r3, [r0, #4]
   28052:	b113      	cbz	r3, 2805a <k_queue_insert+0x44>
		list->tail->next = node;
   28054:	601a      	str	r2, [r3, #0]
		list->tail = node;
   28056:	6042      	str	r2, [r0, #4]
   28058:	e7e9      	b.n	2802e <k_queue_insert+0x18>
		list->tail = node;
   2805a:	6042      	str	r2, [r0, #4]
		list->head = node;
   2805c:	6002      	str	r2, [r0, #0]
   2805e:	e7e6      	b.n	2802e <k_queue_insert+0x18>
	_update_time_slice_before_swap();
   28060:	f000 fa10 	bl	28484 <_update_time_slice_before_swap>
	return __swap(key);
   28064:	4620      	mov	r0, r4
   28066:	f7fe fd53 	bl	26b10 <__swap>
   2806a:	bd10      	pop	{r4, pc}

0002806c <k_queue_append>:
{
   2806c:	b508      	push	{r3, lr}
	return k_queue_insert(queue, queue->data_q.tail, data);
   2806e:	460a      	mov	r2, r1
   28070:	6841      	ldr	r1, [r0, #4]
   28072:	f7ff ffd0 	bl	28016 <k_queue_insert>
   28076:	bd08      	pop	{r3, pc}

00028078 <k_queue_prepend>:
{
   28078:	b508      	push	{r3, lr}
	return k_queue_insert(queue, NULL, data);
   2807a:	460a      	mov	r2, r1
   2807c:	2100      	movs	r1, #0
   2807e:	f7ff ffca 	bl	28016 <k_queue_insert>
   28082:	bd08      	pop	{r3, pc}

00028084 <k_queue_append_list>:
{
   28084:	b510      	push	{r4, lr}
	__asm__ volatile(
   28086:	f04f 0320 	mov.w	r3, #32
   2808a:	f3ef 8411 	mrs	r4, BASEPRI
   2808e:	f383 8811 	msr	BASEPRI, r3
	if (!list->tail) {
   28092:	6843      	ldr	r3, [r0, #4]
   28094:	b14b      	cbz	r3, 280aa <k_queue_append_list+0x26>
		list->tail->next = (sys_snode_t *)head;
   28096:	6019      	str	r1, [r3, #0]
		list->tail = (sys_snode_t *)tail;
   28098:	6042      	str	r2, [r0, #4]
	return _handle_obj_poll_events(&queue->poll_events, state);
   2809a:	2104      	movs	r1, #4
   2809c:	3008      	adds	r0, #8
   2809e:	f7ff ff3b 	bl	27f18 <_handle_obj_poll_events>
	if (handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE)) {
   280a2:	b928      	cbnz	r0, 280b0 <k_queue_append_list+0x2c>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   280a4:	f384 8811 	msr	BASEPRI, r4
   280a8:	bd10      	pop	{r4, pc}
		list->head = (sys_snode_t *)head;
   280aa:	6001      	str	r1, [r0, #0]
		list->tail = (sys_snode_t *)tail;
   280ac:	6042      	str	r2, [r0, #4]
   280ae:	e7f4      	b.n	2809a <k_queue_append_list+0x16>
	_update_time_slice_before_swap();
   280b0:	f000 f9e8 	bl	28484 <_update_time_slice_before_swap>
	return __swap(key);
   280b4:	4620      	mov	r0, r4
   280b6:	f7fe fd2b 	bl	26b10 <__swap>
   280ba:	bd10      	pop	{r4, pc}

000280bc <k_queue_get>:
#endif /* CONFIG_POLL */

void *k_queue_get(struct k_queue *queue, s32_t timeout)
{
   280bc:	b510      	push	{r4, lr}
	__asm__ volatile(
   280be:	f04f 0320 	mov.w	r3, #32
   280c2:	f3ef 8211 	mrs	r2, BASEPRI
   280c6:	f383 8811 	msr	BASEPRI, r3
	return (!list->head);
   280ca:	6803      	ldr	r3, [r0, #0]
	unsigned int key;
	void *data;

	key = irq_lock();

	if (likely(!sys_slist_is_empty(&queue->data_q))) {
   280cc:	b153      	cbz	r3, 280e4 <k_queue_get+0x28>
	list->head = node->next;
   280ce:	6819      	ldr	r1, [r3, #0]
   280d0:	6001      	str	r1, [r0, #0]
	if (list->tail == node) {
   280d2:	6844      	ldr	r4, [r0, #4]
   280d4:	42a3      	cmp	r3, r4
   280d6:	d003      	beq.n	280e0 <k_queue_get+0x24>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   280d8:	f382 8811 	msr	BASEPRI, r2
		data = sys_slist_get_not_empty(&queue->data_q);
		irq_unlock(key);
		return data;
   280dc:	4618      	mov	r0, r3
   280de:	bd10      	pop	{r4, pc}
		list->tail = list->head;
   280e0:	6041      	str	r1, [r0, #4]
   280e2:	e7f9      	b.n	280d8 <k_queue_get+0x1c>
	}

	if (timeout == K_NO_WAIT) {
   280e4:	b121      	cbz	r1, 280f0 <k_queue_get+0x34>
   280e6:	f382 8811 	msr	BASEPRI, r2
	}

#if defined(CONFIG_POLL)
	irq_unlock(key);

	return k_queue_poll(queue, timeout);
   280ea:	f7ff ff5b 	bl	27fa4 <k_queue_poll>
#else
	_pend_current_thread(&queue->wait_q, timeout);

	return _Swap(key) ? NULL : _current->base.swap_data;
#endif /* CONFIG_POLL */
}
   280ee:	bd10      	pop	{r4, pc}
   280f0:	f382 8811 	msr	BASEPRI, r2
		return NULL;
   280f4:	2000      	movs	r0, #0
   280f6:	bd10      	pop	{r4, pc}

000280f8 <_set_ready_q_prio_bit>:
	return (prio + _NUM_COOP_PRIO) >> 5;
   280f8:	3010      	adds	r0, #16
   280fa:	1143      	asrs	r3, r0, #5
	return (1 << ((prio + _NUM_COOP_PRIO) & 0x1f));
   280fc:	f000 001f 	and.w	r0, r0, #31
   28100:	2201      	movs	r2, #1
   28102:	fa02 f000 	lsl.w	r0, r2, r0
static void _set_ready_q_prio_bit(int prio)
{
	int bmap_index = _get_ready_q_prio_bmap_index(prio);
	u32_t *bmap = &_ready_q.prio_bmap[bmap_index];

	*bmap |= _get_ready_q_prio_bit(prio);
   28106:	1d9a      	adds	r2, r3, #6
   28108:	4b03      	ldr	r3, [pc, #12]	; (28118 <_set_ready_q_prio_bit+0x20>)
   2810a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   2810e:	685a      	ldr	r2, [r3, #4]
   28110:	4302      	orrs	r2, r0
   28112:	605a      	str	r2, [r3, #4]
   28114:	4770      	bx	lr
   28116:	bf00      	nop
   28118:	20002710 	.word	0x20002710

0002811c <_clear_ready_q_prio_bit>:
	return (prio + _NUM_COOP_PRIO) >> 5;
   2811c:	3010      	adds	r0, #16
   2811e:	1143      	asrs	r3, r0, #5
	return (1 << ((prio + _NUM_COOP_PRIO) & 0x1f));
   28120:	f000 001f 	and.w	r0, r0, #31
   28124:	2201      	movs	r2, #1
   28126:	fa02 f000 	lsl.w	r0, r2, r0
static void _clear_ready_q_prio_bit(int prio)
{
	int bmap_index = _get_ready_q_prio_bmap_index(prio);
	u32_t *bmap = &_ready_q.prio_bmap[bmap_index];

	*bmap &= ~_get_ready_q_prio_bit(prio);
   2812a:	1d9a      	adds	r2, r3, #6
   2812c:	4b03      	ldr	r3, [pc, #12]	; (2813c <_clear_ready_q_prio_bit+0x20>)
   2812e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   28132:	685a      	ldr	r2, [r3, #4]
   28134:	ea22 0200 	bic.w	r2, r2, r0
   28138:	605a      	str	r2, [r3, #4]
   2813a:	4770      	bx	lr
   2813c:	20002710 	.word	0x20002710

00028140 <_get_ready_q_head>:
	ready_range = _ready_q.prio_bmap[0];
   28140:	4b06      	ldr	r3, [pc, #24]	; (2815c <_get_ready_q_head+0x1c>)
   28142:	69da      	ldr	r2, [r3, #28]
	return __builtin_ffs(op);
   28144:	fa92 f3a2 	rbit	r3, r2
   28148:	fab3 f383 	clz	r3, r3
   2814c:	b90a      	cbnz	r2, 28152 <_get_ready_q_head+0x12>
   2814e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	return list->head;
   28152:	3304      	adds	r3, #4

	struct k_thread *thread =
		(struct k_thread *)sys_dlist_peek_head_not_empty(list);

	return thread;
}
   28154:	4a01      	ldr	r2, [pc, #4]	; (2815c <_get_ready_q_head+0x1c>)
   28156:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
   2815a:	4770      	bx	lr
   2815c:	20002710 	.word	0x20002710

00028160 <_add_thread_to_ready_q>:
 *
 * Interrupts must be locked when calling this function.
 */

void _add_thread_to_ready_q(struct k_thread *thread)
{
   28160:	b570      	push	{r4, r5, r6, lr}
   28162:	4604      	mov	r4, r0
#ifdef CONFIG_MULTITHREADING
	int q_index = _get_ready_q_q_index(thread->base.prio);
   28164:	f990 000a 	ldrsb.w	r0, [r0, #10]
	sys_dlist_t *q = &_ready_q.q[q_index];
   28168:	4e0c      	ldr	r6, [pc, #48]	; (2819c <_add_thread_to_ready_q+0x3c>)
   2816a:	f100 0514 	add.w	r5, r0, #20
   2816e:	eb06 05c5 	add.w	r5, r6, r5, lsl #3

	_set_ready_q_prio_bit(thread->base.prio);
   28172:	f7ff ffc1 	bl	280f8 <_set_ready_q_prio_bit>
	node->next = list;
   28176:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
   28178:	686b      	ldr	r3, [r5, #4]
   2817a:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   2817c:	686b      	ldr	r3, [r5, #4]
   2817e:	601c      	str	r4, [r3, #0]
	list->tail = node;
   28180:	606c      	str	r4, [r5, #4]
	sys_dlist_append(q, &thread->base.k_q_node);

	struct k_thread **cache = &_ready_q.cache;

	*cache = _is_t1_higher_prio_than_t2(thread, *cache) ? thread : *cache;
   28182:	69b3      	ldr	r3, [r6, #24]
	return _is_prio1_higher_than_prio2(t1->base.prio, t2->base.prio);
   28184:	f994 200a 	ldrsb.w	r2, [r4, #10]
   28188:	f993 100a 	ldrsb.w	r1, [r3, #10]
   2818c:	4291      	cmp	r1, r2
   2818e:	dc02      	bgt.n	28196 <_add_thread_to_ready_q+0x36>
   28190:	4a02      	ldr	r2, [pc, #8]	; (2819c <_add_thread_to_ready_q+0x3c>)
   28192:	6193      	str	r3, [r2, #24]
   28194:	bd70      	pop	{r4, r5, r6, pc}
   28196:	4623      	mov	r3, r4
   28198:	e7fa      	b.n	28190 <_add_thread_to_ready_q+0x30>
   2819a:	bf00      	nop
   2819c:	20002710 	.word	0x20002710

000281a0 <_remove_thread_from_ready_q>:
 *
 * Interrupts must be locked when calling this function.
 */

void _remove_thread_from_ready_q(struct k_thread *thread)
{
   281a0:	b538      	push	{r3, r4, r5, lr}
   281a2:	4604      	mov	r4, r0
#ifdef CONFIG_MULTITHREADING
	int q_index = _get_ready_q_q_index(thread->base.prio);
   281a4:	f990 300a 	ldrsb.w	r3, [r0, #10]
	sys_dlist_t *q = &_ready_q.q[q_index];
   281a8:	4a0e      	ldr	r2, [pc, #56]	; (281e4 <_remove_thread_from_ready_q+0x44>)
   281aa:	3314      	adds	r3, #20
   281ac:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
	node->prev->next = node->next;
   281b0:	6840      	ldr	r0, [r0, #4]
   281b2:	6825      	ldr	r5, [r4, #0]
   281b4:	6005      	str	r5, [r0, #0]
	node->next->prev = node->prev;
   281b6:	6820      	ldr	r0, [r4, #0]
   281b8:	6865      	ldr	r5, [r4, #4]
   281ba:	6045      	str	r5, [r0, #4]
	return list->head == list;
   281bc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]

	sys_dlist_remove(&thread->base.k_q_node);
	if (sys_dlist_is_empty(q)) {
   281c0:	4299      	cmp	r1, r3
   281c2:	d006      	beq.n	281d2 <_remove_thread_from_ready_q+0x32>
		_clear_ready_q_prio_bit(thread->base.prio);
	}

	struct k_thread **cache = &_ready_q.cache;

	*cache = *cache == thread ? _get_ready_q_head() : *cache;
   281c4:	4b07      	ldr	r3, [pc, #28]	; (281e4 <_remove_thread_from_ready_q+0x44>)
   281c6:	6998      	ldr	r0, [r3, #24]
   281c8:	4284      	cmp	r4, r0
   281ca:	d007      	beq.n	281dc <_remove_thread_from_ready_q+0x3c>
   281cc:	4b05      	ldr	r3, [pc, #20]	; (281e4 <_remove_thread_from_ready_q+0x44>)
   281ce:	6198      	str	r0, [r3, #24]
   281d0:	bd38      	pop	{r3, r4, r5, pc}
		_clear_ready_q_prio_bit(thread->base.prio);
   281d2:	f994 000a 	ldrsb.w	r0, [r4, #10]
   281d6:	f7ff ffa1 	bl	2811c <_clear_ready_q_prio_bit>
   281da:	e7f3      	b.n	281c4 <_remove_thread_from_ready_q+0x24>
	*cache = *cache == thread ? _get_ready_q_head() : *cache;
   281dc:	f7ff ffb0 	bl	28140 <_get_ready_q_head>
   281e0:	e7f4      	b.n	281cc <_remove_thread_from_ready_q+0x2c>
   281e2:	bf00      	nop
   281e4:	20002710 	.word	0x20002710

000281e8 <_pend_thread>:
#endif

/* pend the specified thread: it must *not* be in the ready queue */
/* must be called with interrupts locked */
void _pend_thread(struct k_thread *thread, _wait_q_t *wait_q, s32_t timeout)
{
   281e8:	b538      	push	{r3, r4, r5, lr}
   281ea:	680b      	ldr	r3, [r1, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   281ec:	4299      	cmp	r1, r3
   281ee:	d115      	bne.n	2821c <_pend_thread+0x34>
   281f0:	2300      	movs	r3, #0
   281f2:	e013      	b.n	2821c <_pend_thread+0x34>
	if (!insert_point) {
   281f4:	b133      	cbz	r3, 28204 <_pend_thread+0x1c>
		node->prev = insert_point->prev;
   281f6:	685c      	ldr	r4, [r3, #4]
   281f8:	6044      	str	r4, [r0, #4]
		node->next = insert_point;
   281fa:	6003      	str	r3, [r0, #0]
		insert_point->prev->next = node;
   281fc:	685c      	ldr	r4, [r3, #4]
   281fe:	6020      	str	r0, [r4, #0]
		insert_point->prev = node;
   28200:	6058      	str	r0, [r3, #4]
   28202:	e02b      	b.n	2825c <_pend_thread+0x74>
	node->next = list;
   28204:	6001      	str	r1, [r0, #0]
	node->prev = list->tail;
   28206:	684b      	ldr	r3, [r1, #4]
   28208:	6043      	str	r3, [r0, #4]
	list->tail->next = node;
   2820a:	684b      	ldr	r3, [r1, #4]
   2820c:	6018      	str	r0, [r3, #0]
	list->tail = node;
   2820e:	6048      	str	r0, [r1, #4]
   28210:	e024      	b.n	2825c <_pend_thread+0x74>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28212:	461d      	mov	r5, r3
   28214:	e010      	b.n	28238 <_pend_thread+0x50>
	return (node == list->tail) ? NULL : node->next;
   28216:	2500      	movs	r5, #0
   28218:	e00e      	b.n	28238 <_pend_thread+0x50>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2821a:	2300      	movs	r3, #0
#ifdef CONFIG_MULTITHREADING
	sys_dlist_t *wait_q_list = (sys_dlist_t *)wait_q;
	struct k_thread *pending;

	SYS_DLIST_FOR_EACH_CONTAINER(wait_q_list, pending, base.k_q_node) {
   2821c:	b1c3      	cbz	r3, 28250 <_pend_thread+0x68>
   2821e:	f990 500a 	ldrsb.w	r5, [r0, #10]
   28222:	f993 400a 	ldrsb.w	r4, [r3, #10]
		if (_is_t1_higher_prio_than_t2(thread, pending)) {
   28226:	42a5      	cmp	r5, r4
   28228:	dbe4      	blt.n	281f4 <_pend_thread+0xc>
	SYS_DLIST_FOR_EACH_CONTAINER(wait_q_list, pending, base.k_q_node) {
   2822a:	461c      	mov	r4, r3
   2822c:	2b00      	cmp	r3, #0
   2822e:	d0f0      	beq.n	28212 <_pend_thread+0x2a>
	return (node == list->tail) ? NULL : node->next;
   28230:	684d      	ldr	r5, [r1, #4]
   28232:	42ab      	cmp	r3, r5
   28234:	d0ef      	beq.n	28216 <_pend_thread+0x2e>
   28236:	681d      	ldr	r5, [r3, #0]
   28238:	b145      	cbz	r5, 2824c <_pend_thread+0x64>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2823a:	2c00      	cmp	r4, #0
   2823c:	d0ed      	beq.n	2821a <_pend_thread+0x32>
	return (node == list->tail) ? NULL : node->next;
   2823e:	684d      	ldr	r5, [r1, #4]
   28240:	42ac      	cmp	r4, r5
   28242:	d001      	beq.n	28248 <_pend_thread+0x60>
   28244:	681b      	ldr	r3, [r3, #0]
   28246:	e7e9      	b.n	2821c <_pend_thread+0x34>
   28248:	2300      	movs	r3, #0
   2824a:	e7e7      	b.n	2821c <_pend_thread+0x34>
   2824c:	2300      	movs	r3, #0
   2824e:	e7e5      	b.n	2821c <_pend_thread+0x34>
	node->next = list;
   28250:	6001      	str	r1, [r0, #0]
	node->prev = list->tail;
   28252:	684b      	ldr	r3, [r1, #4]
   28254:	6043      	str	r3, [r0, #4]
	list->tail->next = node;
   28256:	684b      	ldr	r3, [r1, #4]
   28258:	6018      	str	r0, [r3, #0]
	list->tail = node;
   2825a:	6048      	str	r0, [r1, #4]
	thread->base.thread_state |= _THREAD_PENDING;
   2825c:	7a44      	ldrb	r4, [r0, #9]
   2825e:	f044 0402 	orr.w	r4, r4, #2
   28262:	7244      	strb	r4, [r0, #9]
	sys_dlist_append(wait_q_list, &thread->base.k_q_node);

inserted:
	_mark_thread_as_pending(thread);

	if (timeout != K_FOREVER) {
   28264:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   28268:	f000 8089 	beq.w	2837e <_pend_thread+0x196>
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
   2826c:	f102 0309 	add.w	r3, r2, #9
   28270:	4a43      	ldr	r2, [pc, #268]	; (28380 <_pend_thread+0x198>)
   28272:	fba2 2303 	umull	r2, r3, r2, r3
   28276:	08db      	lsrs	r3, r3, #3
		s32_t ticks = _TICK_ALIGN + _ms_to_ticks(timeout);
   28278:	3301      	adds	r3, #1
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
   2827a:	f100 0410 	add.w	r4, r0, #16
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   2827e:	6123      	str	r3, [r4, #16]
	timeout->thread = thread;
   28280:	60a0      	str	r0, [r4, #8]
	timeout->wait_q = (sys_dlist_t *)wait_q;
   28282:	60e1      	str	r1, [r4, #12]
	if (!timeout_in_ticks) {
   28284:	b133      	cbz	r3, 28294 <_pend_thread+0xac>
	return list->head == list;
   28286:	4a3f      	ldr	r2, [pc, #252]	; (28384 <_pend_thread+0x19c>)
   28288:	f852 3f0c 	ldr.w	r3, [r2, #12]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2828c:	4293      	cmp	r3, r2
   2828e:	d151      	bne.n	28334 <_pend_thread+0x14c>
   28290:	2300      	movs	r3, #0
   28292:	e04f      	b.n	28334 <_pend_thread+0x14c>
	__asm__ volatile(
   28294:	f04f 0320 	mov.w	r3, #32
   28298:	f3ef 8511 	mrs	r5, BASEPRI
   2829c:	f383 8811 	msr	BASEPRI, r3
	timeout->delta_ticks_from_prev = _INACTIVE;
   282a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   282a4:	6123      	str	r3, [r4, #16]
	if (thread) {
   282a6:	b320      	cbz	r0, 282f2 <_pend_thread+0x10a>
	if (timeout_obj->wait_q) {
   282a8:	68e3      	ldr	r3, [r4, #12]
   282aa:	b15b      	cbz	r3, 282c4 <_pend_thread+0xdc>
	node->prev->next = node->next;
   282ac:	6843      	ldr	r3, [r0, #4]
   282ae:	6802      	ldr	r2, [r0, #0]
   282b0:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   282b2:	6803      	ldr	r3, [r0, #0]
   282b4:	6842      	ldr	r2, [r0, #4]
   282b6:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   282b8:	7a43      	ldrb	r3, [r0, #9]
   282ba:	f023 0302 	bic.w	r3, r3, #2
   282be:	7243      	strb	r3, [r0, #9]
		thread->base.timeout.wait_q = NULL;
   282c0:	2300      	movs	r3, #0
   282c2:	61c3      	str	r3, [r0, #28]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   282c4:	7a43      	ldrb	r3, [r0, #9]
   282c6:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   282ca:	7243      	strb	r3, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   282cc:	f013 0f1b 	tst.w	r3, #27
   282d0:	d107      	bne.n	282e2 <_pend_thread+0xfa>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   282d2:	6a03      	ldr	r3, [r0, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   282d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   282d8:	d001      	beq.n	282de <_pend_thread+0xf6>
   282da:	2300      	movs	r3, #0
   282dc:	e002      	b.n	282e4 <_pend_thread+0xfc>
   282de:	2301      	movs	r3, #1
   282e0:	e000      	b.n	282e4 <_pend_thread+0xfc>
   282e2:	2300      	movs	r3, #0
	if (_is_thread_ready(thread)) {
   282e4:	b913      	cbnz	r3, 282ec <_pend_thread+0x104>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   282e6:	f385 8811 	msr	BASEPRI, r5
   282ea:	bd38      	pop	{r3, r4, r5, pc}
		_add_thread_to_ready_q(thread);
   282ec:	f7ff ff38 	bl	28160 <_add_thread_to_ready_q>
   282f0:	e7f9      	b.n	282e6 <_pend_thread+0xfe>
   282f2:	f385 8811 	msr	BASEPRI, r5
		if (timeout->func) {
   282f6:	6963      	ldr	r3, [r4, #20]
   282f8:	2b00      	cmp	r3, #0
   282fa:	d040      	beq.n	2837e <_pend_thread+0x196>
			timeout->func(timeout);
   282fc:	4620      	mov	r0, r4
   282fe:	4798      	blx	r3
   28300:	bd38      	pop	{r3, r4, r5, pc}
			in_q->delta_ticks_from_prev -= *delta;
   28302:	1a8a      	subs	r2, r1, r2
   28304:	611a      	str	r2, [r3, #16]
	if (!insert_point) {
   28306:	b133      	cbz	r3, 28316 <_pend_thread+0x12e>
		node->prev = insert_point->prev;
   28308:	685a      	ldr	r2, [r3, #4]
   2830a:	6062      	str	r2, [r4, #4]
		node->next = insert_point;
   2830c:	6103      	str	r3, [r0, #16]
		insert_point->prev->next = node;
   2830e:	685a      	ldr	r2, [r3, #4]
   28310:	6014      	str	r4, [r2, #0]
		insert_point->prev = node;
   28312:	605c      	str	r4, [r3, #4]
   28314:	bd38      	pop	{r3, r4, r5, pc}
	node->next = list;
   28316:	4b1b      	ldr	r3, [pc, #108]	; (28384 <_pend_thread+0x19c>)
   28318:	f103 020c 	add.w	r2, r3, #12
   2831c:	6102      	str	r2, [r0, #16]
	node->prev = list->tail;
   2831e:	691a      	ldr	r2, [r3, #16]
   28320:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
   28322:	691a      	ldr	r2, [r3, #16]
   28324:	6014      	str	r4, [r2, #0]
	list->tail = node;
   28326:	611c      	str	r4, [r3, #16]
   28328:	bd38      	pop	{r3, r4, r5, pc}
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2832a:	4619      	mov	r1, r3
   2832c:	e011      	b.n	28352 <_pend_thread+0x16a>
	return (node == list->tail) ? NULL : node->next;
   2832e:	2100      	movs	r1, #0
   28330:	e00f      	b.n	28352 <_pend_thread+0x16a>
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   28332:	2300      	movs	r3, #0
   28334:	b1d3      	cbz	r3, 2836c <_pend_thread+0x184>
		if (*delta <= in_q->delta_ticks_from_prev) {
   28336:	6922      	ldr	r2, [r4, #16]
   28338:	6919      	ldr	r1, [r3, #16]
   2833a:	428a      	cmp	r2, r1
   2833c:	dde1      	ble.n	28302 <_pend_thread+0x11a>
		*delta -= in_q->delta_ticks_from_prev;
   2833e:	1a52      	subs	r2, r2, r1
   28340:	6122      	str	r2, [r4, #16]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   28342:	461a      	mov	r2, r3
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28344:	2b00      	cmp	r3, #0
   28346:	d0f0      	beq.n	2832a <_pend_thread+0x142>
	return (node == list->tail) ? NULL : node->next;
   28348:	490e      	ldr	r1, [pc, #56]	; (28384 <_pend_thread+0x19c>)
   2834a:	6909      	ldr	r1, [r1, #16]
   2834c:	428b      	cmp	r3, r1
   2834e:	d0ee      	beq.n	2832e <_pend_thread+0x146>
   28350:	6819      	ldr	r1, [r3, #0]
   28352:	2900      	cmp	r1, #0
   28354:	d0ed      	beq.n	28332 <_pend_thread+0x14a>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28356:	b12a      	cbz	r2, 28364 <_pend_thread+0x17c>
	return (node == list->tail) ? NULL : node->next;
   28358:	490a      	ldr	r1, [pc, #40]	; (28384 <_pend_thread+0x19c>)
   2835a:	6909      	ldr	r1, [r1, #16]
   2835c:	428a      	cmp	r2, r1
   2835e:	d003      	beq.n	28368 <_pend_thread+0x180>
   28360:	681b      	ldr	r3, [r3, #0]
   28362:	e7e7      	b.n	28334 <_pend_thread+0x14c>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28364:	2300      	movs	r3, #0
   28366:	e7e5      	b.n	28334 <_pend_thread+0x14c>
	return (node == list->tail) ? NULL : node->next;
   28368:	2300      	movs	r3, #0
   2836a:	e7e3      	b.n	28334 <_pend_thread+0x14c>
	node->next = list;
   2836c:	4b05      	ldr	r3, [pc, #20]	; (28384 <_pend_thread+0x19c>)
   2836e:	f103 020c 	add.w	r2, r3, #12
   28372:	6102      	str	r2, [r0, #16]
	node->prev = list->tail;
   28374:	691a      	ldr	r2, [r3, #16]
   28376:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
   28378:	691a      	ldr	r2, [r3, #16]
   2837a:	6014      	str	r4, [r2, #0]
	list->tail = node;
   2837c:	611c      	str	r4, [r3, #16]
   2837e:	bd38      	pop	{r3, r4, r5, pc}
   28380:	cccccccd 	.word	0xcccccccd
   28384:	20002710 	.word	0x20002710

00028388 <_pend_current_thread>:
}

/* pend the current thread */
/* must be called with interrupts locked */
void _pend_current_thread(_wait_q_t *wait_q, s32_t timeout)
{
   28388:	b570      	push	{r4, r5, r6, lr}
   2838a:	4605      	mov	r5, r0
   2838c:	460e      	mov	r6, r1
	_remove_thread_from_ready_q(_current);
   2838e:	4c05      	ldr	r4, [pc, #20]	; (283a4 <_pend_current_thread+0x1c>)
   28390:	68a0      	ldr	r0, [r4, #8]
   28392:	f7ff ff05 	bl	281a0 <_remove_thread_from_ready_q>
	_pend_thread(_current, wait_q, timeout);
   28396:	4632      	mov	r2, r6
   28398:	4629      	mov	r1, r5
   2839a:	68a0      	ldr	r0, [r4, #8]
   2839c:	f7ff ff24 	bl	281e8 <_pend_thread>
   283a0:	bd70      	pop	{r4, r5, r6, pc}
   283a2:	bf00      	nop
   283a4:	20002710 	.word	0x20002710

000283a8 <__must_switch_threads>:
	ready_range = _ready_q.prio_bmap[0];
   283a8:	4b09      	ldr	r3, [pc, #36]	; (283d0 <__must_switch_threads+0x28>)
   283aa:	69db      	ldr	r3, [r3, #28]
	return __builtin_ffs(op);
   283ac:	fa93 f0a3 	rbit	r0, r3
   283b0:	fab0 f080 	clz	r0, r0
   283b4:	b90b      	cbnz	r3, 283ba <__must_switch_threads+0x12>
   283b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	return abs_prio - _NUM_COOP_PRIO;
   283ba:	3810      	subs	r0, #16

#ifdef CONFIG_KERNEL_DEBUG
	_dump_ready_q();
#endif  /* CONFIG_KERNEL_DEBUG */

	return _is_prio_higher(_get_highest_ready_prio(), _current->base.prio);
   283bc:	4b04      	ldr	r3, [pc, #16]	; (283d0 <__must_switch_threads+0x28>)
   283be:	689b      	ldr	r3, [r3, #8]
   283c0:	f993 300a 	ldrsb.w	r3, [r3, #10]
#else
	return 0;
#endif
}
   283c4:	4283      	cmp	r3, r0
   283c6:	bfd4      	ite	le
   283c8:	2000      	movle	r0, #0
   283ca:	2001      	movgt	r0, #1
   283cc:	4770      	bx	lr
   283ce:	bf00      	nop
   283d0:	20002710 	.word	0x20002710

000283d4 <_move_thread_to_end_of_prio_q>:
 * taken off or put on the ready queue.
 */
void _move_thread_to_end_of_prio_q(struct k_thread *thread)
{
#ifdef CONFIG_MULTITHREADING
	int q_index = _get_ready_q_q_index(thread->base.prio);
   283d4:	f990 200a 	ldrsb.w	r2, [r0, #10]
	return prio + _NUM_COOP_PRIO;
   283d8:	f102 0310 	add.w	r3, r2, #16
	sys_dlist_t *q = &_ready_q.q[q_index];
   283dc:	3214      	adds	r2, #20
   283de:	4911      	ldr	r1, [pc, #68]	; (28424 <_move_thread_to_end_of_prio_q+0x50>)
   283e0:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
	return list->tail == node;
   283e4:	6851      	ldr	r1, [r2, #4]

	if (sys_dlist_is_tail(q, &thread->base.k_q_node)) {
   283e6:	4288      	cmp	r0, r1
   283e8:	d01a      	beq.n	28420 <_move_thread_to_end_of_prio_q+0x4c>
{
   283ea:	b510      	push	{r4, lr}
	node->prev->next = node->next;
   283ec:	6841      	ldr	r1, [r0, #4]
   283ee:	6804      	ldr	r4, [r0, #0]
   283f0:	600c      	str	r4, [r1, #0]
	node->next->prev = node->prev;
   283f2:	6801      	ldr	r1, [r0, #0]
   283f4:	6844      	ldr	r4, [r0, #4]
   283f6:	604c      	str	r4, [r1, #4]
	node->next = list;
   283f8:	6002      	str	r2, [r0, #0]
	node->prev = list->tail;
   283fa:	4a0a      	ldr	r2, [pc, #40]	; (28424 <_move_thread_to_end_of_prio_q+0x50>)
   283fc:	3304      	adds	r3, #4
   283fe:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   28402:	6859      	ldr	r1, [r3, #4]
   28404:	6041      	str	r1, [r0, #4]
	list->tail->next = node;
   28406:	6859      	ldr	r1, [r3, #4]
   28408:	6008      	str	r0, [r1, #0]
	list->tail = node;
   2840a:	6058      	str	r0, [r3, #4]
	sys_dlist_remove(&thread->base.k_q_node);
	sys_dlist_append(q, &thread->base.k_q_node);

	struct k_thread **cache = &_ready_q.cache;

	*cache = *cache == thread ? _get_ready_q_head() : *cache;
   2840c:	6993      	ldr	r3, [r2, #24]
   2840e:	4298      	cmp	r0, r3
   28410:	d002      	beq.n	28418 <_move_thread_to_end_of_prio_q+0x44>
   28412:	4a04      	ldr	r2, [pc, #16]	; (28424 <_move_thread_to_end_of_prio_q+0x50>)
   28414:	6193      	str	r3, [r2, #24]
   28416:	bd10      	pop	{r4, pc}
   28418:	f7ff fe92 	bl	28140 <_get_ready_q_head>
   2841c:	4603      	mov	r3, r0
   2841e:	e7f8      	b.n	28412 <_move_thread_to_end_of_prio_q+0x3e>
   28420:	4770      	bx	lr
   28422:	bf00      	nop
   28424:	20002710 	.word	0x20002710

00028428 <_impl_k_current_get>:
#endif

k_tid_t _impl_k_current_get(void)
{
	return _current;
}
   28428:	4b01      	ldr	r3, [pc, #4]	; (28430 <_impl_k_current_get+0x8>)
   2842a:	6898      	ldr	r0, [r3, #8]
   2842c:	4770      	bx	lr
   2842e:	bf00      	nop
   28430:	20002710 	.word	0x20002710

00028434 <_is_thread_time_slicing>:
	 * Should not be the idle thread
	 * Priority should be higher than time slice priority ceiling
	 * There should be multiple threads active with same priority
	 */

	if (!(_time_slice_duration > 0) || (_is_idle_thread_ptr(thread))
   28434:	4b0f      	ldr	r3, [pc, #60]	; (28474 <_is_thread_time_slicing+0x40>)
   28436:	681b      	ldr	r3, [r3, #0]
   28438:	2b00      	cmp	r3, #0
   2843a:	dd14      	ble.n	28466 <_is_thread_time_slicing+0x32>
	return thread == _idle_thread;
   2843c:	4b0e      	ldr	r3, [pc, #56]	; (28478 <_is_thread_time_slicing+0x44>)
   2843e:	681b      	ldr	r3, [r3, #0]
   28440:	4298      	cmp	r0, r3
   28442:	d012      	beq.n	2846a <_is_thread_time_slicing+0x36>
	    || _is_prio_higher(thread->base.prio, _time_slice_prio_ceiling)) {
   28444:	f990 300a 	ldrsb.w	r3, [r0, #10]
   28448:	4a0c      	ldr	r2, [pc, #48]	; (2847c <_is_thread_time_slicing+0x48>)
   2844a:	6812      	ldr	r2, [r2, #0]
   2844c:	4293      	cmp	r3, r2
   2844e:	db0e      	blt.n	2846e <_is_thread_time_slicing+0x3a>
	return list->head != list->tail;
   28450:	4a0b      	ldr	r2, [pc, #44]	; (28480 <_is_thread_time_slicing+0x4c>)
   28452:	3314      	adds	r3, #20
   28454:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
   28458:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   2845c:	685b      	ldr	r3, [r3, #4]
   2845e:	1ac0      	subs	r0, r0, r3
   28460:	bf18      	it	ne
   28462:	2001      	movne	r0, #1
	}

	int q_index = _get_ready_q_q_index(thread->base.prio);
	sys_dlist_t *q = &_ready_q.q[q_index];

	return sys_dlist_has_multiple_nodes(q);
   28464:	4770      	bx	lr
		return 0;
   28466:	2000      	movs	r0, #0
   28468:	4770      	bx	lr
   2846a:	2000      	movs	r0, #0
   2846c:	4770      	bx	lr
   2846e:	2000      	movs	r0, #0
}
   28470:	4770      	bx	lr
   28472:	bf00      	nop
   28474:	20002830 	.word	0x20002830
   28478:	00031094 	.word	0x00031094
   2847c:	20002834 	.word	0x20002834
   28480:	20002710 	.word	0x20002710

00028484 <_update_time_slice_before_swap>:
		_set_time(remaining);
	}

#endif
	/* Restart time slice count at new thread switch */
	_time_slice_elapsed = 0;
   28484:	2200      	movs	r2, #0
   28486:	4b01      	ldr	r3, [pc, #4]	; (2848c <_update_time_slice_before_swap+0x8>)
   28488:	601a      	str	r2, [r3, #0]
   2848a:	4770      	bx	lr
   2848c:	20002afc 	.word	0x20002afc

00028490 <_reschedule_threads>:
{
   28490:	b510      	push	{r4, lr}
   28492:	4604      	mov	r4, r0
	return _is_preempt(_current) && __must_switch_threads();
   28494:	4b0a      	ldr	r3, [pc, #40]	; (284c0 <_reschedule_threads+0x30>)
   28496:	689b      	ldr	r3, [r3, #8]
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   28498:	895b      	ldrh	r3, [r3, #10]
	return _is_preempt(_current) && __must_switch_threads();
   2849a:	2b7f      	cmp	r3, #127	; 0x7f
   2849c:	d805      	bhi.n	284aa <_reschedule_threads+0x1a>
   2849e:	f7ff ff83 	bl	283a8 <__must_switch_threads>
   284a2:	4603      	mov	r3, r0
   284a4:	b110      	cbz	r0, 284ac <_reschedule_threads+0x1c>
   284a6:	2301      	movs	r3, #1
   284a8:	e000      	b.n	284ac <_reschedule_threads+0x1c>
   284aa:	2300      	movs	r3, #0
	if (_must_switch_threads()) {
   284ac:	b913      	cbnz	r3, 284b4 <_reschedule_threads+0x24>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   284ae:	f384 8811 	msr	BASEPRI, r4
   284b2:	bd10      	pop	{r4, pc}
	_update_time_slice_before_swap();
   284b4:	f7ff ffe6 	bl	28484 <_update_time_slice_before_swap>
	return __swap(key);
   284b8:	4620      	mov	r0, r4
   284ba:	f7fe fb29 	bl	26b10 <__swap>
   284be:	bd10      	pop	{r4, pc}
   284c0:	20002710 	.word	0x20002710

000284c4 <k_sched_unlock>:
{
   284c4:	b508      	push	{r3, lr}
	__asm__ volatile(
   284c6:	f04f 0320 	mov.w	r3, #32
   284ca:	f3ef 8011 	mrs	r0, BASEPRI
   284ce:	f383 8811 	msr	BASEPRI, r3
	++_current->base.sched_locked;
   284d2:	4b04      	ldr	r3, [pc, #16]	; (284e4 <k_sched_unlock+0x20>)
   284d4:	689a      	ldr	r2, [r3, #8]
   284d6:	7ad3      	ldrb	r3, [r2, #11]
   284d8:	3301      	adds	r3, #1
   284da:	72d3      	strb	r3, [r2, #11]
	_reschedule_threads(key);
   284dc:	f7ff ffd8 	bl	28490 <_reschedule_threads>
   284e0:	bd08      	pop	{r3, pc}
   284e2:	bf00      	nop
   284e4:	20002710 	.word	0x20002710

000284e8 <_impl_k_yield>:
{
   284e8:	b538      	push	{r3, r4, r5, lr}
   284ea:	f04f 0320 	mov.w	r3, #32
   284ee:	f3ef 8511 	mrs	r5, BASEPRI
   284f2:	f383 8811 	msr	BASEPRI, r3
	_move_thread_to_end_of_prio_q(_current);
   284f6:	4c08      	ldr	r4, [pc, #32]	; (28518 <_impl_k_yield+0x30>)
   284f8:	68a0      	ldr	r0, [r4, #8]
   284fa:	f7ff ff6b 	bl	283d4 <_move_thread_to_end_of_prio_q>
	if (_current == _get_next_ready_thread()) {
   284fe:	68a2      	ldr	r2, [r4, #8]
	return _ready_q.cache;
   28500:	69a3      	ldr	r3, [r4, #24]
   28502:	429a      	cmp	r2, r3
   28504:	d005      	beq.n	28512 <_impl_k_yield+0x2a>
	_update_time_slice_before_swap();
   28506:	f7ff ffbd 	bl	28484 <_update_time_slice_before_swap>
	return __swap(key);
   2850a:	4628      	mov	r0, r5
   2850c:	f7fe fb00 	bl	26b10 <__swap>
   28510:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   28512:	f385 8811 	msr	BASEPRI, r5
   28516:	bd38      	pop	{r3, r4, r5, pc}
   28518:	20002710 	.word	0x20002710

0002851c <_impl_k_sleep>:
{
   2851c:	b570      	push	{r4, r5, r6, lr}
   2851e:	b082      	sub	sp, #8
	if (duration == 0) {
   28520:	b308      	cbz	r0, 28566 <_impl_k_sleep+0x4a>
   28522:	4603      	mov	r3, r0
   28524:	3309      	adds	r3, #9
   28526:	4a4f      	ldr	r2, [pc, #316]	; (28664 <_impl_k_sleep+0x148>)
   28528:	fba2 2303 	umull	r2, r3, r2, r3
   2852c:	08db      	lsrs	r3, r3, #3
	ticks = _TICK_ALIGN + _ms_to_ticks(duration);
   2852e:	3301      	adds	r3, #1
   28530:	9301      	str	r3, [sp, #4]
	__asm__ volatile(
   28532:	f04f 0320 	mov.w	r3, #32
   28536:	f3ef 8511 	mrs	r5, BASEPRI
   2853a:	f383 8811 	msr	BASEPRI, r3
	_remove_thread_from_ready_q(_current);
   2853e:	4c4a      	ldr	r4, [pc, #296]	; (28668 <_impl_k_sleep+0x14c>)
   28540:	68a0      	ldr	r0, [r4, #8]
   28542:	f7ff fe2d 	bl	281a0 <_remove_thread_from_ready_q>
	_add_thread_timeout(_current, NULL, ticks);
   28546:	68a0      	ldr	r0, [r4, #8]
   28548:	9b01      	ldr	r3, [sp, #4]
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
   2854a:	f100 0410 	add.w	r4, r0, #16
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   2854e:	6123      	str	r3, [r4, #16]
	timeout->thread = thread;
   28550:	60a0      	str	r0, [r4, #8]
	timeout->wait_q = (sys_dlist_t *)wait_q;
   28552:	2200      	movs	r2, #0
   28554:	60e2      	str	r2, [r4, #12]
	if (!timeout_in_ticks) {
   28556:	b14b      	cbz	r3, 2856c <_impl_k_sleep+0x50>
	return list->head == list;
   28558:	4a43      	ldr	r2, [pc, #268]	; (28668 <_impl_k_sleep+0x14c>)
   2855a:	f852 3f0c 	ldr.w	r3, [r2, #12]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2855e:	4293      	cmp	r3, r2
   28560:	d154      	bne.n	2860c <_impl_k_sleep+0xf0>
   28562:	2300      	movs	r3, #0
   28564:	e052      	b.n	2860c <_impl_k_sleep+0xf0>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
   28566:	f7ff ffbf 	bl	284e8 <_impl_k_yield>
   2856a:	e079      	b.n	28660 <_impl_k_sleep+0x144>
   2856c:	f04f 0320 	mov.w	r3, #32
   28570:	f3ef 8611 	mrs	r6, BASEPRI
   28574:	f383 8811 	msr	BASEPRI, r3
	timeout->delta_ticks_from_prev = _INACTIVE;
   28578:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2857c:	6123      	str	r3, [r4, #16]
	if (thread) {
   2857e:	b320      	cbz	r0, 285ca <_impl_k_sleep+0xae>
	if (timeout_obj->wait_q) {
   28580:	68e3      	ldr	r3, [r4, #12]
   28582:	b15b      	cbz	r3, 2859c <_impl_k_sleep+0x80>
	node->prev->next = node->next;
   28584:	6843      	ldr	r3, [r0, #4]
   28586:	6802      	ldr	r2, [r0, #0]
   28588:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   2858a:	6803      	ldr	r3, [r0, #0]
   2858c:	6842      	ldr	r2, [r0, #4]
   2858e:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   28590:	7a43      	ldrb	r3, [r0, #9]
   28592:	f023 0302 	bic.w	r3, r3, #2
   28596:	7243      	strb	r3, [r0, #9]
		thread->base.timeout.wait_q = NULL;
   28598:	2300      	movs	r3, #0
   2859a:	61c3      	str	r3, [r0, #28]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   2859c:	7a43      	ldrb	r3, [r0, #9]
   2859e:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   285a2:	7243      	strb	r3, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   285a4:	f013 0f1b 	tst.w	r3, #27
   285a8:	d107      	bne.n	285ba <_impl_k_sleep+0x9e>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   285aa:	6a03      	ldr	r3, [r0, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   285ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   285b0:	d001      	beq.n	285b6 <_impl_k_sleep+0x9a>
   285b2:	2300      	movs	r3, #0
   285b4:	e002      	b.n	285bc <_impl_k_sleep+0xa0>
   285b6:	2301      	movs	r3, #1
   285b8:	e000      	b.n	285bc <_impl_k_sleep+0xa0>
   285ba:	2300      	movs	r3, #0
	if (_is_thread_ready(thread)) {
   285bc:	b913      	cbnz	r3, 285c4 <_impl_k_sleep+0xa8>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   285be:	f386 8811 	msr	BASEPRI, r6
   285c2:	e048      	b.n	28656 <_impl_k_sleep+0x13a>
		_add_thread_to_ready_q(thread);
   285c4:	f7ff fdcc 	bl	28160 <_add_thread_to_ready_q>
   285c8:	e7f9      	b.n	285be <_impl_k_sleep+0xa2>
   285ca:	f386 8811 	msr	BASEPRI, r6
		if (timeout->func) {
   285ce:	6963      	ldr	r3, [r4, #20]
   285d0:	2b00      	cmp	r3, #0
   285d2:	d040      	beq.n	28656 <_impl_k_sleep+0x13a>
			timeout->func(timeout);
   285d4:	4620      	mov	r0, r4
   285d6:	4798      	blx	r3
   285d8:	e03d      	b.n	28656 <_impl_k_sleep+0x13a>
			in_q->delta_ticks_from_prev -= *delta;
   285da:	1a8a      	subs	r2, r1, r2
   285dc:	611a      	str	r2, [r3, #16]
	if (!insert_point) {
   285de:	b133      	cbz	r3, 285ee <_impl_k_sleep+0xd2>
		node->prev = insert_point->prev;
   285e0:	685a      	ldr	r2, [r3, #4]
   285e2:	6062      	str	r2, [r4, #4]
		node->next = insert_point;
   285e4:	6103      	str	r3, [r0, #16]
		insert_point->prev->next = node;
   285e6:	685a      	ldr	r2, [r3, #4]
   285e8:	6014      	str	r4, [r2, #0]
		insert_point->prev = node;
   285ea:	605c      	str	r4, [r3, #4]
   285ec:	e033      	b.n	28656 <_impl_k_sleep+0x13a>
	node->next = list;
   285ee:	4b1e      	ldr	r3, [pc, #120]	; (28668 <_impl_k_sleep+0x14c>)
   285f0:	f103 020c 	add.w	r2, r3, #12
   285f4:	6102      	str	r2, [r0, #16]
	node->prev = list->tail;
   285f6:	691a      	ldr	r2, [r3, #16]
   285f8:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
   285fa:	691a      	ldr	r2, [r3, #16]
   285fc:	6014      	str	r4, [r2, #0]
	list->tail = node;
   285fe:	611c      	str	r4, [r3, #16]
   28600:	e029      	b.n	28656 <_impl_k_sleep+0x13a>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28602:	4619      	mov	r1, r3
   28604:	e011      	b.n	2862a <_impl_k_sleep+0x10e>
	return (node == list->tail) ? NULL : node->next;
   28606:	2100      	movs	r1, #0
   28608:	e00f      	b.n	2862a <_impl_k_sleep+0x10e>
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   2860a:	2300      	movs	r3, #0
   2860c:	b1d3      	cbz	r3, 28644 <_impl_k_sleep+0x128>
		if (*delta <= in_q->delta_ticks_from_prev) {
   2860e:	6922      	ldr	r2, [r4, #16]
   28610:	6919      	ldr	r1, [r3, #16]
   28612:	428a      	cmp	r2, r1
   28614:	dde1      	ble.n	285da <_impl_k_sleep+0xbe>
		*delta -= in_q->delta_ticks_from_prev;
   28616:	1a52      	subs	r2, r2, r1
   28618:	6122      	str	r2, [r4, #16]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   2861a:	461a      	mov	r2, r3
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2861c:	2b00      	cmp	r3, #0
   2861e:	d0f0      	beq.n	28602 <_impl_k_sleep+0xe6>
	return (node == list->tail) ? NULL : node->next;
   28620:	4911      	ldr	r1, [pc, #68]	; (28668 <_impl_k_sleep+0x14c>)
   28622:	6909      	ldr	r1, [r1, #16]
   28624:	428b      	cmp	r3, r1
   28626:	d0ee      	beq.n	28606 <_impl_k_sleep+0xea>
   28628:	6819      	ldr	r1, [r3, #0]
   2862a:	2900      	cmp	r1, #0
   2862c:	d0ed      	beq.n	2860a <_impl_k_sleep+0xee>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2862e:	b12a      	cbz	r2, 2863c <_impl_k_sleep+0x120>
	return (node == list->tail) ? NULL : node->next;
   28630:	490d      	ldr	r1, [pc, #52]	; (28668 <_impl_k_sleep+0x14c>)
   28632:	6909      	ldr	r1, [r1, #16]
   28634:	428a      	cmp	r2, r1
   28636:	d003      	beq.n	28640 <_impl_k_sleep+0x124>
   28638:	681b      	ldr	r3, [r3, #0]
   2863a:	e7e7      	b.n	2860c <_impl_k_sleep+0xf0>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2863c:	2300      	movs	r3, #0
   2863e:	e7e5      	b.n	2860c <_impl_k_sleep+0xf0>
	return (node == list->tail) ? NULL : node->next;
   28640:	2300      	movs	r3, #0
   28642:	e7e3      	b.n	2860c <_impl_k_sleep+0xf0>
	node->next = list;
   28644:	4b08      	ldr	r3, [pc, #32]	; (28668 <_impl_k_sleep+0x14c>)
   28646:	f103 020c 	add.w	r2, r3, #12
   2864a:	6102      	str	r2, [r0, #16]
	node->prev = list->tail;
   2864c:	691a      	ldr	r2, [r3, #16]
   2864e:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
   28650:	691a      	ldr	r2, [r3, #16]
   28652:	6014      	str	r4, [r2, #0]
	list->tail = node;
   28654:	611c      	str	r4, [r3, #16]
	_update_time_slice_before_swap();
   28656:	f7ff ff15 	bl	28484 <_update_time_slice_before_swap>
	return __swap(key);
   2865a:	4628      	mov	r0, r5
   2865c:	f7fe fa58 	bl	26b10 <__swap>
}
   28660:	b002      	add	sp, #8
   28662:	bd70      	pop	{r4, r5, r6, pc}
   28664:	cccccccd 	.word	0xcccccccd
   28668:	20002710 	.word	0x20002710

0002866c <do_sem_give>:
	sem->count += (sem->count != sem->limit);
}

/* returns 1 if _Swap() will need to be invoked, 0 otherwise */
static int do_sem_give(struct k_sem *sem)
{
   2866c:	b510      	push	{r4, lr}
	if (_handling_timeouts) {
   2866e:	4b43      	ldr	r3, [pc, #268]	; (2877c <do_sem_give+0x110>)
   28670:	681b      	ldr	r3, [r3, #0]
   28672:	2b00      	cmp	r3, #0
   28674:	d136      	bne.n	286e4 <do_sem_give+0x78>
	return list->head == list;
   28676:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   28678:	42a0      	cmp	r0, r4
   2867a:	d044      	beq.n	28706 <do_sem_give+0x9a>
	if (thread) {
   2867c:	b14c      	cbz	r4, 28692 <do_sem_give+0x26>
	node->prev->next = node->next;
   2867e:	6863      	ldr	r3, [r4, #4]
   28680:	6822      	ldr	r2, [r4, #0]
   28682:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   28684:	6823      	ldr	r3, [r4, #0]
   28686:	6862      	ldr	r2, [r4, #4]
   28688:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   2868a:	7a63      	ldrb	r3, [r4, #9]
   2868c:	f023 0302 	bic.w	r3, r3, #2
   28690:	7263      	strb	r3, [r4, #9]
	struct k_thread *thread = _unpend_first_thread(&sem->wait_q);

	if (!thread) {
   28692:	2c00      	cmp	r4, #0
   28694:	d039      	beq.n	2870a <do_sem_give+0x9e>
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   28696:	6a22      	ldr	r2, [r4, #32]
   28698:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   2869c:	d013      	beq.n	286c6 <do_sem_give+0x5a>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   2869e:	f104 0310 	add.w	r3, r4, #16
	return list->tail == node;
   286a2:	4937      	ldr	r1, [pc, #220]	; (28780 <do_sem_give+0x114>)
   286a4:	6909      	ldr	r1, [r1, #16]
   286a6:	428b      	cmp	r3, r1
   286a8:	d004      	beq.n	286b4 <do_sem_give+0x48>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   286aa:	b103      	cbz	r3, 286ae <do_sem_give+0x42>
	return (node == list->tail) ? NULL : node->next;
   286ac:	6923      	ldr	r3, [r4, #16]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   286ae:	6919      	ldr	r1, [r3, #16]
   286b0:	440a      	add	r2, r1
   286b2:	611a      	str	r2, [r3, #16]
	node->prev->next = node->next;
   286b4:	6963      	ldr	r3, [r4, #20]
   286b6:	6922      	ldr	r2, [r4, #16]
   286b8:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   286ba:	6923      	ldr	r3, [r4, #16]
   286bc:	6962      	ldr	r2, [r4, #20]
   286be:	605a      	str	r2, [r3, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   286c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   286c4:	6223      	str	r3, [r4, #32]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   286c6:	7a63      	ldrb	r3, [r4, #9]
   286c8:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   286cc:	7263      	strb	r3, [r4, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   286ce:	f013 0f1b 	tst.w	r3, #27
   286d2:	d128      	bne.n	28726 <do_sem_give+0xba>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   286d4:	6a23      	ldr	r3, [r4, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   286d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   286da:	d022      	beq.n	28722 <do_sem_give+0xb6>
   286dc:	2300      	movs	r3, #0
   286de:	e023      	b.n	28728 <do_sem_give+0xbc>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   286e0:	2400      	movs	r4, #0
   286e2:	e003      	b.n	286ec <do_sem_give+0x80>
   286e4:	4602      	mov	r2, r0
	return list->head == list;
   286e6:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   286e8:	42a0      	cmp	r0, r4
   286ea:	d0f9      	beq.n	286e0 <do_sem_give+0x74>
		SYS_DLIST_ITERATE_FROM_NODE(q, cur) {
   286ec:	2c00      	cmp	r4, #0
   286ee:	d0c5      	beq.n	2867c <do_sem_give+0x10>
	return thread->base.timeout.delta_ticks_from_prev == _EXPIRED;
   286f0:	6a23      	ldr	r3, [r4, #32]
			if (_is_thread_timeout_expired(thread)) {
   286f2:	f113 0f02 	cmn.w	r3, #2
   286f6:	d1c1      	bne.n	2867c <do_sem_give+0x10>
	return (node == list->tail) ? NULL : node->next;
   286f8:	6853      	ldr	r3, [r2, #4]
   286fa:	429c      	cmp	r4, r3
   286fc:	d001      	beq.n	28702 <do_sem_give+0x96>
   286fe:	6824      	ldr	r4, [r4, #0]
   28700:	e7f4      	b.n	286ec <do_sem_give+0x80>
   28702:	2400      	movs	r4, #0
   28704:	e7f2      	b.n	286ec <do_sem_give+0x80>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   28706:	2400      	movs	r4, #0
   28708:	e7b8      	b.n	2867c <do_sem_give+0x10>
	sem->count += (sem->count != sem->limit);
   2870a:	6883      	ldr	r3, [r0, #8]
   2870c:	68c2      	ldr	r2, [r0, #12]
   2870e:	4293      	cmp	r3, r2
   28710:	bf18      	it	ne
   28712:	3301      	addne	r3, #1
   28714:	6083      	str	r3, [r0, #8]
	return _handle_obj_poll_events(&sem->poll_events, state);
   28716:	2102      	movs	r1, #2
   28718:	3010      	adds	r0, #16
   2871a:	f7ff fbfd 	bl	27f18 <_handle_obj_poll_events>
   2871e:	4603      	mov	r3, r0
		increment_count_up_to_limit(sem);
		return handle_poll_events(sem);
   28720:	e01c      	b.n	2875c <do_sem_give+0xf0>
	return !(_is_thread_prevented_from_running(thread) ||
   28722:	2301      	movs	r3, #1
   28724:	e000      	b.n	28728 <do_sem_give+0xbc>
   28726:	2300      	movs	r3, #0
	if (_is_thread_ready(thread)) {
   28728:	b96b      	cbnz	r3, 28746 <do_sem_give+0xda>
   2872a:	2300      	movs	r3, #0
   2872c:	6663      	str	r3, [r4, #100]	; 0x64
   2872e:	f3ef 8305 	mrs	r3, IPSR
   28732:	2b0d      	cmp	r3, #13
   28734:	d80b      	bhi.n	2874e <do_sem_give+0xe2>
   28736:	b19b      	cbz	r3, 28760 <do_sem_give+0xf4>
   28738:	4b12      	ldr	r3, [pc, #72]	; (28784 <do_sem_give+0x118>)
   2873a:	685b      	ldr	r3, [r3, #4]
   2873c:	f413 6f00 	tst.w	r3, #2048	; 0x800
   28740:	d010      	beq.n	28764 <do_sem_give+0xf8>
   28742:	2300      	movs	r3, #0
   28744:	e004      	b.n	28750 <do_sem_give+0xe4>
		_add_thread_to_ready_q(thread);
   28746:	4620      	mov	r0, r4
   28748:	f7ff fd0a 	bl	28160 <_add_thread_to_ready_q>
   2874c:	e7ed      	b.n	2872a <do_sem_give+0xbe>
   2874e:	2301      	movs	r3, #1
	}
	(void)_abort_thread_timeout(thread);
	_ready_thread(thread);
	_set_thread_return_value(thread, 0);

	return !_is_in_isr() && _must_switch_threads();
   28750:	b98b      	cbnz	r3, 28776 <do_sem_give+0x10a>
	return _is_preempt(_current) && __must_switch_threads();
   28752:	4a0b      	ldr	r2, [pc, #44]	; (28780 <do_sem_give+0x114>)
   28754:	6892      	ldr	r2, [r2, #8]
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   28756:	8952      	ldrh	r2, [r2, #10]
	return _is_preempt(_current) && __must_switch_threads();
   28758:	2a7f      	cmp	r2, #127	; 0x7f
   2875a:	d905      	bls.n	28768 <do_sem_give+0xfc>
}
   2875c:	4618      	mov	r0, r3
   2875e:	bd10      	pop	{r4, pc}
   28760:	2300      	movs	r3, #0
   28762:	e7f5      	b.n	28750 <do_sem_give+0xe4>
   28764:	2301      	movs	r3, #1
   28766:	e7f3      	b.n	28750 <do_sem_give+0xe4>
   28768:	f7ff fe1e 	bl	283a8 <__must_switch_threads>
   2876c:	4603      	mov	r3, r0
   2876e:	2800      	cmp	r0, #0
   28770:	d0f4      	beq.n	2875c <do_sem_give+0xf0>
   28772:	2301      	movs	r3, #1
   28774:	e7f2      	b.n	2875c <do_sem_give+0xf0>
	return !_is_in_isr() && _must_switch_threads();
   28776:	2300      	movs	r3, #0
   28778:	e7f0      	b.n	2875c <do_sem_give+0xf0>
   2877a:	bf00      	nop
   2877c:	20002af8 	.word	0x20002af8
   28780:	20002710 	.word	0x20002710
   28784:	e000ed00 	.word	0xe000ed00

00028788 <_impl_k_sem_init>:
	sem->count = initial_count;
   28788:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
   2878a:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
   2878c:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
   2878e:	6040      	str	r0, [r0, #4]
	sys_dlist_init(&sem->poll_events);
   28790:	f100 0310 	add.w	r3, r0, #16
	list->head = (sys_dnode_t *)list;
   28794:	6103      	str	r3, [r0, #16]
	list->tail = (sys_dnode_t *)list;
   28796:	6143      	str	r3, [r0, #20]
   28798:	4770      	bx	lr

0002879a <_impl_k_sem_give>:
	_ready_thread(thread);
	_set_thread_return_value(thread, 0);
}

void _impl_k_sem_give(struct k_sem *sem)
{
   2879a:	b510      	push	{r4, lr}
	__asm__ volatile(
   2879c:	f04f 0320 	mov.w	r3, #32
   287a0:	f3ef 8411 	mrs	r4, BASEPRI
   287a4:	f383 8811 	msr	BASEPRI, r3
	unsigned int key;

	key = irq_lock();

	if (do_sem_give(sem)) {
   287a8:	f7ff ff60 	bl	2866c <do_sem_give>
   287ac:	b910      	cbnz	r0, 287b4 <_impl_k_sem_give+0x1a>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   287ae:	f384 8811 	msr	BASEPRI, r4
   287b2:	bd10      	pop	{r4, pc}
	_update_time_slice_before_swap();
   287b4:	f7ff fe66 	bl	28484 <_update_time_slice_before_swap>
	return __swap(key);
   287b8:	4620      	mov	r0, r4
   287ba:	f7fe f9a9 	bl	26b10 <__swap>
   287be:	bd10      	pop	{r4, pc}

000287c0 <_impl_k_sem_take>:
#ifdef CONFIG_USERSPACE
_SYSCALL_HANDLER1_SIMPLE_VOID(k_sem_give, K_OBJ_SEM, struct k_sem *);
#endif

int _impl_k_sem_take(struct k_sem *sem, s32_t timeout)
{
   287c0:	b510      	push	{r4, lr}
	__asm__ volatile(
   287c2:	f04f 0320 	mov.w	r3, #32
   287c6:	f3ef 8411 	mrs	r4, BASEPRI
   287ca:	f383 8811 	msr	BASEPRI, r3
	__ASSERT(!_is_in_isr() || timeout == K_NO_WAIT, "");

	unsigned int key = irq_lock();

	if (likely(sem->count > 0)) {
   287ce:	6883      	ldr	r3, [r0, #8]
   287d0:	b12b      	cbz	r3, 287de <_impl_k_sem_take+0x1e>
		sem->count--;
   287d2:	3b01      	subs	r3, #1
   287d4:	6083      	str	r3, [r0, #8]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   287d6:	f384 8811 	msr	BASEPRI, r4
		irq_unlock(key);
		return 0;
   287da:	2000      	movs	r0, #0
   287dc:	bd10      	pop	{r4, pc}
	}

	if (timeout == K_NO_WAIT) {
   287de:	b139      	cbz	r1, 287f0 <_impl_k_sem_take+0x30>
		irq_unlock(key);
		return -EBUSY;
	}

	_pend_current_thread(&sem->wait_q, timeout);
   287e0:	f7ff fdd2 	bl	28388 <_pend_current_thread>
	_update_time_slice_before_swap();
   287e4:	f7ff fe4e 	bl	28484 <_update_time_slice_before_swap>
	return __swap(key);
   287e8:	4620      	mov	r0, r4
   287ea:	f7fe f991 	bl	26b10 <__swap>

	return _Swap(key);
}
   287ee:	bd10      	pop	{r4, pc}
   287f0:	f384 8811 	msr	BASEPRI, r4
		return -EBUSY;
   287f4:	f06f 000f 	mvn.w	r0, #15
   287f8:	bd10      	pop	{r4, pc}
	...

000287fc <handle_time_slicing>:
 *   in this function and at thread level
 * - _time_slice_duration does not have to be protected, since it can only
 *   change at thread level
 */
static void handle_time_slicing(s32_t ticks)
{
   287fc:	b538      	push	{r3, r4, r5, lr}
   287fe:	4604      	mov	r4, r0
#ifdef CONFIG_TICKLESS_KERNEL
	next_ts = 0;
#endif
	if (!_is_thread_time_slicing(_current)) {
   28800:	4b0f      	ldr	r3, [pc, #60]	; (28840 <handle_time_slicing+0x44>)
   28802:	6898      	ldr	r0, [r3, #8]
   28804:	f7ff fe16 	bl	28434 <_is_thread_time_slicing>
   28808:	b150      	cbz	r0, 28820 <handle_time_slicing+0x24>
	return (u64_t)ticks * _ms_per_tick;
   2880a:	00a2      	lsls	r2, r4, #2
   2880c:	1912      	adds	r2, r2, r4
   2880e:	1892      	adds	r2, r2, r2
		return;
	}

	_time_slice_elapsed += __ticks_to_ms(ticks);
   28810:	490c      	ldr	r1, [pc, #48]	; (28844 <handle_time_slicing+0x48>)
   28812:	680b      	ldr	r3, [r1, #0]
   28814:	441a      	add	r2, r3
   28816:	600a      	str	r2, [r1, #0]
	if (_time_slice_elapsed >= _time_slice_duration) {
   28818:	4b0b      	ldr	r3, [pc, #44]	; (28848 <handle_time_slicing+0x4c>)
   2881a:	681b      	ldr	r3, [r3, #0]
   2881c:	429a      	cmp	r2, r3
   2881e:	da00      	bge.n	28822 <handle_time_slicing+0x26>
   28820:	bd38      	pop	{r3, r4, r5, pc}

		unsigned int key;

		_time_slice_elapsed = 0;
   28822:	2200      	movs	r2, #0
   28824:	600a      	str	r2, [r1, #0]
	__asm__ volatile(
   28826:	f04f 0320 	mov.w	r3, #32
   2882a:	f3ef 8411 	mrs	r4, BASEPRI
   2882e:	f383 8811 	msr	BASEPRI, r3

		key = irq_lock();
		_move_thread_to_end_of_prio_q(_current);
   28832:	4b03      	ldr	r3, [pc, #12]	; (28840 <handle_time_slicing+0x44>)
   28834:	6898      	ldr	r0, [r3, #8]
   28836:	f7ff fdcd 	bl	283d4 <_move_thread_to_end_of_prio_q>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2883a:	f384 8811 	msr	BASEPRI, r4
   2883e:	e7ef      	b.n	28820 <handle_time_slicing+0x24>
   28840:	20002710 	.word	0x20002710
   28844:	20002afc 	.word	0x20002afc
   28848:	20002830 	.word	0x20002830

0002884c <_tick_get_32>:
	return (u32_t)_sys_clock_tick_count;
   2884c:	4b01      	ldr	r3, [pc, #4]	; (28854 <_tick_get_32+0x8>)
   2884e:	e9d3 0100 	ldrd	r0, r1, [r3]
}
   28852:	4770      	bx	lr
   28854:	20002b00 	.word	0x20002b00

00028858 <_impl_k_uptime_get_32>:
{
   28858:	b538      	push	{r3, r4, r5, lr}
	return __ticks_to_ms(_tick_get_32());
   2885a:	f7ff fff7 	bl	2884c <_tick_get_32>
   2885e:	0082      	lsls	r2, r0, #2
   28860:	1810      	adds	r0, r2, r0
   28862:	1800      	adds	r0, r0, r0
}
   28864:	bd38      	pop	{r3, r4, r5, pc}
	...

00028868 <_tick_get>:
	__asm__ volatile(
   28868:	f04f 0220 	mov.w	r2, #32
   2886c:	f3ef 8311 	mrs	r3, BASEPRI
   28870:	f382 8811 	msr	BASEPRI, r2
	tmp_sys_clock_tick_count = _sys_clock_tick_count;
   28874:	4a02      	ldr	r2, [pc, #8]	; (28880 <_tick_get+0x18>)
   28876:	e9d2 0100 	ldrd	r0, r1, [r2]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2887a:	f383 8811 	msr	BASEPRI, r3
}
   2887e:	4770      	bx	lr
   28880:	20002b00 	.word	0x20002b00

00028884 <_impl_k_uptime_get>:
{
   28884:	b510      	push	{r4, lr}
	return __ticks_to_ms(_tick_get());
   28886:	f7ff ffef 	bl	28868 <_tick_get>
   2888a:	008c      	lsls	r4, r1, #2
   2888c:	0082      	lsls	r2, r0, #2
   2888e:	ea44 7390 	orr.w	r3, r4, r0, lsr #30
   28892:	1880      	adds	r0, r0, r2
   28894:	4159      	adcs	r1, r3
   28896:	1800      	adds	r0, r0, r0
   28898:	4149      	adcs	r1, r1
}
   2889a:	bd10      	pop	{r4, pc}

0002889c <_nano_sys_clock_tick_announce>:
 * timers that have expired and wake up the threads pending on them.
 *
 * @return N/A
 */
void _nano_sys_clock_tick_announce(s32_t ticks)
{
   2889c:	b570      	push	{r4, r5, r6, lr}
   2889e:	b082      	sub	sp, #8
   288a0:	4605      	mov	r5, r0
	__asm__ volatile(
   288a2:	f04f 0320 	mov.w	r3, #32
   288a6:	f3ef 8011 	mrs	r0, BASEPRI
   288aa:	f383 8811 	msr	BASEPRI, r3

	K_DEBUG("ticks: %d\n", ticks);

	/* 64-bit value, ensure atomic access with irq lock */
	key = irq_lock();
	_sys_clock_tick_count += ticks;
   288ae:	496a      	ldr	r1, [pc, #424]	; (28a58 <_nano_sys_clock_tick_announce+0x1bc>)
   288b0:	e9d1 2300 	ldrd	r2, r3, [r1]
   288b4:	1952      	adds	r2, r2, r5
   288b6:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
   288ba:	e9c1 2300 	strd	r2, r3, [r1]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   288be:	f380 8811 	msr	BASEPRI, r0
	list->head = (sys_dnode_t *)list;
   288c2:	f8cd d000 	str.w	sp, [sp]
	list->tail = (sys_dnode_t *)list;
   288c6:	f8cd d004 	str.w	sp, [sp, #4]
	__asm__ volatile(
   288ca:	f04f 0320 	mov.w	r3, #32
   288ce:	f3ef 8111 	mrs	r1, BASEPRI
   288d2:	f383 8811 	msr	BASEPRI, r3
   288d6:	4608      	mov	r0, r1
	return list->head == list;
   288d8:	4b60      	ldr	r3, [pc, #384]	; (28a5c <_nano_sys_clock_tick_announce+0x1c0>)
   288da:	f853 2f0c 	ldr.w	r2, [r3, #12]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   288de:	429a      	cmp	r2, r3
   288e0:	d02b      	beq.n	2893a <_nano_sys_clock_tick_announce+0x9e>
	if (!head) {
   288e2:	b362      	cbz	r2, 2893e <_nano_sys_clock_tick_announce+0xa2>
	head->delta_ticks_from_prev -= ticks;
   288e4:	6913      	ldr	r3, [r2, #16]
   288e6:	1b5b      	subs	r3, r3, r5
   288e8:	6113      	str	r3, [r2, #16]
	sys_dnode_t *next = &head->node;
   288ea:	4613      	mov	r3, r2
	_handling_timeouts = 1;
   288ec:	2101      	movs	r1, #1
   288ee:	4a5c      	ldr	r2, [pc, #368]	; (28a60 <_nano_sys_clock_tick_announce+0x1c4>)
   288f0:	6011      	str	r1, [r2, #0]
	while (timeout && timeout->delta_ticks_from_prev == 0) {
   288f2:	b33b      	cbz	r3, 28944 <_nano_sys_clock_tick_announce+0xa8>
   288f4:	691a      	ldr	r2, [r3, #16]
   288f6:	bb2a      	cbnz	r2, 28944 <_nano_sys_clock_tick_announce+0xa8>
	node->prev->next = node->next;
   288f8:	685a      	ldr	r2, [r3, #4]
   288fa:	6819      	ldr	r1, [r3, #0]
   288fc:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
   288fe:	681a      	ldr	r2, [r3, #0]
   28900:	6859      	ldr	r1, [r3, #4]
   28902:	6051      	str	r1, [r2, #4]
	node->next = list->head;
   28904:	aa02      	add	r2, sp, #8
   28906:	f852 1d08 	ldr.w	r1, [r2, #-8]!
   2890a:	6019      	str	r1, [r3, #0]
	node->prev = list;
   2890c:	605a      	str	r2, [r3, #4]
	list->head->prev = node;
   2890e:	9a00      	ldr	r2, [sp, #0]
   28910:	6053      	str	r3, [r2, #4]
	list->head = node;
   28912:	9300      	str	r3, [sp, #0]
		timeout->delta_ticks_from_prev = _EXPIRED;
   28914:	f06f 0201 	mvn.w	r2, #1
   28918:	611a      	str	r2, [r3, #16]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2891a:	f380 8811 	msr	BASEPRI, r0
	__asm__ volatile(
   2891e:	f04f 0220 	mov.w	r2, #32
   28922:	f3ef 8311 	mrs	r3, BASEPRI
   28926:	f382 8811 	msr	BASEPRI, r2
   2892a:	4618      	mov	r0, r3
	return list->head == list;
   2892c:	4a4b      	ldr	r2, [pc, #300]	; (28a5c <_nano_sys_clock_tick_announce+0x1c0>)
   2892e:	f852 3f0c 	ldr.w	r3, [r2, #12]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   28932:	4293      	cmp	r3, r2
   28934:	d1dd      	bne.n	288f2 <_nano_sys_clock_tick_announce+0x56>
   28936:	2300      	movs	r3, #0
   28938:	e7db      	b.n	288f2 <_nano_sys_clock_tick_announce+0x56>
   2893a:	2200      	movs	r2, #0
   2893c:	e7d1      	b.n	288e2 <_nano_sys_clock_tick_announce+0x46>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2893e:	f381 8811 	msr	BASEPRI, r1
   28942:	e084      	b.n	28a4e <_nano_sys_clock_tick_announce+0x1b2>
   28944:	f380 8811 	msr	BASEPRI, r0
	return list->head == list;
   28948:	aa02      	add	r2, sp, #8
   2894a:	f852 3d08 	ldr.w	r3, [r2, #-8]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2894e:	4293      	cmp	r3, r2
   28950:	d00d      	beq.n	2896e <_nano_sys_clock_tick_announce+0xd2>
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
   28952:	b193      	cbz	r3, 2897a <_nano_sys_clock_tick_announce+0xde>
   28954:	461a      	mov	r2, r3
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28956:	b163      	cbz	r3, 28972 <_nano_sys_clock_tick_announce+0xd6>
	return (node == list->tail) ? NULL : node->next;
   28958:	9901      	ldr	r1, [sp, #4]
   2895a:	428b      	cmp	r3, r1
   2895c:	d00b      	beq.n	28976 <_nano_sys_clock_tick_announce+0xda>
   2895e:	6819      	ldr	r1, [r3, #0]
   28960:	b169      	cbz	r1, 2897e <_nano_sys_clock_tick_announce+0xe2>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28962:	b172      	cbz	r2, 28982 <_nano_sys_clock_tick_announce+0xe6>
	return (node == list->tail) ? NULL : node->next;
   28964:	9901      	ldr	r1, [sp, #4]
   28966:	428a      	cmp	r2, r1
   28968:	d00d      	beq.n	28986 <_nano_sys_clock_tick_announce+0xea>
   2896a:	681c      	ldr	r4, [r3, #0]
   2896c:	e027      	b.n	289be <_nano_sys_clock_tick_announce+0x122>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2896e:	2300      	movs	r3, #0
   28970:	e7ef      	b.n	28952 <_nano_sys_clock_tick_announce+0xb6>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28972:	4619      	mov	r1, r3
   28974:	e7f4      	b.n	28960 <_nano_sys_clock_tick_announce+0xc4>
	return (node == list->tail) ? NULL : node->next;
   28976:	2100      	movs	r1, #0
   28978:	e7f2      	b.n	28960 <_nano_sys_clock_tick_announce+0xc4>
   2897a:	461c      	mov	r4, r3
   2897c:	e01f      	b.n	289be <_nano_sys_clock_tick_announce+0x122>
   2897e:	2400      	movs	r4, #0
   28980:	e01d      	b.n	289be <_nano_sys_clock_tick_announce+0x122>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28982:	2400      	movs	r4, #0
   28984:	e01b      	b.n	289be <_nano_sys_clock_tick_announce+0x122>
	return (node == list->tail) ? NULL : node->next;
   28986:	2400      	movs	r4, #0
   28988:	e019      	b.n	289be <_nano_sys_clock_tick_announce+0x122>
	return !(_is_thread_prevented_from_running(thread) ||
   2898a:	2301      	movs	r3, #1
   2898c:	e000      	b.n	28990 <_nano_sys_clock_tick_announce+0xf4>
   2898e:	2300      	movs	r3, #0
	if (_is_thread_ready(thread)) {
   28990:	2b00      	cmp	r3, #0
   28992:	d142      	bne.n	28a1a <_nano_sys_clock_tick_announce+0x17e>
   28994:	f386 8811 	msr	BASEPRI, r6
   28998:	2c00      	cmp	r4, #0
   2899a:	d04d      	beq.n	28a38 <_nano_sys_clock_tick_announce+0x19c>
   2899c:	4623      	mov	r3, r4
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2899e:	2c00      	cmp	r4, #0
   289a0:	d046      	beq.n	28a30 <_nano_sys_clock_tick_announce+0x194>
	return (node == list->tail) ? NULL : node->next;
   289a2:	9a01      	ldr	r2, [sp, #4]
   289a4:	4294      	cmp	r4, r2
   289a6:	d045      	beq.n	28a34 <_nano_sys_clock_tick_announce+0x198>
   289a8:	6822      	ldr	r2, [r4, #0]
   289aa:	2a00      	cmp	r2, #0
   289ac:	d046      	beq.n	28a3c <_nano_sys_clock_tick_announce+0x1a0>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   289ae:	2b00      	cmp	r3, #0
   289b0:	d046      	beq.n	28a40 <_nano_sys_clock_tick_announce+0x1a4>
	return (node == list->tail) ? NULL : node->next;
   289b2:	9a01      	ldr	r2, [sp, #4]
   289b4:	4293      	cmp	r3, r2
   289b6:	d045      	beq.n	28a44 <_nano_sys_clock_tick_announce+0x1a8>
   289b8:	6822      	ldr	r2, [r4, #0]
   289ba:	4623      	mov	r3, r4
   289bc:	4614      	mov	r4, r2
   289be:	2b00      	cmp	r3, #0
   289c0:	d042      	beq.n	28a48 <_nano_sys_clock_tick_announce+0x1ac>
	node->prev->next = node->next;
   289c2:	685a      	ldr	r2, [r3, #4]
   289c4:	6819      	ldr	r1, [r3, #0]
   289c6:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
   289c8:	681a      	ldr	r2, [r3, #0]
   289ca:	6859      	ldr	r1, [r3, #4]
   289cc:	6051      	str	r1, [r2, #4]
	struct k_thread *thread = timeout->thread;
   289ce:	6898      	ldr	r0, [r3, #8]
	__asm__ volatile(
   289d0:	f04f 0220 	mov.w	r2, #32
   289d4:	f3ef 8611 	mrs	r6, BASEPRI
   289d8:	f382 8811 	msr	BASEPRI, r2
	timeout->delta_ticks_from_prev = _INACTIVE;
   289dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   289e0:	611a      	str	r2, [r3, #16]
	if (thread) {
   289e2:	b1e8      	cbz	r0, 28a20 <_nano_sys_clock_tick_announce+0x184>
	if (timeout_obj->wait_q) {
   289e4:	68db      	ldr	r3, [r3, #12]
   289e6:	b15b      	cbz	r3, 28a00 <_nano_sys_clock_tick_announce+0x164>
	node->prev->next = node->next;
   289e8:	6843      	ldr	r3, [r0, #4]
   289ea:	6802      	ldr	r2, [r0, #0]
   289ec:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   289ee:	6803      	ldr	r3, [r0, #0]
   289f0:	6842      	ldr	r2, [r0, #4]
   289f2:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   289f4:	7a43      	ldrb	r3, [r0, #9]
   289f6:	f023 0302 	bic.w	r3, r3, #2
   289fa:	7243      	strb	r3, [r0, #9]
		thread->base.timeout.wait_q = NULL;
   289fc:	2300      	movs	r3, #0
   289fe:	61c3      	str	r3, [r0, #28]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   28a00:	7a43      	ldrb	r3, [r0, #9]
   28a02:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   28a06:	7243      	strb	r3, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   28a08:	f013 0f1b 	tst.w	r3, #27
   28a0c:	d1bf      	bne.n	2898e <_nano_sys_clock_tick_announce+0xf2>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   28a0e:	6a03      	ldr	r3, [r0, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   28a10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   28a14:	d0b9      	beq.n	2898a <_nano_sys_clock_tick_announce+0xee>
   28a16:	2300      	movs	r3, #0
   28a18:	e7ba      	b.n	28990 <_nano_sys_clock_tick_announce+0xf4>
		_add_thread_to_ready_q(thread);
   28a1a:	f7ff fba1 	bl	28160 <_add_thread_to_ready_q>
   28a1e:	e7b9      	b.n	28994 <_nano_sys_clock_tick_announce+0xf8>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   28a20:	f386 8811 	msr	BASEPRI, r6
		if (timeout->func) {
   28a24:	695a      	ldr	r2, [r3, #20]
   28a26:	2a00      	cmp	r2, #0
   28a28:	d0b6      	beq.n	28998 <_nano_sys_clock_tick_announce+0xfc>
			timeout->func(timeout);
   28a2a:	4618      	mov	r0, r3
   28a2c:	4790      	blx	r2
   28a2e:	e7b3      	b.n	28998 <_nano_sys_clock_tick_announce+0xfc>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28a30:	4622      	mov	r2, r4
   28a32:	e7ba      	b.n	289aa <_nano_sys_clock_tick_announce+0x10e>
	return (node == list->tail) ? NULL : node->next;
   28a34:	2200      	movs	r2, #0
   28a36:	e7b8      	b.n	289aa <_nano_sys_clock_tick_announce+0x10e>
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
   28a38:	4622      	mov	r2, r4
   28a3a:	e7be      	b.n	289ba <_nano_sys_clock_tick_announce+0x11e>
   28a3c:	2200      	movs	r2, #0
   28a3e:	e7bc      	b.n	289ba <_nano_sys_clock_tick_announce+0x11e>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28a40:	2200      	movs	r2, #0
   28a42:	e7ba      	b.n	289ba <_nano_sys_clock_tick_announce+0x11e>
	return (node == list->tail) ? NULL : node->next;
   28a44:	2200      	movs	r2, #0
   28a46:	e7b8      	b.n	289ba <_nano_sys_clock_tick_announce+0x11e>
	_handling_timeouts = 0;
   28a48:	2200      	movs	r2, #0
   28a4a:	4b05      	ldr	r3, [pc, #20]	; (28a60 <_nano_sys_clock_tick_announce+0x1c4>)
   28a4c:	601a      	str	r2, [r3, #0]
	irq_unlock(key);
#endif
	handle_timeouts(ticks);

	/* time slicing is basically handled like just yet another timeout */
	handle_time_slicing(ticks);
   28a4e:	4628      	mov	r0, r5
   28a50:	f7ff fed4 	bl	287fc <handle_time_slicing>
	if ((!remaining && next_to) || (next_to < remaining)) {
		/* Clears current program if next_to = 0 and remaining > 0 */
		_set_time(next_to);
	}
#endif
}
   28a54:	b002      	add	sp, #8
   28a56:	bd70      	pop	{r4, r5, r6, pc}
   28a58:	20002b00 	.word	0x20002b00
   28a5c:	20002710 	.word	0x20002710
   28a60:	20002af8 	.word	0x20002af8

00028a64 <k_sys_work_q_init>:
K_THREAD_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(struct device *dev)
{
   28a64:	b508      	push	{r3, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   28a66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   28a6a:	f44f 6280 	mov.w	r2, #1024	; 0x400
   28a6e:	4903      	ldr	r1, [pc, #12]	; (28a7c <k_sys_work_q_init+0x18>)
   28a70:	4803      	ldr	r0, [pc, #12]	; (28a80 <k_sys_work_q_init+0x1c>)
   28a72:	f000 fc49 	bl	29308 <k_work_q_start>
		       sys_work_q_stack,
		       K_THREAD_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);

	return 0;
}
   28a76:	2000      	movs	r0, #0
   28a78:	bd08      	pop	{r3, pc}
   28a7a:	bf00      	nop
   28a7c:	2000b3f8 	.word	0x2000b3f8
   28a80:	20002b08 	.word	0x20002b08

00028a84 <k_is_in_isr>:
   28a84:	f3ef 8305 	mrs	r3, IPSR
   28a88:	2b0d      	cmp	r3, #13
   28a8a:	d807      	bhi.n	28a9c <k_is_in_isr+0x18>
   28a8c:	b143      	cbz	r3, 28aa0 <k_is_in_isr+0x1c>
   28a8e:	4b06      	ldr	r3, [pc, #24]	; (28aa8 <k_is_in_isr+0x24>)
   28a90:	685b      	ldr	r3, [r3, #4]
   28a92:	f413 6f00 	tst.w	r3, #2048	; 0x800
   28a96:	d005      	beq.n	28aa4 <k_is_in_isr+0x20>
   28a98:	2000      	movs	r0, #0
   28a9a:	4770      	bx	lr
   28a9c:	2001      	movs	r0, #1
   28a9e:	4770      	bx	lr
   28aa0:	2000      	movs	r0, #0
   28aa2:	4770      	bx	lr
   28aa4:	2001      	movs	r0, #1


int k_is_in_isr(void)
{
	return _is_in_isr();
}
   28aa6:	4770      	bx	lr
   28aa8:	e000ed00 	.word	0xe000ed00

00028aac <_is_thread_essential>:
 *
 * Returns non-zero if current thread is essential, zero if it is not.
 */
int _is_thread_essential(void)
{
	return _current->base.user_options & K_ESSENTIAL;
   28aac:	4b02      	ldr	r3, [pc, #8]	; (28ab8 <_is_thread_essential+0xc>)
   28aae:	689b      	ldr	r3, [r3, #8]
   28ab0:	7a18      	ldrb	r0, [r3, #8]
}
   28ab2:	f000 0001 	and.w	r0, r0, #1
   28ab6:	4770      	bx	lr
   28ab8:	20002710 	.word	0x20002710

00028abc <_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void _thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   28abc:	b508      	push	{r3, lr}
   28abe:	4604      	mov	r4, r0
   28ac0:	4608      	mov	r0, r1
   28ac2:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   28ac4:	461a      	mov	r2, r3
   28ac6:	47a0      	blx	r4
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
   28ac8:	f7ff fcae 	bl	28428 <_impl_k_current_get>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread);
   28acc:	f7fe facc 	bl	27068 <_impl_k_thread_abort>

00028ad0 <_impl_k_thread_start>:
	CODE_UNREACHABLE;
}

#ifdef CONFIG_MULTITHREADING
void _impl_k_thread_start(struct k_thread *thread)
{
   28ad0:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   28ad2:	f04f 0320 	mov.w	r3, #32
   28ad6:	f3ef 8411 	mrs	r4, BASEPRI
   28ada:	f383 8811 	msr	BASEPRI, r3
	return !(thread->base.thread_state & _THREAD_PRESTART);
   28ade:	7a43      	ldrb	r3, [r0, #9]
	int key = irq_lock(); /* protect kernel queues */

	if (_has_thread_started(thread)) {
   28ae0:	f013 0f04 	tst.w	r3, #4
   28ae4:	d00b      	beq.n	28afe <_impl_k_thread_start+0x2e>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   28ae6:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   28aea:	7243      	strb	r3, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   28aec:	f013 0f1b 	tst.w	r3, #27
   28af0:	d10a      	bne.n	28b08 <_impl_k_thread_start+0x38>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   28af2:	6a03      	ldr	r3, [r0, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   28af4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   28af8:	d004      	beq.n	28b04 <_impl_k_thread_start+0x34>
   28afa:	2500      	movs	r5, #0
   28afc:	e005      	b.n	28b0a <_impl_k_thread_start+0x3a>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   28afe:	f384 8811 	msr	BASEPRI, r4
   28b02:	bd38      	pop	{r3, r4, r5, pc}
   28b04:	2501      	movs	r5, #1
   28b06:	e000      	b.n	28b0a <_impl_k_thread_start+0x3a>
   28b08:	2500      	movs	r5, #0
		return;
	}

	_mark_thread_as_started(thread);

	if (_is_thread_ready(thread)) {
   28b0a:	b915      	cbnz	r5, 28b12 <_impl_k_thread_start+0x42>
   28b0c:	f384 8811 	msr	BASEPRI, r4
   28b10:	bd38      	pop	{r3, r4, r5, pc}
		_add_thread_to_ready_q(thread);
   28b12:	f7ff fb25 	bl	28160 <_add_thread_to_ready_q>
	return _is_preempt(_current) && __must_switch_threads();
   28b16:	4b0a      	ldr	r3, [pc, #40]	; (28b40 <_impl_k_thread_start+0x70>)
   28b18:	689b      	ldr	r3, [r3, #8]
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   28b1a:	895b      	ldrh	r3, [r3, #10]
	return _is_preempt(_current) && __must_switch_threads();
   28b1c:	2b7f      	cmp	r3, #127	; 0x7f
   28b1e:	d908      	bls.n	28b32 <_impl_k_thread_start+0x62>
   28b20:	2300      	movs	r3, #0
		if (_must_switch_threads()) {
   28b22:	2b00      	cmp	r3, #0
   28b24:	d0f2      	beq.n	28b0c <_impl_k_thread_start+0x3c>
	_update_time_slice_before_swap();
   28b26:	f7ff fcad 	bl	28484 <_update_time_slice_before_swap>
	return __swap(key);
   28b2a:	4620      	mov	r0, r4
   28b2c:	f7fd fff0 	bl	26b10 <__swap>
   28b30:	bd38      	pop	{r3, r4, r5, pc}
   28b32:	f7ff fc39 	bl	283a8 <__must_switch_threads>
   28b36:	4603      	mov	r3, r0
   28b38:	2800      	cmp	r0, #0
   28b3a:	d0f2      	beq.n	28b22 <_impl_k_thread_start+0x52>
   28b3c:	462b      	mov	r3, r5
   28b3e:	e7f0      	b.n	28b22 <_impl_k_thread_start+0x52>
   28b40:	20002710 	.word	0x20002710

00028b44 <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, s32_t delay)
{
   28b44:	b570      	push	{r4, r5, r6, lr}
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (delay == 0) {
   28b46:	b1d1      	cbz	r1, 28b7e <schedule_new_thread+0x3a>
   28b48:	460b      	mov	r3, r1
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
   28b4a:	3309      	adds	r3, #9
   28b4c:	4a47      	ldr	r2, [pc, #284]	; (28c6c <schedule_new_thread+0x128>)
   28b4e:	fba2 2303 	umull	r2, r3, r2, r3
   28b52:	08db      	lsrs	r3, r3, #3
		k_thread_start(thread);
	} else {
		s32_t ticks = _TICK_ALIGN + _ms_to_ticks(delay);
   28b54:	3301      	adds	r3, #1
	__asm__ volatile(
   28b56:	f04f 0220 	mov.w	r2, #32
   28b5a:	f3ef 8511 	mrs	r5, BASEPRI
   28b5e:	f382 8811 	msr	BASEPRI, r2
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
   28b62:	f100 0410 	add.w	r4, r0, #16
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   28b66:	6123      	str	r3, [r4, #16]
	timeout->thread = thread;
   28b68:	60a0      	str	r0, [r4, #8]
	timeout->wait_q = (sys_dlist_t *)wait_q;
   28b6a:	2200      	movs	r2, #0
   28b6c:	60e2      	str	r2, [r4, #12]
	if (!timeout_in_ticks) {
   28b6e:	b14b      	cbz	r3, 28b84 <schedule_new_thread+0x40>
	return list->head == list;
   28b70:	4a3f      	ldr	r2, [pc, #252]	; (28c70 <schedule_new_thread+0x12c>)
   28b72:	f852 3f0c 	ldr.w	r3, [r2, #12]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   28b76:	4293      	cmp	r3, r2
   28b78:	d152      	bne.n	28c20 <schedule_new_thread+0xdc>
   28b7a:	2300      	movs	r3, #0
   28b7c:	e050      	b.n	28c20 <schedule_new_thread+0xdc>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_START, k_thread_start, k_tid_t, thread);
   28b7e:	f7ff ffa7 	bl	28ad0 <_impl_k_thread_start>
   28b82:	bd70      	pop	{r4, r5, r6, pc}
   28b84:	f04f 0320 	mov.w	r3, #32
   28b88:	f3ef 8611 	mrs	r6, BASEPRI
   28b8c:	f383 8811 	msr	BASEPRI, r3
	timeout->delta_ticks_from_prev = _INACTIVE;
   28b90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   28b94:	6123      	str	r3, [r4, #16]
	if (thread) {
   28b96:	b320      	cbz	r0, 28be2 <schedule_new_thread+0x9e>
	if (timeout_obj->wait_q) {
   28b98:	68e3      	ldr	r3, [r4, #12]
   28b9a:	b15b      	cbz	r3, 28bb4 <schedule_new_thread+0x70>
	node->prev->next = node->next;
   28b9c:	6843      	ldr	r3, [r0, #4]
   28b9e:	6802      	ldr	r2, [r0, #0]
   28ba0:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   28ba2:	6803      	ldr	r3, [r0, #0]
   28ba4:	6842      	ldr	r2, [r0, #4]
   28ba6:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   28ba8:	7a43      	ldrb	r3, [r0, #9]
   28baa:	f023 0302 	bic.w	r3, r3, #2
   28bae:	7243      	strb	r3, [r0, #9]
		thread->base.timeout.wait_q = NULL;
   28bb0:	2300      	movs	r3, #0
   28bb2:	61c3      	str	r3, [r0, #28]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   28bb4:	7a43      	ldrb	r3, [r0, #9]
   28bb6:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   28bba:	7243      	strb	r3, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   28bbc:	f013 0f1b 	tst.w	r3, #27
   28bc0:	d107      	bne.n	28bd2 <schedule_new_thread+0x8e>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   28bc2:	6a03      	ldr	r3, [r0, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   28bc4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   28bc8:	d001      	beq.n	28bce <schedule_new_thread+0x8a>
   28bca:	2300      	movs	r3, #0
   28bcc:	e002      	b.n	28bd4 <schedule_new_thread+0x90>
   28bce:	2301      	movs	r3, #1
   28bd0:	e000      	b.n	28bd4 <schedule_new_thread+0x90>
   28bd2:	2300      	movs	r3, #0
	if (_is_thread_ready(thread)) {
   28bd4:	b913      	cbnz	r3, 28bdc <schedule_new_thread+0x98>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   28bd6:	f386 8811 	msr	BASEPRI, r6
   28bda:	e044      	b.n	28c66 <schedule_new_thread+0x122>
		_add_thread_to_ready_q(thread);
   28bdc:	f7ff fac0 	bl	28160 <_add_thread_to_ready_q>
   28be0:	e7f9      	b.n	28bd6 <schedule_new_thread+0x92>
   28be2:	f386 8811 	msr	BASEPRI, r6
		if (timeout->func) {
   28be6:	6963      	ldr	r3, [r4, #20]
   28be8:	2b00      	cmp	r3, #0
   28bea:	d03c      	beq.n	28c66 <schedule_new_thread+0x122>
			timeout->func(timeout);
   28bec:	4620      	mov	r0, r4
   28bee:	4798      	blx	r3
   28bf0:	e039      	b.n	28c66 <schedule_new_thread+0x122>
			in_q->delta_ticks_from_prev -= *delta;
   28bf2:	1a8a      	subs	r2, r1, r2
   28bf4:	611a      	str	r2, [r3, #16]
	if (!insert_point) {
   28bf6:	b133      	cbz	r3, 28c06 <schedule_new_thread+0xc2>
		node->prev = insert_point->prev;
   28bf8:	685a      	ldr	r2, [r3, #4]
   28bfa:	6062      	str	r2, [r4, #4]
		node->next = insert_point;
   28bfc:	6103      	str	r3, [r0, #16]
		insert_point->prev->next = node;
   28bfe:	685a      	ldr	r2, [r3, #4]
   28c00:	6014      	str	r4, [r2, #0]
		insert_point->prev = node;
   28c02:	605c      	str	r4, [r3, #4]
   28c04:	e02f      	b.n	28c66 <schedule_new_thread+0x122>
	node->next = list;
   28c06:	4b1b      	ldr	r3, [pc, #108]	; (28c74 <schedule_new_thread+0x130>)
   28c08:	6103      	str	r3, [r0, #16]
	node->prev = list->tail;
   28c0a:	685a      	ldr	r2, [r3, #4]
   28c0c:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
   28c0e:	685a      	ldr	r2, [r3, #4]
   28c10:	6014      	str	r4, [r2, #0]
	list->tail = node;
   28c12:	605c      	str	r4, [r3, #4]
   28c14:	e027      	b.n	28c66 <schedule_new_thread+0x122>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28c16:	4619      	mov	r1, r3
   28c18:	e011      	b.n	28c3e <schedule_new_thread+0xfa>
	return (node == list->tail) ? NULL : node->next;
   28c1a:	2100      	movs	r1, #0
   28c1c:	e00f      	b.n	28c3e <schedule_new_thread+0xfa>
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   28c1e:	2300      	movs	r3, #0
   28c20:	b1d3      	cbz	r3, 28c58 <schedule_new_thread+0x114>
		if (*delta <= in_q->delta_ticks_from_prev) {
   28c22:	6922      	ldr	r2, [r4, #16]
   28c24:	6919      	ldr	r1, [r3, #16]
   28c26:	428a      	cmp	r2, r1
   28c28:	dde3      	ble.n	28bf2 <schedule_new_thread+0xae>
		*delta -= in_q->delta_ticks_from_prev;
   28c2a:	1a52      	subs	r2, r2, r1
   28c2c:	6122      	str	r2, [r4, #16]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   28c2e:	461a      	mov	r2, r3
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28c30:	2b00      	cmp	r3, #0
   28c32:	d0f0      	beq.n	28c16 <schedule_new_thread+0xd2>
	return (node == list->tail) ? NULL : node->next;
   28c34:	490e      	ldr	r1, [pc, #56]	; (28c70 <schedule_new_thread+0x12c>)
   28c36:	6909      	ldr	r1, [r1, #16]
   28c38:	428b      	cmp	r3, r1
   28c3a:	d0ee      	beq.n	28c1a <schedule_new_thread+0xd6>
   28c3c:	6819      	ldr	r1, [r3, #0]
   28c3e:	2900      	cmp	r1, #0
   28c40:	d0ed      	beq.n	28c1e <schedule_new_thread+0xda>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28c42:	b12a      	cbz	r2, 28c50 <schedule_new_thread+0x10c>
	return (node == list->tail) ? NULL : node->next;
   28c44:	490a      	ldr	r1, [pc, #40]	; (28c70 <schedule_new_thread+0x12c>)
   28c46:	6909      	ldr	r1, [r1, #16]
   28c48:	428a      	cmp	r2, r1
   28c4a:	d003      	beq.n	28c54 <schedule_new_thread+0x110>
   28c4c:	681b      	ldr	r3, [r3, #0]
   28c4e:	e7e7      	b.n	28c20 <schedule_new_thread+0xdc>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28c50:	2300      	movs	r3, #0
   28c52:	e7e5      	b.n	28c20 <schedule_new_thread+0xdc>
	return (node == list->tail) ? NULL : node->next;
   28c54:	2300      	movs	r3, #0
   28c56:	e7e3      	b.n	28c20 <schedule_new_thread+0xdc>
	node->next = list;
   28c58:	4b06      	ldr	r3, [pc, #24]	; (28c74 <schedule_new_thread+0x130>)
   28c5a:	6103      	str	r3, [r0, #16]
	node->prev = list->tail;
   28c5c:	685a      	ldr	r2, [r3, #4]
   28c5e:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
   28c60:	685a      	ldr	r2, [r3, #4]
   28c62:	6014      	str	r4, [r2, #0]
	list->tail = node;
   28c64:	605c      	str	r4, [r3, #4]
   28c66:	f385 8811 	msr	BASEPRI, r5
   28c6a:	bd70      	pop	{r4, r5, r6, pc}
   28c6c:	cccccccd 	.word	0xcccccccd
   28c70:	20002710 	.word	0x20002710
   28c74:	2000271c 	.word	0x2000271c

00028c78 <_setup_new_thread>:
void _setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options)
{
   28c78:	b510      	push	{r4, lr}
   28c7a:	b086      	sub	sp, #24
	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   28c7c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   28c7e:	9404      	str	r4, [sp, #16]
   28c80:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   28c82:	9403      	str	r4, [sp, #12]
   28c84:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   28c86:	9402      	str	r4, [sp, #8]
   28c88:	9c09      	ldr	r4, [sp, #36]	; 0x24
   28c8a:	9401      	str	r4, [sp, #4]
   28c8c:	9c08      	ldr	r4, [sp, #32]
   28c8e:	9400      	str	r4, [sp, #0]
   28c90:	f7fe f940 	bl	26f14 <_new_thread>

	if (options & K_INHERIT_PERMS) {
		_thread_perms_inherit(_current, new_thread);
	}
#endif
}
   28c94:	b006      	add	sp, #24
   28c96:	bd10      	pop	{r4, pc}

00028c98 <_impl_k_thread_create>:
k_tid_t _impl_k_thread_create(struct k_thread *new_thread,
			      k_thread_stack_t *stack,
			      size_t stack_size, k_thread_entry_t entry,
			      void *p1, void *p2, void *p3,
			      int prio, u32_t options, s32_t delay)
{
   28c98:	b570      	push	{r4, r5, r6, lr}
   28c9a:	b086      	sub	sp, #24
   28c9c:	4604      	mov	r4, r0
   28c9e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
	__ASSERT(!_is_in_isr(), "Threads may not be created in ISRs");
	_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   28ca0:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   28ca2:	9604      	str	r6, [sp, #16]
   28ca4:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   28ca6:	9603      	str	r6, [sp, #12]
   28ca8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   28caa:	9602      	str	r6, [sp, #8]
   28cac:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   28cae:	9601      	str	r6, [sp, #4]
   28cb0:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   28cb2:	9600      	str	r6, [sp, #0]
   28cb4:	f7ff ffe0 	bl	28c78 <_setup_new_thread>
			  prio, options);

	if (delay != K_FOREVER) {
   28cb8:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   28cbc:	d003      	beq.n	28cc6 <_impl_k_thread_create+0x2e>
		schedule_new_thread(new_thread, delay);
   28cbe:	4629      	mov	r1, r5
   28cc0:	4620      	mov	r0, r4
   28cc2:	f7ff ff3f 	bl	28b44 <schedule_new_thread>
	}
	return new_thread;
}
   28cc6:	4620      	mov	r0, r4
   28cc8:	b006      	add	sp, #24
   28cca:	bd70      	pop	{r4, r5, r6, pc}

00028ccc <_k_thread_single_abort>:
#ifdef CONFIG_USERSPACE
_SYSCALL_HANDLER1_SIMPLE_VOID(k_thread_resume, K_OBJ_THREAD, k_tid_t);
#endif

void _k_thread_single_abort(struct k_thread *thread)
{
   28ccc:	b510      	push	{r4, lr}
   28cce:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
   28cd0:	6d03      	ldr	r3, [r0, #80]	; 0x50
   28cd2:	b103      	cbz	r3, 28cd6 <_k_thread_single_abort+0xa>
		thread->fn_abort();
   28cd4:	4798      	blx	r3
	u8_t state = thread->base.thread_state;
   28cd6:	7a63      	ldrb	r3, [r4, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   28cd8:	f013 0f1f 	tst.w	r3, #31
   28cdc:	d107      	bne.n	28cee <_k_thread_single_abort+0x22>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   28cde:	6a22      	ldr	r2, [r4, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   28ce0:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   28ce4:	d001      	beq.n	28cea <_k_thread_single_abort+0x1e>
   28ce6:	2200      	movs	r2, #0
   28ce8:	e002      	b.n	28cf0 <_k_thread_single_abort+0x24>
   28cea:	2201      	movs	r2, #1
   28cec:	e000      	b.n	28cf0 <_k_thread_single_abort+0x24>
   28cee:	2200      	movs	r2, #0
	}

	if (_is_thread_ready(thread)) {
   28cf0:	bb4a      	cbnz	r2, 28d46 <_k_thread_single_abort+0x7a>
		_remove_thread_from_ready_q(thread);
	} else {
		if (_is_thread_pending(thread)) {
   28cf2:	f013 0f02 	tst.w	r3, #2
   28cf6:	d009      	beq.n	28d0c <_k_thread_single_abort+0x40>
	node->prev->next = node->next;
   28cf8:	6863      	ldr	r3, [r4, #4]
   28cfa:	6822      	ldr	r2, [r4, #0]
   28cfc:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   28cfe:	6823      	ldr	r3, [r4, #0]
   28d00:	6862      	ldr	r2, [r4, #4]
   28d02:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   28d04:	7a63      	ldrb	r3, [r4, #9]
   28d06:	f023 0302 	bic.w	r3, r3, #2
   28d0a:	7263      	strb	r3, [r4, #9]
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   28d0c:	6a21      	ldr	r1, [r4, #32]
			_unpend_thread(thread);
		}
		if (_is_thread_timeout_active(thread)) {
   28d0e:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   28d12:	d013      	beq.n	28d3c <_k_thread_single_abort+0x70>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   28d14:	f104 0310 	add.w	r3, r4, #16
	return list->tail == node;
   28d18:	4a0d      	ldr	r2, [pc, #52]	; (28d50 <_k_thread_single_abort+0x84>)
   28d1a:	6912      	ldr	r2, [r2, #16]
   28d1c:	4293      	cmp	r3, r2
   28d1e:	d004      	beq.n	28d2a <_k_thread_single_abort+0x5e>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28d20:	b103      	cbz	r3, 28d24 <_k_thread_single_abort+0x58>
	return (node == list->tail) ? NULL : node->next;
   28d22:	6923      	ldr	r3, [r4, #16]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   28d24:	691a      	ldr	r2, [r3, #16]
   28d26:	440a      	add	r2, r1
   28d28:	611a      	str	r2, [r3, #16]
	node->prev->next = node->next;
   28d2a:	6963      	ldr	r3, [r4, #20]
   28d2c:	6922      	ldr	r2, [r4, #16]
   28d2e:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   28d30:	6923      	ldr	r3, [r4, #16]
   28d32:	6962      	ldr	r2, [r4, #20]
   28d34:	605a      	str	r2, [r3, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   28d36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   28d3a:	6223      	str	r3, [r4, #32]
			_abort_thread_timeout(thread);
		}
	}

	thread->base.thread_state |= _THREAD_DEAD;
   28d3c:	7a63      	ldrb	r3, [r4, #9]
   28d3e:	f043 0308 	orr.w	r3, r3, #8
   28d42:	7263      	strb	r3, [r4, #9]
   28d44:	bd10      	pop	{r4, pc}
		_remove_thread_from_ready_q(thread);
   28d46:	4620      	mov	r0, r4
   28d48:	f7ff fa2a 	bl	281a0 <_remove_thread_from_ready_q>
   28d4c:	e7f6      	b.n	28d3c <_k_thread_single_abort+0x70>
   28d4e:	bf00      	nop
   28d50:	20002710 	.word	0x20002710

00028d54 <_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void _init_static_threads(void)
{
   28d54:	b530      	push	{r4, r5, lr}
   28d56:	b087      	sub	sp, #28
	unsigned int  key;

	_FOREACH_STATIC_THREAD(thread_data) {
   28d58:	4c1b      	ldr	r4, [pc, #108]	; (28dc8 <_init_static_threads+0x74>)
   28d5a:	e012      	b.n	28d82 <_init_static_threads+0x2e>
		_setup_new_thread(
   28d5c:	6a23      	ldr	r3, [r4, #32]
   28d5e:	9304      	str	r3, [sp, #16]
   28d60:	69e3      	ldr	r3, [r4, #28]
   28d62:	9303      	str	r3, [sp, #12]
   28d64:	69a3      	ldr	r3, [r4, #24]
   28d66:	9302      	str	r3, [sp, #8]
   28d68:	6963      	ldr	r3, [r4, #20]
   28d6a:	9301      	str	r3, [sp, #4]
   28d6c:	6923      	ldr	r3, [r4, #16]
   28d6e:	9300      	str	r3, [sp, #0]
   28d70:	68e3      	ldr	r3, [r4, #12]
   28d72:	68a2      	ldr	r2, [r4, #8]
   28d74:	6861      	ldr	r1, [r4, #4]
   28d76:	6820      	ldr	r0, [r4, #0]
   28d78:	f7ff ff7e 	bl	28c78 <_setup_new_thread>
			thread_data->init_p2,
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options);

		thread_data->init_thread->init_data = thread_data;
   28d7c:	6823      	ldr	r3, [r4, #0]
   28d7e:	64dc      	str	r4, [r3, #76]	; 0x4c
	_FOREACH_STATIC_THREAD(thread_data) {
   28d80:	3430      	adds	r4, #48	; 0x30
   28d82:	4b12      	ldr	r3, [pc, #72]	; (28dcc <_init_static_threads+0x78>)
   28d84:	429c      	cmp	r4, r3
   28d86:	d3e9      	bcc.n	28d5c <_init_static_threads+0x8>
	--_current->base.sched_locked;
   28d88:	4b11      	ldr	r3, [pc, #68]	; (28dd0 <_init_static_threads+0x7c>)
   28d8a:	689a      	ldr	r2, [r3, #8]
   28d8c:	7ad3      	ldrb	r3, [r2, #11]
   28d8e:	3b01      	subs	r3, #1
   28d90:	72d3      	strb	r3, [r2, #11]
	__asm__ volatile(
   28d92:	f04f 0320 	mov.w	r3, #32
   28d96:	f3ef 8511 	mrs	r5, BASEPRI
   28d9a:	f383 8811 	msr	BASEPRI, r3
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	key = irq_lock();
	_FOREACH_STATIC_THREAD(thread_data) {
   28d9e:	4c0a      	ldr	r4, [pc, #40]	; (28dc8 <_init_static_threads+0x74>)
   28da0:	e000      	b.n	28da4 <_init_static_threads+0x50>
   28da2:	3430      	adds	r4, #48	; 0x30
   28da4:	4b09      	ldr	r3, [pc, #36]	; (28dcc <_init_static_threads+0x78>)
   28da6:	429c      	cmp	r4, r3
   28da8:	d207      	bcs.n	28dba <_init_static_threads+0x66>
		if (thread_data->init_delay != K_FOREVER) {
   28daa:	6a61      	ldr	r1, [r4, #36]	; 0x24
   28dac:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   28db0:	d0f7      	beq.n	28da2 <_init_static_threads+0x4e>
			schedule_new_thread(thread_data->init_thread,
   28db2:	6820      	ldr	r0, [r4, #0]
   28db4:	f7ff fec6 	bl	28b44 <schedule_new_thread>
   28db8:	e7f3      	b.n	28da2 <_init_static_threads+0x4e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   28dba:	f385 8811 	msr	BASEPRI, r5
					    thread_data->init_delay);
		}
	}
	irq_unlock(key);
	k_sched_unlock();
   28dbe:	f7ff fb81 	bl	284c4 <k_sched_unlock>
}
   28dc2:	b007      	add	sp, #28
   28dc4:	bd30      	pop	{r4, r5, pc}
   28dc6:	bf00      	nop
   28dc8:	2000cf84 	.word	0x2000cf84
   28dcc:	2000cf84 	.word	0x2000cf84
   28dd0:	20002710 	.word	0x20002710

00028dd4 <_init_thread_base>:
void _init_thread_base(struct _thread_base *thread_base, int priority,
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
   28dd4:	7203      	strb	r3, [r0, #8]
	thread_base->thread_state = (u8_t)initial_state;
   28dd6:	7242      	strb	r2, [r0, #9]

	thread_base->prio = priority;
   28dd8:	7281      	strb	r1, [r0, #10]

	thread_base->sched_locked = 0;
   28dda:	2300      	movs	r3, #0
   28ddc:	72c3      	strb	r3, [r0, #11]
	t->delta_ticks_from_prev = _INACTIVE;
   28dde:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   28de2:	6202      	str	r2, [r0, #32]
	t->wait_q = NULL;
   28de4:	61c3      	str	r3, [r0, #28]
	t->thread = NULL;
   28de6:	6183      	str	r3, [r0, #24]
	t->func = func;
   28de8:	6243      	str	r3, [r0, #36]	; 0x24
   28dea:	4770      	bx	lr

00028dec <_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void _timer_expiration_handler(struct _timeout *t)
{
   28dec:	b570      	push	{r4, r5, r6, lr}
   28dee:	4604      	mov	r4, r0

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (timer->period > 0) {
   28df0:	6a83      	ldr	r3, [r0, #40]	; 0x28
   28df2:	2b00      	cmp	r3, #0
   28df4:	f340 8088 	ble.w	28f08 <_timer_expiration_handler+0x11c>
	__asm__ volatile(
   28df8:	f04f 0320 	mov.w	r3, #32
   28dfc:	f3ef 8511 	mrs	r5, BASEPRI
   28e00:	f383 8811 	msr	BASEPRI, r3
		key = irq_lock();
		_add_timeout(NULL, &timer->timeout, &timer->wait_q,
   28e04:	f100 0218 	add.w	r2, r0, #24
   28e08:	6a83      	ldr	r3, [r0, #40]	; 0x28
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   28e0a:	6103      	str	r3, [r0, #16]
	timeout->thread = thread;
   28e0c:	2100      	movs	r1, #0
   28e0e:	6081      	str	r1, [r0, #8]
	timeout->wait_q = (sys_dlist_t *)wait_q;
   28e10:	60c2      	str	r2, [r0, #12]
	if (!timeout_in_ticks) {
   28e12:	b133      	cbz	r3, 28e22 <_timer_expiration_handler+0x36>
	return list->head == list;
   28e14:	4a59      	ldr	r2, [pc, #356]	; (28f7c <_timer_expiration_handler+0x190>)
   28e16:	f852 3f0c 	ldr.w	r3, [r2, #12]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   28e1a:	4293      	cmp	r3, r2
   28e1c:	d14f      	bne.n	28ebe <_timer_expiration_handler+0xd2>
   28e1e:	2300      	movs	r3, #0
   28e20:	e04d      	b.n	28ebe <_timer_expiration_handler+0xd2>
	struct k_thread *thread = timeout->thread;
   28e22:	4608      	mov	r0, r1
   28e24:	f04f 0320 	mov.w	r3, #32
   28e28:	f3ef 8611 	mrs	r6, BASEPRI
   28e2c:	f383 8811 	msr	BASEPRI, r3
	timeout->delta_ticks_from_prev = _INACTIVE;
   28e30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   28e34:	6123      	str	r3, [r4, #16]
	if (thread) {
   28e36:	b319      	cbz	r1, 28e80 <_timer_expiration_handler+0x94>
	if (timeout_obj->wait_q) {
   28e38:	68e3      	ldr	r3, [r4, #12]
   28e3a:	b153      	cbz	r3, 28e52 <_timer_expiration_handler+0x66>
	node->prev->next = node->next;
   28e3c:	684b      	ldr	r3, [r1, #4]
   28e3e:	680a      	ldr	r2, [r1, #0]
   28e40:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   28e42:	680b      	ldr	r3, [r1, #0]
   28e44:	684a      	ldr	r2, [r1, #4]
   28e46:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   28e48:	7a4b      	ldrb	r3, [r1, #9]
   28e4a:	f023 0302 	bic.w	r3, r3, #2
   28e4e:	724b      	strb	r3, [r1, #9]
		thread->base.timeout.wait_q = NULL;
   28e50:	61c1      	str	r1, [r0, #28]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   28e52:	7a43      	ldrb	r3, [r0, #9]
   28e54:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   28e58:	7243      	strb	r3, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   28e5a:	f013 0f1b 	tst.w	r3, #27
   28e5e:	d107      	bne.n	28e70 <_timer_expiration_handler+0x84>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   28e60:	6a03      	ldr	r3, [r0, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   28e62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   28e66:	d001      	beq.n	28e6c <_timer_expiration_handler+0x80>
   28e68:	2300      	movs	r3, #0
   28e6a:	e002      	b.n	28e72 <_timer_expiration_handler+0x86>
   28e6c:	2301      	movs	r3, #1
   28e6e:	e000      	b.n	28e72 <_timer_expiration_handler+0x86>
   28e70:	2300      	movs	r3, #0
	if (_is_thread_ready(thread)) {
   28e72:	b913      	cbnz	r3, 28e7a <_timer_expiration_handler+0x8e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   28e74:	f386 8811 	msr	BASEPRI, r6
   28e78:	e044      	b.n	28f04 <_timer_expiration_handler+0x118>
		_add_thread_to_ready_q(thread);
   28e7a:	f7ff f971 	bl	28160 <_add_thread_to_ready_q>
   28e7e:	e7f9      	b.n	28e74 <_timer_expiration_handler+0x88>
   28e80:	f386 8811 	msr	BASEPRI, r6
		if (timeout->func) {
   28e84:	6963      	ldr	r3, [r4, #20]
   28e86:	2b00      	cmp	r3, #0
   28e88:	d03c      	beq.n	28f04 <_timer_expiration_handler+0x118>
			timeout->func(timeout);
   28e8a:	4620      	mov	r0, r4
   28e8c:	4798      	blx	r3
   28e8e:	e039      	b.n	28f04 <_timer_expiration_handler+0x118>
			in_q->delta_ticks_from_prev -= *delta;
   28e90:	1a8a      	subs	r2, r1, r2
   28e92:	611a      	str	r2, [r3, #16]
	if (!insert_point) {
   28e94:	b133      	cbz	r3, 28ea4 <_timer_expiration_handler+0xb8>
		node->prev = insert_point->prev;
   28e96:	685a      	ldr	r2, [r3, #4]
   28e98:	6062      	str	r2, [r4, #4]
		node->next = insert_point;
   28e9a:	6023      	str	r3, [r4, #0]
		insert_point->prev->next = node;
   28e9c:	685a      	ldr	r2, [r3, #4]
   28e9e:	6014      	str	r4, [r2, #0]
		insert_point->prev = node;
   28ea0:	605c      	str	r4, [r3, #4]
   28ea2:	e02f      	b.n	28f04 <_timer_expiration_handler+0x118>
	node->next = list;
   28ea4:	4b36      	ldr	r3, [pc, #216]	; (28f80 <_timer_expiration_handler+0x194>)
   28ea6:	6023      	str	r3, [r4, #0]
	node->prev = list->tail;
   28ea8:	685a      	ldr	r2, [r3, #4]
   28eaa:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
   28eac:	685a      	ldr	r2, [r3, #4]
   28eae:	6014      	str	r4, [r2, #0]
	list->tail = node;
   28eb0:	605c      	str	r4, [r3, #4]
   28eb2:	e027      	b.n	28f04 <_timer_expiration_handler+0x118>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28eb4:	4619      	mov	r1, r3
   28eb6:	e011      	b.n	28edc <_timer_expiration_handler+0xf0>
	return (node == list->tail) ? NULL : node->next;
   28eb8:	2100      	movs	r1, #0
   28eba:	e00f      	b.n	28edc <_timer_expiration_handler+0xf0>
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   28ebc:	2300      	movs	r3, #0
   28ebe:	b1d3      	cbz	r3, 28ef6 <_timer_expiration_handler+0x10a>
		if (*delta <= in_q->delta_ticks_from_prev) {
   28ec0:	6902      	ldr	r2, [r0, #16]
   28ec2:	6919      	ldr	r1, [r3, #16]
   28ec4:	428a      	cmp	r2, r1
   28ec6:	dde3      	ble.n	28e90 <_timer_expiration_handler+0xa4>
		*delta -= in_q->delta_ticks_from_prev;
   28ec8:	1a52      	subs	r2, r2, r1
   28eca:	6102      	str	r2, [r0, #16]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   28ecc:	461a      	mov	r2, r3
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28ece:	2b00      	cmp	r3, #0
   28ed0:	d0f0      	beq.n	28eb4 <_timer_expiration_handler+0xc8>
	return (node == list->tail) ? NULL : node->next;
   28ed2:	492a      	ldr	r1, [pc, #168]	; (28f7c <_timer_expiration_handler+0x190>)
   28ed4:	6909      	ldr	r1, [r1, #16]
   28ed6:	428b      	cmp	r3, r1
   28ed8:	d0ee      	beq.n	28eb8 <_timer_expiration_handler+0xcc>
   28eda:	6819      	ldr	r1, [r3, #0]
   28edc:	2900      	cmp	r1, #0
   28ede:	d0ed      	beq.n	28ebc <_timer_expiration_handler+0xd0>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28ee0:	b12a      	cbz	r2, 28eee <_timer_expiration_handler+0x102>
	return (node == list->tail) ? NULL : node->next;
   28ee2:	4926      	ldr	r1, [pc, #152]	; (28f7c <_timer_expiration_handler+0x190>)
   28ee4:	6909      	ldr	r1, [r1, #16]
   28ee6:	428a      	cmp	r2, r1
   28ee8:	d003      	beq.n	28ef2 <_timer_expiration_handler+0x106>
   28eea:	681b      	ldr	r3, [r3, #0]
   28eec:	e7e7      	b.n	28ebe <_timer_expiration_handler+0xd2>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28eee:	2300      	movs	r3, #0
   28ef0:	e7e5      	b.n	28ebe <_timer_expiration_handler+0xd2>
	return (node == list->tail) ? NULL : node->next;
   28ef2:	2300      	movs	r3, #0
   28ef4:	e7e3      	b.n	28ebe <_timer_expiration_handler+0xd2>
	node->next = list;
   28ef6:	4b22      	ldr	r3, [pc, #136]	; (28f80 <_timer_expiration_handler+0x194>)
   28ef8:	6023      	str	r3, [r4, #0]
	node->prev = list->tail;
   28efa:	685a      	ldr	r2, [r3, #4]
   28efc:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
   28efe:	685a      	ldr	r2, [r3, #4]
   28f00:	6014      	str	r4, [r2, #0]
	list->tail = node;
   28f02:	605c      	str	r4, [r3, #4]
   28f04:	f385 8811 	msr	BASEPRI, r5
				timer->period);
		irq_unlock(key);
	}

	/* update timer's status */
	timer->status += 1;
   28f08:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   28f0a:	3301      	adds	r3, #1
   28f0c:	62e3      	str	r3, [r4, #44]	; 0x2c

	/* invoke timer expiry function */
	if (timer->expiry_fn) {
   28f0e:	6a23      	ldr	r3, [r4, #32]
   28f10:	b10b      	cbz	r3, 28f16 <_timer_expiration_handler+0x12a>
		timer->expiry_fn(timer);
   28f12:	4620      	mov	r0, r4
   28f14:	4798      	blx	r3
	}

	thread = (struct k_thread *)sys_dlist_peek_head(&timer->wait_q);
   28f16:	f104 0318 	add.w	r3, r4, #24
	return list->head == list;
   28f1a:	69a4      	ldr	r4, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   28f1c:	42a3      	cmp	r3, r4
   28f1e:	d01d      	beq.n	28f5c <_timer_expiration_handler+0x170>

	if (!thread) {
   28f20:	b334      	cbz	r4, 28f70 <_timer_expiration_handler+0x184>
	node->prev->next = node->next;
   28f22:	6863      	ldr	r3, [r4, #4]
   28f24:	6822      	ldr	r2, [r4, #0]
   28f26:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   28f28:	6823      	ldr	r3, [r4, #0]
   28f2a:	6862      	ldr	r2, [r4, #4]
   28f2c:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   28f2e:	7a63      	ldrb	r3, [r4, #9]
   28f30:	f023 0302 	bic.w	r3, r3, #2
   28f34:	7263      	strb	r3, [r4, #9]
	__asm__ volatile(
   28f36:	f04f 0320 	mov.w	r3, #32
   28f3a:	f3ef 8511 	mrs	r5, BASEPRI
   28f3e:	f383 8811 	msr	BASEPRI, r3
	thread->base.thread_state &= ~_THREAD_PRESTART;
   28f42:	7a63      	ldrb	r3, [r4, #9]
   28f44:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   28f48:	7263      	strb	r3, [r4, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   28f4a:	f013 0f1b 	tst.w	r3, #27
   28f4e:	d109      	bne.n	28f64 <_timer_expiration_handler+0x178>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   28f50:	6a23      	ldr	r3, [r4, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   28f52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   28f56:	d003      	beq.n	28f60 <_timer_expiration_handler+0x174>
   28f58:	2300      	movs	r3, #0
   28f5a:	e004      	b.n	28f66 <_timer_expiration_handler+0x17a>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   28f5c:	2400      	movs	r4, #0
   28f5e:	e7df      	b.n	28f20 <_timer_expiration_handler+0x134>
   28f60:	2301      	movs	r3, #1
   28f62:	e000      	b.n	28f66 <_timer_expiration_handler+0x17a>
   28f64:	2300      	movs	r3, #0
	if (_is_thread_ready(thread)) {
   28f66:	b923      	cbnz	r3, 28f72 <_timer_expiration_handler+0x186>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   28f68:	f385 8811 	msr	BASEPRI, r5
   28f6c:	2300      	movs	r3, #0
   28f6e:	6663      	str	r3, [r4, #100]	; 0x64
   28f70:	bd70      	pop	{r4, r5, r6, pc}
		_add_thread_to_ready_q(thread);
   28f72:	4620      	mov	r0, r4
   28f74:	f7ff f8f4 	bl	28160 <_add_thread_to_ready_q>
   28f78:	e7f6      	b.n	28f68 <_timer_expiration_handler+0x17c>
   28f7a:	bf00      	nop
   28f7c:	20002710 	.word	0x20002710
   28f80:	2000271c 	.word	0x2000271c

00028f84 <k_timer_init>:

void k_timer_init(struct k_timer *timer,
		  void (*expiry_fn)(struct k_timer *),
		  void (*stop_fn)(struct k_timer *))
{
	timer->expiry_fn = expiry_fn;
   28f84:	6201      	str	r1, [r0, #32]
	timer->stop_fn = stop_fn;
   28f86:	6242      	str	r2, [r0, #36]	; 0x24
	timer->status = 0;
   28f88:	2300      	movs	r3, #0
   28f8a:	62c3      	str	r3, [r0, #44]	; 0x2c

	sys_dlist_init(&timer->wait_q);
   28f8c:	f100 0218 	add.w	r2, r0, #24
	list->head = (sys_dnode_t *)list;
   28f90:	6182      	str	r2, [r0, #24]
	list->tail = (sys_dnode_t *)list;
   28f92:	61c2      	str	r2, [r0, #28]
	t->delta_ticks_from_prev = _INACTIVE;
   28f94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   28f98:	6102      	str	r2, [r0, #16]
	t->wait_q = NULL;
   28f9a:	60c3      	str	r3, [r0, #12]
	t->thread = NULL;
   28f9c:	6083      	str	r3, [r0, #8]
	t->func = func;
   28f9e:	4a02      	ldr	r2, [pc, #8]	; (28fa8 <k_timer_init+0x24>)
   28fa0:	6142      	str	r2, [r0, #20]
	_init_timeout(&timer->timeout, _timer_expiration_handler);
	SYS_TRACING_OBJ_INIT(k_timer, timer);

	timer->user_data = NULL;
   28fa2:	6303      	str	r3, [r0, #48]	; 0x30
   28fa4:	4770      	bx	lr
   28fa6:	bf00      	nop
   28fa8:	00028ded 	.word	0x00028ded

00028fac <_impl_k_timer_start>:
	_k_object_init(timer);
}


void _impl_k_timer_start(struct k_timer *timer, s32_t duration, s32_t period)
{
   28fac:	b530      	push	{r4, r5, lr}
   28fae:	b083      	sub	sp, #12
   28fb0:	3209      	adds	r2, #9
   28fb2:	4b57      	ldr	r3, [pc, #348]	; (29110 <_impl_k_timer_start+0x164>)
   28fb4:	fba3 4202 	umull	r4, r2, r3, r2
   28fb8:	08d2      	lsrs	r2, r2, #3
	__ASSERT(duration >= 0 && period >= 0 &&
		 (duration != 0 || period != 0), "invalid parameters\n");

	volatile s32_t period_in_ticks, duration_in_ticks;

	period_in_ticks = _ms_to_ticks(period);
   28fba:	9201      	str	r2, [sp, #4]
   28fbc:	3109      	adds	r1, #9
   28fbe:	fba3 3101 	umull	r3, r1, r3, r1
   28fc2:	08c9      	lsrs	r1, r1, #3
	duration_in_ticks = _ms_to_ticks(duration);
   28fc4:	9100      	str	r1, [sp, #0]
	__asm__ volatile(
   28fc6:	f04f 0320 	mov.w	r3, #32
   28fca:	f3ef 8411 	mrs	r4, BASEPRI
   28fce:	f383 8811 	msr	BASEPRI, r3

	unsigned int key = irq_lock();

	if (timer->timeout.delta_ticks_from_prev != _INACTIVE) {
   28fd2:	6901      	ldr	r1, [r0, #16]
   28fd4:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   28fd8:	d012      	beq.n	29000 <_impl_k_timer_start+0x54>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   28fda:	4603      	mov	r3, r0
	return list->tail == node;
   28fdc:	4a4d      	ldr	r2, [pc, #308]	; (29114 <_impl_k_timer_start+0x168>)
   28fde:	6912      	ldr	r2, [r2, #16]
   28fe0:	4290      	cmp	r0, r2
   28fe2:	d004      	beq.n	28fee <_impl_k_timer_start+0x42>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28fe4:	b100      	cbz	r0, 28fe8 <_impl_k_timer_start+0x3c>
	return (node == list->tail) ? NULL : node->next;
   28fe6:	6803      	ldr	r3, [r0, #0]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   28fe8:	691a      	ldr	r2, [r3, #16]
   28fea:	440a      	add	r2, r1
   28fec:	611a      	str	r2, [r3, #16]
	node->prev->next = node->next;
   28fee:	6843      	ldr	r3, [r0, #4]
   28ff0:	6802      	ldr	r2, [r0, #0]
   28ff2:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   28ff4:	6803      	ldr	r3, [r0, #0]
   28ff6:	6842      	ldr	r2, [r0, #4]
   28ff8:	605a      	str	r2, [r3, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   28ffa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   28ffe:	6103      	str	r3, [r0, #16]
		_abort_timeout(&timer->timeout);
	}

	timer->period = period_in_ticks;
   29000:	9b01      	ldr	r3, [sp, #4]
   29002:	6283      	str	r3, [r0, #40]	; 0x28
	timer->status = 0;
   29004:	2200      	movs	r2, #0
   29006:	62c2      	str	r2, [r0, #44]	; 0x2c
	_add_timeout(NULL, &timer->timeout, &timer->wait_q, duration_in_ticks);
   29008:	4605      	mov	r5, r0
   2900a:	f100 0118 	add.w	r1, r0, #24
   2900e:	9b00      	ldr	r3, [sp, #0]
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   29010:	6103      	str	r3, [r0, #16]
	timeout->thread = thread;
   29012:	6082      	str	r2, [r0, #8]
	timeout->wait_q = (sys_dlist_t *)wait_q;
   29014:	60c1      	str	r1, [r0, #12]
	if (!timeout_in_ticks) {
   29016:	b133      	cbz	r3, 29026 <_impl_k_timer_start+0x7a>
	return list->head == list;
   29018:	4a3e      	ldr	r2, [pc, #248]	; (29114 <_impl_k_timer_start+0x168>)
   2901a:	f852 3f0c 	ldr.w	r3, [r2, #12]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2901e:	4293      	cmp	r3, r2
   29020:	d14f      	bne.n	290c2 <_impl_k_timer_start+0x116>
   29022:	2300      	movs	r3, #0
   29024:	e04d      	b.n	290c2 <_impl_k_timer_start+0x116>
	struct k_thread *thread = timeout->thread;
   29026:	4613      	mov	r3, r2
   29028:	f04f 0220 	mov.w	r2, #32
   2902c:	f3ef 8511 	mrs	r5, BASEPRI
   29030:	f382 8811 	msr	BASEPRI, r2
	timeout->delta_ticks_from_prev = _INACTIVE;
   29034:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   29038:	6102      	str	r2, [r0, #16]
	if (thread) {
   2903a:	b323      	cbz	r3, 29086 <_impl_k_timer_start+0xda>
	if (timeout_obj->wait_q) {
   2903c:	68c2      	ldr	r2, [r0, #12]
   2903e:	b152      	cbz	r2, 29056 <_impl_k_timer_start+0xaa>
	node->prev->next = node->next;
   29040:	685a      	ldr	r2, [r3, #4]
   29042:	6819      	ldr	r1, [r3, #0]
   29044:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
   29046:	681a      	ldr	r2, [r3, #0]
   29048:	6859      	ldr	r1, [r3, #4]
   2904a:	6051      	str	r1, [r2, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   2904c:	7a5a      	ldrb	r2, [r3, #9]
   2904e:	f022 0202 	bic.w	r2, r2, #2
   29052:	725a      	strb	r2, [r3, #9]
		thread->base.timeout.wait_q = NULL;
   29054:	61db      	str	r3, [r3, #28]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   29056:	7a5a      	ldrb	r2, [r3, #9]
   29058:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
   2905c:	725a      	strb	r2, [r3, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   2905e:	f012 0f1b 	tst.w	r2, #27
   29062:	d107      	bne.n	29074 <_impl_k_timer_start+0xc8>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   29064:	6a1a      	ldr	r2, [r3, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   29066:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   2906a:	d001      	beq.n	29070 <_impl_k_timer_start+0xc4>
   2906c:	2200      	movs	r2, #0
   2906e:	e002      	b.n	29076 <_impl_k_timer_start+0xca>
   29070:	2201      	movs	r2, #1
   29072:	e000      	b.n	29076 <_impl_k_timer_start+0xca>
   29074:	2200      	movs	r2, #0
	if (_is_thread_ready(thread)) {
   29076:	b912      	cbnz	r2, 2907e <_impl_k_timer_start+0xd2>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   29078:	f385 8811 	msr	BASEPRI, r5
   2907c:	e044      	b.n	29108 <_impl_k_timer_start+0x15c>
		_add_thread_to_ready_q(thread);
   2907e:	4618      	mov	r0, r3
   29080:	f7ff f86e 	bl	28160 <_add_thread_to_ready_q>
   29084:	e7f8      	b.n	29078 <_impl_k_timer_start+0xcc>
   29086:	f385 8811 	msr	BASEPRI, r5
		if (timeout->func) {
   2908a:	6943      	ldr	r3, [r0, #20]
   2908c:	2b00      	cmp	r3, #0
   2908e:	d03b      	beq.n	29108 <_impl_k_timer_start+0x15c>
			timeout->func(timeout);
   29090:	4798      	blx	r3
   29092:	e039      	b.n	29108 <_impl_k_timer_start+0x15c>
			in_q->delta_ticks_from_prev -= *delta;
   29094:	1a8a      	subs	r2, r1, r2
   29096:	611a      	str	r2, [r3, #16]
	if (!insert_point) {
   29098:	b133      	cbz	r3, 290a8 <_impl_k_timer_start+0xfc>
		node->prev = insert_point->prev;
   2909a:	685a      	ldr	r2, [r3, #4]
   2909c:	6042      	str	r2, [r0, #4]
		node->next = insert_point;
   2909e:	6003      	str	r3, [r0, #0]
		insert_point->prev->next = node;
   290a0:	685a      	ldr	r2, [r3, #4]
   290a2:	6010      	str	r0, [r2, #0]
		insert_point->prev = node;
   290a4:	6058      	str	r0, [r3, #4]
   290a6:	e02f      	b.n	29108 <_impl_k_timer_start+0x15c>
	node->next = list;
   290a8:	4b1b      	ldr	r3, [pc, #108]	; (29118 <_impl_k_timer_start+0x16c>)
   290aa:	6003      	str	r3, [r0, #0]
	node->prev = list->tail;
   290ac:	685a      	ldr	r2, [r3, #4]
   290ae:	6042      	str	r2, [r0, #4]
	list->tail->next = node;
   290b0:	685a      	ldr	r2, [r3, #4]
   290b2:	6010      	str	r0, [r2, #0]
	list->tail = node;
   290b4:	6058      	str	r0, [r3, #4]
   290b6:	e027      	b.n	29108 <_impl_k_timer_start+0x15c>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   290b8:	4619      	mov	r1, r3
   290ba:	e011      	b.n	290e0 <_impl_k_timer_start+0x134>
	return (node == list->tail) ? NULL : node->next;
   290bc:	2100      	movs	r1, #0
   290be:	e00f      	b.n	290e0 <_impl_k_timer_start+0x134>
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   290c0:	2300      	movs	r3, #0
   290c2:	b1d3      	cbz	r3, 290fa <_impl_k_timer_start+0x14e>
		if (*delta <= in_q->delta_ticks_from_prev) {
   290c4:	692a      	ldr	r2, [r5, #16]
   290c6:	6919      	ldr	r1, [r3, #16]
   290c8:	428a      	cmp	r2, r1
   290ca:	dde3      	ble.n	29094 <_impl_k_timer_start+0xe8>
		*delta -= in_q->delta_ticks_from_prev;
   290cc:	1a52      	subs	r2, r2, r1
   290ce:	612a      	str	r2, [r5, #16]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   290d0:	461a      	mov	r2, r3
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   290d2:	2b00      	cmp	r3, #0
   290d4:	d0f0      	beq.n	290b8 <_impl_k_timer_start+0x10c>
	return (node == list->tail) ? NULL : node->next;
   290d6:	490f      	ldr	r1, [pc, #60]	; (29114 <_impl_k_timer_start+0x168>)
   290d8:	6909      	ldr	r1, [r1, #16]
   290da:	428b      	cmp	r3, r1
   290dc:	d0ee      	beq.n	290bc <_impl_k_timer_start+0x110>
   290de:	6819      	ldr	r1, [r3, #0]
   290e0:	2900      	cmp	r1, #0
   290e2:	d0ed      	beq.n	290c0 <_impl_k_timer_start+0x114>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   290e4:	b12a      	cbz	r2, 290f2 <_impl_k_timer_start+0x146>
	return (node == list->tail) ? NULL : node->next;
   290e6:	490b      	ldr	r1, [pc, #44]	; (29114 <_impl_k_timer_start+0x168>)
   290e8:	6909      	ldr	r1, [r1, #16]
   290ea:	428a      	cmp	r2, r1
   290ec:	d003      	beq.n	290f6 <_impl_k_timer_start+0x14a>
   290ee:	681b      	ldr	r3, [r3, #0]
   290f0:	e7e7      	b.n	290c2 <_impl_k_timer_start+0x116>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   290f2:	2300      	movs	r3, #0
   290f4:	e7e5      	b.n	290c2 <_impl_k_timer_start+0x116>
	return (node == list->tail) ? NULL : node->next;
   290f6:	2300      	movs	r3, #0
   290f8:	e7e3      	b.n	290c2 <_impl_k_timer_start+0x116>
	node->next = list;
   290fa:	4b07      	ldr	r3, [pc, #28]	; (29118 <_impl_k_timer_start+0x16c>)
   290fc:	6003      	str	r3, [r0, #0]
	node->prev = list->tail;
   290fe:	685a      	ldr	r2, [r3, #4]
   29100:	6042      	str	r2, [r0, #4]
	list->tail->next = node;
   29102:	685a      	ldr	r2, [r3, #4]
   29104:	6010      	str	r0, [r2, #0]
	list->tail = node;
   29106:	6058      	str	r0, [r3, #4]
   29108:	f384 8811 	msr	BASEPRI, r4
	irq_unlock(key);
}
   2910c:	b003      	add	sp, #12
   2910e:	bd30      	pop	{r4, r5, pc}
   29110:	cccccccd 	.word	0xcccccccd
   29114:	20002710 	.word	0x20002710
   29118:	2000271c 	.word	0x2000271c

0002911c <_impl_k_timer_stop>:
	return 0;
}
#endif

void _impl_k_timer_stop(struct k_timer *timer)
{
   2911c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   2911e:	f04f 0320 	mov.w	r3, #32
   29122:	f3ef 8411 	mrs	r4, BASEPRI
   29126:	f383 8811 	msr	BASEPRI, r3
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   2912a:	6903      	ldr	r3, [r0, #16]
   2912c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   29130:	d042      	beq.n	291b8 <_impl_k_timer_stop+0x9c>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   29132:	4602      	mov	r2, r0
	return list->tail == node;
   29134:	493b      	ldr	r1, [pc, #236]	; (29224 <_impl_k_timer_stop+0x108>)
   29136:	6909      	ldr	r1, [r1, #16]
   29138:	4288      	cmp	r0, r1
   2913a:	d004      	beq.n	29146 <_impl_k_timer_stop+0x2a>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2913c:	b100      	cbz	r0, 29140 <_impl_k_timer_stop+0x24>
	return (node == list->tail) ? NULL : node->next;
   2913e:	6802      	ldr	r2, [r0, #0]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   29140:	6911      	ldr	r1, [r2, #16]
   29142:	440b      	add	r3, r1
   29144:	6113      	str	r3, [r2, #16]
	node->prev->next = node->next;
   29146:	6843      	ldr	r3, [r0, #4]
   29148:	6802      	ldr	r2, [r0, #0]
   2914a:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   2914c:	6803      	ldr	r3, [r0, #0]
   2914e:	6842      	ldr	r2, [r0, #4]
   29150:	605a      	str	r2, [r3, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   29152:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   29156:	6103      	str	r3, [r0, #16]
	return 0;
   29158:	2300      	movs	r3, #0
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2915a:	f384 8811 	msr	BASEPRI, r4
	int key = irq_lock();
	int inactive = (_abort_timeout(&timer->timeout) == _INACTIVE);

	irq_unlock(key);

	if (inactive) {
   2915e:	2b00      	cmp	r3, #0
   29160:	d15f      	bne.n	29222 <_impl_k_timer_stop+0x106>
   29162:	4604      	mov	r4, r0
		return;
	}

	if (timer->stop_fn) {
   29164:	6a43      	ldr	r3, [r0, #36]	; 0x24
   29166:	b103      	cbz	r3, 2916a <_impl_k_timer_stop+0x4e>
		timer->stop_fn(timer);
   29168:	4798      	blx	r3
	__asm__ volatile(
   2916a:	f04f 0320 	mov.w	r3, #32
   2916e:	f3ef 8511 	mrs	r5, BASEPRI
   29172:	f383 8811 	msr	BASEPRI, r3
	}

	key = irq_lock();
	struct k_thread *pending_thread = _unpend_first_thread(&timer->wait_q);
   29176:	f104 0218 	add.w	r2, r4, #24
	if (_handling_timeouts) {
   2917a:	4b2b      	ldr	r3, [pc, #172]	; (29228 <_impl_k_timer_stop+0x10c>)
   2917c:	681b      	ldr	r3, [r3, #0]
   2917e:	b9f3      	cbnz	r3, 291be <_impl_k_timer_stop+0xa2>
	return list->head == list;
   29180:	69a0      	ldr	r0, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   29182:	4282      	cmp	r2, r0
   29184:	d02c      	beq.n	291e0 <_impl_k_timer_stop+0xc4>
	if (thread) {
   29186:	b148      	cbz	r0, 2919c <_impl_k_timer_stop+0x80>
	node->prev->next = node->next;
   29188:	6843      	ldr	r3, [r0, #4]
   2918a:	6802      	ldr	r2, [r0, #0]
   2918c:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   2918e:	6803      	ldr	r3, [r0, #0]
   29190:	6842      	ldr	r2, [r0, #4]
   29192:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   29194:	7a43      	ldrb	r3, [r0, #9]
   29196:	f023 0302 	bic.w	r3, r3, #2
   2919a:	7243      	strb	r3, [r0, #9]

	if (pending_thread) {
   2919c:	b330      	cbz	r0, 291ec <_impl_k_timer_stop+0xd0>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   2919e:	7a43      	ldrb	r3, [r0, #9]
   291a0:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   291a4:	7243      	strb	r3, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   291a6:	f013 0f1b 	tst.w	r3, #27
   291aa:	d11d      	bne.n	291e8 <_impl_k_timer_stop+0xcc>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   291ac:	6a03      	ldr	r3, [r0, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   291ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   291b2:	d017      	beq.n	291e4 <_impl_k_timer_stop+0xc8>
   291b4:	2300      	movs	r3, #0
   291b6:	e018      	b.n	291ea <_impl_k_timer_stop+0xce>
		return _INACTIVE;
   291b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   291bc:	e7cd      	b.n	2915a <_impl_k_timer_stop+0x3e>
	return list->head == list;
   291be:	69a0      	ldr	r0, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   291c0:	4282      	cmp	r2, r0
   291c2:	d102      	bne.n	291ca <_impl_k_timer_stop+0xae>
   291c4:	2000      	movs	r0, #0
   291c6:	e000      	b.n	291ca <_impl_k_timer_stop+0xae>
	return (node == list->tail) ? NULL : node->next;
   291c8:	6800      	ldr	r0, [r0, #0]
		SYS_DLIST_ITERATE_FROM_NODE(q, cur) {
   291ca:	2800      	cmp	r0, #0
   291cc:	d0db      	beq.n	29186 <_impl_k_timer_stop+0x6a>
	return thread->base.timeout.delta_ticks_from_prev == _EXPIRED;
   291ce:	6a03      	ldr	r3, [r0, #32]
			if (_is_thread_timeout_expired(thread)) {
   291d0:	f113 0f02 	cmn.w	r3, #2
   291d4:	d1d7      	bne.n	29186 <_impl_k_timer_stop+0x6a>
   291d6:	6853      	ldr	r3, [r2, #4]
   291d8:	4298      	cmp	r0, r3
   291da:	d1f5      	bne.n	291c8 <_impl_k_timer_stop+0xac>
   291dc:	2000      	movs	r0, #0
   291de:	e7f4      	b.n	291ca <_impl_k_timer_stop+0xae>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   291e0:	2000      	movs	r0, #0
   291e2:	e7d0      	b.n	29186 <_impl_k_timer_stop+0x6a>
	return !(_is_thread_prevented_from_running(thread) ||
   291e4:	2301      	movs	r3, #1
   291e6:	e000      	b.n	291ea <_impl_k_timer_stop+0xce>
   291e8:	2300      	movs	r3, #0
	if (_is_thread_ready(thread)) {
   291ea:	b95b      	cbnz	r3, 29204 <_impl_k_timer_stop+0xe8>
   291ec:	f3ef 8305 	mrs	r3, IPSR
   291f0:	2b0d      	cmp	r3, #13
   291f2:	d80a      	bhi.n	2920a <_impl_k_timer_stop+0xee>
   291f4:	b173      	cbz	r3, 29214 <_impl_k_timer_stop+0xf8>
   291f6:	4b0d      	ldr	r3, [pc, #52]	; (2922c <_impl_k_timer_stop+0x110>)
   291f8:	685b      	ldr	r3, [r3, #4]
   291fa:	f413 6f00 	tst.w	r3, #2048	; 0x800
   291fe:	d00b      	beq.n	29218 <_impl_k_timer_stop+0xfc>
   29200:	2300      	movs	r3, #0
   29202:	e003      	b.n	2920c <_impl_k_timer_stop+0xf0>
		_add_thread_to_ready_q(thread);
   29204:	f7fe ffac 	bl	28160 <_add_thread_to_ready_q>
   29208:	e7f0      	b.n	291ec <_impl_k_timer_stop+0xd0>
   2920a:	2301      	movs	r3, #1
		_ready_thread(pending_thread);
	}

	if (_is_in_isr()) {
   2920c:	b133      	cbz	r3, 2921c <_impl_k_timer_stop+0x100>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2920e:	f385 8811 	msr	BASEPRI, r5
   29212:	bd38      	pop	{r3, r4, r5, pc}
   29214:	2300      	movs	r3, #0
   29216:	e7f9      	b.n	2920c <_impl_k_timer_stop+0xf0>
   29218:	2301      	movs	r3, #1
   2921a:	e7f7      	b.n	2920c <_impl_k_timer_stop+0xf0>
		irq_unlock(key);
	} else {
		_reschedule_threads(key);
   2921c:	4628      	mov	r0, r5
   2921e:	f7ff f937 	bl	28490 <_reschedule_threads>
   29222:	bd38      	pop	{r3, r4, r5, pc}
   29224:	20002710 	.word	0x20002710
   29228:	20002af8 	.word	0x20002af8
   2922c:	e000ed00 	.word	0xe000ed00

00029230 <_timeout_remaining_get>:
#ifdef CONFIG_USERSPACE
_SYSCALL_HANDLER1_SIMPLE(k_timer_status_sync, K_OBJ_TIMER, struct k_timer *);
#endif

s32_t _timeout_remaining_get(struct _timeout *timeout)
{
   29230:	b430      	push	{r4, r5}
	__asm__ volatile(
   29232:	f04f 0320 	mov.w	r3, #32
   29236:	f3ef 8411 	mrs	r4, BASEPRI
   2923a:	f383 8811 	msr	BASEPRI, r3
	unsigned int key = irq_lock();
	s32_t remaining_ticks;

	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   2923e:	6903      	ldr	r3, [r0, #16]
   29240:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   29244:	d017      	beq.n	29276 <_timeout_remaining_get+0x46>
	return list->head == list;
   29246:	4a10      	ldr	r2, [pc, #64]	; (29288 <_timeout_remaining_get+0x58>)
   29248:	f852 3f0c 	ldr.w	r3, [r2, #12]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2924c:	4293      	cmp	r3, r2
   2924e:	d001      	beq.n	29254 <_timeout_remaining_get+0x24>
		 * and summing up the various tick deltas involved
		 */
		struct _timeout *t =
			(struct _timeout *)sys_dlist_peek_head(&_timeout_q);

		remaining_ticks = t->delta_ticks_from_prev;
   29250:	6919      	ldr	r1, [r3, #16]
		while (t != timeout) {
   29252:	e005      	b.n	29260 <_timeout_remaining_get+0x30>
   29254:	2300      	movs	r3, #0
   29256:	e7fb      	b.n	29250 <_timeout_remaining_get+0x20>
	return (node == list->tail) ? NULL : node->next;
   29258:	2200      	movs	r2, #0
			t = (struct _timeout *)sys_dlist_peek_next(&_timeout_q,
								   &t->node);
			remaining_ticks += t->delta_ticks_from_prev;
   2925a:	6913      	ldr	r3, [r2, #16]
   2925c:	4419      	add	r1, r3
			t = (struct _timeout *)sys_dlist_peek_next(&_timeout_q,
   2925e:	4613      	mov	r3, r2
		while (t != timeout) {
   29260:	4283      	cmp	r3, r0
   29262:	d009      	beq.n	29278 <_timeout_remaining_get+0x48>
			t = (struct _timeout *)sys_dlist_peek_next(&_timeout_q,
   29264:	461a      	mov	r2, r3
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   29266:	2b00      	cmp	r3, #0
   29268:	d0f7      	beq.n	2925a <_timeout_remaining_get+0x2a>
	return (node == list->tail) ? NULL : node->next;
   2926a:	4a07      	ldr	r2, [pc, #28]	; (29288 <_timeout_remaining_get+0x58>)
   2926c:	6912      	ldr	r2, [r2, #16]
   2926e:	4293      	cmp	r3, r2
   29270:	d0f2      	beq.n	29258 <_timeout_remaining_get+0x28>
   29272:	681a      	ldr	r2, [r3, #0]
   29274:	e7f1      	b.n	2925a <_timeout_remaining_get+0x2a>
		remaining_ticks = 0;
   29276:	2100      	movs	r1, #0
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   29278:	f384 8811 	msr	BASEPRI, r4
	return (u64_t)ticks * _ms_per_tick;
   2927c:	008a      	lsls	r2, r1, #2
   2927e:	1850      	adds	r0, r2, r1
   29280:	1800      	adds	r0, r0, r0
		}
	}

	irq_unlock(key);
	return __ticks_to_ms(remaining_ticks);
}
   29282:	bc30      	pop	{r4, r5}
   29284:	4770      	bx	lr
   29286:	bf00      	nop
   29288:	20002710 	.word	0x20002710

0002928c <work_q_main>:
#include <kernel_structs.h>
#include <wait_q.h>
#include <errno.h>

static void work_q_main(void *work_q_ptr, void *p2, void *p3)
{
   2928c:	b538      	push	{r3, r4, r5, lr}
   2928e:	4604      	mov	r4, r0
   29290:	e003      	b.n	2929a <work_q_main+0xe>
		handler = work->handler;

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
					      K_WORK_STATE_PENDING)) {
			handler(work);
   29292:	4610      	mov	r0, r2
   29294:	47a8      	blx	r5
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
   29296:	f7ff f927 	bl	284e8 <_impl_k_yield>
		work = k_queue_get(&work_q->queue, K_FOREVER);
   2929a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2929e:	4620      	mov	r0, r4
   292a0:	f7fe ff0c 	bl	280bc <k_queue_get>
		if (!work) {
   292a4:	4602      	mov	r2, r0
   292a6:	2800      	cmp	r0, #0
   292a8:	d0f7      	beq.n	2929a <work_q_main+0xe>
		handler = work->handler;
   292aa:	6845      	ldr	r5, [r0, #4]
		if (atomic_test_and_clear_bit(work->flags,
   292ac:	f100 0308 	add.w	r3, r0, #8
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   292b0:	f3bf 8f5b 	dmb	ish
   292b4:	e853 1f00 	ldrex	r1, [r3]
   292b8:	f021 0001 	bic.w	r0, r1, #1
   292bc:	e843 0e00 	strex	lr, r0, [r3]
   292c0:	f1be 0f00 	cmp.w	lr, #0
   292c4:	d1f6      	bne.n	292b4 <work_q_main+0x28>
   292c6:	f3bf 8f5b 	dmb	ish
   292ca:	f011 0f01 	tst.w	r1, #1
   292ce:	d0e2      	beq.n	29296 <work_q_main+0xa>
   292d0:	e7df      	b.n	29292 <work_q_main+0x6>

000292d2 <work_timeout>:
	_k_object_init(work_q);
}

#ifdef CONFIG_SYS_CLOCK_EXISTS
static void work_timeout(struct _timeout *t)
{
   292d2:	b510      	push	{r4, lr}
	struct k_delayed_work *w = CONTAINER_OF(t, struct k_delayed_work,
						   timeout);

	/* submit work to workqueue */
	k_work_submit_to_queue(w->work_q, &w->work);
   292d4:	6984      	ldr	r4, [r0, #24]
   292d6:	f1a0 010c 	sub.w	r1, r0, #12
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   292da:	1f03      	subs	r3, r0, #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   292dc:	f3bf 8f5b 	dmb	ish
   292e0:	e853 2f00 	ldrex	r2, [r3]
   292e4:	f042 0001 	orr.w	r0, r2, #1
   292e8:	e843 0e00 	strex	lr, r0, [r3]
   292ec:	f1be 0f00 	cmp.w	lr, #0
   292f0:	d1f6      	bne.n	292e0 <work_timeout+0xe>
   292f2:	f3bf 8f5b 	dmb	ish
   292f6:	f012 0f01 	tst.w	r2, #1
   292fa:	d000      	beq.n	292fe <work_timeout+0x2c>
   292fc:	bd10      	pop	{r4, pc}
		k_queue_append(&work_q->queue, work);
   292fe:	4620      	mov	r0, r4
   29300:	f7fe feb4 	bl	2806c <k_queue_append>
}
   29304:	e7fa      	b.n	292fc <work_timeout+0x2a>
	...

00029308 <k_work_q_start>:
{
   29308:	b5f0      	push	{r4, r5, r6, r7, lr}
   2930a:	b087      	sub	sp, #28
   2930c:	4604      	mov	r4, r0
   2930e:	460d      	mov	r5, r1
   29310:	4616      	mov	r6, r2
   29312:	461f      	mov	r7, r3
	k_queue_init(&work_q->queue);
   29314:	f7fe fe77 	bl	28006 <k_queue_init>
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay);
   29318:	2300      	movs	r3, #0
   2931a:	9305      	str	r3, [sp, #20]
   2931c:	9304      	str	r3, [sp, #16]
   2931e:	9703      	str	r7, [sp, #12]
   29320:	9302      	str	r3, [sp, #8]
   29322:	9301      	str	r3, [sp, #4]
   29324:	9400      	str	r4, [sp, #0]
   29326:	4b04      	ldr	r3, [pc, #16]	; (29338 <k_work_q_start+0x30>)
   29328:	4632      	mov	r2, r6
   2932a:	4629      	mov	r1, r5
   2932c:	f104 0010 	add.w	r0, r4, #16
   29330:	f7ff fcb2 	bl	28c98 <_impl_k_thread_create>
}
   29334:	b007      	add	sp, #28
   29336:	bdf0      	pop	{r4, r5, r6, r7, pc}
   29338:	0002928d 	.word	0x0002928d

0002933c <k_delayed_work_init>:

void k_delayed_work_init(struct k_delayed_work *work, k_work_handler_t handler)
{
   2933c:	b500      	push	{lr}
	atomic_clear_bit(work->flags, K_WORK_STATE_PENDING);
   2933e:	f100 0308 	add.w	r3, r0, #8
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   29342:	f3bf 8f5b 	dmb	ish
   29346:	e853 2f00 	ldrex	r2, [r3]
   2934a:	f022 0201 	bic.w	r2, r2, #1
   2934e:	e843 2e00 	strex	lr, r2, [r3]
   29352:	f1be 0f00 	cmp.w	lr, #0
   29356:	d1f6      	bne.n	29346 <k_delayed_work_init+0xa>
   29358:	f3bf 8f5b 	dmb	ish
	work->handler = handler;
   2935c:	6041      	str	r1, [r0, #4]
	t->delta_ticks_from_prev = _INACTIVE;
   2935e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   29362:	61c3      	str	r3, [r0, #28]
	t->wait_q = NULL;
   29364:	2300      	movs	r3, #0
   29366:	6183      	str	r3, [r0, #24]
	t->thread = NULL;
   29368:	6143      	str	r3, [r0, #20]
	t->func = func;
   2936a:	4a02      	ldr	r2, [pc, #8]	; (29374 <k_delayed_work_init+0x38>)
   2936c:	6202      	str	r2, [r0, #32]
	k_work_init(&work->work, handler);
	_init_timeout(&work->timeout, work_timeout);
	work->work_q = NULL;
   2936e:	6243      	str	r3, [r0, #36]	; 0x24
   29370:	f85d fb04 	ldr.w	pc, [sp], #4
   29374:	000292d3 	.word	0x000292d3

00029378 <k_delayed_work_cancel>:

	return err;
}

int k_delayed_work_cancel(struct k_delayed_work *work)
{
   29378:	b430      	push	{r4, r5}
	__asm__ volatile(
   2937a:	f04f 0320 	mov.w	r3, #32
   2937e:	f3ef 8411 	mrs	r4, BASEPRI
   29382:	f383 8811 	msr	BASEPRI, r3
	int key = irq_lock();

	if (!work->work_q) {
   29386:	6a43      	ldr	r3, [r0, #36]	; 0x24
   29388:	b18b      	cbz	r3, 293ae <k_delayed_work_cancel+0x36>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2938a:	f3bf 8f5b 	dmb	ish
   2938e:	6883      	ldr	r3, [r0, #8]
   29390:	f3bf 8f5b 	dmb	ish
		irq_unlock(key);
		return -EINVAL;
	}

	if (k_work_pending(&work->work)) {
   29394:	f013 0f01 	tst.w	r3, #1
   29398:	d02d      	beq.n	293f6 <k_delayed_work_cancel+0x7e>
		/* Remove from the queue if already submitted */
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   2939a:	6a45      	ldr	r5, [r0, #36]	; 0x24
   2939c:	4601      	mov	r1, r0
	return list->head;
   2939e:	682b      	ldr	r3, [r5, #0]
	sys_snode_t *prev = NULL;
   293a0:	2200      	movs	r2, #0
	SYS_SLIST_FOR_EACH_NODE(list, test) {
   293a2:	b193      	cbz	r3, 293ca <k_delayed_work_cancel+0x52>
		if (test == node) {
   293a4:	4299      	cmp	r1, r3
   293a6:	d007      	beq.n	293b8 <k_delayed_work_cancel+0x40>
		prev = test;
   293a8:	461a      	mov	r2, r3
	SYS_SLIST_FOR_EACH_NODE(list, test) {
   293aa:	681b      	ldr	r3, [r3, #0]
   293ac:	e7f9      	b.n	293a2 <k_delayed_work_cancel+0x2a>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   293ae:	f384 8811 	msr	BASEPRI, r4
		return -EINVAL;
   293b2:	f06f 0015 	mvn.w	r0, #21
   293b6:	e00e      	b.n	293d6 <k_delayed_work_cancel+0x5e>
	if (!prev_node) {
   293b8:	b17a      	cbz	r2, 293da <k_delayed_work_cancel+0x62>
		prev_node->next = node->next;
   293ba:	6803      	ldr	r3, [r0, #0]
   293bc:	6013      	str	r3, [r2, #0]
		if (list->tail == node) {
   293be:	686b      	ldr	r3, [r5, #4]
   293c0:	4298      	cmp	r0, r3
   293c2:	d011      	beq.n	293e8 <k_delayed_work_cancel+0x70>
	node->next = NULL;
   293c4:	2300      	movs	r3, #0
   293c6:	6003      	str	r3, [r0, #0]
			return true;
   293c8:	2301      	movs	r3, #1
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   293ca:	b17b      	cbz	r3, 293ec <k_delayed_work_cancel+0x74>
	} else {
		_abort_timeout(&work->timeout);
	}

	/* Detach from workqueue */
	work->work_q = NULL;
   293cc:	2300      	movs	r3, #0
   293ce:	6243      	str	r3, [r0, #36]	; 0x24
   293d0:	f384 8811 	msr	BASEPRI, r4

	irq_unlock(key);

	return 0;
   293d4:	4618      	mov	r0, r3
}
   293d6:	bc30      	pop	{r4, r5}
   293d8:	4770      	bx	lr
		list->head = node->next;
   293da:	6803      	ldr	r3, [r0, #0]
   293dc:	602b      	str	r3, [r5, #0]
		if (list->tail == node) {
   293de:	686a      	ldr	r2, [r5, #4]
   293e0:	4290      	cmp	r0, r2
   293e2:	d1ef      	bne.n	293c4 <k_delayed_work_cancel+0x4c>
			list->tail = list->head;
   293e4:	606b      	str	r3, [r5, #4]
   293e6:	e7ed      	b.n	293c4 <k_delayed_work_cancel+0x4c>
			list->tail = prev_node;
   293e8:	606a      	str	r2, [r5, #4]
   293ea:	e7eb      	b.n	293c4 <k_delayed_work_cancel+0x4c>
   293ec:	f384 8811 	msr	BASEPRI, r4
			return -EINVAL;
   293f0:	f06f 0015 	mvn.w	r0, #21
   293f4:	e7ef      	b.n	293d6 <k_delayed_work_cancel+0x5e>
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   293f6:	69c2      	ldr	r2, [r0, #28]
   293f8:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   293fc:	d0e6      	beq.n	293cc <k_delayed_work_cancel+0x54>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   293fe:	f100 030c 	add.w	r3, r0, #12
	return list->tail == node;
   29402:	4909      	ldr	r1, [pc, #36]	; (29428 <k_delayed_work_cancel+0xb0>)
   29404:	6909      	ldr	r1, [r1, #16]
   29406:	428b      	cmp	r3, r1
   29408:	d004      	beq.n	29414 <k_delayed_work_cancel+0x9c>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2940a:	b103      	cbz	r3, 2940e <k_delayed_work_cancel+0x96>
	return (node == list->tail) ? NULL : node->next;
   2940c:	68c3      	ldr	r3, [r0, #12]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   2940e:	6919      	ldr	r1, [r3, #16]
   29410:	440a      	add	r2, r1
   29412:	611a      	str	r2, [r3, #16]
	node->prev->next = node->next;
   29414:	6903      	ldr	r3, [r0, #16]
   29416:	68c2      	ldr	r2, [r0, #12]
   29418:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   2941a:	68c3      	ldr	r3, [r0, #12]
   2941c:	6902      	ldr	r2, [r0, #16]
   2941e:	605a      	str	r2, [r3, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   29420:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   29424:	61c3      	str	r3, [r0, #28]
   29426:	e7d1      	b.n	293cc <k_delayed_work_cancel+0x54>
   29428:	20002710 	.word	0x20002710

0002942c <k_delayed_work_submit_to_queue>:
{
   2942c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   2942e:	f04f 0320 	mov.w	r3, #32
   29432:	f3ef 8711 	mrs	r7, BASEPRI
   29436:	f383 8811 	msr	BASEPRI, r3
	if (work->work_q && work->work_q != work_q) {
   2943a:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   2943c:	b113      	cbz	r3, 29444 <k_delayed_work_submit_to_queue+0x18>
   2943e:	4283      	cmp	r3, r0
   29440:	f040 80b4 	bne.w	295ac <k_delayed_work_submit_to_queue+0x180>
   29444:	4614      	mov	r4, r2
   29446:	460e      	mov	r6, r1
   29448:	4605      	mov	r5, r0
	if (work->work_q == work_q) {
   2944a:	4283      	cmp	r3, r0
   2944c:	d016      	beq.n	2947c <k_delayed_work_submit_to_queue+0x50>
	work->work_q = work_q;
   2944e:	6275      	str	r5, [r6, #36]	; 0x24
	if (!delay) {
   29450:	b1d4      	cbz	r4, 29488 <k_delayed_work_submit_to_queue+0x5c>
		_add_timeout(NULL, &work->timeout, NULL,
   29452:	f106 050c 	add.w	r5, r6, #12
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
   29456:	f104 0309 	add.w	r3, r4, #9
   2945a:	4c57      	ldr	r4, [pc, #348]	; (295b8 <k_delayed_work_submit_to_queue+0x18c>)
   2945c:	fba4 2303 	umull	r2, r3, r4, r3
   29460:	08db      	lsrs	r3, r3, #3
   29462:	3301      	adds	r3, #1
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   29464:	612b      	str	r3, [r5, #16]
	timeout->thread = thread;
   29466:	2200      	movs	r2, #0
   29468:	60aa      	str	r2, [r5, #8]
	timeout->wait_q = (sys_dlist_t *)wait_q;
   2946a:	60ea      	str	r2, [r5, #12]
	if (!timeout_in_ticks) {
   2946c:	b32b      	cbz	r3, 294ba <k_delayed_work_submit_to_queue+0x8e>
	return list->head == list;
   2946e:	4a53      	ldr	r2, [pc, #332]	; (295bc <k_delayed_work_submit_to_queue+0x190>)
   29470:	f852 3f0c 	ldr.w	r3, [r2, #12]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   29474:	4293      	cmp	r3, r2
   29476:	d172      	bne.n	2955e <k_delayed_work_submit_to_queue+0x132>
   29478:	2300      	movs	r3, #0
   2947a:	e070      	b.n	2955e <k_delayed_work_submit_to_queue+0x132>
		err = k_delayed_work_cancel(work);
   2947c:	4608      	mov	r0, r1
   2947e:	f7ff ff7b 	bl	29378 <k_delayed_work_cancel>
		if (err < 0) {
   29482:	2800      	cmp	r0, #0
   29484:	dae3      	bge.n	2944e <k_delayed_work_submit_to_queue+0x22>
   29486:	e08e      	b.n	295a6 <k_delayed_work_submit_to_queue+0x17a>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   29488:	f106 0308 	add.w	r3, r6, #8
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2948c:	f3bf 8f5b 	dmb	ish
   29490:	e853 2f00 	ldrex	r2, [r3]
   29494:	f042 0101 	orr.w	r1, r2, #1
   29498:	e843 1000 	strex	r0, r1, [r3]
   2949c:	2800      	cmp	r0, #0
   2949e:	d1f7      	bne.n	29490 <k_delayed_work_submit_to_queue+0x64>
   294a0:	f3bf 8f5b 	dmb	ish
   294a4:	f012 0f01 	tst.w	r2, #1
   294a8:	d001      	beq.n	294ae <k_delayed_work_submit_to_queue+0x82>
	err = 0;
   294aa:	2000      	movs	r0, #0
   294ac:	e07b      	b.n	295a6 <k_delayed_work_submit_to_queue+0x17a>
		k_queue_append(&work_q->queue, work);
   294ae:	4631      	mov	r1, r6
   294b0:	4628      	mov	r0, r5
   294b2:	f7fe fddb 	bl	2806c <k_queue_append>
   294b6:	2000      	movs	r0, #0
   294b8:	e075      	b.n	295a6 <k_delayed_work_submit_to_queue+0x17a>
	struct k_thread *thread = timeout->thread;
   294ba:	4610      	mov	r0, r2
   294bc:	f04f 0320 	mov.w	r3, #32
   294c0:	f3ef 8411 	mrs	r4, BASEPRI
   294c4:	f383 8811 	msr	BASEPRI, r3
	timeout->delta_ticks_from_prev = _INACTIVE;
   294c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   294cc:	612b      	str	r3, [r5, #16]
	if (thread) {
   294ce:	b322      	cbz	r2, 2951a <k_delayed_work_submit_to_queue+0xee>
	if (timeout_obj->wait_q) {
   294d0:	68eb      	ldr	r3, [r5, #12]
   294d2:	b153      	cbz	r3, 294ea <k_delayed_work_submit_to_queue+0xbe>
	node->prev->next = node->next;
   294d4:	6853      	ldr	r3, [r2, #4]
   294d6:	6812      	ldr	r2, [r2, #0]
   294d8:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   294da:	6803      	ldr	r3, [r0, #0]
   294dc:	6842      	ldr	r2, [r0, #4]
   294de:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   294e0:	7a43      	ldrb	r3, [r0, #9]
   294e2:	f023 0302 	bic.w	r3, r3, #2
   294e6:	7243      	strb	r3, [r0, #9]
		thread->base.timeout.wait_q = NULL;
   294e8:	61c0      	str	r0, [r0, #28]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   294ea:	7a43      	ldrb	r3, [r0, #9]
   294ec:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   294f0:	7243      	strb	r3, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   294f2:	f013 0f1b 	tst.w	r3, #27
   294f6:	d107      	bne.n	29508 <k_delayed_work_submit_to_queue+0xdc>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   294f8:	6a03      	ldr	r3, [r0, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   294fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   294fe:	d001      	beq.n	29504 <k_delayed_work_submit_to_queue+0xd8>
   29500:	2300      	movs	r3, #0
   29502:	e002      	b.n	2950a <k_delayed_work_submit_to_queue+0xde>
   29504:	2301      	movs	r3, #1
   29506:	e000      	b.n	2950a <k_delayed_work_submit_to_queue+0xde>
   29508:	2300      	movs	r3, #0
	if (_is_thread_ready(thread)) {
   2950a:	b91b      	cbnz	r3, 29514 <k_delayed_work_submit_to_queue+0xe8>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2950c:	f384 8811 	msr	BASEPRI, r4
   29510:	2000      	movs	r0, #0
   29512:	e048      	b.n	295a6 <k_delayed_work_submit_to_queue+0x17a>
		_add_thread_to_ready_q(thread);
   29514:	f7fe fe24 	bl	28160 <_add_thread_to_ready_q>
   29518:	e7f8      	b.n	2950c <k_delayed_work_submit_to_queue+0xe0>
   2951a:	f384 8811 	msr	BASEPRI, r4
		if (timeout->func) {
   2951e:	696b      	ldr	r3, [r5, #20]
   29520:	2b00      	cmp	r3, #0
   29522:	d046      	beq.n	295b2 <k_delayed_work_submit_to_queue+0x186>
			timeout->func(timeout);
   29524:	4628      	mov	r0, r5
   29526:	4798      	blx	r3
   29528:	2000      	movs	r0, #0
   2952a:	e03c      	b.n	295a6 <k_delayed_work_submit_to_queue+0x17a>
			in_q->delta_ticks_from_prev -= *delta;
   2952c:	1aa2      	subs	r2, r4, r2
   2952e:	611a      	str	r2, [r3, #16]
	if (!insert_point) {
   29530:	b13b      	cbz	r3, 29542 <k_delayed_work_submit_to_queue+0x116>
		node->prev = insert_point->prev;
   29532:	685a      	ldr	r2, [r3, #4]
   29534:	606a      	str	r2, [r5, #4]
		node->next = insert_point;
   29536:	60f3      	str	r3, [r6, #12]
		insert_point->prev->next = node;
   29538:	685a      	ldr	r2, [r3, #4]
   2953a:	6015      	str	r5, [r2, #0]
		insert_point->prev = node;
   2953c:	605d      	str	r5, [r3, #4]
   2953e:	2000      	movs	r0, #0
   29540:	e031      	b.n	295a6 <k_delayed_work_submit_to_queue+0x17a>
	node->next = list;
   29542:	4b1f      	ldr	r3, [pc, #124]	; (295c0 <k_delayed_work_submit_to_queue+0x194>)
   29544:	60f3      	str	r3, [r6, #12]
	node->prev = list->tail;
   29546:	685a      	ldr	r2, [r3, #4]
   29548:	606a      	str	r2, [r5, #4]
	list->tail->next = node;
   2954a:	685a      	ldr	r2, [r3, #4]
   2954c:	6015      	str	r5, [r2, #0]
	list->tail = node;
   2954e:	605d      	str	r5, [r3, #4]
   29550:	2000      	movs	r0, #0
   29552:	e028      	b.n	295a6 <k_delayed_work_submit_to_queue+0x17a>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   29554:	4619      	mov	r1, r3
   29556:	e011      	b.n	2957c <k_delayed_work_submit_to_queue+0x150>
	return (node == list->tail) ? NULL : node->next;
   29558:	2100      	movs	r1, #0
   2955a:	e00f      	b.n	2957c <k_delayed_work_submit_to_queue+0x150>
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   2955c:	2300      	movs	r3, #0
   2955e:	b1d3      	cbz	r3, 29596 <k_delayed_work_submit_to_queue+0x16a>
		if (*delta <= in_q->delta_ticks_from_prev) {
   29560:	692a      	ldr	r2, [r5, #16]
   29562:	691c      	ldr	r4, [r3, #16]
   29564:	42a2      	cmp	r2, r4
   29566:	dde1      	ble.n	2952c <k_delayed_work_submit_to_queue+0x100>
		*delta -= in_q->delta_ticks_from_prev;
   29568:	1b12      	subs	r2, r2, r4
   2956a:	612a      	str	r2, [r5, #16]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   2956c:	461a      	mov	r2, r3
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2956e:	2b00      	cmp	r3, #0
   29570:	d0f0      	beq.n	29554 <k_delayed_work_submit_to_queue+0x128>
	return (node == list->tail) ? NULL : node->next;
   29572:	4912      	ldr	r1, [pc, #72]	; (295bc <k_delayed_work_submit_to_queue+0x190>)
   29574:	6909      	ldr	r1, [r1, #16]
   29576:	428b      	cmp	r3, r1
   29578:	d0ee      	beq.n	29558 <k_delayed_work_submit_to_queue+0x12c>
   2957a:	6819      	ldr	r1, [r3, #0]
   2957c:	2900      	cmp	r1, #0
   2957e:	d0ed      	beq.n	2955c <k_delayed_work_submit_to_queue+0x130>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   29580:	b12a      	cbz	r2, 2958e <k_delayed_work_submit_to_queue+0x162>
	return (node == list->tail) ? NULL : node->next;
   29582:	490e      	ldr	r1, [pc, #56]	; (295bc <k_delayed_work_submit_to_queue+0x190>)
   29584:	6909      	ldr	r1, [r1, #16]
   29586:	428a      	cmp	r2, r1
   29588:	d003      	beq.n	29592 <k_delayed_work_submit_to_queue+0x166>
   2958a:	681b      	ldr	r3, [r3, #0]
   2958c:	e7e7      	b.n	2955e <k_delayed_work_submit_to_queue+0x132>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2958e:	2300      	movs	r3, #0
   29590:	e7e5      	b.n	2955e <k_delayed_work_submit_to_queue+0x132>
	return (node == list->tail) ? NULL : node->next;
   29592:	2300      	movs	r3, #0
   29594:	e7e3      	b.n	2955e <k_delayed_work_submit_to_queue+0x132>
	node->next = list;
   29596:	4b0a      	ldr	r3, [pc, #40]	; (295c0 <k_delayed_work_submit_to_queue+0x194>)
   29598:	60f3      	str	r3, [r6, #12]
	node->prev = list->tail;
   2959a:	685a      	ldr	r2, [r3, #4]
   2959c:	606a      	str	r2, [r5, #4]
	list->tail->next = node;
   2959e:	685a      	ldr	r2, [r3, #4]
   295a0:	6015      	str	r5, [r2, #0]
	list->tail = node;
   295a2:	605d      	str	r5, [r3, #4]
   295a4:	2000      	movs	r0, #0
   295a6:	f387 8811 	msr	BASEPRI, r7
}
   295aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = -EADDRINUSE;
   295ac:	f06f 006f 	mvn.w	r0, #111	; 0x6f
   295b0:	e7f9      	b.n	295a6 <k_delayed_work_submit_to_queue+0x17a>
	err = 0;
   295b2:	2000      	movs	r0, #0
   295b4:	e7f7      	b.n	295a6 <k_delayed_work_submit_to_queue+0x17a>
   295b6:	bf00      	nop
   295b8:	cccccccd 	.word	0xcccccccd
   295bc:	20002710 	.word	0x20002710
   295c0:	2000271c 	.word	0x2000271c

000295c4 <_OffsetAbsSyms>:

#ifdef CONFIG_FLOAT
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread) -
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
   295c4:	4770      	bx	lr
	...

000295c8 <sin>:
   295c8:	b530      	push	{r4, r5, lr}
   295ca:	4a1f      	ldr	r2, [pc, #124]	; (29648 <sin+0x80>)
   295cc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   295d0:	4293      	cmp	r3, r2
   295d2:	b087      	sub	sp, #28
   295d4:	dd1b      	ble.n	2960e <sin+0x46>
   295d6:	4a1d      	ldr	r2, [pc, #116]	; (2964c <sin+0x84>)
   295d8:	4293      	cmp	r3, r2
   295da:	dd05      	ble.n	295e8 <sin+0x20>
   295dc:	4602      	mov	r2, r0
   295de:	460b      	mov	r3, r1
   295e0:	f7d7 f900 	bl	7e4 <__aeabi_dsub>
   295e4:	b007      	add	sp, #28
   295e6:	bd30      	pop	{r4, r5, pc}
   295e8:	aa02      	add	r2, sp, #8
   295ea:	f000 f831 	bl	29650 <__ieee754_rem_pio2>
   295ee:	f000 0003 	and.w	r0, r0, #3
   295f2:	2801      	cmp	r0, #1
   295f4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   295f8:	d01a      	beq.n	29630 <sin+0x68>
   295fa:	2802      	cmp	r0, #2
   295fc:	d00f      	beq.n	2961e <sin+0x56>
   295fe:	b1e0      	cbz	r0, 2963a <sin+0x72>
   29600:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   29604:	f000 fa48 	bl	29a98 <__kernel_cos>
   29608:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
   2960c:	e7ea      	b.n	295e4 <sin+0x1c>
   2960e:	2300      	movs	r3, #0
   29610:	9300      	str	r3, [sp, #0]
   29612:	2200      	movs	r2, #0
   29614:	2300      	movs	r3, #0
   29616:	f000 ffab 	bl	2a570 <__kernel_sin>
   2961a:	b007      	add	sp, #28
   2961c:	bd30      	pop	{r4, r5, pc}
   2961e:	2401      	movs	r4, #1
   29620:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   29624:	9400      	str	r4, [sp, #0]
   29626:	f000 ffa3 	bl	2a570 <__kernel_sin>
   2962a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
   2962e:	e7d9      	b.n	295e4 <sin+0x1c>
   29630:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   29634:	f000 fa30 	bl	29a98 <__kernel_cos>
   29638:	e7d4      	b.n	295e4 <sin+0x1c>
   2963a:	2401      	movs	r4, #1
   2963c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   29640:	9400      	str	r4, [sp, #0]
   29642:	f000 ff95 	bl	2a570 <__kernel_sin>
   29646:	e7cd      	b.n	295e4 <sin+0x1c>
   29648:	3fe921fb 	.word	0x3fe921fb
   2964c:	7fefffff 	.word	0x7fefffff

00029650 <__ieee754_rem_pio2>:
   29650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29654:	4e9a      	ldr	r6, [pc, #616]	; (298c0 <__ieee754_rem_pio2+0x270>)
   29656:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
   2965a:	42b7      	cmp	r7, r6
   2965c:	b091      	sub	sp, #68	; 0x44
   2965e:	f340 808e 	ble.w	2977e <__ieee754_rem_pio2+0x12e>
   29662:	4692      	mov	sl, r2
   29664:	4a97      	ldr	r2, [pc, #604]	; (298c4 <__ieee754_rem_pio2+0x274>)
   29666:	4297      	cmp	r7, r2
   29668:	460c      	mov	r4, r1
   2966a:	dc26      	bgt.n	296ba <__ieee754_rem_pio2+0x6a>
   2966c:	2900      	cmp	r1, #0
   2966e:	a38a      	add	r3, pc, #552	; (adr r3, 29898 <__ieee754_rem_pio2+0x248>)
   29670:	e9d3 2300 	ldrd	r2, r3, [r3]
   29674:	f340 81b4 	ble.w	299e0 <__ieee754_rem_pio2+0x390>
   29678:	f7d7 f8b4 	bl	7e4 <__aeabi_dsub>
   2967c:	4b92      	ldr	r3, [pc, #584]	; (298c8 <__ieee754_rem_pio2+0x278>)
   2967e:	429f      	cmp	r7, r3
   29680:	4604      	mov	r4, r0
   29682:	460d      	mov	r5, r1
   29684:	f000 8090 	beq.w	297a8 <__ieee754_rem_pio2+0x158>
   29688:	a385      	add	r3, pc, #532	; (adr r3, 298a0 <__ieee754_rem_pio2+0x250>)
   2968a:	e9d3 2300 	ldrd	r2, r3, [r3]
   2968e:	f7d7 f8a9 	bl	7e4 <__aeabi_dsub>
   29692:	4602      	mov	r2, r0
   29694:	460b      	mov	r3, r1
   29696:	e9ca 2300 	strd	r2, r3, [sl]
   2969a:	4620      	mov	r0, r4
   2969c:	4629      	mov	r1, r5
   2969e:	f7d7 f8a1 	bl	7e4 <__aeabi_dsub>
   296a2:	a37f      	add	r3, pc, #508	; (adr r3, 298a0 <__ieee754_rem_pio2+0x250>)
   296a4:	e9d3 2300 	ldrd	r2, r3, [r3]
   296a8:	f7d7 f89c 	bl	7e4 <__aeabi_dsub>
   296ac:	2501      	movs	r5, #1
   296ae:	e9ca 0102 	strd	r0, r1, [sl, #8]
   296b2:	4628      	mov	r0, r5
   296b4:	b011      	add	sp, #68	; 0x44
   296b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   296ba:	4a84      	ldr	r2, [pc, #528]	; (298cc <__ieee754_rem_pio2+0x27c>)
   296bc:	4297      	cmp	r7, r2
   296be:	f340 8090 	ble.w	297e2 <__ieee754_rem_pio2+0x192>
   296c2:	4a83      	ldr	r2, [pc, #524]	; (298d0 <__ieee754_rem_pio2+0x280>)
   296c4:	4297      	cmp	r7, r2
   296c6:	dc65      	bgt.n	29794 <__ieee754_rem_pio2+0x144>
   296c8:	153d      	asrs	r5, r7, #20
   296ca:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
   296ce:	eba7 5305 	sub.w	r3, r7, r5, lsl #20
   296d2:	4619      	mov	r1, r3
   296d4:	461f      	mov	r7, r3
   296d6:	4606      	mov	r6, r0
   296d8:	f7d7 fce8 	bl	10ac <__aeabi_d2iz>
   296dc:	f7d7 f9d0 	bl	a80 <__aeabi_i2d>
   296e0:	4680      	mov	r8, r0
   296e2:	4689      	mov	r9, r1
   296e4:	4602      	mov	r2, r0
   296e6:	460b      	mov	r3, r1
   296e8:	4630      	mov	r0, r6
   296ea:	4639      	mov	r1, r7
   296ec:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
   296f0:	f7d7 f878 	bl	7e4 <__aeabi_dsub>
   296f4:	2200      	movs	r2, #0
   296f6:	4b77      	ldr	r3, [pc, #476]	; (298d4 <__ieee754_rem_pio2+0x284>)
   296f8:	f7d7 fa28 	bl	b4c <__aeabi_dmul>
   296fc:	4689      	mov	r9, r1
   296fe:	4680      	mov	r8, r0
   29700:	f7d7 fcd4 	bl	10ac <__aeabi_d2iz>
   29704:	f7d7 f9bc 	bl	a80 <__aeabi_i2d>
   29708:	4602      	mov	r2, r0
   2970a:	460b      	mov	r3, r1
   2970c:	4606      	mov	r6, r0
   2970e:	460f      	mov	r7, r1
   29710:	4640      	mov	r0, r8
   29712:	4649      	mov	r1, r9
   29714:	e9cd 670c 	strd	r6, r7, [sp, #48]	; 0x30
   29718:	f7d7 f864 	bl	7e4 <__aeabi_dsub>
   2971c:	2200      	movs	r2, #0
   2971e:	4b6d      	ldr	r3, [pc, #436]	; (298d4 <__ieee754_rem_pio2+0x284>)
   29720:	f7d7 fa14 	bl	b4c <__aeabi_dmul>
   29724:	2200      	movs	r2, #0
   29726:	2300      	movs	r3, #0
   29728:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
   2972c:	f7d7 fc76 	bl	101c <__aeabi_dcmpeq>
   29730:	2800      	cmp	r0, #0
   29732:	f000 8173 	beq.w	29a1c <__ieee754_rem_pio2+0x3cc>
   29736:	2300      	movs	r3, #0
   29738:	4630      	mov	r0, r6
   2973a:	4639      	mov	r1, r7
   2973c:	2200      	movs	r2, #0
   2973e:	f7d7 fc6d 	bl	101c <__aeabi_dcmpeq>
   29742:	2800      	cmp	r0, #0
   29744:	bf14      	ite	ne
   29746:	2301      	movne	r3, #1
   29748:	2302      	moveq	r3, #2
   2974a:	4a63      	ldr	r2, [pc, #396]	; (298d8 <__ieee754_rem_pio2+0x288>)
   2974c:	9201      	str	r2, [sp, #4]
   2974e:	2102      	movs	r1, #2
   29750:	462a      	mov	r2, r5
   29752:	9100      	str	r1, [sp, #0]
   29754:	a80a      	add	r0, sp, #40	; 0x28
   29756:	4651      	mov	r1, sl
   29758:	f000 fac2 	bl	29ce0 <__kernel_rem_pio2>
   2975c:	2c00      	cmp	r4, #0
   2975e:	4605      	mov	r5, r0
   29760:	da14      	bge.n	2978c <__ieee754_rem_pio2+0x13c>
   29762:	f8da 2004 	ldr.w	r2, [sl, #4]
   29766:	f8da 300c 	ldr.w	r3, [sl, #12]
   2976a:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
   2976e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
   29772:	4245      	negs	r5, r0
   29774:	f8ca 2004 	str.w	r2, [sl, #4]
   29778:	f8ca 300c 	str.w	r3, [sl, #12]
   2977c:	e006      	b.n	2978c <__ieee754_rem_pio2+0x13c>
   2977e:	e9c2 0100 	strd	r0, r1, [r2]
   29782:	2500      	movs	r5, #0
   29784:	2400      	movs	r4, #0
   29786:	e9c2 4502 	strd	r4, r5, [r2, #8]
   2978a:	2500      	movs	r5, #0
   2978c:	4628      	mov	r0, r5
   2978e:	b011      	add	sp, #68	; 0x44
   29790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29794:	4602      	mov	r2, r0
   29796:	460b      	mov	r3, r1
   29798:	f7d7 f824 	bl	7e4 <__aeabi_dsub>
   2979c:	2500      	movs	r5, #0
   2979e:	e9ca 0102 	strd	r0, r1, [sl, #8]
   297a2:	e9ca 0100 	strd	r0, r1, [sl]
   297a6:	e7f1      	b.n	2978c <__ieee754_rem_pio2+0x13c>
   297a8:	a33f      	add	r3, pc, #252	; (adr r3, 298a8 <__ieee754_rem_pio2+0x258>)
   297aa:	e9d3 2300 	ldrd	r2, r3, [r3]
   297ae:	f7d7 f819 	bl	7e4 <__aeabi_dsub>
   297b2:	a33f      	add	r3, pc, #252	; (adr r3, 298b0 <__ieee754_rem_pio2+0x260>)
   297b4:	e9d3 2300 	ldrd	r2, r3, [r3]
   297b8:	460d      	mov	r5, r1
   297ba:	4604      	mov	r4, r0
   297bc:	f7d7 f812 	bl	7e4 <__aeabi_dsub>
   297c0:	4602      	mov	r2, r0
   297c2:	460b      	mov	r3, r1
   297c4:	e9ca 2300 	strd	r2, r3, [sl]
   297c8:	4629      	mov	r1, r5
   297ca:	4620      	mov	r0, r4
   297cc:	f7d7 f80a 	bl	7e4 <__aeabi_dsub>
   297d0:	a337      	add	r3, pc, #220	; (adr r3, 298b0 <__ieee754_rem_pio2+0x260>)
   297d2:	e9d3 2300 	ldrd	r2, r3, [r3]
   297d6:	f7d7 f805 	bl	7e4 <__aeabi_dsub>
   297da:	2501      	movs	r5, #1
   297dc:	e9ca 0102 	strd	r0, r1, [sl, #8]
   297e0:	e7d4      	b.n	2978c <__ieee754_rem_pio2+0x13c>
   297e2:	f000 ff7b 	bl	2a6dc <fabs>
   297e6:	a334      	add	r3, pc, #208	; (adr r3, 298b8 <__ieee754_rem_pio2+0x268>)
   297e8:	e9d3 2300 	ldrd	r2, r3, [r3]
   297ec:	4680      	mov	r8, r0
   297ee:	4689      	mov	r9, r1
   297f0:	f7d7 f9ac 	bl	b4c <__aeabi_dmul>
   297f4:	2200      	movs	r2, #0
   297f6:	4b39      	ldr	r3, [pc, #228]	; (298dc <__ieee754_rem_pio2+0x28c>)
   297f8:	f7d6 fff6 	bl	7e8 <__adddf3>
   297fc:	f7d7 fc56 	bl	10ac <__aeabi_d2iz>
   29800:	4605      	mov	r5, r0
   29802:	f7d7 f93d 	bl	a80 <__aeabi_i2d>
   29806:	a324      	add	r3, pc, #144	; (adr r3, 29898 <__ieee754_rem_pio2+0x248>)
   29808:	e9d3 2300 	ldrd	r2, r3, [r3]
   2980c:	e9cd 0104 	strd	r0, r1, [sp, #16]
   29810:	f7d7 f99c 	bl	b4c <__aeabi_dmul>
   29814:	4602      	mov	r2, r0
   29816:	460b      	mov	r3, r1
   29818:	4640      	mov	r0, r8
   2981a:	4649      	mov	r1, r9
   2981c:	f7d6 ffe2 	bl	7e4 <__aeabi_dsub>
   29820:	a31f      	add	r3, pc, #124	; (adr r3, 298a0 <__ieee754_rem_pio2+0x250>)
   29822:	e9d3 2300 	ldrd	r2, r3, [r3]
   29826:	4680      	mov	r8, r0
   29828:	4689      	mov	r9, r1
   2982a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   2982e:	f7d7 f98d 	bl	b4c <__aeabi_dmul>
   29832:	2d1f      	cmp	r5, #31
   29834:	e9cd 0102 	strd	r0, r1, [sp, #8]
   29838:	dc54      	bgt.n	298e4 <__ieee754_rem_pio2+0x294>
   2983a:	4b29      	ldr	r3, [pc, #164]	; (298e0 <__ieee754_rem_pio2+0x290>)
   2983c:	1e6a      	subs	r2, r5, #1
   2983e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   29842:	429f      	cmp	r7, r3
   29844:	d04e      	beq.n	298e4 <__ieee754_rem_pio2+0x294>
   29846:	4602      	mov	r2, r0
   29848:	460b      	mov	r3, r1
   2984a:	4640      	mov	r0, r8
   2984c:	4649      	mov	r1, r9
   2984e:	f7d6 ffc9 	bl	7e4 <__aeabi_dsub>
   29852:	4602      	mov	r2, r0
   29854:	460b      	mov	r3, r1
   29856:	e9ca 2300 	strd	r2, r3, [sl]
   2985a:	4683      	mov	fp, r0
   2985c:	460e      	mov	r6, r1
   2985e:	465a      	mov	r2, fp
   29860:	4633      	mov	r3, r6
   29862:	4640      	mov	r0, r8
   29864:	4649      	mov	r1, r9
   29866:	f7d6 ffbd 	bl	7e4 <__aeabi_dsub>
   2986a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   2986e:	f7d6 ffb9 	bl	7e4 <__aeabi_dsub>
   29872:	2c00      	cmp	r4, #0
   29874:	4602      	mov	r2, r0
   29876:	460b      	mov	r3, r1
   29878:	e9ca 2302 	strd	r2, r3, [sl, #8]
   2987c:	da86      	bge.n	2978c <__ieee754_rem_pio2+0x13c>
   2987e:	465b      	mov	r3, fp
   29880:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
   29884:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
   29888:	e88a 0048 	stmia.w	sl, {r3, r6}
   2988c:	f8ca 100c 	str.w	r1, [sl, #12]
   29890:	f8ca 0008 	str.w	r0, [sl, #8]
   29894:	426d      	negs	r5, r5
   29896:	e779      	b.n	2978c <__ieee754_rem_pio2+0x13c>
   29898:	54400000 	.word	0x54400000
   2989c:	3ff921fb 	.word	0x3ff921fb
   298a0:	1a626331 	.word	0x1a626331
   298a4:	3dd0b461 	.word	0x3dd0b461
   298a8:	1a600000 	.word	0x1a600000
   298ac:	3dd0b461 	.word	0x3dd0b461
   298b0:	2e037073 	.word	0x2e037073
   298b4:	3ba3198a 	.word	0x3ba3198a
   298b8:	6dc9c883 	.word	0x6dc9c883
   298bc:	3fe45f30 	.word	0x3fe45f30
   298c0:	3fe921fb 	.word	0x3fe921fb
   298c4:	4002d97b 	.word	0x4002d97b
   298c8:	3ff921fb 	.word	0x3ff921fb
   298cc:	413921fb 	.word	0x413921fb
   298d0:	7fefffff 	.word	0x7fefffff
   298d4:	41700000 	.word	0x41700000
   298d8:	00031158 	.word	0x00031158
   298dc:	3fe00000 	.word	0x3fe00000
   298e0:	000310d8 	.word	0x000310d8
   298e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   298e8:	4640      	mov	r0, r8
   298ea:	4649      	mov	r1, r9
   298ec:	f7d6 ff7a 	bl	7e4 <__aeabi_dsub>
   298f0:	153a      	asrs	r2, r7, #20
   298f2:	f3c1 530a 	ubfx	r3, r1, #20, #11
   298f6:	1ad3      	subs	r3, r2, r3
   298f8:	2b10      	cmp	r3, #16
   298fa:	4683      	mov	fp, r0
   298fc:	460e      	mov	r6, r1
   298fe:	9209      	str	r2, [sp, #36]	; 0x24
   29900:	e9ca 0100 	strd	r0, r1, [sl]
   29904:	ddab      	ble.n	2985e <__ieee754_rem_pio2+0x20e>
   29906:	a358      	add	r3, pc, #352	; (adr r3, 29a68 <__ieee754_rem_pio2+0x418>)
   29908:	e9d3 2300 	ldrd	r2, r3, [r3]
   2990c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   29910:	f7d7 f91c 	bl	b4c <__aeabi_dmul>
   29914:	4606      	mov	r6, r0
   29916:	460f      	mov	r7, r1
   29918:	4602      	mov	r2, r0
   2991a:	460b      	mov	r3, r1
   2991c:	4640      	mov	r0, r8
   2991e:	4649      	mov	r1, r9
   29920:	f7d6 ff60 	bl	7e4 <__aeabi_dsub>
   29924:	e9cd 0106 	strd	r0, r1, [sp, #24]
   29928:	4602      	mov	r2, r0
   2992a:	460b      	mov	r3, r1
   2992c:	4640      	mov	r0, r8
   2992e:	4649      	mov	r1, r9
   29930:	f7d6 ff58 	bl	7e4 <__aeabi_dsub>
   29934:	4632      	mov	r2, r6
   29936:	463b      	mov	r3, r7
   29938:	f7d6 ff54 	bl	7e4 <__aeabi_dsub>
   2993c:	a34c      	add	r3, pc, #304	; (adr r3, 29a70 <__ieee754_rem_pio2+0x420>)
   2993e:	e9d3 2300 	ldrd	r2, r3, [r3]
   29942:	4606      	mov	r6, r0
   29944:	460f      	mov	r7, r1
   29946:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   2994a:	f7d7 f8ff 	bl	b4c <__aeabi_dmul>
   2994e:	4632      	mov	r2, r6
   29950:	463b      	mov	r3, r7
   29952:	f7d6 ff47 	bl	7e4 <__aeabi_dsub>
   29956:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
   2995a:	e9cd 0102 	strd	r0, r1, [sp, #8]
   2995e:	4602      	mov	r2, r0
   29960:	460b      	mov	r3, r1
   29962:	4640      	mov	r0, r8
   29964:	4649      	mov	r1, r9
   29966:	f7d6 ff3d 	bl	7e4 <__aeabi_dsub>
   2996a:	460b      	mov	r3, r1
   2996c:	f3c1 570a 	ubfx	r7, r1, #20, #11
   29970:	460e      	mov	r6, r1
   29972:	9909      	ldr	r1, [sp, #36]	; 0x24
   29974:	1bcf      	subs	r7, r1, r7
   29976:	4602      	mov	r2, r0
   29978:	2f31      	cmp	r7, #49	; 0x31
   2997a:	4683      	mov	fp, r0
   2997c:	e9ca 2300 	strd	r2, r3, [sl]
   29980:	dd6c      	ble.n	29a5c <__ieee754_rem_pio2+0x40c>
   29982:	a33d      	add	r3, pc, #244	; (adr r3, 29a78 <__ieee754_rem_pio2+0x428>)
   29984:	e9d3 2300 	ldrd	r2, r3, [r3]
   29988:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   2998c:	f7d7 f8de 	bl	b4c <__aeabi_dmul>
   29990:	4606      	mov	r6, r0
   29992:	460f      	mov	r7, r1
   29994:	4602      	mov	r2, r0
   29996:	460b      	mov	r3, r1
   29998:	4640      	mov	r0, r8
   2999a:	4649      	mov	r1, r9
   2999c:	e9cd 8906 	strd	r8, r9, [sp, #24]
   299a0:	f7d6 ff20 	bl	7e4 <__aeabi_dsub>
   299a4:	4602      	mov	r2, r0
   299a6:	460b      	mov	r3, r1
   299a8:	4680      	mov	r8, r0
   299aa:	4689      	mov	r9, r1
   299ac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   299b0:	f7d6 ff18 	bl	7e4 <__aeabi_dsub>
   299b4:	4632      	mov	r2, r6
   299b6:	463b      	mov	r3, r7
   299b8:	f7d6 ff14 	bl	7e4 <__aeabi_dsub>
   299bc:	a330      	add	r3, pc, #192	; (adr r3, 29a80 <__ieee754_rem_pio2+0x430>)
   299be:	e9d3 2300 	ldrd	r2, r3, [r3]
   299c2:	4606      	mov	r6, r0
   299c4:	460f      	mov	r7, r1
   299c6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   299ca:	f7d7 f8bf 	bl	b4c <__aeabi_dmul>
   299ce:	4632      	mov	r2, r6
   299d0:	463b      	mov	r3, r7
   299d2:	f7d6 ff07 	bl	7e4 <__aeabi_dsub>
   299d6:	4602      	mov	r2, r0
   299d8:	460b      	mov	r3, r1
   299da:	e9cd 2302 	strd	r2, r3, [sp, #8]
   299de:	e734      	b.n	2984a <__ieee754_rem_pio2+0x1fa>
   299e0:	f7d6 ff02 	bl	7e8 <__adddf3>
   299e4:	4b2a      	ldr	r3, [pc, #168]	; (29a90 <__ieee754_rem_pio2+0x440>)
   299e6:	429f      	cmp	r7, r3
   299e8:	4604      	mov	r4, r0
   299ea:	460d      	mov	r5, r1
   299ec:	d018      	beq.n	29a20 <__ieee754_rem_pio2+0x3d0>
   299ee:	a326      	add	r3, pc, #152	; (adr r3, 29a88 <__ieee754_rem_pio2+0x438>)
   299f0:	e9d3 2300 	ldrd	r2, r3, [r3]
   299f4:	f7d6 fef8 	bl	7e8 <__adddf3>
   299f8:	4602      	mov	r2, r0
   299fa:	460b      	mov	r3, r1
   299fc:	e9ca 2300 	strd	r2, r3, [sl]
   29a00:	4629      	mov	r1, r5
   29a02:	4620      	mov	r0, r4
   29a04:	f7d6 feee 	bl	7e4 <__aeabi_dsub>
   29a08:	a31f      	add	r3, pc, #124	; (adr r3, 29a88 <__ieee754_rem_pio2+0x438>)
   29a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
   29a0e:	f7d6 feeb 	bl	7e8 <__adddf3>
   29a12:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   29a16:	e9ca 0102 	strd	r0, r1, [sl, #8]
   29a1a:	e6b7      	b.n	2978c <__ieee754_rem_pio2+0x13c>
   29a1c:	2303      	movs	r3, #3
   29a1e:	e694      	b.n	2974a <__ieee754_rem_pio2+0xfa>
   29a20:	a311      	add	r3, pc, #68	; (adr r3, 29a68 <__ieee754_rem_pio2+0x418>)
   29a22:	e9d3 2300 	ldrd	r2, r3, [r3]
   29a26:	f7d6 fedf 	bl	7e8 <__adddf3>
   29a2a:	a311      	add	r3, pc, #68	; (adr r3, 29a70 <__ieee754_rem_pio2+0x420>)
   29a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
   29a30:	460d      	mov	r5, r1
   29a32:	4604      	mov	r4, r0
   29a34:	f7d6 fed8 	bl	7e8 <__adddf3>
   29a38:	4602      	mov	r2, r0
   29a3a:	460b      	mov	r3, r1
   29a3c:	e9ca 2300 	strd	r2, r3, [sl]
   29a40:	4629      	mov	r1, r5
   29a42:	4620      	mov	r0, r4
   29a44:	f7d6 fece 	bl	7e4 <__aeabi_dsub>
   29a48:	a309      	add	r3, pc, #36	; (adr r3, 29a70 <__ieee754_rem_pio2+0x420>)
   29a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
   29a4e:	f7d6 fecb 	bl	7e8 <__adddf3>
   29a52:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   29a56:	e9ca 0102 	strd	r0, r1, [sl, #8]
   29a5a:	e697      	b.n	2978c <__ieee754_rem_pio2+0x13c>
   29a5c:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
   29a60:	e6fd      	b.n	2985e <__ieee754_rem_pio2+0x20e>
   29a62:	bf00      	nop
   29a64:	f3af 8000 	nop.w
   29a68:	1a600000 	.word	0x1a600000
   29a6c:	3dd0b461 	.word	0x3dd0b461
   29a70:	2e037073 	.word	0x2e037073
   29a74:	3ba3198a 	.word	0x3ba3198a
   29a78:	2e000000 	.word	0x2e000000
   29a7c:	3ba3198a 	.word	0x3ba3198a
   29a80:	252049c1 	.word	0x252049c1
   29a84:	397b839a 	.word	0x397b839a
   29a88:	1a626331 	.word	0x1a626331
   29a8c:	3dd0b461 	.word	0x3dd0b461
   29a90:	3ff921fb 	.word	0x3ff921fb
   29a94:	00000000 	.word	0x00000000

00029a98 <__kernel_cos>:
   29a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29a9c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
   29aa0:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
   29aa4:	b085      	sub	sp, #20
   29aa6:	460c      	mov	r4, r1
   29aa8:	4692      	mov	sl, r2
   29aaa:	469b      	mov	fp, r3
   29aac:	4605      	mov	r5, r0
   29aae:	da6b      	bge.n	29b88 <__kernel_cos+0xf0>
   29ab0:	f7d7 fafc 	bl	10ac <__aeabi_d2iz>
   29ab4:	2800      	cmp	r0, #0
   29ab6:	f000 80e8 	beq.w	29c8a <__kernel_cos+0x1f2>
   29aba:	462a      	mov	r2, r5
   29abc:	4623      	mov	r3, r4
   29abe:	4628      	mov	r0, r5
   29ac0:	4621      	mov	r1, r4
   29ac2:	f7d7 f843 	bl	b4c <__aeabi_dmul>
   29ac6:	a374      	add	r3, pc, #464	; (adr r3, 29c98 <__kernel_cos+0x200>)
   29ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
   29acc:	4680      	mov	r8, r0
   29ace:	4689      	mov	r9, r1
   29ad0:	f7d7 f83c 	bl	b4c <__aeabi_dmul>
   29ad4:	a372      	add	r3, pc, #456	; (adr r3, 29ca0 <__kernel_cos+0x208>)
   29ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
   29ada:	f7d6 fe85 	bl	7e8 <__adddf3>
   29ade:	4642      	mov	r2, r8
   29ae0:	464b      	mov	r3, r9
   29ae2:	f7d7 f833 	bl	b4c <__aeabi_dmul>
   29ae6:	a370      	add	r3, pc, #448	; (adr r3, 29ca8 <__kernel_cos+0x210>)
   29ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
   29aec:	f7d6 fe7a 	bl	7e4 <__aeabi_dsub>
   29af0:	4642      	mov	r2, r8
   29af2:	464b      	mov	r3, r9
   29af4:	f7d7 f82a 	bl	b4c <__aeabi_dmul>
   29af8:	a36d      	add	r3, pc, #436	; (adr r3, 29cb0 <__kernel_cos+0x218>)
   29afa:	e9d3 2300 	ldrd	r2, r3, [r3]
   29afe:	f7d6 fe73 	bl	7e8 <__adddf3>
   29b02:	4642      	mov	r2, r8
   29b04:	464b      	mov	r3, r9
   29b06:	f7d7 f821 	bl	b4c <__aeabi_dmul>
   29b0a:	a36b      	add	r3, pc, #428	; (adr r3, 29cb8 <__kernel_cos+0x220>)
   29b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
   29b10:	f7d6 fe68 	bl	7e4 <__aeabi_dsub>
   29b14:	4642      	mov	r2, r8
   29b16:	464b      	mov	r3, r9
   29b18:	f7d7 f818 	bl	b4c <__aeabi_dmul>
   29b1c:	a368      	add	r3, pc, #416	; (adr r3, 29cc0 <__kernel_cos+0x228>)
   29b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
   29b22:	f7d6 fe61 	bl	7e8 <__adddf3>
   29b26:	4642      	mov	r2, r8
   29b28:	464b      	mov	r3, r9
   29b2a:	f7d7 f80f 	bl	b4c <__aeabi_dmul>
   29b2e:	e9cd 0100 	strd	r0, r1, [sp]
   29b32:	2200      	movs	r2, #0
   29b34:	4b64      	ldr	r3, [pc, #400]	; (29cc8 <__kernel_cos+0x230>)
   29b36:	4640      	mov	r0, r8
   29b38:	4649      	mov	r1, r9
   29b3a:	f7d7 f807 	bl	b4c <__aeabi_dmul>
   29b3e:	e9dd 2300 	ldrd	r2, r3, [sp]
   29b42:	4606      	mov	r6, r0
   29b44:	460f      	mov	r7, r1
   29b46:	4640      	mov	r0, r8
   29b48:	4649      	mov	r1, r9
   29b4a:	f7d6 ffff 	bl	b4c <__aeabi_dmul>
   29b4e:	4652      	mov	r2, sl
   29b50:	4680      	mov	r8, r0
   29b52:	4689      	mov	r9, r1
   29b54:	465b      	mov	r3, fp
   29b56:	4628      	mov	r0, r5
   29b58:	4621      	mov	r1, r4
   29b5a:	f7d6 fff7 	bl	b4c <__aeabi_dmul>
   29b5e:	4602      	mov	r2, r0
   29b60:	460b      	mov	r3, r1
   29b62:	4640      	mov	r0, r8
   29b64:	4649      	mov	r1, r9
   29b66:	f7d6 fe3d 	bl	7e4 <__aeabi_dsub>
   29b6a:	4602      	mov	r2, r0
   29b6c:	460b      	mov	r3, r1
   29b6e:	4630      	mov	r0, r6
   29b70:	4639      	mov	r1, r7
   29b72:	f7d6 fe37 	bl	7e4 <__aeabi_dsub>
   29b76:	4602      	mov	r2, r0
   29b78:	460b      	mov	r3, r1
   29b7a:	2000      	movs	r0, #0
   29b7c:	4953      	ldr	r1, [pc, #332]	; (29ccc <__kernel_cos+0x234>)
   29b7e:	f7d6 fe31 	bl	7e4 <__aeabi_dsub>
   29b82:	b005      	add	sp, #20
   29b84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29b88:	4602      	mov	r2, r0
   29b8a:	460b      	mov	r3, r1
   29b8c:	f7d6 ffde 	bl	b4c <__aeabi_dmul>
   29b90:	a341      	add	r3, pc, #260	; (adr r3, 29c98 <__kernel_cos+0x200>)
   29b92:	e9d3 2300 	ldrd	r2, r3, [r3]
   29b96:	4680      	mov	r8, r0
   29b98:	4689      	mov	r9, r1
   29b9a:	f7d6 ffd7 	bl	b4c <__aeabi_dmul>
   29b9e:	a340      	add	r3, pc, #256	; (adr r3, 29ca0 <__kernel_cos+0x208>)
   29ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
   29ba4:	f7d6 fe20 	bl	7e8 <__adddf3>
   29ba8:	4642      	mov	r2, r8
   29baa:	464b      	mov	r3, r9
   29bac:	f7d6 ffce 	bl	b4c <__aeabi_dmul>
   29bb0:	a33d      	add	r3, pc, #244	; (adr r3, 29ca8 <__kernel_cos+0x210>)
   29bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
   29bb6:	f7d6 fe15 	bl	7e4 <__aeabi_dsub>
   29bba:	4642      	mov	r2, r8
   29bbc:	464b      	mov	r3, r9
   29bbe:	f7d6 ffc5 	bl	b4c <__aeabi_dmul>
   29bc2:	a33b      	add	r3, pc, #236	; (adr r3, 29cb0 <__kernel_cos+0x218>)
   29bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
   29bc8:	f7d6 fe0e 	bl	7e8 <__adddf3>
   29bcc:	4642      	mov	r2, r8
   29bce:	464b      	mov	r3, r9
   29bd0:	f7d6 ffbc 	bl	b4c <__aeabi_dmul>
   29bd4:	a338      	add	r3, pc, #224	; (adr r3, 29cb8 <__kernel_cos+0x220>)
   29bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
   29bda:	f7d6 fe03 	bl	7e4 <__aeabi_dsub>
   29bde:	4642      	mov	r2, r8
   29be0:	464b      	mov	r3, r9
   29be2:	f7d6 ffb3 	bl	b4c <__aeabi_dmul>
   29be6:	a336      	add	r3, pc, #216	; (adr r3, 29cc0 <__kernel_cos+0x228>)
   29be8:	e9d3 2300 	ldrd	r2, r3, [r3]
   29bec:	f7d6 fdfc 	bl	7e8 <__adddf3>
   29bf0:	464b      	mov	r3, r9
   29bf2:	4642      	mov	r2, r8
   29bf4:	f7d6 ffaa 	bl	b4c <__aeabi_dmul>
   29bf8:	4b35      	ldr	r3, [pc, #212]	; (29cd0 <__kernel_cos+0x238>)
   29bfa:	429e      	cmp	r6, r3
   29bfc:	e9cd 0100 	strd	r0, r1, [sp]
   29c00:	dd97      	ble.n	29b32 <__kernel_cos+0x9a>
   29c02:	4b34      	ldr	r3, [pc, #208]	; (29cd4 <__kernel_cos+0x23c>)
   29c04:	429e      	cmp	r6, r3
   29c06:	f04f 0200 	mov.w	r2, #0
   29c0a:	dc38      	bgt.n	29c7e <__kernel_cos+0x1e6>
   29c0c:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
   29c10:	2000      	movs	r0, #0
   29c12:	492e      	ldr	r1, [pc, #184]	; (29ccc <__kernel_cos+0x234>)
   29c14:	4616      	mov	r6, r2
   29c16:	461f      	mov	r7, r3
   29c18:	f7d6 fde4 	bl	7e4 <__aeabi_dsub>
   29c1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
   29c20:	2200      	movs	r2, #0
   29c22:	4b29      	ldr	r3, [pc, #164]	; (29cc8 <__kernel_cos+0x230>)
   29c24:	4640      	mov	r0, r8
   29c26:	4649      	mov	r1, r9
   29c28:	f7d6 ff90 	bl	b4c <__aeabi_dmul>
   29c2c:	4632      	mov	r2, r6
   29c2e:	463b      	mov	r3, r7
   29c30:	f7d6 fdd8 	bl	7e4 <__aeabi_dsub>
   29c34:	e9dd 2300 	ldrd	r2, r3, [sp]
   29c38:	4606      	mov	r6, r0
   29c3a:	460f      	mov	r7, r1
   29c3c:	4640      	mov	r0, r8
   29c3e:	4649      	mov	r1, r9
   29c40:	f7d6 ff84 	bl	b4c <__aeabi_dmul>
   29c44:	4652      	mov	r2, sl
   29c46:	4680      	mov	r8, r0
   29c48:	4689      	mov	r9, r1
   29c4a:	465b      	mov	r3, fp
   29c4c:	4628      	mov	r0, r5
   29c4e:	4621      	mov	r1, r4
   29c50:	f7d6 ff7c 	bl	b4c <__aeabi_dmul>
   29c54:	4602      	mov	r2, r0
   29c56:	460b      	mov	r3, r1
   29c58:	4640      	mov	r0, r8
   29c5a:	4649      	mov	r1, r9
   29c5c:	f7d6 fdc2 	bl	7e4 <__aeabi_dsub>
   29c60:	4602      	mov	r2, r0
   29c62:	460b      	mov	r3, r1
   29c64:	4630      	mov	r0, r6
   29c66:	4639      	mov	r1, r7
   29c68:	f7d6 fdbc 	bl	7e4 <__aeabi_dsub>
   29c6c:	4602      	mov	r2, r0
   29c6e:	460b      	mov	r3, r1
   29c70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   29c74:	f7d6 fdb6 	bl	7e4 <__aeabi_dsub>
   29c78:	b005      	add	sp, #20
   29c7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29c7e:	4b16      	ldr	r3, [pc, #88]	; (29cd8 <__kernel_cos+0x240>)
   29c80:	4f16      	ldr	r7, [pc, #88]	; (29cdc <__kernel_cos+0x244>)
   29c82:	e9cd 2302 	strd	r2, r3, [sp, #8]
   29c86:	2600      	movs	r6, #0
   29c88:	e7ca      	b.n	29c20 <__kernel_cos+0x188>
   29c8a:	4910      	ldr	r1, [pc, #64]	; (29ccc <__kernel_cos+0x234>)
   29c8c:	2000      	movs	r0, #0
   29c8e:	b005      	add	sp, #20
   29c90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29c94:	f3af 8000 	nop.w
   29c98:	be8838d4 	.word	0xbe8838d4
   29c9c:	bda8fae9 	.word	0xbda8fae9
   29ca0:	bdb4b1c4 	.word	0xbdb4b1c4
   29ca4:	3e21ee9e 	.word	0x3e21ee9e
   29ca8:	809c52ad 	.word	0x809c52ad
   29cac:	3e927e4f 	.word	0x3e927e4f
   29cb0:	19cb1590 	.word	0x19cb1590
   29cb4:	3efa01a0 	.word	0x3efa01a0
   29cb8:	16c15177 	.word	0x16c15177
   29cbc:	3f56c16c 	.word	0x3f56c16c
   29cc0:	5555554c 	.word	0x5555554c
   29cc4:	3fa55555 	.word	0x3fa55555
   29cc8:	3fe00000 	.word	0x3fe00000
   29ccc:	3ff00000 	.word	0x3ff00000
   29cd0:	3fd33332 	.word	0x3fd33332
   29cd4:	3fe90000 	.word	0x3fe90000
   29cd8:	3fe70000 	.word	0x3fe70000
   29cdc:	3fd20000 	.word	0x3fd20000

00029ce0 <__kernel_rem_pio2>:
   29ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29ce4:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
   29ce8:	4c9c      	ldr	r4, [pc, #624]	; (29f5c <__kernel_rem_pio2+0x27c>)
   29cea:	9ea2      	ldr	r6, [sp, #648]	; 0x288
   29cec:	4d9c      	ldr	r5, [pc, #624]	; (29f60 <__kernel_rem_pio2+0x280>)
   29cee:	f854 4026 	ldr.w	r4, [r4, r6, lsl #2]
   29cf2:	9405      	str	r4, [sp, #20]
   29cf4:	4626      	mov	r6, r4
   29cf6:	1ed4      	subs	r4, r2, #3
   29cf8:	fb85 7504 	smull	r7, r5, r5, r4
   29cfc:	17e4      	asrs	r4, r4, #31
   29cfe:	ebc4 04a5 	rsb	r4, r4, r5, asr #2
   29d02:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
   29d06:	461d      	mov	r5, r3
   29d08:	9308      	str	r3, [sp, #32]
   29d0a:	1c63      	adds	r3, r4, #1
   29d0c:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
   29d10:	3d01      	subs	r5, #1
   29d12:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   29d16:	9304      	str	r3, [sp, #16]
   29d18:	462b      	mov	r3, r5
   29d1a:	9409      	str	r4, [sp, #36]	; 0x24
   29d1c:	9502      	str	r5, [sp, #8]
   29d1e:	1b65      	subs	r5, r4, r5
   29d20:	18f4      	adds	r4, r6, r3
   29d22:	9003      	str	r0, [sp, #12]
   29d24:	9106      	str	r1, [sp, #24]
   29d26:	d41a      	bmi.n	29d5e <__kernel_rem_pio2+0x7e>
   29d28:	442c      	add	r4, r5
   29d2a:	3401      	adds	r4, #1
   29d2c:	f10d 0878 	add.w	r8, sp, #120	; 0x78
   29d30:	2600      	movs	r6, #0
   29d32:	2700      	movs	r7, #0
   29d34:	f8dd 928c 	ldr.w	r9, [sp, #652]	; 0x28c
   29d38:	e008      	b.n	29d4c <__kernel_rem_pio2+0x6c>
   29d3a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
   29d3e:	f7d6 fe9f 	bl	a80 <__aeabi_i2d>
   29d42:	3501      	adds	r5, #1
   29d44:	42a5      	cmp	r5, r4
   29d46:	e9e8 0102 	strd	r0, r1, [r8, #8]!
   29d4a:	d008      	beq.n	29d5e <__kernel_rem_pio2+0x7e>
   29d4c:	2d00      	cmp	r5, #0
   29d4e:	daf4      	bge.n	29d3a <__kernel_rem_pio2+0x5a>
   29d50:	3501      	adds	r5, #1
   29d52:	4630      	mov	r0, r6
   29d54:	4639      	mov	r1, r7
   29d56:	42a5      	cmp	r5, r4
   29d58:	e9e8 0102 	strd	r0, r1, [r8, #8]!
   29d5c:	d1f6      	bne.n	29d4c <__kernel_rem_pio2+0x6c>
   29d5e:	9b05      	ldr	r3, [sp, #20]
   29d60:	2b00      	cmp	r3, #0
   29d62:	db2e      	blt.n	29dc2 <__kernel_rem_pio2+0xe2>
   29d64:	9b08      	ldr	r3, [sp, #32]
   29d66:	ea4f 09c3 	mov.w	r9, r3, lsl #3
   29d6a:	9b03      	ldr	r3, [sp, #12]
   29d6c:	f1a9 0808 	sub.w	r8, r9, #8
   29d70:	4498      	add	r8, r3
   29d72:	ab20      	add	r3, sp, #128	; 0x80
   29d74:	4499      	add	r9, r3
   29d76:	9b05      	ldr	r3, [sp, #20]
   29d78:	aa70      	add	r2, sp, #448	; 0x1c0
   29d7a:	eb02 0bc3 	add.w	fp, r2, r3, lsl #3
   29d7e:	f50d 7adc 	add.w	sl, sp, #440	; 0x1b8
   29d82:	9b02      	ldr	r3, [sp, #8]
   29d84:	2b00      	cmp	r3, #0
   29d86:	f2c0 830f 	blt.w	2a3a8 <__kernel_rem_pio2+0x6c8>
   29d8a:	9b03      	ldr	r3, [sp, #12]
   29d8c:	464d      	mov	r5, r9
   29d8e:	f1a3 0408 	sub.w	r4, r3, #8
   29d92:	2600      	movs	r6, #0
   29d94:	2700      	movs	r7, #0
   29d96:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
   29d9a:	e9f4 0102 	ldrd	r0, r1, [r4, #8]!
   29d9e:	f7d6 fed5 	bl	b4c <__aeabi_dmul>
   29da2:	4602      	mov	r2, r0
   29da4:	460b      	mov	r3, r1
   29da6:	4630      	mov	r0, r6
   29da8:	4639      	mov	r1, r7
   29daa:	f7d6 fd1d 	bl	7e8 <__adddf3>
   29dae:	4544      	cmp	r4, r8
   29db0:	4606      	mov	r6, r0
   29db2:	460f      	mov	r7, r1
   29db4:	d1ef      	bne.n	29d96 <__kernel_rem_pio2+0xb6>
   29db6:	e9ea 6702 	strd	r6, r7, [sl, #8]!
   29dba:	45da      	cmp	sl, fp
   29dbc:	f109 0908 	add.w	r9, r9, #8
   29dc0:	d1df      	bne.n	29d82 <__kernel_rem_pio2+0xa2>
   29dc2:	9805      	ldr	r0, [sp, #20]
   29dc4:	9a08      	ldr	r2, [sp, #32]
   29dc6:	9000      	str	r0, [sp, #0]
   29dc8:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
   29dcc:	3b01      	subs	r3, #1
   29dce:	009b      	lsls	r3, r3, #2
   29dd0:	ac0c      	add	r4, sp, #48	; 0x30
   29dd2:	1f19      	subs	r1, r3, #4
   29dd4:	4423      	add	r3, r4
   29dd6:	f102 5200 	add.w	r2, r2, #536870912	; 0x20000000
   29dda:	930b      	str	r3, [sp, #44]	; 0x2c
   29ddc:	9b03      	ldr	r3, [sp, #12]
   29dde:	3a01      	subs	r2, #1
   29de0:	4421      	add	r1, r4
   29de2:	910a      	str	r1, [sp, #40]	; 0x28
   29de4:	eb03 0bc2 	add.w	fp, r3, r2, lsl #3
   29de8:	9a00      	ldr	r2, [sp, #0]
   29dea:	a998      	add	r1, sp, #608	; 0x260
   29dec:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
   29df0:	2a00      	cmp	r2, #0
   29df2:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
   29df6:	4613      	mov	r3, r2
   29df8:	dd2b      	ble.n	29e52 <__kernel_rem_pio2+0x172>
   29dfa:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
   29dfe:	f1a8 08a8 	sub.w	r8, r8, #168	; 0xa8
   29e02:	f10d 092c 	add.w	r9, sp, #44	; 0x2c
   29e06:	f50d 7adc 	add.w	sl, sp, #440	; 0x1b8
   29e0a:	2200      	movs	r2, #0
   29e0c:	4b55      	ldr	r3, [pc, #340]	; (29f64 <__kernel_rem_pio2+0x284>)
   29e0e:	4620      	mov	r0, r4
   29e10:	4629      	mov	r1, r5
   29e12:	f7d6 fe9b 	bl	b4c <__aeabi_dmul>
   29e16:	f7d7 f949 	bl	10ac <__aeabi_d2iz>
   29e1a:	f7d6 fe31 	bl	a80 <__aeabi_i2d>
   29e1e:	2200      	movs	r2, #0
   29e20:	4b51      	ldr	r3, [pc, #324]	; (29f68 <__kernel_rem_pio2+0x288>)
   29e22:	4606      	mov	r6, r0
   29e24:	460f      	mov	r7, r1
   29e26:	f7d6 fe91 	bl	b4c <__aeabi_dmul>
   29e2a:	4602      	mov	r2, r0
   29e2c:	460b      	mov	r3, r1
   29e2e:	4620      	mov	r0, r4
   29e30:	4629      	mov	r1, r5
   29e32:	f7d6 fcd7 	bl	7e4 <__aeabi_dsub>
   29e36:	f7d7 f939 	bl	10ac <__aeabi_d2iz>
   29e3a:	e878 2302 	ldrd	r2, r3, [r8], #-8
   29e3e:	f849 0f04 	str.w	r0, [r9, #4]!
   29e42:	4639      	mov	r1, r7
   29e44:	4630      	mov	r0, r6
   29e46:	f7d6 fccf 	bl	7e8 <__adddf3>
   29e4a:	45d0      	cmp	r8, sl
   29e4c:	4604      	mov	r4, r0
   29e4e:	460d      	mov	r5, r1
   29e50:	d1db      	bne.n	29e0a <__kernel_rem_pio2+0x12a>
   29e52:	f8dd 9010 	ldr.w	r9, [sp, #16]
   29e56:	4620      	mov	r0, r4
   29e58:	4629      	mov	r1, r5
   29e5a:	464a      	mov	r2, r9
   29e5c:	f000 fcd0 	bl	2a800 <scalbn>
   29e60:	2200      	movs	r2, #0
   29e62:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   29e66:	4604      	mov	r4, r0
   29e68:	460d      	mov	r5, r1
   29e6a:	f7d6 fe6f 	bl	b4c <__aeabi_dmul>
   29e6e:	f000 fc3b 	bl	2a6e8 <floor>
   29e72:	2200      	movs	r2, #0
   29e74:	4b3d      	ldr	r3, [pc, #244]	; (29f6c <__kernel_rem_pio2+0x28c>)
   29e76:	f7d6 fe69 	bl	b4c <__aeabi_dmul>
   29e7a:	4602      	mov	r2, r0
   29e7c:	460b      	mov	r3, r1
   29e7e:	4620      	mov	r0, r4
   29e80:	4629      	mov	r1, r5
   29e82:	f7d6 fcaf 	bl	7e4 <__aeabi_dsub>
   29e86:	460d      	mov	r5, r1
   29e88:	4604      	mov	r4, r0
   29e8a:	f7d7 f90f 	bl	10ac <__aeabi_d2iz>
   29e8e:	4680      	mov	r8, r0
   29e90:	f7d6 fdf6 	bl	a80 <__aeabi_i2d>
   29e94:	460b      	mov	r3, r1
   29e96:	4602      	mov	r2, r0
   29e98:	4629      	mov	r1, r5
   29e9a:	4620      	mov	r0, r4
   29e9c:	f7d6 fca2 	bl	7e4 <__aeabi_dsub>
   29ea0:	464b      	mov	r3, r9
   29ea2:	2b00      	cmp	r3, #0
   29ea4:	4606      	mov	r6, r0
   29ea6:	460f      	mov	r7, r1
   29ea8:	f340 80f7 	ble.w	2a09a <__kernel_rem_pio2+0x3ba>
   29eac:	9a00      	ldr	r2, [sp, #0]
   29eae:	a90c      	add	r1, sp, #48	; 0x30
   29eb0:	3a01      	subs	r2, #1
   29eb2:	f1c9 0318 	rsb	r3, r9, #24
   29eb6:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
   29eba:	fa45 f103 	asr.w	r1, r5, r3
   29ebe:	fa01 f303 	lsl.w	r3, r1, r3
   29ec2:	a80c      	add	r0, sp, #48	; 0x30
   29ec4:	1aeb      	subs	r3, r5, r3
   29ec6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
   29eca:	f1c9 0517 	rsb	r5, r9, #23
   29ece:	4488      	add	r8, r1
   29ed0:	fa43 f505 	asr.w	r5, r3, r5
   29ed4:	2d00      	cmp	r5, #0
   29ed6:	dd63      	ble.n	29fa0 <__kernel_rem_pio2+0x2c0>
   29ed8:	9b00      	ldr	r3, [sp, #0]
   29eda:	2b00      	cmp	r3, #0
   29edc:	f108 0801 	add.w	r8, r8, #1
   29ee0:	f340 8281 	ble.w	2a3e6 <__kernel_rem_pio2+0x706>
   29ee4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   29ee6:	2c00      	cmp	r4, #0
   29ee8:	f000 8318 	beq.w	2a51c <__kernel_rem_pio2+0x83c>
   29eec:	2001      	movs	r0, #1
   29eee:	2300      	movs	r3, #0
   29ef0:	aa0c      	add	r2, sp, #48	; 0x30
   29ef2:	f1c4 7480 	rsb	r4, r4, #16777216	; 0x1000000
   29ef6:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
   29efa:	9a00      	ldr	r2, [sp, #0]
   29efc:	4282      	cmp	r2, r0
   29efe:	dd19      	ble.n	29f34 <__kernel_rem_pio2+0x254>
   29f00:	aa0c      	add	r2, sp, #48	; 0x30
   29f02:	ac0c      	add	r4, sp, #48	; 0x30
   29f04:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
   29f08:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
   29f0c:	1a51      	subs	r1, r2, r1
   29f0e:	f844 1020 	str.w	r1, [r4, r0, lsl #2]
   29f12:	9900      	ldr	r1, [sp, #0]
   29f14:	3302      	adds	r3, #2
   29f16:	4299      	cmp	r1, r3
   29f18:	dd0c      	ble.n	29f34 <__kernel_rem_pio2+0x254>
   29f1a:	4610      	mov	r0, r2
   29f1c:	9a00      	ldr	r2, [sp, #0]
   29f1e:	a90c      	add	r1, sp, #48	; 0x30
   29f20:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   29f24:	eb01 0182 	add.w	r1, r1, r2, lsl #2
   29f28:	681a      	ldr	r2, [r3, #0]
   29f2a:	1a82      	subs	r2, r0, r2
   29f2c:	f843 2b04 	str.w	r2, [r3], #4
   29f30:	428b      	cmp	r3, r1
   29f32:	d1f9      	bne.n	29f28 <__kernel_rem_pio2+0x248>
   29f34:	9b04      	ldr	r3, [sp, #16]
   29f36:	2b00      	cmp	r3, #0
   29f38:	dd1a      	ble.n	29f70 <__kernel_rem_pio2+0x290>
   29f3a:	9b04      	ldr	r3, [sp, #16]
   29f3c:	2b01      	cmp	r3, #1
   29f3e:	f04f 0401 	mov.w	r4, #1
   29f42:	f040 8258 	bne.w	2a3f6 <__kernel_rem_pio2+0x716>
   29f46:	9b00      	ldr	r3, [sp, #0]
   29f48:	1e5a      	subs	r2, r3, #1
   29f4a:	ab0c      	add	r3, sp, #48	; 0x30
   29f4c:	a90c      	add	r1, sp, #48	; 0x30
   29f4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   29f52:	f3c3 0316 	ubfx	r3, r3, #0, #23
   29f56:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
   29f5a:	e258      	b.n	2a40e <__kernel_rem_pio2+0x72e>
   29f5c:	000312a0 	.word	0x000312a0
   29f60:	2aaaaaab 	.word	0x2aaaaaab
   29f64:	3e700000 	.word	0x3e700000
   29f68:	41700000 	.word	0x41700000
   29f6c:	40200000 	.word	0x40200000
   29f70:	2d02      	cmp	r5, #2
   29f72:	d115      	bne.n	29fa0 <__kernel_rem_pio2+0x2c0>
   29f74:	4632      	mov	r2, r6
   29f76:	463b      	mov	r3, r7
   29f78:	2000      	movs	r0, #0
   29f7a:	4997      	ldr	r1, [pc, #604]	; (2a1d8 <__kernel_rem_pio2+0x4f8>)
   29f7c:	f7d6 fc32 	bl	7e4 <__aeabi_dsub>
   29f80:	4606      	mov	r6, r0
   29f82:	460f      	mov	r7, r1
   29f84:	9a04      	ldr	r2, [sp, #16]
   29f86:	4994      	ldr	r1, [pc, #592]	; (2a1d8 <__kernel_rem_pio2+0x4f8>)
   29f88:	2000      	movs	r0, #0
   29f8a:	f000 fc39 	bl	2a800 <scalbn>
   29f8e:	4602      	mov	r2, r0
   29f90:	460b      	mov	r3, r1
   29f92:	4630      	mov	r0, r6
   29f94:	4639      	mov	r1, r7
   29f96:	f7d6 fc25 	bl	7e4 <__aeabi_dsub>
   29f9a:	2502      	movs	r5, #2
   29f9c:	4606      	mov	r6, r0
   29f9e:	460f      	mov	r7, r1
   29fa0:	2200      	movs	r2, #0
   29fa2:	2300      	movs	r3, #0
   29fa4:	4630      	mov	r0, r6
   29fa6:	4639      	mov	r1, r7
   29fa8:	f7d7 f838 	bl	101c <__aeabi_dcmpeq>
   29fac:	2800      	cmp	r0, #0
   29fae:	f000 8252 	beq.w	2a456 <__kernel_rem_pio2+0x776>
   29fb2:	9a00      	ldr	r2, [sp, #0]
   29fb4:	9b05      	ldr	r3, [sp, #20]
   29fb6:	1e50      	subs	r0, r2, #1
   29fb8:	4283      	cmp	r3, r0
   29fba:	dc0f      	bgt.n	29fdc <__kernel_rem_pio2+0x2fc>
   29fbc:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
   29fc0:	3b01      	subs	r3, #1
   29fc2:	aa0c      	add	r2, sp, #48	; 0x30
   29fc4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   29fc6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   29fca:	2200      	movs	r2, #0
   29fcc:	f853 1904 	ldr.w	r1, [r3], #-4
   29fd0:	42a3      	cmp	r3, r4
   29fd2:	ea42 0201 	orr.w	r2, r2, r1
   29fd6:	d1f9      	bne.n	29fcc <__kernel_rem_pio2+0x2ec>
   29fd8:	2a00      	cmp	r2, #0
   29fda:	d16f      	bne.n	2a0bc <__kernel_rem_pio2+0x3dc>
   29fdc:	9b05      	ldr	r3, [sp, #20]
   29fde:	aa0c      	add	r2, sp, #48	; 0x30
   29fe0:	3b01      	subs	r3, #1
   29fe2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   29fe6:	2b00      	cmp	r3, #0
   29fe8:	f040 8233 	bne.w	2a452 <__kernel_rem_pio2+0x772>
   29fec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   29fee:	2301      	movs	r3, #1
   29ff0:	f852 1904 	ldr.w	r1, [r2], #-4
   29ff4:	3301      	adds	r3, #1
   29ff6:	2900      	cmp	r1, #0
   29ff8:	d0fa      	beq.n	29ff0 <__kernel_rem_pio2+0x310>
   29ffa:	9a00      	ldr	r2, [sp, #0]
   29ffc:	18d3      	adds	r3, r2, r3
   29ffe:	f102 0a01 	add.w	sl, r2, #1
   2a002:	459a      	cmp	sl, r3
   2a004:	9307      	str	r3, [sp, #28]
   2a006:	dc3d      	bgt.n	2a084 <__kernel_rem_pio2+0x3a4>
   2a008:	9b00      	ldr	r3, [sp, #0]
   2a00a:	9908      	ldr	r1, [sp, #32]
   2a00c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2a00e:	440b      	add	r3, r1
   2a010:	9907      	ldr	r1, [sp, #28]
   2a012:	eb0a 0802 	add.w	r8, sl, r2
   2a016:	4699      	mov	r9, r3
   2a018:	ab20      	add	r3, sp, #128	; 0x80
   2a01a:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
   2a01e:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   2a022:	188b      	adds	r3, r1, r2
   2a024:	9aa3      	ldr	r2, [sp, #652]	; 0x28c
   2a026:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   2a02a:	eb02 0888 	add.w	r8, r2, r8, lsl #2
   2a02e:	aa70      	add	r2, sp, #448	; 0x1c0
   2a030:	eb02 0aca 	add.w	sl, r2, sl, lsl #3
   2a034:	9aa3      	ldr	r2, [sp, #652]	; 0x28c
   2a036:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   2a03a:	9300      	str	r3, [sp, #0]
   2a03c:	f858 0f04 	ldr.w	r0, [r8, #4]!
   2a040:	f7d6 fd1e 	bl	a80 <__aeabi_i2d>
   2a044:	9b02      	ldr	r3, [sp, #8]
   2a046:	2b00      	cmp	r3, #0
   2a048:	e8e9 0102 	strd	r0, r1, [r9], #8
   2a04c:	db1d      	blt.n	2a08a <__kernel_rem_pio2+0x3aa>
   2a04e:	9b03      	ldr	r3, [sp, #12]
   2a050:	464d      	mov	r5, r9
   2a052:	f1a3 0408 	sub.w	r4, r3, #8
   2a056:	2600      	movs	r6, #0
   2a058:	2700      	movs	r7, #0
   2a05a:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
   2a05e:	e9f4 0102 	ldrd	r0, r1, [r4, #8]!
   2a062:	f7d6 fd73 	bl	b4c <__aeabi_dmul>
   2a066:	4602      	mov	r2, r0
   2a068:	460b      	mov	r3, r1
   2a06a:	4630      	mov	r0, r6
   2a06c:	4639      	mov	r1, r7
   2a06e:	f7d6 fbbb 	bl	7e8 <__adddf3>
   2a072:	455c      	cmp	r4, fp
   2a074:	4606      	mov	r6, r0
   2a076:	460f      	mov	r7, r1
   2a078:	d1ef      	bne.n	2a05a <__kernel_rem_pio2+0x37a>
   2a07a:	9b00      	ldr	r3, [sp, #0]
   2a07c:	4598      	cmp	r8, r3
   2a07e:	e8ea 6702 	strd	r6, r7, [sl], #8
   2a082:	d1db      	bne.n	2a03c <__kernel_rem_pio2+0x35c>
   2a084:	9b07      	ldr	r3, [sp, #28]
   2a086:	9300      	str	r3, [sp, #0]
   2a088:	e6ae      	b.n	29de8 <__kernel_rem_pio2+0x108>
   2a08a:	9b00      	ldr	r3, [sp, #0]
   2a08c:	2600      	movs	r6, #0
   2a08e:	2700      	movs	r7, #0
   2a090:	4598      	cmp	r8, r3
   2a092:	e8ea 6702 	strd	r6, r7, [sl], #8
   2a096:	d1d1      	bne.n	2a03c <__kernel_rem_pio2+0x35c>
   2a098:	e7f4      	b.n	2a084 <__kernel_rem_pio2+0x3a4>
   2a09a:	d106      	bne.n	2a0aa <__kernel_rem_pio2+0x3ca>
   2a09c:	9b00      	ldr	r3, [sp, #0]
   2a09e:	aa0c      	add	r2, sp, #48	; 0x30
   2a0a0:	3b01      	subs	r3, #1
   2a0a2:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   2a0a6:	15ed      	asrs	r5, r5, #23
   2a0a8:	e714      	b.n	29ed4 <__kernel_rem_pio2+0x1f4>
   2a0aa:	2200      	movs	r2, #0
   2a0ac:	4b4b      	ldr	r3, [pc, #300]	; (2a1dc <__kernel_rem_pio2+0x4fc>)
   2a0ae:	f7d6 ffd3 	bl	1058 <__aeabi_dcmpge>
   2a0b2:	2800      	cmp	r0, #0
   2a0b4:	f040 8182 	bne.w	2a3bc <__kernel_rem_pio2+0x6dc>
   2a0b8:	4605      	mov	r5, r0
   2a0ba:	e771      	b.n	29fa0 <__kernel_rem_pio2+0x2c0>
   2a0bc:	a90c      	add	r1, sp, #48	; 0x30
   2a0be:	9502      	str	r5, [sp, #8]
   2a0c0:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
   2a0c4:	9904      	ldr	r1, [sp, #16]
   2a0c6:	f8cd 801c 	str.w	r8, [sp, #28]
   2a0ca:	3918      	subs	r1, #24
   2a0cc:	4602      	mov	r2, r0
   2a0ce:	9000      	str	r0, [sp, #0]
   2a0d0:	9104      	str	r1, [sp, #16]
   2a0d2:	b96b      	cbnz	r3, 2a0f0 <__kernel_rem_pio2+0x410>
   2a0d4:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
   2a0d8:	3b01      	subs	r3, #1
   2a0da:	a80c      	add	r0, sp, #48	; 0x30
   2a0dc:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   2a0e0:	f853 0904 	ldr.w	r0, [r3], #-4
   2a0e4:	3a01      	subs	r2, #1
   2a0e6:	3918      	subs	r1, #24
   2a0e8:	2800      	cmp	r0, #0
   2a0ea:	d0f9      	beq.n	2a0e0 <__kernel_rem_pio2+0x400>
   2a0ec:	9200      	str	r2, [sp, #0]
   2a0ee:	9104      	str	r1, [sp, #16]
   2a0f0:	9a04      	ldr	r2, [sp, #16]
   2a0f2:	4939      	ldr	r1, [pc, #228]	; (2a1d8 <__kernel_rem_pio2+0x4f8>)
   2a0f4:	2000      	movs	r0, #0
   2a0f6:	f000 fb83 	bl	2a800 <scalbn>
   2a0fa:	9b00      	ldr	r3, [sp, #0]
   2a0fc:	2b00      	cmp	r3, #0
   2a0fe:	4604      	mov	r4, r0
   2a100:	460d      	mov	r5, r1
   2a102:	f2c0 8203 	blt.w	2a50c <__kernel_rem_pio2+0x82c>
   2a106:	00da      	lsls	r2, r3, #3
   2a108:	a970      	add	r1, sp, #448	; 0x1c0
   2a10a:	eb01 0b02 	add.w	fp, r1, r2
   2a10e:	9204      	str	r2, [sp, #16]
   2a110:	aa0c      	add	r2, sp, #48	; 0x30
   2a112:	eb02 0683 	add.w	r6, r2, r3, lsl #2
   2a116:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 2a1e0 <__kernel_rem_pio2+0x500>
   2a11a:	f10b 0708 	add.w	r7, fp, #8
   2a11e:	3604      	adds	r6, #4
   2a120:	f04f 0800 	mov.w	r8, #0
   2a124:	f856 0d04 	ldr.w	r0, [r6, #-4]!
   2a128:	f7d6 fcaa 	bl	a80 <__aeabi_i2d>
   2a12c:	4622      	mov	r2, r4
   2a12e:	462b      	mov	r3, r5
   2a130:	f7d6 fd0c 	bl	b4c <__aeabi_dmul>
   2a134:	464b      	mov	r3, r9
   2a136:	e967 0102 	strd	r0, r1, [r7, #-8]!
   2a13a:	4642      	mov	r2, r8
   2a13c:	4620      	mov	r0, r4
   2a13e:	4629      	mov	r1, r5
   2a140:	f7d6 fd04 	bl	b4c <__aeabi_dmul>
   2a144:	ab0c      	add	r3, sp, #48	; 0x30
   2a146:	429e      	cmp	r6, r3
   2a148:	4604      	mov	r4, r0
   2a14a:	460d      	mov	r5, r1
   2a14c:	d1ea      	bne.n	2a124 <__kernel_rem_pio2+0x444>
   2a14e:	f50d 7a90 	add.w	sl, sp, #288	; 0x120
   2a152:	f8cd a00c 	str.w	sl, [sp, #12]
   2a156:	f8dd a014 	ldr.w	sl, [sp, #20]
   2a15a:	f04f 0900 	mov.w	r9, #0
   2a15e:	f1ba 0f00 	cmp.w	sl, #0
   2a162:	f2c0 813d 	blt.w	2a3e0 <__kernel_rem_pio2+0x700>
   2a166:	f8df 807c 	ldr.w	r8, [pc, #124]	; 2a1e4 <__kernel_rem_pio2+0x504>
   2a16a:	465d      	mov	r5, fp
   2a16c:	a118      	add	r1, pc, #96	; (adr r1, 2a1d0 <__kernel_rem_pio2+0x4f0>)
   2a16e:	e9d1 0100 	ldrd	r0, r1, [r1]
   2a172:	2600      	movs	r6, #0
   2a174:	2700      	movs	r7, #0
   2a176:	2400      	movs	r4, #0
   2a178:	e003      	b.n	2a182 <__kernel_rem_pio2+0x4a2>
   2a17a:	454c      	cmp	r4, r9
   2a17c:	dc10      	bgt.n	2a1a0 <__kernel_rem_pio2+0x4c0>
   2a17e:	e8f8 0102 	ldrd	r0, r1, [r8], #8
   2a182:	e8f5 2302 	ldrd	r2, r3, [r5], #8
   2a186:	f7d6 fce1 	bl	b4c <__aeabi_dmul>
   2a18a:	4602      	mov	r2, r0
   2a18c:	460b      	mov	r3, r1
   2a18e:	4630      	mov	r0, r6
   2a190:	4639      	mov	r1, r7
   2a192:	f7d6 fb29 	bl	7e8 <__adddf3>
   2a196:	3401      	adds	r4, #1
   2a198:	45a2      	cmp	sl, r4
   2a19a:	4606      	mov	r6, r0
   2a19c:	460f      	mov	r7, r1
   2a19e:	daec      	bge.n	2a17a <__kernel_rem_pio2+0x49a>
   2a1a0:	9b03      	ldr	r3, [sp, #12]
   2a1a2:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
   2a1a6:	f1ab 0b08 	sub.w	fp, fp, #8
   2a1aa:	e9c3 6700 	strd	r6, r7, [r3]
   2a1ae:	ab6e      	add	r3, sp, #440	; 0x1b8
   2a1b0:	455b      	cmp	r3, fp
   2a1b2:	f109 0901 	add.w	r9, r9, #1
   2a1b6:	d1d2      	bne.n	2a15e <__kernel_rem_pio2+0x47e>
   2a1b8:	9ba2      	ldr	r3, [sp, #648]	; 0x288
   2a1ba:	f8dd a00c 	ldr.w	sl, [sp, #12]
   2a1be:	2b03      	cmp	r3, #3
   2a1c0:	f200 808b 	bhi.w	2a2da <__kernel_rem_pio2+0x5fa>
   2a1c4:	e8df f013 	tbh	[pc, r3, lsl #1]
   2a1c8:	009000d1 	.word	0x009000d1
   2a1cc:	00100090 	.word	0x00100090
   2a1d0:	40000000 	.word	0x40000000
   2a1d4:	3ff921fb 	.word	0x3ff921fb
   2a1d8:	3ff00000 	.word	0x3ff00000
   2a1dc:	3fe00000 	.word	0x3fe00000
   2a1e0:	3e700000 	.word	0x3e700000
   2a1e4:	00031268 	.word	0x00031268
   2a1e8:	9b00      	ldr	r3, [sp, #0]
   2a1ea:	2b00      	cmp	r3, #0
   2a1ec:	f340 81a4 	ble.w	2a538 <__kernel_rem_pio2+0x858>
   2a1f0:	9b04      	ldr	r3, [sp, #16]
   2a1f2:	eb0a 0803 	add.w	r8, sl, r3
   2a1f6:	e9d8 6700 	ldrd	r6, r7, [r8]
   2a1fa:	46d3      	mov	fp, sl
   2a1fc:	e958 9a02 	ldrd	r9, sl, [r8, #-8]
   2a200:	4632      	mov	r2, r6
   2a202:	463b      	mov	r3, r7
   2a204:	4648      	mov	r0, r9
   2a206:	4651      	mov	r1, sl
   2a208:	f7d6 faee 	bl	7e8 <__adddf3>
   2a20c:	4604      	mov	r4, r0
   2a20e:	460d      	mov	r5, r1
   2a210:	4602      	mov	r2, r0
   2a212:	460b      	mov	r3, r1
   2a214:	4648      	mov	r0, r9
   2a216:	4651      	mov	r1, sl
   2a218:	f7d6 fae4 	bl	7e4 <__aeabi_dsub>
   2a21c:	4632      	mov	r2, r6
   2a21e:	463b      	mov	r3, r7
   2a220:	f7d6 fae2 	bl	7e8 <__adddf3>
   2a224:	e9c8 0100 	strd	r0, r1, [r8]
   2a228:	e968 4502 	strd	r4, r5, [r8, #-8]!
   2a22c:	45c3      	cmp	fp, r8
   2a22e:	4626      	mov	r6, r4
   2a230:	462f      	mov	r7, r5
   2a232:	d1e3      	bne.n	2a1fc <__kernel_rem_pio2+0x51c>
   2a234:	9b00      	ldr	r3, [sp, #0]
   2a236:	2b01      	cmp	r3, #1
   2a238:	46da      	mov	sl, fp
   2a23a:	f340 817d 	ble.w	2a538 <__kernel_rem_pio2+0x858>
   2a23e:	9b04      	ldr	r3, [sp, #16]
   2a240:	445b      	add	r3, fp
   2a242:	e9d3 6700 	ldrd	r6, r7, [r3]
   2a246:	4698      	mov	r8, r3
   2a248:	4699      	mov	r9, r3
   2a24a:	f50d 7b94 	add.w	fp, sp, #296	; 0x128
   2a24e:	e959 3402 	ldrd	r3, r4, [r9, #-8]
   2a252:	4632      	mov	r2, r6
   2a254:	4618      	mov	r0, r3
   2a256:	4621      	mov	r1, r4
   2a258:	463b      	mov	r3, r7
   2a25a:	e9cd 0100 	strd	r0, r1, [sp]
   2a25e:	f7d6 fac3 	bl	7e8 <__adddf3>
   2a262:	4604      	mov	r4, r0
   2a264:	460d      	mov	r5, r1
   2a266:	4602      	mov	r2, r0
   2a268:	460b      	mov	r3, r1
   2a26a:	e9dd 0100 	ldrd	r0, r1, [sp]
   2a26e:	f7d6 fab9 	bl	7e4 <__aeabi_dsub>
   2a272:	4632      	mov	r2, r6
   2a274:	463b      	mov	r3, r7
   2a276:	f7d6 fab7 	bl	7e8 <__adddf3>
   2a27a:	e9c9 0100 	strd	r0, r1, [r9]
   2a27e:	e969 4502 	strd	r4, r5, [r9, #-8]!
   2a282:	45cb      	cmp	fp, r9
   2a284:	4626      	mov	r6, r4
   2a286:	462f      	mov	r7, r5
   2a288:	d1e1      	bne.n	2a24e <__kernel_rem_pio2+0x56e>
   2a28a:	2300      	movs	r3, #0
   2a28c:	f108 0808 	add.w	r8, r8, #8
   2a290:	461d      	mov	r5, r3
   2a292:	ac4c      	add	r4, sp, #304	; 0x130
   2a294:	4618      	mov	r0, r3
   2a296:	4629      	mov	r1, r5
   2a298:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
   2a29c:	f7d6 faa4 	bl	7e8 <__adddf3>
   2a2a0:	4544      	cmp	r4, r8
   2a2a2:	4603      	mov	r3, r0
   2a2a4:	460d      	mov	r5, r1
   2a2a6:	d1f5      	bne.n	2a294 <__kernel_rem_pio2+0x5b4>
   2a2a8:	9a02      	ldr	r2, [sp, #8]
   2a2aa:	2a00      	cmp	r2, #0
   2a2ac:	f000 8120 	beq.w	2a4f0 <__kernel_rem_pio2+0x810>
   2a2b0:	f8da 4004 	ldr.w	r4, [sl, #4]
   2a2b4:	f8da 200c 	ldr.w	r2, [sl, #12]
   2a2b8:	9f06      	ldr	r7, [sp, #24]
   2a2ba:	f8da 1000 	ldr.w	r1, [sl]
   2a2be:	f8da 0008 	ldr.w	r0, [sl, #8]
   2a2c2:	613b      	str	r3, [r7, #16]
   2a2c4:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
   2a2c8:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
   2a2cc:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
   2a2d0:	617d      	str	r5, [r7, #20]
   2a2d2:	607c      	str	r4, [r7, #4]
   2a2d4:	60fa      	str	r2, [r7, #12]
   2a2d6:	6039      	str	r1, [r7, #0]
   2a2d8:	60b8      	str	r0, [r7, #8]
   2a2da:	9b07      	ldr	r3, [sp, #28]
   2a2dc:	f003 0007 	and.w	r0, r3, #7
   2a2e0:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
   2a2e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a2e8:	9c04      	ldr	r4, [sp, #16]
   2a2ea:	2600      	movs	r6, #0
   2a2ec:	3408      	adds	r4, #8
   2a2ee:	4454      	add	r4, sl
   2a2f0:	4633      	mov	r3, r6
   2a2f2:	4630      	mov	r0, r6
   2a2f4:	4619      	mov	r1, r3
   2a2f6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
   2a2fa:	f7d6 fa75 	bl	7e8 <__adddf3>
   2a2fe:	4554      	cmp	r4, sl
   2a300:	4606      	mov	r6, r0
   2a302:	460b      	mov	r3, r1
   2a304:	d1f5      	bne.n	2a2f2 <__kernel_rem_pio2+0x612>
   2a306:	9a02      	ldr	r2, [sp, #8]
   2a308:	4630      	mov	r0, r6
   2a30a:	4619      	mov	r1, r3
   2a30c:	2a00      	cmp	r2, #0
   2a30e:	f000 80da 	beq.w	2a4c6 <__kernel_rem_pio2+0x7e6>
   2a312:	9806      	ldr	r0, [sp, #24]
   2a314:	f103 4400 	add.w	r4, r3, #2147483648	; 0x80000000
   2a318:	4632      	mov	r2, r6
   2a31a:	6044      	str	r4, [r0, #4]
   2a31c:	6006      	str	r6, [r0, #0]
   2a31e:	e9da 0100 	ldrd	r0, r1, [sl]
   2a322:	f7d6 fa5f 	bl	7e4 <__aeabi_dsub>
   2a326:	460b      	mov	r3, r1
   2a328:	9900      	ldr	r1, [sp, #0]
   2a32a:	2900      	cmp	r1, #0
   2a32c:	4602      	mov	r2, r0
   2a32e:	dd0e      	ble.n	2a34e <__kernel_rem_pio2+0x66e>
   2a330:	2401      	movs	r4, #1
   2a332:	4610      	mov	r0, r2
   2a334:	4619      	mov	r1, r3
   2a336:	e9fa 2302 	ldrd	r2, r3, [sl, #8]!
   2a33a:	f7d6 fa55 	bl	7e8 <__adddf3>
   2a33e:	460b      	mov	r3, r1
   2a340:	9900      	ldr	r1, [sp, #0]
   2a342:	3401      	adds	r4, #1
   2a344:	42a1      	cmp	r1, r4
   2a346:	4602      	mov	r2, r0
   2a348:	daf3      	bge.n	2a332 <__kernel_rem_pio2+0x652>
   2a34a:	9902      	ldr	r1, [sp, #8]
   2a34c:	b109      	cbz	r1, 2a352 <__kernel_rem_pio2+0x672>
   2a34e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
   2a352:	4619      	mov	r1, r3
   2a354:	9b06      	ldr	r3, [sp, #24]
   2a356:	4610      	mov	r0, r2
   2a358:	e9c3 0102 	strd	r0, r1, [r3, #8]
   2a35c:	9b07      	ldr	r3, [sp, #28]
   2a35e:	f003 0007 	and.w	r0, r3, #7
   2a362:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
   2a366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a36a:	9c04      	ldr	r4, [sp, #16]
   2a36c:	2200      	movs	r2, #0
   2a36e:	3408      	adds	r4, #8
   2a370:	4454      	add	r4, sl
   2a372:	4613      	mov	r3, r2
   2a374:	4610      	mov	r0, r2
   2a376:	4619      	mov	r1, r3
   2a378:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
   2a37c:	f7d6 fa34 	bl	7e8 <__adddf3>
   2a380:	45a2      	cmp	sl, r4
   2a382:	4602      	mov	r2, r0
   2a384:	460b      	mov	r3, r1
   2a386:	d1f5      	bne.n	2a374 <__kernel_rem_pio2+0x694>
   2a388:	9902      	ldr	r1, [sp, #8]
   2a38a:	b109      	cbz	r1, 2a390 <__kernel_rem_pio2+0x6b0>
   2a38c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
   2a390:	4619      	mov	r1, r3
   2a392:	9b06      	ldr	r3, [sp, #24]
   2a394:	4610      	mov	r0, r2
   2a396:	e9c3 0100 	strd	r0, r1, [r3]
   2a39a:	9b07      	ldr	r3, [sp, #28]
   2a39c:	f003 0007 	and.w	r0, r3, #7
   2a3a0:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
   2a3a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a3a8:	2600      	movs	r6, #0
   2a3aa:	2700      	movs	r7, #0
   2a3ac:	e9ea 6702 	strd	r6, r7, [sl, #8]!
   2a3b0:	45da      	cmp	sl, fp
   2a3b2:	f109 0908 	add.w	r9, r9, #8
   2a3b6:	f47f ace4 	bne.w	29d82 <__kernel_rem_pio2+0xa2>
   2a3ba:	e502      	b.n	29dc2 <__kernel_rem_pio2+0xe2>
   2a3bc:	9b00      	ldr	r3, [sp, #0]
   2a3be:	2b00      	cmp	r3, #0
   2a3c0:	f108 0801 	add.w	r8, r8, #1
   2a3c4:	bfc8      	it	gt
   2a3c6:	2502      	movgt	r5, #2
   2a3c8:	f73f ad8c 	bgt.w	29ee4 <__kernel_rem_pio2+0x204>
   2a3cc:	4632      	mov	r2, r6
   2a3ce:	463b      	mov	r3, r7
   2a3d0:	2000      	movs	r0, #0
   2a3d2:	4963      	ldr	r1, [pc, #396]	; (2a560 <__kernel_rem_pio2+0x880>)
   2a3d4:	f7d6 fa06 	bl	7e4 <__aeabi_dsub>
   2a3d8:	2502      	movs	r5, #2
   2a3da:	4606      	mov	r6, r0
   2a3dc:	460f      	mov	r7, r1
   2a3de:	e5df      	b.n	29fa0 <__kernel_rem_pio2+0x2c0>
   2a3e0:	2600      	movs	r6, #0
   2a3e2:	2700      	movs	r7, #0
   2a3e4:	e6dc      	b.n	2a1a0 <__kernel_rem_pio2+0x4c0>
   2a3e6:	9b04      	ldr	r3, [sp, #16]
   2a3e8:	2b00      	cmp	r3, #0
   2a3ea:	dd26      	ble.n	2a43a <__kernel_rem_pio2+0x75a>
   2a3ec:	2400      	movs	r4, #0
   2a3ee:	9b04      	ldr	r3, [sp, #16]
   2a3f0:	2b01      	cmp	r3, #1
   2a3f2:	f43f ada8 	beq.w	29f46 <__kernel_rem_pio2+0x266>
   2a3f6:	2b02      	cmp	r3, #2
   2a3f8:	d109      	bne.n	2a40e <__kernel_rem_pio2+0x72e>
   2a3fa:	9b00      	ldr	r3, [sp, #0]
   2a3fc:	1e5a      	subs	r2, r3, #1
   2a3fe:	ab0c      	add	r3, sp, #48	; 0x30
   2a400:	a90c      	add	r1, sp, #48	; 0x30
   2a402:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   2a406:	f3c3 0315 	ubfx	r3, r3, #0, #22
   2a40a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
   2a40e:	2d02      	cmp	r5, #2
   2a410:	f47f adc6 	bne.w	29fa0 <__kernel_rem_pio2+0x2c0>
   2a414:	4632      	mov	r2, r6
   2a416:	463b      	mov	r3, r7
   2a418:	2000      	movs	r0, #0
   2a41a:	4951      	ldr	r1, [pc, #324]	; (2a560 <__kernel_rem_pio2+0x880>)
   2a41c:	f7d6 f9e2 	bl	7e4 <__aeabi_dsub>
   2a420:	4606      	mov	r6, r0
   2a422:	460f      	mov	r7, r1
   2a424:	2c00      	cmp	r4, #0
   2a426:	f43f adbb 	beq.w	29fa0 <__kernel_rem_pio2+0x2c0>
   2a42a:	e5ab      	b.n	29f84 <__kernel_rem_pio2+0x2a4>
   2a42c:	9900      	ldr	r1, [sp, #0]
   2a42e:	3301      	adds	r3, #1
   2a430:	4299      	cmp	r1, r3
   2a432:	d178      	bne.n	2a526 <__kernel_rem_pio2+0x846>
   2a434:	9b04      	ldr	r3, [sp, #16]
   2a436:	2b00      	cmp	r3, #0
   2a438:	dcd9      	bgt.n	2a3ee <__kernel_rem_pio2+0x70e>
   2a43a:	2d02      	cmp	r5, #2
   2a43c:	f47f adb0 	bne.w	29fa0 <__kernel_rem_pio2+0x2c0>
   2a440:	4632      	mov	r2, r6
   2a442:	463b      	mov	r3, r7
   2a444:	2000      	movs	r0, #0
   2a446:	4946      	ldr	r1, [pc, #280]	; (2a560 <__kernel_rem_pio2+0x880>)
   2a448:	f7d6 f9cc 	bl	7e4 <__aeabi_dsub>
   2a44c:	4606      	mov	r6, r0
   2a44e:	460f      	mov	r7, r1
   2a450:	e5a6      	b.n	29fa0 <__kernel_rem_pio2+0x2c0>
   2a452:	2301      	movs	r3, #1
   2a454:	e5d1      	b.n	29ffa <__kernel_rem_pio2+0x31a>
   2a456:	4639      	mov	r1, r7
   2a458:	9f04      	ldr	r7, [sp, #16]
   2a45a:	9502      	str	r5, [sp, #8]
   2a45c:	427a      	negs	r2, r7
   2a45e:	4630      	mov	r0, r6
   2a460:	f8cd 801c 	str.w	r8, [sp, #28]
   2a464:	f000 f9cc 	bl	2a800 <scalbn>
   2a468:	2200      	movs	r2, #0
   2a46a:	4b3e      	ldr	r3, [pc, #248]	; (2a564 <__kernel_rem_pio2+0x884>)
   2a46c:	4604      	mov	r4, r0
   2a46e:	460d      	mov	r5, r1
   2a470:	f7d6 fdf2 	bl	1058 <__aeabi_dcmpge>
   2a474:	2800      	cmp	r0, #0
   2a476:	d062      	beq.n	2a53e <__kernel_rem_pio2+0x85e>
   2a478:	2200      	movs	r2, #0
   2a47a:	4b3b      	ldr	r3, [pc, #236]	; (2a568 <__kernel_rem_pio2+0x888>)
   2a47c:	4620      	mov	r0, r4
   2a47e:	4629      	mov	r1, r5
   2a480:	f7d6 fb64 	bl	b4c <__aeabi_dmul>
   2a484:	f7d6 fe12 	bl	10ac <__aeabi_d2iz>
   2a488:	4606      	mov	r6, r0
   2a48a:	f7d6 faf9 	bl	a80 <__aeabi_i2d>
   2a48e:	2200      	movs	r2, #0
   2a490:	4b34      	ldr	r3, [pc, #208]	; (2a564 <__kernel_rem_pio2+0x884>)
   2a492:	f7d6 fb5b 	bl	b4c <__aeabi_dmul>
   2a496:	4602      	mov	r2, r0
   2a498:	460b      	mov	r3, r1
   2a49a:	4620      	mov	r0, r4
   2a49c:	4629      	mov	r1, r5
   2a49e:	f7d6 f9a1 	bl	7e4 <__aeabi_dsub>
   2a4a2:	f7d6 fe03 	bl	10ac <__aeabi_d2iz>
   2a4a6:	9900      	ldr	r1, [sp, #0]
   2a4a8:	460b      	mov	r3, r1
   2a4aa:	3301      	adds	r3, #1
   2a4ac:	461a      	mov	r2, r3
   2a4ae:	9300      	str	r3, [sp, #0]
   2a4b0:	463b      	mov	r3, r7
   2a4b2:	3318      	adds	r3, #24
   2a4b4:	9304      	str	r3, [sp, #16]
   2a4b6:	460b      	mov	r3, r1
   2a4b8:	a90c      	add	r1, sp, #48	; 0x30
   2a4ba:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
   2a4be:	4613      	mov	r3, r2
   2a4c0:	f841 6023 	str.w	r6, [r1, r3, lsl #2]
   2a4c4:	e614      	b.n	2a0f0 <__kernel_rem_pio2+0x410>
   2a4c6:	9b06      	ldr	r3, [sp, #24]
   2a4c8:	4632      	mov	r2, r6
   2a4ca:	e9c3 0100 	strd	r0, r1, [r3]
   2a4ce:	460b      	mov	r3, r1
   2a4d0:	e9da 0100 	ldrd	r0, r1, [sl]
   2a4d4:	f7d6 f986 	bl	7e4 <__aeabi_dsub>
   2a4d8:	460b      	mov	r3, r1
   2a4da:	9900      	ldr	r1, [sp, #0]
   2a4dc:	2900      	cmp	r1, #0
   2a4de:	4602      	mov	r2, r0
   2a4e0:	f73f af26 	bgt.w	2a330 <__kernel_rem_pio2+0x650>
   2a4e4:	4619      	mov	r1, r3
   2a4e6:	9b06      	ldr	r3, [sp, #24]
   2a4e8:	4610      	mov	r0, r2
   2a4ea:	e9c3 0102 	strd	r0, r1, [r3, #8]
   2a4ee:	e735      	b.n	2a35c <__kernel_rem_pio2+0x67c>
   2a4f0:	4618      	mov	r0, r3
   2a4f2:	4629      	mov	r1, r5
   2a4f4:	e9da 2300 	ldrd	r2, r3, [sl]
   2a4f8:	e9da 4502 	ldrd	r4, r5, [sl, #8]
   2a4fc:	9f06      	ldr	r7, [sp, #24]
   2a4fe:	e9c7 0104 	strd	r0, r1, [r7, #16]
   2a502:	e9c7 2300 	strd	r2, r3, [r7]
   2a506:	e9c7 4502 	strd	r4, r5, [r7, #8]
   2a50a:	e6e6      	b.n	2a2da <__kernel_rem_pio2+0x5fa>
   2a50c:	9ba2      	ldr	r3, [sp, #648]	; 0x288
   2a50e:	2b03      	cmp	r3, #3
   2a510:	f63f aee3 	bhi.w	2a2da <__kernel_rem_pio2+0x5fa>
   2a514:	e8df f003 	tbb	[pc, r3]
   2a518:	0e1c1c21 	.word	0x0e1c1c21
   2a51c:	9b00      	ldr	r3, [sp, #0]
   2a51e:	2b01      	cmp	r3, #1
   2a520:	dd88      	ble.n	2a434 <__kernel_rem_pio2+0x754>
   2a522:	aa0c      	add	r2, sp, #48	; 0x30
   2a524:	2301      	movs	r3, #1
   2a526:	f852 4f04 	ldr.w	r4, [r2, #4]!
   2a52a:	2c00      	cmp	r4, #0
   2a52c:	f43f af7e 	beq.w	2a42c <__kernel_rem_pio2+0x74c>
   2a530:	1c58      	adds	r0, r3, #1
   2a532:	e4dd      	b.n	29ef0 <__kernel_rem_pio2+0x210>
   2a534:	f50d 7a90 	add.w	sl, sp, #288	; 0x120
   2a538:	2300      	movs	r3, #0
   2a53a:	461d      	mov	r5, r3
   2a53c:	e6b4      	b.n	2a2a8 <__kernel_rem_pio2+0x5c8>
   2a53e:	4629      	mov	r1, r5
   2a540:	4620      	mov	r0, r4
   2a542:	f7d6 fdb3 	bl	10ac <__aeabi_d2iz>
   2a546:	9a00      	ldr	r2, [sp, #0]
   2a548:	a90c      	add	r1, sp, #48	; 0x30
   2a54a:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
   2a54e:	e5cf      	b.n	2a0f0 <__kernel_rem_pio2+0x410>
   2a550:	2600      	movs	r6, #0
   2a552:	4633      	mov	r3, r6
   2a554:	f50d 7a90 	add.w	sl, sp, #288	; 0x120
   2a558:	e6d5      	b.n	2a306 <__kernel_rem_pio2+0x626>
   2a55a:	2200      	movs	r2, #0
   2a55c:	4613      	mov	r3, r2
   2a55e:	e713      	b.n	2a388 <__kernel_rem_pio2+0x6a8>
   2a560:	3ff00000 	.word	0x3ff00000
   2a564:	41700000 	.word	0x41700000
   2a568:	3e700000 	.word	0x3e700000
   2a56c:	00000000 	.word	0x00000000

0002a570 <__kernel_sin>:
   2a570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a574:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
   2a578:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
   2a57c:	b085      	sub	sp, #20
   2a57e:	460c      	mov	r4, r1
   2a580:	4690      	mov	r8, r2
   2a582:	4699      	mov	r9, r3
   2a584:	4605      	mov	r5, r0
   2a586:	da04      	bge.n	2a592 <__kernel_sin+0x22>
   2a588:	f7d6 fd90 	bl	10ac <__aeabi_d2iz>
   2a58c:	2800      	cmp	r0, #0
   2a58e:	f000 8085 	beq.w	2a69c <__kernel_sin+0x12c>
   2a592:	462a      	mov	r2, r5
   2a594:	4623      	mov	r3, r4
   2a596:	4628      	mov	r0, r5
   2a598:	4621      	mov	r1, r4
   2a59a:	f7d6 fad7 	bl	b4c <__aeabi_dmul>
   2a59e:	4606      	mov	r6, r0
   2a5a0:	460f      	mov	r7, r1
   2a5a2:	4602      	mov	r2, r0
   2a5a4:	460b      	mov	r3, r1
   2a5a6:	4628      	mov	r0, r5
   2a5a8:	4621      	mov	r1, r4
   2a5aa:	f7d6 facf 	bl	b4c <__aeabi_dmul>
   2a5ae:	a33e      	add	r3, pc, #248	; (adr r3, 2a6a8 <__kernel_sin+0x138>)
   2a5b0:	e9d3 2300 	ldrd	r2, r3, [r3]
   2a5b4:	4682      	mov	sl, r0
   2a5b6:	468b      	mov	fp, r1
   2a5b8:	4630      	mov	r0, r6
   2a5ba:	4639      	mov	r1, r7
   2a5bc:	f7d6 fac6 	bl	b4c <__aeabi_dmul>
   2a5c0:	a33b      	add	r3, pc, #236	; (adr r3, 2a6b0 <__kernel_sin+0x140>)
   2a5c2:	e9d3 2300 	ldrd	r2, r3, [r3]
   2a5c6:	f7d6 f90d 	bl	7e4 <__aeabi_dsub>
   2a5ca:	4632      	mov	r2, r6
   2a5cc:	463b      	mov	r3, r7
   2a5ce:	f7d6 fabd 	bl	b4c <__aeabi_dmul>
   2a5d2:	a339      	add	r3, pc, #228	; (adr r3, 2a6b8 <__kernel_sin+0x148>)
   2a5d4:	e9d3 2300 	ldrd	r2, r3, [r3]
   2a5d8:	f7d6 f906 	bl	7e8 <__adddf3>
   2a5dc:	4632      	mov	r2, r6
   2a5de:	463b      	mov	r3, r7
   2a5e0:	f7d6 fab4 	bl	b4c <__aeabi_dmul>
   2a5e4:	a336      	add	r3, pc, #216	; (adr r3, 2a6c0 <__kernel_sin+0x150>)
   2a5e6:	e9d3 2300 	ldrd	r2, r3, [r3]
   2a5ea:	f7d6 f8fb 	bl	7e4 <__aeabi_dsub>
   2a5ee:	4632      	mov	r2, r6
   2a5f0:	463b      	mov	r3, r7
   2a5f2:	f7d6 faab 	bl	b4c <__aeabi_dmul>
   2a5f6:	a334      	add	r3, pc, #208	; (adr r3, 2a6c8 <__kernel_sin+0x158>)
   2a5f8:	e9d3 2300 	ldrd	r2, r3, [r3]
   2a5fc:	f7d6 f8f4 	bl	7e8 <__adddf3>
   2a600:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2a602:	e9cd 0100 	strd	r0, r1, [sp]
   2a606:	b39b      	cbz	r3, 2a670 <__kernel_sin+0x100>
   2a608:	2200      	movs	r2, #0
   2a60a:	4b33      	ldr	r3, [pc, #204]	; (2a6d8 <__kernel_sin+0x168>)
   2a60c:	4640      	mov	r0, r8
   2a60e:	4649      	mov	r1, r9
   2a610:	f7d6 fa9c 	bl	b4c <__aeabi_dmul>
   2a614:	e9dd 2300 	ldrd	r2, r3, [sp]
   2a618:	e9cd 0102 	strd	r0, r1, [sp, #8]
   2a61c:	4650      	mov	r0, sl
   2a61e:	4659      	mov	r1, fp
   2a620:	f7d6 fa94 	bl	b4c <__aeabi_dmul>
   2a624:	4602      	mov	r2, r0
   2a626:	460b      	mov	r3, r1
   2a628:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   2a62c:	f7d6 f8da 	bl	7e4 <__aeabi_dsub>
   2a630:	4632      	mov	r2, r6
   2a632:	463b      	mov	r3, r7
   2a634:	f7d6 fa8a 	bl	b4c <__aeabi_dmul>
   2a638:	4642      	mov	r2, r8
   2a63a:	464b      	mov	r3, r9
   2a63c:	f7d6 f8d2 	bl	7e4 <__aeabi_dsub>
   2a640:	a323      	add	r3, pc, #140	; (adr r3, 2a6d0 <__kernel_sin+0x160>)
   2a642:	e9d3 2300 	ldrd	r2, r3, [r3]
   2a646:	4606      	mov	r6, r0
   2a648:	460f      	mov	r7, r1
   2a64a:	4650      	mov	r0, sl
   2a64c:	4659      	mov	r1, fp
   2a64e:	f7d6 fa7d 	bl	b4c <__aeabi_dmul>
   2a652:	4602      	mov	r2, r0
   2a654:	460b      	mov	r3, r1
   2a656:	4630      	mov	r0, r6
   2a658:	4639      	mov	r1, r7
   2a65a:	f7d6 f8c5 	bl	7e8 <__adddf3>
   2a65e:	4602      	mov	r2, r0
   2a660:	460b      	mov	r3, r1
   2a662:	4628      	mov	r0, r5
   2a664:	4621      	mov	r1, r4
   2a666:	f7d6 f8bd 	bl	7e4 <__aeabi_dsub>
   2a66a:	b005      	add	sp, #20
   2a66c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a670:	4602      	mov	r2, r0
   2a672:	460b      	mov	r3, r1
   2a674:	4630      	mov	r0, r6
   2a676:	4639      	mov	r1, r7
   2a678:	f7d6 fa68 	bl	b4c <__aeabi_dmul>
   2a67c:	a314      	add	r3, pc, #80	; (adr r3, 2a6d0 <__kernel_sin+0x160>)
   2a67e:	e9d3 2300 	ldrd	r2, r3, [r3]
   2a682:	f7d6 f8af 	bl	7e4 <__aeabi_dsub>
   2a686:	4652      	mov	r2, sl
   2a688:	465b      	mov	r3, fp
   2a68a:	f7d6 fa5f 	bl	b4c <__aeabi_dmul>
   2a68e:	462a      	mov	r2, r5
   2a690:	4623      	mov	r3, r4
   2a692:	f7d6 f8a9 	bl	7e8 <__adddf3>
   2a696:	b005      	add	sp, #20
   2a698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a69c:	4628      	mov	r0, r5
   2a69e:	4621      	mov	r1, r4
   2a6a0:	b005      	add	sp, #20
   2a6a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a6a6:	bf00      	nop
   2a6a8:	5acfd57c 	.word	0x5acfd57c
   2a6ac:	3de5d93a 	.word	0x3de5d93a
   2a6b0:	8a2b9ceb 	.word	0x8a2b9ceb
   2a6b4:	3e5ae5e6 	.word	0x3e5ae5e6
   2a6b8:	57b1fe7d 	.word	0x57b1fe7d
   2a6bc:	3ec71de3 	.word	0x3ec71de3
   2a6c0:	19c161d5 	.word	0x19c161d5
   2a6c4:	3f2a01a0 	.word	0x3f2a01a0
   2a6c8:	1110f8a6 	.word	0x1110f8a6
   2a6cc:	3f811111 	.word	0x3f811111
   2a6d0:	55555549 	.word	0x55555549
   2a6d4:	3fc55555 	.word	0x3fc55555
   2a6d8:	3fe00000 	.word	0x3fe00000

0002a6dc <fabs>:
   2a6dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   2a6e0:	4770      	bx	lr
   2a6e2:	bf00      	nop
   2a6e4:	0000      	movs	r0, r0
	...

0002a6e8 <floor>:
   2a6e8:	f3c1 520a 	ubfx	r2, r1, #20, #11
   2a6ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2a6f0:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
   2a6f4:	2e13      	cmp	r6, #19
   2a6f6:	460b      	mov	r3, r1
   2a6f8:	460d      	mov	r5, r1
   2a6fa:	4604      	mov	r4, r0
   2a6fc:	4688      	mov	r8, r1
   2a6fe:	4607      	mov	r7, r0
   2a700:	dc1d      	bgt.n	2a73e <floor+0x56>
   2a702:	2e00      	cmp	r6, #0
   2a704:	db40      	blt.n	2a788 <floor+0xa0>
   2a706:	4a3c      	ldr	r2, [pc, #240]	; (2a7f8 <floor+0x110>)
   2a708:	fa42 f906 	asr.w	r9, r2, r6
   2a70c:	ea01 0209 	and.w	r2, r1, r9
   2a710:	4302      	orrs	r2, r0
   2a712:	4686      	mov	lr, r0
   2a714:	d018      	beq.n	2a748 <floor+0x60>
   2a716:	a336      	add	r3, pc, #216	; (adr r3, 2a7f0 <floor+0x108>)
   2a718:	e9d3 2300 	ldrd	r2, r3, [r3]
   2a71c:	f7d6 f864 	bl	7e8 <__adddf3>
   2a720:	2200      	movs	r2, #0
   2a722:	2300      	movs	r3, #0
   2a724:	f7d6 fca2 	bl	106c <__aeabi_dcmpgt>
   2a728:	b120      	cbz	r0, 2a734 <floor+0x4c>
   2a72a:	2d00      	cmp	r5, #0
   2a72c:	db42      	blt.n	2a7b4 <floor+0xcc>
   2a72e:	ea28 0509 	bic.w	r5, r8, r9
   2a732:	2700      	movs	r7, #0
   2a734:	463c      	mov	r4, r7
   2a736:	4629      	mov	r1, r5
   2a738:	4620      	mov	r0, r4
   2a73a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2a73e:	2e33      	cmp	r6, #51	; 0x33
   2a740:	dd06      	ble.n	2a750 <floor+0x68>
   2a742:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   2a746:	d02f      	beq.n	2a7a8 <floor+0xc0>
   2a748:	4619      	mov	r1, r3
   2a74a:	4620      	mov	r0, r4
   2a74c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2a750:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
   2a754:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   2a758:	fa29 f902 	lsr.w	r9, r9, r2
   2a75c:	ea10 0f09 	tst.w	r0, r9
   2a760:	d0f2      	beq.n	2a748 <floor+0x60>
   2a762:	a323      	add	r3, pc, #140	; (adr r3, 2a7f0 <floor+0x108>)
   2a764:	e9d3 2300 	ldrd	r2, r3, [r3]
   2a768:	f7d6 f83e 	bl	7e8 <__adddf3>
   2a76c:	2200      	movs	r2, #0
   2a76e:	2300      	movs	r3, #0
   2a770:	f7d6 fc7c 	bl	106c <__aeabi_dcmpgt>
   2a774:	2800      	cmp	r0, #0
   2a776:	d0dd      	beq.n	2a734 <floor+0x4c>
   2a778:	2d00      	cmp	r5, #0
   2a77a:	db21      	blt.n	2a7c0 <floor+0xd8>
   2a77c:	4645      	mov	r5, r8
   2a77e:	ea27 0709 	bic.w	r7, r7, r9
   2a782:	463c      	mov	r4, r7
   2a784:	4629      	mov	r1, r5
   2a786:	e7d7      	b.n	2a738 <floor+0x50>
   2a788:	a319      	add	r3, pc, #100	; (adr r3, 2a7f0 <floor+0x108>)
   2a78a:	e9d3 2300 	ldrd	r2, r3, [r3]
   2a78e:	f7d6 f82b 	bl	7e8 <__adddf3>
   2a792:	2200      	movs	r2, #0
   2a794:	2300      	movs	r3, #0
   2a796:	f7d6 fc69 	bl	106c <__aeabi_dcmpgt>
   2a79a:	2800      	cmp	r0, #0
   2a79c:	d0ca      	beq.n	2a734 <floor+0x4c>
   2a79e:	2d00      	cmp	r5, #0
   2a7a0:	db19      	blt.n	2a7d6 <floor+0xee>
   2a7a2:	2700      	movs	r7, #0
   2a7a4:	463d      	mov	r5, r7
   2a7a6:	e7c5      	b.n	2a734 <floor+0x4c>
   2a7a8:	4602      	mov	r2, r0
   2a7aa:	460b      	mov	r3, r1
   2a7ac:	f7d6 f81c 	bl	7e8 <__adddf3>
   2a7b0:	4604      	mov	r4, r0
   2a7b2:	e7ca      	b.n	2a74a <floor+0x62>
   2a7b4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   2a7b8:	fa43 f606 	asr.w	r6, r3, r6
   2a7bc:	44b0      	add	r8, r6
   2a7be:	e7b6      	b.n	2a72e <floor+0x46>
   2a7c0:	2e14      	cmp	r6, #20
   2a7c2:	d010      	beq.n	2a7e6 <floor+0xfe>
   2a7c4:	2301      	movs	r3, #1
   2a7c6:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
   2a7ca:	fa03 f606 	lsl.w	r6, r3, r6
   2a7ce:	1937      	adds	r7, r6, r4
   2a7d0:	bf28      	it	cs
   2a7d2:	4498      	addcs	r8, r3
   2a7d4:	e7d2      	b.n	2a77c <floor+0x94>
   2a7d6:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
   2a7da:	4b08      	ldr	r3, [pc, #32]	; (2a7fc <floor+0x114>)
   2a7dc:	4322      	orrs	r2, r4
   2a7de:	bf18      	it	ne
   2a7e0:	461d      	movne	r5, r3
   2a7e2:	2700      	movs	r7, #0
   2a7e4:	e7a6      	b.n	2a734 <floor+0x4c>
   2a7e6:	f105 0801 	add.w	r8, r5, #1
   2a7ea:	e7c7      	b.n	2a77c <floor+0x94>
   2a7ec:	f3af 8000 	nop.w
   2a7f0:	8800759c 	.word	0x8800759c
   2a7f4:	7e37e43c 	.word	0x7e37e43c
   2a7f8:	000fffff 	.word	0x000fffff
   2a7fc:	bff00000 	.word	0xbff00000

0002a800 <scalbn>:
   2a800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2a802:	f3c1 560a 	ubfx	r6, r1, #20, #11
   2a806:	4604      	mov	r4, r0
   2a808:	460d      	mov	r5, r1
   2a80a:	460b      	mov	r3, r1
   2a80c:	4617      	mov	r7, r2
   2a80e:	bb0e      	cbnz	r6, 2a854 <scalbn+0x54>
   2a810:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   2a814:	4303      	orrs	r3, r0
   2a816:	4686      	mov	lr, r0
   2a818:	d025      	beq.n	2a866 <scalbn+0x66>
   2a81a:	2200      	movs	r2, #0
   2a81c:	4b34      	ldr	r3, [pc, #208]	; (2a8f0 <scalbn+0xf0>)
   2a81e:	f7d6 f995 	bl	b4c <__aeabi_dmul>
   2a822:	4a34      	ldr	r2, [pc, #208]	; (2a8f4 <scalbn+0xf4>)
   2a824:	4297      	cmp	r7, r2
   2a826:	4604      	mov	r4, r0
   2a828:	460d      	mov	r5, r1
   2a82a:	460b      	mov	r3, r1
   2a82c:	db2a      	blt.n	2a884 <scalbn+0x84>
   2a82e:	f3c1 560a 	ubfx	r6, r1, #20, #11
   2a832:	3e36      	subs	r6, #54	; 0x36
   2a834:	443e      	add	r6, r7
   2a836:	f240 72fe 	movw	r2, #2046	; 0x7fe
   2a83a:	4296      	cmp	r6, r2
   2a83c:	dc28      	bgt.n	2a890 <scalbn+0x90>
   2a83e:	2e00      	cmp	r6, #0
   2a840:	dd12      	ble.n	2a868 <scalbn+0x68>
   2a842:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
   2a846:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
   2a84a:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
   2a84e:	4620      	mov	r0, r4
   2a850:	4629      	mov	r1, r5
   2a852:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2a854:	f240 72ff 	movw	r2, #2047	; 0x7ff
   2a858:	4296      	cmp	r6, r2
   2a85a:	d1eb      	bne.n	2a834 <scalbn+0x34>
   2a85c:	4602      	mov	r2, r0
   2a85e:	460b      	mov	r3, r1
   2a860:	f7d5 ffc2 	bl	7e8 <__adddf3>
   2a864:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2a866:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2a868:	f116 0f35 	cmn.w	r6, #53	; 0x35
   2a86c:	da1d      	bge.n	2a8aa <scalbn+0xaa>
   2a86e:	f24c 3350 	movw	r3, #50000	; 0xc350
   2a872:	429f      	cmp	r7, r3
   2a874:	4622      	mov	r2, r4
   2a876:	462b      	mov	r3, r5
   2a878:	dc25      	bgt.n	2a8c6 <scalbn+0xc6>
   2a87a:	a119      	add	r1, pc, #100	; (adr r1, 2a8e0 <scalbn+0xe0>)
   2a87c:	e9d1 0100 	ldrd	r0, r1, [r1]
   2a880:	f000 f83c 	bl	2a8fc <copysign>
   2a884:	a316      	add	r3, pc, #88	; (adr r3, 2a8e0 <scalbn+0xe0>)
   2a886:	e9d3 2300 	ldrd	r2, r3, [r3]
   2a88a:	f7d6 f95f 	bl	b4c <__aeabi_dmul>
   2a88e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2a890:	4622      	mov	r2, r4
   2a892:	462b      	mov	r3, r5
   2a894:	a114      	add	r1, pc, #80	; (adr r1, 2a8e8 <scalbn+0xe8>)
   2a896:	e9d1 0100 	ldrd	r0, r1, [r1]
   2a89a:	f000 f82f 	bl	2a8fc <copysign>
   2a89e:	a312      	add	r3, pc, #72	; (adr r3, 2a8e8 <scalbn+0xe8>)
   2a8a0:	e9d3 2300 	ldrd	r2, r3, [r3]
   2a8a4:	f7d6 f952 	bl	b4c <__aeabi_dmul>
   2a8a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2a8aa:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
   2a8ae:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
   2a8b2:	3636      	adds	r6, #54	; 0x36
   2a8b4:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
   2a8b8:	4620      	mov	r0, r4
   2a8ba:	4629      	mov	r1, r5
   2a8bc:	2200      	movs	r2, #0
   2a8be:	4b0e      	ldr	r3, [pc, #56]	; (2a8f8 <scalbn+0xf8>)
   2a8c0:	f7d6 f944 	bl	b4c <__aeabi_dmul>
   2a8c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2a8c6:	a108      	add	r1, pc, #32	; (adr r1, 2a8e8 <scalbn+0xe8>)
   2a8c8:	e9d1 0100 	ldrd	r0, r1, [r1]
   2a8cc:	f000 f816 	bl	2a8fc <copysign>
   2a8d0:	a305      	add	r3, pc, #20	; (adr r3, 2a8e8 <scalbn+0xe8>)
   2a8d2:	e9d3 2300 	ldrd	r2, r3, [r3]
   2a8d6:	f7d6 f939 	bl	b4c <__aeabi_dmul>
   2a8da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2a8dc:	f3af 8000 	nop.w
   2a8e0:	c2f8f359 	.word	0xc2f8f359
   2a8e4:	01a56e1f 	.word	0x01a56e1f
   2a8e8:	8800759c 	.word	0x8800759c
   2a8ec:	7e37e43c 	.word	0x7e37e43c
   2a8f0:	43500000 	.word	0x43500000
   2a8f4:	ffff3cb0 	.word	0xffff3cb0
   2a8f8:	3c900000 	.word	0x3c900000

0002a8fc <copysign>:
   2a8fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
   2a900:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
   2a904:	ea42 0103 	orr.w	r1, r2, r3
   2a908:	4770      	bx	lr
   2a90a:	bf00      	nop

0002a90c <__locale_ctype_ptr_l>:
   2a90c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
   2a910:	4770      	bx	lr
   2a912:	bf00      	nop

0002a914 <__locale_ctype_ptr>:
   2a914:	4b04      	ldr	r3, [pc, #16]	; (2a928 <__locale_ctype_ptr+0x14>)
   2a916:	4a05      	ldr	r2, [pc, #20]	; (2a92c <__locale_ctype_ptr+0x18>)
   2a918:	681b      	ldr	r3, [r3, #0]
   2a91a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   2a91c:	2b00      	cmp	r3, #0
   2a91e:	bf08      	it	eq
   2a920:	4613      	moveq	r3, r2
   2a922:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
   2a926:	4770      	bx	lr
   2a928:	2000c67c 	.word	0x2000c67c
   2a92c:	2000c510 	.word	0x2000c510

0002a930 <__ascii_mbtowc>:
   2a930:	b082      	sub	sp, #8
   2a932:	b149      	cbz	r1, 2a948 <__ascii_mbtowc+0x18>
   2a934:	b15a      	cbz	r2, 2a94e <__ascii_mbtowc+0x1e>
   2a936:	b16b      	cbz	r3, 2a954 <__ascii_mbtowc+0x24>
   2a938:	7813      	ldrb	r3, [r2, #0]
   2a93a:	600b      	str	r3, [r1, #0]
   2a93c:	7812      	ldrb	r2, [r2, #0]
   2a93e:	1c10      	adds	r0, r2, #0
   2a940:	bf18      	it	ne
   2a942:	2001      	movne	r0, #1
   2a944:	b002      	add	sp, #8
   2a946:	4770      	bx	lr
   2a948:	a901      	add	r1, sp, #4
   2a94a:	2a00      	cmp	r2, #0
   2a94c:	d1f3      	bne.n	2a936 <__ascii_mbtowc+0x6>
   2a94e:	4610      	mov	r0, r2
   2a950:	b002      	add	sp, #8
   2a952:	4770      	bx	lr
   2a954:	f06f 0001 	mvn.w	r0, #1
   2a958:	e7f4      	b.n	2a944 <__ascii_mbtowc+0x14>
   2a95a:	bf00      	nop

0002a95c <memcmp>:
   2a95c:	2a03      	cmp	r2, #3
   2a95e:	b470      	push	{r4, r5, r6}
   2a960:	d922      	bls.n	2a9a8 <memcmp+0x4c>
   2a962:	ea40 0301 	orr.w	r3, r0, r1
   2a966:	079b      	lsls	r3, r3, #30
   2a968:	d011      	beq.n	2a98e <memcmp+0x32>
   2a96a:	7803      	ldrb	r3, [r0, #0]
   2a96c:	780c      	ldrb	r4, [r1, #0]
   2a96e:	42a3      	cmp	r3, r4
   2a970:	d11d      	bne.n	2a9ae <memcmp+0x52>
   2a972:	440a      	add	r2, r1
   2a974:	3101      	adds	r1, #1
   2a976:	e005      	b.n	2a984 <memcmp+0x28>
   2a978:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   2a97c:	f811 4b01 	ldrb.w	r4, [r1], #1
   2a980:	42a3      	cmp	r3, r4
   2a982:	d114      	bne.n	2a9ae <memcmp+0x52>
   2a984:	4291      	cmp	r1, r2
   2a986:	d1f7      	bne.n	2a978 <memcmp+0x1c>
   2a988:	2000      	movs	r0, #0
   2a98a:	bc70      	pop	{r4, r5, r6}
   2a98c:	4770      	bx	lr
   2a98e:	680d      	ldr	r5, [r1, #0]
   2a990:	6806      	ldr	r6, [r0, #0]
   2a992:	42ae      	cmp	r6, r5
   2a994:	460c      	mov	r4, r1
   2a996:	4603      	mov	r3, r0
   2a998:	f101 0104 	add.w	r1, r1, #4
   2a99c:	f100 0004 	add.w	r0, r0, #4
   2a9a0:	d108      	bne.n	2a9b4 <memcmp+0x58>
   2a9a2:	3a04      	subs	r2, #4
   2a9a4:	2a03      	cmp	r2, #3
   2a9a6:	d8f2      	bhi.n	2a98e <memcmp+0x32>
   2a9a8:	2a00      	cmp	r2, #0
   2a9aa:	d1de      	bne.n	2a96a <memcmp+0xe>
   2a9ac:	e7ec      	b.n	2a988 <memcmp+0x2c>
   2a9ae:	1b18      	subs	r0, r3, r4
   2a9b0:	bc70      	pop	{r4, r5, r6}
   2a9b2:	4770      	bx	lr
   2a9b4:	4621      	mov	r1, r4
   2a9b6:	4618      	mov	r0, r3
   2a9b8:	e7d7      	b.n	2a96a <memcmp+0xe>
   2a9ba:	bf00      	nop

0002a9bc <memmove>:
   2a9bc:	4288      	cmp	r0, r1
   2a9be:	b5f0      	push	{r4, r5, r6, r7, lr}
   2a9c0:	d90d      	bls.n	2a9de <memmove+0x22>
   2a9c2:	188b      	adds	r3, r1, r2
   2a9c4:	4298      	cmp	r0, r3
   2a9c6:	d20a      	bcs.n	2a9de <memmove+0x22>
   2a9c8:	1884      	adds	r4, r0, r2
   2a9ca:	2a00      	cmp	r2, #0
   2a9cc:	d051      	beq.n	2aa72 <memmove+0xb6>
   2a9ce:	4622      	mov	r2, r4
   2a9d0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   2a9d4:	f802 4d01 	strb.w	r4, [r2, #-1]!
   2a9d8:	4299      	cmp	r1, r3
   2a9da:	d1f9      	bne.n	2a9d0 <memmove+0x14>
   2a9dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2a9de:	2a0f      	cmp	r2, #15
   2a9e0:	d948      	bls.n	2aa74 <memmove+0xb8>
   2a9e2:	ea41 0300 	orr.w	r3, r1, r0
   2a9e6:	079b      	lsls	r3, r3, #30
   2a9e8:	d146      	bne.n	2aa78 <memmove+0xbc>
   2a9ea:	f100 0410 	add.w	r4, r0, #16
   2a9ee:	f101 0310 	add.w	r3, r1, #16
   2a9f2:	4615      	mov	r5, r2
   2a9f4:	f853 6c10 	ldr.w	r6, [r3, #-16]
   2a9f8:	f844 6c10 	str.w	r6, [r4, #-16]
   2a9fc:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   2aa00:	f844 6c0c 	str.w	r6, [r4, #-12]
   2aa04:	f853 6c08 	ldr.w	r6, [r3, #-8]
   2aa08:	f844 6c08 	str.w	r6, [r4, #-8]
   2aa0c:	3d10      	subs	r5, #16
   2aa0e:	f853 6c04 	ldr.w	r6, [r3, #-4]
   2aa12:	f844 6c04 	str.w	r6, [r4, #-4]
   2aa16:	2d0f      	cmp	r5, #15
   2aa18:	f103 0310 	add.w	r3, r3, #16
   2aa1c:	f104 0410 	add.w	r4, r4, #16
   2aa20:	d8e8      	bhi.n	2a9f4 <memmove+0x38>
   2aa22:	f1a2 0310 	sub.w	r3, r2, #16
   2aa26:	f023 030f 	bic.w	r3, r3, #15
   2aa2a:	f002 0e0f 	and.w	lr, r2, #15
   2aa2e:	3310      	adds	r3, #16
   2aa30:	f1be 0f03 	cmp.w	lr, #3
   2aa34:	4419      	add	r1, r3
   2aa36:	4403      	add	r3, r0
   2aa38:	d921      	bls.n	2aa7e <memmove+0xc2>
   2aa3a:	1f1e      	subs	r6, r3, #4
   2aa3c:	460d      	mov	r5, r1
   2aa3e:	4674      	mov	r4, lr
   2aa40:	3c04      	subs	r4, #4
   2aa42:	f855 7b04 	ldr.w	r7, [r5], #4
   2aa46:	f846 7f04 	str.w	r7, [r6, #4]!
   2aa4a:	2c03      	cmp	r4, #3
   2aa4c:	d8f8      	bhi.n	2aa40 <memmove+0x84>
   2aa4e:	f1ae 0404 	sub.w	r4, lr, #4
   2aa52:	f024 0403 	bic.w	r4, r4, #3
   2aa56:	3404      	adds	r4, #4
   2aa58:	4421      	add	r1, r4
   2aa5a:	4423      	add	r3, r4
   2aa5c:	f002 0203 	and.w	r2, r2, #3
   2aa60:	b162      	cbz	r2, 2aa7c <memmove+0xc0>
   2aa62:	3b01      	subs	r3, #1
   2aa64:	440a      	add	r2, r1
   2aa66:	f811 4b01 	ldrb.w	r4, [r1], #1
   2aa6a:	f803 4f01 	strb.w	r4, [r3, #1]!
   2aa6e:	428a      	cmp	r2, r1
   2aa70:	d1f9      	bne.n	2aa66 <memmove+0xaa>
   2aa72:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2aa74:	4603      	mov	r3, r0
   2aa76:	e7f3      	b.n	2aa60 <memmove+0xa4>
   2aa78:	4603      	mov	r3, r0
   2aa7a:	e7f2      	b.n	2aa62 <memmove+0xa6>
   2aa7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2aa7e:	4672      	mov	r2, lr
   2aa80:	e7ee      	b.n	2aa60 <memmove+0xa4>
   2aa82:	bf00      	nop

0002aa84 <memset>:
   2aa84:	b470      	push	{r4, r5, r6}
   2aa86:	0786      	lsls	r6, r0, #30
   2aa88:	d046      	beq.n	2ab18 <memset+0x94>
   2aa8a:	1e54      	subs	r4, r2, #1
   2aa8c:	2a00      	cmp	r2, #0
   2aa8e:	d041      	beq.n	2ab14 <memset+0x90>
   2aa90:	b2ca      	uxtb	r2, r1
   2aa92:	4603      	mov	r3, r0
   2aa94:	e002      	b.n	2aa9c <memset+0x18>
   2aa96:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
   2aa9a:	d33b      	bcc.n	2ab14 <memset+0x90>
   2aa9c:	f803 2b01 	strb.w	r2, [r3], #1
   2aaa0:	079d      	lsls	r5, r3, #30
   2aaa2:	d1f8      	bne.n	2aa96 <memset+0x12>
   2aaa4:	2c03      	cmp	r4, #3
   2aaa6:	d92e      	bls.n	2ab06 <memset+0x82>
   2aaa8:	b2cd      	uxtb	r5, r1
   2aaaa:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   2aaae:	2c0f      	cmp	r4, #15
   2aab0:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   2aab4:	d919      	bls.n	2aaea <memset+0x66>
   2aab6:	f103 0210 	add.w	r2, r3, #16
   2aaba:	4626      	mov	r6, r4
   2aabc:	3e10      	subs	r6, #16
   2aabe:	2e0f      	cmp	r6, #15
   2aac0:	f842 5c10 	str.w	r5, [r2, #-16]
   2aac4:	f842 5c0c 	str.w	r5, [r2, #-12]
   2aac8:	f842 5c08 	str.w	r5, [r2, #-8]
   2aacc:	f842 5c04 	str.w	r5, [r2, #-4]
   2aad0:	f102 0210 	add.w	r2, r2, #16
   2aad4:	d8f2      	bhi.n	2aabc <memset+0x38>
   2aad6:	f1a4 0210 	sub.w	r2, r4, #16
   2aada:	f022 020f 	bic.w	r2, r2, #15
   2aade:	f004 040f 	and.w	r4, r4, #15
   2aae2:	3210      	adds	r2, #16
   2aae4:	2c03      	cmp	r4, #3
   2aae6:	4413      	add	r3, r2
   2aae8:	d90d      	bls.n	2ab06 <memset+0x82>
   2aaea:	461e      	mov	r6, r3
   2aaec:	4622      	mov	r2, r4
   2aaee:	3a04      	subs	r2, #4
   2aaf0:	2a03      	cmp	r2, #3
   2aaf2:	f846 5b04 	str.w	r5, [r6], #4
   2aaf6:	d8fa      	bhi.n	2aaee <memset+0x6a>
   2aaf8:	1f22      	subs	r2, r4, #4
   2aafa:	f022 0203 	bic.w	r2, r2, #3
   2aafe:	3204      	adds	r2, #4
   2ab00:	4413      	add	r3, r2
   2ab02:	f004 0403 	and.w	r4, r4, #3
   2ab06:	b12c      	cbz	r4, 2ab14 <memset+0x90>
   2ab08:	b2c9      	uxtb	r1, r1
   2ab0a:	441c      	add	r4, r3
   2ab0c:	f803 1b01 	strb.w	r1, [r3], #1
   2ab10:	429c      	cmp	r4, r3
   2ab12:	d1fb      	bne.n	2ab0c <memset+0x88>
   2ab14:	bc70      	pop	{r4, r5, r6}
   2ab16:	4770      	bx	lr
   2ab18:	4614      	mov	r4, r2
   2ab1a:	4603      	mov	r3, r0
   2ab1c:	e7c2      	b.n	2aaa4 <memset+0x20>
   2ab1e:	bf00      	nop

0002ab20 <snprintf>:
   2ab20:	b40c      	push	{r2, r3}
   2ab22:	b5f0      	push	{r4, r5, r6, r7, lr}
   2ab24:	4b23      	ldr	r3, [pc, #140]	; (2abb4 <snprintf+0x94>)
   2ab26:	1e0c      	subs	r4, r1, #0
   2ab28:	b09d      	sub	sp, #116	; 0x74
   2ab2a:	681d      	ldr	r5, [r3, #0]
   2ab2c:	db3d      	blt.n	2abaa <snprintf+0x8a>
   2ab2e:	f44f 7302 	mov.w	r3, #520	; 0x208
   2ab32:	9002      	str	r0, [sp, #8]
   2ab34:	9006      	str	r0, [sp, #24]
   2ab36:	f8ad 3014 	strh.w	r3, [sp, #20]
   2ab3a:	ae23      	add	r6, sp, #140	; 0x8c
   2ab3c:	d017      	beq.n	2ab6e <snprintf+0x4e>
   2ab3e:	3c01      	subs	r4, #1
   2ab40:	9a22      	ldr	r2, [sp, #136]	; 0x88
   2ab42:	9404      	str	r4, [sp, #16]
   2ab44:	4633      	mov	r3, r6
   2ab46:	f64f 77ff 	movw	r7, #65535	; 0xffff
   2ab4a:	a902      	add	r1, sp, #8
   2ab4c:	4628      	mov	r0, r5
   2ab4e:	9407      	str	r4, [sp, #28]
   2ab50:	9601      	str	r6, [sp, #4]
   2ab52:	f8ad 7016 	strh.w	r7, [sp, #22]
   2ab56:	f000 fd7f 	bl	2b658 <_svfprintf_r>
   2ab5a:	1c42      	adds	r2, r0, #1
   2ab5c:	db1b      	blt.n	2ab96 <snprintf+0x76>
   2ab5e:	9b02      	ldr	r3, [sp, #8]
   2ab60:	2200      	movs	r2, #0
   2ab62:	701a      	strb	r2, [r3, #0]
   2ab64:	b01d      	add	sp, #116	; 0x74
   2ab66:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   2ab6a:	b002      	add	sp, #8
   2ab6c:	4770      	bx	lr
   2ab6e:	4633      	mov	r3, r6
   2ab70:	f64f 77ff 	movw	r7, #65535	; 0xffff
   2ab74:	9a22      	ldr	r2, [sp, #136]	; 0x88
   2ab76:	9404      	str	r4, [sp, #16]
   2ab78:	a902      	add	r1, sp, #8
   2ab7a:	4628      	mov	r0, r5
   2ab7c:	9407      	str	r4, [sp, #28]
   2ab7e:	9601      	str	r6, [sp, #4]
   2ab80:	f8ad 7016 	strh.w	r7, [sp, #22]
   2ab84:	f000 fd68 	bl	2b658 <_svfprintf_r>
   2ab88:	1c43      	adds	r3, r0, #1
   2ab8a:	db07      	blt.n	2ab9c <snprintf+0x7c>
   2ab8c:	b01d      	add	sp, #116	; 0x74
   2ab8e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   2ab92:	b002      	add	sp, #8
   2ab94:	4770      	bx	lr
   2ab96:	238b      	movs	r3, #139	; 0x8b
   2ab98:	602b      	str	r3, [r5, #0]
   2ab9a:	e7e0      	b.n	2ab5e <snprintf+0x3e>
   2ab9c:	238b      	movs	r3, #139	; 0x8b
   2ab9e:	602b      	str	r3, [r5, #0]
   2aba0:	b01d      	add	sp, #116	; 0x74
   2aba2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   2aba6:	b002      	add	sp, #8
   2aba8:	4770      	bx	lr
   2abaa:	238b      	movs	r3, #139	; 0x8b
   2abac:	602b      	str	r3, [r5, #0]
   2abae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2abb2:	e7eb      	b.n	2ab8c <snprintf+0x6c>
   2abb4:	2000c67c 	.word	0x2000c67c

0002abb8 <strcat>:
   2abb8:	0783      	lsls	r3, r0, #30
   2abba:	b510      	push	{r4, lr}
   2abbc:	4604      	mov	r4, r0
   2abbe:	d110      	bne.n	2abe2 <strcat+0x2a>
   2abc0:	6802      	ldr	r2, [r0, #0]
   2abc2:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
   2abc6:	ea23 0302 	bic.w	r3, r3, r2
   2abca:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   2abce:	d108      	bne.n	2abe2 <strcat+0x2a>
   2abd0:	f850 2f04 	ldr.w	r2, [r0, #4]!
   2abd4:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
   2abd8:	ea23 0302 	bic.w	r3, r3, r2
   2abdc:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   2abe0:	d0f6      	beq.n	2abd0 <strcat+0x18>
   2abe2:	7803      	ldrb	r3, [r0, #0]
   2abe4:	b11b      	cbz	r3, 2abee <strcat+0x36>
   2abe6:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   2abea:	2b00      	cmp	r3, #0
   2abec:	d1fb      	bne.n	2abe6 <strcat+0x2e>
   2abee:	f000 f877 	bl	2ace0 <strcpy>
   2abf2:	4620      	mov	r0, r4
   2abf4:	bd10      	pop	{r4, pc}
   2abf6:	bf00      	nop

0002abf8 <strchr>:
   2abf8:	b2c9      	uxtb	r1, r1
   2abfa:	2900      	cmp	r1, #0
   2abfc:	d041      	beq.n	2ac82 <strchr+0x8a>
   2abfe:	0782      	lsls	r2, r0, #30
   2ac00:	b4f0      	push	{r4, r5, r6, r7}
   2ac02:	d067      	beq.n	2acd4 <strchr+0xdc>
   2ac04:	7803      	ldrb	r3, [r0, #0]
   2ac06:	2b00      	cmp	r3, #0
   2ac08:	d068      	beq.n	2acdc <strchr+0xe4>
   2ac0a:	4299      	cmp	r1, r3
   2ac0c:	d037      	beq.n	2ac7e <strchr+0x86>
   2ac0e:	1c43      	adds	r3, r0, #1
   2ac10:	e004      	b.n	2ac1c <strchr+0x24>
   2ac12:	f813 0b01 	ldrb.w	r0, [r3], #1
   2ac16:	b390      	cbz	r0, 2ac7e <strchr+0x86>
   2ac18:	4281      	cmp	r1, r0
   2ac1a:	d02f      	beq.n	2ac7c <strchr+0x84>
   2ac1c:	079a      	lsls	r2, r3, #30
   2ac1e:	461c      	mov	r4, r3
   2ac20:	d1f7      	bne.n	2ac12 <strchr+0x1a>
   2ac22:	6825      	ldr	r5, [r4, #0]
   2ac24:	ea41 2301 	orr.w	r3, r1, r1, lsl #8
   2ac28:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
   2ac2c:	ea83 0605 	eor.w	r6, r3, r5
   2ac30:	f1a6 3001 	sub.w	r0, r6, #16843009	; 0x1010101
   2ac34:	f1a5 3201 	sub.w	r2, r5, #16843009	; 0x1010101
   2ac38:	ea20 0006 	bic.w	r0, r0, r6
   2ac3c:	ea22 0205 	bic.w	r2, r2, r5
   2ac40:	4302      	orrs	r2, r0
   2ac42:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   2ac46:	d111      	bne.n	2ac6c <strchr+0x74>
   2ac48:	4620      	mov	r0, r4
   2ac4a:	f850 6f04 	ldr.w	r6, [r0, #4]!
   2ac4e:	ea83 0706 	eor.w	r7, r3, r6
   2ac52:	f1a7 3501 	sub.w	r5, r7, #16843009	; 0x1010101
   2ac56:	f1a6 3201 	sub.w	r2, r6, #16843009	; 0x1010101
   2ac5a:	ea25 0507 	bic.w	r5, r5, r7
   2ac5e:	ea22 0206 	bic.w	r2, r2, r6
   2ac62:	432a      	orrs	r2, r5
   2ac64:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   2ac68:	d0ef      	beq.n	2ac4a <strchr+0x52>
   2ac6a:	4604      	mov	r4, r0
   2ac6c:	7820      	ldrb	r0, [r4, #0]
   2ac6e:	b918      	cbnz	r0, 2ac78 <strchr+0x80>
   2ac70:	e005      	b.n	2ac7e <strchr+0x86>
   2ac72:	f814 0f01 	ldrb.w	r0, [r4, #1]!
   2ac76:	b110      	cbz	r0, 2ac7e <strchr+0x86>
   2ac78:	4281      	cmp	r1, r0
   2ac7a:	d1fa      	bne.n	2ac72 <strchr+0x7a>
   2ac7c:	4620      	mov	r0, r4
   2ac7e:	bcf0      	pop	{r4, r5, r6, r7}
   2ac80:	4770      	bx	lr
   2ac82:	0783      	lsls	r3, r0, #30
   2ac84:	d024      	beq.n	2acd0 <strchr+0xd8>
   2ac86:	7803      	ldrb	r3, [r0, #0]
   2ac88:	2b00      	cmp	r3, #0
   2ac8a:	d0f9      	beq.n	2ac80 <strchr+0x88>
   2ac8c:	1c43      	adds	r3, r0, #1
   2ac8e:	e003      	b.n	2ac98 <strchr+0xa0>
   2ac90:	7802      	ldrb	r2, [r0, #0]
   2ac92:	3301      	adds	r3, #1
   2ac94:	2a00      	cmp	r2, #0
   2ac96:	d0f3      	beq.n	2ac80 <strchr+0x88>
   2ac98:	0799      	lsls	r1, r3, #30
   2ac9a:	4618      	mov	r0, r3
   2ac9c:	d1f8      	bne.n	2ac90 <strchr+0x98>
   2ac9e:	6819      	ldr	r1, [r3, #0]
   2aca0:	f1a1 3201 	sub.w	r2, r1, #16843009	; 0x1010101
   2aca4:	ea22 0201 	bic.w	r2, r2, r1
   2aca8:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   2acac:	d108      	bne.n	2acc0 <strchr+0xc8>
   2acae:	f853 1f04 	ldr.w	r1, [r3, #4]!
   2acb2:	f1a1 3201 	sub.w	r2, r1, #16843009	; 0x1010101
   2acb6:	ea22 0201 	bic.w	r2, r2, r1
   2acba:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   2acbe:	d0f6      	beq.n	2acae <strchr+0xb6>
   2acc0:	781a      	ldrb	r2, [r3, #0]
   2acc2:	4618      	mov	r0, r3
   2acc4:	b142      	cbz	r2, 2acd8 <strchr+0xe0>
   2acc6:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   2acca:	2b00      	cmp	r3, #0
   2accc:	d1fb      	bne.n	2acc6 <strchr+0xce>
   2acce:	4770      	bx	lr
   2acd0:	4603      	mov	r3, r0
   2acd2:	e7e4      	b.n	2ac9e <strchr+0xa6>
   2acd4:	4604      	mov	r4, r0
   2acd6:	e7a4      	b.n	2ac22 <strchr+0x2a>
   2acd8:	4618      	mov	r0, r3
   2acda:	4770      	bx	lr
   2acdc:	4618      	mov	r0, r3
   2acde:	e7ce      	b.n	2ac7e <strchr+0x86>

0002ace0 <strcpy>:
   2ace0:	ea80 0201 	eor.w	r2, r0, r1
   2ace4:	4684      	mov	ip, r0
   2ace6:	f012 0f03 	tst.w	r2, #3
   2acea:	d14f      	bne.n	2ad8c <strcpy+0xac>
   2acec:	f011 0f03 	tst.w	r1, #3
   2acf0:	d132      	bne.n	2ad58 <strcpy+0x78>
   2acf2:	f84d 4d04 	str.w	r4, [sp, #-4]!
   2acf6:	f011 0f04 	tst.w	r1, #4
   2acfa:	f851 3b04 	ldr.w	r3, [r1], #4
   2acfe:	d00b      	beq.n	2ad18 <strcpy+0x38>
   2ad00:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   2ad04:	439a      	bics	r2, r3
   2ad06:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   2ad0a:	bf04      	itt	eq
   2ad0c:	f84c 3b04 	streq.w	r3, [ip], #4
   2ad10:	f851 3b04 	ldreq.w	r3, [r1], #4
   2ad14:	d116      	bne.n	2ad44 <strcpy+0x64>
   2ad16:	bf00      	nop
   2ad18:	f851 4b04 	ldr.w	r4, [r1], #4
   2ad1c:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   2ad20:	439a      	bics	r2, r3
   2ad22:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   2ad26:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
   2ad2a:	d10b      	bne.n	2ad44 <strcpy+0x64>
   2ad2c:	f84c 3b04 	str.w	r3, [ip], #4
   2ad30:	43a2      	bics	r2, r4
   2ad32:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   2ad36:	bf04      	itt	eq
   2ad38:	f851 3b04 	ldreq.w	r3, [r1], #4
   2ad3c:	f84c 4b04 	streq.w	r4, [ip], #4
   2ad40:	d0ea      	beq.n	2ad18 <strcpy+0x38>
   2ad42:	4623      	mov	r3, r4
   2ad44:	f80c 3b01 	strb.w	r3, [ip], #1
   2ad48:	f013 0fff 	tst.w	r3, #255	; 0xff
   2ad4c:	ea4f 2333 	mov.w	r3, r3, ror #8
   2ad50:	d1f8      	bne.n	2ad44 <strcpy+0x64>
   2ad52:	f85d 4b04 	ldr.w	r4, [sp], #4
   2ad56:	4770      	bx	lr
   2ad58:	f011 0f01 	tst.w	r1, #1
   2ad5c:	d006      	beq.n	2ad6c <strcpy+0x8c>
   2ad5e:	f811 2b01 	ldrb.w	r2, [r1], #1
   2ad62:	f80c 2b01 	strb.w	r2, [ip], #1
   2ad66:	2a00      	cmp	r2, #0
   2ad68:	bf08      	it	eq
   2ad6a:	4770      	bxeq	lr
   2ad6c:	f011 0f02 	tst.w	r1, #2
   2ad70:	d0bf      	beq.n	2acf2 <strcpy+0x12>
   2ad72:	f831 2b02 	ldrh.w	r2, [r1], #2
   2ad76:	f012 0fff 	tst.w	r2, #255	; 0xff
   2ad7a:	bf16      	itet	ne
   2ad7c:	f82c 2b02 	strhne.w	r2, [ip], #2
   2ad80:	f88c 2000 	strbeq.w	r2, [ip]
   2ad84:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
   2ad88:	d1b3      	bne.n	2acf2 <strcpy+0x12>
   2ad8a:	4770      	bx	lr
   2ad8c:	f811 2b01 	ldrb.w	r2, [r1], #1
   2ad90:	f80c 2b01 	strb.w	r2, [ip], #1
   2ad94:	2a00      	cmp	r2, #0
   2ad96:	d1f9      	bne.n	2ad8c <strcpy+0xac>
   2ad98:	4770      	bx	lr
   2ad9a:	bf00      	nop

0002ad9c <strncmp>:
   2ad9c:	2a00      	cmp	r2, #0
   2ad9e:	d041      	beq.n	2ae24 <strncmp+0x88>
   2ada0:	ea40 0301 	orr.w	r3, r0, r1
   2ada4:	f013 0303 	ands.w	r3, r3, #3
   2ada8:	b4f0      	push	{r4, r5, r6, r7}
   2adaa:	d125      	bne.n	2adf8 <strncmp+0x5c>
   2adac:	2a03      	cmp	r2, #3
   2adae:	d923      	bls.n	2adf8 <strncmp+0x5c>
   2adb0:	6804      	ldr	r4, [r0, #0]
   2adb2:	680d      	ldr	r5, [r1, #0]
   2adb4:	42ac      	cmp	r4, r5
   2adb6:	d11f      	bne.n	2adf8 <strncmp+0x5c>
   2adb8:	3a04      	subs	r2, #4
   2adba:	d038      	beq.n	2ae2e <strncmp+0x92>
   2adbc:	f1a4 3501 	sub.w	r5, r4, #16843009	; 0x1010101
   2adc0:	ea25 0404 	bic.w	r4, r5, r4
   2adc4:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   2adc8:	d12e      	bne.n	2ae28 <strncmp+0x8c>
   2adca:	3004      	adds	r0, #4
   2adcc:	3104      	adds	r1, #4
   2adce:	e00f      	b.n	2adf0 <strncmp+0x54>
   2add0:	f850 3b04 	ldr.w	r3, [r0], #4
   2add4:	680e      	ldr	r6, [r1, #0]
   2add6:	f1a3 3401 	sub.w	r4, r3, #16843009	; 0x1010101
   2adda:	42b3      	cmp	r3, r6
   2addc:	ea24 0403 	bic.w	r4, r4, r3
   2ade0:	f101 0104 	add.w	r1, r1, #4
   2ade4:	d126      	bne.n	2ae34 <strncmp+0x98>
   2ade6:	3a04      	subs	r2, #4
   2ade8:	d021      	beq.n	2ae2e <strncmp+0x92>
   2adea:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   2adee:	d11b      	bne.n	2ae28 <strncmp+0x8c>
   2adf0:	2a03      	cmp	r2, #3
   2adf2:	4607      	mov	r7, r0
   2adf4:	460d      	mov	r5, r1
   2adf6:	d8eb      	bhi.n	2add0 <strncmp+0x34>
   2adf8:	7805      	ldrb	r5, [r0, #0]
   2adfa:	780c      	ldrb	r4, [r1, #0]
   2adfc:	42ac      	cmp	r4, r5
   2adfe:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
   2ae02:	d11a      	bne.n	2ae3a <strncmp+0x9e>
   2ae04:	b183      	cbz	r3, 2ae28 <strncmp+0x8c>
   2ae06:	b914      	cbnz	r4, 2ae0e <strncmp+0x72>
   2ae08:	e00e      	b.n	2ae28 <strncmp+0x8c>
   2ae0a:	b16b      	cbz	r3, 2ae28 <strncmp+0x8c>
   2ae0c:	b17a      	cbz	r2, 2ae2e <strncmp+0x92>
   2ae0e:	f810 2f01 	ldrb.w	r2, [r0, #1]!
   2ae12:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   2ae16:	42a2      	cmp	r2, r4
   2ae18:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   2ae1c:	d0f5      	beq.n	2ae0a <strncmp+0x6e>
   2ae1e:	1b10      	subs	r0, r2, r4
   2ae20:	bcf0      	pop	{r4, r5, r6, r7}
   2ae22:	4770      	bx	lr
   2ae24:	4610      	mov	r0, r2
   2ae26:	4770      	bx	lr
   2ae28:	2000      	movs	r0, #0
   2ae2a:	bcf0      	pop	{r4, r5, r6, r7}
   2ae2c:	4770      	bx	lr
   2ae2e:	4610      	mov	r0, r2
   2ae30:	bcf0      	pop	{r4, r5, r6, r7}
   2ae32:	4770      	bx	lr
   2ae34:	4629      	mov	r1, r5
   2ae36:	4638      	mov	r0, r7
   2ae38:	e7de      	b.n	2adf8 <strncmp+0x5c>
   2ae3a:	462a      	mov	r2, r5
   2ae3c:	e7ef      	b.n	2ae1e <strncmp+0x82>
   2ae3e:	bf00      	nop

0002ae40 <strncpy>:
   2ae40:	ea40 0301 	orr.w	r3, r0, r1
   2ae44:	f013 0f03 	tst.w	r3, #3
   2ae48:	b470      	push	{r4, r5, r6}
   2ae4a:	4603      	mov	r3, r0
   2ae4c:	d024      	beq.n	2ae98 <strncpy+0x58>
   2ae4e:	b1a2      	cbz	r2, 2ae7a <strncpy+0x3a>
   2ae50:	780c      	ldrb	r4, [r1, #0]
   2ae52:	701c      	strb	r4, [r3, #0]
   2ae54:	3a01      	subs	r2, #1
   2ae56:	3301      	adds	r3, #1
   2ae58:	3101      	adds	r1, #1
   2ae5a:	b13c      	cbz	r4, 2ae6c <strncpy+0x2c>
   2ae5c:	b16a      	cbz	r2, 2ae7a <strncpy+0x3a>
   2ae5e:	f811 4b01 	ldrb.w	r4, [r1], #1
   2ae62:	f803 4b01 	strb.w	r4, [r3], #1
   2ae66:	3a01      	subs	r2, #1
   2ae68:	2c00      	cmp	r4, #0
   2ae6a:	d1f7      	bne.n	2ae5c <strncpy+0x1c>
   2ae6c:	b12a      	cbz	r2, 2ae7a <strncpy+0x3a>
   2ae6e:	441a      	add	r2, r3
   2ae70:	2100      	movs	r1, #0
   2ae72:	f803 1b01 	strb.w	r1, [r3], #1
   2ae76:	429a      	cmp	r2, r3
   2ae78:	d1fb      	bne.n	2ae72 <strncpy+0x32>
   2ae7a:	bc70      	pop	{r4, r5, r6}
   2ae7c:	4770      	bx	lr
   2ae7e:	460e      	mov	r6, r1
   2ae80:	f851 5b04 	ldr.w	r5, [r1], #4
   2ae84:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
   2ae88:	ea24 0405 	bic.w	r4, r4, r5
   2ae8c:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   2ae90:	d105      	bne.n	2ae9e <strncpy+0x5e>
   2ae92:	f843 5b04 	str.w	r5, [r3], #4
   2ae96:	3a04      	subs	r2, #4
   2ae98:	2a03      	cmp	r2, #3
   2ae9a:	d8f0      	bhi.n	2ae7e <strncpy+0x3e>
   2ae9c:	e7d7      	b.n	2ae4e <strncpy+0xe>
   2ae9e:	4631      	mov	r1, r6
   2aea0:	e7d6      	b.n	2ae50 <strncpy+0x10>
   2aea2:	bf00      	nop

0002aea4 <strrchr>:
   2aea4:	b171      	cbz	r1, 2aec4 <strrchr+0x20>
   2aea6:	b538      	push	{r3, r4, r5, lr}
   2aea8:	4603      	mov	r3, r0
   2aeaa:	460c      	mov	r4, r1
   2aeac:	2500      	movs	r5, #0
   2aeae:	e001      	b.n	2aeb4 <strrchr+0x10>
   2aeb0:	1c43      	adds	r3, r0, #1
   2aeb2:	4605      	mov	r5, r0
   2aeb4:	4618      	mov	r0, r3
   2aeb6:	4621      	mov	r1, r4
   2aeb8:	f7ff fe9e 	bl	2abf8 <strchr>
   2aebc:	2800      	cmp	r0, #0
   2aebe:	d1f7      	bne.n	2aeb0 <strrchr+0xc>
   2aec0:	4628      	mov	r0, r5
   2aec2:	bd38      	pop	{r3, r4, r5, pc}
   2aec4:	f7ff be98 	b.w	2abf8 <strchr>

0002aec8 <critical_factorization>:
   2aec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2aecc:	f04f 0e01 	mov.w	lr, #1
   2aed0:	4674      	mov	r4, lr
   2aed2:	2500      	movs	r5, #0
   2aed4:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   2aed8:	192b      	adds	r3, r5, r4
   2aeda:	428b      	cmp	r3, r1
   2aedc:	eb00 0706 	add.w	r7, r0, r6
   2aee0:	d20d      	bcs.n	2aefe <critical_factorization+0x36>
   2aee2:	5d3f      	ldrb	r7, [r7, r4]
   2aee4:	f810 c003 	ldrb.w	ip, [r0, r3]
   2aee8:	45bc      	cmp	ip, r7
   2aeea:	d22d      	bcs.n	2af48 <critical_factorization+0x80>
   2aeec:	461d      	mov	r5, r3
   2aeee:	2401      	movs	r4, #1
   2aef0:	eba3 0e06 	sub.w	lr, r3, r6
   2aef4:	192b      	adds	r3, r5, r4
   2aef6:	428b      	cmp	r3, r1
   2aef8:	eb00 0706 	add.w	r7, r0, r6
   2aefc:	d3f1      	bcc.n	2aee2 <critical_factorization+0x1a>
   2aefe:	f04f 0801 	mov.w	r8, #1
   2af02:	f8c2 e000 	str.w	lr, [r2]
   2af06:	4644      	mov	r4, r8
   2af08:	2500      	movs	r5, #0
   2af0a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   2af0e:	192b      	adds	r3, r5, r4
   2af10:	4299      	cmp	r1, r3
   2af12:	eb00 0e07 	add.w	lr, r0, r7
   2af16:	d90e      	bls.n	2af36 <critical_factorization+0x6e>
   2af18:	f81e e004 	ldrb.w	lr, [lr, r4]
   2af1c:	f810 c003 	ldrb.w	ip, [r0, r3]
   2af20:	45f4      	cmp	ip, lr
   2af22:	d918      	bls.n	2af56 <critical_factorization+0x8e>
   2af24:	461d      	mov	r5, r3
   2af26:	2401      	movs	r4, #1
   2af28:	eba3 0807 	sub.w	r8, r3, r7
   2af2c:	192b      	adds	r3, r5, r4
   2af2e:	4299      	cmp	r1, r3
   2af30:	eb00 0e07 	add.w	lr, r0, r7
   2af34:	d8f0      	bhi.n	2af18 <critical_factorization+0x50>
   2af36:	3701      	adds	r7, #1
   2af38:	1c70      	adds	r0, r6, #1
   2af3a:	4287      	cmp	r7, r0
   2af3c:	bf24      	itt	cs
   2af3e:	f8c2 8000 	strcs.w	r8, [r2]
   2af42:	4638      	movcs	r0, r7
   2af44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2af48:	d00c      	beq.n	2af64 <critical_factorization+0x9c>
   2af4a:	f04f 0e01 	mov.w	lr, #1
   2af4e:	462e      	mov	r6, r5
   2af50:	4674      	mov	r4, lr
   2af52:	4475      	add	r5, lr
   2af54:	e7c0      	b.n	2aed8 <critical_factorization+0x10>
   2af56:	d00b      	beq.n	2af70 <critical_factorization+0xa8>
   2af58:	f04f 0801 	mov.w	r8, #1
   2af5c:	462f      	mov	r7, r5
   2af5e:	4644      	mov	r4, r8
   2af60:	4445      	add	r5, r8
   2af62:	e7d4      	b.n	2af0e <critical_factorization+0x46>
   2af64:	4574      	cmp	r4, lr
   2af66:	bf12      	itee	ne
   2af68:	3401      	addne	r4, #1
   2af6a:	461d      	moveq	r5, r3
   2af6c:	2401      	moveq	r4, #1
   2af6e:	e7b3      	b.n	2aed8 <critical_factorization+0x10>
   2af70:	4544      	cmp	r4, r8
   2af72:	bf12      	itee	ne
   2af74:	3401      	addne	r4, #1
   2af76:	461d      	moveq	r5, r3
   2af78:	2401      	moveq	r4, #1
   2af7a:	e7c8      	b.n	2af0e <critical_factorization+0x46>

0002af7c <two_way_long_needle>:
   2af7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2af80:	f2ad 4d14 	subw	sp, sp, #1044	; 0x414
   2af84:	4616      	mov	r6, r2
   2af86:	4605      	mov	r5, r0
   2af88:	468b      	mov	fp, r1
   2af8a:	4610      	mov	r0, r2
   2af8c:	4619      	mov	r1, r3
   2af8e:	aa03      	add	r2, sp, #12
   2af90:	461c      	mov	r4, r3
   2af92:	f7ff ff99 	bl	2aec8 <critical_factorization>
   2af96:	ab03      	add	r3, sp, #12
   2af98:	4681      	mov	r9, r0
   2af9a:	f20d 420c 	addw	r2, sp, #1036	; 0x40c
   2af9e:	f843 4f04 	str.w	r4, [r3, #4]!
   2afa2:	4293      	cmp	r3, r2
   2afa4:	d1fb      	bne.n	2af9e <two_way_long_needle+0x22>
   2afa6:	b14c      	cbz	r4, 2afbc <two_way_long_needle+0x40>
   2afa8:	1e63      	subs	r3, r4, #1
   2afaa:	1e72      	subs	r2, r6, #1
   2afac:	a804      	add	r0, sp, #16
   2afae:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   2afb2:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
   2afb6:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
   2afba:	d2f8      	bcs.n	2afae <two_way_long_needle+0x32>
   2afbc:	9903      	ldr	r1, [sp, #12]
   2afbe:	464a      	mov	r2, r9
   2afc0:	4431      	add	r1, r6
   2afc2:	4630      	mov	r0, r6
   2afc4:	f7ff fcca 	bl	2a95c <memcmp>
   2afc8:	2800      	cmp	r0, #0
   2afca:	d16f      	bne.n	2b0ac <two_way_long_needle+0x130>
   2afcc:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
   2afd0:	9300      	str	r3, [sp, #0]
   2afd2:	18f3      	adds	r3, r6, r3
   2afd4:	4682      	mov	sl, r0
   2afd6:	9301      	str	r3, [sp, #4]
   2afd8:	4623      	mov	r3, r4
   2afda:	4680      	mov	r8, r0
   2afdc:	4654      	mov	r4, sl
   2afde:	4658      	mov	r0, fp
   2afe0:	469a      	mov	sl, r3
   2afe2:	eb08 070a 	add.w	r7, r8, sl
   2afe6:	1a3a      	subs	r2, r7, r0
   2afe8:	2100      	movs	r1, #0
   2afea:	4428      	add	r0, r5
   2afec:	f7d5 f918 	bl	220 <memchr>
   2aff0:	2800      	cmp	r0, #0
   2aff2:	d156      	bne.n	2b0a2 <two_way_long_needle+0x126>
   2aff4:	2f00      	cmp	r7, #0
   2aff6:	d054      	beq.n	2b0a2 <two_way_long_needle+0x126>
   2aff8:	19eb      	adds	r3, r5, r7
   2affa:	aa04      	add	r2, sp, #16
   2affc:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   2b000:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   2b004:	b14b      	cbz	r3, 2b01a <two_way_long_needle+0x9e>
   2b006:	b124      	cbz	r4, 2b012 <two_way_long_needle+0x96>
   2b008:	9a03      	ldr	r2, [sp, #12]
   2b00a:	4293      	cmp	r3, r2
   2b00c:	d201      	bcs.n	2b012 <two_way_long_needle+0x96>
   2b00e:	ebaa 0302 	sub.w	r3, sl, r2
   2b012:	4498      	add	r8, r3
   2b014:	2400      	movs	r4, #0
   2b016:	4638      	mov	r0, r7
   2b018:	e7e3      	b.n	2afe2 <two_way_long_needle+0x66>
   2b01a:	454c      	cmp	r4, r9
   2b01c:	4623      	mov	r3, r4
   2b01e:	f10a 3eff 	add.w	lr, sl, #4294967295	; 0xffffffff
   2b022:	bf38      	it	cc
   2b024:	464b      	movcc	r3, r9
   2b026:	4573      	cmp	r3, lr
   2b028:	d213      	bcs.n	2b052 <two_way_long_needle+0xd6>
   2b02a:	eb08 0203 	add.w	r2, r8, r3
   2b02e:	f816 c003 	ldrb.w	ip, [r6, r3]
   2b032:	5ca8      	ldrb	r0, [r5, r2]
   2b034:	4584      	cmp	ip, r0
   2b036:	442a      	add	r2, r5
   2b038:	eb06 0103 	add.w	r1, r6, r3
   2b03c:	d006      	beq.n	2b04c <two_way_long_needle+0xd0>
   2b03e:	e02c      	b.n	2b09a <two_way_long_needle+0x11e>
   2b040:	f811 cf01 	ldrb.w	ip, [r1, #1]!
   2b044:	f812 0f01 	ldrb.w	r0, [r2, #1]!
   2b048:	4584      	cmp	ip, r0
   2b04a:	d126      	bne.n	2b09a <two_way_long_needle+0x11e>
   2b04c:	3301      	adds	r3, #1
   2b04e:	4573      	cmp	r3, lr
   2b050:	d3f6      	bcc.n	2b040 <two_way_long_needle+0xc4>
   2b052:	454c      	cmp	r4, r9
   2b054:	9900      	ldr	r1, [sp, #0]
   2b056:	f080 8089 	bcs.w	2b16c <two_way_long_needle+0x1f0>
   2b05a:	9b00      	ldr	r3, [sp, #0]
   2b05c:	eb08 0203 	add.w	r2, r8, r3
   2b060:	9b01      	ldr	r3, [sp, #4]
   2b062:	5ca8      	ldrb	r0, [r5, r2]
   2b064:	781b      	ldrb	r3, [r3, #0]
   2b066:	4298      	cmp	r0, r3
   2b068:	442a      	add	r2, r5
   2b06a:	d17f      	bne.n	2b16c <two_way_long_needle+0x1f0>
   2b06c:	9801      	ldr	r0, [sp, #4]
   2b06e:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
   2b072:	e006      	b.n	2b082 <two_way_long_needle+0x106>
   2b074:	f810 cd01 	ldrb.w	ip, [r0, #-1]!
   2b078:	f812 ed01 	ldrb.w	lr, [r2, #-1]!
   2b07c:	45f4      	cmp	ip, lr
   2b07e:	d103      	bne.n	2b088 <two_way_long_needle+0x10c>
   2b080:	4619      	mov	r1, r3
   2b082:	1e4b      	subs	r3, r1, #1
   2b084:	459b      	cmp	fp, r3
   2b086:	d1f5      	bne.n	2b074 <two_way_long_needle+0xf8>
   2b088:	3401      	adds	r4, #1
   2b08a:	428c      	cmp	r4, r1
   2b08c:	d870      	bhi.n	2b170 <two_way_long_needle+0x1f4>
   2b08e:	9c03      	ldr	r4, [sp, #12]
   2b090:	4638      	mov	r0, r7
   2b092:	44a0      	add	r8, r4
   2b094:	ebaa 0404 	sub.w	r4, sl, r4
   2b098:	e7a3      	b.n	2afe2 <two_way_long_needle+0x66>
   2b09a:	f1c9 0201 	rsb	r2, r9, #1
   2b09e:	4490      	add	r8, r2
   2b0a0:	e7b7      	b.n	2b012 <two_way_long_needle+0x96>
   2b0a2:	2000      	movs	r0, #0
   2b0a4:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
   2b0a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b0ac:	eba4 0309 	sub.w	r3, r4, r9
   2b0b0:	454b      	cmp	r3, r9
   2b0b2:	bf38      	it	cc
   2b0b4:	464b      	movcc	r3, r9
   2b0b6:	3301      	adds	r3, #1
   2b0b8:	f109 38ff 	add.w	r8, r9, #4294967295	; 0xffffffff
   2b0bc:	9303      	str	r3, [sp, #12]
   2b0be:	eb06 0308 	add.w	r3, r6, r8
   2b0c2:	4658      	mov	r0, fp
   2b0c4:	f04f 0a00 	mov.w	sl, #0
   2b0c8:	46cb      	mov	fp, r9
   2b0ca:	4699      	mov	r9, r3
   2b0cc:	eb0a 0704 	add.w	r7, sl, r4
   2b0d0:	1a3a      	subs	r2, r7, r0
   2b0d2:	2100      	movs	r1, #0
   2b0d4:	4428      	add	r0, r5
   2b0d6:	f7d5 f8a3 	bl	220 <memchr>
   2b0da:	2800      	cmp	r0, #0
   2b0dc:	d1e1      	bne.n	2b0a2 <two_way_long_needle+0x126>
   2b0de:	2f00      	cmp	r7, #0
   2b0e0:	d0df      	beq.n	2b0a2 <two_way_long_needle+0x126>
   2b0e2:	19eb      	adds	r3, r5, r7
   2b0e4:	aa04      	add	r2, sp, #16
   2b0e6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   2b0ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   2b0ee:	bba3      	cbnz	r3, 2b15a <two_way_long_needle+0x1de>
   2b0f0:	1e61      	subs	r1, r4, #1
   2b0f2:	458b      	cmp	fp, r1
   2b0f4:	d215      	bcs.n	2b122 <two_way_long_needle+0x1a6>
   2b0f6:	eb0a 020b 	add.w	r2, sl, fp
   2b0fa:	f816 300b 	ldrb.w	r3, [r6, fp]
   2b0fe:	f815 e002 	ldrb.w	lr, [r5, r2]
   2b102:	459e      	cmp	lr, r3
   2b104:	442a      	add	r2, r5
   2b106:	eb06 000b 	add.w	r0, r6, fp
   2b10a:	465b      	mov	r3, fp
   2b10c:	d006      	beq.n	2b11c <two_way_long_needle+0x1a0>
   2b10e:	e027      	b.n	2b160 <two_way_long_needle+0x1e4>
   2b110:	f810 cf01 	ldrb.w	ip, [r0, #1]!
   2b114:	f812 ef01 	ldrb.w	lr, [r2, #1]!
   2b118:	45f4      	cmp	ip, lr
   2b11a:	d121      	bne.n	2b160 <two_way_long_needle+0x1e4>
   2b11c:	3301      	adds	r3, #1
   2b11e:	428b      	cmp	r3, r1
   2b120:	d3f6      	bcc.n	2b110 <two_way_long_needle+0x194>
   2b122:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   2b126:	d011      	beq.n	2b14c <two_way_long_needle+0x1d0>
   2b128:	eb0a 0208 	add.w	r2, sl, r8
   2b12c:	f899 1000 	ldrb.w	r1, [r9]
   2b130:	5cab      	ldrb	r3, [r5, r2]
   2b132:	4299      	cmp	r1, r3
   2b134:	442a      	add	r2, r5
   2b136:	d10f      	bne.n	2b158 <two_way_long_needle+0x1dc>
   2b138:	464b      	mov	r3, r9
   2b13a:	e005      	b.n	2b148 <two_way_long_needle+0x1cc>
   2b13c:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
   2b140:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
   2b144:	4288      	cmp	r0, r1
   2b146:	d107      	bne.n	2b158 <two_way_long_needle+0x1dc>
   2b148:	42b3      	cmp	r3, r6
   2b14a:	d1f7      	bne.n	2b13c <two_way_long_needle+0x1c0>
   2b14c:	eb05 000a 	add.w	r0, r5, sl
   2b150:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
   2b154:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b158:	9b03      	ldr	r3, [sp, #12]
   2b15a:	449a      	add	sl, r3
   2b15c:	4638      	mov	r0, r7
   2b15e:	e7b5      	b.n	2b0cc <two_way_long_needle+0x150>
   2b160:	f1cb 0201 	rsb	r2, fp, #1
   2b164:	4492      	add	sl, r2
   2b166:	449a      	add	sl, r3
   2b168:	4638      	mov	r0, r7
   2b16a:	e7af      	b.n	2b0cc <two_way_long_needle+0x150>
   2b16c:	4649      	mov	r1, r9
   2b16e:	e78b      	b.n	2b088 <two_way_long_needle+0x10c>
   2b170:	eb05 0008 	add.w	r0, r5, r8
   2b174:	e796      	b.n	2b0a4 <two_way_long_needle+0x128>
   2b176:	bf00      	nop

0002b178 <strstr>:
   2b178:	7802      	ldrb	r2, [r0, #0]
   2b17a:	2a00      	cmp	r2, #0
   2b17c:	f000 8101 	beq.w	2b382 <strstr+0x20a>
   2b180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b184:	f891 8000 	ldrb.w	r8, [r1]
   2b188:	b085      	sub	sp, #20
   2b18a:	4644      	mov	r4, r8
   2b18c:	f1b8 0f00 	cmp.w	r8, #0
   2b190:	d016      	beq.n	2b1c0 <strstr+0x48>
   2b192:	4686      	mov	lr, r0
   2b194:	f101 0c01 	add.w	ip, r1, #1
   2b198:	2701      	movs	r7, #1
   2b19a:	e003      	b.n	2b1a4 <strstr+0x2c>
   2b19c:	f813 4b01 	ldrb.w	r4, [r3], #1
   2b1a0:	b16c      	cbz	r4, 2b1be <strstr+0x46>
   2b1a2:	469c      	mov	ip, r3
   2b1a4:	42a2      	cmp	r2, r4
   2b1a6:	bf14      	ite	ne
   2b1a8:	2700      	movne	r7, #0
   2b1aa:	f007 0701 	andeq.w	r7, r7, #1
   2b1ae:	f81e 2f01 	ldrb.w	r2, [lr, #1]!
   2b1b2:	4663      	mov	r3, ip
   2b1b4:	2a00      	cmp	r2, #0
   2b1b6:	d1f1      	bne.n	2b19c <strstr+0x24>
   2b1b8:	f89c 3000 	ldrb.w	r3, [ip]
   2b1bc:	b9fb      	cbnz	r3, 2b1fe <strstr+0x86>
   2b1be:	b117      	cbz	r7, 2b1c6 <strstr+0x4e>
   2b1c0:	b005      	add	sp, #20
   2b1c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b1c6:	460e      	mov	r6, r1
   2b1c8:	4605      	mov	r5, r0
   2b1ca:	4641      	mov	r1, r8
   2b1cc:	3001      	adds	r0, #1
   2b1ce:	ebac 0406 	sub.w	r4, ip, r6
   2b1d2:	f7ff fd11 	bl	2abf8 <strchr>
   2b1d6:	4607      	mov	r7, r0
   2b1d8:	b188      	cbz	r0, 2b1fe <strstr+0x86>
   2b1da:	2c01      	cmp	r4, #1
   2b1dc:	d0f0      	beq.n	2b1c0 <strstr+0x48>
   2b1de:	1928      	adds	r0, r5, r4
   2b1e0:	4287      	cmp	r7, r0
   2b1e2:	bf94      	ite	ls
   2b1e4:	1bc1      	subls	r1, r0, r7
   2b1e6:	2101      	movhi	r1, #1
   2b1e8:	2c1f      	cmp	r4, #31
   2b1ea:	468b      	mov	fp, r1
   2b1ec:	d90b      	bls.n	2b206 <strstr+0x8e>
   2b1ee:	4623      	mov	r3, r4
   2b1f0:	4632      	mov	r2, r6
   2b1f2:	4638      	mov	r0, r7
   2b1f4:	f7ff fec2 	bl	2af7c <two_way_long_needle>
   2b1f8:	b005      	add	sp, #20
   2b1fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b1fe:	2000      	movs	r0, #0
   2b200:	b005      	add	sp, #20
   2b202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b206:	aa03      	add	r2, sp, #12
   2b208:	4621      	mov	r1, r4
   2b20a:	4630      	mov	r0, r6
   2b20c:	f7ff fe5c 	bl	2aec8 <critical_factorization>
   2b210:	9903      	ldr	r1, [sp, #12]
   2b212:	4680      	mov	r8, r0
   2b214:	4602      	mov	r2, r0
   2b216:	4431      	add	r1, r6
   2b218:	4630      	mov	r0, r6
   2b21a:	f7ff fb9f 	bl	2a95c <memcmp>
   2b21e:	2800      	cmp	r0, #0
   2b220:	d157      	bne.n	2b2d2 <strstr+0x15a>
   2b222:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
   2b226:	9300      	str	r3, [sp, #0]
   2b228:	18f3      	adds	r3, r6, r3
   2b22a:	4681      	mov	r9, r0
   2b22c:	4605      	mov	r5, r0
   2b22e:	9301      	str	r3, [sp, #4]
   2b230:	4658      	mov	r0, fp
   2b232:	46b2      	mov	sl, r6
   2b234:	1966      	adds	r6, r4, r5
   2b236:	1a32      	subs	r2, r6, r0
   2b238:	2100      	movs	r1, #0
   2b23a:	4438      	add	r0, r7
   2b23c:	f7d4 fff0 	bl	220 <memchr>
   2b240:	2800      	cmp	r0, #0
   2b242:	d1dc      	bne.n	2b1fe <strstr+0x86>
   2b244:	2e00      	cmp	r6, #0
   2b246:	d0da      	beq.n	2b1fe <strstr+0x86>
   2b248:	45c8      	cmp	r8, r9
   2b24a:	4643      	mov	r3, r8
   2b24c:	bf38      	it	cc
   2b24e:	464b      	movcc	r3, r9
   2b250:	429c      	cmp	r4, r3
   2b252:	d912      	bls.n	2b27a <strstr+0x102>
   2b254:	195a      	adds	r2, r3, r5
   2b256:	f81a 1003 	ldrb.w	r1, [sl, r3]
   2b25a:	5cb8      	ldrb	r0, [r7, r2]
   2b25c:	4281      	cmp	r1, r0
   2b25e:	443a      	add	r2, r7
   2b260:	eb0a 0e03 	add.w	lr, sl, r3
   2b264:	d006      	beq.n	2b274 <strstr+0xfc>
   2b266:	e02c      	b.n	2b2c2 <strstr+0x14a>
   2b268:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
   2b26c:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   2b270:	4288      	cmp	r0, r1
   2b272:	d126      	bne.n	2b2c2 <strstr+0x14a>
   2b274:	3301      	adds	r3, #1
   2b276:	429c      	cmp	r4, r3
   2b278:	d1f6      	bne.n	2b268 <strstr+0xf0>
   2b27a:	45c8      	cmp	r8, r9
   2b27c:	9900      	ldr	r1, [sp, #0]
   2b27e:	f240 8083 	bls.w	2b388 <strstr+0x210>
   2b282:	9b00      	ldr	r3, [sp, #0]
   2b284:	18ea      	adds	r2, r5, r3
   2b286:	9b01      	ldr	r3, [sp, #4]
   2b288:	5cb8      	ldrb	r0, [r7, r2]
   2b28a:	781b      	ldrb	r3, [r3, #0]
   2b28c:	4298      	cmp	r0, r3
   2b28e:	443a      	add	r2, r7
   2b290:	d17a      	bne.n	2b388 <strstr+0x210>
   2b292:	9801      	ldr	r0, [sp, #4]
   2b294:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
   2b298:	e006      	b.n	2b2a8 <strstr+0x130>
   2b29a:	f810 cd01 	ldrb.w	ip, [r0, #-1]!
   2b29e:	f812 ed01 	ldrb.w	lr, [r2, #-1]!
   2b2a2:	45f4      	cmp	ip, lr
   2b2a4:	d103      	bne.n	2b2ae <strstr+0x136>
   2b2a6:	4619      	mov	r1, r3
   2b2a8:	1e4b      	subs	r3, r1, #1
   2b2aa:	455b      	cmp	r3, fp
   2b2ac:	d1f5      	bne.n	2b29a <strstr+0x122>
   2b2ae:	f109 0901 	add.w	r9, r9, #1
   2b2b2:	4589      	cmp	r9, r1
   2b2b4:	d857      	bhi.n	2b366 <strstr+0x1ee>
   2b2b6:	9b03      	ldr	r3, [sp, #12]
   2b2b8:	4630      	mov	r0, r6
   2b2ba:	441d      	add	r5, r3
   2b2bc:	eba4 0903 	sub.w	r9, r4, r3
   2b2c0:	e7b8      	b.n	2b234 <strstr+0xbc>
   2b2c2:	f1c8 0201 	rsb	r2, r8, #1
   2b2c6:	4415      	add	r5, r2
   2b2c8:	441d      	add	r5, r3
   2b2ca:	f04f 0900 	mov.w	r9, #0
   2b2ce:	4630      	mov	r0, r6
   2b2d0:	e7b0      	b.n	2b234 <strstr+0xbc>
   2b2d2:	eba4 0308 	sub.w	r3, r4, r8
   2b2d6:	4543      	cmp	r3, r8
   2b2d8:	bf38      	it	cc
   2b2da:	4643      	movcc	r3, r8
   2b2dc:	3301      	adds	r3, #1
   2b2de:	f108 39ff 	add.w	r9, r8, #4294967295	; 0xffffffff
   2b2e2:	9303      	str	r3, [sp, #12]
   2b2e4:	eb06 0309 	add.w	r3, r6, r9
   2b2e8:	4658      	mov	r0, fp
   2b2ea:	2500      	movs	r5, #0
   2b2ec:	46bb      	mov	fp, r7
   2b2ee:	469a      	mov	sl, r3
   2b2f0:	1967      	adds	r7, r4, r5
   2b2f2:	1a3a      	subs	r2, r7, r0
   2b2f4:	2100      	movs	r1, #0
   2b2f6:	4458      	add	r0, fp
   2b2f8:	f7d4 ff92 	bl	220 <memchr>
   2b2fc:	2800      	cmp	r0, #0
   2b2fe:	f47f af7e 	bne.w	2b1fe <strstr+0x86>
   2b302:	2f00      	cmp	r7, #0
   2b304:	f43f af7b 	beq.w	2b1fe <strstr+0x86>
   2b308:	4544      	cmp	r4, r8
   2b30a:	d915      	bls.n	2b338 <strstr+0x1c0>
   2b30c:	eb08 0205 	add.w	r2, r8, r5
   2b310:	f816 3008 	ldrb.w	r3, [r6, r8]
   2b314:	f81b 0002 	ldrb.w	r0, [fp, r2]
   2b318:	4298      	cmp	r0, r3
   2b31a:	445a      	add	r2, fp
   2b31c:	eb06 0108 	add.w	r1, r6, r8
   2b320:	4643      	mov	r3, r8
   2b322:	d006      	beq.n	2b332 <strstr+0x1ba>
   2b324:	e023      	b.n	2b36e <strstr+0x1f6>
   2b326:	f811 ef01 	ldrb.w	lr, [r1, #1]!
   2b32a:	f812 0f01 	ldrb.w	r0, [r2, #1]!
   2b32e:	4586      	cmp	lr, r0
   2b330:	d11d      	bne.n	2b36e <strstr+0x1f6>
   2b332:	3301      	adds	r3, #1
   2b334:	429c      	cmp	r4, r3
   2b336:	d1f6      	bne.n	2b326 <strstr+0x1ae>
   2b338:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
   2b33c:	d012      	beq.n	2b364 <strstr+0x1ec>
   2b33e:	eb05 0209 	add.w	r2, r5, r9
   2b342:	f89a 3000 	ldrb.w	r3, [sl]
   2b346:	f81b 1002 	ldrb.w	r1, [fp, r2]
   2b34a:	4299      	cmp	r1, r3
   2b34c:	445a      	add	r2, fp
   2b34e:	d114      	bne.n	2b37a <strstr+0x202>
   2b350:	4653      	mov	r3, sl
   2b352:	e005      	b.n	2b360 <strstr+0x1e8>
   2b354:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
   2b358:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
   2b35c:	4288      	cmp	r0, r1
   2b35e:	d10c      	bne.n	2b37a <strstr+0x202>
   2b360:	42b3      	cmp	r3, r6
   2b362:	d1f7      	bne.n	2b354 <strstr+0x1dc>
   2b364:	465f      	mov	r7, fp
   2b366:	1978      	adds	r0, r7, r5
   2b368:	b005      	add	sp, #20
   2b36a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b36e:	f1c8 0201 	rsb	r2, r8, #1
   2b372:	4415      	add	r5, r2
   2b374:	441d      	add	r5, r3
   2b376:	4638      	mov	r0, r7
   2b378:	e7ba      	b.n	2b2f0 <strstr+0x178>
   2b37a:	9b03      	ldr	r3, [sp, #12]
   2b37c:	4638      	mov	r0, r7
   2b37e:	441d      	add	r5, r3
   2b380:	e7b6      	b.n	2b2f0 <strstr+0x178>
   2b382:	780b      	ldrb	r3, [r1, #0]
   2b384:	b913      	cbnz	r3, 2b38c <strstr+0x214>
   2b386:	4770      	bx	lr
   2b388:	4641      	mov	r1, r8
   2b38a:	e790      	b.n	2b2ae <strstr+0x136>
   2b38c:	2000      	movs	r0, #0
   2b38e:	4770      	bx	lr

0002b390 <_strtol_l.isra.0>:
   2b390:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b394:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   2b398:	460f      	mov	r7, r1
   2b39a:	4680      	mov	r8, r0
   2b39c:	4616      	mov	r6, r2
   2b39e:	461d      	mov	r5, r3
   2b3a0:	468a      	mov	sl, r1
   2b3a2:	e000      	b.n	2b3a6 <_strtol_l.isra.0+0x16>
   2b3a4:	46a2      	mov	sl, r4
   2b3a6:	4654      	mov	r4, sl
   2b3a8:	4648      	mov	r0, r9
   2b3aa:	f814 bb01 	ldrb.w	fp, [r4], #1
   2b3ae:	f7ff faad 	bl	2a90c <__locale_ctype_ptr_l>
   2b3b2:	4458      	add	r0, fp
   2b3b4:	7842      	ldrb	r2, [r0, #1]
   2b3b6:	f012 0208 	ands.w	r2, r2, #8
   2b3ba:	d1f3      	bne.n	2b3a4 <_strtol_l.isra.0+0x14>
   2b3bc:	f1bb 0f2d 	cmp.w	fp, #45	; 0x2d
   2b3c0:	d04f      	beq.n	2b462 <_strtol_l.isra.0+0xd2>
   2b3c2:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
   2b3c6:	bf04      	itt	eq
   2b3c8:	f894 b000 	ldrbeq.w	fp, [r4]
   2b3cc:	f10a 0402 	addeq.w	r4, sl, #2
   2b3d0:	b11d      	cbz	r5, 2b3da <_strtol_l.isra.0+0x4a>
   2b3d2:	2d10      	cmp	r5, #16
   2b3d4:	d056      	beq.n	2b484 <_strtol_l.isra.0+0xf4>
   2b3d6:	46ac      	mov	ip, r5
   2b3d8:	e004      	b.n	2b3e4 <_strtol_l.isra.0+0x54>
   2b3da:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
   2b3de:	d060      	beq.n	2b4a2 <_strtol_l.isra.0+0x112>
   2b3e0:	250a      	movs	r5, #10
   2b3e2:	46ac      	mov	ip, r5
   2b3e4:	2a00      	cmp	r2, #0
   2b3e6:	bf0c      	ite	eq
   2b3e8:	f06f 4900 	mvneq.w	r9, #2147483648	; 0x80000000
   2b3ec:	f04f 4900 	movne.w	r9, #2147483648	; 0x80000000
   2b3f0:	2100      	movs	r1, #0
   2b3f2:	fbb9 fefc 	udiv	lr, r9, ip
   2b3f6:	4608      	mov	r0, r1
   2b3f8:	fb0c 9a1e 	mls	sl, ip, lr, r9
   2b3fc:	e005      	b.n	2b40a <_strtol_l.isra.0+0x7a>
   2b3fe:	d029      	beq.n	2b454 <_strtol_l.isra.0+0xc4>
   2b400:	fb0c 3000 	mla	r0, ip, r0, r3
   2b404:	2101      	movs	r1, #1
   2b406:	f814 bb01 	ldrb.w	fp, [r4], #1
   2b40a:	f1ab 0330 	sub.w	r3, fp, #48	; 0x30
   2b40e:	2b09      	cmp	r3, #9
   2b410:	d905      	bls.n	2b41e <_strtol_l.isra.0+0x8e>
   2b412:	f1ab 0341 	sub.w	r3, fp, #65	; 0x41
   2b416:	2b19      	cmp	r3, #25
   2b418:	d80b      	bhi.n	2b432 <_strtol_l.isra.0+0xa2>
   2b41a:	f1ab 0337 	sub.w	r3, fp, #55	; 0x37
   2b41e:	429d      	cmp	r5, r3
   2b420:	dd0f      	ble.n	2b442 <_strtol_l.isra.0+0xb2>
   2b422:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   2b426:	d0ee      	beq.n	2b406 <_strtol_l.isra.0+0x76>
   2b428:	4586      	cmp	lr, r0
   2b42a:	d2e8      	bcs.n	2b3fe <_strtol_l.isra.0+0x6e>
   2b42c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2b430:	e7e9      	b.n	2b406 <_strtol_l.isra.0+0x76>
   2b432:	f1ab 0361 	sub.w	r3, fp, #97	; 0x61
   2b436:	2b19      	cmp	r3, #25
   2b438:	d803      	bhi.n	2b442 <_strtol_l.isra.0+0xb2>
   2b43a:	f1ab 0357 	sub.w	r3, fp, #87	; 0x57
   2b43e:	429d      	cmp	r5, r3
   2b440:	dcef      	bgt.n	2b422 <_strtol_l.isra.0+0x92>
   2b442:	1c4b      	adds	r3, r1, #1
   2b444:	d013      	beq.n	2b46e <_strtol_l.isra.0+0xde>
   2b446:	b102      	cbz	r2, 2b44a <_strtol_l.isra.0+0xba>
   2b448:	4240      	negs	r0, r0
   2b44a:	b146      	cbz	r6, 2b45e <_strtol_l.isra.0+0xce>
   2b44c:	b9c1      	cbnz	r1, 2b480 <_strtol_l.isra.0+0xf0>
   2b44e:	6037      	str	r7, [r6, #0]
   2b450:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b454:	459a      	cmp	sl, r3
   2b456:	dad3      	bge.n	2b400 <_strtol_l.isra.0+0x70>
   2b458:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2b45c:	e7d3      	b.n	2b406 <_strtol_l.isra.0+0x76>
   2b45e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b462:	f894 b000 	ldrb.w	fp, [r4]
   2b466:	2201      	movs	r2, #1
   2b468:	f10a 0402 	add.w	r4, sl, #2
   2b46c:	e7b0      	b.n	2b3d0 <_strtol_l.isra.0+0x40>
   2b46e:	2322      	movs	r3, #34	; 0x22
   2b470:	f8c8 3000 	str.w	r3, [r8]
   2b474:	b1ee      	cbz	r6, 2b4b2 <_strtol_l.isra.0+0x122>
   2b476:	1e67      	subs	r7, r4, #1
   2b478:	4648      	mov	r0, r9
   2b47a:	6037      	str	r7, [r6, #0]
   2b47c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b480:	4681      	mov	r9, r0
   2b482:	e7f8      	b.n	2b476 <_strtol_l.isra.0+0xe6>
   2b484:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
   2b488:	d1a5      	bne.n	2b3d6 <_strtol_l.isra.0+0x46>
   2b48a:	7823      	ldrb	r3, [r4, #0]
   2b48c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   2b490:	2b58      	cmp	r3, #88	; 0x58
   2b492:	d1a0      	bne.n	2b3d6 <_strtol_l.isra.0+0x46>
   2b494:	f04f 0c10 	mov.w	ip, #16
   2b498:	f894 b001 	ldrb.w	fp, [r4, #1]
   2b49c:	4665      	mov	r5, ip
   2b49e:	3402      	adds	r4, #2
   2b4a0:	e7a0      	b.n	2b3e4 <_strtol_l.isra.0+0x54>
   2b4a2:	7823      	ldrb	r3, [r4, #0]
   2b4a4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   2b4a8:	2b58      	cmp	r3, #88	; 0x58
   2b4aa:	d0f3      	beq.n	2b494 <_strtol_l.isra.0+0x104>
   2b4ac:	2508      	movs	r5, #8
   2b4ae:	46ac      	mov	ip, r5
   2b4b0:	e798      	b.n	2b3e4 <_strtol_l.isra.0+0x54>
   2b4b2:	4648      	mov	r0, r9
   2b4b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002b4b8 <strtol>:
   2b4b8:	b530      	push	{r4, r5, lr}
   2b4ba:	4c08      	ldr	r4, [pc, #32]	; (2b4dc <strtol+0x24>)
   2b4bc:	4b08      	ldr	r3, [pc, #32]	; (2b4e0 <strtol+0x28>)
   2b4be:	6825      	ldr	r5, [r4, #0]
   2b4c0:	6b6c      	ldr	r4, [r5, #52]	; 0x34
   2b4c2:	b083      	sub	sp, #12
   2b4c4:	2c00      	cmp	r4, #0
   2b4c6:	bf08      	it	eq
   2b4c8:	461c      	moveq	r4, r3
   2b4ca:	9400      	str	r4, [sp, #0]
   2b4cc:	4613      	mov	r3, r2
   2b4ce:	460a      	mov	r2, r1
   2b4d0:	4601      	mov	r1, r0
   2b4d2:	4628      	mov	r0, r5
   2b4d4:	f7ff ff5c 	bl	2b390 <_strtol_l.isra.0>
   2b4d8:	b003      	add	sp, #12
   2b4da:	bd30      	pop	{r4, r5, pc}
   2b4dc:	2000c67c 	.word	0x2000c67c
   2b4e0:	2000c510 	.word	0x2000c510

0002b4e4 <_strtoul_l.isra.0>:
   2b4e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b4e8:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   2b4ec:	460e      	mov	r6, r1
   2b4ee:	4607      	mov	r7, r0
   2b4f0:	4615      	mov	r5, r2
   2b4f2:	4698      	mov	r8, r3
   2b4f4:	468a      	mov	sl, r1
   2b4f6:	e000      	b.n	2b4fa <_strtoul_l.isra.0+0x16>
   2b4f8:	46a2      	mov	sl, r4
   2b4fa:	4654      	mov	r4, sl
   2b4fc:	4648      	mov	r0, r9
   2b4fe:	f814 bb01 	ldrb.w	fp, [r4], #1
   2b502:	f7ff fa03 	bl	2a90c <__locale_ctype_ptr_l>
   2b506:	4458      	add	r0, fp
   2b508:	7840      	ldrb	r0, [r0, #1]
   2b50a:	f010 0008 	ands.w	r0, r0, #8
   2b50e:	d1f3      	bne.n	2b4f8 <_strtoul_l.isra.0+0x14>
   2b510:	4659      	mov	r1, fp
   2b512:	292d      	cmp	r1, #45	; 0x2d
   2b514:	d059      	beq.n	2b5ca <_strtoul_l.isra.0+0xe6>
   2b516:	292b      	cmp	r1, #43	; 0x2b
   2b518:	bf04      	itt	eq
   2b51a:	7821      	ldrbeq	r1, [r4, #0]
   2b51c:	f10a 0402 	addeq.w	r4, sl, #2
   2b520:	f1b8 0f00 	cmp.w	r8, #0
   2b524:	d00c      	beq.n	2b540 <_strtoul_l.isra.0+0x5c>
   2b526:	f1b8 0f10 	cmp.w	r8, #16
   2b52a:	d053      	beq.n	2b5d4 <_strtoul_l.isra.0+0xf0>
   2b52c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   2b530:	fbbc fcf8 	udiv	ip, ip, r8
   2b534:	fb08 fa0c 	mul.w	sl, r8, ip
   2b538:	ea6f 0a0a 	mvn.w	sl, sl
   2b53c:	46c1      	mov	r9, r8
   2b53e:	e008      	b.n	2b552 <_strtoul_l.isra.0+0x6e>
   2b540:	2930      	cmp	r1, #48	; 0x30
   2b542:	d058      	beq.n	2b5f6 <_strtoul_l.isra.0+0x112>
   2b544:	f04f 080a 	mov.w	r8, #10
   2b548:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 2b628 <_strtoul_l.isra.0+0x144>
   2b54c:	46c1      	mov	r9, r8
   2b54e:	f04f 0a05 	mov.w	sl, #5
   2b552:	2300      	movs	r3, #0
   2b554:	469e      	mov	lr, r3
   2b556:	e005      	b.n	2b564 <_strtoul_l.isra.0+0x80>
   2b558:	d02a      	beq.n	2b5b0 <_strtoul_l.isra.0+0xcc>
   2b55a:	fb09 2e0e 	mla	lr, r9, lr, r2
   2b55e:	2301      	movs	r3, #1
   2b560:	f814 1b01 	ldrb.w	r1, [r4], #1
   2b564:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   2b568:	2a09      	cmp	r2, #9
   2b56a:	d905      	bls.n	2b578 <_strtoul_l.isra.0+0x94>
   2b56c:	f1a1 0241 	sub.w	r2, r1, #65	; 0x41
   2b570:	2a19      	cmp	r2, #25
   2b572:	d80a      	bhi.n	2b58a <_strtoul_l.isra.0+0xa6>
   2b574:	f1a1 0237 	sub.w	r2, r1, #55	; 0x37
   2b578:	4590      	cmp	r8, r2
   2b57a:	dd0e      	ble.n	2b59a <_strtoul_l.isra.0+0xb6>
   2b57c:	2b00      	cmp	r3, #0
   2b57e:	db01      	blt.n	2b584 <_strtoul_l.isra.0+0xa0>
   2b580:	45e6      	cmp	lr, ip
   2b582:	d9e9      	bls.n	2b558 <_strtoul_l.isra.0+0x74>
   2b584:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2b588:	e7ea      	b.n	2b560 <_strtoul_l.isra.0+0x7c>
   2b58a:	f1a1 0261 	sub.w	r2, r1, #97	; 0x61
   2b58e:	2a19      	cmp	r2, #25
   2b590:	d803      	bhi.n	2b59a <_strtoul_l.isra.0+0xb6>
   2b592:	f1a1 0257 	sub.w	r2, r1, #87	; 0x57
   2b596:	4590      	cmp	r8, r2
   2b598:	dcf0      	bgt.n	2b57c <_strtoul_l.isra.0+0x98>
   2b59a:	2b00      	cmp	r3, #0
   2b59c:	db0d      	blt.n	2b5ba <_strtoul_l.isra.0+0xd6>
   2b59e:	b108      	cbz	r0, 2b5a4 <_strtoul_l.isra.0+0xc0>
   2b5a0:	f1ce 0e00 	rsb	lr, lr, #0
   2b5a4:	b10d      	cbz	r5, 2b5aa <_strtoul_l.isra.0+0xc6>
   2b5a6:	b973      	cbnz	r3, 2b5c6 <_strtoul_l.isra.0+0xe2>
   2b5a8:	602e      	str	r6, [r5, #0]
   2b5aa:	4670      	mov	r0, lr
   2b5ac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b5b0:	4552      	cmp	r2, sl
   2b5b2:	ddd2      	ble.n	2b55a <_strtoul_l.isra.0+0x76>
   2b5b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2b5b8:	e7d2      	b.n	2b560 <_strtoul_l.isra.0+0x7c>
   2b5ba:	2322      	movs	r3, #34	; 0x22
   2b5bc:	603b      	str	r3, [r7, #0]
   2b5be:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
   2b5c2:	2d00      	cmp	r5, #0
   2b5c4:	d0f1      	beq.n	2b5aa <_strtoul_l.isra.0+0xc6>
   2b5c6:	1e66      	subs	r6, r4, #1
   2b5c8:	e7ee      	b.n	2b5a8 <_strtoul_l.isra.0+0xc4>
   2b5ca:	7821      	ldrb	r1, [r4, #0]
   2b5cc:	2001      	movs	r0, #1
   2b5ce:	f10a 0402 	add.w	r4, sl, #2
   2b5d2:	e7a5      	b.n	2b520 <_strtoul_l.isra.0+0x3c>
   2b5d4:	2930      	cmp	r1, #48	; 0x30
   2b5d6:	d11b      	bne.n	2b610 <_strtoul_l.isra.0+0x12c>
   2b5d8:	7823      	ldrb	r3, [r4, #0]
   2b5da:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   2b5de:	2b58      	cmp	r3, #88	; 0x58
   2b5e0:	d11c      	bne.n	2b61c <_strtoul_l.isra.0+0x138>
   2b5e2:	f04f 0910 	mov.w	r9, #16
   2b5e6:	7861      	ldrb	r1, [r4, #1]
   2b5e8:	46c8      	mov	r8, r9
   2b5ea:	f04f 0a0f 	mov.w	sl, #15
   2b5ee:	3402      	adds	r4, #2
   2b5f0:	f06f 4c70 	mvn.w	ip, #4026531840	; 0xf0000000
   2b5f4:	e7ad      	b.n	2b552 <_strtoul_l.isra.0+0x6e>
   2b5f6:	7823      	ldrb	r3, [r4, #0]
   2b5f8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   2b5fc:	2b58      	cmp	r3, #88	; 0x58
   2b5fe:	d0f0      	beq.n	2b5e2 <_strtoul_l.isra.0+0xfe>
   2b600:	f04f 0808 	mov.w	r8, #8
   2b604:	46c1      	mov	r9, r8
   2b606:	f04f 0a07 	mov.w	sl, #7
   2b60a:	f06f 4c60 	mvn.w	ip, #3758096384	; 0xe0000000
   2b60e:	e7a0      	b.n	2b552 <_strtoul_l.isra.0+0x6e>
   2b610:	f04f 0a0f 	mov.w	sl, #15
   2b614:	f06f 4c70 	mvn.w	ip, #4026531840	; 0xf0000000
   2b618:	46c1      	mov	r9, r8
   2b61a:	e79a      	b.n	2b552 <_strtoul_l.isra.0+0x6e>
   2b61c:	46c1      	mov	r9, r8
   2b61e:	f06f 4c70 	mvn.w	ip, #4026531840	; 0xf0000000
   2b622:	f04f 0a0f 	mov.w	sl, #15
   2b626:	e794      	b.n	2b552 <_strtoul_l.isra.0+0x6e>
   2b628:	19999999 	.word	0x19999999

0002b62c <strtoul>:
   2b62c:	b530      	push	{r4, r5, lr}
   2b62e:	4c08      	ldr	r4, [pc, #32]	; (2b650 <strtoul+0x24>)
   2b630:	4b08      	ldr	r3, [pc, #32]	; (2b654 <strtoul+0x28>)
   2b632:	6825      	ldr	r5, [r4, #0]
   2b634:	6b6c      	ldr	r4, [r5, #52]	; 0x34
   2b636:	b083      	sub	sp, #12
   2b638:	2c00      	cmp	r4, #0
   2b63a:	bf08      	it	eq
   2b63c:	461c      	moveq	r4, r3
   2b63e:	9400      	str	r4, [sp, #0]
   2b640:	4613      	mov	r3, r2
   2b642:	460a      	mov	r2, r1
   2b644:	4601      	mov	r1, r0
   2b646:	4628      	mov	r0, r5
   2b648:	f7ff ff4c 	bl	2b4e4 <_strtoul_l.isra.0>
   2b64c:	b003      	add	sp, #12
   2b64e:	bd30      	pop	{r4, r5, pc}
   2b650:	2000c67c 	.word	0x2000c67c
   2b654:	2000c510 	.word	0x2000c510

0002b658 <_svfprintf_r>:
   2b658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b65c:	b0c3      	sub	sp, #268	; 0x10c
   2b65e:	460c      	mov	r4, r1
   2b660:	910b      	str	r1, [sp, #44]	; 0x2c
   2b662:	4692      	mov	sl, r2
   2b664:	930f      	str	r3, [sp, #60]	; 0x3c
   2b666:	900c      	str	r0, [sp, #48]	; 0x30
   2b668:	f002 f9f0 	bl	2da4c <_localeconv_r>
   2b66c:	6803      	ldr	r3, [r0, #0]
   2b66e:	931a      	str	r3, [sp, #104]	; 0x68
   2b670:	4618      	mov	r0, r3
   2b672:	f7d5 f845 	bl	700 <strlen>
   2b676:	89a3      	ldrh	r3, [r4, #12]
   2b678:	9019      	str	r0, [sp, #100]	; 0x64
   2b67a:	0619      	lsls	r1, r3, #24
   2b67c:	d503      	bpl.n	2b686 <_svfprintf_r+0x2e>
   2b67e:	6923      	ldr	r3, [r4, #16]
   2b680:	2b00      	cmp	r3, #0
   2b682:	f001 8003 	beq.w	2c68c <_svfprintf_r+0x1034>
   2b686:	2300      	movs	r3, #0
   2b688:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
   2b68c:	9313      	str	r3, [sp, #76]	; 0x4c
   2b68e:	9315      	str	r3, [sp, #84]	; 0x54
   2b690:	9314      	str	r3, [sp, #80]	; 0x50
   2b692:	9327      	str	r3, [sp, #156]	; 0x9c
   2b694:	9326      	str	r3, [sp, #152]	; 0x98
   2b696:	9318      	str	r3, [sp, #96]	; 0x60
   2b698:	931b      	str	r3, [sp, #108]	; 0x6c
   2b69a:	9309      	str	r3, [sp, #36]	; 0x24
   2b69c:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
   2b6a0:	46c8      	mov	r8, r9
   2b6a2:	9316      	str	r3, [sp, #88]	; 0x58
   2b6a4:	9317      	str	r3, [sp, #92]	; 0x5c
   2b6a6:	f89a 3000 	ldrb.w	r3, [sl]
   2b6aa:	4654      	mov	r4, sl
   2b6ac:	b1e3      	cbz	r3, 2b6e8 <_svfprintf_r+0x90>
   2b6ae:	2b25      	cmp	r3, #37	; 0x25
   2b6b0:	d102      	bne.n	2b6b8 <_svfprintf_r+0x60>
   2b6b2:	e019      	b.n	2b6e8 <_svfprintf_r+0x90>
   2b6b4:	2b25      	cmp	r3, #37	; 0x25
   2b6b6:	d003      	beq.n	2b6c0 <_svfprintf_r+0x68>
   2b6b8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   2b6bc:	2b00      	cmp	r3, #0
   2b6be:	d1f9      	bne.n	2b6b4 <_svfprintf_r+0x5c>
   2b6c0:	eba4 050a 	sub.w	r5, r4, sl
   2b6c4:	b185      	cbz	r5, 2b6e8 <_svfprintf_r+0x90>
   2b6c6:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2b6c8:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   2b6ca:	f8c8 a000 	str.w	sl, [r8]
   2b6ce:	3301      	adds	r3, #1
   2b6d0:	442a      	add	r2, r5
   2b6d2:	2b07      	cmp	r3, #7
   2b6d4:	f8c8 5004 	str.w	r5, [r8, #4]
   2b6d8:	9227      	str	r2, [sp, #156]	; 0x9c
   2b6da:	9326      	str	r3, [sp, #152]	; 0x98
   2b6dc:	dc7f      	bgt.n	2b7de <_svfprintf_r+0x186>
   2b6de:	f108 0808 	add.w	r8, r8, #8
   2b6e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2b6e4:	442b      	add	r3, r5
   2b6e6:	9309      	str	r3, [sp, #36]	; 0x24
   2b6e8:	7823      	ldrb	r3, [r4, #0]
   2b6ea:	2b00      	cmp	r3, #0
   2b6ec:	d07f      	beq.n	2b7ee <_svfprintf_r+0x196>
   2b6ee:	2300      	movs	r3, #0
   2b6f0:	461a      	mov	r2, r3
   2b6f2:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   2b6f6:	4619      	mov	r1, r3
   2b6f8:	930d      	str	r3, [sp, #52]	; 0x34
   2b6fa:	469b      	mov	fp, r3
   2b6fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2b700:	7863      	ldrb	r3, [r4, #1]
   2b702:	900a      	str	r0, [sp, #40]	; 0x28
   2b704:	f104 0a01 	add.w	sl, r4, #1
   2b708:	f10a 0a01 	add.w	sl, sl, #1
   2b70c:	f1a3 0020 	sub.w	r0, r3, #32
   2b710:	2858      	cmp	r0, #88	; 0x58
   2b712:	f200 83c1 	bhi.w	2be98 <_svfprintf_r+0x840>
   2b716:	e8df f010 	tbh	[pc, r0, lsl #1]
   2b71a:	0238      	.short	0x0238
   2b71c:	03bf03bf 	.word	0x03bf03bf
   2b720:	03bf0240 	.word	0x03bf0240
   2b724:	03bf03bf 	.word	0x03bf03bf
   2b728:	03bf03bf 	.word	0x03bf03bf
   2b72c:	024503bf 	.word	0x024503bf
   2b730:	03bf0203 	.word	0x03bf0203
   2b734:	026b005d 	.word	0x026b005d
   2b738:	028603bf 	.word	0x028603bf
   2b73c:	039d039d 	.word	0x039d039d
   2b740:	039d039d 	.word	0x039d039d
   2b744:	039d039d 	.word	0x039d039d
   2b748:	039d039d 	.word	0x039d039d
   2b74c:	03bf039d 	.word	0x03bf039d
   2b750:	03bf03bf 	.word	0x03bf03bf
   2b754:	03bf03bf 	.word	0x03bf03bf
   2b758:	03bf03bf 	.word	0x03bf03bf
   2b75c:	03bf03bf 	.word	0x03bf03bf
   2b760:	033703bf 	.word	0x033703bf
   2b764:	03bf0357 	.word	0x03bf0357
   2b768:	03bf0357 	.word	0x03bf0357
   2b76c:	03bf03bf 	.word	0x03bf03bf
   2b770:	039803bf 	.word	0x039803bf
   2b774:	03bf03bf 	.word	0x03bf03bf
   2b778:	03bf03ad 	.word	0x03bf03ad
   2b77c:	03bf03bf 	.word	0x03bf03bf
   2b780:	03bf03bf 	.word	0x03bf03bf
   2b784:	03bf0259 	.word	0x03bf0259
   2b788:	031e03bf 	.word	0x031e03bf
   2b78c:	03bf03bf 	.word	0x03bf03bf
   2b790:	03bf03bf 	.word	0x03bf03bf
   2b794:	03bf03bf 	.word	0x03bf03bf
   2b798:	03bf03bf 	.word	0x03bf03bf
   2b79c:	03bf03bf 	.word	0x03bf03bf
   2b7a0:	02db02c6 	.word	0x02db02c6
   2b7a4:	03570357 	.word	0x03570357
   2b7a8:	028b0357 	.word	0x028b0357
   2b7ac:	03bf02db 	.word	0x03bf02db
   2b7b0:	029003bf 	.word	0x029003bf
   2b7b4:	029d03bf 	.word	0x029d03bf
   2b7b8:	02b401cc 	.word	0x02b401cc
   2b7bc:	03bf0208 	.word	0x03bf0208
   2b7c0:	03bf01e1 	.word	0x03bf01e1
   2b7c4:	03bf007e 	.word	0x03bf007e
   2b7c8:	020d03bf 	.word	0x020d03bf
   2b7cc:	980d      	ldr	r0, [sp, #52]	; 0x34
   2b7ce:	930f      	str	r3, [sp, #60]	; 0x3c
   2b7d0:	4240      	negs	r0, r0
   2b7d2:	900d      	str	r0, [sp, #52]	; 0x34
   2b7d4:	f04b 0b04 	orr.w	fp, fp, #4
   2b7d8:	f89a 3000 	ldrb.w	r3, [sl]
   2b7dc:	e794      	b.n	2b708 <_svfprintf_r+0xb0>
   2b7de:	aa25      	add	r2, sp, #148	; 0x94
   2b7e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2b7e2:	980c      	ldr	r0, [sp, #48]	; 0x30
   2b7e4:	f002 ff08 	bl	2e5f8 <__ssprint_r>
   2b7e8:	b940      	cbnz	r0, 2b7fc <_svfprintf_r+0x1a4>
   2b7ea:	46c8      	mov	r8, r9
   2b7ec:	e779      	b.n	2b6e2 <_svfprintf_r+0x8a>
   2b7ee:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   2b7f0:	b123      	cbz	r3, 2b7fc <_svfprintf_r+0x1a4>
   2b7f2:	980c      	ldr	r0, [sp, #48]	; 0x30
   2b7f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2b7f6:	aa25      	add	r2, sp, #148	; 0x94
   2b7f8:	f002 fefe 	bl	2e5f8 <__ssprint_r>
   2b7fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2b7fe:	899b      	ldrh	r3, [r3, #12]
   2b800:	f013 0f40 	tst.w	r3, #64	; 0x40
   2b804:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2b806:	bf18      	it	ne
   2b808:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
   2b80c:	9309      	str	r3, [sp, #36]	; 0x24
   2b80e:	9809      	ldr	r0, [sp, #36]	; 0x24
   2b810:	b043      	add	sp, #268	; 0x10c
   2b812:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b816:	f01b 0f20 	tst.w	fp, #32
   2b81a:	9311      	str	r3, [sp, #68]	; 0x44
   2b81c:	f040 81dd 	bne.w	2bbda <_svfprintf_r+0x582>
   2b820:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2b822:	f01b 0f10 	tst.w	fp, #16
   2b826:	4613      	mov	r3, r2
   2b828:	f040 856e 	bne.w	2c308 <_svfprintf_r+0xcb0>
   2b82c:	f01b 0f40 	tst.w	fp, #64	; 0x40
   2b830:	f000 856a 	beq.w	2c308 <_svfprintf_r+0xcb0>
   2b834:	8814      	ldrh	r4, [r2, #0]
   2b836:	3204      	adds	r2, #4
   2b838:	2500      	movs	r5, #0
   2b83a:	2301      	movs	r3, #1
   2b83c:	920f      	str	r2, [sp, #60]	; 0x3c
   2b83e:	2700      	movs	r7, #0
   2b840:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
   2b844:	990a      	ldr	r1, [sp, #40]	; 0x28
   2b846:	1c4a      	adds	r2, r1, #1
   2b848:	f000 8265 	beq.w	2bd16 <_svfprintf_r+0x6be>
   2b84c:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
   2b850:	9207      	str	r2, [sp, #28]
   2b852:	ea54 0205 	orrs.w	r2, r4, r5
   2b856:	f040 8264 	bne.w	2bd22 <_svfprintf_r+0x6ca>
   2b85a:	2900      	cmp	r1, #0
   2b85c:	f040 843c 	bne.w	2c0d8 <_svfprintf_r+0xa80>
   2b860:	2b00      	cmp	r3, #0
   2b862:	f040 84d7 	bne.w	2c214 <_svfprintf_r+0xbbc>
   2b866:	f01b 0301 	ands.w	r3, fp, #1
   2b86a:	930e      	str	r3, [sp, #56]	; 0x38
   2b86c:	f000 8604 	beq.w	2c478 <_svfprintf_r+0xe20>
   2b870:	ae42      	add	r6, sp, #264	; 0x108
   2b872:	2330      	movs	r3, #48	; 0x30
   2b874:	f806 3d41 	strb.w	r3, [r6, #-65]!
   2b878:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2b87a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   2b87c:	4293      	cmp	r3, r2
   2b87e:	bfb8      	it	lt
   2b880:	4613      	movlt	r3, r2
   2b882:	9308      	str	r3, [sp, #32]
   2b884:	2300      	movs	r3, #0
   2b886:	9312      	str	r3, [sp, #72]	; 0x48
   2b888:	b117      	cbz	r7, 2b890 <_svfprintf_r+0x238>
   2b88a:	9b08      	ldr	r3, [sp, #32]
   2b88c:	3301      	adds	r3, #1
   2b88e:	9308      	str	r3, [sp, #32]
   2b890:	9b07      	ldr	r3, [sp, #28]
   2b892:	f013 0302 	ands.w	r3, r3, #2
   2b896:	9310      	str	r3, [sp, #64]	; 0x40
   2b898:	d002      	beq.n	2b8a0 <_svfprintf_r+0x248>
   2b89a:	9b08      	ldr	r3, [sp, #32]
   2b89c:	3302      	adds	r3, #2
   2b89e:	9308      	str	r3, [sp, #32]
   2b8a0:	9b07      	ldr	r3, [sp, #28]
   2b8a2:	f013 0584 	ands.w	r5, r3, #132	; 0x84
   2b8a6:	f040 830e 	bne.w	2bec6 <_svfprintf_r+0x86e>
   2b8aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2b8ac:	9a08      	ldr	r2, [sp, #32]
   2b8ae:	eba3 0b02 	sub.w	fp, r3, r2
   2b8b2:	f1bb 0f00 	cmp.w	fp, #0
   2b8b6:	f340 8306 	ble.w	2bec6 <_svfprintf_r+0x86e>
   2b8ba:	f1bb 0f10 	cmp.w	fp, #16
   2b8be:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2b8c0:	9a26      	ldr	r2, [sp, #152]	; 0x98
   2b8c2:	dd29      	ble.n	2b918 <_svfprintf_r+0x2c0>
   2b8c4:	4643      	mov	r3, r8
   2b8c6:	4621      	mov	r1, r4
   2b8c8:	46a8      	mov	r8, r5
   2b8ca:	2710      	movs	r7, #16
   2b8cc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   2b8ce:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   2b8d0:	e006      	b.n	2b8e0 <_svfprintf_r+0x288>
   2b8d2:	f1ab 0b10 	sub.w	fp, fp, #16
   2b8d6:	f1bb 0f10 	cmp.w	fp, #16
   2b8da:	f103 0308 	add.w	r3, r3, #8
   2b8de:	dd18      	ble.n	2b912 <_svfprintf_r+0x2ba>
   2b8e0:	3201      	adds	r2, #1
   2b8e2:	48b7      	ldr	r0, [pc, #732]	; (2bbc0 <_svfprintf_r+0x568>)
   2b8e4:	9226      	str	r2, [sp, #152]	; 0x98
   2b8e6:	3110      	adds	r1, #16
   2b8e8:	2a07      	cmp	r2, #7
   2b8ea:	9127      	str	r1, [sp, #156]	; 0x9c
   2b8ec:	e883 0081 	stmia.w	r3, {r0, r7}
   2b8f0:	ddef      	ble.n	2b8d2 <_svfprintf_r+0x27a>
   2b8f2:	aa25      	add	r2, sp, #148	; 0x94
   2b8f4:	4629      	mov	r1, r5
   2b8f6:	4620      	mov	r0, r4
   2b8f8:	f002 fe7e 	bl	2e5f8 <__ssprint_r>
   2b8fc:	2800      	cmp	r0, #0
   2b8fe:	f47f af7d 	bne.w	2b7fc <_svfprintf_r+0x1a4>
   2b902:	f1ab 0b10 	sub.w	fp, fp, #16
   2b906:	f1bb 0f10 	cmp.w	fp, #16
   2b90a:	9927      	ldr	r1, [sp, #156]	; 0x9c
   2b90c:	9a26      	ldr	r2, [sp, #152]	; 0x98
   2b90e:	464b      	mov	r3, r9
   2b910:	dce6      	bgt.n	2b8e0 <_svfprintf_r+0x288>
   2b912:	4645      	mov	r5, r8
   2b914:	460c      	mov	r4, r1
   2b916:	4698      	mov	r8, r3
   2b918:	3201      	adds	r2, #1
   2b91a:	4ba9      	ldr	r3, [pc, #676]	; (2bbc0 <_svfprintf_r+0x568>)
   2b91c:	9226      	str	r2, [sp, #152]	; 0x98
   2b91e:	445c      	add	r4, fp
   2b920:	2a07      	cmp	r2, #7
   2b922:	9427      	str	r4, [sp, #156]	; 0x9c
   2b924:	e888 0808 	stmia.w	r8, {r3, fp}
   2b928:	f300 8498 	bgt.w	2c25c <_svfprintf_r+0xc04>
   2b92c:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   2b930:	f108 0808 	add.w	r8, r8, #8
   2b934:	b177      	cbz	r7, 2b954 <_svfprintf_r+0x2fc>
   2b936:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2b938:	3301      	adds	r3, #1
   2b93a:	3401      	adds	r4, #1
   2b93c:	f10d 0177 	add.w	r1, sp, #119	; 0x77
   2b940:	2201      	movs	r2, #1
   2b942:	2b07      	cmp	r3, #7
   2b944:	9427      	str	r4, [sp, #156]	; 0x9c
   2b946:	9326      	str	r3, [sp, #152]	; 0x98
   2b948:	e888 0006 	stmia.w	r8, {r1, r2}
   2b94c:	f300 83db 	bgt.w	2c106 <_svfprintf_r+0xaae>
   2b950:	f108 0808 	add.w	r8, r8, #8
   2b954:	9b10      	ldr	r3, [sp, #64]	; 0x40
   2b956:	b16b      	cbz	r3, 2b974 <_svfprintf_r+0x31c>
   2b958:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2b95a:	3301      	adds	r3, #1
   2b95c:	3402      	adds	r4, #2
   2b95e:	a91e      	add	r1, sp, #120	; 0x78
   2b960:	2202      	movs	r2, #2
   2b962:	2b07      	cmp	r3, #7
   2b964:	9427      	str	r4, [sp, #156]	; 0x9c
   2b966:	9326      	str	r3, [sp, #152]	; 0x98
   2b968:	e888 0006 	stmia.w	r8, {r1, r2}
   2b96c:	f300 83d6 	bgt.w	2c11c <_svfprintf_r+0xac4>
   2b970:	f108 0808 	add.w	r8, r8, #8
   2b974:	2d80      	cmp	r5, #128	; 0x80
   2b976:	f000 8315 	beq.w	2bfa4 <_svfprintf_r+0x94c>
   2b97a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2b97c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   2b97e:	1a9f      	subs	r7, r3, r2
   2b980:	2f00      	cmp	r7, #0
   2b982:	dd36      	ble.n	2b9f2 <_svfprintf_r+0x39a>
   2b984:	2f10      	cmp	r7, #16
   2b986:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2b988:	4d8e      	ldr	r5, [pc, #568]	; (2bbc4 <_svfprintf_r+0x56c>)
   2b98a:	dd27      	ble.n	2b9dc <_svfprintf_r+0x384>
   2b98c:	4642      	mov	r2, r8
   2b98e:	4621      	mov	r1, r4
   2b990:	46b0      	mov	r8, r6
   2b992:	f04f 0b10 	mov.w	fp, #16
   2b996:	462e      	mov	r6, r5
   2b998:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   2b99a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   2b99c:	e004      	b.n	2b9a8 <_svfprintf_r+0x350>
   2b99e:	3f10      	subs	r7, #16
   2b9a0:	2f10      	cmp	r7, #16
   2b9a2:	f102 0208 	add.w	r2, r2, #8
   2b9a6:	dd15      	ble.n	2b9d4 <_svfprintf_r+0x37c>
   2b9a8:	3301      	adds	r3, #1
   2b9aa:	3110      	adds	r1, #16
   2b9ac:	2b07      	cmp	r3, #7
   2b9ae:	9127      	str	r1, [sp, #156]	; 0x9c
   2b9b0:	9326      	str	r3, [sp, #152]	; 0x98
   2b9b2:	e882 0840 	stmia.w	r2, {r6, fp}
   2b9b6:	ddf2      	ble.n	2b99e <_svfprintf_r+0x346>
   2b9b8:	aa25      	add	r2, sp, #148	; 0x94
   2b9ba:	4629      	mov	r1, r5
   2b9bc:	4620      	mov	r0, r4
   2b9be:	f002 fe1b 	bl	2e5f8 <__ssprint_r>
   2b9c2:	2800      	cmp	r0, #0
   2b9c4:	f47f af1a 	bne.w	2b7fc <_svfprintf_r+0x1a4>
   2b9c8:	3f10      	subs	r7, #16
   2b9ca:	2f10      	cmp	r7, #16
   2b9cc:	9927      	ldr	r1, [sp, #156]	; 0x9c
   2b9ce:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2b9d0:	464a      	mov	r2, r9
   2b9d2:	dce9      	bgt.n	2b9a8 <_svfprintf_r+0x350>
   2b9d4:	4635      	mov	r5, r6
   2b9d6:	460c      	mov	r4, r1
   2b9d8:	4646      	mov	r6, r8
   2b9da:	4690      	mov	r8, r2
   2b9dc:	3301      	adds	r3, #1
   2b9de:	443c      	add	r4, r7
   2b9e0:	2b07      	cmp	r3, #7
   2b9e2:	9427      	str	r4, [sp, #156]	; 0x9c
   2b9e4:	9326      	str	r3, [sp, #152]	; 0x98
   2b9e6:	e888 00a0 	stmia.w	r8, {r5, r7}
   2b9ea:	f300 8381 	bgt.w	2c0f0 <_svfprintf_r+0xa98>
   2b9ee:	f108 0808 	add.w	r8, r8, #8
   2b9f2:	9b07      	ldr	r3, [sp, #28]
   2b9f4:	05df      	lsls	r7, r3, #23
   2b9f6:	f100 8268 	bmi.w	2beca <_svfprintf_r+0x872>
   2b9fa:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2b9fc:	990e      	ldr	r1, [sp, #56]	; 0x38
   2b9fe:	f8c8 6000 	str.w	r6, [r8]
   2ba02:	3301      	adds	r3, #1
   2ba04:	440c      	add	r4, r1
   2ba06:	2b07      	cmp	r3, #7
   2ba08:	9427      	str	r4, [sp, #156]	; 0x9c
   2ba0a:	f8c8 1004 	str.w	r1, [r8, #4]
   2ba0e:	9326      	str	r3, [sp, #152]	; 0x98
   2ba10:	f300 834d 	bgt.w	2c0ae <_svfprintf_r+0xa56>
   2ba14:	f108 0808 	add.w	r8, r8, #8
   2ba18:	9b07      	ldr	r3, [sp, #28]
   2ba1a:	075b      	lsls	r3, r3, #29
   2ba1c:	d53a      	bpl.n	2ba94 <_svfprintf_r+0x43c>
   2ba1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2ba20:	9a08      	ldr	r2, [sp, #32]
   2ba22:	1a9d      	subs	r5, r3, r2
   2ba24:	2d00      	cmp	r5, #0
   2ba26:	dd35      	ble.n	2ba94 <_svfprintf_r+0x43c>
   2ba28:	2d10      	cmp	r5, #16
   2ba2a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2ba2c:	dd20      	ble.n	2ba70 <_svfprintf_r+0x418>
   2ba2e:	2610      	movs	r6, #16
   2ba30:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   2ba32:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
   2ba36:	e004      	b.n	2ba42 <_svfprintf_r+0x3ea>
   2ba38:	3d10      	subs	r5, #16
   2ba3a:	2d10      	cmp	r5, #16
   2ba3c:	f108 0808 	add.w	r8, r8, #8
   2ba40:	dd16      	ble.n	2ba70 <_svfprintf_r+0x418>
   2ba42:	3301      	adds	r3, #1
   2ba44:	4a5e      	ldr	r2, [pc, #376]	; (2bbc0 <_svfprintf_r+0x568>)
   2ba46:	9326      	str	r3, [sp, #152]	; 0x98
   2ba48:	3410      	adds	r4, #16
   2ba4a:	2b07      	cmp	r3, #7
   2ba4c:	9427      	str	r4, [sp, #156]	; 0x9c
   2ba4e:	e888 0044 	stmia.w	r8, {r2, r6}
   2ba52:	ddf1      	ble.n	2ba38 <_svfprintf_r+0x3e0>
   2ba54:	aa25      	add	r2, sp, #148	; 0x94
   2ba56:	4659      	mov	r1, fp
   2ba58:	4638      	mov	r0, r7
   2ba5a:	f002 fdcd 	bl	2e5f8 <__ssprint_r>
   2ba5e:	2800      	cmp	r0, #0
   2ba60:	f47f aecc 	bne.w	2b7fc <_svfprintf_r+0x1a4>
   2ba64:	3d10      	subs	r5, #16
   2ba66:	2d10      	cmp	r5, #16
   2ba68:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2ba6a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2ba6c:	46c8      	mov	r8, r9
   2ba6e:	dce8      	bgt.n	2ba42 <_svfprintf_r+0x3ea>
   2ba70:	3301      	adds	r3, #1
   2ba72:	4a53      	ldr	r2, [pc, #332]	; (2bbc0 <_svfprintf_r+0x568>)
   2ba74:	9326      	str	r3, [sp, #152]	; 0x98
   2ba76:	442c      	add	r4, r5
   2ba78:	2b07      	cmp	r3, #7
   2ba7a:	9427      	str	r4, [sp, #156]	; 0x9c
   2ba7c:	e888 0024 	stmia.w	r8, {r2, r5}
   2ba80:	dd08      	ble.n	2ba94 <_svfprintf_r+0x43c>
   2ba82:	aa25      	add	r2, sp, #148	; 0x94
   2ba84:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2ba86:	980c      	ldr	r0, [sp, #48]	; 0x30
   2ba88:	f002 fdb6 	bl	2e5f8 <__ssprint_r>
   2ba8c:	2800      	cmp	r0, #0
   2ba8e:	f47f aeb5 	bne.w	2b7fc <_svfprintf_r+0x1a4>
   2ba92:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2ba94:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2ba96:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   2ba98:	9908      	ldr	r1, [sp, #32]
   2ba9a:	428a      	cmp	r2, r1
   2ba9c:	bfac      	ite	ge
   2ba9e:	189b      	addge	r3, r3, r2
   2baa0:	185b      	addlt	r3, r3, r1
   2baa2:	9309      	str	r3, [sp, #36]	; 0x24
   2baa4:	2c00      	cmp	r4, #0
   2baa6:	f040 830d 	bne.w	2c0c4 <_svfprintf_r+0xa6c>
   2baaa:	2300      	movs	r3, #0
   2baac:	9326      	str	r3, [sp, #152]	; 0x98
   2baae:	46c8      	mov	r8, r9
   2bab0:	e5f9      	b.n	2b6a6 <_svfprintf_r+0x4e>
   2bab2:	9311      	str	r3, [sp, #68]	; 0x44
   2bab4:	f01b 0320 	ands.w	r3, fp, #32
   2bab8:	f040 81e3 	bne.w	2be82 <_svfprintf_r+0x82a>
   2babc:	f01b 0210 	ands.w	r2, fp, #16
   2bac0:	f040 842e 	bne.w	2c320 <_svfprintf_r+0xcc8>
   2bac4:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
   2bac8:	f000 842a 	beq.w	2c320 <_svfprintf_r+0xcc8>
   2bacc:	990f      	ldr	r1, [sp, #60]	; 0x3c
   2bace:	4613      	mov	r3, r2
   2bad0:	460a      	mov	r2, r1
   2bad2:	3204      	adds	r2, #4
   2bad4:	880c      	ldrh	r4, [r1, #0]
   2bad6:	920f      	str	r2, [sp, #60]	; 0x3c
   2bad8:	2500      	movs	r5, #0
   2bada:	e6b0      	b.n	2b83e <_svfprintf_r+0x1e6>
   2badc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2bade:	9311      	str	r3, [sp, #68]	; 0x44
   2bae0:	6816      	ldr	r6, [r2, #0]
   2bae2:	2400      	movs	r4, #0
   2bae4:	f88d 4077 	strb.w	r4, [sp, #119]	; 0x77
   2bae8:	1d15      	adds	r5, r2, #4
   2baea:	2e00      	cmp	r6, #0
   2baec:	f000 86a7 	beq.w	2c83e <_svfprintf_r+0x11e6>
   2baf0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   2baf2:	1c53      	adds	r3, r2, #1
   2baf4:	f000 8609 	beq.w	2c70a <_svfprintf_r+0x10b2>
   2baf8:	4621      	mov	r1, r4
   2bafa:	4630      	mov	r0, r6
   2bafc:	f7d4 fb90 	bl	220 <memchr>
   2bb00:	2800      	cmp	r0, #0
   2bb02:	f000 86e1 	beq.w	2c8c8 <_svfprintf_r+0x1270>
   2bb06:	1b83      	subs	r3, r0, r6
   2bb08:	930e      	str	r3, [sp, #56]	; 0x38
   2bb0a:	940a      	str	r4, [sp, #40]	; 0x28
   2bb0c:	950f      	str	r5, [sp, #60]	; 0x3c
   2bb0e:	f8cd b01c 	str.w	fp, [sp, #28]
   2bb12:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   2bb16:	9308      	str	r3, [sp, #32]
   2bb18:	9412      	str	r4, [sp, #72]	; 0x48
   2bb1a:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   2bb1e:	e6b3      	b.n	2b888 <_svfprintf_r+0x230>
   2bb20:	f89a 3000 	ldrb.w	r3, [sl]
   2bb24:	2201      	movs	r2, #1
   2bb26:	212b      	movs	r1, #43	; 0x2b
   2bb28:	e5ee      	b.n	2b708 <_svfprintf_r+0xb0>
   2bb2a:	f04b 0b20 	orr.w	fp, fp, #32
   2bb2e:	f89a 3000 	ldrb.w	r3, [sl]
   2bb32:	e5e9      	b.n	2b708 <_svfprintf_r+0xb0>
   2bb34:	9311      	str	r3, [sp, #68]	; 0x44
   2bb36:	2a00      	cmp	r2, #0
   2bb38:	f040 8795 	bne.w	2ca66 <_svfprintf_r+0x140e>
   2bb3c:	4b22      	ldr	r3, [pc, #136]	; (2bbc8 <_svfprintf_r+0x570>)
   2bb3e:	9318      	str	r3, [sp, #96]	; 0x60
   2bb40:	f01b 0f20 	tst.w	fp, #32
   2bb44:	f040 8111 	bne.w	2bd6a <_svfprintf_r+0x712>
   2bb48:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2bb4a:	f01b 0f10 	tst.w	fp, #16
   2bb4e:	4613      	mov	r3, r2
   2bb50:	f040 83e1 	bne.w	2c316 <_svfprintf_r+0xcbe>
   2bb54:	f01b 0f40 	tst.w	fp, #64	; 0x40
   2bb58:	f000 83dd 	beq.w	2c316 <_svfprintf_r+0xcbe>
   2bb5c:	3304      	adds	r3, #4
   2bb5e:	8814      	ldrh	r4, [r2, #0]
   2bb60:	930f      	str	r3, [sp, #60]	; 0x3c
   2bb62:	2500      	movs	r5, #0
   2bb64:	f01b 0f01 	tst.w	fp, #1
   2bb68:	f000 810c 	beq.w	2bd84 <_svfprintf_r+0x72c>
   2bb6c:	ea54 0305 	orrs.w	r3, r4, r5
   2bb70:	f000 8108 	beq.w	2bd84 <_svfprintf_r+0x72c>
   2bb74:	2330      	movs	r3, #48	; 0x30
   2bb76:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   2bb7a:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
   2bb7e:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
   2bb82:	f04b 0b02 	orr.w	fp, fp, #2
   2bb86:	2302      	movs	r3, #2
   2bb88:	e659      	b.n	2b83e <_svfprintf_r+0x1e6>
   2bb8a:	f89a 3000 	ldrb.w	r3, [sl]
   2bb8e:	2900      	cmp	r1, #0
   2bb90:	f47f adba 	bne.w	2b708 <_svfprintf_r+0xb0>
   2bb94:	2201      	movs	r2, #1
   2bb96:	2120      	movs	r1, #32
   2bb98:	e5b6      	b.n	2b708 <_svfprintf_r+0xb0>
   2bb9a:	f04b 0b01 	orr.w	fp, fp, #1
   2bb9e:	f89a 3000 	ldrb.w	r3, [sl]
   2bba2:	e5b1      	b.n	2b708 <_svfprintf_r+0xb0>
   2bba4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   2bba6:	6823      	ldr	r3, [r4, #0]
   2bba8:	930d      	str	r3, [sp, #52]	; 0x34
   2bbaa:	4618      	mov	r0, r3
   2bbac:	2800      	cmp	r0, #0
   2bbae:	4623      	mov	r3, r4
   2bbb0:	f103 0304 	add.w	r3, r3, #4
   2bbb4:	f6ff ae0a 	blt.w	2b7cc <_svfprintf_r+0x174>
   2bbb8:	930f      	str	r3, [sp, #60]	; 0x3c
   2bbba:	f89a 3000 	ldrb.w	r3, [sl]
   2bbbe:	e5a3      	b.n	2b708 <_svfprintf_r+0xb0>
   2bbc0:	000312fc 	.word	0x000312fc
   2bbc4:	0003130c 	.word	0x0003130c
   2bbc8:	000312e0 	.word	0x000312e0
   2bbcc:	f04b 0b10 	orr.w	fp, fp, #16
   2bbd0:	f01b 0f20 	tst.w	fp, #32
   2bbd4:	9311      	str	r3, [sp, #68]	; 0x44
   2bbd6:	f43f ae23 	beq.w	2b820 <_svfprintf_r+0x1c8>
   2bbda:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   2bbdc:	3507      	adds	r5, #7
   2bbde:	f025 0307 	bic.w	r3, r5, #7
   2bbe2:	f103 0208 	add.w	r2, r3, #8
   2bbe6:	e9d3 4500 	ldrd	r4, r5, [r3]
   2bbea:	920f      	str	r2, [sp, #60]	; 0x3c
   2bbec:	2301      	movs	r3, #1
   2bbee:	e626      	b.n	2b83e <_svfprintf_r+0x1e6>
   2bbf0:	f89a 3000 	ldrb.w	r3, [sl]
   2bbf4:	2b2a      	cmp	r3, #42	; 0x2a
   2bbf6:	f10a 0401 	add.w	r4, sl, #1
   2bbfa:	f000 8727 	beq.w	2ca4c <_svfprintf_r+0x13f4>
   2bbfe:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   2bc02:	2809      	cmp	r0, #9
   2bc04:	46a2      	mov	sl, r4
   2bc06:	f200 86ad 	bhi.w	2c964 <_svfprintf_r+0x130c>
   2bc0a:	2300      	movs	r3, #0
   2bc0c:	461c      	mov	r4, r3
   2bc0e:	f81a 3b01 	ldrb.w	r3, [sl], #1
   2bc12:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   2bc16:	eb00 0444 	add.w	r4, r0, r4, lsl #1
   2bc1a:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   2bc1e:	2809      	cmp	r0, #9
   2bc20:	d9f5      	bls.n	2bc0e <_svfprintf_r+0x5b6>
   2bc22:	940a      	str	r4, [sp, #40]	; 0x28
   2bc24:	e572      	b.n	2b70c <_svfprintf_r+0xb4>
   2bc26:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
   2bc2a:	f89a 3000 	ldrb.w	r3, [sl]
   2bc2e:	e56b      	b.n	2b708 <_svfprintf_r+0xb0>
   2bc30:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
   2bc34:	f89a 3000 	ldrb.w	r3, [sl]
   2bc38:	e566      	b.n	2b708 <_svfprintf_r+0xb0>
   2bc3a:	f89a 3000 	ldrb.w	r3, [sl]
   2bc3e:	2b6c      	cmp	r3, #108	; 0x6c
   2bc40:	bf03      	ittte	eq
   2bc42:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
   2bc46:	f04b 0b20 	orreq.w	fp, fp, #32
   2bc4a:	f10a 0a01 	addeq.w	sl, sl, #1
   2bc4e:	f04b 0b10 	orrne.w	fp, fp, #16
   2bc52:	e559      	b.n	2b708 <_svfprintf_r+0xb0>
   2bc54:	2a00      	cmp	r2, #0
   2bc56:	f040 8711 	bne.w	2ca7c <_svfprintf_r+0x1424>
   2bc5a:	f01b 0f20 	tst.w	fp, #32
   2bc5e:	f040 84f9 	bne.w	2c654 <_svfprintf_r+0xffc>
   2bc62:	f01b 0f10 	tst.w	fp, #16
   2bc66:	f040 84ac 	bne.w	2c5c2 <_svfprintf_r+0xf6a>
   2bc6a:	f01b 0f40 	tst.w	fp, #64	; 0x40
   2bc6e:	f000 84a8 	beq.w	2c5c2 <_svfprintf_r+0xf6a>
   2bc72:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2bc74:	6813      	ldr	r3, [r2, #0]
   2bc76:	3204      	adds	r2, #4
   2bc78:	920f      	str	r2, [sp, #60]	; 0x3c
   2bc7a:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   2bc7e:	801a      	strh	r2, [r3, #0]
   2bc80:	e511      	b.n	2b6a6 <_svfprintf_r+0x4e>
   2bc82:	990f      	ldr	r1, [sp, #60]	; 0x3c
   2bc84:	4bb3      	ldr	r3, [pc, #716]	; (2bf54 <_svfprintf_r+0x8fc>)
   2bc86:	680c      	ldr	r4, [r1, #0]
   2bc88:	9318      	str	r3, [sp, #96]	; 0x60
   2bc8a:	2230      	movs	r2, #48	; 0x30
   2bc8c:	2378      	movs	r3, #120	; 0x78
   2bc8e:	3104      	adds	r1, #4
   2bc90:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
   2bc94:	9311      	str	r3, [sp, #68]	; 0x44
   2bc96:	f04b 0b02 	orr.w	fp, fp, #2
   2bc9a:	910f      	str	r1, [sp, #60]	; 0x3c
   2bc9c:	2500      	movs	r5, #0
   2bc9e:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
   2bca2:	2302      	movs	r3, #2
   2bca4:	e5cb      	b.n	2b83e <_svfprintf_r+0x1e6>
   2bca6:	990f      	ldr	r1, [sp, #60]	; 0x3c
   2bca8:	9311      	str	r3, [sp, #68]	; 0x44
   2bcaa:	680a      	ldr	r2, [r1, #0]
   2bcac:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
   2bcb0:	2300      	movs	r3, #0
   2bcb2:	460a      	mov	r2, r1
   2bcb4:	461f      	mov	r7, r3
   2bcb6:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   2bcba:	3204      	adds	r2, #4
   2bcbc:	2301      	movs	r3, #1
   2bcbe:	9308      	str	r3, [sp, #32]
   2bcc0:	f8cd b01c 	str.w	fp, [sp, #28]
   2bcc4:	970a      	str	r7, [sp, #40]	; 0x28
   2bcc6:	9712      	str	r7, [sp, #72]	; 0x48
   2bcc8:	920f      	str	r2, [sp, #60]	; 0x3c
   2bcca:	930e      	str	r3, [sp, #56]	; 0x38
   2bccc:	ae28      	add	r6, sp, #160	; 0xa0
   2bcce:	e5df      	b.n	2b890 <_svfprintf_r+0x238>
   2bcd0:	9311      	str	r3, [sp, #68]	; 0x44
   2bcd2:	2a00      	cmp	r2, #0
   2bcd4:	f040 86ea 	bne.w	2caac <_svfprintf_r+0x1454>
   2bcd8:	f01b 0f20 	tst.w	fp, #32
   2bcdc:	d15d      	bne.n	2bd9a <_svfprintf_r+0x742>
   2bcde:	f01b 0f10 	tst.w	fp, #16
   2bce2:	f040 8308 	bne.w	2c2f6 <_svfprintf_r+0xc9e>
   2bce6:	f01b 0f40 	tst.w	fp, #64	; 0x40
   2bcea:	f000 8304 	beq.w	2c2f6 <_svfprintf_r+0xc9e>
   2bcee:	990f      	ldr	r1, [sp, #60]	; 0x3c
   2bcf0:	f9b1 4000 	ldrsh.w	r4, [r1]
   2bcf4:	3104      	adds	r1, #4
   2bcf6:	17e5      	asrs	r5, r4, #31
   2bcf8:	4622      	mov	r2, r4
   2bcfa:	462b      	mov	r3, r5
   2bcfc:	910f      	str	r1, [sp, #60]	; 0x3c
   2bcfe:	2a00      	cmp	r2, #0
   2bd00:	f173 0300 	sbcs.w	r3, r3, #0
   2bd04:	db58      	blt.n	2bdb8 <_svfprintf_r+0x760>
   2bd06:	990a      	ldr	r1, [sp, #40]	; 0x28
   2bd08:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   2bd0c:	1c4a      	adds	r2, r1, #1
   2bd0e:	f04f 0301 	mov.w	r3, #1
   2bd12:	f47f ad9b 	bne.w	2b84c <_svfprintf_r+0x1f4>
   2bd16:	ea54 0205 	orrs.w	r2, r4, r5
   2bd1a:	f000 81df 	beq.w	2c0dc <_svfprintf_r+0xa84>
   2bd1e:	f8cd b01c 	str.w	fp, [sp, #28]
   2bd22:	2b01      	cmp	r3, #1
   2bd24:	f000 827b 	beq.w	2c21e <_svfprintf_r+0xbc6>
   2bd28:	2b02      	cmp	r3, #2
   2bd2a:	f040 8206 	bne.w	2c13a <_svfprintf_r+0xae2>
   2bd2e:	9818      	ldr	r0, [sp, #96]	; 0x60
   2bd30:	464e      	mov	r6, r9
   2bd32:	0923      	lsrs	r3, r4, #4
   2bd34:	f004 010f 	and.w	r1, r4, #15
   2bd38:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   2bd3c:	092a      	lsrs	r2, r5, #4
   2bd3e:	461c      	mov	r4, r3
   2bd40:	4615      	mov	r5, r2
   2bd42:	5c43      	ldrb	r3, [r0, r1]
   2bd44:	f806 3d01 	strb.w	r3, [r6, #-1]!
   2bd48:	ea54 0305 	orrs.w	r3, r4, r5
   2bd4c:	d1f1      	bne.n	2bd32 <_svfprintf_r+0x6da>
   2bd4e:	eba9 0306 	sub.w	r3, r9, r6
   2bd52:	930e      	str	r3, [sp, #56]	; 0x38
   2bd54:	e590      	b.n	2b878 <_svfprintf_r+0x220>
   2bd56:	9311      	str	r3, [sp, #68]	; 0x44
   2bd58:	2a00      	cmp	r2, #0
   2bd5a:	f040 86a3 	bne.w	2caa4 <_svfprintf_r+0x144c>
   2bd5e:	4b7e      	ldr	r3, [pc, #504]	; (2bf58 <_svfprintf_r+0x900>)
   2bd60:	9318      	str	r3, [sp, #96]	; 0x60
   2bd62:	f01b 0f20 	tst.w	fp, #32
   2bd66:	f43f aeef 	beq.w	2bb48 <_svfprintf_r+0x4f0>
   2bd6a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   2bd6c:	3507      	adds	r5, #7
   2bd6e:	f025 0307 	bic.w	r3, r5, #7
   2bd72:	f103 0208 	add.w	r2, r3, #8
   2bd76:	f01b 0f01 	tst.w	fp, #1
   2bd7a:	920f      	str	r2, [sp, #60]	; 0x3c
   2bd7c:	e9d3 4500 	ldrd	r4, r5, [r3]
   2bd80:	f47f aef4 	bne.w	2bb6c <_svfprintf_r+0x514>
   2bd84:	2302      	movs	r3, #2
   2bd86:	e55a      	b.n	2b83e <_svfprintf_r+0x1e6>
   2bd88:	9311      	str	r3, [sp, #68]	; 0x44
   2bd8a:	2a00      	cmp	r2, #0
   2bd8c:	f040 8686 	bne.w	2ca9c <_svfprintf_r+0x1444>
   2bd90:	f04b 0b10 	orr.w	fp, fp, #16
   2bd94:	f01b 0f20 	tst.w	fp, #32
   2bd98:	d0a1      	beq.n	2bcde <_svfprintf_r+0x686>
   2bd9a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   2bd9c:	3507      	adds	r5, #7
   2bd9e:	f025 0507 	bic.w	r5, r5, #7
   2bda2:	e9d5 2300 	ldrd	r2, r3, [r5]
   2bda6:	2a00      	cmp	r2, #0
   2bda8:	f105 0108 	add.w	r1, r5, #8
   2bdac:	461d      	mov	r5, r3
   2bdae:	f173 0300 	sbcs.w	r3, r3, #0
   2bdb2:	910f      	str	r1, [sp, #60]	; 0x3c
   2bdb4:	4614      	mov	r4, r2
   2bdb6:	daa6      	bge.n	2bd06 <_svfprintf_r+0x6ae>
   2bdb8:	272d      	movs	r7, #45	; 0x2d
   2bdba:	4264      	negs	r4, r4
   2bdbc:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   2bdc0:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
   2bdc4:	2301      	movs	r3, #1
   2bdc6:	e53d      	b.n	2b844 <_svfprintf_r+0x1ec>
   2bdc8:	9311      	str	r3, [sp, #68]	; 0x44
   2bdca:	2a00      	cmp	r2, #0
   2bdcc:	f040 8662 	bne.w	2ca94 <_svfprintf_r+0x143c>
   2bdd0:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   2bdd2:	3507      	adds	r5, #7
   2bdd4:	f025 0307 	bic.w	r3, r5, #7
   2bdd8:	f103 0208 	add.w	r2, r3, #8
   2bddc:	920f      	str	r2, [sp, #60]	; 0x3c
   2bdde:	681a      	ldr	r2, [r3, #0]
   2bde0:	9215      	str	r2, [sp, #84]	; 0x54
   2bde2:	685b      	ldr	r3, [r3, #4]
   2bde4:	9314      	str	r3, [sp, #80]	; 0x50
   2bde6:	9b14      	ldr	r3, [sp, #80]	; 0x50
   2bde8:	9d15      	ldr	r5, [sp, #84]	; 0x54
   2bdea:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   2bdee:	4628      	mov	r0, r5
   2bdf0:	4621      	mov	r1, r4
   2bdf2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2bdf6:	4b59      	ldr	r3, [pc, #356]	; (2bf5c <_svfprintf_r+0x904>)
   2bdf8:	f7d5 f942 	bl	1080 <__aeabi_dcmpun>
   2bdfc:	2800      	cmp	r0, #0
   2bdfe:	f040 834a 	bne.w	2c496 <_svfprintf_r+0xe3e>
   2be02:	4628      	mov	r0, r5
   2be04:	4621      	mov	r1, r4
   2be06:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2be0a:	4b54      	ldr	r3, [pc, #336]	; (2bf5c <_svfprintf_r+0x904>)
   2be0c:	f7d5 f91a 	bl	1044 <__aeabi_dcmple>
   2be10:	2800      	cmp	r0, #0
   2be12:	f040 8340 	bne.w	2c496 <_svfprintf_r+0xe3e>
   2be16:	a815      	add	r0, sp, #84	; 0x54
   2be18:	c80d      	ldmia	r0, {r0, r2, r3}
   2be1a:	9914      	ldr	r1, [sp, #80]	; 0x50
   2be1c:	f7d5 f908 	bl	1030 <__aeabi_dcmplt>
   2be20:	2800      	cmp	r0, #0
   2be22:	f040 8530 	bne.w	2c886 <_svfprintf_r+0x122e>
   2be26:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   2be2a:	4e4d      	ldr	r6, [pc, #308]	; (2bf60 <_svfprintf_r+0x908>)
   2be2c:	4b4d      	ldr	r3, [pc, #308]	; (2bf64 <_svfprintf_r+0x90c>)
   2be2e:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
   2be32:	9007      	str	r0, [sp, #28]
   2be34:	9811      	ldr	r0, [sp, #68]	; 0x44
   2be36:	2203      	movs	r2, #3
   2be38:	2100      	movs	r1, #0
   2be3a:	9208      	str	r2, [sp, #32]
   2be3c:	910a      	str	r1, [sp, #40]	; 0x28
   2be3e:	2847      	cmp	r0, #71	; 0x47
   2be40:	bfd8      	it	le
   2be42:	461e      	movle	r6, r3
   2be44:	920e      	str	r2, [sp, #56]	; 0x38
   2be46:	9112      	str	r1, [sp, #72]	; 0x48
   2be48:	e51e      	b.n	2b888 <_svfprintf_r+0x230>
   2be4a:	f04b 0b08 	orr.w	fp, fp, #8
   2be4e:	f89a 3000 	ldrb.w	r3, [sl]
   2be52:	e459      	b.n	2b708 <_svfprintf_r+0xb0>
   2be54:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   2be58:	2300      	movs	r3, #0
   2be5a:	461c      	mov	r4, r3
   2be5c:	f81a 3b01 	ldrb.w	r3, [sl], #1
   2be60:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   2be64:	eb00 0444 	add.w	r4, r0, r4, lsl #1
   2be68:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   2be6c:	2809      	cmp	r0, #9
   2be6e:	d9f5      	bls.n	2be5c <_svfprintf_r+0x804>
   2be70:	940d      	str	r4, [sp, #52]	; 0x34
   2be72:	e44b      	b.n	2b70c <_svfprintf_r+0xb4>
   2be74:	f04b 0b10 	orr.w	fp, fp, #16
   2be78:	9311      	str	r3, [sp, #68]	; 0x44
   2be7a:	f01b 0320 	ands.w	r3, fp, #32
   2be7e:	f43f ae1d 	beq.w	2babc <_svfprintf_r+0x464>
   2be82:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   2be84:	3507      	adds	r5, #7
   2be86:	f025 0307 	bic.w	r3, r5, #7
   2be8a:	f103 0208 	add.w	r2, r3, #8
   2be8e:	e9d3 4500 	ldrd	r4, r5, [r3]
   2be92:	920f      	str	r2, [sp, #60]	; 0x3c
   2be94:	2300      	movs	r3, #0
   2be96:	e4d2      	b.n	2b83e <_svfprintf_r+0x1e6>
   2be98:	9311      	str	r3, [sp, #68]	; 0x44
   2be9a:	2a00      	cmp	r2, #0
   2be9c:	f040 85e7 	bne.w	2ca6e <_svfprintf_r+0x1416>
   2bea0:	9a11      	ldr	r2, [sp, #68]	; 0x44
   2bea2:	2a00      	cmp	r2, #0
   2bea4:	f43f aca3 	beq.w	2b7ee <_svfprintf_r+0x196>
   2bea8:	2300      	movs	r3, #0
   2beaa:	2101      	movs	r1, #1
   2beac:	461f      	mov	r7, r3
   2beae:	9108      	str	r1, [sp, #32]
   2beb0:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
   2beb4:	f8cd b01c 	str.w	fp, [sp, #28]
   2beb8:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   2bebc:	930a      	str	r3, [sp, #40]	; 0x28
   2bebe:	9312      	str	r3, [sp, #72]	; 0x48
   2bec0:	910e      	str	r1, [sp, #56]	; 0x38
   2bec2:	ae28      	add	r6, sp, #160	; 0xa0
   2bec4:	e4e4      	b.n	2b890 <_svfprintf_r+0x238>
   2bec6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2bec8:	e534      	b.n	2b934 <_svfprintf_r+0x2dc>
   2beca:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2becc:	2b65      	cmp	r3, #101	; 0x65
   2bece:	f340 80a7 	ble.w	2c020 <_svfprintf_r+0x9c8>
   2bed2:	a815      	add	r0, sp, #84	; 0x54
   2bed4:	c80d      	ldmia	r0, {r0, r2, r3}
   2bed6:	9914      	ldr	r1, [sp, #80]	; 0x50
   2bed8:	f7d5 f8a0 	bl	101c <__aeabi_dcmpeq>
   2bedc:	2800      	cmp	r0, #0
   2bede:	f000 8150 	beq.w	2c182 <_svfprintf_r+0xb2a>
   2bee2:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2bee4:	4a20      	ldr	r2, [pc, #128]	; (2bf68 <_svfprintf_r+0x910>)
   2bee6:	f8c8 2000 	str.w	r2, [r8]
   2beea:	3301      	adds	r3, #1
   2beec:	3401      	adds	r4, #1
   2beee:	2201      	movs	r2, #1
   2bef0:	2b07      	cmp	r3, #7
   2bef2:	9427      	str	r4, [sp, #156]	; 0x9c
   2bef4:	9326      	str	r3, [sp, #152]	; 0x98
   2bef6:	f8c8 2004 	str.w	r2, [r8, #4]
   2befa:	f300 836a 	bgt.w	2c5d2 <_svfprintf_r+0xf7a>
   2befe:	f108 0808 	add.w	r8, r8, #8
   2bf02:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   2bf04:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   2bf06:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2bf08:	4293      	cmp	r3, r2
   2bf0a:	db03      	blt.n	2bf14 <_svfprintf_r+0x8bc>
   2bf0c:	9b07      	ldr	r3, [sp, #28]
   2bf0e:	07dd      	lsls	r5, r3, #31
   2bf10:	f57f ad82 	bpl.w	2ba18 <_svfprintf_r+0x3c0>
   2bf14:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2bf16:	9919      	ldr	r1, [sp, #100]	; 0x64
   2bf18:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   2bf1a:	f8c8 2000 	str.w	r2, [r8]
   2bf1e:	3301      	adds	r3, #1
   2bf20:	440c      	add	r4, r1
   2bf22:	2b07      	cmp	r3, #7
   2bf24:	f8c8 1004 	str.w	r1, [r8, #4]
   2bf28:	9427      	str	r4, [sp, #156]	; 0x9c
   2bf2a:	9326      	str	r3, [sp, #152]	; 0x98
   2bf2c:	f300 839e 	bgt.w	2c66c <_svfprintf_r+0x1014>
   2bf30:	f108 0808 	add.w	r8, r8, #8
   2bf34:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2bf36:	1e5e      	subs	r6, r3, #1
   2bf38:	2e00      	cmp	r6, #0
   2bf3a:	f77f ad6d 	ble.w	2ba18 <_svfprintf_r+0x3c0>
   2bf3e:	2e10      	cmp	r6, #16
   2bf40:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2bf42:	4d0a      	ldr	r5, [pc, #40]	; (2bf6c <_svfprintf_r+0x914>)
   2bf44:	f340 81f5 	ble.w	2c332 <_svfprintf_r+0xcda>
   2bf48:	4622      	mov	r2, r4
   2bf4a:	2710      	movs	r7, #16
   2bf4c:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   2bf50:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   2bf52:	e013      	b.n	2bf7c <_svfprintf_r+0x924>
   2bf54:	000312e0 	.word	0x000312e0
   2bf58:	000312cc 	.word	0x000312cc
   2bf5c:	7fefffff 	.word	0x7fefffff
   2bf60:	000312c0 	.word	0x000312c0
   2bf64:	000312bc 	.word	0x000312bc
   2bf68:	00030c5c 	.word	0x00030c5c
   2bf6c:	0003130c 	.word	0x0003130c
   2bf70:	f108 0808 	add.w	r8, r8, #8
   2bf74:	3e10      	subs	r6, #16
   2bf76:	2e10      	cmp	r6, #16
   2bf78:	f340 81da 	ble.w	2c330 <_svfprintf_r+0xcd8>
   2bf7c:	3301      	adds	r3, #1
   2bf7e:	3210      	adds	r2, #16
   2bf80:	2b07      	cmp	r3, #7
   2bf82:	9227      	str	r2, [sp, #156]	; 0x9c
   2bf84:	9326      	str	r3, [sp, #152]	; 0x98
   2bf86:	e888 00a0 	stmia.w	r8, {r5, r7}
   2bf8a:	ddf1      	ble.n	2bf70 <_svfprintf_r+0x918>
   2bf8c:	aa25      	add	r2, sp, #148	; 0x94
   2bf8e:	4621      	mov	r1, r4
   2bf90:	4658      	mov	r0, fp
   2bf92:	f002 fb31 	bl	2e5f8 <__ssprint_r>
   2bf96:	2800      	cmp	r0, #0
   2bf98:	f47f ac30 	bne.w	2b7fc <_svfprintf_r+0x1a4>
   2bf9c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   2bf9e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2bfa0:	46c8      	mov	r8, r9
   2bfa2:	e7e7      	b.n	2bf74 <_svfprintf_r+0x91c>
   2bfa4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2bfa6:	9a08      	ldr	r2, [sp, #32]
   2bfa8:	1a9f      	subs	r7, r3, r2
   2bfaa:	2f00      	cmp	r7, #0
   2bfac:	f77f ace5 	ble.w	2b97a <_svfprintf_r+0x322>
   2bfb0:	2f10      	cmp	r7, #16
   2bfb2:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2bfb4:	4db6      	ldr	r5, [pc, #728]	; (2c290 <_svfprintf_r+0xc38>)
   2bfb6:	dd27      	ble.n	2c008 <_svfprintf_r+0x9b0>
   2bfb8:	4642      	mov	r2, r8
   2bfba:	4621      	mov	r1, r4
   2bfbc:	46b0      	mov	r8, r6
   2bfbe:	f04f 0b10 	mov.w	fp, #16
   2bfc2:	462e      	mov	r6, r5
   2bfc4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   2bfc6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   2bfc8:	e004      	b.n	2bfd4 <_svfprintf_r+0x97c>
   2bfca:	3f10      	subs	r7, #16
   2bfcc:	2f10      	cmp	r7, #16
   2bfce:	f102 0208 	add.w	r2, r2, #8
   2bfd2:	dd15      	ble.n	2c000 <_svfprintf_r+0x9a8>
   2bfd4:	3301      	adds	r3, #1
   2bfd6:	3110      	adds	r1, #16
   2bfd8:	2b07      	cmp	r3, #7
   2bfda:	9127      	str	r1, [sp, #156]	; 0x9c
   2bfdc:	9326      	str	r3, [sp, #152]	; 0x98
   2bfde:	e882 0840 	stmia.w	r2, {r6, fp}
   2bfe2:	ddf2      	ble.n	2bfca <_svfprintf_r+0x972>
   2bfe4:	aa25      	add	r2, sp, #148	; 0x94
   2bfe6:	4629      	mov	r1, r5
   2bfe8:	4620      	mov	r0, r4
   2bfea:	f002 fb05 	bl	2e5f8 <__ssprint_r>
   2bfee:	2800      	cmp	r0, #0
   2bff0:	f47f ac04 	bne.w	2b7fc <_svfprintf_r+0x1a4>
   2bff4:	3f10      	subs	r7, #16
   2bff6:	2f10      	cmp	r7, #16
   2bff8:	9927      	ldr	r1, [sp, #156]	; 0x9c
   2bffa:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2bffc:	464a      	mov	r2, r9
   2bffe:	dce9      	bgt.n	2bfd4 <_svfprintf_r+0x97c>
   2c000:	4635      	mov	r5, r6
   2c002:	460c      	mov	r4, r1
   2c004:	4646      	mov	r6, r8
   2c006:	4690      	mov	r8, r2
   2c008:	3301      	adds	r3, #1
   2c00a:	443c      	add	r4, r7
   2c00c:	2b07      	cmp	r3, #7
   2c00e:	9427      	str	r4, [sp, #156]	; 0x9c
   2c010:	9326      	str	r3, [sp, #152]	; 0x98
   2c012:	e888 00a0 	stmia.w	r8, {r5, r7}
   2c016:	f300 8232 	bgt.w	2c47e <_svfprintf_r+0xe26>
   2c01a:	f108 0808 	add.w	r8, r8, #8
   2c01e:	e4ac      	b.n	2b97a <_svfprintf_r+0x322>
   2c020:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2c022:	9f26      	ldr	r7, [sp, #152]	; 0x98
   2c024:	2b01      	cmp	r3, #1
   2c026:	f340 81fe 	ble.w	2c426 <_svfprintf_r+0xdce>
   2c02a:	3701      	adds	r7, #1
   2c02c:	3401      	adds	r4, #1
   2c02e:	2301      	movs	r3, #1
   2c030:	2f07      	cmp	r7, #7
   2c032:	9427      	str	r4, [sp, #156]	; 0x9c
   2c034:	9726      	str	r7, [sp, #152]	; 0x98
   2c036:	f8c8 6000 	str.w	r6, [r8]
   2c03a:	f8c8 3004 	str.w	r3, [r8, #4]
   2c03e:	f300 8203 	bgt.w	2c448 <_svfprintf_r+0xdf0>
   2c042:	f108 0808 	add.w	r8, r8, #8
   2c046:	9a19      	ldr	r2, [sp, #100]	; 0x64
   2c048:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   2c04a:	f8c8 3000 	str.w	r3, [r8]
   2c04e:	3701      	adds	r7, #1
   2c050:	4414      	add	r4, r2
   2c052:	2f07      	cmp	r7, #7
   2c054:	9427      	str	r4, [sp, #156]	; 0x9c
   2c056:	9726      	str	r7, [sp, #152]	; 0x98
   2c058:	f8c8 2004 	str.w	r2, [r8, #4]
   2c05c:	f300 8200 	bgt.w	2c460 <_svfprintf_r+0xe08>
   2c060:	f108 0808 	add.w	r8, r8, #8
   2c064:	a815      	add	r0, sp, #84	; 0x54
   2c066:	c80d      	ldmia	r0, {r0, r2, r3}
   2c068:	9914      	ldr	r1, [sp, #80]	; 0x50
   2c06a:	f7d4 ffd7 	bl	101c <__aeabi_dcmpeq>
   2c06e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2c070:	2800      	cmp	r0, #0
   2c072:	f040 8101 	bne.w	2c278 <_svfprintf_r+0xc20>
   2c076:	3b01      	subs	r3, #1
   2c078:	3701      	adds	r7, #1
   2c07a:	3601      	adds	r6, #1
   2c07c:	441c      	add	r4, r3
   2c07e:	2f07      	cmp	r7, #7
   2c080:	9726      	str	r7, [sp, #152]	; 0x98
   2c082:	9427      	str	r4, [sp, #156]	; 0x9c
   2c084:	f8c8 6000 	str.w	r6, [r8]
   2c088:	f8c8 3004 	str.w	r3, [r8, #4]
   2c08c:	f300 8127 	bgt.w	2c2de <_svfprintf_r+0xc86>
   2c090:	f108 0808 	add.w	r8, r8, #8
   2c094:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   2c096:	f8c8 2004 	str.w	r2, [r8, #4]
   2c09a:	3701      	adds	r7, #1
   2c09c:	4414      	add	r4, r2
   2c09e:	ab21      	add	r3, sp, #132	; 0x84
   2c0a0:	2f07      	cmp	r7, #7
   2c0a2:	9427      	str	r4, [sp, #156]	; 0x9c
   2c0a4:	9726      	str	r7, [sp, #152]	; 0x98
   2c0a6:	f8c8 3000 	str.w	r3, [r8]
   2c0aa:	f77f acb3 	ble.w	2ba14 <_svfprintf_r+0x3bc>
   2c0ae:	aa25      	add	r2, sp, #148	; 0x94
   2c0b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2c0b2:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c0b4:	f002 faa0 	bl	2e5f8 <__ssprint_r>
   2c0b8:	2800      	cmp	r0, #0
   2c0ba:	f47f ab9f 	bne.w	2b7fc <_svfprintf_r+0x1a4>
   2c0be:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2c0c0:	46c8      	mov	r8, r9
   2c0c2:	e4a9      	b.n	2ba18 <_svfprintf_r+0x3c0>
   2c0c4:	aa25      	add	r2, sp, #148	; 0x94
   2c0c6:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2c0c8:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c0ca:	f002 fa95 	bl	2e5f8 <__ssprint_r>
   2c0ce:	2800      	cmp	r0, #0
   2c0d0:	f43f aceb 	beq.w	2baaa <_svfprintf_r+0x452>
   2c0d4:	f7ff bb92 	b.w	2b7fc <_svfprintf_r+0x1a4>
   2c0d8:	f8dd b01c 	ldr.w	fp, [sp, #28]
   2c0dc:	2b01      	cmp	r3, #1
   2c0de:	f000 8134 	beq.w	2c34a <_svfprintf_r+0xcf2>
   2c0e2:	2b02      	cmp	r3, #2
   2c0e4:	d125      	bne.n	2c132 <_svfprintf_r+0xada>
   2c0e6:	f8cd b01c 	str.w	fp, [sp, #28]
   2c0ea:	2400      	movs	r4, #0
   2c0ec:	2500      	movs	r5, #0
   2c0ee:	e61e      	b.n	2bd2e <_svfprintf_r+0x6d6>
   2c0f0:	aa25      	add	r2, sp, #148	; 0x94
   2c0f2:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2c0f4:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c0f6:	f002 fa7f 	bl	2e5f8 <__ssprint_r>
   2c0fa:	2800      	cmp	r0, #0
   2c0fc:	f47f ab7e 	bne.w	2b7fc <_svfprintf_r+0x1a4>
   2c100:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2c102:	46c8      	mov	r8, r9
   2c104:	e475      	b.n	2b9f2 <_svfprintf_r+0x39a>
   2c106:	aa25      	add	r2, sp, #148	; 0x94
   2c108:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2c10a:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c10c:	f002 fa74 	bl	2e5f8 <__ssprint_r>
   2c110:	2800      	cmp	r0, #0
   2c112:	f47f ab73 	bne.w	2b7fc <_svfprintf_r+0x1a4>
   2c116:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2c118:	46c8      	mov	r8, r9
   2c11a:	e41b      	b.n	2b954 <_svfprintf_r+0x2fc>
   2c11c:	aa25      	add	r2, sp, #148	; 0x94
   2c11e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2c120:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c122:	f002 fa69 	bl	2e5f8 <__ssprint_r>
   2c126:	2800      	cmp	r0, #0
   2c128:	f47f ab68 	bne.w	2b7fc <_svfprintf_r+0x1a4>
   2c12c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2c12e:	46c8      	mov	r8, r9
   2c130:	e420      	b.n	2b974 <_svfprintf_r+0x31c>
   2c132:	f8cd b01c 	str.w	fp, [sp, #28]
   2c136:	2400      	movs	r4, #0
   2c138:	2500      	movs	r5, #0
   2c13a:	4649      	mov	r1, r9
   2c13c:	e000      	b.n	2c140 <_svfprintf_r+0xae8>
   2c13e:	4631      	mov	r1, r6
   2c140:	08e2      	lsrs	r2, r4, #3
   2c142:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
   2c146:	08e8      	lsrs	r0, r5, #3
   2c148:	f004 0307 	and.w	r3, r4, #7
   2c14c:	4605      	mov	r5, r0
   2c14e:	4614      	mov	r4, r2
   2c150:	3330      	adds	r3, #48	; 0x30
   2c152:	ea54 0205 	orrs.w	r2, r4, r5
   2c156:	f801 3c01 	strb.w	r3, [r1, #-1]
   2c15a:	f101 36ff 	add.w	r6, r1, #4294967295	; 0xffffffff
   2c15e:	d1ee      	bne.n	2c13e <_svfprintf_r+0xae6>
   2c160:	9a07      	ldr	r2, [sp, #28]
   2c162:	07d2      	lsls	r2, r2, #31
   2c164:	f57f adf3 	bpl.w	2bd4e <_svfprintf_r+0x6f6>
   2c168:	2b30      	cmp	r3, #48	; 0x30
   2c16a:	f43f adf0 	beq.w	2bd4e <_svfprintf_r+0x6f6>
   2c16e:	3902      	subs	r1, #2
   2c170:	2330      	movs	r3, #48	; 0x30
   2c172:	f806 3c01 	strb.w	r3, [r6, #-1]
   2c176:	eba9 0301 	sub.w	r3, r9, r1
   2c17a:	930e      	str	r3, [sp, #56]	; 0x38
   2c17c:	460e      	mov	r6, r1
   2c17e:	f7ff bb7b 	b.w	2b878 <_svfprintf_r+0x220>
   2c182:	991f      	ldr	r1, [sp, #124]	; 0x7c
   2c184:	2900      	cmp	r1, #0
   2c186:	f340 822e 	ble.w	2c5e6 <_svfprintf_r+0xf8e>
   2c18a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2c18c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   2c18e:	4293      	cmp	r3, r2
   2c190:	bfa8      	it	ge
   2c192:	4613      	movge	r3, r2
   2c194:	2b00      	cmp	r3, #0
   2c196:	461f      	mov	r7, r3
   2c198:	dd0d      	ble.n	2c1b6 <_svfprintf_r+0xb5e>
   2c19a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2c19c:	f8c8 6000 	str.w	r6, [r8]
   2c1a0:	3301      	adds	r3, #1
   2c1a2:	443c      	add	r4, r7
   2c1a4:	2b07      	cmp	r3, #7
   2c1a6:	9427      	str	r4, [sp, #156]	; 0x9c
   2c1a8:	f8c8 7004 	str.w	r7, [r8, #4]
   2c1ac:	9326      	str	r3, [sp, #152]	; 0x98
   2c1ae:	f300 831f 	bgt.w	2c7f0 <_svfprintf_r+0x1198>
   2c1b2:	f108 0808 	add.w	r8, r8, #8
   2c1b6:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2c1b8:	2f00      	cmp	r7, #0
   2c1ba:	bfa8      	it	ge
   2c1bc:	1bdb      	subge	r3, r3, r7
   2c1be:	2b00      	cmp	r3, #0
   2c1c0:	461f      	mov	r7, r3
   2c1c2:	f340 80d6 	ble.w	2c372 <_svfprintf_r+0xd1a>
   2c1c6:	2f10      	cmp	r7, #16
   2c1c8:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2c1ca:	4d31      	ldr	r5, [pc, #196]	; (2c290 <_svfprintf_r+0xc38>)
   2c1cc:	f340 81ed 	ble.w	2c5aa <_svfprintf_r+0xf52>
   2c1d0:	4642      	mov	r2, r8
   2c1d2:	4621      	mov	r1, r4
   2c1d4:	46b0      	mov	r8, r6
   2c1d6:	f04f 0b10 	mov.w	fp, #16
   2c1da:	462e      	mov	r6, r5
   2c1dc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   2c1de:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   2c1e0:	e004      	b.n	2c1ec <_svfprintf_r+0xb94>
   2c1e2:	3208      	adds	r2, #8
   2c1e4:	3f10      	subs	r7, #16
   2c1e6:	2f10      	cmp	r7, #16
   2c1e8:	f340 81db 	ble.w	2c5a2 <_svfprintf_r+0xf4a>
   2c1ec:	3301      	adds	r3, #1
   2c1ee:	3110      	adds	r1, #16
   2c1f0:	2b07      	cmp	r3, #7
   2c1f2:	9127      	str	r1, [sp, #156]	; 0x9c
   2c1f4:	9326      	str	r3, [sp, #152]	; 0x98
   2c1f6:	e882 0840 	stmia.w	r2, {r6, fp}
   2c1fa:	ddf2      	ble.n	2c1e2 <_svfprintf_r+0xb8a>
   2c1fc:	aa25      	add	r2, sp, #148	; 0x94
   2c1fe:	4629      	mov	r1, r5
   2c200:	4620      	mov	r0, r4
   2c202:	f002 f9f9 	bl	2e5f8 <__ssprint_r>
   2c206:	2800      	cmp	r0, #0
   2c208:	f47f aaf8 	bne.w	2b7fc <_svfprintf_r+0x1a4>
   2c20c:	9927      	ldr	r1, [sp, #156]	; 0x9c
   2c20e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2c210:	464a      	mov	r2, r9
   2c212:	e7e7      	b.n	2c1e4 <_svfprintf_r+0xb8c>
   2c214:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2c216:	930e      	str	r3, [sp, #56]	; 0x38
   2c218:	464e      	mov	r6, r9
   2c21a:	f7ff bb2d 	b.w	2b878 <_svfprintf_r+0x220>
   2c21e:	2d00      	cmp	r5, #0
   2c220:	bf08      	it	eq
   2c222:	2c0a      	cmpeq	r4, #10
   2c224:	f0c0 808f 	bcc.w	2c346 <_svfprintf_r+0xcee>
   2c228:	464e      	mov	r6, r9
   2c22a:	4620      	mov	r0, r4
   2c22c:	4629      	mov	r1, r5
   2c22e:	220a      	movs	r2, #10
   2c230:	2300      	movs	r3, #0
   2c232:	f7d4 ff63 	bl	10fc <__aeabi_uldivmod>
   2c236:	3230      	adds	r2, #48	; 0x30
   2c238:	f806 2d01 	strb.w	r2, [r6, #-1]!
   2c23c:	4620      	mov	r0, r4
   2c23e:	4629      	mov	r1, r5
   2c240:	2300      	movs	r3, #0
   2c242:	220a      	movs	r2, #10
   2c244:	f7d4 ff5a 	bl	10fc <__aeabi_uldivmod>
   2c248:	4604      	mov	r4, r0
   2c24a:	460d      	mov	r5, r1
   2c24c:	ea54 0305 	orrs.w	r3, r4, r5
   2c250:	d1eb      	bne.n	2c22a <_svfprintf_r+0xbd2>
   2c252:	eba9 0306 	sub.w	r3, r9, r6
   2c256:	930e      	str	r3, [sp, #56]	; 0x38
   2c258:	f7ff bb0e 	b.w	2b878 <_svfprintf_r+0x220>
   2c25c:	aa25      	add	r2, sp, #148	; 0x94
   2c25e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2c260:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c262:	f002 f9c9 	bl	2e5f8 <__ssprint_r>
   2c266:	2800      	cmp	r0, #0
   2c268:	f47f aac8 	bne.w	2b7fc <_svfprintf_r+0x1a4>
   2c26c:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   2c270:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2c272:	46c8      	mov	r8, r9
   2c274:	f7ff bb5e 	b.w	2b934 <_svfprintf_r+0x2dc>
   2c278:	1e5e      	subs	r6, r3, #1
   2c27a:	2e00      	cmp	r6, #0
   2c27c:	f77f af0a 	ble.w	2c094 <_svfprintf_r+0xa3c>
   2c280:	2e10      	cmp	r6, #16
   2c282:	4d03      	ldr	r5, [pc, #12]	; (2c290 <_svfprintf_r+0xc38>)
   2c284:	dd22      	ble.n	2c2cc <_svfprintf_r+0xc74>
   2c286:	4622      	mov	r2, r4
   2c288:	f04f 0b10 	mov.w	fp, #16
   2c28c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   2c28e:	e006      	b.n	2c29e <_svfprintf_r+0xc46>
   2c290:	0003130c 	.word	0x0003130c
   2c294:	3e10      	subs	r6, #16
   2c296:	2e10      	cmp	r6, #16
   2c298:	f108 0808 	add.w	r8, r8, #8
   2c29c:	dd15      	ble.n	2c2ca <_svfprintf_r+0xc72>
   2c29e:	3701      	adds	r7, #1
   2c2a0:	3210      	adds	r2, #16
   2c2a2:	2f07      	cmp	r7, #7
   2c2a4:	9227      	str	r2, [sp, #156]	; 0x9c
   2c2a6:	9726      	str	r7, [sp, #152]	; 0x98
   2c2a8:	e888 0820 	stmia.w	r8, {r5, fp}
   2c2ac:	ddf2      	ble.n	2c294 <_svfprintf_r+0xc3c>
   2c2ae:	aa25      	add	r2, sp, #148	; 0x94
   2c2b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2c2b2:	4620      	mov	r0, r4
   2c2b4:	f002 f9a0 	bl	2e5f8 <__ssprint_r>
   2c2b8:	2800      	cmp	r0, #0
   2c2ba:	f47f aa9f 	bne.w	2b7fc <_svfprintf_r+0x1a4>
   2c2be:	3e10      	subs	r6, #16
   2c2c0:	2e10      	cmp	r6, #16
   2c2c2:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   2c2c4:	9f26      	ldr	r7, [sp, #152]	; 0x98
   2c2c6:	46c8      	mov	r8, r9
   2c2c8:	dce9      	bgt.n	2c29e <_svfprintf_r+0xc46>
   2c2ca:	4614      	mov	r4, r2
   2c2cc:	3701      	adds	r7, #1
   2c2ce:	4434      	add	r4, r6
   2c2d0:	2f07      	cmp	r7, #7
   2c2d2:	9427      	str	r4, [sp, #156]	; 0x9c
   2c2d4:	9726      	str	r7, [sp, #152]	; 0x98
   2c2d6:	e888 0060 	stmia.w	r8, {r5, r6}
   2c2da:	f77f aed9 	ble.w	2c090 <_svfprintf_r+0xa38>
   2c2de:	aa25      	add	r2, sp, #148	; 0x94
   2c2e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2c2e2:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c2e4:	f002 f988 	bl	2e5f8 <__ssprint_r>
   2c2e8:	2800      	cmp	r0, #0
   2c2ea:	f47f aa87 	bne.w	2b7fc <_svfprintf_r+0x1a4>
   2c2ee:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2c2f0:	9f26      	ldr	r7, [sp, #152]	; 0x98
   2c2f2:	46c8      	mov	r8, r9
   2c2f4:	e6ce      	b.n	2c094 <_svfprintf_r+0xa3c>
   2c2f6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2c2f8:	6814      	ldr	r4, [r2, #0]
   2c2fa:	4613      	mov	r3, r2
   2c2fc:	3304      	adds	r3, #4
   2c2fe:	17e5      	asrs	r5, r4, #31
   2c300:	930f      	str	r3, [sp, #60]	; 0x3c
   2c302:	4622      	mov	r2, r4
   2c304:	462b      	mov	r3, r5
   2c306:	e4fa      	b.n	2bcfe <_svfprintf_r+0x6a6>
   2c308:	3204      	adds	r2, #4
   2c30a:	681c      	ldr	r4, [r3, #0]
   2c30c:	920f      	str	r2, [sp, #60]	; 0x3c
   2c30e:	2301      	movs	r3, #1
   2c310:	2500      	movs	r5, #0
   2c312:	f7ff ba94 	b.w	2b83e <_svfprintf_r+0x1e6>
   2c316:	681c      	ldr	r4, [r3, #0]
   2c318:	3304      	adds	r3, #4
   2c31a:	930f      	str	r3, [sp, #60]	; 0x3c
   2c31c:	2500      	movs	r5, #0
   2c31e:	e421      	b.n	2bb64 <_svfprintf_r+0x50c>
   2c320:	990f      	ldr	r1, [sp, #60]	; 0x3c
   2c322:	460a      	mov	r2, r1
   2c324:	3204      	adds	r2, #4
   2c326:	680c      	ldr	r4, [r1, #0]
   2c328:	920f      	str	r2, [sp, #60]	; 0x3c
   2c32a:	2500      	movs	r5, #0
   2c32c:	f7ff ba87 	b.w	2b83e <_svfprintf_r+0x1e6>
   2c330:	4614      	mov	r4, r2
   2c332:	3301      	adds	r3, #1
   2c334:	4434      	add	r4, r6
   2c336:	2b07      	cmp	r3, #7
   2c338:	9427      	str	r4, [sp, #156]	; 0x9c
   2c33a:	9326      	str	r3, [sp, #152]	; 0x98
   2c33c:	e888 0060 	stmia.w	r8, {r5, r6}
   2c340:	f77f ab68 	ble.w	2ba14 <_svfprintf_r+0x3bc>
   2c344:	e6b3      	b.n	2c0ae <_svfprintf_r+0xa56>
   2c346:	f8dd b01c 	ldr.w	fp, [sp, #28]
   2c34a:	f8cd b01c 	str.w	fp, [sp, #28]
   2c34e:	ae42      	add	r6, sp, #264	; 0x108
   2c350:	3430      	adds	r4, #48	; 0x30
   2c352:	2301      	movs	r3, #1
   2c354:	f806 4d41 	strb.w	r4, [r6, #-65]!
   2c358:	930e      	str	r3, [sp, #56]	; 0x38
   2c35a:	f7ff ba8d 	b.w	2b878 <_svfprintf_r+0x220>
   2c35e:	aa25      	add	r2, sp, #148	; 0x94
   2c360:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2c362:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c364:	f002 f948 	bl	2e5f8 <__ssprint_r>
   2c368:	2800      	cmp	r0, #0
   2c36a:	f47f aa47 	bne.w	2b7fc <_svfprintf_r+0x1a4>
   2c36e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2c370:	46c8      	mov	r8, r9
   2c372:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   2c374:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2c376:	429a      	cmp	r2, r3
   2c378:	db44      	blt.n	2c404 <_svfprintf_r+0xdac>
   2c37a:	9b07      	ldr	r3, [sp, #28]
   2c37c:	07d9      	lsls	r1, r3, #31
   2c37e:	d441      	bmi.n	2c404 <_svfprintf_r+0xdac>
   2c380:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2c382:	9812      	ldr	r0, [sp, #72]	; 0x48
   2c384:	1a9a      	subs	r2, r3, r2
   2c386:	1a1d      	subs	r5, r3, r0
   2c388:	4295      	cmp	r5, r2
   2c38a:	bfa8      	it	ge
   2c38c:	4615      	movge	r5, r2
   2c38e:	2d00      	cmp	r5, #0
   2c390:	dd0e      	ble.n	2c3b0 <_svfprintf_r+0xd58>
   2c392:	9926      	ldr	r1, [sp, #152]	; 0x98
   2c394:	f8c8 5004 	str.w	r5, [r8, #4]
   2c398:	3101      	adds	r1, #1
   2c39a:	4406      	add	r6, r0
   2c39c:	442c      	add	r4, r5
   2c39e:	2907      	cmp	r1, #7
   2c3a0:	f8c8 6000 	str.w	r6, [r8]
   2c3a4:	9427      	str	r4, [sp, #156]	; 0x9c
   2c3a6:	9126      	str	r1, [sp, #152]	; 0x98
   2c3a8:	f300 823b 	bgt.w	2c822 <_svfprintf_r+0x11ca>
   2c3ac:	f108 0808 	add.w	r8, r8, #8
   2c3b0:	2d00      	cmp	r5, #0
   2c3b2:	bfac      	ite	ge
   2c3b4:	1b56      	subge	r6, r2, r5
   2c3b6:	4616      	movlt	r6, r2
   2c3b8:	2e00      	cmp	r6, #0
   2c3ba:	f77f ab2d 	ble.w	2ba18 <_svfprintf_r+0x3c0>
   2c3be:	2e10      	cmp	r6, #16
   2c3c0:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2c3c2:	4db0      	ldr	r5, [pc, #704]	; (2c684 <_svfprintf_r+0x102c>)
   2c3c4:	ddb5      	ble.n	2c332 <_svfprintf_r+0xcda>
   2c3c6:	4622      	mov	r2, r4
   2c3c8:	2710      	movs	r7, #16
   2c3ca:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   2c3ce:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   2c3d0:	e004      	b.n	2c3dc <_svfprintf_r+0xd84>
   2c3d2:	f108 0808 	add.w	r8, r8, #8
   2c3d6:	3e10      	subs	r6, #16
   2c3d8:	2e10      	cmp	r6, #16
   2c3da:	dda9      	ble.n	2c330 <_svfprintf_r+0xcd8>
   2c3dc:	3301      	adds	r3, #1
   2c3de:	3210      	adds	r2, #16
   2c3e0:	2b07      	cmp	r3, #7
   2c3e2:	9227      	str	r2, [sp, #156]	; 0x9c
   2c3e4:	9326      	str	r3, [sp, #152]	; 0x98
   2c3e6:	e888 00a0 	stmia.w	r8, {r5, r7}
   2c3ea:	ddf2      	ble.n	2c3d2 <_svfprintf_r+0xd7a>
   2c3ec:	aa25      	add	r2, sp, #148	; 0x94
   2c3ee:	4621      	mov	r1, r4
   2c3f0:	4658      	mov	r0, fp
   2c3f2:	f002 f901 	bl	2e5f8 <__ssprint_r>
   2c3f6:	2800      	cmp	r0, #0
   2c3f8:	f47f aa00 	bne.w	2b7fc <_svfprintf_r+0x1a4>
   2c3fc:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   2c3fe:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2c400:	46c8      	mov	r8, r9
   2c402:	e7e8      	b.n	2c3d6 <_svfprintf_r+0xd7e>
   2c404:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2c406:	9819      	ldr	r0, [sp, #100]	; 0x64
   2c408:	991a      	ldr	r1, [sp, #104]	; 0x68
   2c40a:	f8c8 1000 	str.w	r1, [r8]
   2c40e:	3301      	adds	r3, #1
   2c410:	4404      	add	r4, r0
   2c412:	2b07      	cmp	r3, #7
   2c414:	9427      	str	r4, [sp, #156]	; 0x9c
   2c416:	f8c8 0004 	str.w	r0, [r8, #4]
   2c41a:	9326      	str	r3, [sp, #152]	; 0x98
   2c41c:	f300 81f5 	bgt.w	2c80a <_svfprintf_r+0x11b2>
   2c420:	f108 0808 	add.w	r8, r8, #8
   2c424:	e7ac      	b.n	2c380 <_svfprintf_r+0xd28>
   2c426:	9b07      	ldr	r3, [sp, #28]
   2c428:	07da      	lsls	r2, r3, #31
   2c42a:	f53f adfe 	bmi.w	2c02a <_svfprintf_r+0x9d2>
   2c42e:	3701      	adds	r7, #1
   2c430:	3401      	adds	r4, #1
   2c432:	2301      	movs	r3, #1
   2c434:	2f07      	cmp	r7, #7
   2c436:	9427      	str	r4, [sp, #156]	; 0x9c
   2c438:	9726      	str	r7, [sp, #152]	; 0x98
   2c43a:	f8c8 6000 	str.w	r6, [r8]
   2c43e:	f8c8 3004 	str.w	r3, [r8, #4]
   2c442:	f77f ae25 	ble.w	2c090 <_svfprintf_r+0xa38>
   2c446:	e74a      	b.n	2c2de <_svfprintf_r+0xc86>
   2c448:	aa25      	add	r2, sp, #148	; 0x94
   2c44a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2c44c:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c44e:	f002 f8d3 	bl	2e5f8 <__ssprint_r>
   2c452:	2800      	cmp	r0, #0
   2c454:	f47f a9d2 	bne.w	2b7fc <_svfprintf_r+0x1a4>
   2c458:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2c45a:	9f26      	ldr	r7, [sp, #152]	; 0x98
   2c45c:	46c8      	mov	r8, r9
   2c45e:	e5f2      	b.n	2c046 <_svfprintf_r+0x9ee>
   2c460:	aa25      	add	r2, sp, #148	; 0x94
   2c462:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2c464:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c466:	f002 f8c7 	bl	2e5f8 <__ssprint_r>
   2c46a:	2800      	cmp	r0, #0
   2c46c:	f47f a9c6 	bne.w	2b7fc <_svfprintf_r+0x1a4>
   2c470:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2c472:	9f26      	ldr	r7, [sp, #152]	; 0x98
   2c474:	46c8      	mov	r8, r9
   2c476:	e5f5      	b.n	2c064 <_svfprintf_r+0xa0c>
   2c478:	464e      	mov	r6, r9
   2c47a:	f7ff b9fd 	b.w	2b878 <_svfprintf_r+0x220>
   2c47e:	aa25      	add	r2, sp, #148	; 0x94
   2c480:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2c482:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c484:	f002 f8b8 	bl	2e5f8 <__ssprint_r>
   2c488:	2800      	cmp	r0, #0
   2c48a:	f47f a9b7 	bne.w	2b7fc <_svfprintf_r+0x1a4>
   2c48e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2c490:	46c8      	mov	r8, r9
   2c492:	f7ff ba72 	b.w	2b97a <_svfprintf_r+0x322>
   2c496:	9c15      	ldr	r4, [sp, #84]	; 0x54
   2c498:	4622      	mov	r2, r4
   2c49a:	4620      	mov	r0, r4
   2c49c:	9c14      	ldr	r4, [sp, #80]	; 0x50
   2c49e:	4623      	mov	r3, r4
   2c4a0:	4621      	mov	r1, r4
   2c4a2:	f7d4 fded 	bl	1080 <__aeabi_dcmpun>
   2c4a6:	2800      	cmp	r0, #0
   2c4a8:	f040 8286 	bne.w	2c9b8 <_svfprintf_r+0x1360>
   2c4ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2c4ae:	3301      	adds	r3, #1
   2c4b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2c4b2:	f023 0320 	bic.w	r3, r3, #32
   2c4b6:	930e      	str	r3, [sp, #56]	; 0x38
   2c4b8:	f000 81e2 	beq.w	2c880 <_svfprintf_r+0x1228>
   2c4bc:	2b47      	cmp	r3, #71	; 0x47
   2c4be:	f000 811e 	beq.w	2c6fe <_svfprintf_r+0x10a6>
   2c4c2:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
   2c4c6:	9307      	str	r3, [sp, #28]
   2c4c8:	9b14      	ldr	r3, [sp, #80]	; 0x50
   2c4ca:	1e1f      	subs	r7, r3, #0
   2c4cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
   2c4ce:	9308      	str	r3, [sp, #32]
   2c4d0:	bfbb      	ittet	lt
   2c4d2:	463b      	movlt	r3, r7
   2c4d4:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
   2c4d8:	2300      	movge	r3, #0
   2c4da:	232d      	movlt	r3, #45	; 0x2d
   2c4dc:	9310      	str	r3, [sp, #64]	; 0x40
   2c4de:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2c4e0:	2b66      	cmp	r3, #102	; 0x66
   2c4e2:	f000 81bb 	beq.w	2c85c <_svfprintf_r+0x1204>
   2c4e6:	2b46      	cmp	r3, #70	; 0x46
   2c4e8:	f000 80df 	beq.w	2c6aa <_svfprintf_r+0x1052>
   2c4ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2c4ee:	9a08      	ldr	r2, [sp, #32]
   2c4f0:	2b45      	cmp	r3, #69	; 0x45
   2c4f2:	bf0c      	ite	eq
   2c4f4:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
   2c4f6:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
   2c4f8:	a823      	add	r0, sp, #140	; 0x8c
   2c4fa:	a920      	add	r1, sp, #128	; 0x80
   2c4fc:	bf08      	it	eq
   2c4fe:	1c5d      	addeq	r5, r3, #1
   2c500:	9004      	str	r0, [sp, #16]
   2c502:	9103      	str	r1, [sp, #12]
   2c504:	a81f      	add	r0, sp, #124	; 0x7c
   2c506:	2102      	movs	r1, #2
   2c508:	463b      	mov	r3, r7
   2c50a:	9002      	str	r0, [sp, #8]
   2c50c:	9501      	str	r5, [sp, #4]
   2c50e:	9100      	str	r1, [sp, #0]
   2c510:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c512:	f000 fb71 	bl	2cbf8 <_dtoa_r>
   2c516:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2c518:	2b67      	cmp	r3, #103	; 0x67
   2c51a:	4606      	mov	r6, r0
   2c51c:	f040 81e0 	bne.w	2c8e0 <_svfprintf_r+0x1288>
   2c520:	f01b 0f01 	tst.w	fp, #1
   2c524:	f000 8246 	beq.w	2c9b4 <_svfprintf_r+0x135c>
   2c528:	1974      	adds	r4, r6, r5
   2c52a:	9a16      	ldr	r2, [sp, #88]	; 0x58
   2c52c:	9808      	ldr	r0, [sp, #32]
   2c52e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   2c530:	4639      	mov	r1, r7
   2c532:	f7d4 fd73 	bl	101c <__aeabi_dcmpeq>
   2c536:	2800      	cmp	r0, #0
   2c538:	f040 8165 	bne.w	2c806 <_svfprintf_r+0x11ae>
   2c53c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   2c53e:	42a3      	cmp	r3, r4
   2c540:	d206      	bcs.n	2c550 <_svfprintf_r+0xef8>
   2c542:	2130      	movs	r1, #48	; 0x30
   2c544:	1c5a      	adds	r2, r3, #1
   2c546:	9223      	str	r2, [sp, #140]	; 0x8c
   2c548:	7019      	strb	r1, [r3, #0]
   2c54a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   2c54c:	429c      	cmp	r4, r3
   2c54e:	d8f9      	bhi.n	2c544 <_svfprintf_r+0xeec>
   2c550:	1b9b      	subs	r3, r3, r6
   2c552:	9313      	str	r3, [sp, #76]	; 0x4c
   2c554:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2c556:	2b47      	cmp	r3, #71	; 0x47
   2c558:	f000 80e9 	beq.w	2c72e <_svfprintf_r+0x10d6>
   2c55c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2c55e:	2b65      	cmp	r3, #101	; 0x65
   2c560:	f340 81cd 	ble.w	2c8fe <_svfprintf_r+0x12a6>
   2c564:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2c566:	2b66      	cmp	r3, #102	; 0x66
   2c568:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   2c56a:	9312      	str	r3, [sp, #72]	; 0x48
   2c56c:	f000 819e 	beq.w	2c8ac <_svfprintf_r+0x1254>
   2c570:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2c572:	9a12      	ldr	r2, [sp, #72]	; 0x48
   2c574:	4619      	mov	r1, r3
   2c576:	4291      	cmp	r1, r2
   2c578:	f300 818a 	bgt.w	2c890 <_svfprintf_r+0x1238>
   2c57c:	f01b 0f01 	tst.w	fp, #1
   2c580:	f040 8213 	bne.w	2c9aa <_svfprintf_r+0x1352>
   2c584:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   2c588:	9308      	str	r3, [sp, #32]
   2c58a:	2367      	movs	r3, #103	; 0x67
   2c58c:	920e      	str	r2, [sp, #56]	; 0x38
   2c58e:	9311      	str	r3, [sp, #68]	; 0x44
   2c590:	9b10      	ldr	r3, [sp, #64]	; 0x40
   2c592:	2b00      	cmp	r3, #0
   2c594:	f040 80c4 	bne.w	2c720 <_svfprintf_r+0x10c8>
   2c598:	930a      	str	r3, [sp, #40]	; 0x28
   2c59a:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   2c59e:	f7ff b973 	b.w	2b888 <_svfprintf_r+0x230>
   2c5a2:	4635      	mov	r5, r6
   2c5a4:	460c      	mov	r4, r1
   2c5a6:	4646      	mov	r6, r8
   2c5a8:	4690      	mov	r8, r2
   2c5aa:	3301      	adds	r3, #1
   2c5ac:	443c      	add	r4, r7
   2c5ae:	2b07      	cmp	r3, #7
   2c5b0:	9427      	str	r4, [sp, #156]	; 0x9c
   2c5b2:	9326      	str	r3, [sp, #152]	; 0x98
   2c5b4:	e888 00a0 	stmia.w	r8, {r5, r7}
   2c5b8:	f73f aed1 	bgt.w	2c35e <_svfprintf_r+0xd06>
   2c5bc:	f108 0808 	add.w	r8, r8, #8
   2c5c0:	e6d7      	b.n	2c372 <_svfprintf_r+0xd1a>
   2c5c2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2c5c4:	6813      	ldr	r3, [r2, #0]
   2c5c6:	3204      	adds	r2, #4
   2c5c8:	920f      	str	r2, [sp, #60]	; 0x3c
   2c5ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2c5cc:	601a      	str	r2, [r3, #0]
   2c5ce:	f7ff b86a 	b.w	2b6a6 <_svfprintf_r+0x4e>
   2c5d2:	aa25      	add	r2, sp, #148	; 0x94
   2c5d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2c5d6:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c5d8:	f002 f80e 	bl	2e5f8 <__ssprint_r>
   2c5dc:	2800      	cmp	r0, #0
   2c5de:	f47f a90d 	bne.w	2b7fc <_svfprintf_r+0x1a4>
   2c5e2:	46c8      	mov	r8, r9
   2c5e4:	e48d      	b.n	2bf02 <_svfprintf_r+0x8aa>
   2c5e6:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2c5e8:	4a27      	ldr	r2, [pc, #156]	; (2c688 <_svfprintf_r+0x1030>)
   2c5ea:	f8c8 2000 	str.w	r2, [r8]
   2c5ee:	3301      	adds	r3, #1
   2c5f0:	3401      	adds	r4, #1
   2c5f2:	2201      	movs	r2, #1
   2c5f4:	2b07      	cmp	r3, #7
   2c5f6:	9427      	str	r4, [sp, #156]	; 0x9c
   2c5f8:	9326      	str	r3, [sp, #152]	; 0x98
   2c5fa:	f8c8 2004 	str.w	r2, [r8, #4]
   2c5fe:	dc72      	bgt.n	2c6e6 <_svfprintf_r+0x108e>
   2c600:	f108 0808 	add.w	r8, r8, #8
   2c604:	b929      	cbnz	r1, 2c612 <_svfprintf_r+0xfba>
   2c606:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2c608:	b91b      	cbnz	r3, 2c612 <_svfprintf_r+0xfba>
   2c60a:	9b07      	ldr	r3, [sp, #28]
   2c60c:	07d8      	lsls	r0, r3, #31
   2c60e:	f57f aa03 	bpl.w	2ba18 <_svfprintf_r+0x3c0>
   2c612:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2c614:	9819      	ldr	r0, [sp, #100]	; 0x64
   2c616:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   2c618:	f8c8 2000 	str.w	r2, [r8]
   2c61c:	3301      	adds	r3, #1
   2c61e:	4602      	mov	r2, r0
   2c620:	4422      	add	r2, r4
   2c622:	2b07      	cmp	r3, #7
   2c624:	9227      	str	r2, [sp, #156]	; 0x9c
   2c626:	f8c8 0004 	str.w	r0, [r8, #4]
   2c62a:	9326      	str	r3, [sp, #152]	; 0x98
   2c62c:	f300 818d 	bgt.w	2c94a <_svfprintf_r+0x12f2>
   2c630:	f108 0808 	add.w	r8, r8, #8
   2c634:	2900      	cmp	r1, #0
   2c636:	f2c0 8165 	blt.w	2c904 <_svfprintf_r+0x12ac>
   2c63a:	9913      	ldr	r1, [sp, #76]	; 0x4c
   2c63c:	f8c8 6000 	str.w	r6, [r8]
   2c640:	3301      	adds	r3, #1
   2c642:	188c      	adds	r4, r1, r2
   2c644:	2b07      	cmp	r3, #7
   2c646:	9427      	str	r4, [sp, #156]	; 0x9c
   2c648:	9326      	str	r3, [sp, #152]	; 0x98
   2c64a:	f8c8 1004 	str.w	r1, [r8, #4]
   2c64e:	f77f a9e1 	ble.w	2ba14 <_svfprintf_r+0x3bc>
   2c652:	e52c      	b.n	2c0ae <_svfprintf_r+0xa56>
   2c654:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2c656:	9909      	ldr	r1, [sp, #36]	; 0x24
   2c658:	6813      	ldr	r3, [r2, #0]
   2c65a:	17cd      	asrs	r5, r1, #31
   2c65c:	4608      	mov	r0, r1
   2c65e:	3204      	adds	r2, #4
   2c660:	4629      	mov	r1, r5
   2c662:	920f      	str	r2, [sp, #60]	; 0x3c
   2c664:	e9c3 0100 	strd	r0, r1, [r3]
   2c668:	f7ff b81d 	b.w	2b6a6 <_svfprintf_r+0x4e>
   2c66c:	aa25      	add	r2, sp, #148	; 0x94
   2c66e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2c670:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c672:	f001 ffc1 	bl	2e5f8 <__ssprint_r>
   2c676:	2800      	cmp	r0, #0
   2c678:	f47f a8c0 	bne.w	2b7fc <_svfprintf_r+0x1a4>
   2c67c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2c67e:	46c8      	mov	r8, r9
   2c680:	e458      	b.n	2bf34 <_svfprintf_r+0x8dc>
   2c682:	bf00      	nop
   2c684:	0003130c 	.word	0x0003130c
   2c688:	00030c5c 	.word	0x00030c5c
   2c68c:	2140      	movs	r1, #64	; 0x40
   2c68e:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c690:	f001 f9ea 	bl	2da68 <_malloc_r>
   2c694:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   2c696:	6010      	str	r0, [r2, #0]
   2c698:	6110      	str	r0, [r2, #16]
   2c69a:	2800      	cmp	r0, #0
   2c69c:	f000 81f2 	beq.w	2ca84 <_svfprintf_r+0x142c>
   2c6a0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   2c6a2:	2340      	movs	r3, #64	; 0x40
   2c6a4:	6153      	str	r3, [r2, #20]
   2c6a6:	f7fe bfee 	b.w	2b686 <_svfprintf_r+0x2e>
   2c6aa:	a823      	add	r0, sp, #140	; 0x8c
   2c6ac:	a920      	add	r1, sp, #128	; 0x80
   2c6ae:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   2c6b0:	9004      	str	r0, [sp, #16]
   2c6b2:	9103      	str	r1, [sp, #12]
   2c6b4:	a81f      	add	r0, sp, #124	; 0x7c
   2c6b6:	2103      	movs	r1, #3
   2c6b8:	9002      	str	r0, [sp, #8]
   2c6ba:	9a08      	ldr	r2, [sp, #32]
   2c6bc:	9401      	str	r4, [sp, #4]
   2c6be:	463b      	mov	r3, r7
   2c6c0:	9100      	str	r1, [sp, #0]
   2c6c2:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c6c4:	f000 fa98 	bl	2cbf8 <_dtoa_r>
   2c6c8:	4625      	mov	r5, r4
   2c6ca:	4606      	mov	r6, r0
   2c6cc:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2c6ce:	2b46      	cmp	r3, #70	; 0x46
   2c6d0:	eb06 0405 	add.w	r4, r6, r5
   2c6d4:	f47f af29 	bne.w	2c52a <_svfprintf_r+0xed2>
   2c6d8:	7833      	ldrb	r3, [r6, #0]
   2c6da:	2b30      	cmp	r3, #48	; 0x30
   2c6dc:	f000 8178 	beq.w	2c9d0 <_svfprintf_r+0x1378>
   2c6e0:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
   2c6e2:	442c      	add	r4, r5
   2c6e4:	e721      	b.n	2c52a <_svfprintf_r+0xed2>
   2c6e6:	aa25      	add	r2, sp, #148	; 0x94
   2c6e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2c6ea:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c6ec:	f001 ff84 	bl	2e5f8 <__ssprint_r>
   2c6f0:	2800      	cmp	r0, #0
   2c6f2:	f47f a883 	bne.w	2b7fc <_svfprintf_r+0x1a4>
   2c6f6:	991f      	ldr	r1, [sp, #124]	; 0x7c
   2c6f8:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2c6fa:	46c8      	mov	r8, r9
   2c6fc:	e782      	b.n	2c604 <_svfprintf_r+0xfac>
   2c6fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2c700:	2b00      	cmp	r3, #0
   2c702:	bf08      	it	eq
   2c704:	2301      	moveq	r3, #1
   2c706:	930a      	str	r3, [sp, #40]	; 0x28
   2c708:	e6db      	b.n	2c4c2 <_svfprintf_r+0xe6a>
   2c70a:	4630      	mov	r0, r6
   2c70c:	940a      	str	r4, [sp, #40]	; 0x28
   2c70e:	f7d3 fff7 	bl	700 <strlen>
   2c712:	950f      	str	r5, [sp, #60]	; 0x3c
   2c714:	900e      	str	r0, [sp, #56]	; 0x38
   2c716:	f8cd b01c 	str.w	fp, [sp, #28]
   2c71a:	4603      	mov	r3, r0
   2c71c:	f7ff b9f9 	b.w	2bb12 <_svfprintf_r+0x4ba>
   2c720:	272d      	movs	r7, #45	; 0x2d
   2c722:	2300      	movs	r3, #0
   2c724:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
   2c728:	930a      	str	r3, [sp, #40]	; 0x28
   2c72a:	f7ff b8ae 	b.w	2b88a <_svfprintf_r+0x232>
   2c72e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   2c730:	9312      	str	r3, [sp, #72]	; 0x48
   2c732:	461a      	mov	r2, r3
   2c734:	3303      	adds	r3, #3
   2c736:	db04      	blt.n	2c742 <_svfprintf_r+0x10ea>
   2c738:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2c73a:	4619      	mov	r1, r3
   2c73c:	4291      	cmp	r1, r2
   2c73e:	f6bf af17 	bge.w	2c570 <_svfprintf_r+0xf18>
   2c742:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2c744:	3b02      	subs	r3, #2
   2c746:	9311      	str	r3, [sp, #68]	; 0x44
   2c748:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
   2c74c:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
   2c750:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2c752:	3b01      	subs	r3, #1
   2c754:	2b00      	cmp	r3, #0
   2c756:	931f      	str	r3, [sp, #124]	; 0x7c
   2c758:	bfbd      	ittte	lt
   2c75a:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
   2c75c:	f1c3 0301 	rsblt	r3, r3, #1
   2c760:	222d      	movlt	r2, #45	; 0x2d
   2c762:	222b      	movge	r2, #43	; 0x2b
   2c764:	2b09      	cmp	r3, #9
   2c766:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
   2c76a:	f340 8116 	ble.w	2c99a <_svfprintf_r+0x1342>
   2c76e:	f10d 0493 	add.w	r4, sp, #147	; 0x93
   2c772:	4620      	mov	r0, r4
   2c774:	4dab      	ldr	r5, [pc, #684]	; (2ca24 <_svfprintf_r+0x13cc>)
   2c776:	e000      	b.n	2c77a <_svfprintf_r+0x1122>
   2c778:	4610      	mov	r0, r2
   2c77a:	fb85 1203 	smull	r1, r2, r5, r3
   2c77e:	17d9      	asrs	r1, r3, #31
   2c780:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
   2c784:	eb01 0281 	add.w	r2, r1, r1, lsl #2
   2c788:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
   2c78c:	3230      	adds	r2, #48	; 0x30
   2c78e:	2909      	cmp	r1, #9
   2c790:	f800 2c01 	strb.w	r2, [r0, #-1]
   2c794:	460b      	mov	r3, r1
   2c796:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
   2c79a:	dced      	bgt.n	2c778 <_svfprintf_r+0x1120>
   2c79c:	3330      	adds	r3, #48	; 0x30
   2c79e:	3802      	subs	r0, #2
   2c7a0:	b2d9      	uxtb	r1, r3
   2c7a2:	4284      	cmp	r4, r0
   2c7a4:	f802 1c01 	strb.w	r1, [r2, #-1]
   2c7a8:	f240 8165 	bls.w	2ca76 <_svfprintf_r+0x141e>
   2c7ac:	f10d 0086 	add.w	r0, sp, #134	; 0x86
   2c7b0:	4613      	mov	r3, r2
   2c7b2:	e001      	b.n	2c7b8 <_svfprintf_r+0x1160>
   2c7b4:	f813 1b01 	ldrb.w	r1, [r3], #1
   2c7b8:	f800 1b01 	strb.w	r1, [r0], #1
   2c7bc:	42a3      	cmp	r3, r4
   2c7be:	d1f9      	bne.n	2c7b4 <_svfprintf_r+0x115c>
   2c7c0:	3301      	adds	r3, #1
   2c7c2:	1a9b      	subs	r3, r3, r2
   2c7c4:	f10d 0286 	add.w	r2, sp, #134	; 0x86
   2c7c8:	4413      	add	r3, r2
   2c7ca:	aa21      	add	r2, sp, #132	; 0x84
   2c7cc:	1a9b      	subs	r3, r3, r2
   2c7ce:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   2c7d0:	931b      	str	r3, [sp, #108]	; 0x6c
   2c7d2:	2a01      	cmp	r2, #1
   2c7d4:	4413      	add	r3, r2
   2c7d6:	930e      	str	r3, [sp, #56]	; 0x38
   2c7d8:	f340 8119 	ble.w	2ca0e <_svfprintf_r+0x13b6>
   2c7dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2c7de:	9a19      	ldr	r2, [sp, #100]	; 0x64
   2c7e0:	4413      	add	r3, r2
   2c7e2:	930e      	str	r3, [sp, #56]	; 0x38
   2c7e4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   2c7e8:	9308      	str	r3, [sp, #32]
   2c7ea:	2300      	movs	r3, #0
   2c7ec:	9312      	str	r3, [sp, #72]	; 0x48
   2c7ee:	e6cf      	b.n	2c590 <_svfprintf_r+0xf38>
   2c7f0:	aa25      	add	r2, sp, #148	; 0x94
   2c7f2:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2c7f4:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c7f6:	f001 feff 	bl	2e5f8 <__ssprint_r>
   2c7fa:	2800      	cmp	r0, #0
   2c7fc:	f47e affe 	bne.w	2b7fc <_svfprintf_r+0x1a4>
   2c800:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2c802:	46c8      	mov	r8, r9
   2c804:	e4d7      	b.n	2c1b6 <_svfprintf_r+0xb5e>
   2c806:	4623      	mov	r3, r4
   2c808:	e6a2      	b.n	2c550 <_svfprintf_r+0xef8>
   2c80a:	aa25      	add	r2, sp, #148	; 0x94
   2c80c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2c80e:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c810:	f001 fef2 	bl	2e5f8 <__ssprint_r>
   2c814:	2800      	cmp	r0, #0
   2c816:	f47e aff1 	bne.w	2b7fc <_svfprintf_r+0x1a4>
   2c81a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   2c81c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2c81e:	46c8      	mov	r8, r9
   2c820:	e5ae      	b.n	2c380 <_svfprintf_r+0xd28>
   2c822:	aa25      	add	r2, sp, #148	; 0x94
   2c824:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2c826:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c828:	f001 fee6 	bl	2e5f8 <__ssprint_r>
   2c82c:	2800      	cmp	r0, #0
   2c82e:	f47e afe5 	bne.w	2b7fc <_svfprintf_r+0x1a4>
   2c832:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   2c834:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2c836:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2c838:	1a9a      	subs	r2, r3, r2
   2c83a:	46c8      	mov	r8, r9
   2c83c:	e5b8      	b.n	2c3b0 <_svfprintf_r+0xd58>
   2c83e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2c840:	9612      	str	r6, [sp, #72]	; 0x48
   2c842:	2b06      	cmp	r3, #6
   2c844:	bf28      	it	cs
   2c846:	2306      	movcs	r3, #6
   2c848:	960a      	str	r6, [sp, #40]	; 0x28
   2c84a:	4637      	mov	r7, r6
   2c84c:	9308      	str	r3, [sp, #32]
   2c84e:	950f      	str	r5, [sp, #60]	; 0x3c
   2c850:	f8cd b01c 	str.w	fp, [sp, #28]
   2c854:	930e      	str	r3, [sp, #56]	; 0x38
   2c856:	4e74      	ldr	r6, [pc, #464]	; (2ca28 <_svfprintf_r+0x13d0>)
   2c858:	f7ff b816 	b.w	2b888 <_svfprintf_r+0x230>
   2c85c:	a823      	add	r0, sp, #140	; 0x8c
   2c85e:	a920      	add	r1, sp, #128	; 0x80
   2c860:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   2c862:	9004      	str	r0, [sp, #16]
   2c864:	9103      	str	r1, [sp, #12]
   2c866:	a81f      	add	r0, sp, #124	; 0x7c
   2c868:	2103      	movs	r1, #3
   2c86a:	9002      	str	r0, [sp, #8]
   2c86c:	9a08      	ldr	r2, [sp, #32]
   2c86e:	9501      	str	r5, [sp, #4]
   2c870:	463b      	mov	r3, r7
   2c872:	9100      	str	r1, [sp, #0]
   2c874:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c876:	f000 f9bf 	bl	2cbf8 <_dtoa_r>
   2c87a:	4606      	mov	r6, r0
   2c87c:	1944      	adds	r4, r0, r5
   2c87e:	e72b      	b.n	2c6d8 <_svfprintf_r+0x1080>
   2c880:	2306      	movs	r3, #6
   2c882:	930a      	str	r3, [sp, #40]	; 0x28
   2c884:	e61d      	b.n	2c4c2 <_svfprintf_r+0xe6a>
   2c886:	272d      	movs	r7, #45	; 0x2d
   2c888:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
   2c88c:	f7ff bacd 	b.w	2be2a <_svfprintf_r+0x7d2>
   2c890:	9a19      	ldr	r2, [sp, #100]	; 0x64
   2c892:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2c894:	4413      	add	r3, r2
   2c896:	9a12      	ldr	r2, [sp, #72]	; 0x48
   2c898:	930e      	str	r3, [sp, #56]	; 0x38
   2c89a:	2a00      	cmp	r2, #0
   2c89c:	f340 80b0 	ble.w	2ca00 <_svfprintf_r+0x13a8>
   2c8a0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   2c8a4:	9308      	str	r3, [sp, #32]
   2c8a6:	2367      	movs	r3, #103	; 0x67
   2c8a8:	9311      	str	r3, [sp, #68]	; 0x44
   2c8aa:	e671      	b.n	2c590 <_svfprintf_r+0xf38>
   2c8ac:	2b00      	cmp	r3, #0
   2c8ae:	f340 80c3 	ble.w	2ca38 <_svfprintf_r+0x13e0>
   2c8b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   2c8b4:	2a00      	cmp	r2, #0
   2c8b6:	f040 8099 	bne.w	2c9ec <_svfprintf_r+0x1394>
   2c8ba:	f01b 0f01 	tst.w	fp, #1
   2c8be:	f040 8095 	bne.w	2c9ec <_svfprintf_r+0x1394>
   2c8c2:	9308      	str	r3, [sp, #32]
   2c8c4:	930e      	str	r3, [sp, #56]	; 0x38
   2c8c6:	e663      	b.n	2c590 <_svfprintf_r+0xf38>
   2c8c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2c8ca:	9308      	str	r3, [sp, #32]
   2c8cc:	930e      	str	r3, [sp, #56]	; 0x38
   2c8ce:	900a      	str	r0, [sp, #40]	; 0x28
   2c8d0:	950f      	str	r5, [sp, #60]	; 0x3c
   2c8d2:	f8cd b01c 	str.w	fp, [sp, #28]
   2c8d6:	9012      	str	r0, [sp, #72]	; 0x48
   2c8d8:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   2c8dc:	f7fe bfd4 	b.w	2b888 <_svfprintf_r+0x230>
   2c8e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2c8e2:	2b47      	cmp	r3, #71	; 0x47
   2c8e4:	f47f ae20 	bne.w	2c528 <_svfprintf_r+0xed0>
   2c8e8:	f01b 0f01 	tst.w	fp, #1
   2c8ec:	f47f aeee 	bne.w	2c6cc <_svfprintf_r+0x1074>
   2c8f0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   2c8f2:	1b9b      	subs	r3, r3, r6
   2c8f4:	9313      	str	r3, [sp, #76]	; 0x4c
   2c8f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2c8f8:	2b47      	cmp	r3, #71	; 0x47
   2c8fa:	f43f af18 	beq.w	2c72e <_svfprintf_r+0x10d6>
   2c8fe:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   2c900:	9312      	str	r3, [sp, #72]	; 0x48
   2c902:	e721      	b.n	2c748 <_svfprintf_r+0x10f0>
   2c904:	424f      	negs	r7, r1
   2c906:	3110      	adds	r1, #16
   2c908:	4d48      	ldr	r5, [pc, #288]	; (2ca2c <_svfprintf_r+0x13d4>)
   2c90a:	da2f      	bge.n	2c96c <_svfprintf_r+0x1314>
   2c90c:	2410      	movs	r4, #16
   2c90e:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   2c912:	e004      	b.n	2c91e <_svfprintf_r+0x12c6>
   2c914:	f108 0808 	add.w	r8, r8, #8
   2c918:	3f10      	subs	r7, #16
   2c91a:	2f10      	cmp	r7, #16
   2c91c:	dd26      	ble.n	2c96c <_svfprintf_r+0x1314>
   2c91e:	3301      	adds	r3, #1
   2c920:	3210      	adds	r2, #16
   2c922:	2b07      	cmp	r3, #7
   2c924:	9227      	str	r2, [sp, #156]	; 0x9c
   2c926:	9326      	str	r3, [sp, #152]	; 0x98
   2c928:	f8c8 5000 	str.w	r5, [r8]
   2c92c:	f8c8 4004 	str.w	r4, [r8, #4]
   2c930:	ddf0      	ble.n	2c914 <_svfprintf_r+0x12bc>
   2c932:	aa25      	add	r2, sp, #148	; 0x94
   2c934:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2c936:	4658      	mov	r0, fp
   2c938:	f001 fe5e 	bl	2e5f8 <__ssprint_r>
   2c93c:	2800      	cmp	r0, #0
   2c93e:	f47e af5d 	bne.w	2b7fc <_svfprintf_r+0x1a4>
   2c942:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   2c944:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2c946:	46c8      	mov	r8, r9
   2c948:	e7e6      	b.n	2c918 <_svfprintf_r+0x12c0>
   2c94a:	aa25      	add	r2, sp, #148	; 0x94
   2c94c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2c94e:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c950:	f001 fe52 	bl	2e5f8 <__ssprint_r>
   2c954:	2800      	cmp	r0, #0
   2c956:	f47e af51 	bne.w	2b7fc <_svfprintf_r+0x1a4>
   2c95a:	991f      	ldr	r1, [sp, #124]	; 0x7c
   2c95c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   2c95e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2c960:	46c8      	mov	r8, r9
   2c962:	e667      	b.n	2c634 <_svfprintf_r+0xfdc>
   2c964:	2000      	movs	r0, #0
   2c966:	900a      	str	r0, [sp, #40]	; 0x28
   2c968:	f7fe bed0 	b.w	2b70c <_svfprintf_r+0xb4>
   2c96c:	3301      	adds	r3, #1
   2c96e:	443a      	add	r2, r7
   2c970:	2b07      	cmp	r3, #7
   2c972:	e888 00a0 	stmia.w	r8, {r5, r7}
   2c976:	9227      	str	r2, [sp, #156]	; 0x9c
   2c978:	9326      	str	r3, [sp, #152]	; 0x98
   2c97a:	f108 0808 	add.w	r8, r8, #8
   2c97e:	f77f ae5c 	ble.w	2c63a <_svfprintf_r+0xfe2>
   2c982:	aa25      	add	r2, sp, #148	; 0x94
   2c984:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2c986:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c988:	f001 fe36 	bl	2e5f8 <__ssprint_r>
   2c98c:	2800      	cmp	r0, #0
   2c98e:	f47e af35 	bne.w	2b7fc <_svfprintf_r+0x1a4>
   2c992:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   2c994:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2c996:	46c8      	mov	r8, r9
   2c998:	e64f      	b.n	2c63a <_svfprintf_r+0xfe2>
   2c99a:	3330      	adds	r3, #48	; 0x30
   2c99c:	2230      	movs	r2, #48	; 0x30
   2c99e:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
   2c9a2:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
   2c9a6:	ab22      	add	r3, sp, #136	; 0x88
   2c9a8:	e70f      	b.n	2c7ca <_svfprintf_r+0x1172>
   2c9aa:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2c9ac:	9a19      	ldr	r2, [sp, #100]	; 0x64
   2c9ae:	4413      	add	r3, r2
   2c9b0:	930e      	str	r3, [sp, #56]	; 0x38
   2c9b2:	e775      	b.n	2c8a0 <_svfprintf_r+0x1248>
   2c9b4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   2c9b6:	e5cb      	b.n	2c550 <_svfprintf_r+0xef8>
   2c9b8:	9b14      	ldr	r3, [sp, #80]	; 0x50
   2c9ba:	4e1d      	ldr	r6, [pc, #116]	; (2ca30 <_svfprintf_r+0x13d8>)
   2c9bc:	2b00      	cmp	r3, #0
   2c9be:	bfb6      	itet	lt
   2c9c0:	272d      	movlt	r7, #45	; 0x2d
   2c9c2:	f89d 7077 	ldrbge.w	r7, [sp, #119]	; 0x77
   2c9c6:	f88d 7077 	strblt.w	r7, [sp, #119]	; 0x77
   2c9ca:	4b1a      	ldr	r3, [pc, #104]	; (2ca34 <_svfprintf_r+0x13dc>)
   2c9cc:	f7ff ba2f 	b.w	2be2e <_svfprintf_r+0x7d6>
   2c9d0:	9a16      	ldr	r2, [sp, #88]	; 0x58
   2c9d2:	9808      	ldr	r0, [sp, #32]
   2c9d4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   2c9d6:	4639      	mov	r1, r7
   2c9d8:	f7d4 fb20 	bl	101c <__aeabi_dcmpeq>
   2c9dc:	2800      	cmp	r0, #0
   2c9de:	f47f ae7f 	bne.w	2c6e0 <_svfprintf_r+0x1088>
   2c9e2:	f1c5 0501 	rsb	r5, r5, #1
   2c9e6:	951f      	str	r5, [sp, #124]	; 0x7c
   2c9e8:	442c      	add	r4, r5
   2c9ea:	e59e      	b.n	2c52a <_svfprintf_r+0xed2>
   2c9ec:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2c9ee:	9a19      	ldr	r2, [sp, #100]	; 0x64
   2c9f0:	4413      	add	r3, r2
   2c9f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   2c9f4:	441a      	add	r2, r3
   2c9f6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   2c9fa:	920e      	str	r2, [sp, #56]	; 0x38
   2c9fc:	9308      	str	r3, [sp, #32]
   2c9fe:	e5c7      	b.n	2c590 <_svfprintf_r+0xf38>
   2ca00:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2ca02:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   2ca04:	f1c3 0301 	rsb	r3, r3, #1
   2ca08:	441a      	add	r2, r3
   2ca0a:	4613      	mov	r3, r2
   2ca0c:	e7d0      	b.n	2c9b0 <_svfprintf_r+0x1358>
   2ca0e:	f01b 0301 	ands.w	r3, fp, #1
   2ca12:	9312      	str	r3, [sp, #72]	; 0x48
   2ca14:	f47f aee2 	bne.w	2c7dc <_svfprintf_r+0x1184>
   2ca18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2ca1a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   2ca1e:	9308      	str	r3, [sp, #32]
   2ca20:	e5b6      	b.n	2c590 <_svfprintf_r+0xf38>
   2ca22:	bf00      	nop
   2ca24:	66666667 	.word	0x66666667
   2ca28:	000312f4 	.word	0x000312f4
   2ca2c:	0003130c 	.word	0x0003130c
   2ca30:	000312c8 	.word	0x000312c8
   2ca34:	000312c4 	.word	0x000312c4
   2ca38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2ca3a:	b913      	cbnz	r3, 2ca42 <_svfprintf_r+0x13ea>
   2ca3c:	f01b 0f01 	tst.w	fp, #1
   2ca40:	d002      	beq.n	2ca48 <_svfprintf_r+0x13f0>
   2ca42:	9b19      	ldr	r3, [sp, #100]	; 0x64
   2ca44:	3301      	adds	r3, #1
   2ca46:	e7d4      	b.n	2c9f2 <_svfprintf_r+0x139a>
   2ca48:	2301      	movs	r3, #1
   2ca4a:	e73a      	b.n	2c8c2 <_svfprintf_r+0x126a>
   2ca4c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   2ca4e:	f89a 3001 	ldrb.w	r3, [sl, #1]
   2ca52:	6828      	ldr	r0, [r5, #0]
   2ca54:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   2ca58:	900a      	str	r0, [sp, #40]	; 0x28
   2ca5a:	4628      	mov	r0, r5
   2ca5c:	3004      	adds	r0, #4
   2ca5e:	46a2      	mov	sl, r4
   2ca60:	900f      	str	r0, [sp, #60]	; 0x3c
   2ca62:	f7fe be51 	b.w	2b708 <_svfprintf_r+0xb0>
   2ca66:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   2ca6a:	f7ff b867 	b.w	2bb3c <_svfprintf_r+0x4e4>
   2ca6e:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   2ca72:	f7ff ba15 	b.w	2bea0 <_svfprintf_r+0x848>
   2ca76:	f10d 0386 	add.w	r3, sp, #134	; 0x86
   2ca7a:	e6a6      	b.n	2c7ca <_svfprintf_r+0x1172>
   2ca7c:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   2ca80:	f7ff b8eb 	b.w	2bc5a <_svfprintf_r+0x602>
   2ca84:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   2ca86:	230c      	movs	r3, #12
   2ca88:	6013      	str	r3, [r2, #0]
   2ca8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2ca8e:	9309      	str	r3, [sp, #36]	; 0x24
   2ca90:	f7fe bebd 	b.w	2b80e <_svfprintf_r+0x1b6>
   2ca94:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   2ca98:	f7ff b99a 	b.w	2bdd0 <_svfprintf_r+0x778>
   2ca9c:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   2caa0:	f7ff b976 	b.w	2bd90 <_svfprintf_r+0x738>
   2caa4:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   2caa8:	f7ff b959 	b.w	2bd5e <_svfprintf_r+0x706>
   2caac:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   2cab0:	f7ff b912 	b.w	2bcd8 <_svfprintf_r+0x680>

0002cab4 <__ascii_wctomb>:
   2cab4:	b121      	cbz	r1, 2cac0 <__ascii_wctomb+0xc>
   2cab6:	2aff      	cmp	r2, #255	; 0xff
   2cab8:	d804      	bhi.n	2cac4 <__ascii_wctomb+0x10>
   2caba:	700a      	strb	r2, [r1, #0]
   2cabc:	2001      	movs	r0, #1
   2cabe:	4770      	bx	lr
   2cac0:	4608      	mov	r0, r1
   2cac2:	4770      	bx	lr
   2cac4:	238a      	movs	r3, #138	; 0x8a
   2cac6:	6003      	str	r3, [r0, #0]
   2cac8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2cacc:	4770      	bx	lr
   2cace:	bf00      	nop

0002cad0 <quorem>:
   2cad0:	6902      	ldr	r2, [r0, #16]
   2cad2:	690b      	ldr	r3, [r1, #16]
   2cad4:	4293      	cmp	r3, r2
   2cad6:	f300 808d 	bgt.w	2cbf4 <quorem+0x124>
   2cada:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2cade:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
   2cae2:	f101 0714 	add.w	r7, r1, #20
   2cae6:	f100 0b14 	add.w	fp, r0, #20
   2caea:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
   2caee:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
   2caf2:	ea4f 0488 	mov.w	r4, r8, lsl #2
   2caf6:	b083      	sub	sp, #12
   2caf8:	3201      	adds	r2, #1
   2cafa:	fbb3 f9f2 	udiv	r9, r3, r2
   2cafe:	eb0b 0304 	add.w	r3, fp, r4
   2cb02:	9400      	str	r4, [sp, #0]
   2cb04:	eb07 0a04 	add.w	sl, r7, r4
   2cb08:	9301      	str	r3, [sp, #4]
   2cb0a:	f1b9 0f00 	cmp.w	r9, #0
   2cb0e:	d039      	beq.n	2cb84 <quorem+0xb4>
   2cb10:	2500      	movs	r5, #0
   2cb12:	462e      	mov	r6, r5
   2cb14:	46bc      	mov	ip, r7
   2cb16:	46de      	mov	lr, fp
   2cb18:	f85c 4b04 	ldr.w	r4, [ip], #4
   2cb1c:	f8de 3000 	ldr.w	r3, [lr]
   2cb20:	b2a2      	uxth	r2, r4
   2cb22:	fb09 5502 	mla	r5, r9, r2, r5
   2cb26:	0c22      	lsrs	r2, r4, #16
   2cb28:	0c2c      	lsrs	r4, r5, #16
   2cb2a:	fb09 4202 	mla	r2, r9, r2, r4
   2cb2e:	b2ad      	uxth	r5, r5
   2cb30:	1b75      	subs	r5, r6, r5
   2cb32:	b296      	uxth	r6, r2
   2cb34:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
   2cb38:	fa15 f383 	uxtah	r3, r5, r3
   2cb3c:	eb06 4623 	add.w	r6, r6, r3, asr #16
   2cb40:	b29b      	uxth	r3, r3
   2cb42:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   2cb46:	45e2      	cmp	sl, ip
   2cb48:	ea4f 4512 	mov.w	r5, r2, lsr #16
   2cb4c:	f84e 3b04 	str.w	r3, [lr], #4
   2cb50:	ea4f 4626 	mov.w	r6, r6, asr #16
   2cb54:	d2e0      	bcs.n	2cb18 <quorem+0x48>
   2cb56:	9b00      	ldr	r3, [sp, #0]
   2cb58:	f85b 3003 	ldr.w	r3, [fp, r3]
   2cb5c:	b993      	cbnz	r3, 2cb84 <quorem+0xb4>
   2cb5e:	9c01      	ldr	r4, [sp, #4]
   2cb60:	1f23      	subs	r3, r4, #4
   2cb62:	459b      	cmp	fp, r3
   2cb64:	d20c      	bcs.n	2cb80 <quorem+0xb0>
   2cb66:	f854 3c04 	ldr.w	r3, [r4, #-4]
   2cb6a:	b94b      	cbnz	r3, 2cb80 <quorem+0xb0>
   2cb6c:	f1a4 0308 	sub.w	r3, r4, #8
   2cb70:	e002      	b.n	2cb78 <quorem+0xa8>
   2cb72:	681a      	ldr	r2, [r3, #0]
   2cb74:	3b04      	subs	r3, #4
   2cb76:	b91a      	cbnz	r2, 2cb80 <quorem+0xb0>
   2cb78:	459b      	cmp	fp, r3
   2cb7a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   2cb7e:	d3f8      	bcc.n	2cb72 <quorem+0xa2>
   2cb80:	f8c0 8010 	str.w	r8, [r0, #16]
   2cb84:	4604      	mov	r4, r0
   2cb86:	f001 fc29 	bl	2e3dc <__mcmp>
   2cb8a:	2800      	cmp	r0, #0
   2cb8c:	db2e      	blt.n	2cbec <quorem+0x11c>
   2cb8e:	f109 0901 	add.w	r9, r9, #1
   2cb92:	465d      	mov	r5, fp
   2cb94:	2300      	movs	r3, #0
   2cb96:	f857 1b04 	ldr.w	r1, [r7], #4
   2cb9a:	6828      	ldr	r0, [r5, #0]
   2cb9c:	b28a      	uxth	r2, r1
   2cb9e:	1a9a      	subs	r2, r3, r2
   2cba0:	0c0b      	lsrs	r3, r1, #16
   2cba2:	fa12 f280 	uxtah	r2, r2, r0
   2cba6:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
   2cbaa:	eb03 4322 	add.w	r3, r3, r2, asr #16
   2cbae:	b292      	uxth	r2, r2
   2cbb0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   2cbb4:	45ba      	cmp	sl, r7
   2cbb6:	f845 2b04 	str.w	r2, [r5], #4
   2cbba:	ea4f 4323 	mov.w	r3, r3, asr #16
   2cbbe:	d2ea      	bcs.n	2cb96 <quorem+0xc6>
   2cbc0:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
   2cbc4:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
   2cbc8:	b982      	cbnz	r2, 2cbec <quorem+0x11c>
   2cbca:	1f1a      	subs	r2, r3, #4
   2cbcc:	4593      	cmp	fp, r2
   2cbce:	d20b      	bcs.n	2cbe8 <quorem+0x118>
   2cbd0:	f853 2c04 	ldr.w	r2, [r3, #-4]
   2cbd4:	b942      	cbnz	r2, 2cbe8 <quorem+0x118>
   2cbd6:	3b08      	subs	r3, #8
   2cbd8:	e002      	b.n	2cbe0 <quorem+0x110>
   2cbda:	681a      	ldr	r2, [r3, #0]
   2cbdc:	3b04      	subs	r3, #4
   2cbde:	b91a      	cbnz	r2, 2cbe8 <quorem+0x118>
   2cbe0:	459b      	cmp	fp, r3
   2cbe2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   2cbe6:	d3f8      	bcc.n	2cbda <quorem+0x10a>
   2cbe8:	f8c4 8010 	str.w	r8, [r4, #16]
   2cbec:	4648      	mov	r0, r9
   2cbee:	b003      	add	sp, #12
   2cbf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2cbf4:	2000      	movs	r0, #0
   2cbf6:	4770      	bx	lr

0002cbf8 <_dtoa_r>:
   2cbf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2cbfc:	6c01      	ldr	r1, [r0, #64]	; 0x40
   2cbfe:	b09b      	sub	sp, #108	; 0x6c
   2cc00:	4604      	mov	r4, r0
   2cc02:	9e27      	ldr	r6, [sp, #156]	; 0x9c
   2cc04:	4692      	mov	sl, r2
   2cc06:	469b      	mov	fp, r3
   2cc08:	b141      	cbz	r1, 2cc1c <_dtoa_r+0x24>
   2cc0a:	6c42      	ldr	r2, [r0, #68]	; 0x44
   2cc0c:	604a      	str	r2, [r1, #4]
   2cc0e:	2301      	movs	r3, #1
   2cc10:	4093      	lsls	r3, r2
   2cc12:	608b      	str	r3, [r1, #8]
   2cc14:	f001 fa0a 	bl	2e02c <_Bfree>
   2cc18:	2300      	movs	r3, #0
   2cc1a:	6423      	str	r3, [r4, #64]	; 0x40
   2cc1c:	f1bb 0f00 	cmp.w	fp, #0
   2cc20:	465d      	mov	r5, fp
   2cc22:	db35      	blt.n	2cc90 <_dtoa_r+0x98>
   2cc24:	2300      	movs	r3, #0
   2cc26:	6033      	str	r3, [r6, #0]
   2cc28:	4b9d      	ldr	r3, [pc, #628]	; (2cea0 <_dtoa_r+0x2a8>)
   2cc2a:	43ab      	bics	r3, r5
   2cc2c:	d015      	beq.n	2cc5a <_dtoa_r+0x62>
   2cc2e:	4650      	mov	r0, sl
   2cc30:	4659      	mov	r1, fp
   2cc32:	2200      	movs	r2, #0
   2cc34:	2300      	movs	r3, #0
   2cc36:	f7d4 f9f1 	bl	101c <__aeabi_dcmpeq>
   2cc3a:	4680      	mov	r8, r0
   2cc3c:	2800      	cmp	r0, #0
   2cc3e:	d02d      	beq.n	2cc9c <_dtoa_r+0xa4>
   2cc40:	9a26      	ldr	r2, [sp, #152]	; 0x98
   2cc42:	2301      	movs	r3, #1
   2cc44:	6013      	str	r3, [r2, #0]
   2cc46:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   2cc48:	2b00      	cmp	r3, #0
   2cc4a:	f000 80bd 	beq.w	2cdc8 <_dtoa_r+0x1d0>
   2cc4e:	4895      	ldr	r0, [pc, #596]	; (2cea4 <_dtoa_r+0x2ac>)
   2cc50:	6018      	str	r0, [r3, #0]
   2cc52:	3801      	subs	r0, #1
   2cc54:	b01b      	add	sp, #108	; 0x6c
   2cc56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2cc5a:	9a26      	ldr	r2, [sp, #152]	; 0x98
   2cc5c:	f242 730f 	movw	r3, #9999	; 0x270f
   2cc60:	6013      	str	r3, [r2, #0]
   2cc62:	f1ba 0f00 	cmp.w	sl, #0
   2cc66:	d10d      	bne.n	2cc84 <_dtoa_r+0x8c>
   2cc68:	f3c5 0513 	ubfx	r5, r5, #0, #20
   2cc6c:	b955      	cbnz	r5, 2cc84 <_dtoa_r+0x8c>
   2cc6e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   2cc70:	488d      	ldr	r0, [pc, #564]	; (2cea8 <_dtoa_r+0x2b0>)
   2cc72:	2b00      	cmp	r3, #0
   2cc74:	d0ee      	beq.n	2cc54 <_dtoa_r+0x5c>
   2cc76:	f100 0308 	add.w	r3, r0, #8
   2cc7a:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   2cc7c:	6013      	str	r3, [r2, #0]
   2cc7e:	b01b      	add	sp, #108	; 0x6c
   2cc80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2cc84:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   2cc86:	4889      	ldr	r0, [pc, #548]	; (2ceac <_dtoa_r+0x2b4>)
   2cc88:	2b00      	cmp	r3, #0
   2cc8a:	d0e3      	beq.n	2cc54 <_dtoa_r+0x5c>
   2cc8c:	1cc3      	adds	r3, r0, #3
   2cc8e:	e7f4      	b.n	2cc7a <_dtoa_r+0x82>
   2cc90:	2301      	movs	r3, #1
   2cc92:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
   2cc96:	6033      	str	r3, [r6, #0]
   2cc98:	46ab      	mov	fp, r5
   2cc9a:	e7c5      	b.n	2cc28 <_dtoa_r+0x30>
   2cc9c:	aa18      	add	r2, sp, #96	; 0x60
   2cc9e:	ab19      	add	r3, sp, #100	; 0x64
   2cca0:	9201      	str	r2, [sp, #4]
   2cca2:	9300      	str	r3, [sp, #0]
   2cca4:	4652      	mov	r2, sl
   2cca6:	465b      	mov	r3, fp
   2cca8:	4620      	mov	r0, r4
   2ccaa:	f001 fc37 	bl	2e51c <__d2b>
   2ccae:	0d2b      	lsrs	r3, r5, #20
   2ccb0:	4681      	mov	r9, r0
   2ccb2:	d071      	beq.n	2cd98 <_dtoa_r+0x1a0>
   2ccb4:	f3cb 0213 	ubfx	r2, fp, #0, #20
   2ccb8:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
   2ccbc:	9f18      	ldr	r7, [sp, #96]	; 0x60
   2ccbe:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   2ccc2:	4650      	mov	r0, sl
   2ccc4:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
   2ccc8:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
   2cccc:	2200      	movs	r2, #0
   2ccce:	4b78      	ldr	r3, [pc, #480]	; (2ceb0 <_dtoa_r+0x2b8>)
   2ccd0:	f7d3 fd88 	bl	7e4 <__aeabi_dsub>
   2ccd4:	a36c      	add	r3, pc, #432	; (adr r3, 2ce88 <_dtoa_r+0x290>)
   2ccd6:	e9d3 2300 	ldrd	r2, r3, [r3]
   2ccda:	f7d3 ff37 	bl	b4c <__aeabi_dmul>
   2ccde:	a36c      	add	r3, pc, #432	; (adr r3, 2ce90 <_dtoa_r+0x298>)
   2cce0:	e9d3 2300 	ldrd	r2, r3, [r3]
   2cce4:	f7d3 fd80 	bl	7e8 <__adddf3>
   2cce8:	e9cd 0102 	strd	r0, r1, [sp, #8]
   2ccec:	4630      	mov	r0, r6
   2ccee:	f7d3 fec7 	bl	a80 <__aeabi_i2d>
   2ccf2:	a369      	add	r3, pc, #420	; (adr r3, 2ce98 <_dtoa_r+0x2a0>)
   2ccf4:	e9d3 2300 	ldrd	r2, r3, [r3]
   2ccf8:	f7d3 ff28 	bl	b4c <__aeabi_dmul>
   2ccfc:	4602      	mov	r2, r0
   2ccfe:	460b      	mov	r3, r1
   2cd00:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   2cd04:	f7d3 fd70 	bl	7e8 <__adddf3>
   2cd08:	e9cd 0104 	strd	r0, r1, [sp, #16]
   2cd0c:	f7d4 f9ce 	bl	10ac <__aeabi_d2iz>
   2cd10:	2200      	movs	r2, #0
   2cd12:	9002      	str	r0, [sp, #8]
   2cd14:	2300      	movs	r3, #0
   2cd16:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   2cd1a:	f7d4 f989 	bl	1030 <__aeabi_dcmplt>
   2cd1e:	2800      	cmp	r0, #0
   2cd20:	f040 8173 	bne.w	2d00a <_dtoa_r+0x412>
   2cd24:	9d02      	ldr	r5, [sp, #8]
   2cd26:	2d16      	cmp	r5, #22
   2cd28:	f200 815d 	bhi.w	2cfe6 <_dtoa_r+0x3ee>
   2cd2c:	4b61      	ldr	r3, [pc, #388]	; (2ceb4 <_dtoa_r+0x2bc>)
   2cd2e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
   2cd32:	e9d3 0100 	ldrd	r0, r1, [r3]
   2cd36:	4652      	mov	r2, sl
   2cd38:	465b      	mov	r3, fp
   2cd3a:	f7d4 f997 	bl	106c <__aeabi_dcmpgt>
   2cd3e:	2800      	cmp	r0, #0
   2cd40:	f000 81c5 	beq.w	2d0ce <_dtoa_r+0x4d6>
   2cd44:	1e6b      	subs	r3, r5, #1
   2cd46:	9302      	str	r3, [sp, #8]
   2cd48:	2300      	movs	r3, #0
   2cd4a:	930e      	str	r3, [sp, #56]	; 0x38
   2cd4c:	1bbf      	subs	r7, r7, r6
   2cd4e:	1e7b      	subs	r3, r7, #1
   2cd50:	9306      	str	r3, [sp, #24]
   2cd52:	f100 8154 	bmi.w	2cffe <_dtoa_r+0x406>
   2cd56:	2300      	movs	r3, #0
   2cd58:	9308      	str	r3, [sp, #32]
   2cd5a:	9b02      	ldr	r3, [sp, #8]
   2cd5c:	2b00      	cmp	r3, #0
   2cd5e:	f2c0 8145 	blt.w	2cfec <_dtoa_r+0x3f4>
   2cd62:	9a06      	ldr	r2, [sp, #24]
   2cd64:	930d      	str	r3, [sp, #52]	; 0x34
   2cd66:	4611      	mov	r1, r2
   2cd68:	4419      	add	r1, r3
   2cd6a:	2300      	movs	r3, #0
   2cd6c:	9106      	str	r1, [sp, #24]
   2cd6e:	930c      	str	r3, [sp, #48]	; 0x30
   2cd70:	9b24      	ldr	r3, [sp, #144]	; 0x90
   2cd72:	2b09      	cmp	r3, #9
   2cd74:	d82a      	bhi.n	2cdcc <_dtoa_r+0x1d4>
   2cd76:	2b05      	cmp	r3, #5
   2cd78:	f340 865b 	ble.w	2da32 <_dtoa_r+0xe3a>
   2cd7c:	3b04      	subs	r3, #4
   2cd7e:	9324      	str	r3, [sp, #144]	; 0x90
   2cd80:	2500      	movs	r5, #0
   2cd82:	9b24      	ldr	r3, [sp, #144]	; 0x90
   2cd84:	3b02      	subs	r3, #2
   2cd86:	2b03      	cmp	r3, #3
   2cd88:	f200 8642 	bhi.w	2da10 <_dtoa_r+0xe18>
   2cd8c:	e8df f013 	tbh	[pc, r3, lsl #1]
   2cd90:	02c903d4 	.word	0x02c903d4
   2cd94:	046103df 	.word	0x046103df
   2cd98:	9f18      	ldr	r7, [sp, #96]	; 0x60
   2cd9a:	9e19      	ldr	r6, [sp, #100]	; 0x64
   2cd9c:	443e      	add	r6, r7
   2cd9e:	f206 4332 	addw	r3, r6, #1074	; 0x432
   2cda2:	2b20      	cmp	r3, #32
   2cda4:	f340 818e 	ble.w	2d0c4 <_dtoa_r+0x4cc>
   2cda8:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
   2cdac:	f206 4012 	addw	r0, r6, #1042	; 0x412
   2cdb0:	409d      	lsls	r5, r3
   2cdb2:	fa2a f000 	lsr.w	r0, sl, r0
   2cdb6:	4328      	orrs	r0, r5
   2cdb8:	f7d3 fe52 	bl	a60 <__aeabi_ui2d>
   2cdbc:	2301      	movs	r3, #1
   2cdbe:	3e01      	subs	r6, #1
   2cdc0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
   2cdc4:	9314      	str	r3, [sp, #80]	; 0x50
   2cdc6:	e781      	b.n	2cccc <_dtoa_r+0xd4>
   2cdc8:	483b      	ldr	r0, [pc, #236]	; (2ceb8 <_dtoa_r+0x2c0>)
   2cdca:	e743      	b.n	2cc54 <_dtoa_r+0x5c>
   2cdcc:	2100      	movs	r1, #0
   2cdce:	6461      	str	r1, [r4, #68]	; 0x44
   2cdd0:	4620      	mov	r0, r4
   2cdd2:	9125      	str	r1, [sp, #148]	; 0x94
   2cdd4:	f001 f904 	bl	2dfe0 <_Balloc>
   2cdd8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2cddc:	930a      	str	r3, [sp, #40]	; 0x28
   2cdde:	9a25      	ldr	r2, [sp, #148]	; 0x94
   2cde0:	930f      	str	r3, [sp, #60]	; 0x3c
   2cde2:	2301      	movs	r3, #1
   2cde4:	9004      	str	r0, [sp, #16]
   2cde6:	6420      	str	r0, [r4, #64]	; 0x40
   2cde8:	9224      	str	r2, [sp, #144]	; 0x90
   2cdea:	930b      	str	r3, [sp, #44]	; 0x2c
   2cdec:	9b19      	ldr	r3, [sp, #100]	; 0x64
   2cdee:	2b00      	cmp	r3, #0
   2cdf0:	f2c0 80d9 	blt.w	2cfa6 <_dtoa_r+0x3ae>
   2cdf4:	9a02      	ldr	r2, [sp, #8]
   2cdf6:	2a0e      	cmp	r2, #14
   2cdf8:	f300 80d5 	bgt.w	2cfa6 <_dtoa_r+0x3ae>
   2cdfc:	4b2d      	ldr	r3, [pc, #180]	; (2ceb4 <_dtoa_r+0x2bc>)
   2cdfe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   2ce02:	e9d3 2300 	ldrd	r2, r3, [r3]
   2ce06:	e9cd 2308 	strd	r2, r3, [sp, #32]
   2ce0a:	9b25      	ldr	r3, [sp, #148]	; 0x94
   2ce0c:	2b00      	cmp	r3, #0
   2ce0e:	f2c0 83ba 	blt.w	2d586 <_dtoa_r+0x98e>
   2ce12:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
   2ce16:	4650      	mov	r0, sl
   2ce18:	462a      	mov	r2, r5
   2ce1a:	4633      	mov	r3, r6
   2ce1c:	4659      	mov	r1, fp
   2ce1e:	f7d3 ffbf 	bl	da0 <__aeabi_ddiv>
   2ce22:	f7d4 f943 	bl	10ac <__aeabi_d2iz>
   2ce26:	4680      	mov	r8, r0
   2ce28:	f7d3 fe2a 	bl	a80 <__aeabi_i2d>
   2ce2c:	462a      	mov	r2, r5
   2ce2e:	4633      	mov	r3, r6
   2ce30:	f7d3 fe8c 	bl	b4c <__aeabi_dmul>
   2ce34:	460b      	mov	r3, r1
   2ce36:	4602      	mov	r2, r0
   2ce38:	4659      	mov	r1, fp
   2ce3a:	4650      	mov	r0, sl
   2ce3c:	f7d3 fcd2 	bl	7e4 <__aeabi_dsub>
   2ce40:	9d04      	ldr	r5, [sp, #16]
   2ce42:	f108 0330 	add.w	r3, r8, #48	; 0x30
   2ce46:	702b      	strb	r3, [r5, #0]
   2ce48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2ce4a:	2b01      	cmp	r3, #1
   2ce4c:	4606      	mov	r6, r0
   2ce4e:	460f      	mov	r7, r1
   2ce50:	f105 0501 	add.w	r5, r5, #1
   2ce54:	d068      	beq.n	2cf28 <_dtoa_r+0x330>
   2ce56:	2200      	movs	r2, #0
   2ce58:	4b18      	ldr	r3, [pc, #96]	; (2cebc <_dtoa_r+0x2c4>)
   2ce5a:	f7d3 fe77 	bl	b4c <__aeabi_dmul>
   2ce5e:	2200      	movs	r2, #0
   2ce60:	2300      	movs	r3, #0
   2ce62:	4606      	mov	r6, r0
   2ce64:	460f      	mov	r7, r1
   2ce66:	f7d4 f8d9 	bl	101c <__aeabi_dcmpeq>
   2ce6a:	2800      	cmp	r0, #0
   2ce6c:	f040 8088 	bne.w	2cf80 <_dtoa_r+0x388>
   2ce70:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
   2ce74:	f04f 0a00 	mov.w	sl, #0
   2ce78:	f8df b040 	ldr.w	fp, [pc, #64]	; 2cebc <_dtoa_r+0x2c4>
   2ce7c:	940c      	str	r4, [sp, #48]	; 0x30
   2ce7e:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   2ce82:	e028      	b.n	2ced6 <_dtoa_r+0x2de>
   2ce84:	f3af 8000 	nop.w
   2ce88:	636f4361 	.word	0x636f4361
   2ce8c:	3fd287a7 	.word	0x3fd287a7
   2ce90:	8b60c8b3 	.word	0x8b60c8b3
   2ce94:	3fc68a28 	.word	0x3fc68a28
   2ce98:	509f79fb 	.word	0x509f79fb
   2ce9c:	3fd34413 	.word	0x3fd34413
   2cea0:	7ff00000 	.word	0x7ff00000
   2cea4:	00030c5d 	.word	0x00030c5d
   2cea8:	00031420 	.word	0x00031420
   2ceac:	0003142c 	.word	0x0003142c
   2ceb0:	3ff80000 	.word	0x3ff80000
   2ceb4:	00031458 	.word	0x00031458
   2ceb8:	00030c5c 	.word	0x00030c5c
   2cebc:	40240000 	.word	0x40240000
   2cec0:	f7d3 fe44 	bl	b4c <__aeabi_dmul>
   2cec4:	2200      	movs	r2, #0
   2cec6:	2300      	movs	r3, #0
   2cec8:	4606      	mov	r6, r0
   2ceca:	460f      	mov	r7, r1
   2cecc:	f7d4 f8a6 	bl	101c <__aeabi_dcmpeq>
   2ced0:	2800      	cmp	r0, #0
   2ced2:	f040 83c1 	bne.w	2d658 <_dtoa_r+0xa60>
   2ced6:	4642      	mov	r2, r8
   2ced8:	464b      	mov	r3, r9
   2ceda:	4630      	mov	r0, r6
   2cedc:	4639      	mov	r1, r7
   2cede:	f7d3 ff5f 	bl	da0 <__aeabi_ddiv>
   2cee2:	f7d4 f8e3 	bl	10ac <__aeabi_d2iz>
   2cee6:	4604      	mov	r4, r0
   2cee8:	f7d3 fdca 	bl	a80 <__aeabi_i2d>
   2ceec:	4642      	mov	r2, r8
   2ceee:	464b      	mov	r3, r9
   2cef0:	f7d3 fe2c 	bl	b4c <__aeabi_dmul>
   2cef4:	4602      	mov	r2, r0
   2cef6:	460b      	mov	r3, r1
   2cef8:	4630      	mov	r0, r6
   2cefa:	4639      	mov	r1, r7
   2cefc:	f7d3 fc72 	bl	7e4 <__aeabi_dsub>
   2cf00:	f104 0e30 	add.w	lr, r4, #48	; 0x30
   2cf04:	9e04      	ldr	r6, [sp, #16]
   2cf06:	f805 eb01 	strb.w	lr, [r5], #1
   2cf0a:	eba5 0e06 	sub.w	lr, r5, r6
   2cf0e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   2cf10:	45b6      	cmp	lr, r6
   2cf12:	e9cd 0106 	strd	r0, r1, [sp, #24]
   2cf16:	4652      	mov	r2, sl
   2cf18:	465b      	mov	r3, fp
   2cf1a:	d1d1      	bne.n	2cec0 <_dtoa_r+0x2c8>
   2cf1c:	46a0      	mov	r8, r4
   2cf1e:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
   2cf22:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   2cf24:	4606      	mov	r6, r0
   2cf26:	460f      	mov	r7, r1
   2cf28:	4632      	mov	r2, r6
   2cf2a:	463b      	mov	r3, r7
   2cf2c:	4630      	mov	r0, r6
   2cf2e:	4639      	mov	r1, r7
   2cf30:	f7d3 fc5a 	bl	7e8 <__adddf3>
   2cf34:	4606      	mov	r6, r0
   2cf36:	460f      	mov	r7, r1
   2cf38:	4602      	mov	r2, r0
   2cf3a:	460b      	mov	r3, r1
   2cf3c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   2cf40:	f7d4 f876 	bl	1030 <__aeabi_dcmplt>
   2cf44:	b948      	cbnz	r0, 2cf5a <_dtoa_r+0x362>
   2cf46:	4632      	mov	r2, r6
   2cf48:	463b      	mov	r3, r7
   2cf4a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   2cf4e:	f7d4 f865 	bl	101c <__aeabi_dcmpeq>
   2cf52:	b1a8      	cbz	r0, 2cf80 <_dtoa_r+0x388>
   2cf54:	f018 0f01 	tst.w	r8, #1
   2cf58:	d012      	beq.n	2cf80 <_dtoa_r+0x388>
   2cf5a:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   2cf5e:	9a04      	ldr	r2, [sp, #16]
   2cf60:	1e6b      	subs	r3, r5, #1
   2cf62:	e004      	b.n	2cf6e <_dtoa_r+0x376>
   2cf64:	429a      	cmp	r2, r3
   2cf66:	f000 8401 	beq.w	2d76c <_dtoa_r+0xb74>
   2cf6a:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
   2cf6e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
   2cf72:	f103 0501 	add.w	r5, r3, #1
   2cf76:	d0f5      	beq.n	2cf64 <_dtoa_r+0x36c>
   2cf78:	f108 0801 	add.w	r8, r8, #1
   2cf7c:	f883 8000 	strb.w	r8, [r3]
   2cf80:	4649      	mov	r1, r9
   2cf82:	4620      	mov	r0, r4
   2cf84:	f001 f852 	bl	2e02c <_Bfree>
   2cf88:	2200      	movs	r2, #0
   2cf8a:	9b02      	ldr	r3, [sp, #8]
   2cf8c:	702a      	strb	r2, [r5, #0]
   2cf8e:	9a26      	ldr	r2, [sp, #152]	; 0x98
   2cf90:	3301      	adds	r3, #1
   2cf92:	6013      	str	r3, [r2, #0]
   2cf94:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   2cf96:	2b00      	cmp	r3, #0
   2cf98:	f000 839e 	beq.w	2d6d8 <_dtoa_r+0xae0>
   2cf9c:	9804      	ldr	r0, [sp, #16]
   2cf9e:	601d      	str	r5, [r3, #0]
   2cfa0:	b01b      	add	sp, #108	; 0x6c
   2cfa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2cfa6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   2cfa8:	2a00      	cmp	r2, #0
   2cfaa:	d03e      	beq.n	2d02a <_dtoa_r+0x432>
   2cfac:	9a24      	ldr	r2, [sp, #144]	; 0x90
   2cfae:	2a01      	cmp	r2, #1
   2cfb0:	f340 8311 	ble.w	2d5d6 <_dtoa_r+0x9de>
   2cfb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2cfb6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   2cfb8:	1e5f      	subs	r7, r3, #1
   2cfba:	42ba      	cmp	r2, r7
   2cfbc:	f2c0 838f 	blt.w	2d6de <_dtoa_r+0xae6>
   2cfc0:	1bd7      	subs	r7, r2, r7
   2cfc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2cfc4:	2b00      	cmp	r3, #0
   2cfc6:	f2c0 848b 	blt.w	2d8e0 <_dtoa_r+0xce8>
   2cfca:	9d08      	ldr	r5, [sp, #32]
   2cfcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2cfce:	9a08      	ldr	r2, [sp, #32]
   2cfd0:	441a      	add	r2, r3
   2cfd2:	9208      	str	r2, [sp, #32]
   2cfd4:	9a06      	ldr	r2, [sp, #24]
   2cfd6:	2101      	movs	r1, #1
   2cfd8:	441a      	add	r2, r3
   2cfda:	4620      	mov	r0, r4
   2cfdc:	9206      	str	r2, [sp, #24]
   2cfde:	f001 f8bf 	bl	2e160 <__i2b>
   2cfe2:	4606      	mov	r6, r0
   2cfe4:	e024      	b.n	2d030 <_dtoa_r+0x438>
   2cfe6:	2301      	movs	r3, #1
   2cfe8:	930e      	str	r3, [sp, #56]	; 0x38
   2cfea:	e6af      	b.n	2cd4c <_dtoa_r+0x154>
   2cfec:	9a08      	ldr	r2, [sp, #32]
   2cfee:	9b02      	ldr	r3, [sp, #8]
   2cff0:	1ad2      	subs	r2, r2, r3
   2cff2:	425b      	negs	r3, r3
   2cff4:	930c      	str	r3, [sp, #48]	; 0x30
   2cff6:	2300      	movs	r3, #0
   2cff8:	9208      	str	r2, [sp, #32]
   2cffa:	930d      	str	r3, [sp, #52]	; 0x34
   2cffc:	e6b8      	b.n	2cd70 <_dtoa_r+0x178>
   2cffe:	f1c7 0301 	rsb	r3, r7, #1
   2d002:	9308      	str	r3, [sp, #32]
   2d004:	2300      	movs	r3, #0
   2d006:	9306      	str	r3, [sp, #24]
   2d008:	e6a7      	b.n	2cd5a <_dtoa_r+0x162>
   2d00a:	9d02      	ldr	r5, [sp, #8]
   2d00c:	4628      	mov	r0, r5
   2d00e:	f7d3 fd37 	bl	a80 <__aeabi_i2d>
   2d012:	4602      	mov	r2, r0
   2d014:	460b      	mov	r3, r1
   2d016:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   2d01a:	f7d3 ffff 	bl	101c <__aeabi_dcmpeq>
   2d01e:	2800      	cmp	r0, #0
   2d020:	f47f ae80 	bne.w	2cd24 <_dtoa_r+0x12c>
   2d024:	1e6b      	subs	r3, r5, #1
   2d026:	9302      	str	r3, [sp, #8]
   2d028:	e67c      	b.n	2cd24 <_dtoa_r+0x12c>
   2d02a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   2d02c:	9d08      	ldr	r5, [sp, #32]
   2d02e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   2d030:	2d00      	cmp	r5, #0
   2d032:	dd0c      	ble.n	2d04e <_dtoa_r+0x456>
   2d034:	9906      	ldr	r1, [sp, #24]
   2d036:	2900      	cmp	r1, #0
   2d038:	460b      	mov	r3, r1
   2d03a:	dd08      	ble.n	2d04e <_dtoa_r+0x456>
   2d03c:	42a9      	cmp	r1, r5
   2d03e:	9a08      	ldr	r2, [sp, #32]
   2d040:	bfa8      	it	ge
   2d042:	462b      	movge	r3, r5
   2d044:	1ad2      	subs	r2, r2, r3
   2d046:	1aed      	subs	r5, r5, r3
   2d048:	1acb      	subs	r3, r1, r3
   2d04a:	9208      	str	r2, [sp, #32]
   2d04c:	9306      	str	r3, [sp, #24]
   2d04e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2d050:	b1d3      	cbz	r3, 2d088 <_dtoa_r+0x490>
   2d052:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2d054:	2b00      	cmp	r3, #0
   2d056:	f000 82b7 	beq.w	2d5c8 <_dtoa_r+0x9d0>
   2d05a:	2f00      	cmp	r7, #0
   2d05c:	dd10      	ble.n	2d080 <_dtoa_r+0x488>
   2d05e:	4631      	mov	r1, r6
   2d060:	463a      	mov	r2, r7
   2d062:	4620      	mov	r0, r4
   2d064:	f001 f918 	bl	2e298 <__pow5mult>
   2d068:	464a      	mov	r2, r9
   2d06a:	4601      	mov	r1, r0
   2d06c:	4606      	mov	r6, r0
   2d06e:	4620      	mov	r0, r4
   2d070:	f001 f880 	bl	2e174 <__multiply>
   2d074:	4649      	mov	r1, r9
   2d076:	4680      	mov	r8, r0
   2d078:	4620      	mov	r0, r4
   2d07a:	f000 ffd7 	bl	2e02c <_Bfree>
   2d07e:	46c1      	mov	r9, r8
   2d080:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2d082:	1bda      	subs	r2, r3, r7
   2d084:	f040 82a1 	bne.w	2d5ca <_dtoa_r+0x9d2>
   2d088:	2101      	movs	r1, #1
   2d08a:	4620      	mov	r0, r4
   2d08c:	f001 f868 	bl	2e160 <__i2b>
   2d090:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2d092:	2b00      	cmp	r3, #0
   2d094:	4680      	mov	r8, r0
   2d096:	dd1c      	ble.n	2d0d2 <_dtoa_r+0x4da>
   2d098:	4601      	mov	r1, r0
   2d09a:	461a      	mov	r2, r3
   2d09c:	4620      	mov	r0, r4
   2d09e:	f001 f8fb 	bl	2e298 <__pow5mult>
   2d0a2:	9b24      	ldr	r3, [sp, #144]	; 0x90
   2d0a4:	2b01      	cmp	r3, #1
   2d0a6:	4680      	mov	r8, r0
   2d0a8:	f340 8254 	ble.w	2d554 <_dtoa_r+0x95c>
   2d0ac:	2300      	movs	r3, #0
   2d0ae:	930c      	str	r3, [sp, #48]	; 0x30
   2d0b0:	f8d8 3010 	ldr.w	r3, [r8, #16]
   2d0b4:	eb08 0383 	add.w	r3, r8, r3, lsl #2
   2d0b8:	6918      	ldr	r0, [r3, #16]
   2d0ba:	f001 f801 	bl	2e0c0 <__hi0bits>
   2d0be:	f1c0 0020 	rsb	r0, r0, #32
   2d0c2:	e010      	b.n	2d0e6 <_dtoa_r+0x4ee>
   2d0c4:	f1c3 0520 	rsb	r5, r3, #32
   2d0c8:	fa0a f005 	lsl.w	r0, sl, r5
   2d0cc:	e674      	b.n	2cdb8 <_dtoa_r+0x1c0>
   2d0ce:	900e      	str	r0, [sp, #56]	; 0x38
   2d0d0:	e63c      	b.n	2cd4c <_dtoa_r+0x154>
   2d0d2:	9b24      	ldr	r3, [sp, #144]	; 0x90
   2d0d4:	2b01      	cmp	r3, #1
   2d0d6:	f340 8287 	ble.w	2d5e8 <_dtoa_r+0x9f0>
   2d0da:	2300      	movs	r3, #0
   2d0dc:	930c      	str	r3, [sp, #48]	; 0x30
   2d0de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2d0e0:	2001      	movs	r0, #1
   2d0e2:	2b00      	cmp	r3, #0
   2d0e4:	d1e4      	bne.n	2d0b0 <_dtoa_r+0x4b8>
   2d0e6:	9a06      	ldr	r2, [sp, #24]
   2d0e8:	4410      	add	r0, r2
   2d0ea:	f010 001f 	ands.w	r0, r0, #31
   2d0ee:	f000 80a1 	beq.w	2d234 <_dtoa_r+0x63c>
   2d0f2:	f1c0 0320 	rsb	r3, r0, #32
   2d0f6:	2b04      	cmp	r3, #4
   2d0f8:	f340 849e 	ble.w	2da38 <_dtoa_r+0xe40>
   2d0fc:	9b08      	ldr	r3, [sp, #32]
   2d0fe:	f1c0 001c 	rsb	r0, r0, #28
   2d102:	4403      	add	r3, r0
   2d104:	9308      	str	r3, [sp, #32]
   2d106:	4613      	mov	r3, r2
   2d108:	4403      	add	r3, r0
   2d10a:	4405      	add	r5, r0
   2d10c:	9306      	str	r3, [sp, #24]
   2d10e:	9b08      	ldr	r3, [sp, #32]
   2d110:	2b00      	cmp	r3, #0
   2d112:	dd05      	ble.n	2d120 <_dtoa_r+0x528>
   2d114:	4649      	mov	r1, r9
   2d116:	461a      	mov	r2, r3
   2d118:	4620      	mov	r0, r4
   2d11a:	f001 f90d 	bl	2e338 <__lshift>
   2d11e:	4681      	mov	r9, r0
   2d120:	9b06      	ldr	r3, [sp, #24]
   2d122:	2b00      	cmp	r3, #0
   2d124:	dd05      	ble.n	2d132 <_dtoa_r+0x53a>
   2d126:	4641      	mov	r1, r8
   2d128:	461a      	mov	r2, r3
   2d12a:	4620      	mov	r0, r4
   2d12c:	f001 f904 	bl	2e338 <__lshift>
   2d130:	4680      	mov	r8, r0
   2d132:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2d134:	2b00      	cmp	r3, #0
   2d136:	f040 8086 	bne.w	2d246 <_dtoa_r+0x64e>
   2d13a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2d13c:	2b00      	cmp	r3, #0
   2d13e:	f340 8266 	ble.w	2d60e <_dtoa_r+0xa16>
   2d142:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2d144:	2b00      	cmp	r3, #0
   2d146:	f000 8098 	beq.w	2d27a <_dtoa_r+0x682>
   2d14a:	2d00      	cmp	r5, #0
   2d14c:	dd05      	ble.n	2d15a <_dtoa_r+0x562>
   2d14e:	4631      	mov	r1, r6
   2d150:	462a      	mov	r2, r5
   2d152:	4620      	mov	r0, r4
   2d154:	f001 f8f0 	bl	2e338 <__lshift>
   2d158:	4606      	mov	r6, r0
   2d15a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2d15c:	2b00      	cmp	r3, #0
   2d15e:	f040 8337 	bne.w	2d7d0 <_dtoa_r+0xbd8>
   2d162:	9606      	str	r6, [sp, #24]
   2d164:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2d166:	9a04      	ldr	r2, [sp, #16]
   2d168:	f8dd b018 	ldr.w	fp, [sp, #24]
   2d16c:	3b01      	subs	r3, #1
   2d16e:	18d3      	adds	r3, r2, r3
   2d170:	930b      	str	r3, [sp, #44]	; 0x2c
   2d172:	f00a 0301 	and.w	r3, sl, #1
   2d176:	930c      	str	r3, [sp, #48]	; 0x30
   2d178:	4617      	mov	r7, r2
   2d17a:	46c2      	mov	sl, r8
   2d17c:	4651      	mov	r1, sl
   2d17e:	4648      	mov	r0, r9
   2d180:	f7ff fca6 	bl	2cad0 <quorem>
   2d184:	4631      	mov	r1, r6
   2d186:	4605      	mov	r5, r0
   2d188:	4648      	mov	r0, r9
   2d18a:	f001 f927 	bl	2e3dc <__mcmp>
   2d18e:	465a      	mov	r2, fp
   2d190:	900a      	str	r0, [sp, #40]	; 0x28
   2d192:	4651      	mov	r1, sl
   2d194:	4620      	mov	r0, r4
   2d196:	f001 f93d 	bl	2e414 <__mdiff>
   2d19a:	68c2      	ldr	r2, [r0, #12]
   2d19c:	4680      	mov	r8, r0
   2d19e:	f105 0330 	add.w	r3, r5, #48	; 0x30
   2d1a2:	2a00      	cmp	r2, #0
   2d1a4:	f040 822b 	bne.w	2d5fe <_dtoa_r+0xa06>
   2d1a8:	4601      	mov	r1, r0
   2d1aa:	4648      	mov	r0, r9
   2d1ac:	9308      	str	r3, [sp, #32]
   2d1ae:	f001 f915 	bl	2e3dc <__mcmp>
   2d1b2:	4641      	mov	r1, r8
   2d1b4:	9006      	str	r0, [sp, #24]
   2d1b6:	4620      	mov	r0, r4
   2d1b8:	f000 ff38 	bl	2e02c <_Bfree>
   2d1bc:	9a06      	ldr	r2, [sp, #24]
   2d1be:	9b08      	ldr	r3, [sp, #32]
   2d1c0:	b932      	cbnz	r2, 2d1d0 <_dtoa_r+0x5d8>
   2d1c2:	9924      	ldr	r1, [sp, #144]	; 0x90
   2d1c4:	b921      	cbnz	r1, 2d1d0 <_dtoa_r+0x5d8>
   2d1c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   2d1c8:	2a00      	cmp	r2, #0
   2d1ca:	f000 83ef 	beq.w	2d9ac <_dtoa_r+0xdb4>
   2d1ce:	9a24      	ldr	r2, [sp, #144]	; 0x90
   2d1d0:	990a      	ldr	r1, [sp, #40]	; 0x28
   2d1d2:	2900      	cmp	r1, #0
   2d1d4:	f2c0 829f 	blt.w	2d716 <_dtoa_r+0xb1e>
   2d1d8:	d105      	bne.n	2d1e6 <_dtoa_r+0x5ee>
   2d1da:	9924      	ldr	r1, [sp, #144]	; 0x90
   2d1dc:	b919      	cbnz	r1, 2d1e6 <_dtoa_r+0x5ee>
   2d1de:	990c      	ldr	r1, [sp, #48]	; 0x30
   2d1e0:	2900      	cmp	r1, #0
   2d1e2:	f000 8298 	beq.w	2d716 <_dtoa_r+0xb1e>
   2d1e6:	2a00      	cmp	r2, #0
   2d1e8:	f300 8306 	bgt.w	2d7f8 <_dtoa_r+0xc00>
   2d1ec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   2d1ee:	703b      	strb	r3, [r7, #0]
   2d1f0:	f107 0801 	add.w	r8, r7, #1
   2d1f4:	4297      	cmp	r7, r2
   2d1f6:	4645      	mov	r5, r8
   2d1f8:	f000 830c 	beq.w	2d814 <_dtoa_r+0xc1c>
   2d1fc:	4649      	mov	r1, r9
   2d1fe:	2300      	movs	r3, #0
   2d200:	220a      	movs	r2, #10
   2d202:	4620      	mov	r0, r4
   2d204:	f000 ff1c 	bl	2e040 <__multadd>
   2d208:	455e      	cmp	r6, fp
   2d20a:	4681      	mov	r9, r0
   2d20c:	4631      	mov	r1, r6
   2d20e:	f04f 0300 	mov.w	r3, #0
   2d212:	f04f 020a 	mov.w	r2, #10
   2d216:	4620      	mov	r0, r4
   2d218:	f000 81eb 	beq.w	2d5f2 <_dtoa_r+0x9fa>
   2d21c:	f000 ff10 	bl	2e040 <__multadd>
   2d220:	4659      	mov	r1, fp
   2d222:	4606      	mov	r6, r0
   2d224:	2300      	movs	r3, #0
   2d226:	220a      	movs	r2, #10
   2d228:	4620      	mov	r0, r4
   2d22a:	f000 ff09 	bl	2e040 <__multadd>
   2d22e:	4647      	mov	r7, r8
   2d230:	4683      	mov	fp, r0
   2d232:	e7a3      	b.n	2d17c <_dtoa_r+0x584>
   2d234:	201c      	movs	r0, #28
   2d236:	9b08      	ldr	r3, [sp, #32]
   2d238:	4403      	add	r3, r0
   2d23a:	9308      	str	r3, [sp, #32]
   2d23c:	9b06      	ldr	r3, [sp, #24]
   2d23e:	4403      	add	r3, r0
   2d240:	4405      	add	r5, r0
   2d242:	9306      	str	r3, [sp, #24]
   2d244:	e763      	b.n	2d10e <_dtoa_r+0x516>
   2d246:	4641      	mov	r1, r8
   2d248:	4648      	mov	r0, r9
   2d24a:	f001 f8c7 	bl	2e3dc <__mcmp>
   2d24e:	2800      	cmp	r0, #0
   2d250:	f6bf af73 	bge.w	2d13a <_dtoa_r+0x542>
   2d254:	9f02      	ldr	r7, [sp, #8]
   2d256:	4649      	mov	r1, r9
   2d258:	2300      	movs	r3, #0
   2d25a:	220a      	movs	r2, #10
   2d25c:	4620      	mov	r0, r4
   2d25e:	3f01      	subs	r7, #1
   2d260:	9702      	str	r7, [sp, #8]
   2d262:	f000 feed 	bl	2e040 <__multadd>
   2d266:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2d268:	4681      	mov	r9, r0
   2d26a:	2b00      	cmp	r3, #0
   2d26c:	f040 83b6 	bne.w	2d9dc <_dtoa_r+0xde4>
   2d270:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2d272:	2b00      	cmp	r3, #0
   2d274:	f340 83bf 	ble.w	2d9f6 <_dtoa_r+0xdfe>
   2d278:	930a      	str	r3, [sp, #40]	; 0x28
   2d27a:	f8dd b010 	ldr.w	fp, [sp, #16]
   2d27e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   2d280:	465d      	mov	r5, fp
   2d282:	e002      	b.n	2d28a <_dtoa_r+0x692>
   2d284:	f000 fedc 	bl	2e040 <__multadd>
   2d288:	4681      	mov	r9, r0
   2d28a:	4641      	mov	r1, r8
   2d28c:	4648      	mov	r0, r9
   2d28e:	f7ff fc1f 	bl	2cad0 <quorem>
   2d292:	f100 0a30 	add.w	sl, r0, #48	; 0x30
   2d296:	f805 ab01 	strb.w	sl, [r5], #1
   2d29a:	eba5 030b 	sub.w	r3, r5, fp
   2d29e:	42bb      	cmp	r3, r7
   2d2a0:	f04f 020a 	mov.w	r2, #10
   2d2a4:	f04f 0300 	mov.w	r3, #0
   2d2a8:	4649      	mov	r1, r9
   2d2aa:	4620      	mov	r0, r4
   2d2ac:	dbea      	blt.n	2d284 <_dtoa_r+0x68c>
   2d2ae:	9b04      	ldr	r3, [sp, #16]
   2d2b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   2d2b2:	2a01      	cmp	r2, #1
   2d2b4:	bfac      	ite	ge
   2d2b6:	189b      	addge	r3, r3, r2
   2d2b8:	3301      	addlt	r3, #1
   2d2ba:	461d      	mov	r5, r3
   2d2bc:	f04f 0b00 	mov.w	fp, #0
   2d2c0:	4649      	mov	r1, r9
   2d2c2:	2201      	movs	r2, #1
   2d2c4:	4620      	mov	r0, r4
   2d2c6:	f001 f837 	bl	2e338 <__lshift>
   2d2ca:	4641      	mov	r1, r8
   2d2cc:	4681      	mov	r9, r0
   2d2ce:	f001 f885 	bl	2e3dc <__mcmp>
   2d2d2:	2800      	cmp	r0, #0
   2d2d4:	f340 823d 	ble.w	2d752 <_dtoa_r+0xb5a>
   2d2d8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
   2d2dc:	9904      	ldr	r1, [sp, #16]
   2d2de:	1e6b      	subs	r3, r5, #1
   2d2e0:	e004      	b.n	2d2ec <_dtoa_r+0x6f4>
   2d2e2:	428b      	cmp	r3, r1
   2d2e4:	f000 81ae 	beq.w	2d644 <_dtoa_r+0xa4c>
   2d2e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   2d2ec:	2a39      	cmp	r2, #57	; 0x39
   2d2ee:	f103 0501 	add.w	r5, r3, #1
   2d2f2:	d0f6      	beq.n	2d2e2 <_dtoa_r+0x6ea>
   2d2f4:	3201      	adds	r2, #1
   2d2f6:	701a      	strb	r2, [r3, #0]
   2d2f8:	4641      	mov	r1, r8
   2d2fa:	4620      	mov	r0, r4
   2d2fc:	f000 fe96 	bl	2e02c <_Bfree>
   2d300:	2e00      	cmp	r6, #0
   2d302:	f43f ae3d 	beq.w	2cf80 <_dtoa_r+0x388>
   2d306:	f1bb 0f00 	cmp.w	fp, #0
   2d30a:	d005      	beq.n	2d318 <_dtoa_r+0x720>
   2d30c:	45b3      	cmp	fp, r6
   2d30e:	d003      	beq.n	2d318 <_dtoa_r+0x720>
   2d310:	4659      	mov	r1, fp
   2d312:	4620      	mov	r0, r4
   2d314:	f000 fe8a 	bl	2e02c <_Bfree>
   2d318:	4631      	mov	r1, r6
   2d31a:	4620      	mov	r0, r4
   2d31c:	f000 fe86 	bl	2e02c <_Bfree>
   2d320:	e62e      	b.n	2cf80 <_dtoa_r+0x388>
   2d322:	2300      	movs	r3, #0
   2d324:	930b      	str	r3, [sp, #44]	; 0x2c
   2d326:	9b02      	ldr	r3, [sp, #8]
   2d328:	9a25      	ldr	r2, [sp, #148]	; 0x94
   2d32a:	4413      	add	r3, r2
   2d32c:	930f      	str	r3, [sp, #60]	; 0x3c
   2d32e:	3301      	adds	r3, #1
   2d330:	2b01      	cmp	r3, #1
   2d332:	461f      	mov	r7, r3
   2d334:	461e      	mov	r6, r3
   2d336:	930a      	str	r3, [sp, #40]	; 0x28
   2d338:	bfb8      	it	lt
   2d33a:	2701      	movlt	r7, #1
   2d33c:	2100      	movs	r1, #0
   2d33e:	2f17      	cmp	r7, #23
   2d340:	6461      	str	r1, [r4, #68]	; 0x44
   2d342:	d90a      	bls.n	2d35a <_dtoa_r+0x762>
   2d344:	2201      	movs	r2, #1
   2d346:	2304      	movs	r3, #4
   2d348:	005b      	lsls	r3, r3, #1
   2d34a:	f103 0014 	add.w	r0, r3, #20
   2d34e:	4287      	cmp	r7, r0
   2d350:	4611      	mov	r1, r2
   2d352:	f102 0201 	add.w	r2, r2, #1
   2d356:	d2f7      	bcs.n	2d348 <_dtoa_r+0x750>
   2d358:	6461      	str	r1, [r4, #68]	; 0x44
   2d35a:	4620      	mov	r0, r4
   2d35c:	f000 fe40 	bl	2dfe0 <_Balloc>
   2d360:	2e0e      	cmp	r6, #14
   2d362:	9004      	str	r0, [sp, #16]
   2d364:	6420      	str	r0, [r4, #64]	; 0x40
   2d366:	f63f ad41 	bhi.w	2cdec <_dtoa_r+0x1f4>
   2d36a:	2d00      	cmp	r5, #0
   2d36c:	f43f ad3e 	beq.w	2cdec <_dtoa_r+0x1f4>
   2d370:	9902      	ldr	r1, [sp, #8]
   2d372:	2900      	cmp	r1, #0
   2d374:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
   2d378:	f340 8202 	ble.w	2d780 <_dtoa_r+0xb88>
   2d37c:	4bb8      	ldr	r3, [pc, #736]	; (2d660 <_dtoa_r+0xa68>)
   2d37e:	f001 020f 	and.w	r2, r1, #15
   2d382:	110d      	asrs	r5, r1, #4
   2d384:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   2d388:	06e9      	lsls	r1, r5, #27
   2d38a:	e9d3 6700 	ldrd	r6, r7, [r3]
   2d38e:	f140 81ae 	bpl.w	2d6ee <_dtoa_r+0xaf6>
   2d392:	4bb4      	ldr	r3, [pc, #720]	; (2d664 <_dtoa_r+0xa6c>)
   2d394:	4650      	mov	r0, sl
   2d396:	4659      	mov	r1, fp
   2d398:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   2d39c:	f7d3 fd00 	bl	da0 <__aeabi_ddiv>
   2d3a0:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
   2d3a4:	f005 050f 	and.w	r5, r5, #15
   2d3a8:	f04f 0a03 	mov.w	sl, #3
   2d3ac:	b18d      	cbz	r5, 2d3d2 <_dtoa_r+0x7da>
   2d3ae:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 2d664 <_dtoa_r+0xa6c>
   2d3b2:	07ea      	lsls	r2, r5, #31
   2d3b4:	d509      	bpl.n	2d3ca <_dtoa_r+0x7d2>
   2d3b6:	4630      	mov	r0, r6
   2d3b8:	4639      	mov	r1, r7
   2d3ba:	e9d8 2300 	ldrd	r2, r3, [r8]
   2d3be:	f7d3 fbc5 	bl	b4c <__aeabi_dmul>
   2d3c2:	f10a 0a01 	add.w	sl, sl, #1
   2d3c6:	4606      	mov	r6, r0
   2d3c8:	460f      	mov	r7, r1
   2d3ca:	106d      	asrs	r5, r5, #1
   2d3cc:	f108 0808 	add.w	r8, r8, #8
   2d3d0:	d1ef      	bne.n	2d3b2 <_dtoa_r+0x7ba>
   2d3d2:	463b      	mov	r3, r7
   2d3d4:	4632      	mov	r2, r6
   2d3d6:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
   2d3da:	f7d3 fce1 	bl	da0 <__aeabi_ddiv>
   2d3de:	4607      	mov	r7, r0
   2d3e0:	4688      	mov	r8, r1
   2d3e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2d3e4:	b143      	cbz	r3, 2d3f8 <_dtoa_r+0x800>
   2d3e6:	2200      	movs	r2, #0
   2d3e8:	4b9f      	ldr	r3, [pc, #636]	; (2d668 <_dtoa_r+0xa70>)
   2d3ea:	4638      	mov	r0, r7
   2d3ec:	4641      	mov	r1, r8
   2d3ee:	f7d3 fe1f 	bl	1030 <__aeabi_dcmplt>
   2d3f2:	2800      	cmp	r0, #0
   2d3f4:	f040 8286 	bne.w	2d904 <_dtoa_r+0xd0c>
   2d3f8:	4650      	mov	r0, sl
   2d3fa:	f7d3 fb41 	bl	a80 <__aeabi_i2d>
   2d3fe:	463a      	mov	r2, r7
   2d400:	4643      	mov	r3, r8
   2d402:	f7d3 fba3 	bl	b4c <__aeabi_dmul>
   2d406:	4b99      	ldr	r3, [pc, #612]	; (2d66c <_dtoa_r+0xa74>)
   2d408:	2200      	movs	r2, #0
   2d40a:	f7d3 f9ed 	bl	7e8 <__adddf3>
   2d40e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2d410:	4605      	mov	r5, r0
   2d412:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   2d416:	2b00      	cmp	r3, #0
   2d418:	f000 813e 	beq.w	2d698 <_dtoa_r+0xaa0>
   2d41c:	9b02      	ldr	r3, [sp, #8]
   2d41e:	9315      	str	r3, [sp, #84]	; 0x54
   2d420:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2d422:	9312      	str	r3, [sp, #72]	; 0x48
   2d424:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2d426:	2b00      	cmp	r3, #0
   2d428:	f000 81fa 	beq.w	2d820 <_dtoa_r+0xc28>
   2d42c:	9a12      	ldr	r2, [sp, #72]	; 0x48
   2d42e:	4b8c      	ldr	r3, [pc, #560]	; (2d660 <_dtoa_r+0xa68>)
   2d430:	498f      	ldr	r1, [pc, #572]	; (2d670 <_dtoa_r+0xa78>)
   2d432:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   2d436:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   2d43a:	2000      	movs	r0, #0
   2d43c:	f7d3 fcb0 	bl	da0 <__aeabi_ddiv>
   2d440:	462a      	mov	r2, r5
   2d442:	4633      	mov	r3, r6
   2d444:	f7d3 f9ce 	bl	7e4 <__aeabi_dsub>
   2d448:	4682      	mov	sl, r0
   2d44a:	468b      	mov	fp, r1
   2d44c:	4638      	mov	r0, r7
   2d44e:	4641      	mov	r1, r8
   2d450:	f7d3 fe2c 	bl	10ac <__aeabi_d2iz>
   2d454:	4605      	mov	r5, r0
   2d456:	f7d3 fb13 	bl	a80 <__aeabi_i2d>
   2d45a:	4602      	mov	r2, r0
   2d45c:	460b      	mov	r3, r1
   2d45e:	4638      	mov	r0, r7
   2d460:	4641      	mov	r1, r8
   2d462:	f7d3 f9bf 	bl	7e4 <__aeabi_dsub>
   2d466:	3530      	adds	r5, #48	; 0x30
   2d468:	fa5f f885 	uxtb.w	r8, r5
   2d46c:	9d04      	ldr	r5, [sp, #16]
   2d46e:	4606      	mov	r6, r0
   2d470:	460f      	mov	r7, r1
   2d472:	f885 8000 	strb.w	r8, [r5]
   2d476:	4602      	mov	r2, r0
   2d478:	460b      	mov	r3, r1
   2d47a:	4650      	mov	r0, sl
   2d47c:	4659      	mov	r1, fp
   2d47e:	3501      	adds	r5, #1
   2d480:	f7d3 fdf4 	bl	106c <__aeabi_dcmpgt>
   2d484:	2800      	cmp	r0, #0
   2d486:	d154      	bne.n	2d532 <_dtoa_r+0x93a>
   2d488:	4632      	mov	r2, r6
   2d48a:	463b      	mov	r3, r7
   2d48c:	2000      	movs	r0, #0
   2d48e:	4976      	ldr	r1, [pc, #472]	; (2d668 <_dtoa_r+0xa70>)
   2d490:	f7d3 f9a8 	bl	7e4 <__aeabi_dsub>
   2d494:	4602      	mov	r2, r0
   2d496:	460b      	mov	r3, r1
   2d498:	4650      	mov	r0, sl
   2d49a:	4659      	mov	r1, fp
   2d49c:	f7d3 fde6 	bl	106c <__aeabi_dcmpgt>
   2d4a0:	2800      	cmp	r0, #0
   2d4a2:	f040 8270 	bne.w	2d986 <_dtoa_r+0xd8e>
   2d4a6:	9a12      	ldr	r2, [sp, #72]	; 0x48
   2d4a8:	2a01      	cmp	r2, #1
   2d4aa:	f000 8111 	beq.w	2d6d0 <_dtoa_r+0xad8>
   2d4ae:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2d4b0:	9a04      	ldr	r2, [sp, #16]
   2d4b2:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
   2d4b6:	4413      	add	r3, r2
   2d4b8:	4699      	mov	r9, r3
   2d4ba:	e00d      	b.n	2d4d8 <_dtoa_r+0x8e0>
   2d4bc:	2000      	movs	r0, #0
   2d4be:	496a      	ldr	r1, [pc, #424]	; (2d668 <_dtoa_r+0xa70>)
   2d4c0:	f7d3 f990 	bl	7e4 <__aeabi_dsub>
   2d4c4:	4652      	mov	r2, sl
   2d4c6:	465b      	mov	r3, fp
   2d4c8:	f7d3 fdb2 	bl	1030 <__aeabi_dcmplt>
   2d4cc:	2800      	cmp	r0, #0
   2d4ce:	f040 8258 	bne.w	2d982 <_dtoa_r+0xd8a>
   2d4d2:	454d      	cmp	r5, r9
   2d4d4:	f000 80fa 	beq.w	2d6cc <_dtoa_r+0xad4>
   2d4d8:	4650      	mov	r0, sl
   2d4da:	4659      	mov	r1, fp
   2d4dc:	2200      	movs	r2, #0
   2d4de:	4b65      	ldr	r3, [pc, #404]	; (2d674 <_dtoa_r+0xa7c>)
   2d4e0:	f7d3 fb34 	bl	b4c <__aeabi_dmul>
   2d4e4:	2200      	movs	r2, #0
   2d4e6:	4b63      	ldr	r3, [pc, #396]	; (2d674 <_dtoa_r+0xa7c>)
   2d4e8:	4682      	mov	sl, r0
   2d4ea:	468b      	mov	fp, r1
   2d4ec:	4630      	mov	r0, r6
   2d4ee:	4639      	mov	r1, r7
   2d4f0:	f7d3 fb2c 	bl	b4c <__aeabi_dmul>
   2d4f4:	460f      	mov	r7, r1
   2d4f6:	4606      	mov	r6, r0
   2d4f8:	f7d3 fdd8 	bl	10ac <__aeabi_d2iz>
   2d4fc:	4680      	mov	r8, r0
   2d4fe:	f7d3 fabf 	bl	a80 <__aeabi_i2d>
   2d502:	4602      	mov	r2, r0
   2d504:	460b      	mov	r3, r1
   2d506:	4630      	mov	r0, r6
   2d508:	4639      	mov	r1, r7
   2d50a:	f7d3 f96b 	bl	7e4 <__aeabi_dsub>
   2d50e:	f108 0830 	add.w	r8, r8, #48	; 0x30
   2d512:	fa5f f888 	uxtb.w	r8, r8
   2d516:	4652      	mov	r2, sl
   2d518:	465b      	mov	r3, fp
   2d51a:	f805 8b01 	strb.w	r8, [r5], #1
   2d51e:	4606      	mov	r6, r0
   2d520:	460f      	mov	r7, r1
   2d522:	f7d3 fd85 	bl	1030 <__aeabi_dcmplt>
   2d526:	4632      	mov	r2, r6
   2d528:	463b      	mov	r3, r7
   2d52a:	2800      	cmp	r0, #0
   2d52c:	d0c6      	beq.n	2d4bc <_dtoa_r+0x8c4>
   2d52e:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   2d532:	9b15      	ldr	r3, [sp, #84]	; 0x54
   2d534:	9302      	str	r3, [sp, #8]
   2d536:	e523      	b.n	2cf80 <_dtoa_r+0x388>
   2d538:	2300      	movs	r3, #0
   2d53a:	930b      	str	r3, [sp, #44]	; 0x2c
   2d53c:	9b25      	ldr	r3, [sp, #148]	; 0x94
   2d53e:	2b00      	cmp	r3, #0
   2d540:	f340 80dc 	ble.w	2d6fc <_dtoa_r+0xb04>
   2d544:	461f      	mov	r7, r3
   2d546:	461e      	mov	r6, r3
   2d548:	930f      	str	r3, [sp, #60]	; 0x3c
   2d54a:	930a      	str	r3, [sp, #40]	; 0x28
   2d54c:	e6f6      	b.n	2d33c <_dtoa_r+0x744>
   2d54e:	2301      	movs	r3, #1
   2d550:	930b      	str	r3, [sp, #44]	; 0x2c
   2d552:	e7f3      	b.n	2d53c <_dtoa_r+0x944>
   2d554:	f1ba 0f00 	cmp.w	sl, #0
   2d558:	f47f ada8 	bne.w	2d0ac <_dtoa_r+0x4b4>
   2d55c:	f3cb 0313 	ubfx	r3, fp, #0, #20
   2d560:	2b00      	cmp	r3, #0
   2d562:	f47f adba 	bne.w	2d0da <_dtoa_r+0x4e2>
   2d566:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
   2d56a:	0d3f      	lsrs	r7, r7, #20
   2d56c:	053f      	lsls	r7, r7, #20
   2d56e:	2f00      	cmp	r7, #0
   2d570:	f000 820d 	beq.w	2d98e <_dtoa_r+0xd96>
   2d574:	9b08      	ldr	r3, [sp, #32]
   2d576:	3301      	adds	r3, #1
   2d578:	9308      	str	r3, [sp, #32]
   2d57a:	9b06      	ldr	r3, [sp, #24]
   2d57c:	3301      	adds	r3, #1
   2d57e:	9306      	str	r3, [sp, #24]
   2d580:	2301      	movs	r3, #1
   2d582:	930c      	str	r3, [sp, #48]	; 0x30
   2d584:	e5ab      	b.n	2d0de <_dtoa_r+0x4e6>
   2d586:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2d588:	2b00      	cmp	r3, #0
   2d58a:	f73f ac42 	bgt.w	2ce12 <_dtoa_r+0x21a>
   2d58e:	f040 8221 	bne.w	2d9d4 <_dtoa_r+0xddc>
   2d592:	2200      	movs	r2, #0
   2d594:	4b38      	ldr	r3, [pc, #224]	; (2d678 <_dtoa_r+0xa80>)
   2d596:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   2d59a:	f7d3 fad7 	bl	b4c <__aeabi_dmul>
   2d59e:	4652      	mov	r2, sl
   2d5a0:	465b      	mov	r3, fp
   2d5a2:	f7d3 fd59 	bl	1058 <__aeabi_dcmpge>
   2d5a6:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
   2d5aa:	4646      	mov	r6, r8
   2d5ac:	2800      	cmp	r0, #0
   2d5ae:	d041      	beq.n	2d634 <_dtoa_r+0xa3c>
   2d5b0:	9b25      	ldr	r3, [sp, #148]	; 0x94
   2d5b2:	9d04      	ldr	r5, [sp, #16]
   2d5b4:	43db      	mvns	r3, r3
   2d5b6:	9302      	str	r3, [sp, #8]
   2d5b8:	4641      	mov	r1, r8
   2d5ba:	4620      	mov	r0, r4
   2d5bc:	f000 fd36 	bl	2e02c <_Bfree>
   2d5c0:	2e00      	cmp	r6, #0
   2d5c2:	f43f acdd 	beq.w	2cf80 <_dtoa_r+0x388>
   2d5c6:	e6a7      	b.n	2d318 <_dtoa_r+0x720>
   2d5c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   2d5ca:	4649      	mov	r1, r9
   2d5cc:	4620      	mov	r0, r4
   2d5ce:	f000 fe63 	bl	2e298 <__pow5mult>
   2d5d2:	4681      	mov	r9, r0
   2d5d4:	e558      	b.n	2d088 <_dtoa_r+0x490>
   2d5d6:	9a14      	ldr	r2, [sp, #80]	; 0x50
   2d5d8:	2a00      	cmp	r2, #0
   2d5da:	f000 8187 	beq.w	2d8ec <_dtoa_r+0xcf4>
   2d5de:	f203 4333 	addw	r3, r3, #1075	; 0x433
   2d5e2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   2d5e4:	9d08      	ldr	r5, [sp, #32]
   2d5e6:	e4f2      	b.n	2cfce <_dtoa_r+0x3d6>
   2d5e8:	f1ba 0f00 	cmp.w	sl, #0
   2d5ec:	f47f ad75 	bne.w	2d0da <_dtoa_r+0x4e2>
   2d5f0:	e7b4      	b.n	2d55c <_dtoa_r+0x964>
   2d5f2:	f000 fd25 	bl	2e040 <__multadd>
   2d5f6:	4647      	mov	r7, r8
   2d5f8:	4606      	mov	r6, r0
   2d5fa:	4683      	mov	fp, r0
   2d5fc:	e5be      	b.n	2d17c <_dtoa_r+0x584>
   2d5fe:	4601      	mov	r1, r0
   2d600:	4620      	mov	r0, r4
   2d602:	9306      	str	r3, [sp, #24]
   2d604:	f000 fd12 	bl	2e02c <_Bfree>
   2d608:	2201      	movs	r2, #1
   2d60a:	9b06      	ldr	r3, [sp, #24]
   2d60c:	e5e0      	b.n	2d1d0 <_dtoa_r+0x5d8>
   2d60e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   2d610:	2b02      	cmp	r3, #2
   2d612:	f77f ad96 	ble.w	2d142 <_dtoa_r+0x54a>
   2d616:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2d618:	2b00      	cmp	r3, #0
   2d61a:	d1c9      	bne.n	2d5b0 <_dtoa_r+0x9b8>
   2d61c:	4641      	mov	r1, r8
   2d61e:	2205      	movs	r2, #5
   2d620:	4620      	mov	r0, r4
   2d622:	f000 fd0d 	bl	2e040 <__multadd>
   2d626:	4601      	mov	r1, r0
   2d628:	4680      	mov	r8, r0
   2d62a:	4648      	mov	r0, r9
   2d62c:	f000 fed6 	bl	2e3dc <__mcmp>
   2d630:	2800      	cmp	r0, #0
   2d632:	ddbd      	ble.n	2d5b0 <_dtoa_r+0x9b8>
   2d634:	9a02      	ldr	r2, [sp, #8]
   2d636:	9904      	ldr	r1, [sp, #16]
   2d638:	2331      	movs	r3, #49	; 0x31
   2d63a:	3201      	adds	r2, #1
   2d63c:	9202      	str	r2, [sp, #8]
   2d63e:	700b      	strb	r3, [r1, #0]
   2d640:	1c4d      	adds	r5, r1, #1
   2d642:	e7b9      	b.n	2d5b8 <_dtoa_r+0x9c0>
   2d644:	9a02      	ldr	r2, [sp, #8]
   2d646:	3201      	adds	r2, #1
   2d648:	9202      	str	r2, [sp, #8]
   2d64a:	9a04      	ldr	r2, [sp, #16]
   2d64c:	2331      	movs	r3, #49	; 0x31
   2d64e:	7013      	strb	r3, [r2, #0]
   2d650:	e652      	b.n	2d2f8 <_dtoa_r+0x700>
   2d652:	2301      	movs	r3, #1
   2d654:	930b      	str	r3, [sp, #44]	; 0x2c
   2d656:	e666      	b.n	2d326 <_dtoa_r+0x72e>
   2d658:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
   2d65c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   2d65e:	e48f      	b.n	2cf80 <_dtoa_r+0x388>
   2d660:	00031458 	.word	0x00031458
   2d664:	00031430 	.word	0x00031430
   2d668:	3ff00000 	.word	0x3ff00000
   2d66c:	401c0000 	.word	0x401c0000
   2d670:	3fe00000 	.word	0x3fe00000
   2d674:	40240000 	.word	0x40240000
   2d678:	40140000 	.word	0x40140000
   2d67c:	4650      	mov	r0, sl
   2d67e:	f7d3 f9ff 	bl	a80 <__aeabi_i2d>
   2d682:	463a      	mov	r2, r7
   2d684:	4643      	mov	r3, r8
   2d686:	f7d3 fa61 	bl	b4c <__aeabi_dmul>
   2d68a:	2200      	movs	r2, #0
   2d68c:	4bc1      	ldr	r3, [pc, #772]	; (2d994 <_dtoa_r+0xd9c>)
   2d68e:	f7d3 f8ab 	bl	7e8 <__adddf3>
   2d692:	4605      	mov	r5, r0
   2d694:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   2d698:	4641      	mov	r1, r8
   2d69a:	2200      	movs	r2, #0
   2d69c:	4bbe      	ldr	r3, [pc, #760]	; (2d998 <_dtoa_r+0xda0>)
   2d69e:	4638      	mov	r0, r7
   2d6a0:	f7d3 f8a0 	bl	7e4 <__aeabi_dsub>
   2d6a4:	462a      	mov	r2, r5
   2d6a6:	4633      	mov	r3, r6
   2d6a8:	4682      	mov	sl, r0
   2d6aa:	468b      	mov	fp, r1
   2d6ac:	f7d3 fcde 	bl	106c <__aeabi_dcmpgt>
   2d6b0:	4680      	mov	r8, r0
   2d6b2:	2800      	cmp	r0, #0
   2d6b4:	f040 8110 	bne.w	2d8d8 <_dtoa_r+0xce0>
   2d6b8:	462a      	mov	r2, r5
   2d6ba:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
   2d6be:	4650      	mov	r0, sl
   2d6c0:	4659      	mov	r1, fp
   2d6c2:	f7d3 fcb5 	bl	1030 <__aeabi_dcmplt>
   2d6c6:	b118      	cbz	r0, 2d6d0 <_dtoa_r+0xad8>
   2d6c8:	4646      	mov	r6, r8
   2d6ca:	e771      	b.n	2d5b0 <_dtoa_r+0x9b8>
   2d6cc:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   2d6d0:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
   2d6d4:	f7ff bb8a 	b.w	2cdec <_dtoa_r+0x1f4>
   2d6d8:	9804      	ldr	r0, [sp, #16]
   2d6da:	f7ff babb 	b.w	2cc54 <_dtoa_r+0x5c>
   2d6de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2d6e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   2d6e2:	970c      	str	r7, [sp, #48]	; 0x30
   2d6e4:	1afb      	subs	r3, r7, r3
   2d6e6:	441a      	add	r2, r3
   2d6e8:	920d      	str	r2, [sp, #52]	; 0x34
   2d6ea:	2700      	movs	r7, #0
   2d6ec:	e469      	b.n	2cfc2 <_dtoa_r+0x3ca>
   2d6ee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   2d6f2:	f04f 0a02 	mov.w	sl, #2
   2d6f6:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
   2d6fa:	e657      	b.n	2d3ac <_dtoa_r+0x7b4>
   2d6fc:	2100      	movs	r1, #0
   2d6fe:	2301      	movs	r3, #1
   2d700:	6461      	str	r1, [r4, #68]	; 0x44
   2d702:	4620      	mov	r0, r4
   2d704:	9325      	str	r3, [sp, #148]	; 0x94
   2d706:	f000 fc6b 	bl	2dfe0 <_Balloc>
   2d70a:	9b25      	ldr	r3, [sp, #148]	; 0x94
   2d70c:	9004      	str	r0, [sp, #16]
   2d70e:	6420      	str	r0, [r4, #64]	; 0x40
   2d710:	930a      	str	r3, [sp, #40]	; 0x28
   2d712:	930f      	str	r3, [sp, #60]	; 0x3c
   2d714:	e629      	b.n	2d36a <_dtoa_r+0x772>
   2d716:	2a00      	cmp	r2, #0
   2d718:	46d0      	mov	r8, sl
   2d71a:	f8cd b018 	str.w	fp, [sp, #24]
   2d71e:	469a      	mov	sl, r3
   2d720:	dd11      	ble.n	2d746 <_dtoa_r+0xb4e>
   2d722:	4649      	mov	r1, r9
   2d724:	2201      	movs	r2, #1
   2d726:	4620      	mov	r0, r4
   2d728:	f000 fe06 	bl	2e338 <__lshift>
   2d72c:	4641      	mov	r1, r8
   2d72e:	4681      	mov	r9, r0
   2d730:	f000 fe54 	bl	2e3dc <__mcmp>
   2d734:	2800      	cmp	r0, #0
   2d736:	f340 8146 	ble.w	2d9c6 <_dtoa_r+0xdce>
   2d73a:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
   2d73e:	f000 8106 	beq.w	2d94e <_dtoa_r+0xd56>
   2d742:	f105 0a31 	add.w	sl, r5, #49	; 0x31
   2d746:	46b3      	mov	fp, r6
   2d748:	f887 a000 	strb.w	sl, [r7]
   2d74c:	1c7d      	adds	r5, r7, #1
   2d74e:	9e06      	ldr	r6, [sp, #24]
   2d750:	e5d2      	b.n	2d2f8 <_dtoa_r+0x700>
   2d752:	d104      	bne.n	2d75e <_dtoa_r+0xb66>
   2d754:	f01a 0f01 	tst.w	sl, #1
   2d758:	d001      	beq.n	2d75e <_dtoa_r+0xb66>
   2d75a:	e5bd      	b.n	2d2d8 <_dtoa_r+0x6e0>
   2d75c:	4615      	mov	r5, r2
   2d75e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   2d762:	2b30      	cmp	r3, #48	; 0x30
   2d764:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
   2d768:	d0f8      	beq.n	2d75c <_dtoa_r+0xb64>
   2d76a:	e5c5      	b.n	2d2f8 <_dtoa_r+0x700>
   2d76c:	9904      	ldr	r1, [sp, #16]
   2d76e:	2230      	movs	r2, #48	; 0x30
   2d770:	700a      	strb	r2, [r1, #0]
   2d772:	9a02      	ldr	r2, [sp, #8]
   2d774:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   2d778:	3201      	adds	r2, #1
   2d77a:	9202      	str	r2, [sp, #8]
   2d77c:	f7ff bbfc 	b.w	2cf78 <_dtoa_r+0x380>
   2d780:	f000 80bb 	beq.w	2d8fa <_dtoa_r+0xd02>
   2d784:	9b02      	ldr	r3, [sp, #8]
   2d786:	425d      	negs	r5, r3
   2d788:	4b84      	ldr	r3, [pc, #528]	; (2d99c <_dtoa_r+0xda4>)
   2d78a:	f005 020f 	and.w	r2, r5, #15
   2d78e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   2d792:	e9d3 2300 	ldrd	r2, r3, [r3]
   2d796:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   2d79a:	f7d3 f9d7 	bl	b4c <__aeabi_dmul>
   2d79e:	112d      	asrs	r5, r5, #4
   2d7a0:	4607      	mov	r7, r0
   2d7a2:	4688      	mov	r8, r1
   2d7a4:	f000 812c 	beq.w	2da00 <_dtoa_r+0xe08>
   2d7a8:	4e7d      	ldr	r6, [pc, #500]	; (2d9a0 <_dtoa_r+0xda8>)
   2d7aa:	f04f 0a02 	mov.w	sl, #2
   2d7ae:	07eb      	lsls	r3, r5, #31
   2d7b0:	d509      	bpl.n	2d7c6 <_dtoa_r+0xbce>
   2d7b2:	4638      	mov	r0, r7
   2d7b4:	4641      	mov	r1, r8
   2d7b6:	e9d6 2300 	ldrd	r2, r3, [r6]
   2d7ba:	f7d3 f9c7 	bl	b4c <__aeabi_dmul>
   2d7be:	f10a 0a01 	add.w	sl, sl, #1
   2d7c2:	4607      	mov	r7, r0
   2d7c4:	4688      	mov	r8, r1
   2d7c6:	106d      	asrs	r5, r5, #1
   2d7c8:	f106 0608 	add.w	r6, r6, #8
   2d7cc:	d1ef      	bne.n	2d7ae <_dtoa_r+0xbb6>
   2d7ce:	e608      	b.n	2d3e2 <_dtoa_r+0x7ea>
   2d7d0:	6871      	ldr	r1, [r6, #4]
   2d7d2:	4620      	mov	r0, r4
   2d7d4:	f000 fc04 	bl	2dfe0 <_Balloc>
   2d7d8:	6933      	ldr	r3, [r6, #16]
   2d7da:	3302      	adds	r3, #2
   2d7dc:	009a      	lsls	r2, r3, #2
   2d7de:	4605      	mov	r5, r0
   2d7e0:	f106 010c 	add.w	r1, r6, #12
   2d7e4:	300c      	adds	r0, #12
   2d7e6:	f7d2 fd6b 	bl	2c0 <memcpy>
   2d7ea:	4629      	mov	r1, r5
   2d7ec:	2201      	movs	r2, #1
   2d7ee:	4620      	mov	r0, r4
   2d7f0:	f000 fda2 	bl	2e338 <__lshift>
   2d7f4:	9006      	str	r0, [sp, #24]
   2d7f6:	e4b5      	b.n	2d164 <_dtoa_r+0x56c>
   2d7f8:	2b39      	cmp	r3, #57	; 0x39
   2d7fa:	f8cd b018 	str.w	fp, [sp, #24]
   2d7fe:	46d0      	mov	r8, sl
   2d800:	f000 80a5 	beq.w	2d94e <_dtoa_r+0xd56>
   2d804:	f103 0a01 	add.w	sl, r3, #1
   2d808:	46b3      	mov	fp, r6
   2d80a:	f887 a000 	strb.w	sl, [r7]
   2d80e:	1c7d      	adds	r5, r7, #1
   2d810:	9e06      	ldr	r6, [sp, #24]
   2d812:	e571      	b.n	2d2f8 <_dtoa_r+0x700>
   2d814:	465a      	mov	r2, fp
   2d816:	46d0      	mov	r8, sl
   2d818:	46b3      	mov	fp, r6
   2d81a:	469a      	mov	sl, r3
   2d81c:	4616      	mov	r6, r2
   2d81e:	e54f      	b.n	2d2c0 <_dtoa_r+0x6c8>
   2d820:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2d822:	495e      	ldr	r1, [pc, #376]	; (2d99c <_dtoa_r+0xda4>)
   2d824:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   2d828:	462a      	mov	r2, r5
   2d82a:	4633      	mov	r3, r6
   2d82c:	e951 0102 	ldrd	r0, r1, [r1, #-8]
   2d830:	f7d3 f98c 	bl	b4c <__aeabi_dmul>
   2d834:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
   2d838:	4638      	mov	r0, r7
   2d83a:	4641      	mov	r1, r8
   2d83c:	f7d3 fc36 	bl	10ac <__aeabi_d2iz>
   2d840:	4605      	mov	r5, r0
   2d842:	f7d3 f91d 	bl	a80 <__aeabi_i2d>
   2d846:	460b      	mov	r3, r1
   2d848:	4602      	mov	r2, r0
   2d84a:	4641      	mov	r1, r8
   2d84c:	4638      	mov	r0, r7
   2d84e:	f7d2 ffc9 	bl	7e4 <__aeabi_dsub>
   2d852:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2d854:	460f      	mov	r7, r1
   2d856:	9904      	ldr	r1, [sp, #16]
   2d858:	3530      	adds	r5, #48	; 0x30
   2d85a:	2b01      	cmp	r3, #1
   2d85c:	700d      	strb	r5, [r1, #0]
   2d85e:	4606      	mov	r6, r0
   2d860:	f101 0501 	add.w	r5, r1, #1
   2d864:	d026      	beq.n	2d8b4 <_dtoa_r+0xcbc>
   2d866:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2d868:	9a04      	ldr	r2, [sp, #16]
   2d86a:	f8df b13c 	ldr.w	fp, [pc, #316]	; 2d9a8 <_dtoa_r+0xdb0>
   2d86e:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
   2d872:	4413      	add	r3, r2
   2d874:	f04f 0a00 	mov.w	sl, #0
   2d878:	4699      	mov	r9, r3
   2d87a:	4652      	mov	r2, sl
   2d87c:	465b      	mov	r3, fp
   2d87e:	4630      	mov	r0, r6
   2d880:	4639      	mov	r1, r7
   2d882:	f7d3 f963 	bl	b4c <__aeabi_dmul>
   2d886:	460f      	mov	r7, r1
   2d888:	4606      	mov	r6, r0
   2d88a:	f7d3 fc0f 	bl	10ac <__aeabi_d2iz>
   2d88e:	4680      	mov	r8, r0
   2d890:	f7d3 f8f6 	bl	a80 <__aeabi_i2d>
   2d894:	f108 0830 	add.w	r8, r8, #48	; 0x30
   2d898:	4602      	mov	r2, r0
   2d89a:	460b      	mov	r3, r1
   2d89c:	4630      	mov	r0, r6
   2d89e:	4639      	mov	r1, r7
   2d8a0:	f7d2 ffa0 	bl	7e4 <__aeabi_dsub>
   2d8a4:	f805 8b01 	strb.w	r8, [r5], #1
   2d8a8:	454d      	cmp	r5, r9
   2d8aa:	4606      	mov	r6, r0
   2d8ac:	460f      	mov	r7, r1
   2d8ae:	d1e4      	bne.n	2d87a <_dtoa_r+0xc82>
   2d8b0:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   2d8b4:	4b3b      	ldr	r3, [pc, #236]	; (2d9a4 <_dtoa_r+0xdac>)
   2d8b6:	2200      	movs	r2, #0
   2d8b8:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
   2d8bc:	f7d2 ff94 	bl	7e8 <__adddf3>
   2d8c0:	4632      	mov	r2, r6
   2d8c2:	463b      	mov	r3, r7
   2d8c4:	f7d3 fbb4 	bl	1030 <__aeabi_dcmplt>
   2d8c8:	2800      	cmp	r0, #0
   2d8ca:	d046      	beq.n	2d95a <_dtoa_r+0xd62>
   2d8cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
   2d8ce:	9302      	str	r3, [sp, #8]
   2d8d0:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   2d8d4:	f7ff bb43 	b.w	2cf5e <_dtoa_r+0x366>
   2d8d8:	f04f 0800 	mov.w	r8, #0
   2d8dc:	4646      	mov	r6, r8
   2d8de:	e6a9      	b.n	2d634 <_dtoa_r+0xa3c>
   2d8e0:	9b08      	ldr	r3, [sp, #32]
   2d8e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   2d8e4:	1a9d      	subs	r5, r3, r2
   2d8e6:	2300      	movs	r3, #0
   2d8e8:	f7ff bb71 	b.w	2cfce <_dtoa_r+0x3d6>
   2d8ec:	9b18      	ldr	r3, [sp, #96]	; 0x60
   2d8ee:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   2d8f0:	9d08      	ldr	r5, [sp, #32]
   2d8f2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   2d8f6:	f7ff bb6a 	b.w	2cfce <_dtoa_r+0x3d6>
   2d8fa:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
   2d8fe:	f04f 0a02 	mov.w	sl, #2
   2d902:	e56e      	b.n	2d3e2 <_dtoa_r+0x7ea>
   2d904:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2d906:	2b00      	cmp	r3, #0
   2d908:	f43f aeb8 	beq.w	2d67c <_dtoa_r+0xa84>
   2d90c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2d90e:	2b00      	cmp	r3, #0
   2d910:	f77f aede 	ble.w	2d6d0 <_dtoa_r+0xad8>
   2d914:	2200      	movs	r2, #0
   2d916:	4b24      	ldr	r3, [pc, #144]	; (2d9a8 <_dtoa_r+0xdb0>)
   2d918:	4638      	mov	r0, r7
   2d91a:	4641      	mov	r1, r8
   2d91c:	f7d3 f916 	bl	b4c <__aeabi_dmul>
   2d920:	4607      	mov	r7, r0
   2d922:	4688      	mov	r8, r1
   2d924:	f10a 0001 	add.w	r0, sl, #1
   2d928:	f7d3 f8aa 	bl	a80 <__aeabi_i2d>
   2d92c:	463a      	mov	r2, r7
   2d92e:	4643      	mov	r3, r8
   2d930:	f7d3 f90c 	bl	b4c <__aeabi_dmul>
   2d934:	2200      	movs	r2, #0
   2d936:	4b17      	ldr	r3, [pc, #92]	; (2d994 <_dtoa_r+0xd9c>)
   2d938:	f7d2 ff56 	bl	7e8 <__adddf3>
   2d93c:	9a02      	ldr	r2, [sp, #8]
   2d93e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2d940:	9312      	str	r3, [sp, #72]	; 0x48
   2d942:	3a01      	subs	r2, #1
   2d944:	4605      	mov	r5, r0
   2d946:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   2d94a:	9215      	str	r2, [sp, #84]	; 0x54
   2d94c:	e56a      	b.n	2d424 <_dtoa_r+0x82c>
   2d94e:	2239      	movs	r2, #57	; 0x39
   2d950:	46b3      	mov	fp, r6
   2d952:	703a      	strb	r2, [r7, #0]
   2d954:	9e06      	ldr	r6, [sp, #24]
   2d956:	1c7d      	adds	r5, r7, #1
   2d958:	e4c0      	b.n	2d2dc <_dtoa_r+0x6e4>
   2d95a:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
   2d95e:	2000      	movs	r0, #0
   2d960:	4910      	ldr	r1, [pc, #64]	; (2d9a4 <_dtoa_r+0xdac>)
   2d962:	f7d2 ff3f 	bl	7e4 <__aeabi_dsub>
   2d966:	4632      	mov	r2, r6
   2d968:	463b      	mov	r3, r7
   2d96a:	f7d3 fb7f 	bl	106c <__aeabi_dcmpgt>
   2d96e:	b908      	cbnz	r0, 2d974 <_dtoa_r+0xd7c>
   2d970:	e6ae      	b.n	2d6d0 <_dtoa_r+0xad8>
   2d972:	4615      	mov	r5, r2
   2d974:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   2d978:	2b30      	cmp	r3, #48	; 0x30
   2d97a:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
   2d97e:	d0f8      	beq.n	2d972 <_dtoa_r+0xd7a>
   2d980:	e5d7      	b.n	2d532 <_dtoa_r+0x93a>
   2d982:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   2d986:	9b15      	ldr	r3, [sp, #84]	; 0x54
   2d988:	9302      	str	r3, [sp, #8]
   2d98a:	f7ff bae8 	b.w	2cf5e <_dtoa_r+0x366>
   2d98e:	970c      	str	r7, [sp, #48]	; 0x30
   2d990:	f7ff bba5 	b.w	2d0de <_dtoa_r+0x4e6>
   2d994:	401c0000 	.word	0x401c0000
   2d998:	40140000 	.word	0x40140000
   2d99c:	00031458 	.word	0x00031458
   2d9a0:	00031430 	.word	0x00031430
   2d9a4:	3fe00000 	.word	0x3fe00000
   2d9a8:	40240000 	.word	0x40240000
   2d9ac:	2b39      	cmp	r3, #57	; 0x39
   2d9ae:	f8cd b018 	str.w	fp, [sp, #24]
   2d9b2:	46d0      	mov	r8, sl
   2d9b4:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   2d9b8:	469a      	mov	sl, r3
   2d9ba:	d0c8      	beq.n	2d94e <_dtoa_r+0xd56>
   2d9bc:	f1bb 0f00 	cmp.w	fp, #0
   2d9c0:	f73f aebf 	bgt.w	2d742 <_dtoa_r+0xb4a>
   2d9c4:	e6bf      	b.n	2d746 <_dtoa_r+0xb4e>
   2d9c6:	f47f aebe 	bne.w	2d746 <_dtoa_r+0xb4e>
   2d9ca:	f01a 0f01 	tst.w	sl, #1
   2d9ce:	f43f aeba 	beq.w	2d746 <_dtoa_r+0xb4e>
   2d9d2:	e6b2      	b.n	2d73a <_dtoa_r+0xb42>
   2d9d4:	f04f 0800 	mov.w	r8, #0
   2d9d8:	4646      	mov	r6, r8
   2d9da:	e5e9      	b.n	2d5b0 <_dtoa_r+0x9b8>
   2d9dc:	4631      	mov	r1, r6
   2d9de:	2300      	movs	r3, #0
   2d9e0:	220a      	movs	r2, #10
   2d9e2:	4620      	mov	r0, r4
   2d9e4:	f000 fb2c 	bl	2e040 <__multadd>
   2d9e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2d9ea:	2b00      	cmp	r3, #0
   2d9ec:	4606      	mov	r6, r0
   2d9ee:	dd0a      	ble.n	2da06 <_dtoa_r+0xe0e>
   2d9f0:	930a      	str	r3, [sp, #40]	; 0x28
   2d9f2:	f7ff bbaa 	b.w	2d14a <_dtoa_r+0x552>
   2d9f6:	9b24      	ldr	r3, [sp, #144]	; 0x90
   2d9f8:	2b02      	cmp	r3, #2
   2d9fa:	dc23      	bgt.n	2da44 <_dtoa_r+0xe4c>
   2d9fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2d9fe:	e43b      	b.n	2d278 <_dtoa_r+0x680>
   2da00:	f04f 0a02 	mov.w	sl, #2
   2da04:	e4ed      	b.n	2d3e2 <_dtoa_r+0x7ea>
   2da06:	9b24      	ldr	r3, [sp, #144]	; 0x90
   2da08:	2b02      	cmp	r3, #2
   2da0a:	dc1b      	bgt.n	2da44 <_dtoa_r+0xe4c>
   2da0c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2da0e:	e7ef      	b.n	2d9f0 <_dtoa_r+0xdf8>
   2da10:	2500      	movs	r5, #0
   2da12:	6465      	str	r5, [r4, #68]	; 0x44
   2da14:	4629      	mov	r1, r5
   2da16:	4620      	mov	r0, r4
   2da18:	f000 fae2 	bl	2dfe0 <_Balloc>
   2da1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2da20:	930a      	str	r3, [sp, #40]	; 0x28
   2da22:	930f      	str	r3, [sp, #60]	; 0x3c
   2da24:	2301      	movs	r3, #1
   2da26:	9004      	str	r0, [sp, #16]
   2da28:	9525      	str	r5, [sp, #148]	; 0x94
   2da2a:	6420      	str	r0, [r4, #64]	; 0x40
   2da2c:	930b      	str	r3, [sp, #44]	; 0x2c
   2da2e:	f7ff b9dd 	b.w	2cdec <_dtoa_r+0x1f4>
   2da32:	2501      	movs	r5, #1
   2da34:	f7ff b9a5 	b.w	2cd82 <_dtoa_r+0x18a>
   2da38:	f43f ab69 	beq.w	2d10e <_dtoa_r+0x516>
   2da3c:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   2da40:	f7ff bbf9 	b.w	2d236 <_dtoa_r+0x63e>
   2da44:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2da46:	930a      	str	r3, [sp, #40]	; 0x28
   2da48:	e5e5      	b.n	2d616 <_dtoa_r+0xa1e>
   2da4a:	bf00      	nop

0002da4c <_localeconv_r>:
   2da4c:	4a04      	ldr	r2, [pc, #16]	; (2da60 <_localeconv_r+0x14>)
   2da4e:	4b05      	ldr	r3, [pc, #20]	; (2da64 <_localeconv_r+0x18>)
   2da50:	6812      	ldr	r2, [r2, #0]
   2da52:	6b50      	ldr	r0, [r2, #52]	; 0x34
   2da54:	2800      	cmp	r0, #0
   2da56:	bf08      	it	eq
   2da58:	4618      	moveq	r0, r3
   2da5a:	30f0      	adds	r0, #240	; 0xf0
   2da5c:	4770      	bx	lr
   2da5e:	bf00      	nop
   2da60:	2000c67c 	.word	0x2000c67c
   2da64:	2000c510 	.word	0x2000c510

0002da68 <_malloc_r>:
   2da68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2da6c:	f101 060b 	add.w	r6, r1, #11
   2da70:	2e16      	cmp	r6, #22
   2da72:	b083      	sub	sp, #12
   2da74:	4605      	mov	r5, r0
   2da76:	f240 809e 	bls.w	2dbb6 <_malloc_r+0x14e>
   2da7a:	f036 0607 	bics.w	r6, r6, #7
   2da7e:	f100 80bd 	bmi.w	2dbfc <_malloc_r+0x194>
   2da82:	42b1      	cmp	r1, r6
   2da84:	f200 80ba 	bhi.w	2dbfc <_malloc_r+0x194>
   2da88:	f000 fa9e 	bl	2dfc8 <__malloc_lock>
   2da8c:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   2da90:	f0c0 8293 	bcc.w	2dfba <_malloc_r+0x552>
   2da94:	0a73      	lsrs	r3, r6, #9
   2da96:	f000 80b8 	beq.w	2dc0a <_malloc_r+0x1a2>
   2da9a:	2b04      	cmp	r3, #4
   2da9c:	f200 8179 	bhi.w	2dd92 <_malloc_r+0x32a>
   2daa0:	09b3      	lsrs	r3, r6, #6
   2daa2:	f103 0039 	add.w	r0, r3, #57	; 0x39
   2daa6:	f103 0e38 	add.w	lr, r3, #56	; 0x38
   2daaa:	00c3      	lsls	r3, r0, #3
   2daac:	4fbf      	ldr	r7, [pc, #764]	; (2ddac <_malloc_r+0x344>)
   2daae:	443b      	add	r3, r7
   2dab0:	f1a3 0108 	sub.w	r1, r3, #8
   2dab4:	685c      	ldr	r4, [r3, #4]
   2dab6:	42a1      	cmp	r1, r4
   2dab8:	d106      	bne.n	2dac8 <_malloc_r+0x60>
   2daba:	e00c      	b.n	2dad6 <_malloc_r+0x6e>
   2dabc:	2a00      	cmp	r2, #0
   2dabe:	f280 80aa 	bge.w	2dc16 <_malloc_r+0x1ae>
   2dac2:	68e4      	ldr	r4, [r4, #12]
   2dac4:	42a1      	cmp	r1, r4
   2dac6:	d006      	beq.n	2dad6 <_malloc_r+0x6e>
   2dac8:	6863      	ldr	r3, [r4, #4]
   2daca:	f023 0303 	bic.w	r3, r3, #3
   2dace:	1b9a      	subs	r2, r3, r6
   2dad0:	2a0f      	cmp	r2, #15
   2dad2:	ddf3      	ble.n	2dabc <_malloc_r+0x54>
   2dad4:	4670      	mov	r0, lr
   2dad6:	693c      	ldr	r4, [r7, #16]
   2dad8:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 2ddc0 <_malloc_r+0x358>
   2dadc:	4574      	cmp	r4, lr
   2dade:	f000 81ab 	beq.w	2de38 <_malloc_r+0x3d0>
   2dae2:	6863      	ldr	r3, [r4, #4]
   2dae4:	f023 0303 	bic.w	r3, r3, #3
   2dae8:	1b9a      	subs	r2, r3, r6
   2daea:	2a0f      	cmp	r2, #15
   2daec:	f300 8190 	bgt.w	2de10 <_malloc_r+0x3a8>
   2daf0:	2a00      	cmp	r2, #0
   2daf2:	f8c7 e014 	str.w	lr, [r7, #20]
   2daf6:	f8c7 e010 	str.w	lr, [r7, #16]
   2dafa:	f280 809d 	bge.w	2dc38 <_malloc_r+0x1d0>
   2dafe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   2db02:	f080 8161 	bcs.w	2ddc8 <_malloc_r+0x360>
   2db06:	08db      	lsrs	r3, r3, #3
   2db08:	f103 0c01 	add.w	ip, r3, #1
   2db0c:	1099      	asrs	r1, r3, #2
   2db0e:	687a      	ldr	r2, [r7, #4]
   2db10:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
   2db14:	f8c4 8008 	str.w	r8, [r4, #8]
   2db18:	2301      	movs	r3, #1
   2db1a:	408b      	lsls	r3, r1
   2db1c:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
   2db20:	4313      	orrs	r3, r2
   2db22:	3908      	subs	r1, #8
   2db24:	60e1      	str	r1, [r4, #12]
   2db26:	607b      	str	r3, [r7, #4]
   2db28:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
   2db2c:	f8c8 400c 	str.w	r4, [r8, #12]
   2db30:	1082      	asrs	r2, r0, #2
   2db32:	2401      	movs	r4, #1
   2db34:	4094      	lsls	r4, r2
   2db36:	429c      	cmp	r4, r3
   2db38:	f200 808b 	bhi.w	2dc52 <_malloc_r+0x1ea>
   2db3c:	421c      	tst	r4, r3
   2db3e:	d106      	bne.n	2db4e <_malloc_r+0xe6>
   2db40:	f020 0003 	bic.w	r0, r0, #3
   2db44:	0064      	lsls	r4, r4, #1
   2db46:	421c      	tst	r4, r3
   2db48:	f100 0004 	add.w	r0, r0, #4
   2db4c:	d0fa      	beq.n	2db44 <_malloc_r+0xdc>
   2db4e:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   2db52:	46cc      	mov	ip, r9
   2db54:	4680      	mov	r8, r0
   2db56:	f8dc 300c 	ldr.w	r3, [ip, #12]
   2db5a:	459c      	cmp	ip, r3
   2db5c:	d107      	bne.n	2db6e <_malloc_r+0x106>
   2db5e:	e16d      	b.n	2de3c <_malloc_r+0x3d4>
   2db60:	2a00      	cmp	r2, #0
   2db62:	f280 817b 	bge.w	2de5c <_malloc_r+0x3f4>
   2db66:	68db      	ldr	r3, [r3, #12]
   2db68:	459c      	cmp	ip, r3
   2db6a:	f000 8167 	beq.w	2de3c <_malloc_r+0x3d4>
   2db6e:	6859      	ldr	r1, [r3, #4]
   2db70:	f021 0103 	bic.w	r1, r1, #3
   2db74:	1b8a      	subs	r2, r1, r6
   2db76:	2a0f      	cmp	r2, #15
   2db78:	ddf2      	ble.n	2db60 <_malloc_r+0xf8>
   2db7a:	f8d3 c00c 	ldr.w	ip, [r3, #12]
   2db7e:	f8d3 8008 	ldr.w	r8, [r3, #8]
   2db82:	9300      	str	r3, [sp, #0]
   2db84:	199c      	adds	r4, r3, r6
   2db86:	4628      	mov	r0, r5
   2db88:	f046 0601 	orr.w	r6, r6, #1
   2db8c:	f042 0501 	orr.w	r5, r2, #1
   2db90:	605e      	str	r6, [r3, #4]
   2db92:	f8c8 c00c 	str.w	ip, [r8, #12]
   2db96:	f8cc 8008 	str.w	r8, [ip, #8]
   2db9a:	617c      	str	r4, [r7, #20]
   2db9c:	613c      	str	r4, [r7, #16]
   2db9e:	f8c4 e00c 	str.w	lr, [r4, #12]
   2dba2:	f8c4 e008 	str.w	lr, [r4, #8]
   2dba6:	6065      	str	r5, [r4, #4]
   2dba8:	505a      	str	r2, [r3, r1]
   2dbaa:	f000 fa13 	bl	2dfd4 <__malloc_unlock>
   2dbae:	9b00      	ldr	r3, [sp, #0]
   2dbb0:	f103 0408 	add.w	r4, r3, #8
   2dbb4:	e01e      	b.n	2dbf4 <_malloc_r+0x18c>
   2dbb6:	2910      	cmp	r1, #16
   2dbb8:	d820      	bhi.n	2dbfc <_malloc_r+0x194>
   2dbba:	f000 fa05 	bl	2dfc8 <__malloc_lock>
   2dbbe:	2610      	movs	r6, #16
   2dbc0:	2318      	movs	r3, #24
   2dbc2:	2002      	movs	r0, #2
   2dbc4:	4f79      	ldr	r7, [pc, #484]	; (2ddac <_malloc_r+0x344>)
   2dbc6:	443b      	add	r3, r7
   2dbc8:	f1a3 0208 	sub.w	r2, r3, #8
   2dbcc:	685c      	ldr	r4, [r3, #4]
   2dbce:	4294      	cmp	r4, r2
   2dbd0:	f000 813d 	beq.w	2de4e <_malloc_r+0x3e6>
   2dbd4:	6863      	ldr	r3, [r4, #4]
   2dbd6:	68e1      	ldr	r1, [r4, #12]
   2dbd8:	68a6      	ldr	r6, [r4, #8]
   2dbda:	f023 0303 	bic.w	r3, r3, #3
   2dbde:	4423      	add	r3, r4
   2dbe0:	4628      	mov	r0, r5
   2dbe2:	685a      	ldr	r2, [r3, #4]
   2dbe4:	60f1      	str	r1, [r6, #12]
   2dbe6:	f042 0201 	orr.w	r2, r2, #1
   2dbea:	608e      	str	r6, [r1, #8]
   2dbec:	605a      	str	r2, [r3, #4]
   2dbee:	f000 f9f1 	bl	2dfd4 <__malloc_unlock>
   2dbf2:	3408      	adds	r4, #8
   2dbf4:	4620      	mov	r0, r4
   2dbf6:	b003      	add	sp, #12
   2dbf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2dbfc:	2400      	movs	r4, #0
   2dbfe:	230c      	movs	r3, #12
   2dc00:	4620      	mov	r0, r4
   2dc02:	602b      	str	r3, [r5, #0]
   2dc04:	b003      	add	sp, #12
   2dc06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2dc0a:	2040      	movs	r0, #64	; 0x40
   2dc0c:	f44f 7300 	mov.w	r3, #512	; 0x200
   2dc10:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
   2dc14:	e74a      	b.n	2daac <_malloc_r+0x44>
   2dc16:	4423      	add	r3, r4
   2dc18:	68e1      	ldr	r1, [r4, #12]
   2dc1a:	685a      	ldr	r2, [r3, #4]
   2dc1c:	68a6      	ldr	r6, [r4, #8]
   2dc1e:	f042 0201 	orr.w	r2, r2, #1
   2dc22:	60f1      	str	r1, [r6, #12]
   2dc24:	4628      	mov	r0, r5
   2dc26:	608e      	str	r6, [r1, #8]
   2dc28:	605a      	str	r2, [r3, #4]
   2dc2a:	f000 f9d3 	bl	2dfd4 <__malloc_unlock>
   2dc2e:	3408      	adds	r4, #8
   2dc30:	4620      	mov	r0, r4
   2dc32:	b003      	add	sp, #12
   2dc34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2dc38:	4423      	add	r3, r4
   2dc3a:	4628      	mov	r0, r5
   2dc3c:	685a      	ldr	r2, [r3, #4]
   2dc3e:	f042 0201 	orr.w	r2, r2, #1
   2dc42:	605a      	str	r2, [r3, #4]
   2dc44:	f000 f9c6 	bl	2dfd4 <__malloc_unlock>
   2dc48:	3408      	adds	r4, #8
   2dc4a:	4620      	mov	r0, r4
   2dc4c:	b003      	add	sp, #12
   2dc4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2dc52:	68bc      	ldr	r4, [r7, #8]
   2dc54:	6863      	ldr	r3, [r4, #4]
   2dc56:	f023 0803 	bic.w	r8, r3, #3
   2dc5a:	45b0      	cmp	r8, r6
   2dc5c:	d304      	bcc.n	2dc68 <_malloc_r+0x200>
   2dc5e:	eba8 0306 	sub.w	r3, r8, r6
   2dc62:	2b0f      	cmp	r3, #15
   2dc64:	f300 8085 	bgt.w	2dd72 <_malloc_r+0x30a>
   2dc68:	f8df 9158 	ldr.w	r9, [pc, #344]	; 2ddc4 <_malloc_r+0x35c>
   2dc6c:	4b50      	ldr	r3, [pc, #320]	; (2ddb0 <_malloc_r+0x348>)
   2dc6e:	f8d9 2000 	ldr.w	r2, [r9]
   2dc72:	681b      	ldr	r3, [r3, #0]
   2dc74:	3201      	adds	r2, #1
   2dc76:	4433      	add	r3, r6
   2dc78:	eb04 0a08 	add.w	sl, r4, r8
   2dc7c:	f000 8155 	beq.w	2df2a <_malloc_r+0x4c2>
   2dc80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   2dc84:	330f      	adds	r3, #15
   2dc86:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   2dc8a:	f02b 0b0f 	bic.w	fp, fp, #15
   2dc8e:	4659      	mov	r1, fp
   2dc90:	4628      	mov	r0, r5
   2dc92:	f000 fc9f 	bl	2e5d4 <_sbrk_r>
   2dc96:	1c41      	adds	r1, r0, #1
   2dc98:	4602      	mov	r2, r0
   2dc9a:	f000 80fc 	beq.w	2de96 <_malloc_r+0x42e>
   2dc9e:	4582      	cmp	sl, r0
   2dca0:	f200 80f7 	bhi.w	2de92 <_malloc_r+0x42a>
   2dca4:	4b43      	ldr	r3, [pc, #268]	; (2ddb4 <_malloc_r+0x34c>)
   2dca6:	6819      	ldr	r1, [r3, #0]
   2dca8:	4459      	add	r1, fp
   2dcaa:	6019      	str	r1, [r3, #0]
   2dcac:	f000 814d 	beq.w	2df4a <_malloc_r+0x4e2>
   2dcb0:	f8d9 0000 	ldr.w	r0, [r9]
   2dcb4:	3001      	adds	r0, #1
   2dcb6:	bf1b      	ittet	ne
   2dcb8:	eba2 0a0a 	subne.w	sl, r2, sl
   2dcbc:	4451      	addne	r1, sl
   2dcbe:	f8c9 2000 	streq.w	r2, [r9]
   2dcc2:	6019      	strne	r1, [r3, #0]
   2dcc4:	f012 0107 	ands.w	r1, r2, #7
   2dcc8:	f000 8115 	beq.w	2def6 <_malloc_r+0x48e>
   2dccc:	f1c1 0008 	rsb	r0, r1, #8
   2dcd0:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   2dcd4:	4402      	add	r2, r0
   2dcd6:	3108      	adds	r1, #8
   2dcd8:	eb02 090b 	add.w	r9, r2, fp
   2dcdc:	f3c9 090b 	ubfx	r9, r9, #0, #12
   2dce0:	eba1 0909 	sub.w	r9, r1, r9
   2dce4:	4649      	mov	r1, r9
   2dce6:	4628      	mov	r0, r5
   2dce8:	9301      	str	r3, [sp, #4]
   2dcea:	9200      	str	r2, [sp, #0]
   2dcec:	f000 fc72 	bl	2e5d4 <_sbrk_r>
   2dcf0:	1c43      	adds	r3, r0, #1
   2dcf2:	e89d 000c 	ldmia.w	sp, {r2, r3}
   2dcf6:	f000 8143 	beq.w	2df80 <_malloc_r+0x518>
   2dcfa:	1a80      	subs	r0, r0, r2
   2dcfc:	4448      	add	r0, r9
   2dcfe:	f040 0001 	orr.w	r0, r0, #1
   2dd02:	6819      	ldr	r1, [r3, #0]
   2dd04:	60ba      	str	r2, [r7, #8]
   2dd06:	4449      	add	r1, r9
   2dd08:	42bc      	cmp	r4, r7
   2dd0a:	6050      	str	r0, [r2, #4]
   2dd0c:	6019      	str	r1, [r3, #0]
   2dd0e:	d017      	beq.n	2dd40 <_malloc_r+0x2d8>
   2dd10:	f1b8 0f0f 	cmp.w	r8, #15
   2dd14:	f240 80fb 	bls.w	2df0e <_malloc_r+0x4a6>
   2dd18:	6860      	ldr	r0, [r4, #4]
   2dd1a:	f1a8 020c 	sub.w	r2, r8, #12
   2dd1e:	f022 0207 	bic.w	r2, r2, #7
   2dd22:	eb04 0e02 	add.w	lr, r4, r2
   2dd26:	f000 0001 	and.w	r0, r0, #1
   2dd2a:	f04f 0c05 	mov.w	ip, #5
   2dd2e:	4310      	orrs	r0, r2
   2dd30:	2a0f      	cmp	r2, #15
   2dd32:	6060      	str	r0, [r4, #4]
   2dd34:	f8ce c004 	str.w	ip, [lr, #4]
   2dd38:	f8ce c008 	str.w	ip, [lr, #8]
   2dd3c:	f200 8117 	bhi.w	2df6e <_malloc_r+0x506>
   2dd40:	4b1d      	ldr	r3, [pc, #116]	; (2ddb8 <_malloc_r+0x350>)
   2dd42:	68bc      	ldr	r4, [r7, #8]
   2dd44:	681a      	ldr	r2, [r3, #0]
   2dd46:	4291      	cmp	r1, r2
   2dd48:	bf88      	it	hi
   2dd4a:	6019      	strhi	r1, [r3, #0]
   2dd4c:	4b1b      	ldr	r3, [pc, #108]	; (2ddbc <_malloc_r+0x354>)
   2dd4e:	681a      	ldr	r2, [r3, #0]
   2dd50:	4291      	cmp	r1, r2
   2dd52:	6862      	ldr	r2, [r4, #4]
   2dd54:	bf88      	it	hi
   2dd56:	6019      	strhi	r1, [r3, #0]
   2dd58:	f022 0203 	bic.w	r2, r2, #3
   2dd5c:	4296      	cmp	r6, r2
   2dd5e:	eba2 0306 	sub.w	r3, r2, r6
   2dd62:	d801      	bhi.n	2dd68 <_malloc_r+0x300>
   2dd64:	2b0f      	cmp	r3, #15
   2dd66:	dc04      	bgt.n	2dd72 <_malloc_r+0x30a>
   2dd68:	4628      	mov	r0, r5
   2dd6a:	f000 f933 	bl	2dfd4 <__malloc_unlock>
   2dd6e:	2400      	movs	r4, #0
   2dd70:	e740      	b.n	2dbf4 <_malloc_r+0x18c>
   2dd72:	19a2      	adds	r2, r4, r6
   2dd74:	f043 0301 	orr.w	r3, r3, #1
   2dd78:	f046 0601 	orr.w	r6, r6, #1
   2dd7c:	6066      	str	r6, [r4, #4]
   2dd7e:	4628      	mov	r0, r5
   2dd80:	60ba      	str	r2, [r7, #8]
   2dd82:	6053      	str	r3, [r2, #4]
   2dd84:	f000 f926 	bl	2dfd4 <__malloc_unlock>
   2dd88:	3408      	adds	r4, #8
   2dd8a:	4620      	mov	r0, r4
   2dd8c:	b003      	add	sp, #12
   2dd8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2dd92:	2b14      	cmp	r3, #20
   2dd94:	d971      	bls.n	2de7a <_malloc_r+0x412>
   2dd96:	2b54      	cmp	r3, #84	; 0x54
   2dd98:	f200 80a3 	bhi.w	2dee2 <_malloc_r+0x47a>
   2dd9c:	0b33      	lsrs	r3, r6, #12
   2dd9e:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   2dda2:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
   2dda6:	00c3      	lsls	r3, r0, #3
   2dda8:	e680      	b.n	2daac <_malloc_r+0x44>
   2ddaa:	bf00      	nop
   2ddac:	2000caa8 	.word	0x2000caa8
   2ddb0:	20002868 	.word	0x20002868
   2ddb4:	20002838 	.word	0x20002838
   2ddb8:	20002860 	.word	0x20002860
   2ddbc:	20002864 	.word	0x20002864
   2ddc0:	2000cab0 	.word	0x2000cab0
   2ddc4:	2000ceb0 	.word	0x2000ceb0
   2ddc8:	0a5a      	lsrs	r2, r3, #9
   2ddca:	2a04      	cmp	r2, #4
   2ddcc:	d95b      	bls.n	2de86 <_malloc_r+0x41e>
   2ddce:	2a14      	cmp	r2, #20
   2ddd0:	f200 80ae 	bhi.w	2df30 <_malloc_r+0x4c8>
   2ddd4:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   2ddd8:	00c9      	lsls	r1, r1, #3
   2ddda:	325b      	adds	r2, #91	; 0x5b
   2dddc:	eb07 0c01 	add.w	ip, r7, r1
   2dde0:	5879      	ldr	r1, [r7, r1]
   2dde2:	f1ac 0c08 	sub.w	ip, ip, #8
   2dde6:	458c      	cmp	ip, r1
   2dde8:	f000 8088 	beq.w	2defc <_malloc_r+0x494>
   2ddec:	684a      	ldr	r2, [r1, #4]
   2ddee:	f022 0203 	bic.w	r2, r2, #3
   2ddf2:	4293      	cmp	r3, r2
   2ddf4:	d273      	bcs.n	2dede <_malloc_r+0x476>
   2ddf6:	6889      	ldr	r1, [r1, #8]
   2ddf8:	458c      	cmp	ip, r1
   2ddfa:	d1f7      	bne.n	2ddec <_malloc_r+0x384>
   2ddfc:	f8dc 200c 	ldr.w	r2, [ip, #12]
   2de00:	687b      	ldr	r3, [r7, #4]
   2de02:	60e2      	str	r2, [r4, #12]
   2de04:	f8c4 c008 	str.w	ip, [r4, #8]
   2de08:	6094      	str	r4, [r2, #8]
   2de0a:	f8cc 400c 	str.w	r4, [ip, #12]
   2de0e:	e68f      	b.n	2db30 <_malloc_r+0xc8>
   2de10:	19a1      	adds	r1, r4, r6
   2de12:	f046 0c01 	orr.w	ip, r6, #1
   2de16:	f042 0601 	orr.w	r6, r2, #1
   2de1a:	f8c4 c004 	str.w	ip, [r4, #4]
   2de1e:	4628      	mov	r0, r5
   2de20:	6179      	str	r1, [r7, #20]
   2de22:	6139      	str	r1, [r7, #16]
   2de24:	f8c1 e00c 	str.w	lr, [r1, #12]
   2de28:	f8c1 e008 	str.w	lr, [r1, #8]
   2de2c:	604e      	str	r6, [r1, #4]
   2de2e:	50e2      	str	r2, [r4, r3]
   2de30:	f000 f8d0 	bl	2dfd4 <__malloc_unlock>
   2de34:	3408      	adds	r4, #8
   2de36:	e6dd      	b.n	2dbf4 <_malloc_r+0x18c>
   2de38:	687b      	ldr	r3, [r7, #4]
   2de3a:	e679      	b.n	2db30 <_malloc_r+0xc8>
   2de3c:	f108 0801 	add.w	r8, r8, #1
   2de40:	f018 0f03 	tst.w	r8, #3
   2de44:	f10c 0c08 	add.w	ip, ip, #8
   2de48:	f47f ae85 	bne.w	2db56 <_malloc_r+0xee>
   2de4c:	e02d      	b.n	2deaa <_malloc_r+0x442>
   2de4e:	68dc      	ldr	r4, [r3, #12]
   2de50:	42a3      	cmp	r3, r4
   2de52:	bf08      	it	eq
   2de54:	3002      	addeq	r0, #2
   2de56:	f43f ae3e 	beq.w	2dad6 <_malloc_r+0x6e>
   2de5a:	e6bb      	b.n	2dbd4 <_malloc_r+0x16c>
   2de5c:	4419      	add	r1, r3
   2de5e:	461c      	mov	r4, r3
   2de60:	684a      	ldr	r2, [r1, #4]
   2de62:	68db      	ldr	r3, [r3, #12]
   2de64:	f854 6f08 	ldr.w	r6, [r4, #8]!
   2de68:	f042 0201 	orr.w	r2, r2, #1
   2de6c:	604a      	str	r2, [r1, #4]
   2de6e:	4628      	mov	r0, r5
   2de70:	60f3      	str	r3, [r6, #12]
   2de72:	609e      	str	r6, [r3, #8]
   2de74:	f000 f8ae 	bl	2dfd4 <__malloc_unlock>
   2de78:	e6bc      	b.n	2dbf4 <_malloc_r+0x18c>
   2de7a:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   2de7e:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
   2de82:	00c3      	lsls	r3, r0, #3
   2de84:	e612      	b.n	2daac <_malloc_r+0x44>
   2de86:	099a      	lsrs	r2, r3, #6
   2de88:	f102 0139 	add.w	r1, r2, #57	; 0x39
   2de8c:	00c9      	lsls	r1, r1, #3
   2de8e:	3238      	adds	r2, #56	; 0x38
   2de90:	e7a4      	b.n	2dddc <_malloc_r+0x374>
   2de92:	42bc      	cmp	r4, r7
   2de94:	d054      	beq.n	2df40 <_malloc_r+0x4d8>
   2de96:	68bc      	ldr	r4, [r7, #8]
   2de98:	6862      	ldr	r2, [r4, #4]
   2de9a:	f022 0203 	bic.w	r2, r2, #3
   2de9e:	e75d      	b.n	2dd5c <_malloc_r+0x2f4>
   2dea0:	f859 3908 	ldr.w	r3, [r9], #-8
   2dea4:	4599      	cmp	r9, r3
   2dea6:	f040 8086 	bne.w	2dfb6 <_malloc_r+0x54e>
   2deaa:	f010 0f03 	tst.w	r0, #3
   2deae:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
   2deb2:	d1f5      	bne.n	2dea0 <_malloc_r+0x438>
   2deb4:	687b      	ldr	r3, [r7, #4]
   2deb6:	ea23 0304 	bic.w	r3, r3, r4
   2deba:	607b      	str	r3, [r7, #4]
   2debc:	0064      	lsls	r4, r4, #1
   2debe:	429c      	cmp	r4, r3
   2dec0:	f63f aec7 	bhi.w	2dc52 <_malloc_r+0x1ea>
   2dec4:	2c00      	cmp	r4, #0
   2dec6:	f43f aec4 	beq.w	2dc52 <_malloc_r+0x1ea>
   2deca:	421c      	tst	r4, r3
   2decc:	4640      	mov	r0, r8
   2dece:	f47f ae3e 	bne.w	2db4e <_malloc_r+0xe6>
   2ded2:	0064      	lsls	r4, r4, #1
   2ded4:	421c      	tst	r4, r3
   2ded6:	f100 0004 	add.w	r0, r0, #4
   2deda:	d0fa      	beq.n	2ded2 <_malloc_r+0x46a>
   2dedc:	e637      	b.n	2db4e <_malloc_r+0xe6>
   2dede:	468c      	mov	ip, r1
   2dee0:	e78c      	b.n	2ddfc <_malloc_r+0x394>
   2dee2:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   2dee6:	d815      	bhi.n	2df14 <_malloc_r+0x4ac>
   2dee8:	0bf3      	lsrs	r3, r6, #15
   2deea:	f103 0078 	add.w	r0, r3, #120	; 0x78
   2deee:	f103 0e77 	add.w	lr, r3, #119	; 0x77
   2def2:	00c3      	lsls	r3, r0, #3
   2def4:	e5da      	b.n	2daac <_malloc_r+0x44>
   2def6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   2defa:	e6ed      	b.n	2dcd8 <_malloc_r+0x270>
   2defc:	687b      	ldr	r3, [r7, #4]
   2defe:	1092      	asrs	r2, r2, #2
   2df00:	2101      	movs	r1, #1
   2df02:	fa01 f202 	lsl.w	r2, r1, r2
   2df06:	4313      	orrs	r3, r2
   2df08:	607b      	str	r3, [r7, #4]
   2df0a:	4662      	mov	r2, ip
   2df0c:	e779      	b.n	2de02 <_malloc_r+0x39a>
   2df0e:	2301      	movs	r3, #1
   2df10:	6053      	str	r3, [r2, #4]
   2df12:	e729      	b.n	2dd68 <_malloc_r+0x300>
   2df14:	f240 5254 	movw	r2, #1364	; 0x554
   2df18:	4293      	cmp	r3, r2
   2df1a:	d822      	bhi.n	2df62 <_malloc_r+0x4fa>
   2df1c:	0cb3      	lsrs	r3, r6, #18
   2df1e:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   2df22:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
   2df26:	00c3      	lsls	r3, r0, #3
   2df28:	e5c0      	b.n	2daac <_malloc_r+0x44>
   2df2a:	f103 0b10 	add.w	fp, r3, #16
   2df2e:	e6ae      	b.n	2dc8e <_malloc_r+0x226>
   2df30:	2a54      	cmp	r2, #84	; 0x54
   2df32:	d829      	bhi.n	2df88 <_malloc_r+0x520>
   2df34:	0b1a      	lsrs	r2, r3, #12
   2df36:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   2df3a:	00c9      	lsls	r1, r1, #3
   2df3c:	326e      	adds	r2, #110	; 0x6e
   2df3e:	e74d      	b.n	2dddc <_malloc_r+0x374>
   2df40:	4b20      	ldr	r3, [pc, #128]	; (2dfc4 <_malloc_r+0x55c>)
   2df42:	6819      	ldr	r1, [r3, #0]
   2df44:	4459      	add	r1, fp
   2df46:	6019      	str	r1, [r3, #0]
   2df48:	e6b2      	b.n	2dcb0 <_malloc_r+0x248>
   2df4a:	f3ca 000b 	ubfx	r0, sl, #0, #12
   2df4e:	2800      	cmp	r0, #0
   2df50:	f47f aeae 	bne.w	2dcb0 <_malloc_r+0x248>
   2df54:	eb08 030b 	add.w	r3, r8, fp
   2df58:	68ba      	ldr	r2, [r7, #8]
   2df5a:	f043 0301 	orr.w	r3, r3, #1
   2df5e:	6053      	str	r3, [r2, #4]
   2df60:	e6ee      	b.n	2dd40 <_malloc_r+0x2d8>
   2df62:	207f      	movs	r0, #127	; 0x7f
   2df64:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
   2df68:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
   2df6c:	e59e      	b.n	2daac <_malloc_r+0x44>
   2df6e:	f104 0108 	add.w	r1, r4, #8
   2df72:	4628      	mov	r0, r5
   2df74:	9300      	str	r3, [sp, #0]
   2df76:	f000 fc3d 	bl	2e7f4 <_free_r>
   2df7a:	9b00      	ldr	r3, [sp, #0]
   2df7c:	6819      	ldr	r1, [r3, #0]
   2df7e:	e6df      	b.n	2dd40 <_malloc_r+0x2d8>
   2df80:	2001      	movs	r0, #1
   2df82:	f04f 0900 	mov.w	r9, #0
   2df86:	e6bc      	b.n	2dd02 <_malloc_r+0x29a>
   2df88:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   2df8c:	d805      	bhi.n	2df9a <_malloc_r+0x532>
   2df8e:	0bda      	lsrs	r2, r3, #15
   2df90:	f102 0178 	add.w	r1, r2, #120	; 0x78
   2df94:	00c9      	lsls	r1, r1, #3
   2df96:	3277      	adds	r2, #119	; 0x77
   2df98:	e720      	b.n	2dddc <_malloc_r+0x374>
   2df9a:	f240 5154 	movw	r1, #1364	; 0x554
   2df9e:	428a      	cmp	r2, r1
   2dfa0:	d805      	bhi.n	2dfae <_malloc_r+0x546>
   2dfa2:	0c9a      	lsrs	r2, r3, #18
   2dfa4:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   2dfa8:	00c9      	lsls	r1, r1, #3
   2dfaa:	327c      	adds	r2, #124	; 0x7c
   2dfac:	e716      	b.n	2dddc <_malloc_r+0x374>
   2dfae:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   2dfb2:	227e      	movs	r2, #126	; 0x7e
   2dfb4:	e712      	b.n	2dddc <_malloc_r+0x374>
   2dfb6:	687b      	ldr	r3, [r7, #4]
   2dfb8:	e780      	b.n	2debc <_malloc_r+0x454>
   2dfba:	08f0      	lsrs	r0, r6, #3
   2dfbc:	f106 0308 	add.w	r3, r6, #8
   2dfc0:	e600      	b.n	2dbc4 <_malloc_r+0x15c>
   2dfc2:	bf00      	nop
   2dfc4:	20002838 	.word	0x20002838

0002dfc8 <__malloc_lock>:
   2dfc8:	4801      	ldr	r0, [pc, #4]	; (2dfd0 <__malloc_lock+0x8>)
   2dfca:	f000 bcf9 	b.w	2e9c0 <__retarget_lock_acquire_recursive>
   2dfce:	bf00      	nop
   2dfd0:	20002b90 	.word	0x20002b90

0002dfd4 <__malloc_unlock>:
   2dfd4:	4801      	ldr	r0, [pc, #4]	; (2dfdc <__malloc_unlock+0x8>)
   2dfd6:	f000 bcf5 	b.w	2e9c4 <__retarget_lock_release_recursive>
   2dfda:	bf00      	nop
   2dfdc:	20002b90 	.word	0x20002b90

0002dfe0 <_Balloc>:
   2dfe0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   2dfe2:	b570      	push	{r4, r5, r6, lr}
   2dfe4:	4605      	mov	r5, r0
   2dfe6:	460c      	mov	r4, r1
   2dfe8:	b14b      	cbz	r3, 2dffe <_Balloc+0x1e>
   2dfea:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   2dfee:	b180      	cbz	r0, 2e012 <_Balloc+0x32>
   2dff0:	6802      	ldr	r2, [r0, #0]
   2dff2:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   2dff6:	2300      	movs	r3, #0
   2dff8:	6103      	str	r3, [r0, #16]
   2dffa:	60c3      	str	r3, [r0, #12]
   2dffc:	bd70      	pop	{r4, r5, r6, pc}
   2dffe:	2221      	movs	r2, #33	; 0x21
   2e000:	2104      	movs	r1, #4
   2e002:	f000 fb77 	bl	2e6f4 <_calloc_r>
   2e006:	64e8      	str	r0, [r5, #76]	; 0x4c
   2e008:	4603      	mov	r3, r0
   2e00a:	2800      	cmp	r0, #0
   2e00c:	d1ed      	bne.n	2dfea <_Balloc+0xa>
   2e00e:	2000      	movs	r0, #0
   2e010:	bd70      	pop	{r4, r5, r6, pc}
   2e012:	2101      	movs	r1, #1
   2e014:	fa01 f604 	lsl.w	r6, r1, r4
   2e018:	1d72      	adds	r2, r6, #5
   2e01a:	4628      	mov	r0, r5
   2e01c:	0092      	lsls	r2, r2, #2
   2e01e:	f000 fb69 	bl	2e6f4 <_calloc_r>
   2e022:	2800      	cmp	r0, #0
   2e024:	d0f3      	beq.n	2e00e <_Balloc+0x2e>
   2e026:	6044      	str	r4, [r0, #4]
   2e028:	6086      	str	r6, [r0, #8]
   2e02a:	e7e4      	b.n	2dff6 <_Balloc+0x16>

0002e02c <_Bfree>:
   2e02c:	b131      	cbz	r1, 2e03c <_Bfree+0x10>
   2e02e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   2e030:	684a      	ldr	r2, [r1, #4]
   2e032:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   2e036:	6008      	str	r0, [r1, #0]
   2e038:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   2e03c:	4770      	bx	lr
   2e03e:	bf00      	nop

0002e040 <__multadd>:
   2e040:	b5f0      	push	{r4, r5, r6, r7, lr}
   2e042:	690c      	ldr	r4, [r1, #16]
   2e044:	b083      	sub	sp, #12
   2e046:	460d      	mov	r5, r1
   2e048:	4606      	mov	r6, r0
   2e04a:	f101 0e14 	add.w	lr, r1, #20
   2e04e:	2700      	movs	r7, #0
   2e050:	f8de 0000 	ldr.w	r0, [lr]
   2e054:	b281      	uxth	r1, r0
   2e056:	fb02 3301 	mla	r3, r2, r1, r3
   2e05a:	0c01      	lsrs	r1, r0, #16
   2e05c:	0c18      	lsrs	r0, r3, #16
   2e05e:	fb02 0101 	mla	r1, r2, r1, r0
   2e062:	b29b      	uxth	r3, r3
   2e064:	3701      	adds	r7, #1
   2e066:	eb03 4301 	add.w	r3, r3, r1, lsl #16
   2e06a:	42bc      	cmp	r4, r7
   2e06c:	f84e 3b04 	str.w	r3, [lr], #4
   2e070:	ea4f 4311 	mov.w	r3, r1, lsr #16
   2e074:	dcec      	bgt.n	2e050 <__multadd+0x10>
   2e076:	b13b      	cbz	r3, 2e088 <__multadd+0x48>
   2e078:	68aa      	ldr	r2, [r5, #8]
   2e07a:	4294      	cmp	r4, r2
   2e07c:	da07      	bge.n	2e08e <__multadd+0x4e>
   2e07e:	eb05 0284 	add.w	r2, r5, r4, lsl #2
   2e082:	3401      	adds	r4, #1
   2e084:	6153      	str	r3, [r2, #20]
   2e086:	612c      	str	r4, [r5, #16]
   2e088:	4628      	mov	r0, r5
   2e08a:	b003      	add	sp, #12
   2e08c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2e08e:	6869      	ldr	r1, [r5, #4]
   2e090:	9301      	str	r3, [sp, #4]
   2e092:	3101      	adds	r1, #1
   2e094:	4630      	mov	r0, r6
   2e096:	f7ff ffa3 	bl	2dfe0 <_Balloc>
   2e09a:	692a      	ldr	r2, [r5, #16]
   2e09c:	3202      	adds	r2, #2
   2e09e:	f105 010c 	add.w	r1, r5, #12
   2e0a2:	4607      	mov	r7, r0
   2e0a4:	0092      	lsls	r2, r2, #2
   2e0a6:	300c      	adds	r0, #12
   2e0a8:	f7d2 f90a 	bl	2c0 <memcpy>
   2e0ac:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
   2e0ae:	6869      	ldr	r1, [r5, #4]
   2e0b0:	9b01      	ldr	r3, [sp, #4]
   2e0b2:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   2e0b6:	6028      	str	r0, [r5, #0]
   2e0b8:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
   2e0bc:	463d      	mov	r5, r7
   2e0be:	e7de      	b.n	2e07e <__multadd+0x3e>

0002e0c0 <__hi0bits>:
   2e0c0:	0c02      	lsrs	r2, r0, #16
   2e0c2:	0412      	lsls	r2, r2, #16
   2e0c4:	4603      	mov	r3, r0
   2e0c6:	b9b2      	cbnz	r2, 2e0f6 <__hi0bits+0x36>
   2e0c8:	0403      	lsls	r3, r0, #16
   2e0ca:	2010      	movs	r0, #16
   2e0cc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   2e0d0:	bf04      	itt	eq
   2e0d2:	021b      	lsleq	r3, r3, #8
   2e0d4:	3008      	addeq	r0, #8
   2e0d6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   2e0da:	bf04      	itt	eq
   2e0dc:	011b      	lsleq	r3, r3, #4
   2e0de:	3004      	addeq	r0, #4
   2e0e0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   2e0e4:	bf04      	itt	eq
   2e0e6:	009b      	lsleq	r3, r3, #2
   2e0e8:	3002      	addeq	r0, #2
   2e0ea:	2b00      	cmp	r3, #0
   2e0ec:	db02      	blt.n	2e0f4 <__hi0bits+0x34>
   2e0ee:	005b      	lsls	r3, r3, #1
   2e0f0:	d403      	bmi.n	2e0fa <__hi0bits+0x3a>
   2e0f2:	2020      	movs	r0, #32
   2e0f4:	4770      	bx	lr
   2e0f6:	2000      	movs	r0, #0
   2e0f8:	e7e8      	b.n	2e0cc <__hi0bits+0xc>
   2e0fa:	3001      	adds	r0, #1
   2e0fc:	4770      	bx	lr
   2e0fe:	bf00      	nop

0002e100 <__lo0bits>:
   2e100:	6803      	ldr	r3, [r0, #0]
   2e102:	f013 0207 	ands.w	r2, r3, #7
   2e106:	4601      	mov	r1, r0
   2e108:	d007      	beq.n	2e11a <__lo0bits+0x1a>
   2e10a:	07da      	lsls	r2, r3, #31
   2e10c:	d421      	bmi.n	2e152 <__lo0bits+0x52>
   2e10e:	0798      	lsls	r0, r3, #30
   2e110:	d421      	bmi.n	2e156 <__lo0bits+0x56>
   2e112:	089b      	lsrs	r3, r3, #2
   2e114:	600b      	str	r3, [r1, #0]
   2e116:	2002      	movs	r0, #2
   2e118:	4770      	bx	lr
   2e11a:	b298      	uxth	r0, r3
   2e11c:	b198      	cbz	r0, 2e146 <__lo0bits+0x46>
   2e11e:	4610      	mov	r0, r2
   2e120:	f013 0fff 	tst.w	r3, #255	; 0xff
   2e124:	bf04      	itt	eq
   2e126:	0a1b      	lsreq	r3, r3, #8
   2e128:	3008      	addeq	r0, #8
   2e12a:	071a      	lsls	r2, r3, #28
   2e12c:	bf04      	itt	eq
   2e12e:	091b      	lsreq	r3, r3, #4
   2e130:	3004      	addeq	r0, #4
   2e132:	079a      	lsls	r2, r3, #30
   2e134:	bf04      	itt	eq
   2e136:	089b      	lsreq	r3, r3, #2
   2e138:	3002      	addeq	r0, #2
   2e13a:	07da      	lsls	r2, r3, #31
   2e13c:	d407      	bmi.n	2e14e <__lo0bits+0x4e>
   2e13e:	085b      	lsrs	r3, r3, #1
   2e140:	d104      	bne.n	2e14c <__lo0bits+0x4c>
   2e142:	2020      	movs	r0, #32
   2e144:	4770      	bx	lr
   2e146:	0c1b      	lsrs	r3, r3, #16
   2e148:	2010      	movs	r0, #16
   2e14a:	e7e9      	b.n	2e120 <__lo0bits+0x20>
   2e14c:	3001      	adds	r0, #1
   2e14e:	600b      	str	r3, [r1, #0]
   2e150:	4770      	bx	lr
   2e152:	2000      	movs	r0, #0
   2e154:	4770      	bx	lr
   2e156:	085b      	lsrs	r3, r3, #1
   2e158:	600b      	str	r3, [r1, #0]
   2e15a:	2001      	movs	r0, #1
   2e15c:	4770      	bx	lr
   2e15e:	bf00      	nop

0002e160 <__i2b>:
   2e160:	b510      	push	{r4, lr}
   2e162:	460c      	mov	r4, r1
   2e164:	2101      	movs	r1, #1
   2e166:	f7ff ff3b 	bl	2dfe0 <_Balloc>
   2e16a:	2201      	movs	r2, #1
   2e16c:	6144      	str	r4, [r0, #20]
   2e16e:	6102      	str	r2, [r0, #16]
   2e170:	bd10      	pop	{r4, pc}
   2e172:	bf00      	nop

0002e174 <__multiply>:
   2e174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e178:	690c      	ldr	r4, [r1, #16]
   2e17a:	6915      	ldr	r5, [r2, #16]
   2e17c:	42ac      	cmp	r4, r5
   2e17e:	b083      	sub	sp, #12
   2e180:	468b      	mov	fp, r1
   2e182:	4616      	mov	r6, r2
   2e184:	da04      	bge.n	2e190 <__multiply+0x1c>
   2e186:	4622      	mov	r2, r4
   2e188:	46b3      	mov	fp, r6
   2e18a:	462c      	mov	r4, r5
   2e18c:	460e      	mov	r6, r1
   2e18e:	4615      	mov	r5, r2
   2e190:	f8db 3008 	ldr.w	r3, [fp, #8]
   2e194:	f8db 1004 	ldr.w	r1, [fp, #4]
   2e198:	eb04 0805 	add.w	r8, r4, r5
   2e19c:	4598      	cmp	r8, r3
   2e19e:	bfc8      	it	gt
   2e1a0:	3101      	addgt	r1, #1
   2e1a2:	f7ff ff1d 	bl	2dfe0 <_Balloc>
   2e1a6:	f100 0914 	add.w	r9, r0, #20
   2e1aa:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
   2e1ae:	45d1      	cmp	r9, sl
   2e1b0:	9000      	str	r0, [sp, #0]
   2e1b2:	d205      	bcs.n	2e1c0 <__multiply+0x4c>
   2e1b4:	464b      	mov	r3, r9
   2e1b6:	2100      	movs	r1, #0
   2e1b8:	f843 1b04 	str.w	r1, [r3], #4
   2e1bc:	459a      	cmp	sl, r3
   2e1be:	d8fb      	bhi.n	2e1b8 <__multiply+0x44>
   2e1c0:	f106 0c14 	add.w	ip, r6, #20
   2e1c4:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
   2e1c8:	f10b 0b14 	add.w	fp, fp, #20
   2e1cc:	459c      	cmp	ip, r3
   2e1ce:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
   2e1d2:	d24c      	bcs.n	2e26e <__multiply+0xfa>
   2e1d4:	f8cd a004 	str.w	sl, [sp, #4]
   2e1d8:	469a      	mov	sl, r3
   2e1da:	f8dc 5000 	ldr.w	r5, [ip]
   2e1de:	b2af      	uxth	r7, r5
   2e1e0:	b1ef      	cbz	r7, 2e21e <__multiply+0xaa>
   2e1e2:	2100      	movs	r1, #0
   2e1e4:	464d      	mov	r5, r9
   2e1e6:	465e      	mov	r6, fp
   2e1e8:	460c      	mov	r4, r1
   2e1ea:	f856 2b04 	ldr.w	r2, [r6], #4
   2e1ee:	6828      	ldr	r0, [r5, #0]
   2e1f0:	b293      	uxth	r3, r2
   2e1f2:	b281      	uxth	r1, r0
   2e1f4:	fb07 1303 	mla	r3, r7, r3, r1
   2e1f8:	0c12      	lsrs	r2, r2, #16
   2e1fa:	0c01      	lsrs	r1, r0, #16
   2e1fc:	4423      	add	r3, r4
   2e1fe:	fb07 1102 	mla	r1, r7, r2, r1
   2e202:	eb01 4113 	add.w	r1, r1, r3, lsr #16
   2e206:	b29b      	uxth	r3, r3
   2e208:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   2e20c:	45b6      	cmp	lr, r6
   2e20e:	f845 3b04 	str.w	r3, [r5], #4
   2e212:	ea4f 4411 	mov.w	r4, r1, lsr #16
   2e216:	d8e8      	bhi.n	2e1ea <__multiply+0x76>
   2e218:	602c      	str	r4, [r5, #0]
   2e21a:	f8dc 5000 	ldr.w	r5, [ip]
   2e21e:	0c2d      	lsrs	r5, r5, #16
   2e220:	d01d      	beq.n	2e25e <__multiply+0xea>
   2e222:	f8d9 3000 	ldr.w	r3, [r9]
   2e226:	4648      	mov	r0, r9
   2e228:	461c      	mov	r4, r3
   2e22a:	4659      	mov	r1, fp
   2e22c:	2200      	movs	r2, #0
   2e22e:	880e      	ldrh	r6, [r1, #0]
   2e230:	0c24      	lsrs	r4, r4, #16
   2e232:	fb05 4406 	mla	r4, r5, r6, r4
   2e236:	4422      	add	r2, r4
   2e238:	b29b      	uxth	r3, r3
   2e23a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   2e23e:	f840 3b04 	str.w	r3, [r0], #4
   2e242:	f851 3b04 	ldr.w	r3, [r1], #4
   2e246:	6804      	ldr	r4, [r0, #0]
   2e248:	0c1b      	lsrs	r3, r3, #16
   2e24a:	b2a6      	uxth	r6, r4
   2e24c:	fb05 6303 	mla	r3, r5, r3, r6
   2e250:	eb03 4312 	add.w	r3, r3, r2, lsr #16
   2e254:	458e      	cmp	lr, r1
   2e256:	ea4f 4213 	mov.w	r2, r3, lsr #16
   2e25a:	d8e8      	bhi.n	2e22e <__multiply+0xba>
   2e25c:	6003      	str	r3, [r0, #0]
   2e25e:	f10c 0c04 	add.w	ip, ip, #4
   2e262:	45e2      	cmp	sl, ip
   2e264:	f109 0904 	add.w	r9, r9, #4
   2e268:	d8b7      	bhi.n	2e1da <__multiply+0x66>
   2e26a:	f8dd a004 	ldr.w	sl, [sp, #4]
   2e26e:	f1b8 0f00 	cmp.w	r8, #0
   2e272:	dd0b      	ble.n	2e28c <__multiply+0x118>
   2e274:	f85a 3c04 	ldr.w	r3, [sl, #-4]
   2e278:	f1aa 0a04 	sub.w	sl, sl, #4
   2e27c:	b11b      	cbz	r3, 2e286 <__multiply+0x112>
   2e27e:	e005      	b.n	2e28c <__multiply+0x118>
   2e280:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
   2e284:	b913      	cbnz	r3, 2e28c <__multiply+0x118>
   2e286:	f1b8 0801 	subs.w	r8, r8, #1
   2e28a:	d1f9      	bne.n	2e280 <__multiply+0x10c>
   2e28c:	9800      	ldr	r0, [sp, #0]
   2e28e:	f8c0 8010 	str.w	r8, [r0, #16]
   2e292:	b003      	add	sp, #12
   2e294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002e298 <__pow5mult>:
   2e298:	f012 0303 	ands.w	r3, r2, #3
   2e29c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2e2a0:	4614      	mov	r4, r2
   2e2a2:	4607      	mov	r7, r0
   2e2a4:	d12e      	bne.n	2e304 <__pow5mult+0x6c>
   2e2a6:	460d      	mov	r5, r1
   2e2a8:	10a4      	asrs	r4, r4, #2
   2e2aa:	d01c      	beq.n	2e2e6 <__pow5mult+0x4e>
   2e2ac:	6cbe      	ldr	r6, [r7, #72]	; 0x48
   2e2ae:	b396      	cbz	r6, 2e316 <__pow5mult+0x7e>
   2e2b0:	07e3      	lsls	r3, r4, #31
   2e2b2:	f04f 0800 	mov.w	r8, #0
   2e2b6:	d406      	bmi.n	2e2c6 <__pow5mult+0x2e>
   2e2b8:	1064      	asrs	r4, r4, #1
   2e2ba:	d014      	beq.n	2e2e6 <__pow5mult+0x4e>
   2e2bc:	6830      	ldr	r0, [r6, #0]
   2e2be:	b1a8      	cbz	r0, 2e2ec <__pow5mult+0x54>
   2e2c0:	4606      	mov	r6, r0
   2e2c2:	07e3      	lsls	r3, r4, #31
   2e2c4:	d5f8      	bpl.n	2e2b8 <__pow5mult+0x20>
   2e2c6:	4632      	mov	r2, r6
   2e2c8:	4629      	mov	r1, r5
   2e2ca:	4638      	mov	r0, r7
   2e2cc:	f7ff ff52 	bl	2e174 <__multiply>
   2e2d0:	b1b5      	cbz	r5, 2e300 <__pow5mult+0x68>
   2e2d2:	686a      	ldr	r2, [r5, #4]
   2e2d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   2e2d6:	1064      	asrs	r4, r4, #1
   2e2d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   2e2dc:	6029      	str	r1, [r5, #0]
   2e2de:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   2e2e2:	4605      	mov	r5, r0
   2e2e4:	d1ea      	bne.n	2e2bc <__pow5mult+0x24>
   2e2e6:	4628      	mov	r0, r5
   2e2e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2e2ec:	4632      	mov	r2, r6
   2e2ee:	4631      	mov	r1, r6
   2e2f0:	4638      	mov	r0, r7
   2e2f2:	f7ff ff3f 	bl	2e174 <__multiply>
   2e2f6:	6030      	str	r0, [r6, #0]
   2e2f8:	f8c0 8000 	str.w	r8, [r0]
   2e2fc:	4606      	mov	r6, r0
   2e2fe:	e7e0      	b.n	2e2c2 <__pow5mult+0x2a>
   2e300:	4605      	mov	r5, r0
   2e302:	e7d9      	b.n	2e2b8 <__pow5mult+0x20>
   2e304:	1e5a      	subs	r2, r3, #1
   2e306:	4d0b      	ldr	r5, [pc, #44]	; (2e334 <__pow5mult+0x9c>)
   2e308:	2300      	movs	r3, #0
   2e30a:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
   2e30e:	f7ff fe97 	bl	2e040 <__multadd>
   2e312:	4605      	mov	r5, r0
   2e314:	e7c8      	b.n	2e2a8 <__pow5mult+0x10>
   2e316:	2101      	movs	r1, #1
   2e318:	4638      	mov	r0, r7
   2e31a:	f7ff fe61 	bl	2dfe0 <_Balloc>
   2e31e:	f240 2171 	movw	r1, #625	; 0x271
   2e322:	2201      	movs	r2, #1
   2e324:	2300      	movs	r3, #0
   2e326:	6141      	str	r1, [r0, #20]
   2e328:	6102      	str	r2, [r0, #16]
   2e32a:	4606      	mov	r6, r0
   2e32c:	64b8      	str	r0, [r7, #72]	; 0x48
   2e32e:	6003      	str	r3, [r0, #0]
   2e330:	e7be      	b.n	2e2b0 <__pow5mult+0x18>
   2e332:	bf00      	nop
   2e334:	00031520 	.word	0x00031520

0002e338 <__lshift>:
   2e338:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2e33c:	4691      	mov	r9, r2
   2e33e:	690a      	ldr	r2, [r1, #16]
   2e340:	688b      	ldr	r3, [r1, #8]
   2e342:	ea4f 1469 	mov.w	r4, r9, asr #5
   2e346:	eb04 0802 	add.w	r8, r4, r2
   2e34a:	f108 0501 	add.w	r5, r8, #1
   2e34e:	429d      	cmp	r5, r3
   2e350:	460e      	mov	r6, r1
   2e352:	4607      	mov	r7, r0
   2e354:	6849      	ldr	r1, [r1, #4]
   2e356:	dd04      	ble.n	2e362 <__lshift+0x2a>
   2e358:	005b      	lsls	r3, r3, #1
   2e35a:	429d      	cmp	r5, r3
   2e35c:	f101 0101 	add.w	r1, r1, #1
   2e360:	dcfa      	bgt.n	2e358 <__lshift+0x20>
   2e362:	4638      	mov	r0, r7
   2e364:	f7ff fe3c 	bl	2dfe0 <_Balloc>
   2e368:	2c00      	cmp	r4, #0
   2e36a:	f100 0314 	add.w	r3, r0, #20
   2e36e:	dd06      	ble.n	2e37e <__lshift+0x46>
   2e370:	eb03 0284 	add.w	r2, r3, r4, lsl #2
   2e374:	2100      	movs	r1, #0
   2e376:	f843 1b04 	str.w	r1, [r3], #4
   2e37a:	429a      	cmp	r2, r3
   2e37c:	d1fb      	bne.n	2e376 <__lshift+0x3e>
   2e37e:	6934      	ldr	r4, [r6, #16]
   2e380:	f106 0114 	add.w	r1, r6, #20
   2e384:	f019 091f 	ands.w	r9, r9, #31
   2e388:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
   2e38c:	d01d      	beq.n	2e3ca <__lshift+0x92>
   2e38e:	f1c9 0c20 	rsb	ip, r9, #32
   2e392:	2200      	movs	r2, #0
   2e394:	680c      	ldr	r4, [r1, #0]
   2e396:	fa04 f409 	lsl.w	r4, r4, r9
   2e39a:	4314      	orrs	r4, r2
   2e39c:	f843 4b04 	str.w	r4, [r3], #4
   2e3a0:	f851 2b04 	ldr.w	r2, [r1], #4
   2e3a4:	458e      	cmp	lr, r1
   2e3a6:	fa22 f20c 	lsr.w	r2, r2, ip
   2e3aa:	d8f3      	bhi.n	2e394 <__lshift+0x5c>
   2e3ac:	601a      	str	r2, [r3, #0]
   2e3ae:	b10a      	cbz	r2, 2e3b4 <__lshift+0x7c>
   2e3b0:	f108 0502 	add.w	r5, r8, #2
   2e3b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   2e3b6:	6872      	ldr	r2, [r6, #4]
   2e3b8:	3d01      	subs	r5, #1
   2e3ba:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   2e3be:	6105      	str	r5, [r0, #16]
   2e3c0:	6031      	str	r1, [r6, #0]
   2e3c2:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
   2e3c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2e3ca:	3b04      	subs	r3, #4
   2e3cc:	f851 2b04 	ldr.w	r2, [r1], #4
   2e3d0:	f843 2f04 	str.w	r2, [r3, #4]!
   2e3d4:	458e      	cmp	lr, r1
   2e3d6:	d8f9      	bhi.n	2e3cc <__lshift+0x94>
   2e3d8:	e7ec      	b.n	2e3b4 <__lshift+0x7c>
   2e3da:	bf00      	nop

0002e3dc <__mcmp>:
   2e3dc:	b430      	push	{r4, r5}
   2e3de:	690b      	ldr	r3, [r1, #16]
   2e3e0:	4605      	mov	r5, r0
   2e3e2:	6900      	ldr	r0, [r0, #16]
   2e3e4:	1ac0      	subs	r0, r0, r3
   2e3e6:	d10f      	bne.n	2e408 <__mcmp+0x2c>
   2e3e8:	009b      	lsls	r3, r3, #2
   2e3ea:	3514      	adds	r5, #20
   2e3ec:	3114      	adds	r1, #20
   2e3ee:	4419      	add	r1, r3
   2e3f0:	442b      	add	r3, r5
   2e3f2:	e001      	b.n	2e3f8 <__mcmp+0x1c>
   2e3f4:	429d      	cmp	r5, r3
   2e3f6:	d207      	bcs.n	2e408 <__mcmp+0x2c>
   2e3f8:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   2e3fc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   2e400:	4294      	cmp	r4, r2
   2e402:	d0f7      	beq.n	2e3f4 <__mcmp+0x18>
   2e404:	d302      	bcc.n	2e40c <__mcmp+0x30>
   2e406:	2001      	movs	r0, #1
   2e408:	bc30      	pop	{r4, r5}
   2e40a:	4770      	bx	lr
   2e40c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2e410:	e7fa      	b.n	2e408 <__mcmp+0x2c>
   2e412:	bf00      	nop

0002e414 <__mdiff>:
   2e414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2e418:	690f      	ldr	r7, [r1, #16]
   2e41a:	460e      	mov	r6, r1
   2e41c:	6911      	ldr	r1, [r2, #16]
   2e41e:	1a7f      	subs	r7, r7, r1
   2e420:	2f00      	cmp	r7, #0
   2e422:	4690      	mov	r8, r2
   2e424:	d117      	bne.n	2e456 <__mdiff+0x42>
   2e426:	0089      	lsls	r1, r1, #2
   2e428:	f106 0514 	add.w	r5, r6, #20
   2e42c:	f102 0e14 	add.w	lr, r2, #20
   2e430:	186b      	adds	r3, r5, r1
   2e432:	4471      	add	r1, lr
   2e434:	e001      	b.n	2e43a <__mdiff+0x26>
   2e436:	429d      	cmp	r5, r3
   2e438:	d25c      	bcs.n	2e4f4 <__mdiff+0xe0>
   2e43a:	f853 2d04 	ldr.w	r2, [r3, #-4]!
   2e43e:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   2e442:	42a2      	cmp	r2, r4
   2e444:	d0f7      	beq.n	2e436 <__mdiff+0x22>
   2e446:	d25e      	bcs.n	2e506 <__mdiff+0xf2>
   2e448:	4633      	mov	r3, r6
   2e44a:	462c      	mov	r4, r5
   2e44c:	4646      	mov	r6, r8
   2e44e:	4675      	mov	r5, lr
   2e450:	4698      	mov	r8, r3
   2e452:	2701      	movs	r7, #1
   2e454:	e005      	b.n	2e462 <__mdiff+0x4e>
   2e456:	db58      	blt.n	2e50a <__mdiff+0xf6>
   2e458:	f106 0514 	add.w	r5, r6, #20
   2e45c:	f108 0414 	add.w	r4, r8, #20
   2e460:	2700      	movs	r7, #0
   2e462:	6871      	ldr	r1, [r6, #4]
   2e464:	f7ff fdbc 	bl	2dfe0 <_Balloc>
   2e468:	f8d8 3010 	ldr.w	r3, [r8, #16]
   2e46c:	6936      	ldr	r6, [r6, #16]
   2e46e:	60c7      	str	r7, [r0, #12]
   2e470:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
   2e474:	46a6      	mov	lr, r4
   2e476:	eb05 0786 	add.w	r7, r5, r6, lsl #2
   2e47a:	f100 0414 	add.w	r4, r0, #20
   2e47e:	2300      	movs	r3, #0
   2e480:	f85e 1b04 	ldr.w	r1, [lr], #4
   2e484:	f855 8b04 	ldr.w	r8, [r5], #4
   2e488:	b28a      	uxth	r2, r1
   2e48a:	fa13 f388 	uxtah	r3, r3, r8
   2e48e:	0c09      	lsrs	r1, r1, #16
   2e490:	1a9a      	subs	r2, r3, r2
   2e492:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
   2e496:	eb03 4322 	add.w	r3, r3, r2, asr #16
   2e49a:	b292      	uxth	r2, r2
   2e49c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   2e4a0:	45f4      	cmp	ip, lr
   2e4a2:	f844 2b04 	str.w	r2, [r4], #4
   2e4a6:	ea4f 4323 	mov.w	r3, r3, asr #16
   2e4aa:	d8e9      	bhi.n	2e480 <__mdiff+0x6c>
   2e4ac:	42af      	cmp	r7, r5
   2e4ae:	d917      	bls.n	2e4e0 <__mdiff+0xcc>
   2e4b0:	46a4      	mov	ip, r4
   2e4b2:	46ae      	mov	lr, r5
   2e4b4:	f85e 2b04 	ldr.w	r2, [lr], #4
   2e4b8:	fa13 f382 	uxtah	r3, r3, r2
   2e4bc:	1419      	asrs	r1, r3, #16
   2e4be:	eb01 4112 	add.w	r1, r1, r2, lsr #16
   2e4c2:	b29b      	uxth	r3, r3
   2e4c4:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
   2e4c8:	4577      	cmp	r7, lr
   2e4ca:	f84c 2b04 	str.w	r2, [ip], #4
   2e4ce:	ea4f 4321 	mov.w	r3, r1, asr #16
   2e4d2:	d8ef      	bhi.n	2e4b4 <__mdiff+0xa0>
   2e4d4:	43ed      	mvns	r5, r5
   2e4d6:	442f      	add	r7, r5
   2e4d8:	f027 0703 	bic.w	r7, r7, #3
   2e4dc:	3704      	adds	r7, #4
   2e4de:	443c      	add	r4, r7
   2e4e0:	3c04      	subs	r4, #4
   2e4e2:	b922      	cbnz	r2, 2e4ee <__mdiff+0xda>
   2e4e4:	f854 3d04 	ldr.w	r3, [r4, #-4]!
   2e4e8:	3e01      	subs	r6, #1
   2e4ea:	2b00      	cmp	r3, #0
   2e4ec:	d0fa      	beq.n	2e4e4 <__mdiff+0xd0>
   2e4ee:	6106      	str	r6, [r0, #16]
   2e4f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2e4f4:	2100      	movs	r1, #0
   2e4f6:	f7ff fd73 	bl	2dfe0 <_Balloc>
   2e4fa:	2201      	movs	r2, #1
   2e4fc:	2300      	movs	r3, #0
   2e4fe:	6102      	str	r2, [r0, #16]
   2e500:	6143      	str	r3, [r0, #20]
   2e502:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2e506:	4674      	mov	r4, lr
   2e508:	e7ab      	b.n	2e462 <__mdiff+0x4e>
   2e50a:	4633      	mov	r3, r6
   2e50c:	f106 0414 	add.w	r4, r6, #20
   2e510:	f102 0514 	add.w	r5, r2, #20
   2e514:	4616      	mov	r6, r2
   2e516:	2701      	movs	r7, #1
   2e518:	4698      	mov	r8, r3
   2e51a:	e7a2      	b.n	2e462 <__mdiff+0x4e>

0002e51c <__d2b>:
   2e51c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2e520:	b082      	sub	sp, #8
   2e522:	2101      	movs	r1, #1
   2e524:	461c      	mov	r4, r3
   2e526:	f3c3 570a 	ubfx	r7, r3, #20, #11
   2e52a:	4615      	mov	r5, r2
   2e52c:	9e08      	ldr	r6, [sp, #32]
   2e52e:	f7ff fd57 	bl	2dfe0 <_Balloc>
   2e532:	f3c4 0413 	ubfx	r4, r4, #0, #20
   2e536:	4680      	mov	r8, r0
   2e538:	b10f      	cbz	r7, 2e53e <__d2b+0x22>
   2e53a:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
   2e53e:	9401      	str	r4, [sp, #4]
   2e540:	b31d      	cbz	r5, 2e58a <__d2b+0x6e>
   2e542:	a802      	add	r0, sp, #8
   2e544:	f840 5d08 	str.w	r5, [r0, #-8]!
   2e548:	f7ff fdda 	bl	2e100 <__lo0bits>
   2e54c:	2800      	cmp	r0, #0
   2e54e:	d134      	bne.n	2e5ba <__d2b+0x9e>
   2e550:	e89d 000c 	ldmia.w	sp, {r2, r3}
   2e554:	f8c8 2014 	str.w	r2, [r8, #20]
   2e558:	2b00      	cmp	r3, #0
   2e55a:	bf0c      	ite	eq
   2e55c:	2101      	moveq	r1, #1
   2e55e:	2102      	movne	r1, #2
   2e560:	f8c8 3018 	str.w	r3, [r8, #24]
   2e564:	f8c8 1010 	str.w	r1, [r8, #16]
   2e568:	b9df      	cbnz	r7, 2e5a2 <__d2b+0x86>
   2e56a:	eb08 0381 	add.w	r3, r8, r1, lsl #2
   2e56e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   2e572:	6030      	str	r0, [r6, #0]
   2e574:	6918      	ldr	r0, [r3, #16]
   2e576:	f7ff fda3 	bl	2e0c0 <__hi0bits>
   2e57a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2e57c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   2e580:	6018      	str	r0, [r3, #0]
   2e582:	4640      	mov	r0, r8
   2e584:	b002      	add	sp, #8
   2e586:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2e58a:	a801      	add	r0, sp, #4
   2e58c:	f7ff fdb8 	bl	2e100 <__lo0bits>
   2e590:	9b01      	ldr	r3, [sp, #4]
   2e592:	f8c8 3014 	str.w	r3, [r8, #20]
   2e596:	2101      	movs	r1, #1
   2e598:	3020      	adds	r0, #32
   2e59a:	f8c8 1010 	str.w	r1, [r8, #16]
   2e59e:	2f00      	cmp	r7, #0
   2e5a0:	d0e3      	beq.n	2e56a <__d2b+0x4e>
   2e5a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2e5a4:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
   2e5a8:	4407      	add	r7, r0
   2e5aa:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   2e5ae:	6037      	str	r7, [r6, #0]
   2e5b0:	6018      	str	r0, [r3, #0]
   2e5b2:	4640      	mov	r0, r8
   2e5b4:	b002      	add	sp, #8
   2e5b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2e5ba:	e89d 000a 	ldmia.w	sp, {r1, r3}
   2e5be:	f1c0 0220 	rsb	r2, r0, #32
   2e5c2:	fa03 f202 	lsl.w	r2, r3, r2
   2e5c6:	430a      	orrs	r2, r1
   2e5c8:	40c3      	lsrs	r3, r0
   2e5ca:	9301      	str	r3, [sp, #4]
   2e5cc:	f8c8 2014 	str.w	r2, [r8, #20]
   2e5d0:	e7c2      	b.n	2e558 <__d2b+0x3c>
   2e5d2:	bf00      	nop

0002e5d4 <_sbrk_r>:
   2e5d4:	b538      	push	{r3, r4, r5, lr}
   2e5d6:	4c07      	ldr	r4, [pc, #28]	; (2e5f4 <_sbrk_r+0x20>)
   2e5d8:	2300      	movs	r3, #0
   2e5da:	4605      	mov	r5, r0
   2e5dc:	4608      	mov	r0, r1
   2e5de:	6023      	str	r3, [r4, #0]
   2e5e0:	f7d3 f9f2 	bl	19c8 <_sbrk>
   2e5e4:	1c43      	adds	r3, r0, #1
   2e5e6:	d000      	beq.n	2e5ea <_sbrk_r+0x16>
   2e5e8:	bd38      	pop	{r3, r4, r5, pc}
   2e5ea:	6823      	ldr	r3, [r4, #0]
   2e5ec:	2b00      	cmp	r3, #0
   2e5ee:	d0fb      	beq.n	2e5e8 <_sbrk_r+0x14>
   2e5f0:	602b      	str	r3, [r5, #0]
   2e5f2:	bd38      	pop	{r3, r4, r5, pc}
   2e5f4:	20002ba4 	.word	0x20002ba4

0002e5f8 <__ssprint_r>:
   2e5f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e5fc:	6893      	ldr	r3, [r2, #8]
   2e5fe:	b083      	sub	sp, #12
   2e600:	4690      	mov	r8, r2
   2e602:	2b00      	cmp	r3, #0
   2e604:	d070      	beq.n	2e6e8 <__ssprint_r+0xf0>
   2e606:	4682      	mov	sl, r0
   2e608:	460c      	mov	r4, r1
   2e60a:	6817      	ldr	r7, [r2, #0]
   2e60c:	688d      	ldr	r5, [r1, #8]
   2e60e:	6808      	ldr	r0, [r1, #0]
   2e610:	e042      	b.n	2e698 <__ssprint_r+0xa0>
   2e612:	89a3      	ldrh	r3, [r4, #12]
   2e614:	f413 6f90 	tst.w	r3, #1152	; 0x480
   2e618:	d02e      	beq.n	2e678 <__ssprint_r+0x80>
   2e61a:	6965      	ldr	r5, [r4, #20]
   2e61c:	6921      	ldr	r1, [r4, #16]
   2e61e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   2e622:	eba0 0b01 	sub.w	fp, r0, r1
   2e626:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   2e62a:	f10b 0001 	add.w	r0, fp, #1
   2e62e:	106d      	asrs	r5, r5, #1
   2e630:	4430      	add	r0, r6
   2e632:	42a8      	cmp	r0, r5
   2e634:	462a      	mov	r2, r5
   2e636:	bf84      	itt	hi
   2e638:	4605      	movhi	r5, r0
   2e63a:	462a      	movhi	r2, r5
   2e63c:	055b      	lsls	r3, r3, #21
   2e63e:	d538      	bpl.n	2e6b2 <__ssprint_r+0xba>
   2e640:	4611      	mov	r1, r2
   2e642:	4650      	mov	r0, sl
   2e644:	f7ff fa10 	bl	2da68 <_malloc_r>
   2e648:	2800      	cmp	r0, #0
   2e64a:	d03c      	beq.n	2e6c6 <__ssprint_r+0xce>
   2e64c:	465a      	mov	r2, fp
   2e64e:	6921      	ldr	r1, [r4, #16]
   2e650:	9001      	str	r0, [sp, #4]
   2e652:	f7d1 fe35 	bl	2c0 <memcpy>
   2e656:	89a2      	ldrh	r2, [r4, #12]
   2e658:	9b01      	ldr	r3, [sp, #4]
   2e65a:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   2e65e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   2e662:	81a2      	strh	r2, [r4, #12]
   2e664:	eba5 020b 	sub.w	r2, r5, fp
   2e668:	eb03 000b 	add.w	r0, r3, fp
   2e66c:	6165      	str	r5, [r4, #20]
   2e66e:	6123      	str	r3, [r4, #16]
   2e670:	6020      	str	r0, [r4, #0]
   2e672:	60a2      	str	r2, [r4, #8]
   2e674:	4635      	mov	r5, r6
   2e676:	46b3      	mov	fp, r6
   2e678:	465a      	mov	r2, fp
   2e67a:	4649      	mov	r1, r9
   2e67c:	f7fc f99e 	bl	2a9bc <memmove>
   2e680:	f8d8 3008 	ldr.w	r3, [r8, #8]
   2e684:	68a2      	ldr	r2, [r4, #8]
   2e686:	6820      	ldr	r0, [r4, #0]
   2e688:	1b55      	subs	r5, r2, r5
   2e68a:	4458      	add	r0, fp
   2e68c:	1b9e      	subs	r6, r3, r6
   2e68e:	60a5      	str	r5, [r4, #8]
   2e690:	6020      	str	r0, [r4, #0]
   2e692:	f8c8 6008 	str.w	r6, [r8, #8]
   2e696:	b33e      	cbz	r6, 2e6e8 <__ssprint_r+0xf0>
   2e698:	687e      	ldr	r6, [r7, #4]
   2e69a:	463b      	mov	r3, r7
   2e69c:	3708      	adds	r7, #8
   2e69e:	2e00      	cmp	r6, #0
   2e6a0:	d0fa      	beq.n	2e698 <__ssprint_r+0xa0>
   2e6a2:	42ae      	cmp	r6, r5
   2e6a4:	f8d3 9000 	ldr.w	r9, [r3]
   2e6a8:	46ab      	mov	fp, r5
   2e6aa:	d2b2      	bcs.n	2e612 <__ssprint_r+0x1a>
   2e6ac:	4635      	mov	r5, r6
   2e6ae:	46b3      	mov	fp, r6
   2e6b0:	e7e2      	b.n	2e678 <__ssprint_r+0x80>
   2e6b2:	4650      	mov	r0, sl
   2e6b4:	f000 f988 	bl	2e9c8 <_realloc_r>
   2e6b8:	4603      	mov	r3, r0
   2e6ba:	2800      	cmp	r0, #0
   2e6bc:	d1d2      	bne.n	2e664 <__ssprint_r+0x6c>
   2e6be:	6921      	ldr	r1, [r4, #16]
   2e6c0:	4650      	mov	r0, sl
   2e6c2:	f000 f897 	bl	2e7f4 <_free_r>
   2e6c6:	230c      	movs	r3, #12
   2e6c8:	f8ca 3000 	str.w	r3, [sl]
   2e6cc:	89a3      	ldrh	r3, [r4, #12]
   2e6ce:	2200      	movs	r2, #0
   2e6d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2e6d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2e6d8:	81a3      	strh	r3, [r4, #12]
   2e6da:	f8c8 2008 	str.w	r2, [r8, #8]
   2e6de:	f8c8 2004 	str.w	r2, [r8, #4]
   2e6e2:	b003      	add	sp, #12
   2e6e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2e6e8:	2000      	movs	r0, #0
   2e6ea:	f8c8 0004 	str.w	r0, [r8, #4]
   2e6ee:	b003      	add	sp, #12
   2e6f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002e6f4 <_calloc_r>:
   2e6f4:	b510      	push	{r4, lr}
   2e6f6:	fb02 f101 	mul.w	r1, r2, r1
   2e6fa:	f7ff f9b5 	bl	2da68 <_malloc_r>
   2e6fe:	4604      	mov	r4, r0
   2e700:	b1d8      	cbz	r0, 2e73a <_calloc_r+0x46>
   2e702:	f850 2c04 	ldr.w	r2, [r0, #-4]
   2e706:	f022 0203 	bic.w	r2, r2, #3
   2e70a:	3a04      	subs	r2, #4
   2e70c:	2a24      	cmp	r2, #36	; 0x24
   2e70e:	d818      	bhi.n	2e742 <_calloc_r+0x4e>
   2e710:	2a13      	cmp	r2, #19
   2e712:	d914      	bls.n	2e73e <_calloc_r+0x4a>
   2e714:	2300      	movs	r3, #0
   2e716:	2a1b      	cmp	r2, #27
   2e718:	6003      	str	r3, [r0, #0]
   2e71a:	6043      	str	r3, [r0, #4]
   2e71c:	d916      	bls.n	2e74c <_calloc_r+0x58>
   2e71e:	2a24      	cmp	r2, #36	; 0x24
   2e720:	6083      	str	r3, [r0, #8]
   2e722:	60c3      	str	r3, [r0, #12]
   2e724:	bf11      	iteee	ne
   2e726:	f100 0210 	addne.w	r2, r0, #16
   2e72a:	6103      	streq	r3, [r0, #16]
   2e72c:	6143      	streq	r3, [r0, #20]
   2e72e:	f100 0218 	addeq.w	r2, r0, #24
   2e732:	2300      	movs	r3, #0
   2e734:	6013      	str	r3, [r2, #0]
   2e736:	6053      	str	r3, [r2, #4]
   2e738:	6093      	str	r3, [r2, #8]
   2e73a:	4620      	mov	r0, r4
   2e73c:	bd10      	pop	{r4, pc}
   2e73e:	4602      	mov	r2, r0
   2e740:	e7f7      	b.n	2e732 <_calloc_r+0x3e>
   2e742:	2100      	movs	r1, #0
   2e744:	f7fc f99e 	bl	2aa84 <memset>
   2e748:	4620      	mov	r0, r4
   2e74a:	bd10      	pop	{r4, pc}
   2e74c:	f100 0208 	add.w	r2, r0, #8
   2e750:	e7ef      	b.n	2e732 <_calloc_r+0x3e>
   2e752:	bf00      	nop

0002e754 <_malloc_trim_r>:
   2e754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2e756:	4f24      	ldr	r7, [pc, #144]	; (2e7e8 <_malloc_trim_r+0x94>)
   2e758:	460c      	mov	r4, r1
   2e75a:	4606      	mov	r6, r0
   2e75c:	f7ff fc34 	bl	2dfc8 <__malloc_lock>
   2e760:	68bb      	ldr	r3, [r7, #8]
   2e762:	685d      	ldr	r5, [r3, #4]
   2e764:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   2e768:	310f      	adds	r1, #15
   2e76a:	f025 0503 	bic.w	r5, r5, #3
   2e76e:	4429      	add	r1, r5
   2e770:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   2e774:	f021 010f 	bic.w	r1, r1, #15
   2e778:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   2e77c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   2e780:	db07      	blt.n	2e792 <_malloc_trim_r+0x3e>
   2e782:	2100      	movs	r1, #0
   2e784:	4630      	mov	r0, r6
   2e786:	f7ff ff25 	bl	2e5d4 <_sbrk_r>
   2e78a:	68bb      	ldr	r3, [r7, #8]
   2e78c:	442b      	add	r3, r5
   2e78e:	4298      	cmp	r0, r3
   2e790:	d004      	beq.n	2e79c <_malloc_trim_r+0x48>
   2e792:	4630      	mov	r0, r6
   2e794:	f7ff fc1e 	bl	2dfd4 <__malloc_unlock>
   2e798:	2000      	movs	r0, #0
   2e79a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2e79c:	4261      	negs	r1, r4
   2e79e:	4630      	mov	r0, r6
   2e7a0:	f7ff ff18 	bl	2e5d4 <_sbrk_r>
   2e7a4:	3001      	adds	r0, #1
   2e7a6:	d00d      	beq.n	2e7c4 <_malloc_trim_r+0x70>
   2e7a8:	4b10      	ldr	r3, [pc, #64]	; (2e7ec <_malloc_trim_r+0x98>)
   2e7aa:	68ba      	ldr	r2, [r7, #8]
   2e7ac:	6819      	ldr	r1, [r3, #0]
   2e7ae:	1b2d      	subs	r5, r5, r4
   2e7b0:	f045 0501 	orr.w	r5, r5, #1
   2e7b4:	4630      	mov	r0, r6
   2e7b6:	1b09      	subs	r1, r1, r4
   2e7b8:	6055      	str	r5, [r2, #4]
   2e7ba:	6019      	str	r1, [r3, #0]
   2e7bc:	f7ff fc0a 	bl	2dfd4 <__malloc_unlock>
   2e7c0:	2001      	movs	r0, #1
   2e7c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2e7c4:	2100      	movs	r1, #0
   2e7c6:	4630      	mov	r0, r6
   2e7c8:	f7ff ff04 	bl	2e5d4 <_sbrk_r>
   2e7cc:	68ba      	ldr	r2, [r7, #8]
   2e7ce:	1a83      	subs	r3, r0, r2
   2e7d0:	2b0f      	cmp	r3, #15
   2e7d2:	ddde      	ble.n	2e792 <_malloc_trim_r+0x3e>
   2e7d4:	4c06      	ldr	r4, [pc, #24]	; (2e7f0 <_malloc_trim_r+0x9c>)
   2e7d6:	4905      	ldr	r1, [pc, #20]	; (2e7ec <_malloc_trim_r+0x98>)
   2e7d8:	6824      	ldr	r4, [r4, #0]
   2e7da:	f043 0301 	orr.w	r3, r3, #1
   2e7de:	1b00      	subs	r0, r0, r4
   2e7e0:	6053      	str	r3, [r2, #4]
   2e7e2:	6008      	str	r0, [r1, #0]
   2e7e4:	e7d5      	b.n	2e792 <_malloc_trim_r+0x3e>
   2e7e6:	bf00      	nop
   2e7e8:	2000caa8 	.word	0x2000caa8
   2e7ec:	20002838 	.word	0x20002838
   2e7f0:	2000ceb0 	.word	0x2000ceb0

0002e7f4 <_free_r>:
   2e7f4:	2900      	cmp	r1, #0
   2e7f6:	d044      	beq.n	2e882 <_free_r+0x8e>
   2e7f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2e7fc:	460d      	mov	r5, r1
   2e7fe:	4680      	mov	r8, r0
   2e800:	f7ff fbe2 	bl	2dfc8 <__malloc_lock>
   2e804:	f855 7c04 	ldr.w	r7, [r5, #-4]
   2e808:	4969      	ldr	r1, [pc, #420]	; (2e9b0 <_free_r+0x1bc>)
   2e80a:	f027 0301 	bic.w	r3, r7, #1
   2e80e:	f1a5 0408 	sub.w	r4, r5, #8
   2e812:	18e2      	adds	r2, r4, r3
   2e814:	688e      	ldr	r6, [r1, #8]
   2e816:	6850      	ldr	r0, [r2, #4]
   2e818:	42b2      	cmp	r2, r6
   2e81a:	f020 0003 	bic.w	r0, r0, #3
   2e81e:	d05e      	beq.n	2e8de <_free_r+0xea>
   2e820:	07fe      	lsls	r6, r7, #31
   2e822:	6050      	str	r0, [r2, #4]
   2e824:	d40b      	bmi.n	2e83e <_free_r+0x4a>
   2e826:	f855 7c08 	ldr.w	r7, [r5, #-8]
   2e82a:	1be4      	subs	r4, r4, r7
   2e82c:	f101 0e08 	add.w	lr, r1, #8
   2e830:	68a5      	ldr	r5, [r4, #8]
   2e832:	4575      	cmp	r5, lr
   2e834:	443b      	add	r3, r7
   2e836:	d06d      	beq.n	2e914 <_free_r+0x120>
   2e838:	68e7      	ldr	r7, [r4, #12]
   2e83a:	60ef      	str	r7, [r5, #12]
   2e83c:	60bd      	str	r5, [r7, #8]
   2e83e:	1815      	adds	r5, r2, r0
   2e840:	686d      	ldr	r5, [r5, #4]
   2e842:	07ed      	lsls	r5, r5, #31
   2e844:	d53e      	bpl.n	2e8c4 <_free_r+0xd0>
   2e846:	f043 0201 	orr.w	r2, r3, #1
   2e84a:	6062      	str	r2, [r4, #4]
   2e84c:	50e3      	str	r3, [r4, r3]
   2e84e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   2e852:	d217      	bcs.n	2e884 <_free_r+0x90>
   2e854:	08db      	lsrs	r3, r3, #3
   2e856:	1c58      	adds	r0, r3, #1
   2e858:	109a      	asrs	r2, r3, #2
   2e85a:	684d      	ldr	r5, [r1, #4]
   2e85c:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
   2e860:	60a7      	str	r7, [r4, #8]
   2e862:	2301      	movs	r3, #1
   2e864:	4093      	lsls	r3, r2
   2e866:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
   2e86a:	432b      	orrs	r3, r5
   2e86c:	3a08      	subs	r2, #8
   2e86e:	60e2      	str	r2, [r4, #12]
   2e870:	604b      	str	r3, [r1, #4]
   2e872:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
   2e876:	60fc      	str	r4, [r7, #12]
   2e878:	4640      	mov	r0, r8
   2e87a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2e87e:	f7ff bba9 	b.w	2dfd4 <__malloc_unlock>
   2e882:	4770      	bx	lr
   2e884:	0a5a      	lsrs	r2, r3, #9
   2e886:	2a04      	cmp	r2, #4
   2e888:	d852      	bhi.n	2e930 <_free_r+0x13c>
   2e88a:	099a      	lsrs	r2, r3, #6
   2e88c:	f102 0739 	add.w	r7, r2, #57	; 0x39
   2e890:	00ff      	lsls	r7, r7, #3
   2e892:	f102 0538 	add.w	r5, r2, #56	; 0x38
   2e896:	19c8      	adds	r0, r1, r7
   2e898:	59ca      	ldr	r2, [r1, r7]
   2e89a:	3808      	subs	r0, #8
   2e89c:	4290      	cmp	r0, r2
   2e89e:	d04f      	beq.n	2e940 <_free_r+0x14c>
   2e8a0:	6851      	ldr	r1, [r2, #4]
   2e8a2:	f021 0103 	bic.w	r1, r1, #3
   2e8a6:	428b      	cmp	r3, r1
   2e8a8:	d232      	bcs.n	2e910 <_free_r+0x11c>
   2e8aa:	6892      	ldr	r2, [r2, #8]
   2e8ac:	4290      	cmp	r0, r2
   2e8ae:	d1f7      	bne.n	2e8a0 <_free_r+0xac>
   2e8b0:	68c3      	ldr	r3, [r0, #12]
   2e8b2:	60a0      	str	r0, [r4, #8]
   2e8b4:	60e3      	str	r3, [r4, #12]
   2e8b6:	609c      	str	r4, [r3, #8]
   2e8b8:	60c4      	str	r4, [r0, #12]
   2e8ba:	4640      	mov	r0, r8
   2e8bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2e8c0:	f7ff bb88 	b.w	2dfd4 <__malloc_unlock>
   2e8c4:	6895      	ldr	r5, [r2, #8]
   2e8c6:	4f3b      	ldr	r7, [pc, #236]	; (2e9b4 <_free_r+0x1c0>)
   2e8c8:	42bd      	cmp	r5, r7
   2e8ca:	4403      	add	r3, r0
   2e8cc:	d040      	beq.n	2e950 <_free_r+0x15c>
   2e8ce:	68d0      	ldr	r0, [r2, #12]
   2e8d0:	60e8      	str	r0, [r5, #12]
   2e8d2:	f043 0201 	orr.w	r2, r3, #1
   2e8d6:	6085      	str	r5, [r0, #8]
   2e8d8:	6062      	str	r2, [r4, #4]
   2e8da:	50e3      	str	r3, [r4, r3]
   2e8dc:	e7b7      	b.n	2e84e <_free_r+0x5a>
   2e8de:	07ff      	lsls	r7, r7, #31
   2e8e0:	4403      	add	r3, r0
   2e8e2:	d407      	bmi.n	2e8f4 <_free_r+0x100>
   2e8e4:	f855 2c08 	ldr.w	r2, [r5, #-8]
   2e8e8:	1aa4      	subs	r4, r4, r2
   2e8ea:	4413      	add	r3, r2
   2e8ec:	68a0      	ldr	r0, [r4, #8]
   2e8ee:	68e2      	ldr	r2, [r4, #12]
   2e8f0:	60c2      	str	r2, [r0, #12]
   2e8f2:	6090      	str	r0, [r2, #8]
   2e8f4:	4a30      	ldr	r2, [pc, #192]	; (2e9b8 <_free_r+0x1c4>)
   2e8f6:	6812      	ldr	r2, [r2, #0]
   2e8f8:	f043 0001 	orr.w	r0, r3, #1
   2e8fc:	4293      	cmp	r3, r2
   2e8fe:	6060      	str	r0, [r4, #4]
   2e900:	608c      	str	r4, [r1, #8]
   2e902:	d3b9      	bcc.n	2e878 <_free_r+0x84>
   2e904:	4b2d      	ldr	r3, [pc, #180]	; (2e9bc <_free_r+0x1c8>)
   2e906:	4640      	mov	r0, r8
   2e908:	6819      	ldr	r1, [r3, #0]
   2e90a:	f7ff ff23 	bl	2e754 <_malloc_trim_r>
   2e90e:	e7b3      	b.n	2e878 <_free_r+0x84>
   2e910:	4610      	mov	r0, r2
   2e912:	e7cd      	b.n	2e8b0 <_free_r+0xbc>
   2e914:	1811      	adds	r1, r2, r0
   2e916:	6849      	ldr	r1, [r1, #4]
   2e918:	07c9      	lsls	r1, r1, #31
   2e91a:	d444      	bmi.n	2e9a6 <_free_r+0x1b2>
   2e91c:	6891      	ldr	r1, [r2, #8]
   2e91e:	68d2      	ldr	r2, [r2, #12]
   2e920:	60ca      	str	r2, [r1, #12]
   2e922:	4403      	add	r3, r0
   2e924:	f043 0001 	orr.w	r0, r3, #1
   2e928:	6091      	str	r1, [r2, #8]
   2e92a:	6060      	str	r0, [r4, #4]
   2e92c:	50e3      	str	r3, [r4, r3]
   2e92e:	e7a3      	b.n	2e878 <_free_r+0x84>
   2e930:	2a14      	cmp	r2, #20
   2e932:	d816      	bhi.n	2e962 <_free_r+0x16e>
   2e934:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   2e938:	00ff      	lsls	r7, r7, #3
   2e93a:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   2e93e:	e7aa      	b.n	2e896 <_free_r+0xa2>
   2e940:	10aa      	asrs	r2, r5, #2
   2e942:	2301      	movs	r3, #1
   2e944:	684d      	ldr	r5, [r1, #4]
   2e946:	4093      	lsls	r3, r2
   2e948:	432b      	orrs	r3, r5
   2e94a:	604b      	str	r3, [r1, #4]
   2e94c:	4603      	mov	r3, r0
   2e94e:	e7b0      	b.n	2e8b2 <_free_r+0xbe>
   2e950:	f043 0201 	orr.w	r2, r3, #1
   2e954:	614c      	str	r4, [r1, #20]
   2e956:	610c      	str	r4, [r1, #16]
   2e958:	60e5      	str	r5, [r4, #12]
   2e95a:	60a5      	str	r5, [r4, #8]
   2e95c:	6062      	str	r2, [r4, #4]
   2e95e:	50e3      	str	r3, [r4, r3]
   2e960:	e78a      	b.n	2e878 <_free_r+0x84>
   2e962:	2a54      	cmp	r2, #84	; 0x54
   2e964:	d806      	bhi.n	2e974 <_free_r+0x180>
   2e966:	0b1a      	lsrs	r2, r3, #12
   2e968:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   2e96c:	00ff      	lsls	r7, r7, #3
   2e96e:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   2e972:	e790      	b.n	2e896 <_free_r+0xa2>
   2e974:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   2e978:	d806      	bhi.n	2e988 <_free_r+0x194>
   2e97a:	0bda      	lsrs	r2, r3, #15
   2e97c:	f102 0778 	add.w	r7, r2, #120	; 0x78
   2e980:	00ff      	lsls	r7, r7, #3
   2e982:	f102 0577 	add.w	r5, r2, #119	; 0x77
   2e986:	e786      	b.n	2e896 <_free_r+0xa2>
   2e988:	f240 5054 	movw	r0, #1364	; 0x554
   2e98c:	4282      	cmp	r2, r0
   2e98e:	d806      	bhi.n	2e99e <_free_r+0x1aa>
   2e990:	0c9a      	lsrs	r2, r3, #18
   2e992:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   2e996:	00ff      	lsls	r7, r7, #3
   2e998:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   2e99c:	e77b      	b.n	2e896 <_free_r+0xa2>
   2e99e:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
   2e9a2:	257e      	movs	r5, #126	; 0x7e
   2e9a4:	e777      	b.n	2e896 <_free_r+0xa2>
   2e9a6:	f043 0101 	orr.w	r1, r3, #1
   2e9aa:	6061      	str	r1, [r4, #4]
   2e9ac:	6013      	str	r3, [r2, #0]
   2e9ae:	e763      	b.n	2e878 <_free_r+0x84>
   2e9b0:	2000caa8 	.word	0x2000caa8
   2e9b4:	2000cab0 	.word	0x2000cab0
   2e9b8:	2000ceb4 	.word	0x2000ceb4
   2e9bc:	20002868 	.word	0x20002868

0002e9c0 <__retarget_lock_acquire_recursive>:
   2e9c0:	4770      	bx	lr
   2e9c2:	bf00      	nop

0002e9c4 <__retarget_lock_release_recursive>:
   2e9c4:	4770      	bx	lr
   2e9c6:	bf00      	nop

0002e9c8 <_realloc_r>:
   2e9c8:	2900      	cmp	r1, #0
   2e9ca:	f000 8095 	beq.w	2eaf8 <_realloc_r+0x130>
   2e9ce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e9d2:	460d      	mov	r5, r1
   2e9d4:	4616      	mov	r6, r2
   2e9d6:	b083      	sub	sp, #12
   2e9d8:	4680      	mov	r8, r0
   2e9da:	f106 070b 	add.w	r7, r6, #11
   2e9de:	f7ff faf3 	bl	2dfc8 <__malloc_lock>
   2e9e2:	f855 ec04 	ldr.w	lr, [r5, #-4]
   2e9e6:	2f16      	cmp	r7, #22
   2e9e8:	f02e 0403 	bic.w	r4, lr, #3
   2e9ec:	f1a5 0908 	sub.w	r9, r5, #8
   2e9f0:	d83c      	bhi.n	2ea6c <_realloc_r+0xa4>
   2e9f2:	2210      	movs	r2, #16
   2e9f4:	4617      	mov	r7, r2
   2e9f6:	42be      	cmp	r6, r7
   2e9f8:	d83d      	bhi.n	2ea76 <_realloc_r+0xae>
   2e9fa:	4294      	cmp	r4, r2
   2e9fc:	da43      	bge.n	2ea86 <_realloc_r+0xbe>
   2e9fe:	4bc4      	ldr	r3, [pc, #784]	; (2ed10 <_realloc_r+0x348>)
   2ea00:	6899      	ldr	r1, [r3, #8]
   2ea02:	eb09 0004 	add.w	r0, r9, r4
   2ea06:	4288      	cmp	r0, r1
   2ea08:	f000 80b4 	beq.w	2eb74 <_realloc_r+0x1ac>
   2ea0c:	6843      	ldr	r3, [r0, #4]
   2ea0e:	f023 0101 	bic.w	r1, r3, #1
   2ea12:	4401      	add	r1, r0
   2ea14:	6849      	ldr	r1, [r1, #4]
   2ea16:	07c9      	lsls	r1, r1, #31
   2ea18:	d54c      	bpl.n	2eab4 <_realloc_r+0xec>
   2ea1a:	f01e 0f01 	tst.w	lr, #1
   2ea1e:	f000 809b 	beq.w	2eb58 <_realloc_r+0x190>
   2ea22:	4631      	mov	r1, r6
   2ea24:	4640      	mov	r0, r8
   2ea26:	f7ff f81f 	bl	2da68 <_malloc_r>
   2ea2a:	4606      	mov	r6, r0
   2ea2c:	2800      	cmp	r0, #0
   2ea2e:	d03a      	beq.n	2eaa6 <_realloc_r+0xde>
   2ea30:	f855 3c04 	ldr.w	r3, [r5, #-4]
   2ea34:	f023 0301 	bic.w	r3, r3, #1
   2ea38:	444b      	add	r3, r9
   2ea3a:	f1a0 0208 	sub.w	r2, r0, #8
   2ea3e:	429a      	cmp	r2, r3
   2ea40:	f000 8121 	beq.w	2ec86 <_realloc_r+0x2be>
   2ea44:	1f22      	subs	r2, r4, #4
   2ea46:	2a24      	cmp	r2, #36	; 0x24
   2ea48:	f200 8107 	bhi.w	2ec5a <_realloc_r+0x292>
   2ea4c:	2a13      	cmp	r2, #19
   2ea4e:	f200 80db 	bhi.w	2ec08 <_realloc_r+0x240>
   2ea52:	4603      	mov	r3, r0
   2ea54:	462a      	mov	r2, r5
   2ea56:	6811      	ldr	r1, [r2, #0]
   2ea58:	6019      	str	r1, [r3, #0]
   2ea5a:	6851      	ldr	r1, [r2, #4]
   2ea5c:	6059      	str	r1, [r3, #4]
   2ea5e:	6892      	ldr	r2, [r2, #8]
   2ea60:	609a      	str	r2, [r3, #8]
   2ea62:	4629      	mov	r1, r5
   2ea64:	4640      	mov	r0, r8
   2ea66:	f7ff fec5 	bl	2e7f4 <_free_r>
   2ea6a:	e01c      	b.n	2eaa6 <_realloc_r+0xde>
   2ea6c:	f027 0707 	bic.w	r7, r7, #7
   2ea70:	2f00      	cmp	r7, #0
   2ea72:	463a      	mov	r2, r7
   2ea74:	dabf      	bge.n	2e9f6 <_realloc_r+0x2e>
   2ea76:	2600      	movs	r6, #0
   2ea78:	230c      	movs	r3, #12
   2ea7a:	4630      	mov	r0, r6
   2ea7c:	f8c8 3000 	str.w	r3, [r8]
   2ea80:	b003      	add	sp, #12
   2ea82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ea86:	462e      	mov	r6, r5
   2ea88:	1be3      	subs	r3, r4, r7
   2ea8a:	2b0f      	cmp	r3, #15
   2ea8c:	d81e      	bhi.n	2eacc <_realloc_r+0x104>
   2ea8e:	f8d9 3004 	ldr.w	r3, [r9, #4]
   2ea92:	f003 0301 	and.w	r3, r3, #1
   2ea96:	4323      	orrs	r3, r4
   2ea98:	444c      	add	r4, r9
   2ea9a:	f8c9 3004 	str.w	r3, [r9, #4]
   2ea9e:	6863      	ldr	r3, [r4, #4]
   2eaa0:	f043 0301 	orr.w	r3, r3, #1
   2eaa4:	6063      	str	r3, [r4, #4]
   2eaa6:	4640      	mov	r0, r8
   2eaa8:	f7ff fa94 	bl	2dfd4 <__malloc_unlock>
   2eaac:	4630      	mov	r0, r6
   2eaae:	b003      	add	sp, #12
   2eab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2eab4:	f023 0303 	bic.w	r3, r3, #3
   2eab8:	18e1      	adds	r1, r4, r3
   2eaba:	4291      	cmp	r1, r2
   2eabc:	db1f      	blt.n	2eafe <_realloc_r+0x136>
   2eabe:	68c3      	ldr	r3, [r0, #12]
   2eac0:	6882      	ldr	r2, [r0, #8]
   2eac2:	462e      	mov	r6, r5
   2eac4:	60d3      	str	r3, [r2, #12]
   2eac6:	460c      	mov	r4, r1
   2eac8:	609a      	str	r2, [r3, #8]
   2eaca:	e7dd      	b.n	2ea88 <_realloc_r+0xc0>
   2eacc:	f8d9 2004 	ldr.w	r2, [r9, #4]
   2ead0:	eb09 0107 	add.w	r1, r9, r7
   2ead4:	f002 0201 	and.w	r2, r2, #1
   2ead8:	444c      	add	r4, r9
   2eada:	f043 0301 	orr.w	r3, r3, #1
   2eade:	4317      	orrs	r7, r2
   2eae0:	f8c9 7004 	str.w	r7, [r9, #4]
   2eae4:	604b      	str	r3, [r1, #4]
   2eae6:	6863      	ldr	r3, [r4, #4]
   2eae8:	f043 0301 	orr.w	r3, r3, #1
   2eaec:	3108      	adds	r1, #8
   2eaee:	6063      	str	r3, [r4, #4]
   2eaf0:	4640      	mov	r0, r8
   2eaf2:	f7ff fe7f 	bl	2e7f4 <_free_r>
   2eaf6:	e7d6      	b.n	2eaa6 <_realloc_r+0xde>
   2eaf8:	4611      	mov	r1, r2
   2eafa:	f7fe bfb5 	b.w	2da68 <_malloc_r>
   2eafe:	f01e 0f01 	tst.w	lr, #1
   2eb02:	d18e      	bne.n	2ea22 <_realloc_r+0x5a>
   2eb04:	f855 1c08 	ldr.w	r1, [r5, #-8]
   2eb08:	eba9 0a01 	sub.w	sl, r9, r1
   2eb0c:	f8da 1004 	ldr.w	r1, [sl, #4]
   2eb10:	f021 0103 	bic.w	r1, r1, #3
   2eb14:	440b      	add	r3, r1
   2eb16:	4423      	add	r3, r4
   2eb18:	4293      	cmp	r3, r2
   2eb1a:	db25      	blt.n	2eb68 <_realloc_r+0x1a0>
   2eb1c:	68c2      	ldr	r2, [r0, #12]
   2eb1e:	6881      	ldr	r1, [r0, #8]
   2eb20:	4656      	mov	r6, sl
   2eb22:	60ca      	str	r2, [r1, #12]
   2eb24:	6091      	str	r1, [r2, #8]
   2eb26:	f8da 100c 	ldr.w	r1, [sl, #12]
   2eb2a:	f856 0f08 	ldr.w	r0, [r6, #8]!
   2eb2e:	1f22      	subs	r2, r4, #4
   2eb30:	2a24      	cmp	r2, #36	; 0x24
   2eb32:	60c1      	str	r1, [r0, #12]
   2eb34:	6088      	str	r0, [r1, #8]
   2eb36:	f200 8094 	bhi.w	2ec62 <_realloc_r+0x29a>
   2eb3a:	2a13      	cmp	r2, #19
   2eb3c:	d96f      	bls.n	2ec1e <_realloc_r+0x256>
   2eb3e:	6829      	ldr	r1, [r5, #0]
   2eb40:	f8ca 1008 	str.w	r1, [sl, #8]
   2eb44:	6869      	ldr	r1, [r5, #4]
   2eb46:	f8ca 100c 	str.w	r1, [sl, #12]
   2eb4a:	2a1b      	cmp	r2, #27
   2eb4c:	f200 80a2 	bhi.w	2ec94 <_realloc_r+0x2cc>
   2eb50:	3508      	adds	r5, #8
   2eb52:	f10a 0210 	add.w	r2, sl, #16
   2eb56:	e063      	b.n	2ec20 <_realloc_r+0x258>
   2eb58:	f855 3c08 	ldr.w	r3, [r5, #-8]
   2eb5c:	eba9 0a03 	sub.w	sl, r9, r3
   2eb60:	f8da 1004 	ldr.w	r1, [sl, #4]
   2eb64:	f021 0103 	bic.w	r1, r1, #3
   2eb68:	1863      	adds	r3, r4, r1
   2eb6a:	4293      	cmp	r3, r2
   2eb6c:	f6ff af59 	blt.w	2ea22 <_realloc_r+0x5a>
   2eb70:	4656      	mov	r6, sl
   2eb72:	e7d8      	b.n	2eb26 <_realloc_r+0x15e>
   2eb74:	6841      	ldr	r1, [r0, #4]
   2eb76:	f021 0b03 	bic.w	fp, r1, #3
   2eb7a:	44a3      	add	fp, r4
   2eb7c:	f107 0010 	add.w	r0, r7, #16
   2eb80:	4583      	cmp	fp, r0
   2eb82:	da56      	bge.n	2ec32 <_realloc_r+0x26a>
   2eb84:	f01e 0f01 	tst.w	lr, #1
   2eb88:	f47f af4b 	bne.w	2ea22 <_realloc_r+0x5a>
   2eb8c:	f855 1c08 	ldr.w	r1, [r5, #-8]
   2eb90:	eba9 0a01 	sub.w	sl, r9, r1
   2eb94:	f8da 1004 	ldr.w	r1, [sl, #4]
   2eb98:	f021 0103 	bic.w	r1, r1, #3
   2eb9c:	448b      	add	fp, r1
   2eb9e:	4558      	cmp	r0, fp
   2eba0:	dce2      	bgt.n	2eb68 <_realloc_r+0x1a0>
   2eba2:	4656      	mov	r6, sl
   2eba4:	f8da 100c 	ldr.w	r1, [sl, #12]
   2eba8:	f856 0f08 	ldr.w	r0, [r6, #8]!
   2ebac:	1f22      	subs	r2, r4, #4
   2ebae:	2a24      	cmp	r2, #36	; 0x24
   2ebb0:	60c1      	str	r1, [r0, #12]
   2ebb2:	6088      	str	r0, [r1, #8]
   2ebb4:	f200 808f 	bhi.w	2ecd6 <_realloc_r+0x30e>
   2ebb8:	2a13      	cmp	r2, #19
   2ebba:	f240 808a 	bls.w	2ecd2 <_realloc_r+0x30a>
   2ebbe:	6829      	ldr	r1, [r5, #0]
   2ebc0:	f8ca 1008 	str.w	r1, [sl, #8]
   2ebc4:	6869      	ldr	r1, [r5, #4]
   2ebc6:	f8ca 100c 	str.w	r1, [sl, #12]
   2ebca:	2a1b      	cmp	r2, #27
   2ebcc:	f200 808a 	bhi.w	2ece4 <_realloc_r+0x31c>
   2ebd0:	3508      	adds	r5, #8
   2ebd2:	f10a 0210 	add.w	r2, sl, #16
   2ebd6:	6829      	ldr	r1, [r5, #0]
   2ebd8:	6011      	str	r1, [r2, #0]
   2ebda:	6869      	ldr	r1, [r5, #4]
   2ebdc:	6051      	str	r1, [r2, #4]
   2ebde:	68a9      	ldr	r1, [r5, #8]
   2ebe0:	6091      	str	r1, [r2, #8]
   2ebe2:	eb0a 0107 	add.w	r1, sl, r7
   2ebe6:	ebab 0207 	sub.w	r2, fp, r7
   2ebea:	f042 0201 	orr.w	r2, r2, #1
   2ebee:	6099      	str	r1, [r3, #8]
   2ebf0:	604a      	str	r2, [r1, #4]
   2ebf2:	f8da 3004 	ldr.w	r3, [sl, #4]
   2ebf6:	f003 0301 	and.w	r3, r3, #1
   2ebfa:	431f      	orrs	r7, r3
   2ebfc:	4640      	mov	r0, r8
   2ebfe:	f8ca 7004 	str.w	r7, [sl, #4]
   2ec02:	f7ff f9e7 	bl	2dfd4 <__malloc_unlock>
   2ec06:	e751      	b.n	2eaac <_realloc_r+0xe4>
   2ec08:	682b      	ldr	r3, [r5, #0]
   2ec0a:	6003      	str	r3, [r0, #0]
   2ec0c:	686b      	ldr	r3, [r5, #4]
   2ec0e:	6043      	str	r3, [r0, #4]
   2ec10:	2a1b      	cmp	r2, #27
   2ec12:	d82d      	bhi.n	2ec70 <_realloc_r+0x2a8>
   2ec14:	f100 0308 	add.w	r3, r0, #8
   2ec18:	f105 0208 	add.w	r2, r5, #8
   2ec1c:	e71b      	b.n	2ea56 <_realloc_r+0x8e>
   2ec1e:	4632      	mov	r2, r6
   2ec20:	6829      	ldr	r1, [r5, #0]
   2ec22:	6011      	str	r1, [r2, #0]
   2ec24:	6869      	ldr	r1, [r5, #4]
   2ec26:	6051      	str	r1, [r2, #4]
   2ec28:	68a9      	ldr	r1, [r5, #8]
   2ec2a:	6091      	str	r1, [r2, #8]
   2ec2c:	461c      	mov	r4, r3
   2ec2e:	46d1      	mov	r9, sl
   2ec30:	e72a      	b.n	2ea88 <_realloc_r+0xc0>
   2ec32:	eb09 0107 	add.w	r1, r9, r7
   2ec36:	ebab 0b07 	sub.w	fp, fp, r7
   2ec3a:	f04b 0201 	orr.w	r2, fp, #1
   2ec3e:	6099      	str	r1, [r3, #8]
   2ec40:	604a      	str	r2, [r1, #4]
   2ec42:	f855 3c04 	ldr.w	r3, [r5, #-4]
   2ec46:	f003 0301 	and.w	r3, r3, #1
   2ec4a:	431f      	orrs	r7, r3
   2ec4c:	4640      	mov	r0, r8
   2ec4e:	f845 7c04 	str.w	r7, [r5, #-4]
   2ec52:	f7ff f9bf 	bl	2dfd4 <__malloc_unlock>
   2ec56:	462e      	mov	r6, r5
   2ec58:	e728      	b.n	2eaac <_realloc_r+0xe4>
   2ec5a:	4629      	mov	r1, r5
   2ec5c:	f7fb feae 	bl	2a9bc <memmove>
   2ec60:	e6ff      	b.n	2ea62 <_realloc_r+0x9a>
   2ec62:	4629      	mov	r1, r5
   2ec64:	4630      	mov	r0, r6
   2ec66:	461c      	mov	r4, r3
   2ec68:	46d1      	mov	r9, sl
   2ec6a:	f7fb fea7 	bl	2a9bc <memmove>
   2ec6e:	e70b      	b.n	2ea88 <_realloc_r+0xc0>
   2ec70:	68ab      	ldr	r3, [r5, #8]
   2ec72:	6083      	str	r3, [r0, #8]
   2ec74:	68eb      	ldr	r3, [r5, #12]
   2ec76:	60c3      	str	r3, [r0, #12]
   2ec78:	2a24      	cmp	r2, #36	; 0x24
   2ec7a:	d017      	beq.n	2ecac <_realloc_r+0x2e4>
   2ec7c:	f100 0310 	add.w	r3, r0, #16
   2ec80:	f105 0210 	add.w	r2, r5, #16
   2ec84:	e6e7      	b.n	2ea56 <_realloc_r+0x8e>
   2ec86:	f850 3c04 	ldr.w	r3, [r0, #-4]
   2ec8a:	f023 0303 	bic.w	r3, r3, #3
   2ec8e:	441c      	add	r4, r3
   2ec90:	462e      	mov	r6, r5
   2ec92:	e6f9      	b.n	2ea88 <_realloc_r+0xc0>
   2ec94:	68a9      	ldr	r1, [r5, #8]
   2ec96:	f8ca 1010 	str.w	r1, [sl, #16]
   2ec9a:	68e9      	ldr	r1, [r5, #12]
   2ec9c:	f8ca 1014 	str.w	r1, [sl, #20]
   2eca0:	2a24      	cmp	r2, #36	; 0x24
   2eca2:	d00c      	beq.n	2ecbe <_realloc_r+0x2f6>
   2eca4:	3510      	adds	r5, #16
   2eca6:	f10a 0218 	add.w	r2, sl, #24
   2ecaa:	e7b9      	b.n	2ec20 <_realloc_r+0x258>
   2ecac:	692b      	ldr	r3, [r5, #16]
   2ecae:	6103      	str	r3, [r0, #16]
   2ecb0:	696b      	ldr	r3, [r5, #20]
   2ecb2:	6143      	str	r3, [r0, #20]
   2ecb4:	f105 0218 	add.w	r2, r5, #24
   2ecb8:	f100 0318 	add.w	r3, r0, #24
   2ecbc:	e6cb      	b.n	2ea56 <_realloc_r+0x8e>
   2ecbe:	692a      	ldr	r2, [r5, #16]
   2ecc0:	f8ca 2018 	str.w	r2, [sl, #24]
   2ecc4:	696a      	ldr	r2, [r5, #20]
   2ecc6:	f8ca 201c 	str.w	r2, [sl, #28]
   2ecca:	3518      	adds	r5, #24
   2eccc:	f10a 0220 	add.w	r2, sl, #32
   2ecd0:	e7a6      	b.n	2ec20 <_realloc_r+0x258>
   2ecd2:	4632      	mov	r2, r6
   2ecd4:	e77f      	b.n	2ebd6 <_realloc_r+0x20e>
   2ecd6:	4629      	mov	r1, r5
   2ecd8:	4630      	mov	r0, r6
   2ecda:	9301      	str	r3, [sp, #4]
   2ecdc:	f7fb fe6e 	bl	2a9bc <memmove>
   2ece0:	9b01      	ldr	r3, [sp, #4]
   2ece2:	e77e      	b.n	2ebe2 <_realloc_r+0x21a>
   2ece4:	68a9      	ldr	r1, [r5, #8]
   2ece6:	f8ca 1010 	str.w	r1, [sl, #16]
   2ecea:	68e9      	ldr	r1, [r5, #12]
   2ecec:	f8ca 1014 	str.w	r1, [sl, #20]
   2ecf0:	2a24      	cmp	r2, #36	; 0x24
   2ecf2:	d003      	beq.n	2ecfc <_realloc_r+0x334>
   2ecf4:	3510      	adds	r5, #16
   2ecf6:	f10a 0218 	add.w	r2, sl, #24
   2ecfa:	e76c      	b.n	2ebd6 <_realloc_r+0x20e>
   2ecfc:	692a      	ldr	r2, [r5, #16]
   2ecfe:	f8ca 2018 	str.w	r2, [sl, #24]
   2ed02:	696a      	ldr	r2, [r5, #20]
   2ed04:	f8ca 201c 	str.w	r2, [sl, #28]
   2ed08:	3518      	adds	r5, #24
   2ed0a:	f10a 0220 	add.w	r2, sl, #32
   2ed0e:	e762      	b.n	2ebd6 <_realloc_r+0x20e>
   2ed10:	2000caa8 	.word	0x2000caa8
